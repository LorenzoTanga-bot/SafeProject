
cmwx1zzabz_0xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000110b0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f08  08011170  08011170  00021170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012078  08012078  00022078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012080  08012080  00022080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012084  08012084  00022084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000019c  20000000  08012088  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001540  2000019c  08012224  0003019c  2**2
                  ALLOC
  8 ._user_heap_stack 00000804  200016dc  08012224  000316dc  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0003019c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0005e648  00000000  00000000  000301c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000c691  00000000  00000000  0008e80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002140  00000000  00000000  0009aea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00003650  00000000  00000000  0009cfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00020db3  00000000  00000000  000a0630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000402db  00000000  00000000  000c13e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000af1c5  00000000  00000000  001016be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001b0883  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006150  00000000  00000000  001b08d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    0001bdb0  00000000  00000000  001b6a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000019c 	.word	0x2000019c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08011158 	.word	0x08011158

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001a0 	.word	0x200001a0
 8000104:	08011158 	.word	0x08011158

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__gnu_thumb1_case_uhi>:
 8000154:	b403      	push	{r0, r1}
 8000156:	4671      	mov	r1, lr
 8000158:	0849      	lsrs	r1, r1, #1
 800015a:	0040      	lsls	r0, r0, #1
 800015c:	0049      	lsls	r1, r1, #1
 800015e:	5a09      	ldrh	r1, [r1, r0]
 8000160:	0049      	lsls	r1, r1, #1
 8000162:	448e      	add	lr, r1
 8000164:	bc03      	pop	{r0, r1}
 8000166:	4770      	bx	lr

08000168 <__udivsi3>:
 8000168:	2200      	movs	r2, #0
 800016a:	0843      	lsrs	r3, r0, #1
 800016c:	428b      	cmp	r3, r1
 800016e:	d374      	bcc.n	800025a <__udivsi3+0xf2>
 8000170:	0903      	lsrs	r3, r0, #4
 8000172:	428b      	cmp	r3, r1
 8000174:	d35f      	bcc.n	8000236 <__udivsi3+0xce>
 8000176:	0a03      	lsrs	r3, r0, #8
 8000178:	428b      	cmp	r3, r1
 800017a:	d344      	bcc.n	8000206 <__udivsi3+0x9e>
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d328      	bcc.n	80001d4 <__udivsi3+0x6c>
 8000182:	0c03      	lsrs	r3, r0, #16
 8000184:	428b      	cmp	r3, r1
 8000186:	d30d      	bcc.n	80001a4 <__udivsi3+0x3c>
 8000188:	22ff      	movs	r2, #255	; 0xff
 800018a:	0209      	lsls	r1, r1, #8
 800018c:	ba12      	rev	r2, r2
 800018e:	0c03      	lsrs	r3, r0, #16
 8000190:	428b      	cmp	r3, r1
 8000192:	d302      	bcc.n	800019a <__udivsi3+0x32>
 8000194:	1212      	asrs	r2, r2, #8
 8000196:	0209      	lsls	r1, r1, #8
 8000198:	d065      	beq.n	8000266 <__udivsi3+0xfe>
 800019a:	0b03      	lsrs	r3, r0, #12
 800019c:	428b      	cmp	r3, r1
 800019e:	d319      	bcc.n	80001d4 <__udivsi3+0x6c>
 80001a0:	e000      	b.n	80001a4 <__udivsi3+0x3c>
 80001a2:	0a09      	lsrs	r1, r1, #8
 80001a4:	0bc3      	lsrs	r3, r0, #15
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x46>
 80001aa:	03cb      	lsls	r3, r1, #15
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b83      	lsrs	r3, r0, #14
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x52>
 80001b6:	038b      	lsls	r3, r1, #14
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0b43      	lsrs	r3, r0, #13
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x5e>
 80001c2:	034b      	lsls	r3, r1, #13
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0b03      	lsrs	r3, r0, #12
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x6a>
 80001ce:	030b      	lsls	r3, r1, #12
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0ac3      	lsrs	r3, r0, #11
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x76>
 80001da:	02cb      	lsls	r3, r1, #11
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a83      	lsrs	r3, r0, #10
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x82>
 80001e6:	028b      	lsls	r3, r1, #10
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0a43      	lsrs	r3, r0, #9
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x8e>
 80001f2:	024b      	lsls	r3, r1, #9
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0a03      	lsrs	r3, r0, #8
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x9a>
 80001fe:	020b      	lsls	r3, r1, #8
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	d2cd      	bcs.n	80001a2 <__udivsi3+0x3a>
 8000206:	09c3      	lsrs	r3, r0, #7
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xa8>
 800020c:	01cb      	lsls	r3, r1, #7
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0983      	lsrs	r3, r0, #6
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xb4>
 8000218:	018b      	lsls	r3, r1, #6
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0943      	lsrs	r3, r0, #5
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xc0>
 8000224:	014b      	lsls	r3, r1, #5
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xcc>
 8000230:	010b      	lsls	r3, r1, #4
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	08c3      	lsrs	r3, r0, #3
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xd8>
 800023c:	00cb      	lsls	r3, r1, #3
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	0883      	lsrs	r3, r0, #2
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xe4>
 8000248:	008b      	lsls	r3, r1, #2
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0843      	lsrs	r3, r0, #1
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xf0>
 8000254:	004b      	lsls	r3, r1, #1
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	1a41      	subs	r1, r0, r1
 800025c:	d200      	bcs.n	8000260 <__udivsi3+0xf8>
 800025e:	4601      	mov	r1, r0
 8000260:	4152      	adcs	r2, r2
 8000262:	4610      	mov	r0, r2
 8000264:	4770      	bx	lr
 8000266:	e7ff      	b.n	8000268 <__udivsi3+0x100>
 8000268:	b501      	push	{r0, lr}
 800026a:	2000      	movs	r0, #0
 800026c:	f000 f8f0 	bl	8000450 <__aeabi_idiv0>
 8000270:	bd02      	pop	{r1, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_uidivmod>:
 8000274:	2900      	cmp	r1, #0
 8000276:	d0f7      	beq.n	8000268 <__udivsi3+0x100>
 8000278:	e776      	b.n	8000168 <__udivsi3>
 800027a:	4770      	bx	lr

0800027c <__divsi3>:
 800027c:	4603      	mov	r3, r0
 800027e:	430b      	orrs	r3, r1
 8000280:	d47f      	bmi.n	8000382 <__divsi3+0x106>
 8000282:	2200      	movs	r2, #0
 8000284:	0843      	lsrs	r3, r0, #1
 8000286:	428b      	cmp	r3, r1
 8000288:	d374      	bcc.n	8000374 <__divsi3+0xf8>
 800028a:	0903      	lsrs	r3, r0, #4
 800028c:	428b      	cmp	r3, r1
 800028e:	d35f      	bcc.n	8000350 <__divsi3+0xd4>
 8000290:	0a03      	lsrs	r3, r0, #8
 8000292:	428b      	cmp	r3, r1
 8000294:	d344      	bcc.n	8000320 <__divsi3+0xa4>
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d328      	bcc.n	80002ee <__divsi3+0x72>
 800029c:	0c03      	lsrs	r3, r0, #16
 800029e:	428b      	cmp	r3, r1
 80002a0:	d30d      	bcc.n	80002be <__divsi3+0x42>
 80002a2:	22ff      	movs	r2, #255	; 0xff
 80002a4:	0209      	lsls	r1, r1, #8
 80002a6:	ba12      	rev	r2, r2
 80002a8:	0c03      	lsrs	r3, r0, #16
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d302      	bcc.n	80002b4 <__divsi3+0x38>
 80002ae:	1212      	asrs	r2, r2, #8
 80002b0:	0209      	lsls	r1, r1, #8
 80002b2:	d065      	beq.n	8000380 <__divsi3+0x104>
 80002b4:	0b03      	lsrs	r3, r0, #12
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d319      	bcc.n	80002ee <__divsi3+0x72>
 80002ba:	e000      	b.n	80002be <__divsi3+0x42>
 80002bc:	0a09      	lsrs	r1, r1, #8
 80002be:	0bc3      	lsrs	r3, r0, #15
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x4c>
 80002c4:	03cb      	lsls	r3, r1, #15
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b83      	lsrs	r3, r0, #14
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x58>
 80002d0:	038b      	lsls	r3, r1, #14
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0b43      	lsrs	r3, r0, #13
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x64>
 80002dc:	034b      	lsls	r3, r1, #13
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0b03      	lsrs	r3, r0, #12
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x70>
 80002e8:	030b      	lsls	r3, r1, #12
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0ac3      	lsrs	r3, r0, #11
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x7c>
 80002f4:	02cb      	lsls	r3, r1, #11
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a83      	lsrs	r3, r0, #10
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x88>
 8000300:	028b      	lsls	r3, r1, #10
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0a43      	lsrs	r3, r0, #9
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x94>
 800030c:	024b      	lsls	r3, r1, #9
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0a03      	lsrs	r3, r0, #8
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0xa0>
 8000318:	020b      	lsls	r3, r1, #8
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	d2cd      	bcs.n	80002bc <__divsi3+0x40>
 8000320:	09c3      	lsrs	r3, r0, #7
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xae>
 8000326:	01cb      	lsls	r3, r1, #7
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0983      	lsrs	r3, r0, #6
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xba>
 8000332:	018b      	lsls	r3, r1, #6
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0943      	lsrs	r3, r0, #5
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xc6>
 800033e:	014b      	lsls	r3, r1, #5
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xd2>
 800034a:	010b      	lsls	r3, r1, #4
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	08c3      	lsrs	r3, r0, #3
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xde>
 8000356:	00cb      	lsls	r3, r1, #3
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	0883      	lsrs	r3, r0, #2
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xea>
 8000362:	008b      	lsls	r3, r1, #2
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0843      	lsrs	r3, r0, #1
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xf6>
 800036e:	004b      	lsls	r3, r1, #1
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	1a41      	subs	r1, r0, r1
 8000376:	d200      	bcs.n	800037a <__divsi3+0xfe>
 8000378:	4601      	mov	r1, r0
 800037a:	4152      	adcs	r2, r2
 800037c:	4610      	mov	r0, r2
 800037e:	4770      	bx	lr
 8000380:	e05d      	b.n	800043e <__divsi3+0x1c2>
 8000382:	0fca      	lsrs	r2, r1, #31
 8000384:	d000      	beq.n	8000388 <__divsi3+0x10c>
 8000386:	4249      	negs	r1, r1
 8000388:	1003      	asrs	r3, r0, #32
 800038a:	d300      	bcc.n	800038e <__divsi3+0x112>
 800038c:	4240      	negs	r0, r0
 800038e:	4053      	eors	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	469c      	mov	ip, r3
 8000394:	0903      	lsrs	r3, r0, #4
 8000396:	428b      	cmp	r3, r1
 8000398:	d32d      	bcc.n	80003f6 <__divsi3+0x17a>
 800039a:	0a03      	lsrs	r3, r0, #8
 800039c:	428b      	cmp	r3, r1
 800039e:	d312      	bcc.n	80003c6 <__divsi3+0x14a>
 80003a0:	22fc      	movs	r2, #252	; 0xfc
 80003a2:	0189      	lsls	r1, r1, #6
 80003a4:	ba12      	rev	r2, r2
 80003a6:	0a03      	lsrs	r3, r0, #8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d30c      	bcc.n	80003c6 <__divsi3+0x14a>
 80003ac:	0189      	lsls	r1, r1, #6
 80003ae:	1192      	asrs	r2, r2, #6
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d308      	bcc.n	80003c6 <__divsi3+0x14a>
 80003b4:	0189      	lsls	r1, r1, #6
 80003b6:	1192      	asrs	r2, r2, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d304      	bcc.n	80003c6 <__divsi3+0x14a>
 80003bc:	0189      	lsls	r1, r1, #6
 80003be:	d03a      	beq.n	8000436 <__divsi3+0x1ba>
 80003c0:	1192      	asrs	r2, r2, #6
 80003c2:	e000      	b.n	80003c6 <__divsi3+0x14a>
 80003c4:	0989      	lsrs	r1, r1, #6
 80003c6:	09c3      	lsrs	r3, r0, #7
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x154>
 80003cc:	01cb      	lsls	r3, r1, #7
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0983      	lsrs	r3, r0, #6
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x160>
 80003d8:	018b      	lsls	r3, r1, #6
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	0943      	lsrs	r3, r0, #5
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x16c>
 80003e4:	014b      	lsls	r3, r1, #5
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0903      	lsrs	r3, r0, #4
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x178>
 80003f0:	010b      	lsls	r3, r1, #4
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	08c3      	lsrs	r3, r0, #3
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x184>
 80003fc:	00cb      	lsls	r3, r1, #3
 80003fe:	1ac0      	subs	r0, r0, r3
 8000400:	4152      	adcs	r2, r2
 8000402:	0883      	lsrs	r3, r0, #2
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x190>
 8000408:	008b      	lsls	r3, r1, #2
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	d2d9      	bcs.n	80003c4 <__divsi3+0x148>
 8000410:	0843      	lsrs	r3, r0, #1
 8000412:	428b      	cmp	r3, r1
 8000414:	d301      	bcc.n	800041a <__divsi3+0x19e>
 8000416:	004b      	lsls	r3, r1, #1
 8000418:	1ac0      	subs	r0, r0, r3
 800041a:	4152      	adcs	r2, r2
 800041c:	1a41      	subs	r1, r0, r1
 800041e:	d200      	bcs.n	8000422 <__divsi3+0x1a6>
 8000420:	4601      	mov	r1, r0
 8000422:	4663      	mov	r3, ip
 8000424:	4152      	adcs	r2, r2
 8000426:	105b      	asrs	r3, r3, #1
 8000428:	4610      	mov	r0, r2
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x1b4>
 800042c:	4240      	negs	r0, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d500      	bpl.n	8000434 <__divsi3+0x1b8>
 8000432:	4249      	negs	r1, r1
 8000434:	4770      	bx	lr
 8000436:	4663      	mov	r3, ip
 8000438:	105b      	asrs	r3, r3, #1
 800043a:	d300      	bcc.n	800043e <__divsi3+0x1c2>
 800043c:	4240      	negs	r0, r0
 800043e:	b501      	push	{r0, lr}
 8000440:	2000      	movs	r0, #0
 8000442:	f000 f805 	bl	8000450 <__aeabi_idiv0>
 8000446:	bd02      	pop	{r1, pc}

08000448 <__aeabi_idivmod>:
 8000448:	2900      	cmp	r1, #0
 800044a:	d0f8      	beq.n	800043e <__divsi3+0x1c2>
 800044c:	e716      	b.n	800027c <__divsi3>
 800044e:	4770      	bx	lr

08000450 <__aeabi_idiv0>:
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_cdrcmple>:
 8000454:	4684      	mov	ip, r0
 8000456:	1c10      	adds	r0, r2, #0
 8000458:	4662      	mov	r2, ip
 800045a:	468c      	mov	ip, r1
 800045c:	1c19      	adds	r1, r3, #0
 800045e:	4663      	mov	r3, ip
 8000460:	e000      	b.n	8000464 <__aeabi_cdcmpeq>
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_cdcmpeq>:
 8000464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000466:	f001 ff5b 	bl	8002320 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	d401      	bmi.n	8000472 <__aeabi_cdcmpeq+0xe>
 800046e:	2100      	movs	r1, #0
 8000470:	42c8      	cmn	r0, r1
 8000472:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000474 <__aeabi_dcmpeq>:
 8000474:	b510      	push	{r4, lr}
 8000476:	f001 fea5 	bl	80021c4 <__eqdf2>
 800047a:	4240      	negs	r0, r0
 800047c:	3001      	adds	r0, #1
 800047e:	bd10      	pop	{r4, pc}

08000480 <__aeabi_dcmplt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ff4d 	bl	8002320 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	db01      	blt.n	800048e <__aeabi_dcmplt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmple>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff43 	bl	8002320 <__ledf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dd01      	ble.n	80004a2 <__aeabi_dcmple+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpgt>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 fec7 	bl	800223c <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dc01      	bgt.n	80004b6 <__aeabi_dcmpgt+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_dcmpge>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f001 febd 	bl	800223c <__gedf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	da01      	bge.n	80004ca <__aeabi_dcmpge+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_cfrcmple>:
 80004d0:	4684      	mov	ip, r0
 80004d2:	1c08      	adds	r0, r1, #0
 80004d4:	4661      	mov	r1, ip
 80004d6:	e7ff      	b.n	80004d8 <__aeabi_cfcmpeq>

080004d8 <__aeabi_cfcmpeq>:
 80004d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004da:	f000 fc99 	bl	8000e10 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	d401      	bmi.n	80004e6 <__aeabi_cfcmpeq+0xe>
 80004e2:	2100      	movs	r1, #0
 80004e4:	42c8      	cmn	r0, r1
 80004e6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004e8 <__aeabi_fcmpeq>:
 80004e8:	b510      	push	{r4, lr}
 80004ea:	f000 fc1d 	bl	8000d28 <__eqsf2>
 80004ee:	4240      	negs	r0, r0
 80004f0:	3001      	adds	r0, #1
 80004f2:	bd10      	pop	{r4, pc}

080004f4 <__aeabi_fcmplt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc8b 	bl	8000e10 <__lesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	db01      	blt.n	8000502 <__aeabi_fcmplt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmple>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc81 	bl	8000e10 <__lesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	dd01      	ble.n	8000516 <__aeabi_fcmple+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_fcmpgt>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fc2b 	bl	8000d78 <__gesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	dc01      	bgt.n	800052a <__aeabi_fcmpgt+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			; (mov r8, r8)

08000530 <__aeabi_fcmpge>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fc21 	bl	8000d78 <__gesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	da01      	bge.n	800053e <__aeabi_fcmpge+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_uldivmod>:
 8000544:	2b00      	cmp	r3, #0
 8000546:	d111      	bne.n	800056c <__aeabi_uldivmod+0x28>
 8000548:	2a00      	cmp	r2, #0
 800054a:	d10f      	bne.n	800056c <__aeabi_uldivmod+0x28>
 800054c:	2900      	cmp	r1, #0
 800054e:	d100      	bne.n	8000552 <__aeabi_uldivmod+0xe>
 8000550:	2800      	cmp	r0, #0
 8000552:	d002      	beq.n	800055a <__aeabi_uldivmod+0x16>
 8000554:	2100      	movs	r1, #0
 8000556:	43c9      	mvns	r1, r1
 8000558:	1c08      	adds	r0, r1, #0
 800055a:	b407      	push	{r0, r1, r2}
 800055c:	4802      	ldr	r0, [pc, #8]	; (8000568 <__aeabi_uldivmod+0x24>)
 800055e:	a102      	add	r1, pc, #8	; (adr r1, 8000568 <__aeabi_uldivmod+0x24>)
 8000560:	1840      	adds	r0, r0, r1
 8000562:	9002      	str	r0, [sp, #8]
 8000564:	bd03      	pop	{r0, r1, pc}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	fffffee9 	.word	0xfffffee9
 800056c:	b403      	push	{r0, r1}
 800056e:	4668      	mov	r0, sp
 8000570:	b501      	push	{r0, lr}
 8000572:	9802      	ldr	r0, [sp, #8]
 8000574:	f000 f864 	bl	8000640 <__udivmoddi4>
 8000578:	9b01      	ldr	r3, [sp, #4]
 800057a:	469e      	mov	lr, r3
 800057c:	b002      	add	sp, #8
 800057e:	bc0c      	pop	{r2, r3}
 8000580:	4770      	bx	lr
 8000582:	46c0      	nop			; (mov r8, r8)

08000584 <__aeabi_lmul>:
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	0415      	lsls	r5, r2, #16
 8000588:	0c2d      	lsrs	r5, r5, #16
 800058a:	000f      	movs	r7, r1
 800058c:	0001      	movs	r1, r0
 800058e:	002e      	movs	r6, r5
 8000590:	46c6      	mov	lr, r8
 8000592:	4684      	mov	ip, r0
 8000594:	0400      	lsls	r0, r0, #16
 8000596:	0c14      	lsrs	r4, r2, #16
 8000598:	0c00      	lsrs	r0, r0, #16
 800059a:	0c09      	lsrs	r1, r1, #16
 800059c:	4346      	muls	r6, r0
 800059e:	434d      	muls	r5, r1
 80005a0:	4360      	muls	r0, r4
 80005a2:	4361      	muls	r1, r4
 80005a4:	1940      	adds	r0, r0, r5
 80005a6:	0c34      	lsrs	r4, r6, #16
 80005a8:	1824      	adds	r4, r4, r0
 80005aa:	b500      	push	{lr}
 80005ac:	42a5      	cmp	r5, r4
 80005ae:	d903      	bls.n	80005b8 <__aeabi_lmul+0x34>
 80005b0:	2080      	movs	r0, #128	; 0x80
 80005b2:	0240      	lsls	r0, r0, #9
 80005b4:	4680      	mov	r8, r0
 80005b6:	4441      	add	r1, r8
 80005b8:	0c25      	lsrs	r5, r4, #16
 80005ba:	186d      	adds	r5, r5, r1
 80005bc:	4661      	mov	r1, ip
 80005be:	4359      	muls	r1, r3
 80005c0:	437a      	muls	r2, r7
 80005c2:	0430      	lsls	r0, r6, #16
 80005c4:	1949      	adds	r1, r1, r5
 80005c6:	0424      	lsls	r4, r4, #16
 80005c8:	0c00      	lsrs	r0, r0, #16
 80005ca:	1820      	adds	r0, r4, r0
 80005cc:	1889      	adds	r1, r1, r2
 80005ce:	bc80      	pop	{r7}
 80005d0:	46b8      	mov	r8, r7
 80005d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005d4 <__aeabi_f2uiz>:
 80005d4:	219e      	movs	r1, #158	; 0x9e
 80005d6:	b510      	push	{r4, lr}
 80005d8:	05c9      	lsls	r1, r1, #23
 80005da:	1c04      	adds	r4, r0, #0
 80005dc:	f7ff ffa8 	bl	8000530 <__aeabi_fcmpge>
 80005e0:	2800      	cmp	r0, #0
 80005e2:	d103      	bne.n	80005ec <__aeabi_f2uiz+0x18>
 80005e4:	1c20      	adds	r0, r4, #0
 80005e6:	f000 ff3f 	bl	8001468 <__aeabi_f2iz>
 80005ea:	bd10      	pop	{r4, pc}
 80005ec:	219e      	movs	r1, #158	; 0x9e
 80005ee:	1c20      	adds	r0, r4, #0
 80005f0:	05c9      	lsls	r1, r1, #23
 80005f2:	f000 fd71 	bl	80010d8 <__aeabi_fsub>
 80005f6:	f000 ff37 	bl	8001468 <__aeabi_f2iz>
 80005fa:	2380      	movs	r3, #128	; 0x80
 80005fc:	061b      	lsls	r3, r3, #24
 80005fe:	469c      	mov	ip, r3
 8000600:	4460      	add	r0, ip
 8000602:	e7f2      	b.n	80005ea <__aeabi_f2uiz+0x16>

08000604 <__aeabi_d2uiz>:
 8000604:	b570      	push	{r4, r5, r6, lr}
 8000606:	2200      	movs	r2, #0
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <__aeabi_d2uiz+0x38>)
 800060a:	0004      	movs	r4, r0
 800060c:	000d      	movs	r5, r1
 800060e:	f7ff ff55 	bl	80004bc <__aeabi_dcmpge>
 8000612:	2800      	cmp	r0, #0
 8000614:	d104      	bne.n	8000620 <__aeabi_d2uiz+0x1c>
 8000616:	0020      	movs	r0, r4
 8000618:	0029      	movs	r1, r5
 800061a:	f002 fcef 	bl	8002ffc <__aeabi_d2iz>
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <__aeabi_d2uiz+0x38>)
 8000622:	2200      	movs	r2, #0
 8000624:	0020      	movs	r0, r4
 8000626:	0029      	movs	r1, r5
 8000628:	f002 f956 	bl	80028d8 <__aeabi_dsub>
 800062c:	f002 fce6 	bl	8002ffc <__aeabi_d2iz>
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	061b      	lsls	r3, r3, #24
 8000634:	469c      	mov	ip, r3
 8000636:	4460      	add	r0, ip
 8000638:	e7f1      	b.n	800061e <__aeabi_d2uiz+0x1a>
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	41e00000 	.word	0x41e00000

08000640 <__udivmoddi4>:
 8000640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000642:	4657      	mov	r7, sl
 8000644:	464e      	mov	r6, r9
 8000646:	4645      	mov	r5, r8
 8000648:	46de      	mov	lr, fp
 800064a:	b5e0      	push	{r5, r6, r7, lr}
 800064c:	0004      	movs	r4, r0
 800064e:	000d      	movs	r5, r1
 8000650:	4692      	mov	sl, r2
 8000652:	4699      	mov	r9, r3
 8000654:	b083      	sub	sp, #12
 8000656:	428b      	cmp	r3, r1
 8000658:	d830      	bhi.n	80006bc <__udivmoddi4+0x7c>
 800065a:	d02d      	beq.n	80006b8 <__udivmoddi4+0x78>
 800065c:	4649      	mov	r1, r9
 800065e:	4650      	mov	r0, sl
 8000660:	f002 fe46 	bl	80032f0 <__clzdi2>
 8000664:	0029      	movs	r1, r5
 8000666:	0006      	movs	r6, r0
 8000668:	0020      	movs	r0, r4
 800066a:	f002 fe41 	bl	80032f0 <__clzdi2>
 800066e:	1a33      	subs	r3, r6, r0
 8000670:	4698      	mov	r8, r3
 8000672:	3b20      	subs	r3, #32
 8000674:	469b      	mov	fp, r3
 8000676:	d433      	bmi.n	80006e0 <__udivmoddi4+0xa0>
 8000678:	465a      	mov	r2, fp
 800067a:	4653      	mov	r3, sl
 800067c:	4093      	lsls	r3, r2
 800067e:	4642      	mov	r2, r8
 8000680:	001f      	movs	r7, r3
 8000682:	4653      	mov	r3, sl
 8000684:	4093      	lsls	r3, r2
 8000686:	001e      	movs	r6, r3
 8000688:	42af      	cmp	r7, r5
 800068a:	d83a      	bhi.n	8000702 <__udivmoddi4+0xc2>
 800068c:	42af      	cmp	r7, r5
 800068e:	d100      	bne.n	8000692 <__udivmoddi4+0x52>
 8000690:	e078      	b.n	8000784 <__udivmoddi4+0x144>
 8000692:	465b      	mov	r3, fp
 8000694:	1ba4      	subs	r4, r4, r6
 8000696:	41bd      	sbcs	r5, r7
 8000698:	2b00      	cmp	r3, #0
 800069a:	da00      	bge.n	800069e <__udivmoddi4+0x5e>
 800069c:	e075      	b.n	800078a <__udivmoddi4+0x14a>
 800069e:	2200      	movs	r2, #0
 80006a0:	2300      	movs	r3, #0
 80006a2:	9200      	str	r2, [sp, #0]
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	2301      	movs	r3, #1
 80006a8:	465a      	mov	r2, fp
 80006aa:	4093      	lsls	r3, r2
 80006ac:	9301      	str	r3, [sp, #4]
 80006ae:	2301      	movs	r3, #1
 80006b0:	4642      	mov	r2, r8
 80006b2:	4093      	lsls	r3, r2
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	e028      	b.n	800070a <__udivmoddi4+0xca>
 80006b8:	4282      	cmp	r2, r0
 80006ba:	d9cf      	bls.n	800065c <__udivmoddi4+0x1c>
 80006bc:	2200      	movs	r2, #0
 80006be:	2300      	movs	r3, #0
 80006c0:	9200      	str	r2, [sp, #0]
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <__udivmoddi4+0x8e>
 80006ca:	601c      	str	r4, [r3, #0]
 80006cc:	605d      	str	r5, [r3, #4]
 80006ce:	9800      	ldr	r0, [sp, #0]
 80006d0:	9901      	ldr	r1, [sp, #4]
 80006d2:	b003      	add	sp, #12
 80006d4:	bcf0      	pop	{r4, r5, r6, r7}
 80006d6:	46bb      	mov	fp, r7
 80006d8:	46b2      	mov	sl, r6
 80006da:	46a9      	mov	r9, r5
 80006dc:	46a0      	mov	r8, r4
 80006de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006e0:	4642      	mov	r2, r8
 80006e2:	2320      	movs	r3, #32
 80006e4:	1a9b      	subs	r3, r3, r2
 80006e6:	4652      	mov	r2, sl
 80006e8:	40da      	lsrs	r2, r3
 80006ea:	4641      	mov	r1, r8
 80006ec:	0013      	movs	r3, r2
 80006ee:	464a      	mov	r2, r9
 80006f0:	408a      	lsls	r2, r1
 80006f2:	0017      	movs	r7, r2
 80006f4:	4642      	mov	r2, r8
 80006f6:	431f      	orrs	r7, r3
 80006f8:	4653      	mov	r3, sl
 80006fa:	4093      	lsls	r3, r2
 80006fc:	001e      	movs	r6, r3
 80006fe:	42af      	cmp	r7, r5
 8000700:	d9c4      	bls.n	800068c <__udivmoddi4+0x4c>
 8000702:	2200      	movs	r2, #0
 8000704:	2300      	movs	r3, #0
 8000706:	9200      	str	r2, [sp, #0]
 8000708:	9301      	str	r3, [sp, #4]
 800070a:	4643      	mov	r3, r8
 800070c:	2b00      	cmp	r3, #0
 800070e:	d0d9      	beq.n	80006c4 <__udivmoddi4+0x84>
 8000710:	07fb      	lsls	r3, r7, #31
 8000712:	0872      	lsrs	r2, r6, #1
 8000714:	431a      	orrs	r2, r3
 8000716:	4646      	mov	r6, r8
 8000718:	087b      	lsrs	r3, r7, #1
 800071a:	e00e      	b.n	800073a <__udivmoddi4+0xfa>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d101      	bne.n	8000724 <__udivmoddi4+0xe4>
 8000720:	42a2      	cmp	r2, r4
 8000722:	d80c      	bhi.n	800073e <__udivmoddi4+0xfe>
 8000724:	1aa4      	subs	r4, r4, r2
 8000726:	419d      	sbcs	r5, r3
 8000728:	2001      	movs	r0, #1
 800072a:	1924      	adds	r4, r4, r4
 800072c:	416d      	adcs	r5, r5
 800072e:	2100      	movs	r1, #0
 8000730:	3e01      	subs	r6, #1
 8000732:	1824      	adds	r4, r4, r0
 8000734:	414d      	adcs	r5, r1
 8000736:	2e00      	cmp	r6, #0
 8000738:	d006      	beq.n	8000748 <__udivmoddi4+0x108>
 800073a:	42ab      	cmp	r3, r5
 800073c:	d9ee      	bls.n	800071c <__udivmoddi4+0xdc>
 800073e:	3e01      	subs	r6, #1
 8000740:	1924      	adds	r4, r4, r4
 8000742:	416d      	adcs	r5, r5
 8000744:	2e00      	cmp	r6, #0
 8000746:	d1f8      	bne.n	800073a <__udivmoddi4+0xfa>
 8000748:	9800      	ldr	r0, [sp, #0]
 800074a:	9901      	ldr	r1, [sp, #4]
 800074c:	465b      	mov	r3, fp
 800074e:	1900      	adds	r0, r0, r4
 8000750:	4169      	adcs	r1, r5
 8000752:	2b00      	cmp	r3, #0
 8000754:	db24      	blt.n	80007a0 <__udivmoddi4+0x160>
 8000756:	002b      	movs	r3, r5
 8000758:	465a      	mov	r2, fp
 800075a:	4644      	mov	r4, r8
 800075c:	40d3      	lsrs	r3, r2
 800075e:	002a      	movs	r2, r5
 8000760:	40e2      	lsrs	r2, r4
 8000762:	001c      	movs	r4, r3
 8000764:	465b      	mov	r3, fp
 8000766:	0015      	movs	r5, r2
 8000768:	2b00      	cmp	r3, #0
 800076a:	db2a      	blt.n	80007c2 <__udivmoddi4+0x182>
 800076c:	0026      	movs	r6, r4
 800076e:	409e      	lsls	r6, r3
 8000770:	0033      	movs	r3, r6
 8000772:	0026      	movs	r6, r4
 8000774:	4647      	mov	r7, r8
 8000776:	40be      	lsls	r6, r7
 8000778:	0032      	movs	r2, r6
 800077a:	1a80      	subs	r0, r0, r2
 800077c:	4199      	sbcs	r1, r3
 800077e:	9000      	str	r0, [sp, #0]
 8000780:	9101      	str	r1, [sp, #4]
 8000782:	e79f      	b.n	80006c4 <__udivmoddi4+0x84>
 8000784:	42a3      	cmp	r3, r4
 8000786:	d8bc      	bhi.n	8000702 <__udivmoddi4+0xc2>
 8000788:	e783      	b.n	8000692 <__udivmoddi4+0x52>
 800078a:	4642      	mov	r2, r8
 800078c:	2320      	movs	r3, #32
 800078e:	2100      	movs	r1, #0
 8000790:	1a9b      	subs	r3, r3, r2
 8000792:	2200      	movs	r2, #0
 8000794:	9100      	str	r1, [sp, #0]
 8000796:	9201      	str	r2, [sp, #4]
 8000798:	2201      	movs	r2, #1
 800079a:	40da      	lsrs	r2, r3
 800079c:	9201      	str	r2, [sp, #4]
 800079e:	e786      	b.n	80006ae <__udivmoddi4+0x6e>
 80007a0:	4642      	mov	r2, r8
 80007a2:	2320      	movs	r3, #32
 80007a4:	1a9b      	subs	r3, r3, r2
 80007a6:	002a      	movs	r2, r5
 80007a8:	4646      	mov	r6, r8
 80007aa:	409a      	lsls	r2, r3
 80007ac:	0023      	movs	r3, r4
 80007ae:	40f3      	lsrs	r3, r6
 80007b0:	4644      	mov	r4, r8
 80007b2:	4313      	orrs	r3, r2
 80007b4:	002a      	movs	r2, r5
 80007b6:	40e2      	lsrs	r2, r4
 80007b8:	001c      	movs	r4, r3
 80007ba:	465b      	mov	r3, fp
 80007bc:	0015      	movs	r5, r2
 80007be:	2b00      	cmp	r3, #0
 80007c0:	dad4      	bge.n	800076c <__udivmoddi4+0x12c>
 80007c2:	4642      	mov	r2, r8
 80007c4:	002f      	movs	r7, r5
 80007c6:	2320      	movs	r3, #32
 80007c8:	0026      	movs	r6, r4
 80007ca:	4097      	lsls	r7, r2
 80007cc:	1a9b      	subs	r3, r3, r2
 80007ce:	40de      	lsrs	r6, r3
 80007d0:	003b      	movs	r3, r7
 80007d2:	4333      	orrs	r3, r6
 80007d4:	e7cd      	b.n	8000772 <__udivmoddi4+0x132>
 80007d6:	46c0      	nop			; (mov r8, r8)

080007d8 <__aeabi_fadd>:
 80007d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007da:	4646      	mov	r6, r8
 80007dc:	46d6      	mov	lr, sl
 80007de:	464f      	mov	r7, r9
 80007e0:	024d      	lsls	r5, r1, #9
 80007e2:	0242      	lsls	r2, r0, #9
 80007e4:	b5c0      	push	{r6, r7, lr}
 80007e6:	0a52      	lsrs	r2, r2, #9
 80007e8:	0a6e      	lsrs	r6, r5, #9
 80007ea:	0047      	lsls	r7, r0, #1
 80007ec:	46b0      	mov	r8, r6
 80007ee:	0e3f      	lsrs	r7, r7, #24
 80007f0:	004e      	lsls	r6, r1, #1
 80007f2:	0fc4      	lsrs	r4, r0, #31
 80007f4:	00d0      	lsls	r0, r2, #3
 80007f6:	4694      	mov	ip, r2
 80007f8:	003b      	movs	r3, r7
 80007fa:	4682      	mov	sl, r0
 80007fc:	0e36      	lsrs	r6, r6, #24
 80007fe:	0fc9      	lsrs	r1, r1, #31
 8000800:	09ad      	lsrs	r5, r5, #6
 8000802:	428c      	cmp	r4, r1
 8000804:	d06d      	beq.n	80008e2 <__aeabi_fadd+0x10a>
 8000806:	1bb8      	subs	r0, r7, r6
 8000808:	4681      	mov	r9, r0
 800080a:	2800      	cmp	r0, #0
 800080c:	dd4d      	ble.n	80008aa <__aeabi_fadd+0xd2>
 800080e:	2e00      	cmp	r6, #0
 8000810:	d100      	bne.n	8000814 <__aeabi_fadd+0x3c>
 8000812:	e088      	b.n	8000926 <__aeabi_fadd+0x14e>
 8000814:	2fff      	cmp	r7, #255	; 0xff
 8000816:	d05a      	beq.n	80008ce <__aeabi_fadd+0xf6>
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	04db      	lsls	r3, r3, #19
 800081c:	431d      	orrs	r5, r3
 800081e:	464b      	mov	r3, r9
 8000820:	2201      	movs	r2, #1
 8000822:	2b1b      	cmp	r3, #27
 8000824:	dc0a      	bgt.n	800083c <__aeabi_fadd+0x64>
 8000826:	002b      	movs	r3, r5
 8000828:	464a      	mov	r2, r9
 800082a:	4649      	mov	r1, r9
 800082c:	40d3      	lsrs	r3, r2
 800082e:	2220      	movs	r2, #32
 8000830:	1a52      	subs	r2, r2, r1
 8000832:	4095      	lsls	r5, r2
 8000834:	002a      	movs	r2, r5
 8000836:	1e55      	subs	r5, r2, #1
 8000838:	41aa      	sbcs	r2, r5
 800083a:	431a      	orrs	r2, r3
 800083c:	4653      	mov	r3, sl
 800083e:	1a9a      	subs	r2, r3, r2
 8000840:	0153      	lsls	r3, r2, #5
 8000842:	d400      	bmi.n	8000846 <__aeabi_fadd+0x6e>
 8000844:	e0b9      	b.n	80009ba <__aeabi_fadd+0x1e2>
 8000846:	0192      	lsls	r2, r2, #6
 8000848:	0996      	lsrs	r6, r2, #6
 800084a:	0030      	movs	r0, r6
 800084c:	f002 fd32 	bl	80032b4 <__clzsi2>
 8000850:	3805      	subs	r0, #5
 8000852:	4086      	lsls	r6, r0
 8000854:	4287      	cmp	r7, r0
 8000856:	dd00      	ble.n	800085a <__aeabi_fadd+0x82>
 8000858:	e0d4      	b.n	8000a04 <__aeabi_fadd+0x22c>
 800085a:	0033      	movs	r3, r6
 800085c:	1bc7      	subs	r7, r0, r7
 800085e:	2020      	movs	r0, #32
 8000860:	3701      	adds	r7, #1
 8000862:	40fb      	lsrs	r3, r7
 8000864:	1bc7      	subs	r7, r0, r7
 8000866:	40be      	lsls	r6, r7
 8000868:	0032      	movs	r2, r6
 800086a:	1e56      	subs	r6, r2, #1
 800086c:	41b2      	sbcs	r2, r6
 800086e:	2700      	movs	r7, #0
 8000870:	431a      	orrs	r2, r3
 8000872:	0753      	lsls	r3, r2, #29
 8000874:	d004      	beq.n	8000880 <__aeabi_fadd+0xa8>
 8000876:	230f      	movs	r3, #15
 8000878:	4013      	ands	r3, r2
 800087a:	2b04      	cmp	r3, #4
 800087c:	d000      	beq.n	8000880 <__aeabi_fadd+0xa8>
 800087e:	3204      	adds	r2, #4
 8000880:	0153      	lsls	r3, r2, #5
 8000882:	d400      	bmi.n	8000886 <__aeabi_fadd+0xae>
 8000884:	e09c      	b.n	80009c0 <__aeabi_fadd+0x1e8>
 8000886:	1c7b      	adds	r3, r7, #1
 8000888:	2ffe      	cmp	r7, #254	; 0xfe
 800088a:	d100      	bne.n	800088e <__aeabi_fadd+0xb6>
 800088c:	e09a      	b.n	80009c4 <__aeabi_fadd+0x1ec>
 800088e:	0192      	lsls	r2, r2, #6
 8000890:	0a52      	lsrs	r2, r2, #9
 8000892:	4694      	mov	ip, r2
 8000894:	b2db      	uxtb	r3, r3
 8000896:	05d8      	lsls	r0, r3, #23
 8000898:	4663      	mov	r3, ip
 800089a:	07e4      	lsls	r4, r4, #31
 800089c:	4318      	orrs	r0, r3
 800089e:	4320      	orrs	r0, r4
 80008a0:	bce0      	pop	{r5, r6, r7}
 80008a2:	46ba      	mov	sl, r7
 80008a4:	46b1      	mov	r9, r6
 80008a6:	46a8      	mov	r8, r5
 80008a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008aa:	2800      	cmp	r0, #0
 80008ac:	d049      	beq.n	8000942 <__aeabi_fadd+0x16a>
 80008ae:	1bf3      	subs	r3, r6, r7
 80008b0:	2f00      	cmp	r7, #0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_fadd+0xde>
 80008b4:	e0b6      	b.n	8000a24 <__aeabi_fadd+0x24c>
 80008b6:	4652      	mov	r2, sl
 80008b8:	2a00      	cmp	r2, #0
 80008ba:	d060      	beq.n	800097e <__aeabi_fadd+0x1a6>
 80008bc:	3b01      	subs	r3, #1
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d100      	bne.n	80008c4 <__aeabi_fadd+0xec>
 80008c2:	e0fc      	b.n	8000abe <__aeabi_fadd+0x2e6>
 80008c4:	2eff      	cmp	r6, #255	; 0xff
 80008c6:	d000      	beq.n	80008ca <__aeabi_fadd+0xf2>
 80008c8:	e0b4      	b.n	8000a34 <__aeabi_fadd+0x25c>
 80008ca:	000c      	movs	r4, r1
 80008cc:	4642      	mov	r2, r8
 80008ce:	2a00      	cmp	r2, #0
 80008d0:	d078      	beq.n	80009c4 <__aeabi_fadd+0x1ec>
 80008d2:	2080      	movs	r0, #128	; 0x80
 80008d4:	03c0      	lsls	r0, r0, #15
 80008d6:	4310      	orrs	r0, r2
 80008d8:	0242      	lsls	r2, r0, #9
 80008da:	0a53      	lsrs	r3, r2, #9
 80008dc:	469c      	mov	ip, r3
 80008de:	23ff      	movs	r3, #255	; 0xff
 80008e0:	e7d9      	b.n	8000896 <__aeabi_fadd+0xbe>
 80008e2:	1bb9      	subs	r1, r7, r6
 80008e4:	2900      	cmp	r1, #0
 80008e6:	dd71      	ble.n	80009cc <__aeabi_fadd+0x1f4>
 80008e8:	2e00      	cmp	r6, #0
 80008ea:	d03f      	beq.n	800096c <__aeabi_fadd+0x194>
 80008ec:	2fff      	cmp	r7, #255	; 0xff
 80008ee:	d0ee      	beq.n	80008ce <__aeabi_fadd+0xf6>
 80008f0:	2380      	movs	r3, #128	; 0x80
 80008f2:	04db      	lsls	r3, r3, #19
 80008f4:	431d      	orrs	r5, r3
 80008f6:	2201      	movs	r2, #1
 80008f8:	291b      	cmp	r1, #27
 80008fa:	dc07      	bgt.n	800090c <__aeabi_fadd+0x134>
 80008fc:	002a      	movs	r2, r5
 80008fe:	2320      	movs	r3, #32
 8000900:	40ca      	lsrs	r2, r1
 8000902:	1a59      	subs	r1, r3, r1
 8000904:	408d      	lsls	r5, r1
 8000906:	1e6b      	subs	r3, r5, #1
 8000908:	419d      	sbcs	r5, r3
 800090a:	432a      	orrs	r2, r5
 800090c:	4452      	add	r2, sl
 800090e:	0153      	lsls	r3, r2, #5
 8000910:	d553      	bpl.n	80009ba <__aeabi_fadd+0x1e2>
 8000912:	3701      	adds	r7, #1
 8000914:	2fff      	cmp	r7, #255	; 0xff
 8000916:	d055      	beq.n	80009c4 <__aeabi_fadd+0x1ec>
 8000918:	2301      	movs	r3, #1
 800091a:	497b      	ldr	r1, [pc, #492]	; (8000b08 <__aeabi_fadd+0x330>)
 800091c:	4013      	ands	r3, r2
 800091e:	0852      	lsrs	r2, r2, #1
 8000920:	400a      	ands	r2, r1
 8000922:	431a      	orrs	r2, r3
 8000924:	e7a5      	b.n	8000872 <__aeabi_fadd+0x9a>
 8000926:	2d00      	cmp	r5, #0
 8000928:	d02c      	beq.n	8000984 <__aeabi_fadd+0x1ac>
 800092a:	2301      	movs	r3, #1
 800092c:	425b      	negs	r3, r3
 800092e:	469c      	mov	ip, r3
 8000930:	44e1      	add	r9, ip
 8000932:	464b      	mov	r3, r9
 8000934:	2b00      	cmp	r3, #0
 8000936:	d100      	bne.n	800093a <__aeabi_fadd+0x162>
 8000938:	e0ad      	b.n	8000a96 <__aeabi_fadd+0x2be>
 800093a:	2fff      	cmp	r7, #255	; 0xff
 800093c:	d000      	beq.n	8000940 <__aeabi_fadd+0x168>
 800093e:	e76e      	b.n	800081e <__aeabi_fadd+0x46>
 8000940:	e7c5      	b.n	80008ce <__aeabi_fadd+0xf6>
 8000942:	20fe      	movs	r0, #254	; 0xfe
 8000944:	1c7e      	adds	r6, r7, #1
 8000946:	4230      	tst	r0, r6
 8000948:	d160      	bne.n	8000a0c <__aeabi_fadd+0x234>
 800094a:	2f00      	cmp	r7, #0
 800094c:	d000      	beq.n	8000950 <__aeabi_fadd+0x178>
 800094e:	e093      	b.n	8000a78 <__aeabi_fadd+0x2a0>
 8000950:	4652      	mov	r2, sl
 8000952:	2a00      	cmp	r2, #0
 8000954:	d100      	bne.n	8000958 <__aeabi_fadd+0x180>
 8000956:	e0b6      	b.n	8000ac6 <__aeabi_fadd+0x2ee>
 8000958:	2d00      	cmp	r5, #0
 800095a:	d09c      	beq.n	8000896 <__aeabi_fadd+0xbe>
 800095c:	1b52      	subs	r2, r2, r5
 800095e:	0150      	lsls	r0, r2, #5
 8000960:	d400      	bmi.n	8000964 <__aeabi_fadd+0x18c>
 8000962:	e0c3      	b.n	8000aec <__aeabi_fadd+0x314>
 8000964:	4653      	mov	r3, sl
 8000966:	000c      	movs	r4, r1
 8000968:	1aea      	subs	r2, r5, r3
 800096a:	e782      	b.n	8000872 <__aeabi_fadd+0x9a>
 800096c:	2d00      	cmp	r5, #0
 800096e:	d009      	beq.n	8000984 <__aeabi_fadd+0x1ac>
 8000970:	3901      	subs	r1, #1
 8000972:	2900      	cmp	r1, #0
 8000974:	d100      	bne.n	8000978 <__aeabi_fadd+0x1a0>
 8000976:	e08b      	b.n	8000a90 <__aeabi_fadd+0x2b8>
 8000978:	2fff      	cmp	r7, #255	; 0xff
 800097a:	d1bc      	bne.n	80008f6 <__aeabi_fadd+0x11e>
 800097c:	e7a7      	b.n	80008ce <__aeabi_fadd+0xf6>
 800097e:	000c      	movs	r4, r1
 8000980:	4642      	mov	r2, r8
 8000982:	0037      	movs	r7, r6
 8000984:	2fff      	cmp	r7, #255	; 0xff
 8000986:	d0a2      	beq.n	80008ce <__aeabi_fadd+0xf6>
 8000988:	0252      	lsls	r2, r2, #9
 800098a:	0a53      	lsrs	r3, r2, #9
 800098c:	469c      	mov	ip, r3
 800098e:	b2fb      	uxtb	r3, r7
 8000990:	e781      	b.n	8000896 <__aeabi_fadd+0xbe>
 8000992:	21fe      	movs	r1, #254	; 0xfe
 8000994:	3701      	adds	r7, #1
 8000996:	4239      	tst	r1, r7
 8000998:	d165      	bne.n	8000a66 <__aeabi_fadd+0x28e>
 800099a:	2b00      	cmp	r3, #0
 800099c:	d17e      	bne.n	8000a9c <__aeabi_fadd+0x2c4>
 800099e:	2800      	cmp	r0, #0
 80009a0:	d100      	bne.n	80009a4 <__aeabi_fadd+0x1cc>
 80009a2:	e0aa      	b.n	8000afa <__aeabi_fadd+0x322>
 80009a4:	2d00      	cmp	r5, #0
 80009a6:	d100      	bne.n	80009aa <__aeabi_fadd+0x1d2>
 80009a8:	e775      	b.n	8000896 <__aeabi_fadd+0xbe>
 80009aa:	002a      	movs	r2, r5
 80009ac:	4452      	add	r2, sl
 80009ae:	2700      	movs	r7, #0
 80009b0:	0153      	lsls	r3, r2, #5
 80009b2:	d502      	bpl.n	80009ba <__aeabi_fadd+0x1e2>
 80009b4:	4b55      	ldr	r3, [pc, #340]	; (8000b0c <__aeabi_fadd+0x334>)
 80009b6:	3701      	adds	r7, #1
 80009b8:	401a      	ands	r2, r3
 80009ba:	0753      	lsls	r3, r2, #29
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x1e8>
 80009be:	e75a      	b.n	8000876 <__aeabi_fadd+0x9e>
 80009c0:	08d2      	lsrs	r2, r2, #3
 80009c2:	e7df      	b.n	8000984 <__aeabi_fadd+0x1ac>
 80009c4:	2200      	movs	r2, #0
 80009c6:	23ff      	movs	r3, #255	; 0xff
 80009c8:	4694      	mov	ip, r2
 80009ca:	e764      	b.n	8000896 <__aeabi_fadd+0xbe>
 80009cc:	2900      	cmp	r1, #0
 80009ce:	d0e0      	beq.n	8000992 <__aeabi_fadd+0x1ba>
 80009d0:	1bf3      	subs	r3, r6, r7
 80009d2:	2f00      	cmp	r7, #0
 80009d4:	d03e      	beq.n	8000a54 <__aeabi_fadd+0x27c>
 80009d6:	2eff      	cmp	r6, #255	; 0xff
 80009d8:	d100      	bne.n	80009dc <__aeabi_fadd+0x204>
 80009da:	e777      	b.n	80008cc <__aeabi_fadd+0xf4>
 80009dc:	2280      	movs	r2, #128	; 0x80
 80009de:	0001      	movs	r1, r0
 80009e0:	04d2      	lsls	r2, r2, #19
 80009e2:	4311      	orrs	r1, r2
 80009e4:	468a      	mov	sl, r1
 80009e6:	2201      	movs	r2, #1
 80009e8:	2b1b      	cmp	r3, #27
 80009ea:	dc08      	bgt.n	80009fe <__aeabi_fadd+0x226>
 80009ec:	4652      	mov	r2, sl
 80009ee:	2120      	movs	r1, #32
 80009f0:	4650      	mov	r0, sl
 80009f2:	40da      	lsrs	r2, r3
 80009f4:	1acb      	subs	r3, r1, r3
 80009f6:	4098      	lsls	r0, r3
 80009f8:	1e43      	subs	r3, r0, #1
 80009fa:	4198      	sbcs	r0, r3
 80009fc:	4302      	orrs	r2, r0
 80009fe:	0037      	movs	r7, r6
 8000a00:	1952      	adds	r2, r2, r5
 8000a02:	e784      	b.n	800090e <__aeabi_fadd+0x136>
 8000a04:	4a41      	ldr	r2, [pc, #260]	; (8000b0c <__aeabi_fadd+0x334>)
 8000a06:	1a3f      	subs	r7, r7, r0
 8000a08:	4032      	ands	r2, r6
 8000a0a:	e732      	b.n	8000872 <__aeabi_fadd+0x9a>
 8000a0c:	4653      	mov	r3, sl
 8000a0e:	1b5e      	subs	r6, r3, r5
 8000a10:	0173      	lsls	r3, r6, #5
 8000a12:	d42d      	bmi.n	8000a70 <__aeabi_fadd+0x298>
 8000a14:	2e00      	cmp	r6, #0
 8000a16:	d000      	beq.n	8000a1a <__aeabi_fadd+0x242>
 8000a18:	e717      	b.n	800084a <__aeabi_fadd+0x72>
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2400      	movs	r4, #0
 8000a1e:	2300      	movs	r3, #0
 8000a20:	4694      	mov	ip, r2
 8000a22:	e738      	b.n	8000896 <__aeabi_fadd+0xbe>
 8000a24:	2eff      	cmp	r6, #255	; 0xff
 8000a26:	d100      	bne.n	8000a2a <__aeabi_fadd+0x252>
 8000a28:	e74f      	b.n	80008ca <__aeabi_fadd+0xf2>
 8000a2a:	2280      	movs	r2, #128	; 0x80
 8000a2c:	4650      	mov	r0, sl
 8000a2e:	04d2      	lsls	r2, r2, #19
 8000a30:	4310      	orrs	r0, r2
 8000a32:	4682      	mov	sl, r0
 8000a34:	2201      	movs	r2, #1
 8000a36:	2b1b      	cmp	r3, #27
 8000a38:	dc08      	bgt.n	8000a4c <__aeabi_fadd+0x274>
 8000a3a:	4652      	mov	r2, sl
 8000a3c:	2420      	movs	r4, #32
 8000a3e:	4650      	mov	r0, sl
 8000a40:	40da      	lsrs	r2, r3
 8000a42:	1ae3      	subs	r3, r4, r3
 8000a44:	4098      	lsls	r0, r3
 8000a46:	1e43      	subs	r3, r0, #1
 8000a48:	4198      	sbcs	r0, r3
 8000a4a:	4302      	orrs	r2, r0
 8000a4c:	000c      	movs	r4, r1
 8000a4e:	0037      	movs	r7, r6
 8000a50:	1aaa      	subs	r2, r5, r2
 8000a52:	e6f5      	b.n	8000840 <__aeabi_fadd+0x68>
 8000a54:	2800      	cmp	r0, #0
 8000a56:	d093      	beq.n	8000980 <__aeabi_fadd+0x1a8>
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d04f      	beq.n	8000afe <__aeabi_fadd+0x326>
 8000a5e:	2eff      	cmp	r6, #255	; 0xff
 8000a60:	d1c1      	bne.n	80009e6 <__aeabi_fadd+0x20e>
 8000a62:	4642      	mov	r2, r8
 8000a64:	e733      	b.n	80008ce <__aeabi_fadd+0xf6>
 8000a66:	2fff      	cmp	r7, #255	; 0xff
 8000a68:	d0ac      	beq.n	80009c4 <__aeabi_fadd+0x1ec>
 8000a6a:	4455      	add	r5, sl
 8000a6c:	086a      	lsrs	r2, r5, #1
 8000a6e:	e7a4      	b.n	80009ba <__aeabi_fadd+0x1e2>
 8000a70:	4653      	mov	r3, sl
 8000a72:	000c      	movs	r4, r1
 8000a74:	1aee      	subs	r6, r5, r3
 8000a76:	e6e8      	b.n	800084a <__aeabi_fadd+0x72>
 8000a78:	4653      	mov	r3, sl
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d128      	bne.n	8000ad0 <__aeabi_fadd+0x2f8>
 8000a7e:	2d00      	cmp	r5, #0
 8000a80:	d000      	beq.n	8000a84 <__aeabi_fadd+0x2ac>
 8000a82:	e722      	b.n	80008ca <__aeabi_fadd+0xf2>
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	03db      	lsls	r3, r3, #15
 8000a88:	469c      	mov	ip, r3
 8000a8a:	2400      	movs	r4, #0
 8000a8c:	23ff      	movs	r3, #255	; 0xff
 8000a8e:	e702      	b.n	8000896 <__aeabi_fadd+0xbe>
 8000a90:	002a      	movs	r2, r5
 8000a92:	4452      	add	r2, sl
 8000a94:	e73b      	b.n	800090e <__aeabi_fadd+0x136>
 8000a96:	4653      	mov	r3, sl
 8000a98:	1b5a      	subs	r2, r3, r5
 8000a9a:	e6d1      	b.n	8000840 <__aeabi_fadd+0x68>
 8000a9c:	2800      	cmp	r0, #0
 8000a9e:	d100      	bne.n	8000aa2 <__aeabi_fadd+0x2ca>
 8000aa0:	e714      	b.n	80008cc <__aeabi_fadd+0xf4>
 8000aa2:	2d00      	cmp	r5, #0
 8000aa4:	d100      	bne.n	8000aa8 <__aeabi_fadd+0x2d0>
 8000aa6:	e712      	b.n	80008ce <__aeabi_fadd+0xf6>
 8000aa8:	2380      	movs	r3, #128	; 0x80
 8000aaa:	03db      	lsls	r3, r3, #15
 8000aac:	421a      	tst	r2, r3
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_fadd+0x2da>
 8000ab0:	e70d      	b.n	80008ce <__aeabi_fadd+0xf6>
 8000ab2:	4641      	mov	r1, r8
 8000ab4:	4219      	tst	r1, r3
 8000ab6:	d000      	beq.n	8000aba <__aeabi_fadd+0x2e2>
 8000ab8:	e709      	b.n	80008ce <__aeabi_fadd+0xf6>
 8000aba:	4642      	mov	r2, r8
 8000abc:	e707      	b.n	80008ce <__aeabi_fadd+0xf6>
 8000abe:	000c      	movs	r4, r1
 8000ac0:	0037      	movs	r7, r6
 8000ac2:	1aaa      	subs	r2, r5, r2
 8000ac4:	e6bc      	b.n	8000840 <__aeabi_fadd+0x68>
 8000ac6:	2d00      	cmp	r5, #0
 8000ac8:	d013      	beq.n	8000af2 <__aeabi_fadd+0x31a>
 8000aca:	000c      	movs	r4, r1
 8000acc:	46c4      	mov	ip, r8
 8000ace:	e6e2      	b.n	8000896 <__aeabi_fadd+0xbe>
 8000ad0:	2d00      	cmp	r5, #0
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_fadd+0x2fe>
 8000ad4:	e6fb      	b.n	80008ce <__aeabi_fadd+0xf6>
 8000ad6:	2380      	movs	r3, #128	; 0x80
 8000ad8:	03db      	lsls	r3, r3, #15
 8000ada:	421a      	tst	r2, r3
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_fadd+0x308>
 8000ade:	e6f6      	b.n	80008ce <__aeabi_fadd+0xf6>
 8000ae0:	4640      	mov	r0, r8
 8000ae2:	4218      	tst	r0, r3
 8000ae4:	d000      	beq.n	8000ae8 <__aeabi_fadd+0x310>
 8000ae6:	e6f2      	b.n	80008ce <__aeabi_fadd+0xf6>
 8000ae8:	000c      	movs	r4, r1
 8000aea:	e6ef      	b.n	80008cc <__aeabi_fadd+0xf4>
 8000aec:	2a00      	cmp	r2, #0
 8000aee:	d000      	beq.n	8000af2 <__aeabi_fadd+0x31a>
 8000af0:	e763      	b.n	80009ba <__aeabi_fadd+0x1e2>
 8000af2:	2200      	movs	r2, #0
 8000af4:	2400      	movs	r4, #0
 8000af6:	4694      	mov	ip, r2
 8000af8:	e6cd      	b.n	8000896 <__aeabi_fadd+0xbe>
 8000afa:	46c4      	mov	ip, r8
 8000afc:	e6cb      	b.n	8000896 <__aeabi_fadd+0xbe>
 8000afe:	002a      	movs	r2, r5
 8000b00:	0037      	movs	r7, r6
 8000b02:	4452      	add	r2, sl
 8000b04:	e703      	b.n	800090e <__aeabi_fadd+0x136>
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	7dffffff 	.word	0x7dffffff
 8000b0c:	fbffffff 	.word	0xfbffffff

08000b10 <__aeabi_fdiv>:
 8000b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b12:	464f      	mov	r7, r9
 8000b14:	4646      	mov	r6, r8
 8000b16:	46d6      	mov	lr, sl
 8000b18:	0245      	lsls	r5, r0, #9
 8000b1a:	b5c0      	push	{r6, r7, lr}
 8000b1c:	0047      	lsls	r7, r0, #1
 8000b1e:	1c0c      	adds	r4, r1, #0
 8000b20:	0a6d      	lsrs	r5, r5, #9
 8000b22:	0e3f      	lsrs	r7, r7, #24
 8000b24:	0fc6      	lsrs	r6, r0, #31
 8000b26:	2f00      	cmp	r7, #0
 8000b28:	d066      	beq.n	8000bf8 <__aeabi_fdiv+0xe8>
 8000b2a:	2fff      	cmp	r7, #255	; 0xff
 8000b2c:	d06c      	beq.n	8000c08 <__aeabi_fdiv+0xf8>
 8000b2e:	2300      	movs	r3, #0
 8000b30:	00ea      	lsls	r2, r5, #3
 8000b32:	2580      	movs	r5, #128	; 0x80
 8000b34:	4699      	mov	r9, r3
 8000b36:	469a      	mov	sl, r3
 8000b38:	04ed      	lsls	r5, r5, #19
 8000b3a:	4315      	orrs	r5, r2
 8000b3c:	3f7f      	subs	r7, #127	; 0x7f
 8000b3e:	0260      	lsls	r0, r4, #9
 8000b40:	0061      	lsls	r1, r4, #1
 8000b42:	0a43      	lsrs	r3, r0, #9
 8000b44:	4698      	mov	r8, r3
 8000b46:	0e09      	lsrs	r1, r1, #24
 8000b48:	0fe4      	lsrs	r4, r4, #31
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d048      	beq.n	8000be0 <__aeabi_fdiv+0xd0>
 8000b4e:	29ff      	cmp	r1, #255	; 0xff
 8000b50:	d010      	beq.n	8000b74 <__aeabi_fdiv+0x64>
 8000b52:	2280      	movs	r2, #128	; 0x80
 8000b54:	00d8      	lsls	r0, r3, #3
 8000b56:	04d2      	lsls	r2, r2, #19
 8000b58:	4302      	orrs	r2, r0
 8000b5a:	4690      	mov	r8, r2
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	397f      	subs	r1, #127	; 0x7f
 8000b60:	464a      	mov	r2, r9
 8000b62:	0033      	movs	r3, r6
 8000b64:	1a7f      	subs	r7, r7, r1
 8000b66:	4302      	orrs	r2, r0
 8000b68:	496c      	ldr	r1, [pc, #432]	; (8000d1c <__aeabi_fdiv+0x20c>)
 8000b6a:	0092      	lsls	r2, r2, #2
 8000b6c:	588a      	ldr	r2, [r1, r2]
 8000b6e:	4063      	eors	r3, r4
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	4697      	mov	pc, r2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d16d      	bne.n	8000c54 <__aeabi_fdiv+0x144>
 8000b78:	2002      	movs	r0, #2
 8000b7a:	3fff      	subs	r7, #255	; 0xff
 8000b7c:	e033      	b.n	8000be6 <__aeabi_fdiv+0xd6>
 8000b7e:	2300      	movs	r3, #0
 8000b80:	4698      	mov	r8, r3
 8000b82:	0026      	movs	r6, r4
 8000b84:	4645      	mov	r5, r8
 8000b86:	4682      	mov	sl, r0
 8000b88:	4653      	mov	r3, sl
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_fdiv+0x80>
 8000b8e:	e07f      	b.n	8000c90 <__aeabi_fdiv+0x180>
 8000b90:	2b03      	cmp	r3, #3
 8000b92:	d100      	bne.n	8000b96 <__aeabi_fdiv+0x86>
 8000b94:	e094      	b.n	8000cc0 <__aeabi_fdiv+0x1b0>
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d017      	beq.n	8000bca <__aeabi_fdiv+0xba>
 8000b9a:	0038      	movs	r0, r7
 8000b9c:	307f      	adds	r0, #127	; 0x7f
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	dd5f      	ble.n	8000c62 <__aeabi_fdiv+0x152>
 8000ba2:	076b      	lsls	r3, r5, #29
 8000ba4:	d004      	beq.n	8000bb0 <__aeabi_fdiv+0xa0>
 8000ba6:	230f      	movs	r3, #15
 8000ba8:	402b      	ands	r3, r5
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	d000      	beq.n	8000bb0 <__aeabi_fdiv+0xa0>
 8000bae:	3504      	adds	r5, #4
 8000bb0:	012b      	lsls	r3, r5, #4
 8000bb2:	d503      	bpl.n	8000bbc <__aeabi_fdiv+0xac>
 8000bb4:	0038      	movs	r0, r7
 8000bb6:	4b5a      	ldr	r3, [pc, #360]	; (8000d20 <__aeabi_fdiv+0x210>)
 8000bb8:	3080      	adds	r0, #128	; 0x80
 8000bba:	401d      	ands	r5, r3
 8000bbc:	28fe      	cmp	r0, #254	; 0xfe
 8000bbe:	dc67      	bgt.n	8000c90 <__aeabi_fdiv+0x180>
 8000bc0:	01ad      	lsls	r5, r5, #6
 8000bc2:	0a6d      	lsrs	r5, r5, #9
 8000bc4:	b2c0      	uxtb	r0, r0
 8000bc6:	e002      	b.n	8000bce <__aeabi_fdiv+0xbe>
 8000bc8:	001e      	movs	r6, r3
 8000bca:	2000      	movs	r0, #0
 8000bcc:	2500      	movs	r5, #0
 8000bce:	05c0      	lsls	r0, r0, #23
 8000bd0:	4328      	orrs	r0, r5
 8000bd2:	07f6      	lsls	r6, r6, #31
 8000bd4:	4330      	orrs	r0, r6
 8000bd6:	bce0      	pop	{r5, r6, r7}
 8000bd8:	46ba      	mov	sl, r7
 8000bda:	46b1      	mov	r9, r6
 8000bdc:	46a8      	mov	r8, r5
 8000bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d12b      	bne.n	8000c3c <__aeabi_fdiv+0x12c>
 8000be4:	2001      	movs	r0, #1
 8000be6:	464a      	mov	r2, r9
 8000be8:	0033      	movs	r3, r6
 8000bea:	494e      	ldr	r1, [pc, #312]	; (8000d24 <__aeabi_fdiv+0x214>)
 8000bec:	4302      	orrs	r2, r0
 8000bee:	0092      	lsls	r2, r2, #2
 8000bf0:	588a      	ldr	r2, [r1, r2]
 8000bf2:	4063      	eors	r3, r4
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	4697      	mov	pc, r2
 8000bf8:	2d00      	cmp	r5, #0
 8000bfa:	d113      	bne.n	8000c24 <__aeabi_fdiv+0x114>
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	4699      	mov	r9, r3
 8000c00:	3b03      	subs	r3, #3
 8000c02:	2700      	movs	r7, #0
 8000c04:	469a      	mov	sl, r3
 8000c06:	e79a      	b.n	8000b3e <__aeabi_fdiv+0x2e>
 8000c08:	2d00      	cmp	r5, #0
 8000c0a:	d105      	bne.n	8000c18 <__aeabi_fdiv+0x108>
 8000c0c:	2308      	movs	r3, #8
 8000c0e:	4699      	mov	r9, r3
 8000c10:	3b06      	subs	r3, #6
 8000c12:	27ff      	movs	r7, #255	; 0xff
 8000c14:	469a      	mov	sl, r3
 8000c16:	e792      	b.n	8000b3e <__aeabi_fdiv+0x2e>
 8000c18:	230c      	movs	r3, #12
 8000c1a:	4699      	mov	r9, r3
 8000c1c:	3b09      	subs	r3, #9
 8000c1e:	27ff      	movs	r7, #255	; 0xff
 8000c20:	469a      	mov	sl, r3
 8000c22:	e78c      	b.n	8000b3e <__aeabi_fdiv+0x2e>
 8000c24:	0028      	movs	r0, r5
 8000c26:	f002 fb45 	bl	80032b4 <__clzsi2>
 8000c2a:	2776      	movs	r7, #118	; 0x76
 8000c2c:	1f43      	subs	r3, r0, #5
 8000c2e:	409d      	lsls	r5, r3
 8000c30:	2300      	movs	r3, #0
 8000c32:	427f      	negs	r7, r7
 8000c34:	4699      	mov	r9, r3
 8000c36:	469a      	mov	sl, r3
 8000c38:	1a3f      	subs	r7, r7, r0
 8000c3a:	e780      	b.n	8000b3e <__aeabi_fdiv+0x2e>
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f002 fb39 	bl	80032b4 <__clzsi2>
 8000c42:	4642      	mov	r2, r8
 8000c44:	1f43      	subs	r3, r0, #5
 8000c46:	2176      	movs	r1, #118	; 0x76
 8000c48:	409a      	lsls	r2, r3
 8000c4a:	4249      	negs	r1, r1
 8000c4c:	1a09      	subs	r1, r1, r0
 8000c4e:	4690      	mov	r8, r2
 8000c50:	2000      	movs	r0, #0
 8000c52:	e785      	b.n	8000b60 <__aeabi_fdiv+0x50>
 8000c54:	21ff      	movs	r1, #255	; 0xff
 8000c56:	2003      	movs	r0, #3
 8000c58:	e782      	b.n	8000b60 <__aeabi_fdiv+0x50>
 8000c5a:	001e      	movs	r6, r3
 8000c5c:	20ff      	movs	r0, #255	; 0xff
 8000c5e:	2500      	movs	r5, #0
 8000c60:	e7b5      	b.n	8000bce <__aeabi_fdiv+0xbe>
 8000c62:	2301      	movs	r3, #1
 8000c64:	1a1b      	subs	r3, r3, r0
 8000c66:	2b1b      	cmp	r3, #27
 8000c68:	dcaf      	bgt.n	8000bca <__aeabi_fdiv+0xba>
 8000c6a:	379e      	adds	r7, #158	; 0x9e
 8000c6c:	0029      	movs	r1, r5
 8000c6e:	40bd      	lsls	r5, r7
 8000c70:	40d9      	lsrs	r1, r3
 8000c72:	1e6a      	subs	r2, r5, #1
 8000c74:	4195      	sbcs	r5, r2
 8000c76:	430d      	orrs	r5, r1
 8000c78:	076b      	lsls	r3, r5, #29
 8000c7a:	d004      	beq.n	8000c86 <__aeabi_fdiv+0x176>
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	402b      	ands	r3, r5
 8000c80:	2b04      	cmp	r3, #4
 8000c82:	d000      	beq.n	8000c86 <__aeabi_fdiv+0x176>
 8000c84:	3504      	adds	r5, #4
 8000c86:	016b      	lsls	r3, r5, #5
 8000c88:	d544      	bpl.n	8000d14 <__aeabi_fdiv+0x204>
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	2500      	movs	r5, #0
 8000c8e:	e79e      	b.n	8000bce <__aeabi_fdiv+0xbe>
 8000c90:	20ff      	movs	r0, #255	; 0xff
 8000c92:	2500      	movs	r5, #0
 8000c94:	e79b      	b.n	8000bce <__aeabi_fdiv+0xbe>
 8000c96:	2580      	movs	r5, #128	; 0x80
 8000c98:	2600      	movs	r6, #0
 8000c9a:	20ff      	movs	r0, #255	; 0xff
 8000c9c:	03ed      	lsls	r5, r5, #15
 8000c9e:	e796      	b.n	8000bce <__aeabi_fdiv+0xbe>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	4698      	mov	r8, r3
 8000ca4:	2080      	movs	r0, #128	; 0x80
 8000ca6:	03c0      	lsls	r0, r0, #15
 8000ca8:	4205      	tst	r5, r0
 8000caa:	d009      	beq.n	8000cc0 <__aeabi_fdiv+0x1b0>
 8000cac:	4643      	mov	r3, r8
 8000cae:	4203      	tst	r3, r0
 8000cb0:	d106      	bne.n	8000cc0 <__aeabi_fdiv+0x1b0>
 8000cb2:	4645      	mov	r5, r8
 8000cb4:	4305      	orrs	r5, r0
 8000cb6:	026d      	lsls	r5, r5, #9
 8000cb8:	0026      	movs	r6, r4
 8000cba:	20ff      	movs	r0, #255	; 0xff
 8000cbc:	0a6d      	lsrs	r5, r5, #9
 8000cbe:	e786      	b.n	8000bce <__aeabi_fdiv+0xbe>
 8000cc0:	2080      	movs	r0, #128	; 0x80
 8000cc2:	03c0      	lsls	r0, r0, #15
 8000cc4:	4305      	orrs	r5, r0
 8000cc6:	026d      	lsls	r5, r5, #9
 8000cc8:	20ff      	movs	r0, #255	; 0xff
 8000cca:	0a6d      	lsrs	r5, r5, #9
 8000ccc:	e77f      	b.n	8000bce <__aeabi_fdiv+0xbe>
 8000cce:	4641      	mov	r1, r8
 8000cd0:	016a      	lsls	r2, r5, #5
 8000cd2:	0148      	lsls	r0, r1, #5
 8000cd4:	4282      	cmp	r2, r0
 8000cd6:	d219      	bcs.n	8000d0c <__aeabi_fdiv+0x1fc>
 8000cd8:	211b      	movs	r1, #27
 8000cda:	2500      	movs	r5, #0
 8000cdc:	3f01      	subs	r7, #1
 8000cde:	2601      	movs	r6, #1
 8000ce0:	0014      	movs	r4, r2
 8000ce2:	006d      	lsls	r5, r5, #1
 8000ce4:	0052      	lsls	r2, r2, #1
 8000ce6:	2c00      	cmp	r4, #0
 8000ce8:	db01      	blt.n	8000cee <__aeabi_fdiv+0x1de>
 8000cea:	4290      	cmp	r0, r2
 8000cec:	d801      	bhi.n	8000cf2 <__aeabi_fdiv+0x1e2>
 8000cee:	1a12      	subs	r2, r2, r0
 8000cf0:	4335      	orrs	r5, r6
 8000cf2:	3901      	subs	r1, #1
 8000cf4:	2900      	cmp	r1, #0
 8000cf6:	d1f3      	bne.n	8000ce0 <__aeabi_fdiv+0x1d0>
 8000cf8:	1e50      	subs	r0, r2, #1
 8000cfa:	4182      	sbcs	r2, r0
 8000cfc:	0038      	movs	r0, r7
 8000cfe:	307f      	adds	r0, #127	; 0x7f
 8000d00:	001e      	movs	r6, r3
 8000d02:	4315      	orrs	r5, r2
 8000d04:	2800      	cmp	r0, #0
 8000d06:	dd00      	ble.n	8000d0a <__aeabi_fdiv+0x1fa>
 8000d08:	e74b      	b.n	8000ba2 <__aeabi_fdiv+0x92>
 8000d0a:	e7aa      	b.n	8000c62 <__aeabi_fdiv+0x152>
 8000d0c:	211a      	movs	r1, #26
 8000d0e:	2501      	movs	r5, #1
 8000d10:	1a12      	subs	r2, r2, r0
 8000d12:	e7e4      	b.n	8000cde <__aeabi_fdiv+0x1ce>
 8000d14:	01ad      	lsls	r5, r5, #6
 8000d16:	2000      	movs	r0, #0
 8000d18:	0a6d      	lsrs	r5, r5, #9
 8000d1a:	e758      	b.n	8000bce <__aeabi_fdiv+0xbe>
 8000d1c:	0801185c 	.word	0x0801185c
 8000d20:	f7ffffff 	.word	0xf7ffffff
 8000d24:	0801189c 	.word	0x0801189c

08000d28 <__eqsf2>:
 8000d28:	b570      	push	{r4, r5, r6, lr}
 8000d2a:	0042      	lsls	r2, r0, #1
 8000d2c:	024e      	lsls	r6, r1, #9
 8000d2e:	004c      	lsls	r4, r1, #1
 8000d30:	0245      	lsls	r5, r0, #9
 8000d32:	0a6d      	lsrs	r5, r5, #9
 8000d34:	0e12      	lsrs	r2, r2, #24
 8000d36:	0fc3      	lsrs	r3, r0, #31
 8000d38:	0a76      	lsrs	r6, r6, #9
 8000d3a:	0e24      	lsrs	r4, r4, #24
 8000d3c:	0fc9      	lsrs	r1, r1, #31
 8000d3e:	2aff      	cmp	r2, #255	; 0xff
 8000d40:	d00f      	beq.n	8000d62 <__eqsf2+0x3a>
 8000d42:	2cff      	cmp	r4, #255	; 0xff
 8000d44:	d011      	beq.n	8000d6a <__eqsf2+0x42>
 8000d46:	2001      	movs	r0, #1
 8000d48:	42a2      	cmp	r2, r4
 8000d4a:	d000      	beq.n	8000d4e <__eqsf2+0x26>
 8000d4c:	bd70      	pop	{r4, r5, r6, pc}
 8000d4e:	42b5      	cmp	r5, r6
 8000d50:	d1fc      	bne.n	8000d4c <__eqsf2+0x24>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d00d      	beq.n	8000d72 <__eqsf2+0x4a>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	d1f8      	bne.n	8000d4c <__eqsf2+0x24>
 8000d5a:	0028      	movs	r0, r5
 8000d5c:	1e45      	subs	r5, r0, #1
 8000d5e:	41a8      	sbcs	r0, r5
 8000d60:	e7f4      	b.n	8000d4c <__eqsf2+0x24>
 8000d62:	2001      	movs	r0, #1
 8000d64:	2d00      	cmp	r5, #0
 8000d66:	d1f1      	bne.n	8000d4c <__eqsf2+0x24>
 8000d68:	e7eb      	b.n	8000d42 <__eqsf2+0x1a>
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	2e00      	cmp	r6, #0
 8000d6e:	d1ed      	bne.n	8000d4c <__eqsf2+0x24>
 8000d70:	e7e9      	b.n	8000d46 <__eqsf2+0x1e>
 8000d72:	2000      	movs	r0, #0
 8000d74:	e7ea      	b.n	8000d4c <__eqsf2+0x24>
 8000d76:	46c0      	nop			; (mov r8, r8)

08000d78 <__gesf2>:
 8000d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d7a:	0042      	lsls	r2, r0, #1
 8000d7c:	0246      	lsls	r6, r0, #9
 8000d7e:	024d      	lsls	r5, r1, #9
 8000d80:	004c      	lsls	r4, r1, #1
 8000d82:	0fc3      	lsrs	r3, r0, #31
 8000d84:	0a76      	lsrs	r6, r6, #9
 8000d86:	0e12      	lsrs	r2, r2, #24
 8000d88:	0a6d      	lsrs	r5, r5, #9
 8000d8a:	0e24      	lsrs	r4, r4, #24
 8000d8c:	0fc8      	lsrs	r0, r1, #31
 8000d8e:	2aff      	cmp	r2, #255	; 0xff
 8000d90:	d01f      	beq.n	8000dd2 <__gesf2+0x5a>
 8000d92:	2cff      	cmp	r4, #255	; 0xff
 8000d94:	d010      	beq.n	8000db8 <__gesf2+0x40>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	d11f      	bne.n	8000dda <__gesf2+0x62>
 8000d9a:	4271      	negs	r1, r6
 8000d9c:	4171      	adcs	r1, r6
 8000d9e:	2c00      	cmp	r4, #0
 8000da0:	d101      	bne.n	8000da6 <__gesf2+0x2e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	d01e      	beq.n	8000de4 <__gesf2+0x6c>
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d10e      	bne.n	8000dc8 <__gesf2+0x50>
 8000daa:	4283      	cmp	r3, r0
 8000dac:	d01e      	beq.n	8000dec <__gesf2+0x74>
 8000dae:	2102      	movs	r1, #2
 8000db0:	1e58      	subs	r0, r3, #1
 8000db2:	4008      	ands	r0, r1
 8000db4:	3801      	subs	r0, #1
 8000db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000db8:	2d00      	cmp	r5, #0
 8000dba:	d126      	bne.n	8000e0a <__gesf2+0x92>
 8000dbc:	2a00      	cmp	r2, #0
 8000dbe:	d1f4      	bne.n	8000daa <__gesf2+0x32>
 8000dc0:	4271      	negs	r1, r6
 8000dc2:	4171      	adcs	r1, r6
 8000dc4:	2900      	cmp	r1, #0
 8000dc6:	d0f0      	beq.n	8000daa <__gesf2+0x32>
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f4      	bne.n	8000db6 <__gesf2+0x3e>
 8000dcc:	2001      	movs	r0, #1
 8000dce:	4240      	negs	r0, r0
 8000dd0:	e7f1      	b.n	8000db6 <__gesf2+0x3e>
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d119      	bne.n	8000e0a <__gesf2+0x92>
 8000dd6:	2cff      	cmp	r4, #255	; 0xff
 8000dd8:	d0ee      	beq.n	8000db8 <__gesf2+0x40>
 8000dda:	2c00      	cmp	r4, #0
 8000ddc:	d1e5      	bne.n	8000daa <__gesf2+0x32>
 8000dde:	2d00      	cmp	r5, #0
 8000de0:	d1e3      	bne.n	8000daa <__gesf2+0x32>
 8000de2:	e7e4      	b.n	8000dae <__gesf2+0x36>
 8000de4:	2000      	movs	r0, #0
 8000de6:	2e00      	cmp	r6, #0
 8000de8:	d0e5      	beq.n	8000db6 <__gesf2+0x3e>
 8000dea:	e7e0      	b.n	8000dae <__gesf2+0x36>
 8000dec:	42a2      	cmp	r2, r4
 8000dee:	dc05      	bgt.n	8000dfc <__gesf2+0x84>
 8000df0:	dbea      	blt.n	8000dc8 <__gesf2+0x50>
 8000df2:	42ae      	cmp	r6, r5
 8000df4:	d802      	bhi.n	8000dfc <__gesf2+0x84>
 8000df6:	d3e7      	bcc.n	8000dc8 <__gesf2+0x50>
 8000df8:	2000      	movs	r0, #0
 8000dfa:	e7dc      	b.n	8000db6 <__gesf2+0x3e>
 8000dfc:	4241      	negs	r1, r0
 8000dfe:	4141      	adcs	r1, r0
 8000e00:	4248      	negs	r0, r1
 8000e02:	2102      	movs	r1, #2
 8000e04:	4008      	ands	r0, r1
 8000e06:	3801      	subs	r0, #1
 8000e08:	e7d5      	b.n	8000db6 <__gesf2+0x3e>
 8000e0a:	2002      	movs	r0, #2
 8000e0c:	4240      	negs	r0, r0
 8000e0e:	e7d2      	b.n	8000db6 <__gesf2+0x3e>

08000e10 <__lesf2>:
 8000e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e12:	0042      	lsls	r2, r0, #1
 8000e14:	0246      	lsls	r6, r0, #9
 8000e16:	024d      	lsls	r5, r1, #9
 8000e18:	004c      	lsls	r4, r1, #1
 8000e1a:	0fc3      	lsrs	r3, r0, #31
 8000e1c:	0a76      	lsrs	r6, r6, #9
 8000e1e:	0e12      	lsrs	r2, r2, #24
 8000e20:	0a6d      	lsrs	r5, r5, #9
 8000e22:	0e24      	lsrs	r4, r4, #24
 8000e24:	0fc8      	lsrs	r0, r1, #31
 8000e26:	2aff      	cmp	r2, #255	; 0xff
 8000e28:	d00d      	beq.n	8000e46 <__lesf2+0x36>
 8000e2a:	2cff      	cmp	r4, #255	; 0xff
 8000e2c:	d00f      	beq.n	8000e4e <__lesf2+0x3e>
 8000e2e:	2a00      	cmp	r2, #0
 8000e30:	d123      	bne.n	8000e7a <__lesf2+0x6a>
 8000e32:	4271      	negs	r1, r6
 8000e34:	4171      	adcs	r1, r6
 8000e36:	2c00      	cmp	r4, #0
 8000e38:	d10f      	bne.n	8000e5a <__lesf2+0x4a>
 8000e3a:	2d00      	cmp	r5, #0
 8000e3c:	d10d      	bne.n	8000e5a <__lesf2+0x4a>
 8000e3e:	2000      	movs	r0, #0
 8000e40:	2e00      	cmp	r6, #0
 8000e42:	d014      	beq.n	8000e6e <__lesf2+0x5e>
 8000e44:	e00d      	b.n	8000e62 <__lesf2+0x52>
 8000e46:	2e00      	cmp	r6, #0
 8000e48:	d110      	bne.n	8000e6c <__lesf2+0x5c>
 8000e4a:	2cff      	cmp	r4, #255	; 0xff
 8000e4c:	d115      	bne.n	8000e7a <__lesf2+0x6a>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	d10c      	bne.n	8000e6c <__lesf2+0x5c>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	d103      	bne.n	8000e5e <__lesf2+0x4e>
 8000e56:	4271      	negs	r1, r6
 8000e58:	4171      	adcs	r1, r6
 8000e5a:	2900      	cmp	r1, #0
 8000e5c:	d108      	bne.n	8000e70 <__lesf2+0x60>
 8000e5e:	4283      	cmp	r3, r0
 8000e60:	d010      	beq.n	8000e84 <__lesf2+0x74>
 8000e62:	2102      	movs	r1, #2
 8000e64:	1e58      	subs	r0, r3, #1
 8000e66:	4008      	ands	r0, r1
 8000e68:	3801      	subs	r0, #1
 8000e6a:	e000      	b.n	8000e6e <__lesf2+0x5e>
 8000e6c:	2002      	movs	r0, #2
 8000e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e70:	2800      	cmp	r0, #0
 8000e72:	d1fc      	bne.n	8000e6e <__lesf2+0x5e>
 8000e74:	2001      	movs	r0, #1
 8000e76:	4240      	negs	r0, r0
 8000e78:	e7f9      	b.n	8000e6e <__lesf2+0x5e>
 8000e7a:	2c00      	cmp	r4, #0
 8000e7c:	d1ef      	bne.n	8000e5e <__lesf2+0x4e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d1ed      	bne.n	8000e5e <__lesf2+0x4e>
 8000e82:	e7ee      	b.n	8000e62 <__lesf2+0x52>
 8000e84:	42a2      	cmp	r2, r4
 8000e86:	dc05      	bgt.n	8000e94 <__lesf2+0x84>
 8000e88:	dbf2      	blt.n	8000e70 <__lesf2+0x60>
 8000e8a:	42ae      	cmp	r6, r5
 8000e8c:	d802      	bhi.n	8000e94 <__lesf2+0x84>
 8000e8e:	d3ef      	bcc.n	8000e70 <__lesf2+0x60>
 8000e90:	2000      	movs	r0, #0
 8000e92:	e7ec      	b.n	8000e6e <__lesf2+0x5e>
 8000e94:	4241      	negs	r1, r0
 8000e96:	4141      	adcs	r1, r0
 8000e98:	4248      	negs	r0, r1
 8000e9a:	2102      	movs	r1, #2
 8000e9c:	4008      	ands	r0, r1
 8000e9e:	3801      	subs	r0, #1
 8000ea0:	e7e5      	b.n	8000e6e <__lesf2+0x5e>
 8000ea2:	46c0      	nop			; (mov r8, r8)

08000ea4 <__aeabi_fmul>:
 8000ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ea6:	4657      	mov	r7, sl
 8000ea8:	464e      	mov	r6, r9
 8000eaa:	4645      	mov	r5, r8
 8000eac:	46de      	mov	lr, fp
 8000eae:	0244      	lsls	r4, r0, #9
 8000eb0:	b5e0      	push	{r5, r6, r7, lr}
 8000eb2:	0045      	lsls	r5, r0, #1
 8000eb4:	1c0f      	adds	r7, r1, #0
 8000eb6:	0a64      	lsrs	r4, r4, #9
 8000eb8:	0e2d      	lsrs	r5, r5, #24
 8000eba:	0fc6      	lsrs	r6, r0, #31
 8000ebc:	2d00      	cmp	r5, #0
 8000ebe:	d047      	beq.n	8000f50 <__aeabi_fmul+0xac>
 8000ec0:	2dff      	cmp	r5, #255	; 0xff
 8000ec2:	d04d      	beq.n	8000f60 <__aeabi_fmul+0xbc>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	2080      	movs	r0, #128	; 0x80
 8000ec8:	469a      	mov	sl, r3
 8000eca:	469b      	mov	fp, r3
 8000ecc:	00e4      	lsls	r4, r4, #3
 8000ece:	04c0      	lsls	r0, r0, #19
 8000ed0:	4304      	orrs	r4, r0
 8000ed2:	3d7f      	subs	r5, #127	; 0x7f
 8000ed4:	0278      	lsls	r0, r7, #9
 8000ed6:	0a43      	lsrs	r3, r0, #9
 8000ed8:	4699      	mov	r9, r3
 8000eda:	007a      	lsls	r2, r7, #1
 8000edc:	0ffb      	lsrs	r3, r7, #31
 8000ede:	4698      	mov	r8, r3
 8000ee0:	0e12      	lsrs	r2, r2, #24
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d044      	beq.n	8000f70 <__aeabi_fmul+0xcc>
 8000ee6:	2aff      	cmp	r2, #255	; 0xff
 8000ee8:	d011      	beq.n	8000f0e <__aeabi_fmul+0x6a>
 8000eea:	00d8      	lsls	r0, r3, #3
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	04db      	lsls	r3, r3, #19
 8000ef0:	4303      	orrs	r3, r0
 8000ef2:	4699      	mov	r9, r3
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	3a7f      	subs	r2, #127	; 0x7f
 8000ef8:	18ad      	adds	r5, r5, r2
 8000efa:	4647      	mov	r7, r8
 8000efc:	4653      	mov	r3, sl
 8000efe:	4077      	eors	r7, r6
 8000f00:	1c69      	adds	r1, r5, #1
 8000f02:	2b0f      	cmp	r3, #15
 8000f04:	d83f      	bhi.n	8000f86 <__aeabi_fmul+0xe2>
 8000f06:	4a72      	ldr	r2, [pc, #456]	; (80010d0 <__aeabi_fmul+0x22c>)
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	58d3      	ldr	r3, [r2, r3]
 8000f0c:	469f      	mov	pc, r3
 8000f0e:	35ff      	adds	r5, #255	; 0xff
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d000      	beq.n	8000f16 <__aeabi_fmul+0x72>
 8000f14:	e079      	b.n	800100a <__aeabi_fmul+0x166>
 8000f16:	4652      	mov	r2, sl
 8000f18:	2302      	movs	r3, #2
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	4692      	mov	sl, r2
 8000f1e:	2002      	movs	r0, #2
 8000f20:	e7eb      	b.n	8000efa <__aeabi_fmul+0x56>
 8000f22:	4647      	mov	r7, r8
 8000f24:	464c      	mov	r4, r9
 8000f26:	4683      	mov	fp, r0
 8000f28:	465b      	mov	r3, fp
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d028      	beq.n	8000f80 <__aeabi_fmul+0xdc>
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d100      	bne.n	8000f34 <__aeabi_fmul+0x90>
 8000f32:	e0c6      	b.n	80010c2 <__aeabi_fmul+0x21e>
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d14f      	bne.n	8000fd8 <__aeabi_fmul+0x134>
 8000f38:	2000      	movs	r0, #0
 8000f3a:	2400      	movs	r4, #0
 8000f3c:	05c0      	lsls	r0, r0, #23
 8000f3e:	07ff      	lsls	r7, r7, #31
 8000f40:	4320      	orrs	r0, r4
 8000f42:	4338      	orrs	r0, r7
 8000f44:	bcf0      	pop	{r4, r5, r6, r7}
 8000f46:	46bb      	mov	fp, r7
 8000f48:	46b2      	mov	sl, r6
 8000f4a:	46a9      	mov	r9, r5
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f50:	2c00      	cmp	r4, #0
 8000f52:	d171      	bne.n	8001038 <__aeabi_fmul+0x194>
 8000f54:	2304      	movs	r3, #4
 8000f56:	469a      	mov	sl, r3
 8000f58:	3b03      	subs	r3, #3
 8000f5a:	2500      	movs	r5, #0
 8000f5c:	469b      	mov	fp, r3
 8000f5e:	e7b9      	b.n	8000ed4 <__aeabi_fmul+0x30>
 8000f60:	2c00      	cmp	r4, #0
 8000f62:	d163      	bne.n	800102c <__aeabi_fmul+0x188>
 8000f64:	2308      	movs	r3, #8
 8000f66:	469a      	mov	sl, r3
 8000f68:	3b06      	subs	r3, #6
 8000f6a:	25ff      	movs	r5, #255	; 0xff
 8000f6c:	469b      	mov	fp, r3
 8000f6e:	e7b1      	b.n	8000ed4 <__aeabi_fmul+0x30>
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d150      	bne.n	8001016 <__aeabi_fmul+0x172>
 8000f74:	4652      	mov	r2, sl
 8000f76:	3301      	adds	r3, #1
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	4692      	mov	sl, r2
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	e7bc      	b.n	8000efa <__aeabi_fmul+0x56>
 8000f80:	20ff      	movs	r0, #255	; 0xff
 8000f82:	2400      	movs	r4, #0
 8000f84:	e7da      	b.n	8000f3c <__aeabi_fmul+0x98>
 8000f86:	4648      	mov	r0, r9
 8000f88:	0c26      	lsrs	r6, r4, #16
 8000f8a:	0424      	lsls	r4, r4, #16
 8000f8c:	0c22      	lsrs	r2, r4, #16
 8000f8e:	0404      	lsls	r4, r0, #16
 8000f90:	0c24      	lsrs	r4, r4, #16
 8000f92:	464b      	mov	r3, r9
 8000f94:	0020      	movs	r0, r4
 8000f96:	0c1b      	lsrs	r3, r3, #16
 8000f98:	4350      	muls	r0, r2
 8000f9a:	4374      	muls	r4, r6
 8000f9c:	435a      	muls	r2, r3
 8000f9e:	435e      	muls	r6, r3
 8000fa0:	1912      	adds	r2, r2, r4
 8000fa2:	0c03      	lsrs	r3, r0, #16
 8000fa4:	189b      	adds	r3, r3, r2
 8000fa6:	429c      	cmp	r4, r3
 8000fa8:	d903      	bls.n	8000fb2 <__aeabi_fmul+0x10e>
 8000faa:	2280      	movs	r2, #128	; 0x80
 8000fac:	0252      	lsls	r2, r2, #9
 8000fae:	4694      	mov	ip, r2
 8000fb0:	4466      	add	r6, ip
 8000fb2:	0400      	lsls	r0, r0, #16
 8000fb4:	041a      	lsls	r2, r3, #16
 8000fb6:	0c00      	lsrs	r0, r0, #16
 8000fb8:	1812      	adds	r2, r2, r0
 8000fba:	0194      	lsls	r4, r2, #6
 8000fbc:	1e60      	subs	r0, r4, #1
 8000fbe:	4184      	sbcs	r4, r0
 8000fc0:	0c1b      	lsrs	r3, r3, #16
 8000fc2:	0e92      	lsrs	r2, r2, #26
 8000fc4:	199b      	adds	r3, r3, r6
 8000fc6:	4314      	orrs	r4, r2
 8000fc8:	019b      	lsls	r3, r3, #6
 8000fca:	431c      	orrs	r4, r3
 8000fcc:	011b      	lsls	r3, r3, #4
 8000fce:	d572      	bpl.n	80010b6 <__aeabi_fmul+0x212>
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	0863      	lsrs	r3, r4, #1
 8000fd4:	4004      	ands	r4, r0
 8000fd6:	431c      	orrs	r4, r3
 8000fd8:	0008      	movs	r0, r1
 8000fda:	307f      	adds	r0, #127	; 0x7f
 8000fdc:	2800      	cmp	r0, #0
 8000fde:	dd3c      	ble.n	800105a <__aeabi_fmul+0x1b6>
 8000fe0:	0763      	lsls	r3, r4, #29
 8000fe2:	d004      	beq.n	8000fee <__aeabi_fmul+0x14a>
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	4023      	ands	r3, r4
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	d000      	beq.n	8000fee <__aeabi_fmul+0x14a>
 8000fec:	3404      	adds	r4, #4
 8000fee:	0123      	lsls	r3, r4, #4
 8000ff0:	d503      	bpl.n	8000ffa <__aeabi_fmul+0x156>
 8000ff2:	3180      	adds	r1, #128	; 0x80
 8000ff4:	0008      	movs	r0, r1
 8000ff6:	4b37      	ldr	r3, [pc, #220]	; (80010d4 <__aeabi_fmul+0x230>)
 8000ff8:	401c      	ands	r4, r3
 8000ffa:	28fe      	cmp	r0, #254	; 0xfe
 8000ffc:	dcc0      	bgt.n	8000f80 <__aeabi_fmul+0xdc>
 8000ffe:	01a4      	lsls	r4, r4, #6
 8001000:	0a64      	lsrs	r4, r4, #9
 8001002:	b2c0      	uxtb	r0, r0
 8001004:	e79a      	b.n	8000f3c <__aeabi_fmul+0x98>
 8001006:	0037      	movs	r7, r6
 8001008:	e78e      	b.n	8000f28 <__aeabi_fmul+0x84>
 800100a:	4652      	mov	r2, sl
 800100c:	2303      	movs	r3, #3
 800100e:	431a      	orrs	r2, r3
 8001010:	4692      	mov	sl, r2
 8001012:	2003      	movs	r0, #3
 8001014:	e771      	b.n	8000efa <__aeabi_fmul+0x56>
 8001016:	4648      	mov	r0, r9
 8001018:	f002 f94c 	bl	80032b4 <__clzsi2>
 800101c:	464a      	mov	r2, r9
 800101e:	1f43      	subs	r3, r0, #5
 8001020:	409a      	lsls	r2, r3
 8001022:	1a2d      	subs	r5, r5, r0
 8001024:	4691      	mov	r9, r2
 8001026:	2000      	movs	r0, #0
 8001028:	3d76      	subs	r5, #118	; 0x76
 800102a:	e766      	b.n	8000efa <__aeabi_fmul+0x56>
 800102c:	230c      	movs	r3, #12
 800102e:	469a      	mov	sl, r3
 8001030:	3b09      	subs	r3, #9
 8001032:	25ff      	movs	r5, #255	; 0xff
 8001034:	469b      	mov	fp, r3
 8001036:	e74d      	b.n	8000ed4 <__aeabi_fmul+0x30>
 8001038:	0020      	movs	r0, r4
 800103a:	f002 f93b 	bl	80032b4 <__clzsi2>
 800103e:	2576      	movs	r5, #118	; 0x76
 8001040:	1f43      	subs	r3, r0, #5
 8001042:	409c      	lsls	r4, r3
 8001044:	2300      	movs	r3, #0
 8001046:	426d      	negs	r5, r5
 8001048:	469a      	mov	sl, r3
 800104a:	469b      	mov	fp, r3
 800104c:	1a2d      	subs	r5, r5, r0
 800104e:	e741      	b.n	8000ed4 <__aeabi_fmul+0x30>
 8001050:	2480      	movs	r4, #128	; 0x80
 8001052:	2700      	movs	r7, #0
 8001054:	20ff      	movs	r0, #255	; 0xff
 8001056:	03e4      	lsls	r4, r4, #15
 8001058:	e770      	b.n	8000f3c <__aeabi_fmul+0x98>
 800105a:	2301      	movs	r3, #1
 800105c:	1a1b      	subs	r3, r3, r0
 800105e:	2b1b      	cmp	r3, #27
 8001060:	dd00      	ble.n	8001064 <__aeabi_fmul+0x1c0>
 8001062:	e769      	b.n	8000f38 <__aeabi_fmul+0x94>
 8001064:	319e      	adds	r1, #158	; 0x9e
 8001066:	0020      	movs	r0, r4
 8001068:	408c      	lsls	r4, r1
 800106a:	40d8      	lsrs	r0, r3
 800106c:	1e63      	subs	r3, r4, #1
 800106e:	419c      	sbcs	r4, r3
 8001070:	4304      	orrs	r4, r0
 8001072:	0763      	lsls	r3, r4, #29
 8001074:	d004      	beq.n	8001080 <__aeabi_fmul+0x1dc>
 8001076:	230f      	movs	r3, #15
 8001078:	4023      	ands	r3, r4
 800107a:	2b04      	cmp	r3, #4
 800107c:	d000      	beq.n	8001080 <__aeabi_fmul+0x1dc>
 800107e:	3404      	adds	r4, #4
 8001080:	0163      	lsls	r3, r4, #5
 8001082:	d51a      	bpl.n	80010ba <__aeabi_fmul+0x216>
 8001084:	2001      	movs	r0, #1
 8001086:	2400      	movs	r4, #0
 8001088:	e758      	b.n	8000f3c <__aeabi_fmul+0x98>
 800108a:	2080      	movs	r0, #128	; 0x80
 800108c:	03c0      	lsls	r0, r0, #15
 800108e:	4204      	tst	r4, r0
 8001090:	d009      	beq.n	80010a6 <__aeabi_fmul+0x202>
 8001092:	464b      	mov	r3, r9
 8001094:	4203      	tst	r3, r0
 8001096:	d106      	bne.n	80010a6 <__aeabi_fmul+0x202>
 8001098:	464c      	mov	r4, r9
 800109a:	4304      	orrs	r4, r0
 800109c:	0264      	lsls	r4, r4, #9
 800109e:	4647      	mov	r7, r8
 80010a0:	20ff      	movs	r0, #255	; 0xff
 80010a2:	0a64      	lsrs	r4, r4, #9
 80010a4:	e74a      	b.n	8000f3c <__aeabi_fmul+0x98>
 80010a6:	2080      	movs	r0, #128	; 0x80
 80010a8:	03c0      	lsls	r0, r0, #15
 80010aa:	4304      	orrs	r4, r0
 80010ac:	0264      	lsls	r4, r4, #9
 80010ae:	0037      	movs	r7, r6
 80010b0:	20ff      	movs	r0, #255	; 0xff
 80010b2:	0a64      	lsrs	r4, r4, #9
 80010b4:	e742      	b.n	8000f3c <__aeabi_fmul+0x98>
 80010b6:	0029      	movs	r1, r5
 80010b8:	e78e      	b.n	8000fd8 <__aeabi_fmul+0x134>
 80010ba:	01a4      	lsls	r4, r4, #6
 80010bc:	2000      	movs	r0, #0
 80010be:	0a64      	lsrs	r4, r4, #9
 80010c0:	e73c      	b.n	8000f3c <__aeabi_fmul+0x98>
 80010c2:	2080      	movs	r0, #128	; 0x80
 80010c4:	03c0      	lsls	r0, r0, #15
 80010c6:	4304      	orrs	r4, r0
 80010c8:	0264      	lsls	r4, r4, #9
 80010ca:	20ff      	movs	r0, #255	; 0xff
 80010cc:	0a64      	lsrs	r4, r4, #9
 80010ce:	e735      	b.n	8000f3c <__aeabi_fmul+0x98>
 80010d0:	080118dc 	.word	0x080118dc
 80010d4:	f7ffffff 	.word	0xf7ffffff

080010d8 <__aeabi_fsub>:
 80010d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010da:	4646      	mov	r6, r8
 80010dc:	46d6      	mov	lr, sl
 80010de:	464f      	mov	r7, r9
 80010e0:	0243      	lsls	r3, r0, #9
 80010e2:	0a5b      	lsrs	r3, r3, #9
 80010e4:	00da      	lsls	r2, r3, #3
 80010e6:	4694      	mov	ip, r2
 80010e8:	024a      	lsls	r2, r1, #9
 80010ea:	b5c0      	push	{r6, r7, lr}
 80010ec:	0044      	lsls	r4, r0, #1
 80010ee:	0a56      	lsrs	r6, r2, #9
 80010f0:	1c05      	adds	r5, r0, #0
 80010f2:	46b0      	mov	r8, r6
 80010f4:	0e24      	lsrs	r4, r4, #24
 80010f6:	004e      	lsls	r6, r1, #1
 80010f8:	0992      	lsrs	r2, r2, #6
 80010fa:	001f      	movs	r7, r3
 80010fc:	0020      	movs	r0, r4
 80010fe:	4692      	mov	sl, r2
 8001100:	0fed      	lsrs	r5, r5, #31
 8001102:	0e36      	lsrs	r6, r6, #24
 8001104:	0fc9      	lsrs	r1, r1, #31
 8001106:	2eff      	cmp	r6, #255	; 0xff
 8001108:	d100      	bne.n	800110c <__aeabi_fsub+0x34>
 800110a:	e07f      	b.n	800120c <__aeabi_fsub+0x134>
 800110c:	2201      	movs	r2, #1
 800110e:	4051      	eors	r1, r2
 8001110:	428d      	cmp	r5, r1
 8001112:	d051      	beq.n	80011b8 <__aeabi_fsub+0xe0>
 8001114:	1ba2      	subs	r2, r4, r6
 8001116:	4691      	mov	r9, r2
 8001118:	2a00      	cmp	r2, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_fsub+0x46>
 800111c:	e07e      	b.n	800121c <__aeabi_fsub+0x144>
 800111e:	2e00      	cmp	r6, #0
 8001120:	d100      	bne.n	8001124 <__aeabi_fsub+0x4c>
 8001122:	e099      	b.n	8001258 <__aeabi_fsub+0x180>
 8001124:	2cff      	cmp	r4, #255	; 0xff
 8001126:	d100      	bne.n	800112a <__aeabi_fsub+0x52>
 8001128:	e08c      	b.n	8001244 <__aeabi_fsub+0x16c>
 800112a:	2380      	movs	r3, #128	; 0x80
 800112c:	4652      	mov	r2, sl
 800112e:	04db      	lsls	r3, r3, #19
 8001130:	431a      	orrs	r2, r3
 8001132:	4692      	mov	sl, r2
 8001134:	464a      	mov	r2, r9
 8001136:	2301      	movs	r3, #1
 8001138:	2a1b      	cmp	r2, #27
 800113a:	dc08      	bgt.n	800114e <__aeabi_fsub+0x76>
 800113c:	4653      	mov	r3, sl
 800113e:	2120      	movs	r1, #32
 8001140:	40d3      	lsrs	r3, r2
 8001142:	1a89      	subs	r1, r1, r2
 8001144:	4652      	mov	r2, sl
 8001146:	408a      	lsls	r2, r1
 8001148:	1e51      	subs	r1, r2, #1
 800114a:	418a      	sbcs	r2, r1
 800114c:	4313      	orrs	r3, r2
 800114e:	4662      	mov	r2, ip
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	015a      	lsls	r2, r3, #5
 8001154:	d400      	bmi.n	8001158 <__aeabi_fsub+0x80>
 8001156:	e0f3      	b.n	8001340 <__aeabi_fsub+0x268>
 8001158:	019b      	lsls	r3, r3, #6
 800115a:	099e      	lsrs	r6, r3, #6
 800115c:	0030      	movs	r0, r6
 800115e:	f002 f8a9 	bl	80032b4 <__clzsi2>
 8001162:	3805      	subs	r0, #5
 8001164:	4086      	lsls	r6, r0
 8001166:	4284      	cmp	r4, r0
 8001168:	dd00      	ble.n	800116c <__aeabi_fsub+0x94>
 800116a:	e0f7      	b.n	800135c <__aeabi_fsub+0x284>
 800116c:	0032      	movs	r2, r6
 800116e:	1b04      	subs	r4, r0, r4
 8001170:	2020      	movs	r0, #32
 8001172:	3401      	adds	r4, #1
 8001174:	40e2      	lsrs	r2, r4
 8001176:	1b04      	subs	r4, r0, r4
 8001178:	40a6      	lsls	r6, r4
 800117a:	0033      	movs	r3, r6
 800117c:	1e5e      	subs	r6, r3, #1
 800117e:	41b3      	sbcs	r3, r6
 8001180:	2400      	movs	r4, #0
 8001182:	4313      	orrs	r3, r2
 8001184:	075a      	lsls	r2, r3, #29
 8001186:	d004      	beq.n	8001192 <__aeabi_fsub+0xba>
 8001188:	220f      	movs	r2, #15
 800118a:	401a      	ands	r2, r3
 800118c:	2a04      	cmp	r2, #4
 800118e:	d000      	beq.n	8001192 <__aeabi_fsub+0xba>
 8001190:	3304      	adds	r3, #4
 8001192:	015a      	lsls	r2, r3, #5
 8001194:	d400      	bmi.n	8001198 <__aeabi_fsub+0xc0>
 8001196:	e0d6      	b.n	8001346 <__aeabi_fsub+0x26e>
 8001198:	1c62      	adds	r2, r4, #1
 800119a:	2cfe      	cmp	r4, #254	; 0xfe
 800119c:	d100      	bne.n	80011a0 <__aeabi_fsub+0xc8>
 800119e:	e0da      	b.n	8001356 <__aeabi_fsub+0x27e>
 80011a0:	019b      	lsls	r3, r3, #6
 80011a2:	0a5f      	lsrs	r7, r3, #9
 80011a4:	b2d0      	uxtb	r0, r2
 80011a6:	05c0      	lsls	r0, r0, #23
 80011a8:	4338      	orrs	r0, r7
 80011aa:	07ed      	lsls	r5, r5, #31
 80011ac:	4328      	orrs	r0, r5
 80011ae:	bce0      	pop	{r5, r6, r7}
 80011b0:	46ba      	mov	sl, r7
 80011b2:	46b1      	mov	r9, r6
 80011b4:	46a8      	mov	r8, r5
 80011b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011b8:	1ba2      	subs	r2, r4, r6
 80011ba:	4691      	mov	r9, r2
 80011bc:	2a00      	cmp	r2, #0
 80011be:	dd63      	ble.n	8001288 <__aeabi_fsub+0x1b0>
 80011c0:	2e00      	cmp	r6, #0
 80011c2:	d100      	bne.n	80011c6 <__aeabi_fsub+0xee>
 80011c4:	e099      	b.n	80012fa <__aeabi_fsub+0x222>
 80011c6:	2cff      	cmp	r4, #255	; 0xff
 80011c8:	d03c      	beq.n	8001244 <__aeabi_fsub+0x16c>
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	4652      	mov	r2, sl
 80011ce:	04db      	lsls	r3, r3, #19
 80011d0:	431a      	orrs	r2, r3
 80011d2:	4692      	mov	sl, r2
 80011d4:	464a      	mov	r2, r9
 80011d6:	2301      	movs	r3, #1
 80011d8:	2a1b      	cmp	r2, #27
 80011da:	dc08      	bgt.n	80011ee <__aeabi_fsub+0x116>
 80011dc:	4653      	mov	r3, sl
 80011de:	2120      	movs	r1, #32
 80011e0:	40d3      	lsrs	r3, r2
 80011e2:	1a89      	subs	r1, r1, r2
 80011e4:	4652      	mov	r2, sl
 80011e6:	408a      	lsls	r2, r1
 80011e8:	1e51      	subs	r1, r2, #1
 80011ea:	418a      	sbcs	r2, r1
 80011ec:	4313      	orrs	r3, r2
 80011ee:	4463      	add	r3, ip
 80011f0:	015a      	lsls	r2, r3, #5
 80011f2:	d400      	bmi.n	80011f6 <__aeabi_fsub+0x11e>
 80011f4:	e0a4      	b.n	8001340 <__aeabi_fsub+0x268>
 80011f6:	3401      	adds	r4, #1
 80011f8:	2cff      	cmp	r4, #255	; 0xff
 80011fa:	d100      	bne.n	80011fe <__aeabi_fsub+0x126>
 80011fc:	e0ab      	b.n	8001356 <__aeabi_fsub+0x27e>
 80011fe:	2201      	movs	r2, #1
 8001200:	4997      	ldr	r1, [pc, #604]	; (8001460 <__aeabi_fsub+0x388>)
 8001202:	401a      	ands	r2, r3
 8001204:	085b      	lsrs	r3, r3, #1
 8001206:	400b      	ands	r3, r1
 8001208:	4313      	orrs	r3, r2
 800120a:	e7bb      	b.n	8001184 <__aeabi_fsub+0xac>
 800120c:	2a00      	cmp	r2, #0
 800120e:	d032      	beq.n	8001276 <__aeabi_fsub+0x19e>
 8001210:	428d      	cmp	r5, r1
 8001212:	d035      	beq.n	8001280 <__aeabi_fsub+0x1a8>
 8001214:	22ff      	movs	r2, #255	; 0xff
 8001216:	4252      	negs	r2, r2
 8001218:	4691      	mov	r9, r2
 800121a:	44a1      	add	r9, r4
 800121c:	464a      	mov	r2, r9
 800121e:	2a00      	cmp	r2, #0
 8001220:	d051      	beq.n	80012c6 <__aeabi_fsub+0x1ee>
 8001222:	1b30      	subs	r0, r6, r4
 8001224:	2c00      	cmp	r4, #0
 8001226:	d000      	beq.n	800122a <__aeabi_fsub+0x152>
 8001228:	e09c      	b.n	8001364 <__aeabi_fsub+0x28c>
 800122a:	4663      	mov	r3, ip
 800122c:	2b00      	cmp	r3, #0
 800122e:	d100      	bne.n	8001232 <__aeabi_fsub+0x15a>
 8001230:	e0df      	b.n	80013f2 <__aeabi_fsub+0x31a>
 8001232:	3801      	subs	r0, #1
 8001234:	2800      	cmp	r0, #0
 8001236:	d100      	bne.n	800123a <__aeabi_fsub+0x162>
 8001238:	e0f7      	b.n	800142a <__aeabi_fsub+0x352>
 800123a:	2eff      	cmp	r6, #255	; 0xff
 800123c:	d000      	beq.n	8001240 <__aeabi_fsub+0x168>
 800123e:	e099      	b.n	8001374 <__aeabi_fsub+0x29c>
 8001240:	000d      	movs	r5, r1
 8001242:	4643      	mov	r3, r8
 8001244:	2b00      	cmp	r3, #0
 8001246:	d100      	bne.n	800124a <__aeabi_fsub+0x172>
 8001248:	e085      	b.n	8001356 <__aeabi_fsub+0x27e>
 800124a:	2780      	movs	r7, #128	; 0x80
 800124c:	03ff      	lsls	r7, r7, #15
 800124e:	431f      	orrs	r7, r3
 8001250:	027f      	lsls	r7, r7, #9
 8001252:	20ff      	movs	r0, #255	; 0xff
 8001254:	0a7f      	lsrs	r7, r7, #9
 8001256:	e7a6      	b.n	80011a6 <__aeabi_fsub+0xce>
 8001258:	4652      	mov	r2, sl
 800125a:	2a00      	cmp	r2, #0
 800125c:	d074      	beq.n	8001348 <__aeabi_fsub+0x270>
 800125e:	2201      	movs	r2, #1
 8001260:	4252      	negs	r2, r2
 8001262:	4690      	mov	r8, r2
 8001264:	44c1      	add	r9, r8
 8001266:	464a      	mov	r2, r9
 8001268:	2a00      	cmp	r2, #0
 800126a:	d100      	bne.n	800126e <__aeabi_fsub+0x196>
 800126c:	e0c8      	b.n	8001400 <__aeabi_fsub+0x328>
 800126e:	2cff      	cmp	r4, #255	; 0xff
 8001270:	d000      	beq.n	8001274 <__aeabi_fsub+0x19c>
 8001272:	e75f      	b.n	8001134 <__aeabi_fsub+0x5c>
 8001274:	e7e6      	b.n	8001244 <__aeabi_fsub+0x16c>
 8001276:	2201      	movs	r2, #1
 8001278:	4051      	eors	r1, r2
 800127a:	42a9      	cmp	r1, r5
 800127c:	d000      	beq.n	8001280 <__aeabi_fsub+0x1a8>
 800127e:	e749      	b.n	8001114 <__aeabi_fsub+0x3c>
 8001280:	22ff      	movs	r2, #255	; 0xff
 8001282:	4252      	negs	r2, r2
 8001284:	4691      	mov	r9, r2
 8001286:	44a1      	add	r9, r4
 8001288:	464a      	mov	r2, r9
 800128a:	2a00      	cmp	r2, #0
 800128c:	d043      	beq.n	8001316 <__aeabi_fsub+0x23e>
 800128e:	1b31      	subs	r1, r6, r4
 8001290:	2c00      	cmp	r4, #0
 8001292:	d100      	bne.n	8001296 <__aeabi_fsub+0x1be>
 8001294:	e08c      	b.n	80013b0 <__aeabi_fsub+0x2d8>
 8001296:	2eff      	cmp	r6, #255	; 0xff
 8001298:	d100      	bne.n	800129c <__aeabi_fsub+0x1c4>
 800129a:	e092      	b.n	80013c2 <__aeabi_fsub+0x2ea>
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	4662      	mov	r2, ip
 80012a0:	04db      	lsls	r3, r3, #19
 80012a2:	431a      	orrs	r2, r3
 80012a4:	4694      	mov	ip, r2
 80012a6:	2301      	movs	r3, #1
 80012a8:	291b      	cmp	r1, #27
 80012aa:	dc09      	bgt.n	80012c0 <__aeabi_fsub+0x1e8>
 80012ac:	2020      	movs	r0, #32
 80012ae:	4663      	mov	r3, ip
 80012b0:	4662      	mov	r2, ip
 80012b2:	40cb      	lsrs	r3, r1
 80012b4:	1a41      	subs	r1, r0, r1
 80012b6:	408a      	lsls	r2, r1
 80012b8:	0011      	movs	r1, r2
 80012ba:	1e48      	subs	r0, r1, #1
 80012bc:	4181      	sbcs	r1, r0
 80012be:	430b      	orrs	r3, r1
 80012c0:	0034      	movs	r4, r6
 80012c2:	4453      	add	r3, sl
 80012c4:	e794      	b.n	80011f0 <__aeabi_fsub+0x118>
 80012c6:	22fe      	movs	r2, #254	; 0xfe
 80012c8:	1c66      	adds	r6, r4, #1
 80012ca:	4232      	tst	r2, r6
 80012cc:	d164      	bne.n	8001398 <__aeabi_fsub+0x2c0>
 80012ce:	2c00      	cmp	r4, #0
 80012d0:	d000      	beq.n	80012d4 <__aeabi_fsub+0x1fc>
 80012d2:	e082      	b.n	80013da <__aeabi_fsub+0x302>
 80012d4:	4663      	mov	r3, ip
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d100      	bne.n	80012dc <__aeabi_fsub+0x204>
 80012da:	e0ab      	b.n	8001434 <__aeabi_fsub+0x35c>
 80012dc:	4653      	mov	r3, sl
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d100      	bne.n	80012e4 <__aeabi_fsub+0x20c>
 80012e2:	e760      	b.n	80011a6 <__aeabi_fsub+0xce>
 80012e4:	4663      	mov	r3, ip
 80012e6:	4652      	mov	r2, sl
 80012e8:	1a9b      	subs	r3, r3, r2
 80012ea:	015a      	lsls	r2, r3, #5
 80012ec:	d400      	bmi.n	80012f0 <__aeabi_fsub+0x218>
 80012ee:	e0aa      	b.n	8001446 <__aeabi_fsub+0x36e>
 80012f0:	4663      	mov	r3, ip
 80012f2:	4652      	mov	r2, sl
 80012f4:	000d      	movs	r5, r1
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	e744      	b.n	8001184 <__aeabi_fsub+0xac>
 80012fa:	4652      	mov	r2, sl
 80012fc:	2a00      	cmp	r2, #0
 80012fe:	d023      	beq.n	8001348 <__aeabi_fsub+0x270>
 8001300:	2201      	movs	r2, #1
 8001302:	4252      	negs	r2, r2
 8001304:	4690      	mov	r8, r2
 8001306:	44c1      	add	r9, r8
 8001308:	464a      	mov	r2, r9
 800130a:	2a00      	cmp	r2, #0
 800130c:	d075      	beq.n	80013fa <__aeabi_fsub+0x322>
 800130e:	2cff      	cmp	r4, #255	; 0xff
 8001310:	d000      	beq.n	8001314 <__aeabi_fsub+0x23c>
 8001312:	e75f      	b.n	80011d4 <__aeabi_fsub+0xfc>
 8001314:	e796      	b.n	8001244 <__aeabi_fsub+0x16c>
 8001316:	26fe      	movs	r6, #254	; 0xfe
 8001318:	3401      	adds	r4, #1
 800131a:	4226      	tst	r6, r4
 800131c:	d153      	bne.n	80013c6 <__aeabi_fsub+0x2ee>
 800131e:	2800      	cmp	r0, #0
 8001320:	d172      	bne.n	8001408 <__aeabi_fsub+0x330>
 8001322:	4663      	mov	r3, ip
 8001324:	2b00      	cmp	r3, #0
 8001326:	d100      	bne.n	800132a <__aeabi_fsub+0x252>
 8001328:	e093      	b.n	8001452 <__aeabi_fsub+0x37a>
 800132a:	4653      	mov	r3, sl
 800132c:	2b00      	cmp	r3, #0
 800132e:	d100      	bne.n	8001332 <__aeabi_fsub+0x25a>
 8001330:	e739      	b.n	80011a6 <__aeabi_fsub+0xce>
 8001332:	4463      	add	r3, ip
 8001334:	2400      	movs	r4, #0
 8001336:	015a      	lsls	r2, r3, #5
 8001338:	d502      	bpl.n	8001340 <__aeabi_fsub+0x268>
 800133a:	4a4a      	ldr	r2, [pc, #296]	; (8001464 <__aeabi_fsub+0x38c>)
 800133c:	3401      	adds	r4, #1
 800133e:	4013      	ands	r3, r2
 8001340:	075a      	lsls	r2, r3, #29
 8001342:	d000      	beq.n	8001346 <__aeabi_fsub+0x26e>
 8001344:	e720      	b.n	8001188 <__aeabi_fsub+0xb0>
 8001346:	08db      	lsrs	r3, r3, #3
 8001348:	2cff      	cmp	r4, #255	; 0xff
 800134a:	d100      	bne.n	800134e <__aeabi_fsub+0x276>
 800134c:	e77a      	b.n	8001244 <__aeabi_fsub+0x16c>
 800134e:	025b      	lsls	r3, r3, #9
 8001350:	0a5f      	lsrs	r7, r3, #9
 8001352:	b2e0      	uxtb	r0, r4
 8001354:	e727      	b.n	80011a6 <__aeabi_fsub+0xce>
 8001356:	20ff      	movs	r0, #255	; 0xff
 8001358:	2700      	movs	r7, #0
 800135a:	e724      	b.n	80011a6 <__aeabi_fsub+0xce>
 800135c:	4b41      	ldr	r3, [pc, #260]	; (8001464 <__aeabi_fsub+0x38c>)
 800135e:	1a24      	subs	r4, r4, r0
 8001360:	4033      	ands	r3, r6
 8001362:	e70f      	b.n	8001184 <__aeabi_fsub+0xac>
 8001364:	2eff      	cmp	r6, #255	; 0xff
 8001366:	d100      	bne.n	800136a <__aeabi_fsub+0x292>
 8001368:	e76a      	b.n	8001240 <__aeabi_fsub+0x168>
 800136a:	2380      	movs	r3, #128	; 0x80
 800136c:	4662      	mov	r2, ip
 800136e:	04db      	lsls	r3, r3, #19
 8001370:	431a      	orrs	r2, r3
 8001372:	4694      	mov	ip, r2
 8001374:	2301      	movs	r3, #1
 8001376:	281b      	cmp	r0, #27
 8001378:	dc09      	bgt.n	800138e <__aeabi_fsub+0x2b6>
 800137a:	2420      	movs	r4, #32
 800137c:	4663      	mov	r3, ip
 800137e:	4662      	mov	r2, ip
 8001380:	40c3      	lsrs	r3, r0
 8001382:	1a20      	subs	r0, r4, r0
 8001384:	4082      	lsls	r2, r0
 8001386:	0010      	movs	r0, r2
 8001388:	1e44      	subs	r4, r0, #1
 800138a:	41a0      	sbcs	r0, r4
 800138c:	4303      	orrs	r3, r0
 800138e:	4652      	mov	r2, sl
 8001390:	000d      	movs	r5, r1
 8001392:	0034      	movs	r4, r6
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	e6dc      	b.n	8001152 <__aeabi_fsub+0x7a>
 8001398:	4663      	mov	r3, ip
 800139a:	4652      	mov	r2, sl
 800139c:	1a9e      	subs	r6, r3, r2
 800139e:	0173      	lsls	r3, r6, #5
 80013a0:	d417      	bmi.n	80013d2 <__aeabi_fsub+0x2fa>
 80013a2:	2e00      	cmp	r6, #0
 80013a4:	d000      	beq.n	80013a8 <__aeabi_fsub+0x2d0>
 80013a6:	e6d9      	b.n	800115c <__aeabi_fsub+0x84>
 80013a8:	2500      	movs	r5, #0
 80013aa:	2000      	movs	r0, #0
 80013ac:	2700      	movs	r7, #0
 80013ae:	e6fa      	b.n	80011a6 <__aeabi_fsub+0xce>
 80013b0:	4663      	mov	r3, ip
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d044      	beq.n	8001440 <__aeabi_fsub+0x368>
 80013b6:	3901      	subs	r1, #1
 80013b8:	2900      	cmp	r1, #0
 80013ba:	d04c      	beq.n	8001456 <__aeabi_fsub+0x37e>
 80013bc:	2eff      	cmp	r6, #255	; 0xff
 80013be:	d000      	beq.n	80013c2 <__aeabi_fsub+0x2ea>
 80013c0:	e771      	b.n	80012a6 <__aeabi_fsub+0x1ce>
 80013c2:	4643      	mov	r3, r8
 80013c4:	e73e      	b.n	8001244 <__aeabi_fsub+0x16c>
 80013c6:	2cff      	cmp	r4, #255	; 0xff
 80013c8:	d0c5      	beq.n	8001356 <__aeabi_fsub+0x27e>
 80013ca:	4652      	mov	r2, sl
 80013cc:	4462      	add	r2, ip
 80013ce:	0853      	lsrs	r3, r2, #1
 80013d0:	e7b6      	b.n	8001340 <__aeabi_fsub+0x268>
 80013d2:	4663      	mov	r3, ip
 80013d4:	000d      	movs	r5, r1
 80013d6:	1ad6      	subs	r6, r2, r3
 80013d8:	e6c0      	b.n	800115c <__aeabi_fsub+0x84>
 80013da:	4662      	mov	r2, ip
 80013dc:	2a00      	cmp	r2, #0
 80013de:	d116      	bne.n	800140e <__aeabi_fsub+0x336>
 80013e0:	4653      	mov	r3, sl
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d000      	beq.n	80013e8 <__aeabi_fsub+0x310>
 80013e6:	e72b      	b.n	8001240 <__aeabi_fsub+0x168>
 80013e8:	2780      	movs	r7, #128	; 0x80
 80013ea:	2500      	movs	r5, #0
 80013ec:	20ff      	movs	r0, #255	; 0xff
 80013ee:	03ff      	lsls	r7, r7, #15
 80013f0:	e6d9      	b.n	80011a6 <__aeabi_fsub+0xce>
 80013f2:	000d      	movs	r5, r1
 80013f4:	4643      	mov	r3, r8
 80013f6:	0034      	movs	r4, r6
 80013f8:	e7a6      	b.n	8001348 <__aeabi_fsub+0x270>
 80013fa:	4653      	mov	r3, sl
 80013fc:	4463      	add	r3, ip
 80013fe:	e6f7      	b.n	80011f0 <__aeabi_fsub+0x118>
 8001400:	4663      	mov	r3, ip
 8001402:	4652      	mov	r2, sl
 8001404:	1a9b      	subs	r3, r3, r2
 8001406:	e6a4      	b.n	8001152 <__aeabi_fsub+0x7a>
 8001408:	4662      	mov	r2, ip
 800140a:	2a00      	cmp	r2, #0
 800140c:	d0d9      	beq.n	80013c2 <__aeabi_fsub+0x2ea>
 800140e:	4652      	mov	r2, sl
 8001410:	2a00      	cmp	r2, #0
 8001412:	d100      	bne.n	8001416 <__aeabi_fsub+0x33e>
 8001414:	e716      	b.n	8001244 <__aeabi_fsub+0x16c>
 8001416:	2280      	movs	r2, #128	; 0x80
 8001418:	03d2      	lsls	r2, r2, #15
 800141a:	4213      	tst	r3, r2
 800141c:	d100      	bne.n	8001420 <__aeabi_fsub+0x348>
 800141e:	e711      	b.n	8001244 <__aeabi_fsub+0x16c>
 8001420:	4640      	mov	r0, r8
 8001422:	4210      	tst	r0, r2
 8001424:	d000      	beq.n	8001428 <__aeabi_fsub+0x350>
 8001426:	e70d      	b.n	8001244 <__aeabi_fsub+0x16c>
 8001428:	e70a      	b.n	8001240 <__aeabi_fsub+0x168>
 800142a:	4652      	mov	r2, sl
 800142c:	000d      	movs	r5, r1
 800142e:	0034      	movs	r4, r6
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	e68e      	b.n	8001152 <__aeabi_fsub+0x7a>
 8001434:	4653      	mov	r3, sl
 8001436:	2b00      	cmp	r3, #0
 8001438:	d008      	beq.n	800144c <__aeabi_fsub+0x374>
 800143a:	000d      	movs	r5, r1
 800143c:	4647      	mov	r7, r8
 800143e:	e6b2      	b.n	80011a6 <__aeabi_fsub+0xce>
 8001440:	4643      	mov	r3, r8
 8001442:	0034      	movs	r4, r6
 8001444:	e780      	b.n	8001348 <__aeabi_fsub+0x270>
 8001446:	2b00      	cmp	r3, #0
 8001448:	d000      	beq.n	800144c <__aeabi_fsub+0x374>
 800144a:	e779      	b.n	8001340 <__aeabi_fsub+0x268>
 800144c:	2500      	movs	r5, #0
 800144e:	2700      	movs	r7, #0
 8001450:	e6a9      	b.n	80011a6 <__aeabi_fsub+0xce>
 8001452:	4647      	mov	r7, r8
 8001454:	e6a7      	b.n	80011a6 <__aeabi_fsub+0xce>
 8001456:	4653      	mov	r3, sl
 8001458:	0034      	movs	r4, r6
 800145a:	4463      	add	r3, ip
 800145c:	e6c8      	b.n	80011f0 <__aeabi_fsub+0x118>
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	7dffffff 	.word	0x7dffffff
 8001464:	fbffffff 	.word	0xfbffffff

08001468 <__aeabi_f2iz>:
 8001468:	0241      	lsls	r1, r0, #9
 800146a:	0042      	lsls	r2, r0, #1
 800146c:	0fc3      	lsrs	r3, r0, #31
 800146e:	0a49      	lsrs	r1, r1, #9
 8001470:	2000      	movs	r0, #0
 8001472:	0e12      	lsrs	r2, r2, #24
 8001474:	2a7e      	cmp	r2, #126	; 0x7e
 8001476:	d903      	bls.n	8001480 <__aeabi_f2iz+0x18>
 8001478:	2a9d      	cmp	r2, #157	; 0x9d
 800147a:	d902      	bls.n	8001482 <__aeabi_f2iz+0x1a>
 800147c:	4a09      	ldr	r2, [pc, #36]	; (80014a4 <__aeabi_f2iz+0x3c>)
 800147e:	1898      	adds	r0, r3, r2
 8001480:	4770      	bx	lr
 8001482:	2080      	movs	r0, #128	; 0x80
 8001484:	0400      	lsls	r0, r0, #16
 8001486:	4301      	orrs	r1, r0
 8001488:	2a95      	cmp	r2, #149	; 0x95
 800148a:	dc07      	bgt.n	800149c <__aeabi_f2iz+0x34>
 800148c:	2096      	movs	r0, #150	; 0x96
 800148e:	1a82      	subs	r2, r0, r2
 8001490:	40d1      	lsrs	r1, r2
 8001492:	4248      	negs	r0, r1
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1f3      	bne.n	8001480 <__aeabi_f2iz+0x18>
 8001498:	0008      	movs	r0, r1
 800149a:	e7f1      	b.n	8001480 <__aeabi_f2iz+0x18>
 800149c:	3a96      	subs	r2, #150	; 0x96
 800149e:	4091      	lsls	r1, r2
 80014a0:	e7f7      	b.n	8001492 <__aeabi_f2iz+0x2a>
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	7fffffff 	.word	0x7fffffff

080014a8 <__aeabi_ui2f>:
 80014a8:	b570      	push	{r4, r5, r6, lr}
 80014aa:	1e05      	subs	r5, r0, #0
 80014ac:	d00e      	beq.n	80014cc <__aeabi_ui2f+0x24>
 80014ae:	f001 ff01 	bl	80032b4 <__clzsi2>
 80014b2:	239e      	movs	r3, #158	; 0x9e
 80014b4:	0004      	movs	r4, r0
 80014b6:	1a1b      	subs	r3, r3, r0
 80014b8:	2b96      	cmp	r3, #150	; 0x96
 80014ba:	dc0c      	bgt.n	80014d6 <__aeabi_ui2f+0x2e>
 80014bc:	2808      	cmp	r0, #8
 80014be:	dd01      	ble.n	80014c4 <__aeabi_ui2f+0x1c>
 80014c0:	3c08      	subs	r4, #8
 80014c2:	40a5      	lsls	r5, r4
 80014c4:	026d      	lsls	r5, r5, #9
 80014c6:	0a6d      	lsrs	r5, r5, #9
 80014c8:	b2d8      	uxtb	r0, r3
 80014ca:	e001      	b.n	80014d0 <__aeabi_ui2f+0x28>
 80014cc:	2000      	movs	r0, #0
 80014ce:	2500      	movs	r5, #0
 80014d0:	05c0      	lsls	r0, r0, #23
 80014d2:	4328      	orrs	r0, r5
 80014d4:	bd70      	pop	{r4, r5, r6, pc}
 80014d6:	2b99      	cmp	r3, #153	; 0x99
 80014d8:	dd09      	ble.n	80014ee <__aeabi_ui2f+0x46>
 80014da:	0002      	movs	r2, r0
 80014dc:	0029      	movs	r1, r5
 80014de:	321b      	adds	r2, #27
 80014e0:	4091      	lsls	r1, r2
 80014e2:	1e4a      	subs	r2, r1, #1
 80014e4:	4191      	sbcs	r1, r2
 80014e6:	2205      	movs	r2, #5
 80014e8:	1a12      	subs	r2, r2, r0
 80014ea:	40d5      	lsrs	r5, r2
 80014ec:	430d      	orrs	r5, r1
 80014ee:	2c05      	cmp	r4, #5
 80014f0:	dd01      	ble.n	80014f6 <__aeabi_ui2f+0x4e>
 80014f2:	1f62      	subs	r2, r4, #5
 80014f4:	4095      	lsls	r5, r2
 80014f6:	0029      	movs	r1, r5
 80014f8:	4e08      	ldr	r6, [pc, #32]	; (800151c <__aeabi_ui2f+0x74>)
 80014fa:	4031      	ands	r1, r6
 80014fc:	076a      	lsls	r2, r5, #29
 80014fe:	d009      	beq.n	8001514 <__aeabi_ui2f+0x6c>
 8001500:	200f      	movs	r0, #15
 8001502:	4028      	ands	r0, r5
 8001504:	2804      	cmp	r0, #4
 8001506:	d005      	beq.n	8001514 <__aeabi_ui2f+0x6c>
 8001508:	3104      	adds	r1, #4
 800150a:	014a      	lsls	r2, r1, #5
 800150c:	d502      	bpl.n	8001514 <__aeabi_ui2f+0x6c>
 800150e:	239f      	movs	r3, #159	; 0x9f
 8001510:	4031      	ands	r1, r6
 8001512:	1b1b      	subs	r3, r3, r4
 8001514:	0189      	lsls	r1, r1, #6
 8001516:	0a4d      	lsrs	r5, r1, #9
 8001518:	b2d8      	uxtb	r0, r3
 800151a:	e7d9      	b.n	80014d0 <__aeabi_ui2f+0x28>
 800151c:	fbffffff 	.word	0xfbffffff

08001520 <__aeabi_dadd>:
 8001520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001522:	464f      	mov	r7, r9
 8001524:	46d6      	mov	lr, sl
 8001526:	4646      	mov	r6, r8
 8001528:	000d      	movs	r5, r1
 800152a:	0001      	movs	r1, r0
 800152c:	0018      	movs	r0, r3
 800152e:	b5c0      	push	{r6, r7, lr}
 8001530:	0017      	movs	r7, r2
 8001532:	032b      	lsls	r3, r5, #12
 8001534:	0a5a      	lsrs	r2, r3, #9
 8001536:	0f4b      	lsrs	r3, r1, #29
 8001538:	4313      	orrs	r3, r2
 800153a:	00ca      	lsls	r2, r1, #3
 800153c:	4691      	mov	r9, r2
 800153e:	0302      	lsls	r2, r0, #12
 8001540:	006e      	lsls	r6, r5, #1
 8001542:	0041      	lsls	r1, r0, #1
 8001544:	0a52      	lsrs	r2, r2, #9
 8001546:	0fec      	lsrs	r4, r5, #31
 8001548:	0f7d      	lsrs	r5, r7, #29
 800154a:	4315      	orrs	r5, r2
 800154c:	0d76      	lsrs	r6, r6, #21
 800154e:	0d49      	lsrs	r1, r1, #21
 8001550:	0fc0      	lsrs	r0, r0, #31
 8001552:	4682      	mov	sl, r0
 8001554:	46ac      	mov	ip, r5
 8001556:	00ff      	lsls	r7, r7, #3
 8001558:	1a72      	subs	r2, r6, r1
 800155a:	4284      	cmp	r4, r0
 800155c:	d100      	bne.n	8001560 <__aeabi_dadd+0x40>
 800155e:	e098      	b.n	8001692 <__aeabi_dadd+0x172>
 8001560:	2a00      	cmp	r2, #0
 8001562:	dc00      	bgt.n	8001566 <__aeabi_dadd+0x46>
 8001564:	e081      	b.n	800166a <__aeabi_dadd+0x14a>
 8001566:	2900      	cmp	r1, #0
 8001568:	d100      	bne.n	800156c <__aeabi_dadd+0x4c>
 800156a:	e0b6      	b.n	80016da <__aeabi_dadd+0x1ba>
 800156c:	49c9      	ldr	r1, [pc, #804]	; (8001894 <__aeabi_dadd+0x374>)
 800156e:	428e      	cmp	r6, r1
 8001570:	d100      	bne.n	8001574 <__aeabi_dadd+0x54>
 8001572:	e172      	b.n	800185a <__aeabi_dadd+0x33a>
 8001574:	2180      	movs	r1, #128	; 0x80
 8001576:	0028      	movs	r0, r5
 8001578:	0409      	lsls	r1, r1, #16
 800157a:	4308      	orrs	r0, r1
 800157c:	4684      	mov	ip, r0
 800157e:	2a38      	cmp	r2, #56	; 0x38
 8001580:	dd00      	ble.n	8001584 <__aeabi_dadd+0x64>
 8001582:	e15e      	b.n	8001842 <__aeabi_dadd+0x322>
 8001584:	2a1f      	cmp	r2, #31
 8001586:	dd00      	ble.n	800158a <__aeabi_dadd+0x6a>
 8001588:	e1ee      	b.n	8001968 <__aeabi_dadd+0x448>
 800158a:	2020      	movs	r0, #32
 800158c:	0039      	movs	r1, r7
 800158e:	4665      	mov	r5, ip
 8001590:	1a80      	subs	r0, r0, r2
 8001592:	4087      	lsls	r7, r0
 8001594:	40d1      	lsrs	r1, r2
 8001596:	4085      	lsls	r5, r0
 8001598:	430d      	orrs	r5, r1
 800159a:	0039      	movs	r1, r7
 800159c:	1e4f      	subs	r7, r1, #1
 800159e:	41b9      	sbcs	r1, r7
 80015a0:	4667      	mov	r7, ip
 80015a2:	40d7      	lsrs	r7, r2
 80015a4:	4329      	orrs	r1, r5
 80015a6:	1bdb      	subs	r3, r3, r7
 80015a8:	464a      	mov	r2, r9
 80015aa:	1a55      	subs	r5, r2, r1
 80015ac:	45a9      	cmp	r9, r5
 80015ae:	4189      	sbcs	r1, r1
 80015b0:	4249      	negs	r1, r1
 80015b2:	1a5b      	subs	r3, r3, r1
 80015b4:	4698      	mov	r8, r3
 80015b6:	4643      	mov	r3, r8
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	d400      	bmi.n	80015be <__aeabi_dadd+0x9e>
 80015bc:	e0cc      	b.n	8001758 <__aeabi_dadd+0x238>
 80015be:	4643      	mov	r3, r8
 80015c0:	025b      	lsls	r3, r3, #9
 80015c2:	0a5b      	lsrs	r3, r3, #9
 80015c4:	4698      	mov	r8, r3
 80015c6:	4643      	mov	r3, r8
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d100      	bne.n	80015ce <__aeabi_dadd+0xae>
 80015cc:	e12c      	b.n	8001828 <__aeabi_dadd+0x308>
 80015ce:	4640      	mov	r0, r8
 80015d0:	f001 fe70 	bl	80032b4 <__clzsi2>
 80015d4:	0001      	movs	r1, r0
 80015d6:	3908      	subs	r1, #8
 80015d8:	2220      	movs	r2, #32
 80015da:	0028      	movs	r0, r5
 80015dc:	4643      	mov	r3, r8
 80015de:	1a52      	subs	r2, r2, r1
 80015e0:	408b      	lsls	r3, r1
 80015e2:	40d0      	lsrs	r0, r2
 80015e4:	408d      	lsls	r5, r1
 80015e6:	4303      	orrs	r3, r0
 80015e8:	428e      	cmp	r6, r1
 80015ea:	dd00      	ble.n	80015ee <__aeabi_dadd+0xce>
 80015ec:	e117      	b.n	800181e <__aeabi_dadd+0x2fe>
 80015ee:	1b8e      	subs	r6, r1, r6
 80015f0:	1c72      	adds	r2, r6, #1
 80015f2:	2a1f      	cmp	r2, #31
 80015f4:	dd00      	ble.n	80015f8 <__aeabi_dadd+0xd8>
 80015f6:	e1a7      	b.n	8001948 <__aeabi_dadd+0x428>
 80015f8:	2120      	movs	r1, #32
 80015fa:	0018      	movs	r0, r3
 80015fc:	002e      	movs	r6, r5
 80015fe:	1a89      	subs	r1, r1, r2
 8001600:	408d      	lsls	r5, r1
 8001602:	4088      	lsls	r0, r1
 8001604:	40d6      	lsrs	r6, r2
 8001606:	40d3      	lsrs	r3, r2
 8001608:	1e69      	subs	r1, r5, #1
 800160a:	418d      	sbcs	r5, r1
 800160c:	4330      	orrs	r0, r6
 800160e:	4698      	mov	r8, r3
 8001610:	2600      	movs	r6, #0
 8001612:	4305      	orrs	r5, r0
 8001614:	076b      	lsls	r3, r5, #29
 8001616:	d009      	beq.n	800162c <__aeabi_dadd+0x10c>
 8001618:	230f      	movs	r3, #15
 800161a:	402b      	ands	r3, r5
 800161c:	2b04      	cmp	r3, #4
 800161e:	d005      	beq.n	800162c <__aeabi_dadd+0x10c>
 8001620:	1d2b      	adds	r3, r5, #4
 8001622:	42ab      	cmp	r3, r5
 8001624:	41ad      	sbcs	r5, r5
 8001626:	426d      	negs	r5, r5
 8001628:	44a8      	add	r8, r5
 800162a:	001d      	movs	r5, r3
 800162c:	4643      	mov	r3, r8
 800162e:	021b      	lsls	r3, r3, #8
 8001630:	d400      	bmi.n	8001634 <__aeabi_dadd+0x114>
 8001632:	e094      	b.n	800175e <__aeabi_dadd+0x23e>
 8001634:	4b97      	ldr	r3, [pc, #604]	; (8001894 <__aeabi_dadd+0x374>)
 8001636:	1c72      	adds	r2, r6, #1
 8001638:	429a      	cmp	r2, r3
 800163a:	d100      	bne.n	800163e <__aeabi_dadd+0x11e>
 800163c:	e09d      	b.n	800177a <__aeabi_dadd+0x25a>
 800163e:	4641      	mov	r1, r8
 8001640:	4b95      	ldr	r3, [pc, #596]	; (8001898 <__aeabi_dadd+0x378>)
 8001642:	08ed      	lsrs	r5, r5, #3
 8001644:	4019      	ands	r1, r3
 8001646:	000b      	movs	r3, r1
 8001648:	0552      	lsls	r2, r2, #21
 800164a:	0749      	lsls	r1, r1, #29
 800164c:	025b      	lsls	r3, r3, #9
 800164e:	4329      	orrs	r1, r5
 8001650:	0b1b      	lsrs	r3, r3, #12
 8001652:	0d52      	lsrs	r2, r2, #21
 8001654:	0512      	lsls	r2, r2, #20
 8001656:	4313      	orrs	r3, r2
 8001658:	07e4      	lsls	r4, r4, #31
 800165a:	4323      	orrs	r3, r4
 800165c:	0008      	movs	r0, r1
 800165e:	0019      	movs	r1, r3
 8001660:	bce0      	pop	{r5, r6, r7}
 8001662:	46ba      	mov	sl, r7
 8001664:	46b1      	mov	r9, r6
 8001666:	46a8      	mov	r8, r5
 8001668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800166a:	2a00      	cmp	r2, #0
 800166c:	d043      	beq.n	80016f6 <__aeabi_dadd+0x1d6>
 800166e:	1b8a      	subs	r2, r1, r6
 8001670:	2e00      	cmp	r6, #0
 8001672:	d000      	beq.n	8001676 <__aeabi_dadd+0x156>
 8001674:	e12a      	b.n	80018cc <__aeabi_dadd+0x3ac>
 8001676:	464c      	mov	r4, r9
 8001678:	431c      	orrs	r4, r3
 800167a:	d100      	bne.n	800167e <__aeabi_dadd+0x15e>
 800167c:	e1d1      	b.n	8001a22 <__aeabi_dadd+0x502>
 800167e:	1e54      	subs	r4, r2, #1
 8001680:	2a01      	cmp	r2, #1
 8001682:	d100      	bne.n	8001686 <__aeabi_dadd+0x166>
 8001684:	e21f      	b.n	8001ac6 <__aeabi_dadd+0x5a6>
 8001686:	4d83      	ldr	r5, [pc, #524]	; (8001894 <__aeabi_dadd+0x374>)
 8001688:	42aa      	cmp	r2, r5
 800168a:	d100      	bne.n	800168e <__aeabi_dadd+0x16e>
 800168c:	e272      	b.n	8001b74 <__aeabi_dadd+0x654>
 800168e:	0022      	movs	r2, r4
 8001690:	e123      	b.n	80018da <__aeabi_dadd+0x3ba>
 8001692:	2a00      	cmp	r2, #0
 8001694:	dc00      	bgt.n	8001698 <__aeabi_dadd+0x178>
 8001696:	e098      	b.n	80017ca <__aeabi_dadd+0x2aa>
 8001698:	2900      	cmp	r1, #0
 800169a:	d042      	beq.n	8001722 <__aeabi_dadd+0x202>
 800169c:	497d      	ldr	r1, [pc, #500]	; (8001894 <__aeabi_dadd+0x374>)
 800169e:	428e      	cmp	r6, r1
 80016a0:	d100      	bne.n	80016a4 <__aeabi_dadd+0x184>
 80016a2:	e0da      	b.n	800185a <__aeabi_dadd+0x33a>
 80016a4:	2180      	movs	r1, #128	; 0x80
 80016a6:	0028      	movs	r0, r5
 80016a8:	0409      	lsls	r1, r1, #16
 80016aa:	4308      	orrs	r0, r1
 80016ac:	4684      	mov	ip, r0
 80016ae:	2a38      	cmp	r2, #56	; 0x38
 80016b0:	dd00      	ble.n	80016b4 <__aeabi_dadd+0x194>
 80016b2:	e129      	b.n	8001908 <__aeabi_dadd+0x3e8>
 80016b4:	2a1f      	cmp	r2, #31
 80016b6:	dc00      	bgt.n	80016ba <__aeabi_dadd+0x19a>
 80016b8:	e187      	b.n	80019ca <__aeabi_dadd+0x4aa>
 80016ba:	0011      	movs	r1, r2
 80016bc:	4665      	mov	r5, ip
 80016be:	3920      	subs	r1, #32
 80016c0:	40cd      	lsrs	r5, r1
 80016c2:	2a20      	cmp	r2, #32
 80016c4:	d004      	beq.n	80016d0 <__aeabi_dadd+0x1b0>
 80016c6:	2040      	movs	r0, #64	; 0x40
 80016c8:	4661      	mov	r1, ip
 80016ca:	1a82      	subs	r2, r0, r2
 80016cc:	4091      	lsls	r1, r2
 80016ce:	430f      	orrs	r7, r1
 80016d0:	0039      	movs	r1, r7
 80016d2:	1e4f      	subs	r7, r1, #1
 80016d4:	41b9      	sbcs	r1, r7
 80016d6:	430d      	orrs	r5, r1
 80016d8:	e11b      	b.n	8001912 <__aeabi_dadd+0x3f2>
 80016da:	0029      	movs	r1, r5
 80016dc:	4339      	orrs	r1, r7
 80016de:	d100      	bne.n	80016e2 <__aeabi_dadd+0x1c2>
 80016e0:	e0b5      	b.n	800184e <__aeabi_dadd+0x32e>
 80016e2:	1e51      	subs	r1, r2, #1
 80016e4:	2a01      	cmp	r2, #1
 80016e6:	d100      	bne.n	80016ea <__aeabi_dadd+0x1ca>
 80016e8:	e1ab      	b.n	8001a42 <__aeabi_dadd+0x522>
 80016ea:	486a      	ldr	r0, [pc, #424]	; (8001894 <__aeabi_dadd+0x374>)
 80016ec:	4282      	cmp	r2, r0
 80016ee:	d100      	bne.n	80016f2 <__aeabi_dadd+0x1d2>
 80016f0:	e1b2      	b.n	8001a58 <__aeabi_dadd+0x538>
 80016f2:	000a      	movs	r2, r1
 80016f4:	e743      	b.n	800157e <__aeabi_dadd+0x5e>
 80016f6:	4969      	ldr	r1, [pc, #420]	; (800189c <__aeabi_dadd+0x37c>)
 80016f8:	1c75      	adds	r5, r6, #1
 80016fa:	420d      	tst	r5, r1
 80016fc:	d000      	beq.n	8001700 <__aeabi_dadd+0x1e0>
 80016fe:	e0cf      	b.n	80018a0 <__aeabi_dadd+0x380>
 8001700:	2e00      	cmp	r6, #0
 8001702:	d000      	beq.n	8001706 <__aeabi_dadd+0x1e6>
 8001704:	e193      	b.n	8001a2e <__aeabi_dadd+0x50e>
 8001706:	4649      	mov	r1, r9
 8001708:	4319      	orrs	r1, r3
 800170a:	d100      	bne.n	800170e <__aeabi_dadd+0x1ee>
 800170c:	e1d1      	b.n	8001ab2 <__aeabi_dadd+0x592>
 800170e:	4661      	mov	r1, ip
 8001710:	4339      	orrs	r1, r7
 8001712:	d000      	beq.n	8001716 <__aeabi_dadd+0x1f6>
 8001714:	e1e3      	b.n	8001ade <__aeabi_dadd+0x5be>
 8001716:	4649      	mov	r1, r9
 8001718:	0758      	lsls	r0, r3, #29
 800171a:	08c9      	lsrs	r1, r1, #3
 800171c:	4301      	orrs	r1, r0
 800171e:	08db      	lsrs	r3, r3, #3
 8001720:	e026      	b.n	8001770 <__aeabi_dadd+0x250>
 8001722:	0029      	movs	r1, r5
 8001724:	4339      	orrs	r1, r7
 8001726:	d100      	bne.n	800172a <__aeabi_dadd+0x20a>
 8001728:	e091      	b.n	800184e <__aeabi_dadd+0x32e>
 800172a:	1e51      	subs	r1, r2, #1
 800172c:	2a01      	cmp	r2, #1
 800172e:	d005      	beq.n	800173c <__aeabi_dadd+0x21c>
 8001730:	4858      	ldr	r0, [pc, #352]	; (8001894 <__aeabi_dadd+0x374>)
 8001732:	4282      	cmp	r2, r0
 8001734:	d100      	bne.n	8001738 <__aeabi_dadd+0x218>
 8001736:	e18f      	b.n	8001a58 <__aeabi_dadd+0x538>
 8001738:	000a      	movs	r2, r1
 800173a:	e7b8      	b.n	80016ae <__aeabi_dadd+0x18e>
 800173c:	003d      	movs	r5, r7
 800173e:	444d      	add	r5, r9
 8001740:	454d      	cmp	r5, r9
 8001742:	4189      	sbcs	r1, r1
 8001744:	4463      	add	r3, ip
 8001746:	4698      	mov	r8, r3
 8001748:	4249      	negs	r1, r1
 800174a:	4488      	add	r8, r1
 800174c:	4643      	mov	r3, r8
 800174e:	2602      	movs	r6, #2
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	d500      	bpl.n	8001756 <__aeabi_dadd+0x236>
 8001754:	e0eb      	b.n	800192e <__aeabi_dadd+0x40e>
 8001756:	3e01      	subs	r6, #1
 8001758:	076b      	lsls	r3, r5, #29
 800175a:	d000      	beq.n	800175e <__aeabi_dadd+0x23e>
 800175c:	e75c      	b.n	8001618 <__aeabi_dadd+0xf8>
 800175e:	4643      	mov	r3, r8
 8001760:	08e9      	lsrs	r1, r5, #3
 8001762:	075a      	lsls	r2, r3, #29
 8001764:	4311      	orrs	r1, r2
 8001766:	0032      	movs	r2, r6
 8001768:	08db      	lsrs	r3, r3, #3
 800176a:	484a      	ldr	r0, [pc, #296]	; (8001894 <__aeabi_dadd+0x374>)
 800176c:	4282      	cmp	r2, r0
 800176e:	d021      	beq.n	80017b4 <__aeabi_dadd+0x294>
 8001770:	031b      	lsls	r3, r3, #12
 8001772:	0552      	lsls	r2, r2, #21
 8001774:	0b1b      	lsrs	r3, r3, #12
 8001776:	0d52      	lsrs	r2, r2, #21
 8001778:	e76c      	b.n	8001654 <__aeabi_dadd+0x134>
 800177a:	2300      	movs	r3, #0
 800177c:	2100      	movs	r1, #0
 800177e:	e769      	b.n	8001654 <__aeabi_dadd+0x134>
 8001780:	002a      	movs	r2, r5
 8001782:	433a      	orrs	r2, r7
 8001784:	d069      	beq.n	800185a <__aeabi_dadd+0x33a>
 8001786:	464a      	mov	r2, r9
 8001788:	0758      	lsls	r0, r3, #29
 800178a:	08d1      	lsrs	r1, r2, #3
 800178c:	08da      	lsrs	r2, r3, #3
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	031b      	lsls	r3, r3, #12
 8001792:	4308      	orrs	r0, r1
 8001794:	421a      	tst	r2, r3
 8001796:	d007      	beq.n	80017a8 <__aeabi_dadd+0x288>
 8001798:	0029      	movs	r1, r5
 800179a:	08ed      	lsrs	r5, r5, #3
 800179c:	421d      	tst	r5, r3
 800179e:	d103      	bne.n	80017a8 <__aeabi_dadd+0x288>
 80017a0:	002a      	movs	r2, r5
 80017a2:	08ff      	lsrs	r7, r7, #3
 80017a4:	0748      	lsls	r0, r1, #29
 80017a6:	4338      	orrs	r0, r7
 80017a8:	0f43      	lsrs	r3, r0, #29
 80017aa:	00c1      	lsls	r1, r0, #3
 80017ac:	075b      	lsls	r3, r3, #29
 80017ae:	08c9      	lsrs	r1, r1, #3
 80017b0:	4319      	orrs	r1, r3
 80017b2:	0013      	movs	r3, r2
 80017b4:	000a      	movs	r2, r1
 80017b6:	431a      	orrs	r2, r3
 80017b8:	d100      	bne.n	80017bc <__aeabi_dadd+0x29c>
 80017ba:	e213      	b.n	8001be4 <__aeabi_dadd+0x6c4>
 80017bc:	2280      	movs	r2, #128	; 0x80
 80017be:	0312      	lsls	r2, r2, #12
 80017c0:	4313      	orrs	r3, r2
 80017c2:	031b      	lsls	r3, r3, #12
 80017c4:	4a33      	ldr	r2, [pc, #204]	; (8001894 <__aeabi_dadd+0x374>)
 80017c6:	0b1b      	lsrs	r3, r3, #12
 80017c8:	e744      	b.n	8001654 <__aeabi_dadd+0x134>
 80017ca:	2a00      	cmp	r2, #0
 80017cc:	d04b      	beq.n	8001866 <__aeabi_dadd+0x346>
 80017ce:	1b8a      	subs	r2, r1, r6
 80017d0:	2e00      	cmp	r6, #0
 80017d2:	d100      	bne.n	80017d6 <__aeabi_dadd+0x2b6>
 80017d4:	e0e7      	b.n	80019a6 <__aeabi_dadd+0x486>
 80017d6:	482f      	ldr	r0, [pc, #188]	; (8001894 <__aeabi_dadd+0x374>)
 80017d8:	4281      	cmp	r1, r0
 80017da:	d100      	bne.n	80017de <__aeabi_dadd+0x2be>
 80017dc:	e195      	b.n	8001b0a <__aeabi_dadd+0x5ea>
 80017de:	2080      	movs	r0, #128	; 0x80
 80017e0:	0400      	lsls	r0, r0, #16
 80017e2:	4303      	orrs	r3, r0
 80017e4:	2a38      	cmp	r2, #56	; 0x38
 80017e6:	dd00      	ble.n	80017ea <__aeabi_dadd+0x2ca>
 80017e8:	e143      	b.n	8001a72 <__aeabi_dadd+0x552>
 80017ea:	2a1f      	cmp	r2, #31
 80017ec:	dd00      	ble.n	80017f0 <__aeabi_dadd+0x2d0>
 80017ee:	e1db      	b.n	8001ba8 <__aeabi_dadd+0x688>
 80017f0:	2020      	movs	r0, #32
 80017f2:	001d      	movs	r5, r3
 80017f4:	464e      	mov	r6, r9
 80017f6:	1a80      	subs	r0, r0, r2
 80017f8:	4085      	lsls	r5, r0
 80017fa:	40d6      	lsrs	r6, r2
 80017fc:	4335      	orrs	r5, r6
 80017fe:	464e      	mov	r6, r9
 8001800:	4086      	lsls	r6, r0
 8001802:	0030      	movs	r0, r6
 8001804:	40d3      	lsrs	r3, r2
 8001806:	1e46      	subs	r6, r0, #1
 8001808:	41b0      	sbcs	r0, r6
 800180a:	449c      	add	ip, r3
 800180c:	4305      	orrs	r5, r0
 800180e:	19ed      	adds	r5, r5, r7
 8001810:	42bd      	cmp	r5, r7
 8001812:	419b      	sbcs	r3, r3
 8001814:	425b      	negs	r3, r3
 8001816:	4463      	add	r3, ip
 8001818:	4698      	mov	r8, r3
 800181a:	000e      	movs	r6, r1
 800181c:	e07f      	b.n	800191e <__aeabi_dadd+0x3fe>
 800181e:	4a1e      	ldr	r2, [pc, #120]	; (8001898 <__aeabi_dadd+0x378>)
 8001820:	1a76      	subs	r6, r6, r1
 8001822:	4013      	ands	r3, r2
 8001824:	4698      	mov	r8, r3
 8001826:	e6f5      	b.n	8001614 <__aeabi_dadd+0xf4>
 8001828:	0028      	movs	r0, r5
 800182a:	f001 fd43 	bl	80032b4 <__clzsi2>
 800182e:	0001      	movs	r1, r0
 8001830:	3118      	adds	r1, #24
 8001832:	291f      	cmp	r1, #31
 8001834:	dc00      	bgt.n	8001838 <__aeabi_dadd+0x318>
 8001836:	e6cf      	b.n	80015d8 <__aeabi_dadd+0xb8>
 8001838:	002b      	movs	r3, r5
 800183a:	3808      	subs	r0, #8
 800183c:	4083      	lsls	r3, r0
 800183e:	2500      	movs	r5, #0
 8001840:	e6d2      	b.n	80015e8 <__aeabi_dadd+0xc8>
 8001842:	4662      	mov	r2, ip
 8001844:	433a      	orrs	r2, r7
 8001846:	0011      	movs	r1, r2
 8001848:	1e4f      	subs	r7, r1, #1
 800184a:	41b9      	sbcs	r1, r7
 800184c:	e6ac      	b.n	80015a8 <__aeabi_dadd+0x88>
 800184e:	4649      	mov	r1, r9
 8001850:	0758      	lsls	r0, r3, #29
 8001852:	08c9      	lsrs	r1, r1, #3
 8001854:	4301      	orrs	r1, r0
 8001856:	08db      	lsrs	r3, r3, #3
 8001858:	e787      	b.n	800176a <__aeabi_dadd+0x24a>
 800185a:	4649      	mov	r1, r9
 800185c:	075a      	lsls	r2, r3, #29
 800185e:	08c9      	lsrs	r1, r1, #3
 8001860:	4311      	orrs	r1, r2
 8001862:	08db      	lsrs	r3, r3, #3
 8001864:	e7a6      	b.n	80017b4 <__aeabi_dadd+0x294>
 8001866:	490d      	ldr	r1, [pc, #52]	; (800189c <__aeabi_dadd+0x37c>)
 8001868:	1c70      	adds	r0, r6, #1
 800186a:	4208      	tst	r0, r1
 800186c:	d000      	beq.n	8001870 <__aeabi_dadd+0x350>
 800186e:	e0bb      	b.n	80019e8 <__aeabi_dadd+0x4c8>
 8001870:	2e00      	cmp	r6, #0
 8001872:	d000      	beq.n	8001876 <__aeabi_dadd+0x356>
 8001874:	e114      	b.n	8001aa0 <__aeabi_dadd+0x580>
 8001876:	4649      	mov	r1, r9
 8001878:	4319      	orrs	r1, r3
 800187a:	d100      	bne.n	800187e <__aeabi_dadd+0x35e>
 800187c:	e175      	b.n	8001b6a <__aeabi_dadd+0x64a>
 800187e:	0029      	movs	r1, r5
 8001880:	4339      	orrs	r1, r7
 8001882:	d000      	beq.n	8001886 <__aeabi_dadd+0x366>
 8001884:	e17e      	b.n	8001b84 <__aeabi_dadd+0x664>
 8001886:	4649      	mov	r1, r9
 8001888:	0758      	lsls	r0, r3, #29
 800188a:	08c9      	lsrs	r1, r1, #3
 800188c:	4301      	orrs	r1, r0
 800188e:	08db      	lsrs	r3, r3, #3
 8001890:	e76e      	b.n	8001770 <__aeabi_dadd+0x250>
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	000007ff 	.word	0x000007ff
 8001898:	ff7fffff 	.word	0xff7fffff
 800189c:	000007fe 	.word	0x000007fe
 80018a0:	4649      	mov	r1, r9
 80018a2:	1bcd      	subs	r5, r1, r7
 80018a4:	4661      	mov	r1, ip
 80018a6:	1a58      	subs	r0, r3, r1
 80018a8:	45a9      	cmp	r9, r5
 80018aa:	4189      	sbcs	r1, r1
 80018ac:	4249      	negs	r1, r1
 80018ae:	4688      	mov	r8, r1
 80018b0:	0001      	movs	r1, r0
 80018b2:	4640      	mov	r0, r8
 80018b4:	1a09      	subs	r1, r1, r0
 80018b6:	4688      	mov	r8, r1
 80018b8:	0209      	lsls	r1, r1, #8
 80018ba:	d500      	bpl.n	80018be <__aeabi_dadd+0x39e>
 80018bc:	e0a6      	b.n	8001a0c <__aeabi_dadd+0x4ec>
 80018be:	4641      	mov	r1, r8
 80018c0:	4329      	orrs	r1, r5
 80018c2:	d000      	beq.n	80018c6 <__aeabi_dadd+0x3a6>
 80018c4:	e67f      	b.n	80015c6 <__aeabi_dadd+0xa6>
 80018c6:	2300      	movs	r3, #0
 80018c8:	2400      	movs	r4, #0
 80018ca:	e751      	b.n	8001770 <__aeabi_dadd+0x250>
 80018cc:	4cc7      	ldr	r4, [pc, #796]	; (8001bec <__aeabi_dadd+0x6cc>)
 80018ce:	42a1      	cmp	r1, r4
 80018d0:	d100      	bne.n	80018d4 <__aeabi_dadd+0x3b4>
 80018d2:	e0c7      	b.n	8001a64 <__aeabi_dadd+0x544>
 80018d4:	2480      	movs	r4, #128	; 0x80
 80018d6:	0424      	lsls	r4, r4, #16
 80018d8:	4323      	orrs	r3, r4
 80018da:	2a38      	cmp	r2, #56	; 0x38
 80018dc:	dc54      	bgt.n	8001988 <__aeabi_dadd+0x468>
 80018de:	2a1f      	cmp	r2, #31
 80018e0:	dd00      	ble.n	80018e4 <__aeabi_dadd+0x3c4>
 80018e2:	e0cc      	b.n	8001a7e <__aeabi_dadd+0x55e>
 80018e4:	2420      	movs	r4, #32
 80018e6:	4648      	mov	r0, r9
 80018e8:	1aa4      	subs	r4, r4, r2
 80018ea:	001d      	movs	r5, r3
 80018ec:	464e      	mov	r6, r9
 80018ee:	40a0      	lsls	r0, r4
 80018f0:	40d6      	lsrs	r6, r2
 80018f2:	40a5      	lsls	r5, r4
 80018f4:	0004      	movs	r4, r0
 80018f6:	40d3      	lsrs	r3, r2
 80018f8:	4662      	mov	r2, ip
 80018fa:	4335      	orrs	r5, r6
 80018fc:	1e66      	subs	r6, r4, #1
 80018fe:	41b4      	sbcs	r4, r6
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	469c      	mov	ip, r3
 8001904:	4325      	orrs	r5, r4
 8001906:	e044      	b.n	8001992 <__aeabi_dadd+0x472>
 8001908:	4662      	mov	r2, ip
 800190a:	433a      	orrs	r2, r7
 800190c:	0015      	movs	r5, r2
 800190e:	1e6f      	subs	r7, r5, #1
 8001910:	41bd      	sbcs	r5, r7
 8001912:	444d      	add	r5, r9
 8001914:	454d      	cmp	r5, r9
 8001916:	4189      	sbcs	r1, r1
 8001918:	4249      	negs	r1, r1
 800191a:	4688      	mov	r8, r1
 800191c:	4498      	add	r8, r3
 800191e:	4643      	mov	r3, r8
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	d400      	bmi.n	8001926 <__aeabi_dadd+0x406>
 8001924:	e718      	b.n	8001758 <__aeabi_dadd+0x238>
 8001926:	4bb1      	ldr	r3, [pc, #708]	; (8001bec <__aeabi_dadd+0x6cc>)
 8001928:	3601      	adds	r6, #1
 800192a:	429e      	cmp	r6, r3
 800192c:	d049      	beq.n	80019c2 <__aeabi_dadd+0x4a2>
 800192e:	4642      	mov	r2, r8
 8001930:	4baf      	ldr	r3, [pc, #700]	; (8001bf0 <__aeabi_dadd+0x6d0>)
 8001932:	2101      	movs	r1, #1
 8001934:	401a      	ands	r2, r3
 8001936:	0013      	movs	r3, r2
 8001938:	086a      	lsrs	r2, r5, #1
 800193a:	400d      	ands	r5, r1
 800193c:	4315      	orrs	r5, r2
 800193e:	07d9      	lsls	r1, r3, #31
 8001940:	085b      	lsrs	r3, r3, #1
 8001942:	4698      	mov	r8, r3
 8001944:	430d      	orrs	r5, r1
 8001946:	e665      	b.n	8001614 <__aeabi_dadd+0xf4>
 8001948:	0018      	movs	r0, r3
 800194a:	3e1f      	subs	r6, #31
 800194c:	40f0      	lsrs	r0, r6
 800194e:	2a20      	cmp	r2, #32
 8001950:	d003      	beq.n	800195a <__aeabi_dadd+0x43a>
 8001952:	2140      	movs	r1, #64	; 0x40
 8001954:	1a8a      	subs	r2, r1, r2
 8001956:	4093      	lsls	r3, r2
 8001958:	431d      	orrs	r5, r3
 800195a:	1e69      	subs	r1, r5, #1
 800195c:	418d      	sbcs	r5, r1
 800195e:	2300      	movs	r3, #0
 8001960:	2600      	movs	r6, #0
 8001962:	4698      	mov	r8, r3
 8001964:	4305      	orrs	r5, r0
 8001966:	e6f7      	b.n	8001758 <__aeabi_dadd+0x238>
 8001968:	0011      	movs	r1, r2
 800196a:	4665      	mov	r5, ip
 800196c:	3920      	subs	r1, #32
 800196e:	40cd      	lsrs	r5, r1
 8001970:	2a20      	cmp	r2, #32
 8001972:	d004      	beq.n	800197e <__aeabi_dadd+0x45e>
 8001974:	2040      	movs	r0, #64	; 0x40
 8001976:	4661      	mov	r1, ip
 8001978:	1a82      	subs	r2, r0, r2
 800197a:	4091      	lsls	r1, r2
 800197c:	430f      	orrs	r7, r1
 800197e:	0039      	movs	r1, r7
 8001980:	1e4f      	subs	r7, r1, #1
 8001982:	41b9      	sbcs	r1, r7
 8001984:	4329      	orrs	r1, r5
 8001986:	e60f      	b.n	80015a8 <__aeabi_dadd+0x88>
 8001988:	464a      	mov	r2, r9
 800198a:	4313      	orrs	r3, r2
 800198c:	001d      	movs	r5, r3
 800198e:	1e6b      	subs	r3, r5, #1
 8001990:	419d      	sbcs	r5, r3
 8001992:	1b7d      	subs	r5, r7, r5
 8001994:	42af      	cmp	r7, r5
 8001996:	419b      	sbcs	r3, r3
 8001998:	4662      	mov	r2, ip
 800199a:	425b      	negs	r3, r3
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	4698      	mov	r8, r3
 80019a0:	4654      	mov	r4, sl
 80019a2:	000e      	movs	r6, r1
 80019a4:	e607      	b.n	80015b6 <__aeabi_dadd+0x96>
 80019a6:	4648      	mov	r0, r9
 80019a8:	4318      	orrs	r0, r3
 80019aa:	d100      	bne.n	80019ae <__aeabi_dadd+0x48e>
 80019ac:	e0b3      	b.n	8001b16 <__aeabi_dadd+0x5f6>
 80019ae:	1e50      	subs	r0, r2, #1
 80019b0:	2a01      	cmp	r2, #1
 80019b2:	d100      	bne.n	80019b6 <__aeabi_dadd+0x496>
 80019b4:	e10d      	b.n	8001bd2 <__aeabi_dadd+0x6b2>
 80019b6:	4d8d      	ldr	r5, [pc, #564]	; (8001bec <__aeabi_dadd+0x6cc>)
 80019b8:	42aa      	cmp	r2, r5
 80019ba:	d100      	bne.n	80019be <__aeabi_dadd+0x49e>
 80019bc:	e0a5      	b.n	8001b0a <__aeabi_dadd+0x5ea>
 80019be:	0002      	movs	r2, r0
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0x2c4>
 80019c2:	0032      	movs	r2, r6
 80019c4:	2300      	movs	r3, #0
 80019c6:	2100      	movs	r1, #0
 80019c8:	e644      	b.n	8001654 <__aeabi_dadd+0x134>
 80019ca:	2120      	movs	r1, #32
 80019cc:	0038      	movs	r0, r7
 80019ce:	1a89      	subs	r1, r1, r2
 80019d0:	4665      	mov	r5, ip
 80019d2:	408f      	lsls	r7, r1
 80019d4:	408d      	lsls	r5, r1
 80019d6:	40d0      	lsrs	r0, r2
 80019d8:	1e79      	subs	r1, r7, #1
 80019da:	418f      	sbcs	r7, r1
 80019dc:	4305      	orrs	r5, r0
 80019de:	433d      	orrs	r5, r7
 80019e0:	4667      	mov	r7, ip
 80019e2:	40d7      	lsrs	r7, r2
 80019e4:	19db      	adds	r3, r3, r7
 80019e6:	e794      	b.n	8001912 <__aeabi_dadd+0x3f2>
 80019e8:	4a80      	ldr	r2, [pc, #512]	; (8001bec <__aeabi_dadd+0x6cc>)
 80019ea:	4290      	cmp	r0, r2
 80019ec:	d100      	bne.n	80019f0 <__aeabi_dadd+0x4d0>
 80019ee:	e0ec      	b.n	8001bca <__aeabi_dadd+0x6aa>
 80019f0:	0039      	movs	r1, r7
 80019f2:	4449      	add	r1, r9
 80019f4:	4549      	cmp	r1, r9
 80019f6:	4192      	sbcs	r2, r2
 80019f8:	4463      	add	r3, ip
 80019fa:	4252      	negs	r2, r2
 80019fc:	189b      	adds	r3, r3, r2
 80019fe:	07dd      	lsls	r5, r3, #31
 8001a00:	0849      	lsrs	r1, r1, #1
 8001a02:	085b      	lsrs	r3, r3, #1
 8001a04:	4698      	mov	r8, r3
 8001a06:	0006      	movs	r6, r0
 8001a08:	430d      	orrs	r5, r1
 8001a0a:	e6a5      	b.n	8001758 <__aeabi_dadd+0x238>
 8001a0c:	464a      	mov	r2, r9
 8001a0e:	1abd      	subs	r5, r7, r2
 8001a10:	42af      	cmp	r7, r5
 8001a12:	4189      	sbcs	r1, r1
 8001a14:	4662      	mov	r2, ip
 8001a16:	4249      	negs	r1, r1
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	1a5b      	subs	r3, r3, r1
 8001a1c:	4698      	mov	r8, r3
 8001a1e:	4654      	mov	r4, sl
 8001a20:	e5d1      	b.n	80015c6 <__aeabi_dadd+0xa6>
 8001a22:	076c      	lsls	r4, r5, #29
 8001a24:	08f9      	lsrs	r1, r7, #3
 8001a26:	4321      	orrs	r1, r4
 8001a28:	08eb      	lsrs	r3, r5, #3
 8001a2a:	0004      	movs	r4, r0
 8001a2c:	e69d      	b.n	800176a <__aeabi_dadd+0x24a>
 8001a2e:	464a      	mov	r2, r9
 8001a30:	431a      	orrs	r2, r3
 8001a32:	d175      	bne.n	8001b20 <__aeabi_dadd+0x600>
 8001a34:	4661      	mov	r1, ip
 8001a36:	4339      	orrs	r1, r7
 8001a38:	d114      	bne.n	8001a64 <__aeabi_dadd+0x544>
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	2400      	movs	r4, #0
 8001a3e:	031b      	lsls	r3, r3, #12
 8001a40:	e6bc      	b.n	80017bc <__aeabi_dadd+0x29c>
 8001a42:	464a      	mov	r2, r9
 8001a44:	1bd5      	subs	r5, r2, r7
 8001a46:	45a9      	cmp	r9, r5
 8001a48:	4189      	sbcs	r1, r1
 8001a4a:	4662      	mov	r2, ip
 8001a4c:	4249      	negs	r1, r1
 8001a4e:	1a9b      	subs	r3, r3, r2
 8001a50:	1a5b      	subs	r3, r3, r1
 8001a52:	4698      	mov	r8, r3
 8001a54:	2601      	movs	r6, #1
 8001a56:	e5ae      	b.n	80015b6 <__aeabi_dadd+0x96>
 8001a58:	464a      	mov	r2, r9
 8001a5a:	08d1      	lsrs	r1, r2, #3
 8001a5c:	075a      	lsls	r2, r3, #29
 8001a5e:	4311      	orrs	r1, r2
 8001a60:	08db      	lsrs	r3, r3, #3
 8001a62:	e6a7      	b.n	80017b4 <__aeabi_dadd+0x294>
 8001a64:	4663      	mov	r3, ip
 8001a66:	08f9      	lsrs	r1, r7, #3
 8001a68:	075a      	lsls	r2, r3, #29
 8001a6a:	4654      	mov	r4, sl
 8001a6c:	4311      	orrs	r1, r2
 8001a6e:	08db      	lsrs	r3, r3, #3
 8001a70:	e6a0      	b.n	80017b4 <__aeabi_dadd+0x294>
 8001a72:	464a      	mov	r2, r9
 8001a74:	4313      	orrs	r3, r2
 8001a76:	001d      	movs	r5, r3
 8001a78:	1e6b      	subs	r3, r5, #1
 8001a7a:	419d      	sbcs	r5, r3
 8001a7c:	e6c7      	b.n	800180e <__aeabi_dadd+0x2ee>
 8001a7e:	0014      	movs	r4, r2
 8001a80:	001e      	movs	r6, r3
 8001a82:	3c20      	subs	r4, #32
 8001a84:	40e6      	lsrs	r6, r4
 8001a86:	2a20      	cmp	r2, #32
 8001a88:	d005      	beq.n	8001a96 <__aeabi_dadd+0x576>
 8001a8a:	2440      	movs	r4, #64	; 0x40
 8001a8c:	1aa2      	subs	r2, r4, r2
 8001a8e:	4093      	lsls	r3, r2
 8001a90:	464a      	mov	r2, r9
 8001a92:	431a      	orrs	r2, r3
 8001a94:	4691      	mov	r9, r2
 8001a96:	464d      	mov	r5, r9
 8001a98:	1e6b      	subs	r3, r5, #1
 8001a9a:	419d      	sbcs	r5, r3
 8001a9c:	4335      	orrs	r5, r6
 8001a9e:	e778      	b.n	8001992 <__aeabi_dadd+0x472>
 8001aa0:	464a      	mov	r2, r9
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	d000      	beq.n	8001aa8 <__aeabi_dadd+0x588>
 8001aa6:	e66b      	b.n	8001780 <__aeabi_dadd+0x260>
 8001aa8:	076b      	lsls	r3, r5, #29
 8001aaa:	08f9      	lsrs	r1, r7, #3
 8001aac:	4319      	orrs	r1, r3
 8001aae:	08eb      	lsrs	r3, r5, #3
 8001ab0:	e680      	b.n	80017b4 <__aeabi_dadd+0x294>
 8001ab2:	4661      	mov	r1, ip
 8001ab4:	4339      	orrs	r1, r7
 8001ab6:	d054      	beq.n	8001b62 <__aeabi_dadd+0x642>
 8001ab8:	4663      	mov	r3, ip
 8001aba:	08f9      	lsrs	r1, r7, #3
 8001abc:	075c      	lsls	r4, r3, #29
 8001abe:	4321      	orrs	r1, r4
 8001ac0:	08db      	lsrs	r3, r3, #3
 8001ac2:	0004      	movs	r4, r0
 8001ac4:	e654      	b.n	8001770 <__aeabi_dadd+0x250>
 8001ac6:	464a      	mov	r2, r9
 8001ac8:	1abd      	subs	r5, r7, r2
 8001aca:	42af      	cmp	r7, r5
 8001acc:	4189      	sbcs	r1, r1
 8001ace:	4662      	mov	r2, ip
 8001ad0:	4249      	negs	r1, r1
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	1a5b      	subs	r3, r3, r1
 8001ad6:	4698      	mov	r8, r3
 8001ad8:	0004      	movs	r4, r0
 8001ada:	2601      	movs	r6, #1
 8001adc:	e56b      	b.n	80015b6 <__aeabi_dadd+0x96>
 8001ade:	464a      	mov	r2, r9
 8001ae0:	1bd5      	subs	r5, r2, r7
 8001ae2:	45a9      	cmp	r9, r5
 8001ae4:	4189      	sbcs	r1, r1
 8001ae6:	4662      	mov	r2, ip
 8001ae8:	4249      	negs	r1, r1
 8001aea:	1a9a      	subs	r2, r3, r2
 8001aec:	1a52      	subs	r2, r2, r1
 8001aee:	4690      	mov	r8, r2
 8001af0:	0212      	lsls	r2, r2, #8
 8001af2:	d532      	bpl.n	8001b5a <__aeabi_dadd+0x63a>
 8001af4:	464a      	mov	r2, r9
 8001af6:	1abd      	subs	r5, r7, r2
 8001af8:	42af      	cmp	r7, r5
 8001afa:	4189      	sbcs	r1, r1
 8001afc:	4662      	mov	r2, ip
 8001afe:	4249      	negs	r1, r1
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	1a5b      	subs	r3, r3, r1
 8001b04:	4698      	mov	r8, r3
 8001b06:	0004      	movs	r4, r0
 8001b08:	e584      	b.n	8001614 <__aeabi_dadd+0xf4>
 8001b0a:	4663      	mov	r3, ip
 8001b0c:	08f9      	lsrs	r1, r7, #3
 8001b0e:	075a      	lsls	r2, r3, #29
 8001b10:	4311      	orrs	r1, r2
 8001b12:	08db      	lsrs	r3, r3, #3
 8001b14:	e64e      	b.n	80017b4 <__aeabi_dadd+0x294>
 8001b16:	08f9      	lsrs	r1, r7, #3
 8001b18:	0768      	lsls	r0, r5, #29
 8001b1a:	4301      	orrs	r1, r0
 8001b1c:	08eb      	lsrs	r3, r5, #3
 8001b1e:	e624      	b.n	800176a <__aeabi_dadd+0x24a>
 8001b20:	4662      	mov	r2, ip
 8001b22:	433a      	orrs	r2, r7
 8001b24:	d100      	bne.n	8001b28 <__aeabi_dadd+0x608>
 8001b26:	e698      	b.n	800185a <__aeabi_dadd+0x33a>
 8001b28:	464a      	mov	r2, r9
 8001b2a:	08d1      	lsrs	r1, r2, #3
 8001b2c:	075a      	lsls	r2, r3, #29
 8001b2e:	4311      	orrs	r1, r2
 8001b30:	08da      	lsrs	r2, r3, #3
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	031b      	lsls	r3, r3, #12
 8001b36:	421a      	tst	r2, r3
 8001b38:	d008      	beq.n	8001b4c <__aeabi_dadd+0x62c>
 8001b3a:	4660      	mov	r0, ip
 8001b3c:	08c5      	lsrs	r5, r0, #3
 8001b3e:	421d      	tst	r5, r3
 8001b40:	d104      	bne.n	8001b4c <__aeabi_dadd+0x62c>
 8001b42:	4654      	mov	r4, sl
 8001b44:	002a      	movs	r2, r5
 8001b46:	08f9      	lsrs	r1, r7, #3
 8001b48:	0743      	lsls	r3, r0, #29
 8001b4a:	4319      	orrs	r1, r3
 8001b4c:	0f4b      	lsrs	r3, r1, #29
 8001b4e:	00c9      	lsls	r1, r1, #3
 8001b50:	075b      	lsls	r3, r3, #29
 8001b52:	08c9      	lsrs	r1, r1, #3
 8001b54:	4319      	orrs	r1, r3
 8001b56:	0013      	movs	r3, r2
 8001b58:	e62c      	b.n	80017b4 <__aeabi_dadd+0x294>
 8001b5a:	4641      	mov	r1, r8
 8001b5c:	4329      	orrs	r1, r5
 8001b5e:	d000      	beq.n	8001b62 <__aeabi_dadd+0x642>
 8001b60:	e5fa      	b.n	8001758 <__aeabi_dadd+0x238>
 8001b62:	2300      	movs	r3, #0
 8001b64:	000a      	movs	r2, r1
 8001b66:	2400      	movs	r4, #0
 8001b68:	e602      	b.n	8001770 <__aeabi_dadd+0x250>
 8001b6a:	076b      	lsls	r3, r5, #29
 8001b6c:	08f9      	lsrs	r1, r7, #3
 8001b6e:	4319      	orrs	r1, r3
 8001b70:	08eb      	lsrs	r3, r5, #3
 8001b72:	e5fd      	b.n	8001770 <__aeabi_dadd+0x250>
 8001b74:	4663      	mov	r3, ip
 8001b76:	08f9      	lsrs	r1, r7, #3
 8001b78:	075b      	lsls	r3, r3, #29
 8001b7a:	4319      	orrs	r1, r3
 8001b7c:	4663      	mov	r3, ip
 8001b7e:	0004      	movs	r4, r0
 8001b80:	08db      	lsrs	r3, r3, #3
 8001b82:	e617      	b.n	80017b4 <__aeabi_dadd+0x294>
 8001b84:	003d      	movs	r5, r7
 8001b86:	444d      	add	r5, r9
 8001b88:	4463      	add	r3, ip
 8001b8a:	454d      	cmp	r5, r9
 8001b8c:	4189      	sbcs	r1, r1
 8001b8e:	4698      	mov	r8, r3
 8001b90:	4249      	negs	r1, r1
 8001b92:	4488      	add	r8, r1
 8001b94:	4643      	mov	r3, r8
 8001b96:	021b      	lsls	r3, r3, #8
 8001b98:	d400      	bmi.n	8001b9c <__aeabi_dadd+0x67c>
 8001b9a:	e5dd      	b.n	8001758 <__aeabi_dadd+0x238>
 8001b9c:	4642      	mov	r2, r8
 8001b9e:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <__aeabi_dadd+0x6d0>)
 8001ba0:	2601      	movs	r6, #1
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	4690      	mov	r8, r2
 8001ba6:	e5d7      	b.n	8001758 <__aeabi_dadd+0x238>
 8001ba8:	0010      	movs	r0, r2
 8001baa:	001e      	movs	r6, r3
 8001bac:	3820      	subs	r0, #32
 8001bae:	40c6      	lsrs	r6, r0
 8001bb0:	2a20      	cmp	r2, #32
 8001bb2:	d005      	beq.n	8001bc0 <__aeabi_dadd+0x6a0>
 8001bb4:	2040      	movs	r0, #64	; 0x40
 8001bb6:	1a82      	subs	r2, r0, r2
 8001bb8:	4093      	lsls	r3, r2
 8001bba:	464a      	mov	r2, r9
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	4691      	mov	r9, r2
 8001bc0:	464d      	mov	r5, r9
 8001bc2:	1e6b      	subs	r3, r5, #1
 8001bc4:	419d      	sbcs	r5, r3
 8001bc6:	4335      	orrs	r5, r6
 8001bc8:	e621      	b.n	800180e <__aeabi_dadd+0x2ee>
 8001bca:	0002      	movs	r2, r0
 8001bcc:	2300      	movs	r3, #0
 8001bce:	2100      	movs	r1, #0
 8001bd0:	e540      	b.n	8001654 <__aeabi_dadd+0x134>
 8001bd2:	464a      	mov	r2, r9
 8001bd4:	19d5      	adds	r5, r2, r7
 8001bd6:	42bd      	cmp	r5, r7
 8001bd8:	4189      	sbcs	r1, r1
 8001bda:	4463      	add	r3, ip
 8001bdc:	4698      	mov	r8, r3
 8001bde:	4249      	negs	r1, r1
 8001be0:	4488      	add	r8, r1
 8001be2:	e5b3      	b.n	800174c <__aeabi_dadd+0x22c>
 8001be4:	2100      	movs	r1, #0
 8001be6:	4a01      	ldr	r2, [pc, #4]	; (8001bec <__aeabi_dadd+0x6cc>)
 8001be8:	000b      	movs	r3, r1
 8001bea:	e533      	b.n	8001654 <__aeabi_dadd+0x134>
 8001bec:	000007ff 	.word	0x000007ff
 8001bf0:	ff7fffff 	.word	0xff7fffff

08001bf4 <__aeabi_ddiv>:
 8001bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf6:	4657      	mov	r7, sl
 8001bf8:	464e      	mov	r6, r9
 8001bfa:	4645      	mov	r5, r8
 8001bfc:	46de      	mov	lr, fp
 8001bfe:	b5e0      	push	{r5, r6, r7, lr}
 8001c00:	4681      	mov	r9, r0
 8001c02:	0005      	movs	r5, r0
 8001c04:	030c      	lsls	r4, r1, #12
 8001c06:	0048      	lsls	r0, r1, #1
 8001c08:	4692      	mov	sl, r2
 8001c0a:	001f      	movs	r7, r3
 8001c0c:	b085      	sub	sp, #20
 8001c0e:	0b24      	lsrs	r4, r4, #12
 8001c10:	0d40      	lsrs	r0, r0, #21
 8001c12:	0fce      	lsrs	r6, r1, #31
 8001c14:	2800      	cmp	r0, #0
 8001c16:	d059      	beq.n	8001ccc <__aeabi_ddiv+0xd8>
 8001c18:	4b87      	ldr	r3, [pc, #540]	; (8001e38 <__aeabi_ddiv+0x244>)
 8001c1a:	4298      	cmp	r0, r3
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_ddiv+0x2c>
 8001c1e:	e098      	b.n	8001d52 <__aeabi_ddiv+0x15e>
 8001c20:	0f6b      	lsrs	r3, r5, #29
 8001c22:	00e4      	lsls	r4, r4, #3
 8001c24:	431c      	orrs	r4, r3
 8001c26:	2380      	movs	r3, #128	; 0x80
 8001c28:	041b      	lsls	r3, r3, #16
 8001c2a:	4323      	orrs	r3, r4
 8001c2c:	4698      	mov	r8, r3
 8001c2e:	4b83      	ldr	r3, [pc, #524]	; (8001e3c <__aeabi_ddiv+0x248>)
 8001c30:	00ed      	lsls	r5, r5, #3
 8001c32:	469b      	mov	fp, r3
 8001c34:	2300      	movs	r3, #0
 8001c36:	4699      	mov	r9, r3
 8001c38:	4483      	add	fp, r0
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	033c      	lsls	r4, r7, #12
 8001c3e:	007b      	lsls	r3, r7, #1
 8001c40:	4650      	mov	r0, sl
 8001c42:	0b24      	lsrs	r4, r4, #12
 8001c44:	0d5b      	lsrs	r3, r3, #21
 8001c46:	0fff      	lsrs	r7, r7, #31
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d067      	beq.n	8001d1c <__aeabi_ddiv+0x128>
 8001c4c:	4a7a      	ldr	r2, [pc, #488]	; (8001e38 <__aeabi_ddiv+0x244>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d018      	beq.n	8001c84 <__aeabi_ddiv+0x90>
 8001c52:	497a      	ldr	r1, [pc, #488]	; (8001e3c <__aeabi_ddiv+0x248>)
 8001c54:	0f42      	lsrs	r2, r0, #29
 8001c56:	468c      	mov	ip, r1
 8001c58:	00e4      	lsls	r4, r4, #3
 8001c5a:	4659      	mov	r1, fp
 8001c5c:	4314      	orrs	r4, r2
 8001c5e:	2280      	movs	r2, #128	; 0x80
 8001c60:	4463      	add	r3, ip
 8001c62:	0412      	lsls	r2, r2, #16
 8001c64:	1acb      	subs	r3, r1, r3
 8001c66:	4314      	orrs	r4, r2
 8001c68:	469b      	mov	fp, r3
 8001c6a:	00c2      	lsls	r2, r0, #3
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	0033      	movs	r3, r6
 8001c70:	407b      	eors	r3, r7
 8001c72:	469a      	mov	sl, r3
 8001c74:	464b      	mov	r3, r9
 8001c76:	2b0f      	cmp	r3, #15
 8001c78:	d900      	bls.n	8001c7c <__aeabi_ddiv+0x88>
 8001c7a:	e0ef      	b.n	8001e5c <__aeabi_ddiv+0x268>
 8001c7c:	4970      	ldr	r1, [pc, #448]	; (8001e40 <__aeabi_ddiv+0x24c>)
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	58cb      	ldr	r3, [r1, r3]
 8001c82:	469f      	mov	pc, r3
 8001c84:	4b6f      	ldr	r3, [pc, #444]	; (8001e44 <__aeabi_ddiv+0x250>)
 8001c86:	4652      	mov	r2, sl
 8001c88:	469c      	mov	ip, r3
 8001c8a:	4322      	orrs	r2, r4
 8001c8c:	44e3      	add	fp, ip
 8001c8e:	2a00      	cmp	r2, #0
 8001c90:	d000      	beq.n	8001c94 <__aeabi_ddiv+0xa0>
 8001c92:	e095      	b.n	8001dc0 <__aeabi_ddiv+0x1cc>
 8001c94:	4649      	mov	r1, r9
 8001c96:	2302      	movs	r3, #2
 8001c98:	4319      	orrs	r1, r3
 8001c9a:	4689      	mov	r9, r1
 8001c9c:	2400      	movs	r4, #0
 8001c9e:	2002      	movs	r0, #2
 8001ca0:	e7e5      	b.n	8001c6e <__aeabi_ddiv+0x7a>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	2400      	movs	r4, #0
 8001ca6:	2500      	movs	r5, #0
 8001ca8:	4652      	mov	r2, sl
 8001caa:	051b      	lsls	r3, r3, #20
 8001cac:	4323      	orrs	r3, r4
 8001cae:	07d2      	lsls	r2, r2, #31
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	0028      	movs	r0, r5
 8001cb4:	0019      	movs	r1, r3
 8001cb6:	b005      	add	sp, #20
 8001cb8:	bcf0      	pop	{r4, r5, r6, r7}
 8001cba:	46bb      	mov	fp, r7
 8001cbc:	46b2      	mov	sl, r6
 8001cbe:	46a9      	mov	r9, r5
 8001cc0:	46a0      	mov	r8, r4
 8001cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cc4:	2400      	movs	r4, #0
 8001cc6:	2500      	movs	r5, #0
 8001cc8:	4b5b      	ldr	r3, [pc, #364]	; (8001e38 <__aeabi_ddiv+0x244>)
 8001cca:	e7ed      	b.n	8001ca8 <__aeabi_ddiv+0xb4>
 8001ccc:	464b      	mov	r3, r9
 8001cce:	4323      	orrs	r3, r4
 8001cd0:	4698      	mov	r8, r3
 8001cd2:	d100      	bne.n	8001cd6 <__aeabi_ddiv+0xe2>
 8001cd4:	e089      	b.n	8001dea <__aeabi_ddiv+0x1f6>
 8001cd6:	2c00      	cmp	r4, #0
 8001cd8:	d100      	bne.n	8001cdc <__aeabi_ddiv+0xe8>
 8001cda:	e1e0      	b.n	800209e <__aeabi_ddiv+0x4aa>
 8001cdc:	0020      	movs	r0, r4
 8001cde:	f001 fae9 	bl	80032b4 <__clzsi2>
 8001ce2:	0001      	movs	r1, r0
 8001ce4:	0002      	movs	r2, r0
 8001ce6:	390b      	subs	r1, #11
 8001ce8:	231d      	movs	r3, #29
 8001cea:	1a5b      	subs	r3, r3, r1
 8001cec:	4649      	mov	r1, r9
 8001cee:	0010      	movs	r0, r2
 8001cf0:	40d9      	lsrs	r1, r3
 8001cf2:	3808      	subs	r0, #8
 8001cf4:	4084      	lsls	r4, r0
 8001cf6:	000b      	movs	r3, r1
 8001cf8:	464d      	mov	r5, r9
 8001cfa:	4323      	orrs	r3, r4
 8001cfc:	4698      	mov	r8, r3
 8001cfe:	4085      	lsls	r5, r0
 8001d00:	4851      	ldr	r0, [pc, #324]	; (8001e48 <__aeabi_ddiv+0x254>)
 8001d02:	033c      	lsls	r4, r7, #12
 8001d04:	1a83      	subs	r3, r0, r2
 8001d06:	469b      	mov	fp, r3
 8001d08:	2300      	movs	r3, #0
 8001d0a:	4699      	mov	r9, r3
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	007b      	lsls	r3, r7, #1
 8001d10:	4650      	mov	r0, sl
 8001d12:	0b24      	lsrs	r4, r4, #12
 8001d14:	0d5b      	lsrs	r3, r3, #21
 8001d16:	0fff      	lsrs	r7, r7, #31
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d197      	bne.n	8001c4c <__aeabi_ddiv+0x58>
 8001d1c:	4652      	mov	r2, sl
 8001d1e:	4322      	orrs	r2, r4
 8001d20:	d055      	beq.n	8001dce <__aeabi_ddiv+0x1da>
 8001d22:	2c00      	cmp	r4, #0
 8001d24:	d100      	bne.n	8001d28 <__aeabi_ddiv+0x134>
 8001d26:	e1ca      	b.n	80020be <__aeabi_ddiv+0x4ca>
 8001d28:	0020      	movs	r0, r4
 8001d2a:	f001 fac3 	bl	80032b4 <__clzsi2>
 8001d2e:	0002      	movs	r2, r0
 8001d30:	3a0b      	subs	r2, #11
 8001d32:	231d      	movs	r3, #29
 8001d34:	0001      	movs	r1, r0
 8001d36:	1a9b      	subs	r3, r3, r2
 8001d38:	4652      	mov	r2, sl
 8001d3a:	3908      	subs	r1, #8
 8001d3c:	40da      	lsrs	r2, r3
 8001d3e:	408c      	lsls	r4, r1
 8001d40:	4314      	orrs	r4, r2
 8001d42:	4652      	mov	r2, sl
 8001d44:	408a      	lsls	r2, r1
 8001d46:	4b41      	ldr	r3, [pc, #260]	; (8001e4c <__aeabi_ddiv+0x258>)
 8001d48:	4458      	add	r0, fp
 8001d4a:	469b      	mov	fp, r3
 8001d4c:	4483      	add	fp, r0
 8001d4e:	2000      	movs	r0, #0
 8001d50:	e78d      	b.n	8001c6e <__aeabi_ddiv+0x7a>
 8001d52:	464b      	mov	r3, r9
 8001d54:	4323      	orrs	r3, r4
 8001d56:	4698      	mov	r8, r3
 8001d58:	d140      	bne.n	8001ddc <__aeabi_ddiv+0x1e8>
 8001d5a:	2308      	movs	r3, #8
 8001d5c:	4699      	mov	r9, r3
 8001d5e:	3b06      	subs	r3, #6
 8001d60:	2500      	movs	r5, #0
 8001d62:	4683      	mov	fp, r0
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	e769      	b.n	8001c3c <__aeabi_ddiv+0x48>
 8001d68:	46b2      	mov	sl, r6
 8001d6a:	9b00      	ldr	r3, [sp, #0]
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d0a9      	beq.n	8001cc4 <__aeabi_ddiv+0xd0>
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	d100      	bne.n	8001d76 <__aeabi_ddiv+0x182>
 8001d74:	e211      	b.n	800219a <__aeabi_ddiv+0x5a6>
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d093      	beq.n	8001ca2 <__aeabi_ddiv+0xae>
 8001d7a:	4a35      	ldr	r2, [pc, #212]	; (8001e50 <__aeabi_ddiv+0x25c>)
 8001d7c:	445a      	add	r2, fp
 8001d7e:	2a00      	cmp	r2, #0
 8001d80:	dc00      	bgt.n	8001d84 <__aeabi_ddiv+0x190>
 8001d82:	e13c      	b.n	8001ffe <__aeabi_ddiv+0x40a>
 8001d84:	076b      	lsls	r3, r5, #29
 8001d86:	d000      	beq.n	8001d8a <__aeabi_ddiv+0x196>
 8001d88:	e1a7      	b.n	80020da <__aeabi_ddiv+0x4e6>
 8001d8a:	08ed      	lsrs	r5, r5, #3
 8001d8c:	4643      	mov	r3, r8
 8001d8e:	01db      	lsls	r3, r3, #7
 8001d90:	d506      	bpl.n	8001da0 <__aeabi_ddiv+0x1ac>
 8001d92:	4642      	mov	r2, r8
 8001d94:	4b2f      	ldr	r3, [pc, #188]	; (8001e54 <__aeabi_ddiv+0x260>)
 8001d96:	401a      	ands	r2, r3
 8001d98:	4690      	mov	r8, r2
 8001d9a:	2280      	movs	r2, #128	; 0x80
 8001d9c:	00d2      	lsls	r2, r2, #3
 8001d9e:	445a      	add	r2, fp
 8001da0:	4b2d      	ldr	r3, [pc, #180]	; (8001e58 <__aeabi_ddiv+0x264>)
 8001da2:	429a      	cmp	r2, r3
 8001da4:	dc8e      	bgt.n	8001cc4 <__aeabi_ddiv+0xd0>
 8001da6:	4643      	mov	r3, r8
 8001da8:	0552      	lsls	r2, r2, #21
 8001daa:	0758      	lsls	r0, r3, #29
 8001dac:	025c      	lsls	r4, r3, #9
 8001dae:	4305      	orrs	r5, r0
 8001db0:	0b24      	lsrs	r4, r4, #12
 8001db2:	0d53      	lsrs	r3, r2, #21
 8001db4:	e778      	b.n	8001ca8 <__aeabi_ddiv+0xb4>
 8001db6:	46ba      	mov	sl, r7
 8001db8:	46a0      	mov	r8, r4
 8001dba:	0015      	movs	r5, r2
 8001dbc:	9000      	str	r0, [sp, #0]
 8001dbe:	e7d4      	b.n	8001d6a <__aeabi_ddiv+0x176>
 8001dc0:	464a      	mov	r2, r9
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	4691      	mov	r9, r2
 8001dc8:	2003      	movs	r0, #3
 8001dca:	4652      	mov	r2, sl
 8001dcc:	e74f      	b.n	8001c6e <__aeabi_ddiv+0x7a>
 8001dce:	4649      	mov	r1, r9
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	4319      	orrs	r1, r3
 8001dd4:	4689      	mov	r9, r1
 8001dd6:	2400      	movs	r4, #0
 8001dd8:	2001      	movs	r0, #1
 8001dda:	e748      	b.n	8001c6e <__aeabi_ddiv+0x7a>
 8001ddc:	230c      	movs	r3, #12
 8001dde:	4699      	mov	r9, r3
 8001de0:	3b09      	subs	r3, #9
 8001de2:	46a0      	mov	r8, r4
 8001de4:	4683      	mov	fp, r0
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	e728      	b.n	8001c3c <__aeabi_ddiv+0x48>
 8001dea:	2304      	movs	r3, #4
 8001dec:	4699      	mov	r9, r3
 8001dee:	2300      	movs	r3, #0
 8001df0:	469b      	mov	fp, r3
 8001df2:	3301      	adds	r3, #1
 8001df4:	2500      	movs	r5, #0
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	e720      	b.n	8001c3c <__aeabi_ddiv+0x48>
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	2480      	movs	r4, #128	; 0x80
 8001dfe:	469a      	mov	sl, r3
 8001e00:	2500      	movs	r5, #0
 8001e02:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <__aeabi_ddiv+0x244>)
 8001e04:	0324      	lsls	r4, r4, #12
 8001e06:	e74f      	b.n	8001ca8 <__aeabi_ddiv+0xb4>
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	4641      	mov	r1, r8
 8001e0c:	031b      	lsls	r3, r3, #12
 8001e0e:	4219      	tst	r1, r3
 8001e10:	d008      	beq.n	8001e24 <__aeabi_ddiv+0x230>
 8001e12:	421c      	tst	r4, r3
 8001e14:	d106      	bne.n	8001e24 <__aeabi_ddiv+0x230>
 8001e16:	431c      	orrs	r4, r3
 8001e18:	0324      	lsls	r4, r4, #12
 8001e1a:	46ba      	mov	sl, r7
 8001e1c:	0015      	movs	r5, r2
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <__aeabi_ddiv+0x244>)
 8001e20:	0b24      	lsrs	r4, r4, #12
 8001e22:	e741      	b.n	8001ca8 <__aeabi_ddiv+0xb4>
 8001e24:	2480      	movs	r4, #128	; 0x80
 8001e26:	4643      	mov	r3, r8
 8001e28:	0324      	lsls	r4, r4, #12
 8001e2a:	431c      	orrs	r4, r3
 8001e2c:	0324      	lsls	r4, r4, #12
 8001e2e:	46b2      	mov	sl, r6
 8001e30:	4b01      	ldr	r3, [pc, #4]	; (8001e38 <__aeabi_ddiv+0x244>)
 8001e32:	0b24      	lsrs	r4, r4, #12
 8001e34:	e738      	b.n	8001ca8 <__aeabi_ddiv+0xb4>
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	000007ff 	.word	0x000007ff
 8001e3c:	fffffc01 	.word	0xfffffc01
 8001e40:	0801191c 	.word	0x0801191c
 8001e44:	fffff801 	.word	0xfffff801
 8001e48:	fffffc0d 	.word	0xfffffc0d
 8001e4c:	000003f3 	.word	0x000003f3
 8001e50:	000003ff 	.word	0x000003ff
 8001e54:	feffffff 	.word	0xfeffffff
 8001e58:	000007fe 	.word	0x000007fe
 8001e5c:	4544      	cmp	r4, r8
 8001e5e:	d200      	bcs.n	8001e62 <__aeabi_ddiv+0x26e>
 8001e60:	e116      	b.n	8002090 <__aeabi_ddiv+0x49c>
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0x272>
 8001e64:	e111      	b.n	800208a <__aeabi_ddiv+0x496>
 8001e66:	2301      	movs	r3, #1
 8001e68:	425b      	negs	r3, r3
 8001e6a:	469c      	mov	ip, r3
 8001e6c:	002e      	movs	r6, r5
 8001e6e:	4640      	mov	r0, r8
 8001e70:	2500      	movs	r5, #0
 8001e72:	44e3      	add	fp, ip
 8001e74:	0223      	lsls	r3, r4, #8
 8001e76:	0e14      	lsrs	r4, r2, #24
 8001e78:	431c      	orrs	r4, r3
 8001e7a:	0c1b      	lsrs	r3, r3, #16
 8001e7c:	4699      	mov	r9, r3
 8001e7e:	0423      	lsls	r3, r4, #16
 8001e80:	0c1f      	lsrs	r7, r3, #16
 8001e82:	0212      	lsls	r2, r2, #8
 8001e84:	4649      	mov	r1, r9
 8001e86:	9200      	str	r2, [sp, #0]
 8001e88:	9701      	str	r7, [sp, #4]
 8001e8a:	f7fe f9f3 	bl	8000274 <__aeabi_uidivmod>
 8001e8e:	0002      	movs	r2, r0
 8001e90:	437a      	muls	r2, r7
 8001e92:	040b      	lsls	r3, r1, #16
 8001e94:	0c31      	lsrs	r1, r6, #16
 8001e96:	4680      	mov	r8, r0
 8001e98:	4319      	orrs	r1, r3
 8001e9a:	428a      	cmp	r2, r1
 8001e9c:	d90b      	bls.n	8001eb6 <__aeabi_ddiv+0x2c2>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	425b      	negs	r3, r3
 8001ea2:	469c      	mov	ip, r3
 8001ea4:	1909      	adds	r1, r1, r4
 8001ea6:	44e0      	add	r8, ip
 8001ea8:	428c      	cmp	r4, r1
 8001eaa:	d804      	bhi.n	8001eb6 <__aeabi_ddiv+0x2c2>
 8001eac:	428a      	cmp	r2, r1
 8001eae:	d902      	bls.n	8001eb6 <__aeabi_ddiv+0x2c2>
 8001eb0:	1e83      	subs	r3, r0, #2
 8001eb2:	4698      	mov	r8, r3
 8001eb4:	1909      	adds	r1, r1, r4
 8001eb6:	1a88      	subs	r0, r1, r2
 8001eb8:	4649      	mov	r1, r9
 8001eba:	f7fe f9db 	bl	8000274 <__aeabi_uidivmod>
 8001ebe:	0409      	lsls	r1, r1, #16
 8001ec0:	468c      	mov	ip, r1
 8001ec2:	0431      	lsls	r1, r6, #16
 8001ec4:	4666      	mov	r6, ip
 8001ec6:	9a01      	ldr	r2, [sp, #4]
 8001ec8:	0c09      	lsrs	r1, r1, #16
 8001eca:	4342      	muls	r2, r0
 8001ecc:	0003      	movs	r3, r0
 8001ece:	4331      	orrs	r1, r6
 8001ed0:	428a      	cmp	r2, r1
 8001ed2:	d904      	bls.n	8001ede <__aeabi_ddiv+0x2ea>
 8001ed4:	1909      	adds	r1, r1, r4
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	428c      	cmp	r4, r1
 8001eda:	d800      	bhi.n	8001ede <__aeabi_ddiv+0x2ea>
 8001edc:	e111      	b.n	8002102 <__aeabi_ddiv+0x50e>
 8001ede:	1a89      	subs	r1, r1, r2
 8001ee0:	4642      	mov	r2, r8
 8001ee2:	9e00      	ldr	r6, [sp, #0]
 8001ee4:	0412      	lsls	r2, r2, #16
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	0c33      	lsrs	r3, r6, #16
 8001eea:	001f      	movs	r7, r3
 8001eec:	0c10      	lsrs	r0, r2, #16
 8001eee:	4690      	mov	r8, r2
 8001ef0:	9302      	str	r3, [sp, #8]
 8001ef2:	0413      	lsls	r3, r2, #16
 8001ef4:	0432      	lsls	r2, r6, #16
 8001ef6:	0c16      	lsrs	r6, r2, #16
 8001ef8:	0032      	movs	r2, r6
 8001efa:	0c1b      	lsrs	r3, r3, #16
 8001efc:	435a      	muls	r2, r3
 8001efe:	9603      	str	r6, [sp, #12]
 8001f00:	437b      	muls	r3, r7
 8001f02:	4346      	muls	r6, r0
 8001f04:	4378      	muls	r0, r7
 8001f06:	0c17      	lsrs	r7, r2, #16
 8001f08:	46bc      	mov	ip, r7
 8001f0a:	199b      	adds	r3, r3, r6
 8001f0c:	4463      	add	r3, ip
 8001f0e:	429e      	cmp	r6, r3
 8001f10:	d903      	bls.n	8001f1a <__aeabi_ddiv+0x326>
 8001f12:	2680      	movs	r6, #128	; 0x80
 8001f14:	0276      	lsls	r6, r6, #9
 8001f16:	46b4      	mov	ip, r6
 8001f18:	4460      	add	r0, ip
 8001f1a:	0c1e      	lsrs	r6, r3, #16
 8001f1c:	1830      	adds	r0, r6, r0
 8001f1e:	0416      	lsls	r6, r2, #16
 8001f20:	041b      	lsls	r3, r3, #16
 8001f22:	0c36      	lsrs	r6, r6, #16
 8001f24:	199e      	adds	r6, r3, r6
 8001f26:	4281      	cmp	r1, r0
 8001f28:	d200      	bcs.n	8001f2c <__aeabi_ddiv+0x338>
 8001f2a:	e09c      	b.n	8002066 <__aeabi_ddiv+0x472>
 8001f2c:	d100      	bne.n	8001f30 <__aeabi_ddiv+0x33c>
 8001f2e:	e097      	b.n	8002060 <__aeabi_ddiv+0x46c>
 8001f30:	1bae      	subs	r6, r5, r6
 8001f32:	1a09      	subs	r1, r1, r0
 8001f34:	42b5      	cmp	r5, r6
 8001f36:	4180      	sbcs	r0, r0
 8001f38:	4240      	negs	r0, r0
 8001f3a:	1a08      	subs	r0, r1, r0
 8001f3c:	4284      	cmp	r4, r0
 8001f3e:	d100      	bne.n	8001f42 <__aeabi_ddiv+0x34e>
 8001f40:	e111      	b.n	8002166 <__aeabi_ddiv+0x572>
 8001f42:	4649      	mov	r1, r9
 8001f44:	f7fe f996 	bl	8000274 <__aeabi_uidivmod>
 8001f48:	9a01      	ldr	r2, [sp, #4]
 8001f4a:	040b      	lsls	r3, r1, #16
 8001f4c:	4342      	muls	r2, r0
 8001f4e:	0c31      	lsrs	r1, r6, #16
 8001f50:	0005      	movs	r5, r0
 8001f52:	4319      	orrs	r1, r3
 8001f54:	428a      	cmp	r2, r1
 8001f56:	d907      	bls.n	8001f68 <__aeabi_ddiv+0x374>
 8001f58:	1909      	adds	r1, r1, r4
 8001f5a:	3d01      	subs	r5, #1
 8001f5c:	428c      	cmp	r4, r1
 8001f5e:	d803      	bhi.n	8001f68 <__aeabi_ddiv+0x374>
 8001f60:	428a      	cmp	r2, r1
 8001f62:	d901      	bls.n	8001f68 <__aeabi_ddiv+0x374>
 8001f64:	1e85      	subs	r5, r0, #2
 8001f66:	1909      	adds	r1, r1, r4
 8001f68:	1a88      	subs	r0, r1, r2
 8001f6a:	4649      	mov	r1, r9
 8001f6c:	f7fe f982 	bl	8000274 <__aeabi_uidivmod>
 8001f70:	0409      	lsls	r1, r1, #16
 8001f72:	468c      	mov	ip, r1
 8001f74:	0431      	lsls	r1, r6, #16
 8001f76:	4666      	mov	r6, ip
 8001f78:	9a01      	ldr	r2, [sp, #4]
 8001f7a:	0c09      	lsrs	r1, r1, #16
 8001f7c:	4342      	muls	r2, r0
 8001f7e:	0003      	movs	r3, r0
 8001f80:	4331      	orrs	r1, r6
 8001f82:	428a      	cmp	r2, r1
 8001f84:	d907      	bls.n	8001f96 <__aeabi_ddiv+0x3a2>
 8001f86:	1909      	adds	r1, r1, r4
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	428c      	cmp	r4, r1
 8001f8c:	d803      	bhi.n	8001f96 <__aeabi_ddiv+0x3a2>
 8001f8e:	428a      	cmp	r2, r1
 8001f90:	d901      	bls.n	8001f96 <__aeabi_ddiv+0x3a2>
 8001f92:	1e83      	subs	r3, r0, #2
 8001f94:	1909      	adds	r1, r1, r4
 8001f96:	9e03      	ldr	r6, [sp, #12]
 8001f98:	1a89      	subs	r1, r1, r2
 8001f9a:	0032      	movs	r2, r6
 8001f9c:	042d      	lsls	r5, r5, #16
 8001f9e:	431d      	orrs	r5, r3
 8001fa0:	9f02      	ldr	r7, [sp, #8]
 8001fa2:	042b      	lsls	r3, r5, #16
 8001fa4:	0c1b      	lsrs	r3, r3, #16
 8001fa6:	435a      	muls	r2, r3
 8001fa8:	437b      	muls	r3, r7
 8001faa:	469c      	mov	ip, r3
 8001fac:	0c28      	lsrs	r0, r5, #16
 8001fae:	4346      	muls	r6, r0
 8001fb0:	0c13      	lsrs	r3, r2, #16
 8001fb2:	44b4      	add	ip, r6
 8001fb4:	4463      	add	r3, ip
 8001fb6:	4378      	muls	r0, r7
 8001fb8:	429e      	cmp	r6, r3
 8001fba:	d903      	bls.n	8001fc4 <__aeabi_ddiv+0x3d0>
 8001fbc:	2680      	movs	r6, #128	; 0x80
 8001fbe:	0276      	lsls	r6, r6, #9
 8001fc0:	46b4      	mov	ip, r6
 8001fc2:	4460      	add	r0, ip
 8001fc4:	0c1e      	lsrs	r6, r3, #16
 8001fc6:	0412      	lsls	r2, r2, #16
 8001fc8:	041b      	lsls	r3, r3, #16
 8001fca:	0c12      	lsrs	r2, r2, #16
 8001fcc:	1830      	adds	r0, r6, r0
 8001fce:	189b      	adds	r3, r3, r2
 8001fd0:	4281      	cmp	r1, r0
 8001fd2:	d306      	bcc.n	8001fe2 <__aeabi_ddiv+0x3ee>
 8001fd4:	d002      	beq.n	8001fdc <__aeabi_ddiv+0x3e8>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	431d      	orrs	r5, r3
 8001fda:	e6ce      	b.n	8001d7a <__aeabi_ddiv+0x186>
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d100      	bne.n	8001fe2 <__aeabi_ddiv+0x3ee>
 8001fe0:	e6cb      	b.n	8001d7a <__aeabi_ddiv+0x186>
 8001fe2:	1861      	adds	r1, r4, r1
 8001fe4:	1e6e      	subs	r6, r5, #1
 8001fe6:	42a1      	cmp	r1, r4
 8001fe8:	d200      	bcs.n	8001fec <__aeabi_ddiv+0x3f8>
 8001fea:	e0a4      	b.n	8002136 <__aeabi_ddiv+0x542>
 8001fec:	4281      	cmp	r1, r0
 8001fee:	d200      	bcs.n	8001ff2 <__aeabi_ddiv+0x3fe>
 8001ff0:	e0c9      	b.n	8002186 <__aeabi_ddiv+0x592>
 8001ff2:	d100      	bne.n	8001ff6 <__aeabi_ddiv+0x402>
 8001ff4:	e0d9      	b.n	80021aa <__aeabi_ddiv+0x5b6>
 8001ff6:	0035      	movs	r5, r6
 8001ff8:	e7ed      	b.n	8001fd6 <__aeabi_ddiv+0x3e2>
 8001ffa:	2501      	movs	r5, #1
 8001ffc:	426d      	negs	r5, r5
 8001ffe:	2101      	movs	r1, #1
 8002000:	1a89      	subs	r1, r1, r2
 8002002:	2938      	cmp	r1, #56	; 0x38
 8002004:	dd00      	ble.n	8002008 <__aeabi_ddiv+0x414>
 8002006:	e64c      	b.n	8001ca2 <__aeabi_ddiv+0xae>
 8002008:	291f      	cmp	r1, #31
 800200a:	dc00      	bgt.n	800200e <__aeabi_ddiv+0x41a>
 800200c:	e07f      	b.n	800210e <__aeabi_ddiv+0x51a>
 800200e:	231f      	movs	r3, #31
 8002010:	425b      	negs	r3, r3
 8002012:	1a9a      	subs	r2, r3, r2
 8002014:	4643      	mov	r3, r8
 8002016:	40d3      	lsrs	r3, r2
 8002018:	2920      	cmp	r1, #32
 800201a:	d004      	beq.n	8002026 <__aeabi_ddiv+0x432>
 800201c:	4644      	mov	r4, r8
 800201e:	4a65      	ldr	r2, [pc, #404]	; (80021b4 <__aeabi_ddiv+0x5c0>)
 8002020:	445a      	add	r2, fp
 8002022:	4094      	lsls	r4, r2
 8002024:	4325      	orrs	r5, r4
 8002026:	1e6a      	subs	r2, r5, #1
 8002028:	4195      	sbcs	r5, r2
 800202a:	2207      	movs	r2, #7
 800202c:	432b      	orrs	r3, r5
 800202e:	0015      	movs	r5, r2
 8002030:	2400      	movs	r4, #0
 8002032:	401d      	ands	r5, r3
 8002034:	421a      	tst	r2, r3
 8002036:	d100      	bne.n	800203a <__aeabi_ddiv+0x446>
 8002038:	e0a1      	b.n	800217e <__aeabi_ddiv+0x58a>
 800203a:	220f      	movs	r2, #15
 800203c:	2400      	movs	r4, #0
 800203e:	401a      	ands	r2, r3
 8002040:	2a04      	cmp	r2, #4
 8002042:	d100      	bne.n	8002046 <__aeabi_ddiv+0x452>
 8002044:	e098      	b.n	8002178 <__aeabi_ddiv+0x584>
 8002046:	1d1a      	adds	r2, r3, #4
 8002048:	429a      	cmp	r2, r3
 800204a:	419b      	sbcs	r3, r3
 800204c:	425b      	negs	r3, r3
 800204e:	18e4      	adds	r4, r4, r3
 8002050:	0013      	movs	r3, r2
 8002052:	0222      	lsls	r2, r4, #8
 8002054:	d400      	bmi.n	8002058 <__aeabi_ddiv+0x464>
 8002056:	e08f      	b.n	8002178 <__aeabi_ddiv+0x584>
 8002058:	2301      	movs	r3, #1
 800205a:	2400      	movs	r4, #0
 800205c:	2500      	movs	r5, #0
 800205e:	e623      	b.n	8001ca8 <__aeabi_ddiv+0xb4>
 8002060:	42b5      	cmp	r5, r6
 8002062:	d300      	bcc.n	8002066 <__aeabi_ddiv+0x472>
 8002064:	e764      	b.n	8001f30 <__aeabi_ddiv+0x33c>
 8002066:	4643      	mov	r3, r8
 8002068:	1e5a      	subs	r2, r3, #1
 800206a:	9b00      	ldr	r3, [sp, #0]
 800206c:	469c      	mov	ip, r3
 800206e:	4465      	add	r5, ip
 8002070:	001f      	movs	r7, r3
 8002072:	429d      	cmp	r5, r3
 8002074:	419b      	sbcs	r3, r3
 8002076:	425b      	negs	r3, r3
 8002078:	191b      	adds	r3, r3, r4
 800207a:	18c9      	adds	r1, r1, r3
 800207c:	428c      	cmp	r4, r1
 800207e:	d23a      	bcs.n	80020f6 <__aeabi_ddiv+0x502>
 8002080:	4288      	cmp	r0, r1
 8002082:	d863      	bhi.n	800214c <__aeabi_ddiv+0x558>
 8002084:	d060      	beq.n	8002148 <__aeabi_ddiv+0x554>
 8002086:	4690      	mov	r8, r2
 8002088:	e752      	b.n	8001f30 <__aeabi_ddiv+0x33c>
 800208a:	42aa      	cmp	r2, r5
 800208c:	d900      	bls.n	8002090 <__aeabi_ddiv+0x49c>
 800208e:	e6ea      	b.n	8001e66 <__aeabi_ddiv+0x272>
 8002090:	4643      	mov	r3, r8
 8002092:	07de      	lsls	r6, r3, #31
 8002094:	0858      	lsrs	r0, r3, #1
 8002096:	086b      	lsrs	r3, r5, #1
 8002098:	431e      	orrs	r6, r3
 800209a:	07ed      	lsls	r5, r5, #31
 800209c:	e6ea      	b.n	8001e74 <__aeabi_ddiv+0x280>
 800209e:	4648      	mov	r0, r9
 80020a0:	f001 f908 	bl	80032b4 <__clzsi2>
 80020a4:	0001      	movs	r1, r0
 80020a6:	0002      	movs	r2, r0
 80020a8:	3115      	adds	r1, #21
 80020aa:	3220      	adds	r2, #32
 80020ac:	291c      	cmp	r1, #28
 80020ae:	dc00      	bgt.n	80020b2 <__aeabi_ddiv+0x4be>
 80020b0:	e61a      	b.n	8001ce8 <__aeabi_ddiv+0xf4>
 80020b2:	464b      	mov	r3, r9
 80020b4:	3808      	subs	r0, #8
 80020b6:	4083      	lsls	r3, r0
 80020b8:	2500      	movs	r5, #0
 80020ba:	4698      	mov	r8, r3
 80020bc:	e620      	b.n	8001d00 <__aeabi_ddiv+0x10c>
 80020be:	f001 f8f9 	bl	80032b4 <__clzsi2>
 80020c2:	0003      	movs	r3, r0
 80020c4:	001a      	movs	r2, r3
 80020c6:	3215      	adds	r2, #21
 80020c8:	3020      	adds	r0, #32
 80020ca:	2a1c      	cmp	r2, #28
 80020cc:	dc00      	bgt.n	80020d0 <__aeabi_ddiv+0x4dc>
 80020ce:	e630      	b.n	8001d32 <__aeabi_ddiv+0x13e>
 80020d0:	4654      	mov	r4, sl
 80020d2:	3b08      	subs	r3, #8
 80020d4:	2200      	movs	r2, #0
 80020d6:	409c      	lsls	r4, r3
 80020d8:	e635      	b.n	8001d46 <__aeabi_ddiv+0x152>
 80020da:	230f      	movs	r3, #15
 80020dc:	402b      	ands	r3, r5
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d100      	bne.n	80020e4 <__aeabi_ddiv+0x4f0>
 80020e2:	e652      	b.n	8001d8a <__aeabi_ddiv+0x196>
 80020e4:	2305      	movs	r3, #5
 80020e6:	425b      	negs	r3, r3
 80020e8:	42ab      	cmp	r3, r5
 80020ea:	419b      	sbcs	r3, r3
 80020ec:	3504      	adds	r5, #4
 80020ee:	425b      	negs	r3, r3
 80020f0:	08ed      	lsrs	r5, r5, #3
 80020f2:	4498      	add	r8, r3
 80020f4:	e64a      	b.n	8001d8c <__aeabi_ddiv+0x198>
 80020f6:	428c      	cmp	r4, r1
 80020f8:	d1c5      	bne.n	8002086 <__aeabi_ddiv+0x492>
 80020fa:	42af      	cmp	r7, r5
 80020fc:	d9c0      	bls.n	8002080 <__aeabi_ddiv+0x48c>
 80020fe:	4690      	mov	r8, r2
 8002100:	e716      	b.n	8001f30 <__aeabi_ddiv+0x33c>
 8002102:	428a      	cmp	r2, r1
 8002104:	d800      	bhi.n	8002108 <__aeabi_ddiv+0x514>
 8002106:	e6ea      	b.n	8001ede <__aeabi_ddiv+0x2ea>
 8002108:	1e83      	subs	r3, r0, #2
 800210a:	1909      	adds	r1, r1, r4
 800210c:	e6e7      	b.n	8001ede <__aeabi_ddiv+0x2ea>
 800210e:	4a2a      	ldr	r2, [pc, #168]	; (80021b8 <__aeabi_ddiv+0x5c4>)
 8002110:	0028      	movs	r0, r5
 8002112:	445a      	add	r2, fp
 8002114:	4643      	mov	r3, r8
 8002116:	4095      	lsls	r5, r2
 8002118:	4093      	lsls	r3, r2
 800211a:	40c8      	lsrs	r0, r1
 800211c:	1e6a      	subs	r2, r5, #1
 800211e:	4195      	sbcs	r5, r2
 8002120:	4644      	mov	r4, r8
 8002122:	4303      	orrs	r3, r0
 8002124:	432b      	orrs	r3, r5
 8002126:	40cc      	lsrs	r4, r1
 8002128:	075a      	lsls	r2, r3, #29
 800212a:	d092      	beq.n	8002052 <__aeabi_ddiv+0x45e>
 800212c:	220f      	movs	r2, #15
 800212e:	401a      	ands	r2, r3
 8002130:	2a04      	cmp	r2, #4
 8002132:	d188      	bne.n	8002046 <__aeabi_ddiv+0x452>
 8002134:	e78d      	b.n	8002052 <__aeabi_ddiv+0x45e>
 8002136:	0035      	movs	r5, r6
 8002138:	4281      	cmp	r1, r0
 800213a:	d000      	beq.n	800213e <__aeabi_ddiv+0x54a>
 800213c:	e74b      	b.n	8001fd6 <__aeabi_ddiv+0x3e2>
 800213e:	9a00      	ldr	r2, [sp, #0]
 8002140:	4293      	cmp	r3, r2
 8002142:	d000      	beq.n	8002146 <__aeabi_ddiv+0x552>
 8002144:	e747      	b.n	8001fd6 <__aeabi_ddiv+0x3e2>
 8002146:	e618      	b.n	8001d7a <__aeabi_ddiv+0x186>
 8002148:	42ae      	cmp	r6, r5
 800214a:	d99c      	bls.n	8002086 <__aeabi_ddiv+0x492>
 800214c:	2302      	movs	r3, #2
 800214e:	425b      	negs	r3, r3
 8002150:	469c      	mov	ip, r3
 8002152:	9b00      	ldr	r3, [sp, #0]
 8002154:	44e0      	add	r8, ip
 8002156:	469c      	mov	ip, r3
 8002158:	4465      	add	r5, ip
 800215a:	429d      	cmp	r5, r3
 800215c:	419b      	sbcs	r3, r3
 800215e:	425b      	negs	r3, r3
 8002160:	191b      	adds	r3, r3, r4
 8002162:	18c9      	adds	r1, r1, r3
 8002164:	e6e4      	b.n	8001f30 <__aeabi_ddiv+0x33c>
 8002166:	4a15      	ldr	r2, [pc, #84]	; (80021bc <__aeabi_ddiv+0x5c8>)
 8002168:	445a      	add	r2, fp
 800216a:	2a00      	cmp	r2, #0
 800216c:	dc00      	bgt.n	8002170 <__aeabi_ddiv+0x57c>
 800216e:	e744      	b.n	8001ffa <__aeabi_ddiv+0x406>
 8002170:	2301      	movs	r3, #1
 8002172:	2500      	movs	r5, #0
 8002174:	4498      	add	r8, r3
 8002176:	e609      	b.n	8001d8c <__aeabi_ddiv+0x198>
 8002178:	0765      	lsls	r5, r4, #29
 800217a:	0264      	lsls	r4, r4, #9
 800217c:	0b24      	lsrs	r4, r4, #12
 800217e:	08db      	lsrs	r3, r3, #3
 8002180:	431d      	orrs	r5, r3
 8002182:	2300      	movs	r3, #0
 8002184:	e590      	b.n	8001ca8 <__aeabi_ddiv+0xb4>
 8002186:	9e00      	ldr	r6, [sp, #0]
 8002188:	3d02      	subs	r5, #2
 800218a:	0072      	lsls	r2, r6, #1
 800218c:	42b2      	cmp	r2, r6
 800218e:	41bf      	sbcs	r7, r7
 8002190:	427f      	negs	r7, r7
 8002192:	193c      	adds	r4, r7, r4
 8002194:	1909      	adds	r1, r1, r4
 8002196:	9200      	str	r2, [sp, #0]
 8002198:	e7ce      	b.n	8002138 <__aeabi_ddiv+0x544>
 800219a:	2480      	movs	r4, #128	; 0x80
 800219c:	4643      	mov	r3, r8
 800219e:	0324      	lsls	r4, r4, #12
 80021a0:	431c      	orrs	r4, r3
 80021a2:	0324      	lsls	r4, r4, #12
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <__aeabi_ddiv+0x5cc>)
 80021a6:	0b24      	lsrs	r4, r4, #12
 80021a8:	e57e      	b.n	8001ca8 <__aeabi_ddiv+0xb4>
 80021aa:	9a00      	ldr	r2, [sp, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d3ea      	bcc.n	8002186 <__aeabi_ddiv+0x592>
 80021b0:	0035      	movs	r5, r6
 80021b2:	e7c4      	b.n	800213e <__aeabi_ddiv+0x54a>
 80021b4:	0000043e 	.word	0x0000043e
 80021b8:	0000041e 	.word	0x0000041e
 80021bc:	000003ff 	.word	0x000003ff
 80021c0:	000007ff 	.word	0x000007ff

080021c4 <__eqdf2>:
 80021c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021c6:	464f      	mov	r7, r9
 80021c8:	4646      	mov	r6, r8
 80021ca:	46d6      	mov	lr, sl
 80021cc:	4694      	mov	ip, r2
 80021ce:	4691      	mov	r9, r2
 80021d0:	031a      	lsls	r2, r3, #12
 80021d2:	0b12      	lsrs	r2, r2, #12
 80021d4:	4d18      	ldr	r5, [pc, #96]	; (8002238 <__eqdf2+0x74>)
 80021d6:	b5c0      	push	{r6, r7, lr}
 80021d8:	004c      	lsls	r4, r1, #1
 80021da:	030f      	lsls	r7, r1, #12
 80021dc:	4692      	mov	sl, r2
 80021de:	005a      	lsls	r2, r3, #1
 80021e0:	0006      	movs	r6, r0
 80021e2:	4680      	mov	r8, r0
 80021e4:	0b3f      	lsrs	r7, r7, #12
 80021e6:	2001      	movs	r0, #1
 80021e8:	0d64      	lsrs	r4, r4, #21
 80021ea:	0fc9      	lsrs	r1, r1, #31
 80021ec:	0d52      	lsrs	r2, r2, #21
 80021ee:	0fdb      	lsrs	r3, r3, #31
 80021f0:	42ac      	cmp	r4, r5
 80021f2:	d00a      	beq.n	800220a <__eqdf2+0x46>
 80021f4:	42aa      	cmp	r2, r5
 80021f6:	d003      	beq.n	8002200 <__eqdf2+0x3c>
 80021f8:	4294      	cmp	r4, r2
 80021fa:	d101      	bne.n	8002200 <__eqdf2+0x3c>
 80021fc:	4557      	cmp	r7, sl
 80021fe:	d00d      	beq.n	800221c <__eqdf2+0x58>
 8002200:	bce0      	pop	{r5, r6, r7}
 8002202:	46ba      	mov	sl, r7
 8002204:	46b1      	mov	r9, r6
 8002206:	46a8      	mov	r8, r5
 8002208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800220a:	003d      	movs	r5, r7
 800220c:	4335      	orrs	r5, r6
 800220e:	d1f7      	bne.n	8002200 <__eqdf2+0x3c>
 8002210:	42a2      	cmp	r2, r4
 8002212:	d1f5      	bne.n	8002200 <__eqdf2+0x3c>
 8002214:	4652      	mov	r2, sl
 8002216:	4665      	mov	r5, ip
 8002218:	432a      	orrs	r2, r5
 800221a:	d1f1      	bne.n	8002200 <__eqdf2+0x3c>
 800221c:	2001      	movs	r0, #1
 800221e:	45c8      	cmp	r8, r9
 8002220:	d1ee      	bne.n	8002200 <__eqdf2+0x3c>
 8002222:	4299      	cmp	r1, r3
 8002224:	d006      	beq.n	8002234 <__eqdf2+0x70>
 8002226:	2c00      	cmp	r4, #0
 8002228:	d1ea      	bne.n	8002200 <__eqdf2+0x3c>
 800222a:	433e      	orrs	r6, r7
 800222c:	0030      	movs	r0, r6
 800222e:	1e46      	subs	r6, r0, #1
 8002230:	41b0      	sbcs	r0, r6
 8002232:	e7e5      	b.n	8002200 <__eqdf2+0x3c>
 8002234:	2000      	movs	r0, #0
 8002236:	e7e3      	b.n	8002200 <__eqdf2+0x3c>
 8002238:	000007ff 	.word	0x000007ff

0800223c <__gedf2>:
 800223c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800223e:	464e      	mov	r6, r9
 8002240:	4645      	mov	r5, r8
 8002242:	4657      	mov	r7, sl
 8002244:	46de      	mov	lr, fp
 8002246:	0004      	movs	r4, r0
 8002248:	0018      	movs	r0, r3
 800224a:	b5e0      	push	{r5, r6, r7, lr}
 800224c:	0016      	movs	r6, r2
 800224e:	031b      	lsls	r3, r3, #12
 8002250:	0b1b      	lsrs	r3, r3, #12
 8002252:	4d32      	ldr	r5, [pc, #200]	; (800231c <__gedf2+0xe0>)
 8002254:	030f      	lsls	r7, r1, #12
 8002256:	004a      	lsls	r2, r1, #1
 8002258:	4699      	mov	r9, r3
 800225a:	0043      	lsls	r3, r0, #1
 800225c:	46a4      	mov	ip, r4
 800225e:	46b0      	mov	r8, r6
 8002260:	0b3f      	lsrs	r7, r7, #12
 8002262:	0d52      	lsrs	r2, r2, #21
 8002264:	0fc9      	lsrs	r1, r1, #31
 8002266:	0d5b      	lsrs	r3, r3, #21
 8002268:	0fc0      	lsrs	r0, r0, #31
 800226a:	42aa      	cmp	r2, r5
 800226c:	d029      	beq.n	80022c2 <__gedf2+0x86>
 800226e:	42ab      	cmp	r3, r5
 8002270:	d018      	beq.n	80022a4 <__gedf2+0x68>
 8002272:	2a00      	cmp	r2, #0
 8002274:	d12a      	bne.n	80022cc <__gedf2+0x90>
 8002276:	433c      	orrs	r4, r7
 8002278:	46a3      	mov	fp, r4
 800227a:	4265      	negs	r5, r4
 800227c:	4165      	adcs	r5, r4
 800227e:	2b00      	cmp	r3, #0
 8002280:	d102      	bne.n	8002288 <__gedf2+0x4c>
 8002282:	464c      	mov	r4, r9
 8002284:	4326      	orrs	r6, r4
 8002286:	d027      	beq.n	80022d8 <__gedf2+0x9c>
 8002288:	2d00      	cmp	r5, #0
 800228a:	d115      	bne.n	80022b8 <__gedf2+0x7c>
 800228c:	4281      	cmp	r1, r0
 800228e:	d028      	beq.n	80022e2 <__gedf2+0xa6>
 8002290:	2002      	movs	r0, #2
 8002292:	3901      	subs	r1, #1
 8002294:	4008      	ands	r0, r1
 8002296:	3801      	subs	r0, #1
 8002298:	bcf0      	pop	{r4, r5, r6, r7}
 800229a:	46bb      	mov	fp, r7
 800229c:	46b2      	mov	sl, r6
 800229e:	46a9      	mov	r9, r5
 80022a0:	46a0      	mov	r8, r4
 80022a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022a4:	464d      	mov	r5, r9
 80022a6:	432e      	orrs	r6, r5
 80022a8:	d12f      	bne.n	800230a <__gedf2+0xce>
 80022aa:	2a00      	cmp	r2, #0
 80022ac:	d1ee      	bne.n	800228c <__gedf2+0x50>
 80022ae:	433c      	orrs	r4, r7
 80022b0:	4265      	negs	r5, r4
 80022b2:	4165      	adcs	r5, r4
 80022b4:	2d00      	cmp	r5, #0
 80022b6:	d0e9      	beq.n	800228c <__gedf2+0x50>
 80022b8:	2800      	cmp	r0, #0
 80022ba:	d1ed      	bne.n	8002298 <__gedf2+0x5c>
 80022bc:	2001      	movs	r0, #1
 80022be:	4240      	negs	r0, r0
 80022c0:	e7ea      	b.n	8002298 <__gedf2+0x5c>
 80022c2:	003d      	movs	r5, r7
 80022c4:	4325      	orrs	r5, r4
 80022c6:	d120      	bne.n	800230a <__gedf2+0xce>
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d0eb      	beq.n	80022a4 <__gedf2+0x68>
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1dd      	bne.n	800228c <__gedf2+0x50>
 80022d0:	464c      	mov	r4, r9
 80022d2:	4326      	orrs	r6, r4
 80022d4:	d1da      	bne.n	800228c <__gedf2+0x50>
 80022d6:	e7db      	b.n	8002290 <__gedf2+0x54>
 80022d8:	465b      	mov	r3, fp
 80022da:	2000      	movs	r0, #0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0db      	beq.n	8002298 <__gedf2+0x5c>
 80022e0:	e7d6      	b.n	8002290 <__gedf2+0x54>
 80022e2:	429a      	cmp	r2, r3
 80022e4:	dc0a      	bgt.n	80022fc <__gedf2+0xc0>
 80022e6:	dbe7      	blt.n	80022b8 <__gedf2+0x7c>
 80022e8:	454f      	cmp	r7, r9
 80022ea:	d8d1      	bhi.n	8002290 <__gedf2+0x54>
 80022ec:	d010      	beq.n	8002310 <__gedf2+0xd4>
 80022ee:	2000      	movs	r0, #0
 80022f0:	454f      	cmp	r7, r9
 80022f2:	d2d1      	bcs.n	8002298 <__gedf2+0x5c>
 80022f4:	2900      	cmp	r1, #0
 80022f6:	d0e1      	beq.n	80022bc <__gedf2+0x80>
 80022f8:	0008      	movs	r0, r1
 80022fa:	e7cd      	b.n	8002298 <__gedf2+0x5c>
 80022fc:	4243      	negs	r3, r0
 80022fe:	4158      	adcs	r0, r3
 8002300:	2302      	movs	r3, #2
 8002302:	4240      	negs	r0, r0
 8002304:	4018      	ands	r0, r3
 8002306:	3801      	subs	r0, #1
 8002308:	e7c6      	b.n	8002298 <__gedf2+0x5c>
 800230a:	2002      	movs	r0, #2
 800230c:	4240      	negs	r0, r0
 800230e:	e7c3      	b.n	8002298 <__gedf2+0x5c>
 8002310:	45c4      	cmp	ip, r8
 8002312:	d8bd      	bhi.n	8002290 <__gedf2+0x54>
 8002314:	2000      	movs	r0, #0
 8002316:	45c4      	cmp	ip, r8
 8002318:	d2be      	bcs.n	8002298 <__gedf2+0x5c>
 800231a:	e7eb      	b.n	80022f4 <__gedf2+0xb8>
 800231c:	000007ff 	.word	0x000007ff

08002320 <__ledf2>:
 8002320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002322:	464e      	mov	r6, r9
 8002324:	4645      	mov	r5, r8
 8002326:	4657      	mov	r7, sl
 8002328:	46de      	mov	lr, fp
 800232a:	0004      	movs	r4, r0
 800232c:	0018      	movs	r0, r3
 800232e:	b5e0      	push	{r5, r6, r7, lr}
 8002330:	0016      	movs	r6, r2
 8002332:	031b      	lsls	r3, r3, #12
 8002334:	0b1b      	lsrs	r3, r3, #12
 8002336:	4d31      	ldr	r5, [pc, #196]	; (80023fc <__ledf2+0xdc>)
 8002338:	030f      	lsls	r7, r1, #12
 800233a:	004a      	lsls	r2, r1, #1
 800233c:	4699      	mov	r9, r3
 800233e:	0043      	lsls	r3, r0, #1
 8002340:	46a4      	mov	ip, r4
 8002342:	46b0      	mov	r8, r6
 8002344:	0b3f      	lsrs	r7, r7, #12
 8002346:	0d52      	lsrs	r2, r2, #21
 8002348:	0fc9      	lsrs	r1, r1, #31
 800234a:	0d5b      	lsrs	r3, r3, #21
 800234c:	0fc0      	lsrs	r0, r0, #31
 800234e:	42aa      	cmp	r2, r5
 8002350:	d011      	beq.n	8002376 <__ledf2+0x56>
 8002352:	42ab      	cmp	r3, r5
 8002354:	d014      	beq.n	8002380 <__ledf2+0x60>
 8002356:	2a00      	cmp	r2, #0
 8002358:	d12f      	bne.n	80023ba <__ledf2+0x9a>
 800235a:	433c      	orrs	r4, r7
 800235c:	46a3      	mov	fp, r4
 800235e:	4265      	negs	r5, r4
 8002360:	4165      	adcs	r5, r4
 8002362:	2b00      	cmp	r3, #0
 8002364:	d114      	bne.n	8002390 <__ledf2+0x70>
 8002366:	464c      	mov	r4, r9
 8002368:	4326      	orrs	r6, r4
 800236a:	d111      	bne.n	8002390 <__ledf2+0x70>
 800236c:	465b      	mov	r3, fp
 800236e:	2000      	movs	r0, #0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d017      	beq.n	80023a4 <__ledf2+0x84>
 8002374:	e010      	b.n	8002398 <__ledf2+0x78>
 8002376:	003d      	movs	r5, r7
 8002378:	4325      	orrs	r5, r4
 800237a:	d112      	bne.n	80023a2 <__ledf2+0x82>
 800237c:	4293      	cmp	r3, r2
 800237e:	d11c      	bne.n	80023ba <__ledf2+0x9a>
 8002380:	464d      	mov	r5, r9
 8002382:	432e      	orrs	r6, r5
 8002384:	d10d      	bne.n	80023a2 <__ledf2+0x82>
 8002386:	2a00      	cmp	r2, #0
 8002388:	d104      	bne.n	8002394 <__ledf2+0x74>
 800238a:	433c      	orrs	r4, r7
 800238c:	4265      	negs	r5, r4
 800238e:	4165      	adcs	r5, r4
 8002390:	2d00      	cmp	r5, #0
 8002392:	d10d      	bne.n	80023b0 <__ledf2+0x90>
 8002394:	4281      	cmp	r1, r0
 8002396:	d016      	beq.n	80023c6 <__ledf2+0xa6>
 8002398:	2002      	movs	r0, #2
 800239a:	3901      	subs	r1, #1
 800239c:	4008      	ands	r0, r1
 800239e:	3801      	subs	r0, #1
 80023a0:	e000      	b.n	80023a4 <__ledf2+0x84>
 80023a2:	2002      	movs	r0, #2
 80023a4:	bcf0      	pop	{r4, r5, r6, r7}
 80023a6:	46bb      	mov	fp, r7
 80023a8:	46b2      	mov	sl, r6
 80023aa:	46a9      	mov	r9, r5
 80023ac:	46a0      	mov	r8, r4
 80023ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023b0:	2800      	cmp	r0, #0
 80023b2:	d1f7      	bne.n	80023a4 <__ledf2+0x84>
 80023b4:	2001      	movs	r0, #1
 80023b6:	4240      	negs	r0, r0
 80023b8:	e7f4      	b.n	80023a4 <__ledf2+0x84>
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1ea      	bne.n	8002394 <__ledf2+0x74>
 80023be:	464c      	mov	r4, r9
 80023c0:	4326      	orrs	r6, r4
 80023c2:	d1e7      	bne.n	8002394 <__ledf2+0x74>
 80023c4:	e7e8      	b.n	8002398 <__ledf2+0x78>
 80023c6:	429a      	cmp	r2, r3
 80023c8:	dd06      	ble.n	80023d8 <__ledf2+0xb8>
 80023ca:	4243      	negs	r3, r0
 80023cc:	4158      	adcs	r0, r3
 80023ce:	2302      	movs	r3, #2
 80023d0:	4240      	negs	r0, r0
 80023d2:	4018      	ands	r0, r3
 80023d4:	3801      	subs	r0, #1
 80023d6:	e7e5      	b.n	80023a4 <__ledf2+0x84>
 80023d8:	429a      	cmp	r2, r3
 80023da:	dbe9      	blt.n	80023b0 <__ledf2+0x90>
 80023dc:	454f      	cmp	r7, r9
 80023de:	d8db      	bhi.n	8002398 <__ledf2+0x78>
 80023e0:	d006      	beq.n	80023f0 <__ledf2+0xd0>
 80023e2:	2000      	movs	r0, #0
 80023e4:	454f      	cmp	r7, r9
 80023e6:	d2dd      	bcs.n	80023a4 <__ledf2+0x84>
 80023e8:	2900      	cmp	r1, #0
 80023ea:	d0e3      	beq.n	80023b4 <__ledf2+0x94>
 80023ec:	0008      	movs	r0, r1
 80023ee:	e7d9      	b.n	80023a4 <__ledf2+0x84>
 80023f0:	45c4      	cmp	ip, r8
 80023f2:	d8d1      	bhi.n	8002398 <__ledf2+0x78>
 80023f4:	2000      	movs	r0, #0
 80023f6:	45c4      	cmp	ip, r8
 80023f8:	d2d4      	bcs.n	80023a4 <__ledf2+0x84>
 80023fa:	e7f5      	b.n	80023e8 <__ledf2+0xc8>
 80023fc:	000007ff 	.word	0x000007ff

08002400 <__aeabi_dmul>:
 8002400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002402:	4657      	mov	r7, sl
 8002404:	464e      	mov	r6, r9
 8002406:	4645      	mov	r5, r8
 8002408:	46de      	mov	lr, fp
 800240a:	b5e0      	push	{r5, r6, r7, lr}
 800240c:	4698      	mov	r8, r3
 800240e:	030c      	lsls	r4, r1, #12
 8002410:	004b      	lsls	r3, r1, #1
 8002412:	0006      	movs	r6, r0
 8002414:	4692      	mov	sl, r2
 8002416:	b087      	sub	sp, #28
 8002418:	0b24      	lsrs	r4, r4, #12
 800241a:	0d5b      	lsrs	r3, r3, #21
 800241c:	0fcf      	lsrs	r7, r1, #31
 800241e:	2b00      	cmp	r3, #0
 8002420:	d06c      	beq.n	80024fc <__aeabi_dmul+0xfc>
 8002422:	4add      	ldr	r2, [pc, #884]	; (8002798 <__aeabi_dmul+0x398>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d100      	bne.n	800242a <__aeabi_dmul+0x2a>
 8002428:	e086      	b.n	8002538 <__aeabi_dmul+0x138>
 800242a:	0f42      	lsrs	r2, r0, #29
 800242c:	00e4      	lsls	r4, r4, #3
 800242e:	4314      	orrs	r4, r2
 8002430:	2280      	movs	r2, #128	; 0x80
 8002432:	0412      	lsls	r2, r2, #16
 8002434:	4314      	orrs	r4, r2
 8002436:	4ad9      	ldr	r2, [pc, #868]	; (800279c <__aeabi_dmul+0x39c>)
 8002438:	00c5      	lsls	r5, r0, #3
 800243a:	4694      	mov	ip, r2
 800243c:	4463      	add	r3, ip
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	2300      	movs	r3, #0
 8002442:	4699      	mov	r9, r3
 8002444:	469b      	mov	fp, r3
 8002446:	4643      	mov	r3, r8
 8002448:	4642      	mov	r2, r8
 800244a:	031e      	lsls	r6, r3, #12
 800244c:	0fd2      	lsrs	r2, r2, #31
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4650      	mov	r0, sl
 8002452:	4690      	mov	r8, r2
 8002454:	0b36      	lsrs	r6, r6, #12
 8002456:	0d5b      	lsrs	r3, r3, #21
 8002458:	d100      	bne.n	800245c <__aeabi_dmul+0x5c>
 800245a:	e078      	b.n	800254e <__aeabi_dmul+0x14e>
 800245c:	4ace      	ldr	r2, [pc, #824]	; (8002798 <__aeabi_dmul+0x398>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d01d      	beq.n	800249e <__aeabi_dmul+0x9e>
 8002462:	49ce      	ldr	r1, [pc, #824]	; (800279c <__aeabi_dmul+0x39c>)
 8002464:	0f42      	lsrs	r2, r0, #29
 8002466:	468c      	mov	ip, r1
 8002468:	9900      	ldr	r1, [sp, #0]
 800246a:	4463      	add	r3, ip
 800246c:	00f6      	lsls	r6, r6, #3
 800246e:	468c      	mov	ip, r1
 8002470:	4316      	orrs	r6, r2
 8002472:	2280      	movs	r2, #128	; 0x80
 8002474:	449c      	add	ip, r3
 8002476:	0412      	lsls	r2, r2, #16
 8002478:	4663      	mov	r3, ip
 800247a:	4316      	orrs	r6, r2
 800247c:	00c2      	lsls	r2, r0, #3
 800247e:	2000      	movs	r0, #0
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	9900      	ldr	r1, [sp, #0]
 8002484:	4643      	mov	r3, r8
 8002486:	3101      	adds	r1, #1
 8002488:	468c      	mov	ip, r1
 800248a:	4649      	mov	r1, r9
 800248c:	407b      	eors	r3, r7
 800248e:	9301      	str	r3, [sp, #4]
 8002490:	290f      	cmp	r1, #15
 8002492:	d900      	bls.n	8002496 <__aeabi_dmul+0x96>
 8002494:	e07e      	b.n	8002594 <__aeabi_dmul+0x194>
 8002496:	4bc2      	ldr	r3, [pc, #776]	; (80027a0 <__aeabi_dmul+0x3a0>)
 8002498:	0089      	lsls	r1, r1, #2
 800249a:	5859      	ldr	r1, [r3, r1]
 800249c:	468f      	mov	pc, r1
 800249e:	4652      	mov	r2, sl
 80024a0:	9b00      	ldr	r3, [sp, #0]
 80024a2:	4332      	orrs	r2, r6
 80024a4:	d000      	beq.n	80024a8 <__aeabi_dmul+0xa8>
 80024a6:	e156      	b.n	8002756 <__aeabi_dmul+0x356>
 80024a8:	49bb      	ldr	r1, [pc, #748]	; (8002798 <__aeabi_dmul+0x398>)
 80024aa:	2600      	movs	r6, #0
 80024ac:	468c      	mov	ip, r1
 80024ae:	4463      	add	r3, ip
 80024b0:	4649      	mov	r1, r9
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	2302      	movs	r3, #2
 80024b6:	4319      	orrs	r1, r3
 80024b8:	4689      	mov	r9, r1
 80024ba:	2002      	movs	r0, #2
 80024bc:	e7e1      	b.n	8002482 <__aeabi_dmul+0x82>
 80024be:	4643      	mov	r3, r8
 80024c0:	9301      	str	r3, [sp, #4]
 80024c2:	0034      	movs	r4, r6
 80024c4:	0015      	movs	r5, r2
 80024c6:	4683      	mov	fp, r0
 80024c8:	465b      	mov	r3, fp
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d05e      	beq.n	800258c <__aeabi_dmul+0x18c>
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d100      	bne.n	80024d4 <__aeabi_dmul+0xd4>
 80024d2:	e1f3      	b.n	80028bc <__aeabi_dmul+0x4bc>
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d000      	beq.n	80024da <__aeabi_dmul+0xda>
 80024d8:	e118      	b.n	800270c <__aeabi_dmul+0x30c>
 80024da:	2200      	movs	r2, #0
 80024dc:	2400      	movs	r4, #0
 80024de:	2500      	movs	r5, #0
 80024e0:	9b01      	ldr	r3, [sp, #4]
 80024e2:	0512      	lsls	r2, r2, #20
 80024e4:	4322      	orrs	r2, r4
 80024e6:	07db      	lsls	r3, r3, #31
 80024e8:	431a      	orrs	r2, r3
 80024ea:	0028      	movs	r0, r5
 80024ec:	0011      	movs	r1, r2
 80024ee:	b007      	add	sp, #28
 80024f0:	bcf0      	pop	{r4, r5, r6, r7}
 80024f2:	46bb      	mov	fp, r7
 80024f4:	46b2      	mov	sl, r6
 80024f6:	46a9      	mov	r9, r5
 80024f8:	46a0      	mov	r8, r4
 80024fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024fc:	0025      	movs	r5, r4
 80024fe:	4305      	orrs	r5, r0
 8002500:	d100      	bne.n	8002504 <__aeabi_dmul+0x104>
 8002502:	e141      	b.n	8002788 <__aeabi_dmul+0x388>
 8002504:	2c00      	cmp	r4, #0
 8002506:	d100      	bne.n	800250a <__aeabi_dmul+0x10a>
 8002508:	e1ad      	b.n	8002866 <__aeabi_dmul+0x466>
 800250a:	0020      	movs	r0, r4
 800250c:	f000 fed2 	bl	80032b4 <__clzsi2>
 8002510:	0001      	movs	r1, r0
 8002512:	0002      	movs	r2, r0
 8002514:	390b      	subs	r1, #11
 8002516:	231d      	movs	r3, #29
 8002518:	0010      	movs	r0, r2
 800251a:	1a5b      	subs	r3, r3, r1
 800251c:	0031      	movs	r1, r6
 800251e:	0035      	movs	r5, r6
 8002520:	3808      	subs	r0, #8
 8002522:	4084      	lsls	r4, r0
 8002524:	40d9      	lsrs	r1, r3
 8002526:	4085      	lsls	r5, r0
 8002528:	430c      	orrs	r4, r1
 800252a:	489e      	ldr	r0, [pc, #632]	; (80027a4 <__aeabi_dmul+0x3a4>)
 800252c:	1a83      	subs	r3, r0, r2
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	2300      	movs	r3, #0
 8002532:	4699      	mov	r9, r3
 8002534:	469b      	mov	fp, r3
 8002536:	e786      	b.n	8002446 <__aeabi_dmul+0x46>
 8002538:	0005      	movs	r5, r0
 800253a:	4325      	orrs	r5, r4
 800253c:	d000      	beq.n	8002540 <__aeabi_dmul+0x140>
 800253e:	e11c      	b.n	800277a <__aeabi_dmul+0x37a>
 8002540:	2208      	movs	r2, #8
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	2302      	movs	r3, #2
 8002546:	2400      	movs	r4, #0
 8002548:	4691      	mov	r9, r2
 800254a:	469b      	mov	fp, r3
 800254c:	e77b      	b.n	8002446 <__aeabi_dmul+0x46>
 800254e:	4652      	mov	r2, sl
 8002550:	4332      	orrs	r2, r6
 8002552:	d100      	bne.n	8002556 <__aeabi_dmul+0x156>
 8002554:	e10a      	b.n	800276c <__aeabi_dmul+0x36c>
 8002556:	2e00      	cmp	r6, #0
 8002558:	d100      	bne.n	800255c <__aeabi_dmul+0x15c>
 800255a:	e176      	b.n	800284a <__aeabi_dmul+0x44a>
 800255c:	0030      	movs	r0, r6
 800255e:	f000 fea9 	bl	80032b4 <__clzsi2>
 8002562:	0002      	movs	r2, r0
 8002564:	3a0b      	subs	r2, #11
 8002566:	231d      	movs	r3, #29
 8002568:	0001      	movs	r1, r0
 800256a:	1a9b      	subs	r3, r3, r2
 800256c:	4652      	mov	r2, sl
 800256e:	3908      	subs	r1, #8
 8002570:	40da      	lsrs	r2, r3
 8002572:	408e      	lsls	r6, r1
 8002574:	4316      	orrs	r6, r2
 8002576:	4652      	mov	r2, sl
 8002578:	408a      	lsls	r2, r1
 800257a:	9b00      	ldr	r3, [sp, #0]
 800257c:	4989      	ldr	r1, [pc, #548]	; (80027a4 <__aeabi_dmul+0x3a4>)
 800257e:	1a18      	subs	r0, r3, r0
 8002580:	0003      	movs	r3, r0
 8002582:	468c      	mov	ip, r1
 8002584:	4463      	add	r3, ip
 8002586:	2000      	movs	r0, #0
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	e77a      	b.n	8002482 <__aeabi_dmul+0x82>
 800258c:	2400      	movs	r4, #0
 800258e:	2500      	movs	r5, #0
 8002590:	4a81      	ldr	r2, [pc, #516]	; (8002798 <__aeabi_dmul+0x398>)
 8002592:	e7a5      	b.n	80024e0 <__aeabi_dmul+0xe0>
 8002594:	0c2f      	lsrs	r7, r5, #16
 8002596:	042d      	lsls	r5, r5, #16
 8002598:	0c2d      	lsrs	r5, r5, #16
 800259a:	002b      	movs	r3, r5
 800259c:	0c11      	lsrs	r1, r2, #16
 800259e:	0412      	lsls	r2, r2, #16
 80025a0:	0c12      	lsrs	r2, r2, #16
 80025a2:	4353      	muls	r3, r2
 80025a4:	4698      	mov	r8, r3
 80025a6:	0013      	movs	r3, r2
 80025a8:	0028      	movs	r0, r5
 80025aa:	437b      	muls	r3, r7
 80025ac:	4699      	mov	r9, r3
 80025ae:	4348      	muls	r0, r1
 80025b0:	4448      	add	r0, r9
 80025b2:	4683      	mov	fp, r0
 80025b4:	4640      	mov	r0, r8
 80025b6:	000b      	movs	r3, r1
 80025b8:	0c00      	lsrs	r0, r0, #16
 80025ba:	4682      	mov	sl, r0
 80025bc:	4658      	mov	r0, fp
 80025be:	437b      	muls	r3, r7
 80025c0:	4450      	add	r0, sl
 80025c2:	9302      	str	r3, [sp, #8]
 80025c4:	4581      	cmp	r9, r0
 80025c6:	d906      	bls.n	80025d6 <__aeabi_dmul+0x1d6>
 80025c8:	469a      	mov	sl, r3
 80025ca:	2380      	movs	r3, #128	; 0x80
 80025cc:	025b      	lsls	r3, r3, #9
 80025ce:	4699      	mov	r9, r3
 80025d0:	44ca      	add	sl, r9
 80025d2:	4653      	mov	r3, sl
 80025d4:	9302      	str	r3, [sp, #8]
 80025d6:	0c03      	lsrs	r3, r0, #16
 80025d8:	469b      	mov	fp, r3
 80025da:	4643      	mov	r3, r8
 80025dc:	041b      	lsls	r3, r3, #16
 80025de:	0400      	lsls	r0, r0, #16
 80025e0:	0c1b      	lsrs	r3, r3, #16
 80025e2:	4698      	mov	r8, r3
 80025e4:	0003      	movs	r3, r0
 80025e6:	4443      	add	r3, r8
 80025e8:	9304      	str	r3, [sp, #16]
 80025ea:	0c33      	lsrs	r3, r6, #16
 80025ec:	4699      	mov	r9, r3
 80025ee:	002b      	movs	r3, r5
 80025f0:	0436      	lsls	r6, r6, #16
 80025f2:	0c36      	lsrs	r6, r6, #16
 80025f4:	4373      	muls	r3, r6
 80025f6:	4698      	mov	r8, r3
 80025f8:	0033      	movs	r3, r6
 80025fa:	437b      	muls	r3, r7
 80025fc:	469a      	mov	sl, r3
 80025fe:	464b      	mov	r3, r9
 8002600:	435d      	muls	r5, r3
 8002602:	435f      	muls	r7, r3
 8002604:	4643      	mov	r3, r8
 8002606:	4455      	add	r5, sl
 8002608:	0c18      	lsrs	r0, r3, #16
 800260a:	1940      	adds	r0, r0, r5
 800260c:	4582      	cmp	sl, r0
 800260e:	d903      	bls.n	8002618 <__aeabi_dmul+0x218>
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	025b      	lsls	r3, r3, #9
 8002614:	469a      	mov	sl, r3
 8002616:	4457      	add	r7, sl
 8002618:	0c05      	lsrs	r5, r0, #16
 800261a:	19eb      	adds	r3, r5, r7
 800261c:	9305      	str	r3, [sp, #20]
 800261e:	4643      	mov	r3, r8
 8002620:	041d      	lsls	r5, r3, #16
 8002622:	0c2d      	lsrs	r5, r5, #16
 8002624:	0400      	lsls	r0, r0, #16
 8002626:	1940      	adds	r0, r0, r5
 8002628:	0c25      	lsrs	r5, r4, #16
 800262a:	0424      	lsls	r4, r4, #16
 800262c:	0c24      	lsrs	r4, r4, #16
 800262e:	0027      	movs	r7, r4
 8002630:	4357      	muls	r7, r2
 8002632:	436a      	muls	r2, r5
 8002634:	4690      	mov	r8, r2
 8002636:	002a      	movs	r2, r5
 8002638:	0c3b      	lsrs	r3, r7, #16
 800263a:	469a      	mov	sl, r3
 800263c:	434a      	muls	r2, r1
 800263e:	4361      	muls	r1, r4
 8002640:	4441      	add	r1, r8
 8002642:	4451      	add	r1, sl
 8002644:	4483      	add	fp, r0
 8002646:	4588      	cmp	r8, r1
 8002648:	d903      	bls.n	8002652 <__aeabi_dmul+0x252>
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	025b      	lsls	r3, r3, #9
 800264e:	4698      	mov	r8, r3
 8002650:	4442      	add	r2, r8
 8002652:	043f      	lsls	r7, r7, #16
 8002654:	0c0b      	lsrs	r3, r1, #16
 8002656:	0c3f      	lsrs	r7, r7, #16
 8002658:	0409      	lsls	r1, r1, #16
 800265a:	19c9      	adds	r1, r1, r7
 800265c:	0027      	movs	r7, r4
 800265e:	4698      	mov	r8, r3
 8002660:	464b      	mov	r3, r9
 8002662:	4377      	muls	r7, r6
 8002664:	435c      	muls	r4, r3
 8002666:	436e      	muls	r6, r5
 8002668:	435d      	muls	r5, r3
 800266a:	0c3b      	lsrs	r3, r7, #16
 800266c:	4699      	mov	r9, r3
 800266e:	19a4      	adds	r4, r4, r6
 8002670:	444c      	add	r4, r9
 8002672:	4442      	add	r2, r8
 8002674:	9503      	str	r5, [sp, #12]
 8002676:	42a6      	cmp	r6, r4
 8002678:	d904      	bls.n	8002684 <__aeabi_dmul+0x284>
 800267a:	2380      	movs	r3, #128	; 0x80
 800267c:	025b      	lsls	r3, r3, #9
 800267e:	4698      	mov	r8, r3
 8002680:	4445      	add	r5, r8
 8002682:	9503      	str	r5, [sp, #12]
 8002684:	9b02      	ldr	r3, [sp, #8]
 8002686:	043f      	lsls	r7, r7, #16
 8002688:	445b      	add	r3, fp
 800268a:	001e      	movs	r6, r3
 800268c:	4283      	cmp	r3, r0
 800268e:	4180      	sbcs	r0, r0
 8002690:	0423      	lsls	r3, r4, #16
 8002692:	4698      	mov	r8, r3
 8002694:	9b05      	ldr	r3, [sp, #20]
 8002696:	0c3f      	lsrs	r7, r7, #16
 8002698:	4447      	add	r7, r8
 800269a:	4698      	mov	r8, r3
 800269c:	1876      	adds	r6, r6, r1
 800269e:	428e      	cmp	r6, r1
 80026a0:	4189      	sbcs	r1, r1
 80026a2:	4447      	add	r7, r8
 80026a4:	4240      	negs	r0, r0
 80026a6:	183d      	adds	r5, r7, r0
 80026a8:	46a8      	mov	r8, r5
 80026aa:	4693      	mov	fp, r2
 80026ac:	4249      	negs	r1, r1
 80026ae:	468a      	mov	sl, r1
 80026b0:	44c3      	add	fp, r8
 80026b2:	429f      	cmp	r7, r3
 80026b4:	41bf      	sbcs	r7, r7
 80026b6:	4580      	cmp	r8, r0
 80026b8:	4180      	sbcs	r0, r0
 80026ba:	9b03      	ldr	r3, [sp, #12]
 80026bc:	44da      	add	sl, fp
 80026be:	4698      	mov	r8, r3
 80026c0:	4653      	mov	r3, sl
 80026c2:	4240      	negs	r0, r0
 80026c4:	427f      	negs	r7, r7
 80026c6:	4307      	orrs	r7, r0
 80026c8:	0c24      	lsrs	r4, r4, #16
 80026ca:	4593      	cmp	fp, r2
 80026cc:	4192      	sbcs	r2, r2
 80026ce:	458a      	cmp	sl, r1
 80026d0:	4189      	sbcs	r1, r1
 80026d2:	193f      	adds	r7, r7, r4
 80026d4:	0ddc      	lsrs	r4, r3, #23
 80026d6:	9b04      	ldr	r3, [sp, #16]
 80026d8:	0275      	lsls	r5, r6, #9
 80026da:	431d      	orrs	r5, r3
 80026dc:	1e68      	subs	r0, r5, #1
 80026de:	4185      	sbcs	r5, r0
 80026e0:	4653      	mov	r3, sl
 80026e2:	4252      	negs	r2, r2
 80026e4:	4249      	negs	r1, r1
 80026e6:	430a      	orrs	r2, r1
 80026e8:	18bf      	adds	r7, r7, r2
 80026ea:	4447      	add	r7, r8
 80026ec:	0df6      	lsrs	r6, r6, #23
 80026ee:	027f      	lsls	r7, r7, #9
 80026f0:	4335      	orrs	r5, r6
 80026f2:	025a      	lsls	r2, r3, #9
 80026f4:	433c      	orrs	r4, r7
 80026f6:	4315      	orrs	r5, r2
 80026f8:	01fb      	lsls	r3, r7, #7
 80026fa:	d400      	bmi.n	80026fe <__aeabi_dmul+0x2fe>
 80026fc:	e0c1      	b.n	8002882 <__aeabi_dmul+0x482>
 80026fe:	2101      	movs	r1, #1
 8002700:	086a      	lsrs	r2, r5, #1
 8002702:	400d      	ands	r5, r1
 8002704:	4315      	orrs	r5, r2
 8002706:	07e2      	lsls	r2, r4, #31
 8002708:	4315      	orrs	r5, r2
 800270a:	0864      	lsrs	r4, r4, #1
 800270c:	4926      	ldr	r1, [pc, #152]	; (80027a8 <__aeabi_dmul+0x3a8>)
 800270e:	4461      	add	r1, ip
 8002710:	2900      	cmp	r1, #0
 8002712:	dd56      	ble.n	80027c2 <__aeabi_dmul+0x3c2>
 8002714:	076b      	lsls	r3, r5, #29
 8002716:	d009      	beq.n	800272c <__aeabi_dmul+0x32c>
 8002718:	220f      	movs	r2, #15
 800271a:	402a      	ands	r2, r5
 800271c:	2a04      	cmp	r2, #4
 800271e:	d005      	beq.n	800272c <__aeabi_dmul+0x32c>
 8002720:	1d2a      	adds	r2, r5, #4
 8002722:	42aa      	cmp	r2, r5
 8002724:	41ad      	sbcs	r5, r5
 8002726:	426d      	negs	r5, r5
 8002728:	1964      	adds	r4, r4, r5
 800272a:	0015      	movs	r5, r2
 800272c:	01e3      	lsls	r3, r4, #7
 800272e:	d504      	bpl.n	800273a <__aeabi_dmul+0x33a>
 8002730:	2180      	movs	r1, #128	; 0x80
 8002732:	4a1e      	ldr	r2, [pc, #120]	; (80027ac <__aeabi_dmul+0x3ac>)
 8002734:	00c9      	lsls	r1, r1, #3
 8002736:	4014      	ands	r4, r2
 8002738:	4461      	add	r1, ip
 800273a:	4a1d      	ldr	r2, [pc, #116]	; (80027b0 <__aeabi_dmul+0x3b0>)
 800273c:	4291      	cmp	r1, r2
 800273e:	dd00      	ble.n	8002742 <__aeabi_dmul+0x342>
 8002740:	e724      	b.n	800258c <__aeabi_dmul+0x18c>
 8002742:	0762      	lsls	r2, r4, #29
 8002744:	08ed      	lsrs	r5, r5, #3
 8002746:	0264      	lsls	r4, r4, #9
 8002748:	0549      	lsls	r1, r1, #21
 800274a:	4315      	orrs	r5, r2
 800274c:	0b24      	lsrs	r4, r4, #12
 800274e:	0d4a      	lsrs	r2, r1, #21
 8002750:	e6c6      	b.n	80024e0 <__aeabi_dmul+0xe0>
 8002752:	9701      	str	r7, [sp, #4]
 8002754:	e6b8      	b.n	80024c8 <__aeabi_dmul+0xc8>
 8002756:	4a10      	ldr	r2, [pc, #64]	; (8002798 <__aeabi_dmul+0x398>)
 8002758:	2003      	movs	r0, #3
 800275a:	4694      	mov	ip, r2
 800275c:	4463      	add	r3, ip
 800275e:	464a      	mov	r2, r9
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	2303      	movs	r3, #3
 8002764:	431a      	orrs	r2, r3
 8002766:	4691      	mov	r9, r2
 8002768:	4652      	mov	r2, sl
 800276a:	e68a      	b.n	8002482 <__aeabi_dmul+0x82>
 800276c:	4649      	mov	r1, r9
 800276e:	2301      	movs	r3, #1
 8002770:	4319      	orrs	r1, r3
 8002772:	4689      	mov	r9, r1
 8002774:	2600      	movs	r6, #0
 8002776:	2001      	movs	r0, #1
 8002778:	e683      	b.n	8002482 <__aeabi_dmul+0x82>
 800277a:	220c      	movs	r2, #12
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	2303      	movs	r3, #3
 8002780:	0005      	movs	r5, r0
 8002782:	4691      	mov	r9, r2
 8002784:	469b      	mov	fp, r3
 8002786:	e65e      	b.n	8002446 <__aeabi_dmul+0x46>
 8002788:	2304      	movs	r3, #4
 800278a:	4699      	mov	r9, r3
 800278c:	2300      	movs	r3, #0
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	3301      	adds	r3, #1
 8002792:	2400      	movs	r4, #0
 8002794:	469b      	mov	fp, r3
 8002796:	e656      	b.n	8002446 <__aeabi_dmul+0x46>
 8002798:	000007ff 	.word	0x000007ff
 800279c:	fffffc01 	.word	0xfffffc01
 80027a0:	0801195c 	.word	0x0801195c
 80027a4:	fffffc0d 	.word	0xfffffc0d
 80027a8:	000003ff 	.word	0x000003ff
 80027ac:	feffffff 	.word	0xfeffffff
 80027b0:	000007fe 	.word	0x000007fe
 80027b4:	2300      	movs	r3, #0
 80027b6:	2480      	movs	r4, #128	; 0x80
 80027b8:	2500      	movs	r5, #0
 80027ba:	4a44      	ldr	r2, [pc, #272]	; (80028cc <__aeabi_dmul+0x4cc>)
 80027bc:	9301      	str	r3, [sp, #4]
 80027be:	0324      	lsls	r4, r4, #12
 80027c0:	e68e      	b.n	80024e0 <__aeabi_dmul+0xe0>
 80027c2:	2001      	movs	r0, #1
 80027c4:	1a40      	subs	r0, r0, r1
 80027c6:	2838      	cmp	r0, #56	; 0x38
 80027c8:	dd00      	ble.n	80027cc <__aeabi_dmul+0x3cc>
 80027ca:	e686      	b.n	80024da <__aeabi_dmul+0xda>
 80027cc:	281f      	cmp	r0, #31
 80027ce:	dd5b      	ble.n	8002888 <__aeabi_dmul+0x488>
 80027d0:	221f      	movs	r2, #31
 80027d2:	0023      	movs	r3, r4
 80027d4:	4252      	negs	r2, r2
 80027d6:	1a51      	subs	r1, r2, r1
 80027d8:	40cb      	lsrs	r3, r1
 80027da:	0019      	movs	r1, r3
 80027dc:	2820      	cmp	r0, #32
 80027de:	d003      	beq.n	80027e8 <__aeabi_dmul+0x3e8>
 80027e0:	4a3b      	ldr	r2, [pc, #236]	; (80028d0 <__aeabi_dmul+0x4d0>)
 80027e2:	4462      	add	r2, ip
 80027e4:	4094      	lsls	r4, r2
 80027e6:	4325      	orrs	r5, r4
 80027e8:	1e6a      	subs	r2, r5, #1
 80027ea:	4195      	sbcs	r5, r2
 80027ec:	002a      	movs	r2, r5
 80027ee:	430a      	orrs	r2, r1
 80027f0:	2107      	movs	r1, #7
 80027f2:	000d      	movs	r5, r1
 80027f4:	2400      	movs	r4, #0
 80027f6:	4015      	ands	r5, r2
 80027f8:	4211      	tst	r1, r2
 80027fa:	d05b      	beq.n	80028b4 <__aeabi_dmul+0x4b4>
 80027fc:	210f      	movs	r1, #15
 80027fe:	2400      	movs	r4, #0
 8002800:	4011      	ands	r1, r2
 8002802:	2904      	cmp	r1, #4
 8002804:	d053      	beq.n	80028ae <__aeabi_dmul+0x4ae>
 8002806:	1d11      	adds	r1, r2, #4
 8002808:	4291      	cmp	r1, r2
 800280a:	4192      	sbcs	r2, r2
 800280c:	4252      	negs	r2, r2
 800280e:	18a4      	adds	r4, r4, r2
 8002810:	000a      	movs	r2, r1
 8002812:	0223      	lsls	r3, r4, #8
 8002814:	d54b      	bpl.n	80028ae <__aeabi_dmul+0x4ae>
 8002816:	2201      	movs	r2, #1
 8002818:	2400      	movs	r4, #0
 800281a:	2500      	movs	r5, #0
 800281c:	e660      	b.n	80024e0 <__aeabi_dmul+0xe0>
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	031b      	lsls	r3, r3, #12
 8002822:	421c      	tst	r4, r3
 8002824:	d009      	beq.n	800283a <__aeabi_dmul+0x43a>
 8002826:	421e      	tst	r6, r3
 8002828:	d107      	bne.n	800283a <__aeabi_dmul+0x43a>
 800282a:	4333      	orrs	r3, r6
 800282c:	031c      	lsls	r4, r3, #12
 800282e:	4643      	mov	r3, r8
 8002830:	0015      	movs	r5, r2
 8002832:	0b24      	lsrs	r4, r4, #12
 8002834:	4a25      	ldr	r2, [pc, #148]	; (80028cc <__aeabi_dmul+0x4cc>)
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	e652      	b.n	80024e0 <__aeabi_dmul+0xe0>
 800283a:	2280      	movs	r2, #128	; 0x80
 800283c:	0312      	lsls	r2, r2, #12
 800283e:	4314      	orrs	r4, r2
 8002840:	0324      	lsls	r4, r4, #12
 8002842:	4a22      	ldr	r2, [pc, #136]	; (80028cc <__aeabi_dmul+0x4cc>)
 8002844:	0b24      	lsrs	r4, r4, #12
 8002846:	9701      	str	r7, [sp, #4]
 8002848:	e64a      	b.n	80024e0 <__aeabi_dmul+0xe0>
 800284a:	f000 fd33 	bl	80032b4 <__clzsi2>
 800284e:	0003      	movs	r3, r0
 8002850:	001a      	movs	r2, r3
 8002852:	3215      	adds	r2, #21
 8002854:	3020      	adds	r0, #32
 8002856:	2a1c      	cmp	r2, #28
 8002858:	dc00      	bgt.n	800285c <__aeabi_dmul+0x45c>
 800285a:	e684      	b.n	8002566 <__aeabi_dmul+0x166>
 800285c:	4656      	mov	r6, sl
 800285e:	3b08      	subs	r3, #8
 8002860:	2200      	movs	r2, #0
 8002862:	409e      	lsls	r6, r3
 8002864:	e689      	b.n	800257a <__aeabi_dmul+0x17a>
 8002866:	f000 fd25 	bl	80032b4 <__clzsi2>
 800286a:	0001      	movs	r1, r0
 800286c:	0002      	movs	r2, r0
 800286e:	3115      	adds	r1, #21
 8002870:	3220      	adds	r2, #32
 8002872:	291c      	cmp	r1, #28
 8002874:	dc00      	bgt.n	8002878 <__aeabi_dmul+0x478>
 8002876:	e64e      	b.n	8002516 <__aeabi_dmul+0x116>
 8002878:	0034      	movs	r4, r6
 800287a:	3808      	subs	r0, #8
 800287c:	2500      	movs	r5, #0
 800287e:	4084      	lsls	r4, r0
 8002880:	e653      	b.n	800252a <__aeabi_dmul+0x12a>
 8002882:	9b00      	ldr	r3, [sp, #0]
 8002884:	469c      	mov	ip, r3
 8002886:	e741      	b.n	800270c <__aeabi_dmul+0x30c>
 8002888:	4912      	ldr	r1, [pc, #72]	; (80028d4 <__aeabi_dmul+0x4d4>)
 800288a:	0022      	movs	r2, r4
 800288c:	4461      	add	r1, ip
 800288e:	002e      	movs	r6, r5
 8002890:	408d      	lsls	r5, r1
 8002892:	408a      	lsls	r2, r1
 8002894:	40c6      	lsrs	r6, r0
 8002896:	1e69      	subs	r1, r5, #1
 8002898:	418d      	sbcs	r5, r1
 800289a:	4332      	orrs	r2, r6
 800289c:	432a      	orrs	r2, r5
 800289e:	40c4      	lsrs	r4, r0
 80028a0:	0753      	lsls	r3, r2, #29
 80028a2:	d0b6      	beq.n	8002812 <__aeabi_dmul+0x412>
 80028a4:	210f      	movs	r1, #15
 80028a6:	4011      	ands	r1, r2
 80028a8:	2904      	cmp	r1, #4
 80028aa:	d1ac      	bne.n	8002806 <__aeabi_dmul+0x406>
 80028ac:	e7b1      	b.n	8002812 <__aeabi_dmul+0x412>
 80028ae:	0765      	lsls	r5, r4, #29
 80028b0:	0264      	lsls	r4, r4, #9
 80028b2:	0b24      	lsrs	r4, r4, #12
 80028b4:	08d2      	lsrs	r2, r2, #3
 80028b6:	4315      	orrs	r5, r2
 80028b8:	2200      	movs	r2, #0
 80028ba:	e611      	b.n	80024e0 <__aeabi_dmul+0xe0>
 80028bc:	2280      	movs	r2, #128	; 0x80
 80028be:	0312      	lsls	r2, r2, #12
 80028c0:	4314      	orrs	r4, r2
 80028c2:	0324      	lsls	r4, r4, #12
 80028c4:	4a01      	ldr	r2, [pc, #4]	; (80028cc <__aeabi_dmul+0x4cc>)
 80028c6:	0b24      	lsrs	r4, r4, #12
 80028c8:	e60a      	b.n	80024e0 <__aeabi_dmul+0xe0>
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	000007ff 	.word	0x000007ff
 80028d0:	0000043e 	.word	0x0000043e
 80028d4:	0000041e 	.word	0x0000041e

080028d8 <__aeabi_dsub>:
 80028d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028da:	4657      	mov	r7, sl
 80028dc:	464e      	mov	r6, r9
 80028de:	4645      	mov	r5, r8
 80028e0:	46de      	mov	lr, fp
 80028e2:	0004      	movs	r4, r0
 80028e4:	b5e0      	push	{r5, r6, r7, lr}
 80028e6:	001f      	movs	r7, r3
 80028e8:	0010      	movs	r0, r2
 80028ea:	030b      	lsls	r3, r1, #12
 80028ec:	0f62      	lsrs	r2, r4, #29
 80028ee:	004e      	lsls	r6, r1, #1
 80028f0:	0fcd      	lsrs	r5, r1, #31
 80028f2:	0a5b      	lsrs	r3, r3, #9
 80028f4:	0339      	lsls	r1, r7, #12
 80028f6:	4313      	orrs	r3, r2
 80028f8:	0a49      	lsrs	r1, r1, #9
 80028fa:	00e2      	lsls	r2, r4, #3
 80028fc:	0f44      	lsrs	r4, r0, #29
 80028fe:	4321      	orrs	r1, r4
 8002900:	4cc2      	ldr	r4, [pc, #776]	; (8002c0c <__aeabi_dsub+0x334>)
 8002902:	4691      	mov	r9, r2
 8002904:	4692      	mov	sl, r2
 8002906:	00c0      	lsls	r0, r0, #3
 8002908:	007a      	lsls	r2, r7, #1
 800290a:	4680      	mov	r8, r0
 800290c:	0d76      	lsrs	r6, r6, #21
 800290e:	0d52      	lsrs	r2, r2, #21
 8002910:	0fff      	lsrs	r7, r7, #31
 8002912:	42a2      	cmp	r2, r4
 8002914:	d100      	bne.n	8002918 <__aeabi_dsub+0x40>
 8002916:	e0b4      	b.n	8002a82 <__aeabi_dsub+0x1aa>
 8002918:	2401      	movs	r4, #1
 800291a:	4067      	eors	r7, r4
 800291c:	46bb      	mov	fp, r7
 800291e:	42bd      	cmp	r5, r7
 8002920:	d100      	bne.n	8002924 <__aeabi_dsub+0x4c>
 8002922:	e088      	b.n	8002a36 <__aeabi_dsub+0x15e>
 8002924:	1ab4      	subs	r4, r6, r2
 8002926:	46a4      	mov	ip, r4
 8002928:	2c00      	cmp	r4, #0
 800292a:	dc00      	bgt.n	800292e <__aeabi_dsub+0x56>
 800292c:	e0b2      	b.n	8002a94 <__aeabi_dsub+0x1bc>
 800292e:	2a00      	cmp	r2, #0
 8002930:	d100      	bne.n	8002934 <__aeabi_dsub+0x5c>
 8002932:	e0c5      	b.n	8002ac0 <__aeabi_dsub+0x1e8>
 8002934:	4ab5      	ldr	r2, [pc, #724]	; (8002c0c <__aeabi_dsub+0x334>)
 8002936:	4296      	cmp	r6, r2
 8002938:	d100      	bne.n	800293c <__aeabi_dsub+0x64>
 800293a:	e28b      	b.n	8002e54 <__aeabi_dsub+0x57c>
 800293c:	2280      	movs	r2, #128	; 0x80
 800293e:	0412      	lsls	r2, r2, #16
 8002940:	4311      	orrs	r1, r2
 8002942:	4662      	mov	r2, ip
 8002944:	2a38      	cmp	r2, #56	; 0x38
 8002946:	dd00      	ble.n	800294a <__aeabi_dsub+0x72>
 8002948:	e1a1      	b.n	8002c8e <__aeabi_dsub+0x3b6>
 800294a:	2a1f      	cmp	r2, #31
 800294c:	dd00      	ble.n	8002950 <__aeabi_dsub+0x78>
 800294e:	e216      	b.n	8002d7e <__aeabi_dsub+0x4a6>
 8002950:	2720      	movs	r7, #32
 8002952:	000c      	movs	r4, r1
 8002954:	1abf      	subs	r7, r7, r2
 8002956:	40bc      	lsls	r4, r7
 8002958:	0002      	movs	r2, r0
 800295a:	46a0      	mov	r8, r4
 800295c:	4664      	mov	r4, ip
 800295e:	40b8      	lsls	r0, r7
 8002960:	40e2      	lsrs	r2, r4
 8002962:	4644      	mov	r4, r8
 8002964:	4314      	orrs	r4, r2
 8002966:	0002      	movs	r2, r0
 8002968:	1e50      	subs	r0, r2, #1
 800296a:	4182      	sbcs	r2, r0
 800296c:	4660      	mov	r0, ip
 800296e:	40c1      	lsrs	r1, r0
 8002970:	4322      	orrs	r2, r4
 8002972:	1a5b      	subs	r3, r3, r1
 8002974:	4649      	mov	r1, r9
 8002976:	1a8c      	subs	r4, r1, r2
 8002978:	45a1      	cmp	r9, r4
 800297a:	4192      	sbcs	r2, r2
 800297c:	4252      	negs	r2, r2
 800297e:	1a9b      	subs	r3, r3, r2
 8002980:	4698      	mov	r8, r3
 8002982:	4643      	mov	r3, r8
 8002984:	021b      	lsls	r3, r3, #8
 8002986:	d400      	bmi.n	800298a <__aeabi_dsub+0xb2>
 8002988:	e117      	b.n	8002bba <__aeabi_dsub+0x2e2>
 800298a:	4643      	mov	r3, r8
 800298c:	025b      	lsls	r3, r3, #9
 800298e:	0a5b      	lsrs	r3, r3, #9
 8002990:	4698      	mov	r8, r3
 8002992:	4643      	mov	r3, r8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d100      	bne.n	800299a <__aeabi_dsub+0xc2>
 8002998:	e16c      	b.n	8002c74 <__aeabi_dsub+0x39c>
 800299a:	4640      	mov	r0, r8
 800299c:	f000 fc8a 	bl	80032b4 <__clzsi2>
 80029a0:	0002      	movs	r2, r0
 80029a2:	3a08      	subs	r2, #8
 80029a4:	2120      	movs	r1, #32
 80029a6:	0020      	movs	r0, r4
 80029a8:	4643      	mov	r3, r8
 80029aa:	1a89      	subs	r1, r1, r2
 80029ac:	4093      	lsls	r3, r2
 80029ae:	40c8      	lsrs	r0, r1
 80029b0:	4094      	lsls	r4, r2
 80029b2:	4303      	orrs	r3, r0
 80029b4:	4296      	cmp	r6, r2
 80029b6:	dd00      	ble.n	80029ba <__aeabi_dsub+0xe2>
 80029b8:	e157      	b.n	8002c6a <__aeabi_dsub+0x392>
 80029ba:	1b96      	subs	r6, r2, r6
 80029bc:	1c71      	adds	r1, r6, #1
 80029be:	291f      	cmp	r1, #31
 80029c0:	dd00      	ble.n	80029c4 <__aeabi_dsub+0xec>
 80029c2:	e1cb      	b.n	8002d5c <__aeabi_dsub+0x484>
 80029c4:	2220      	movs	r2, #32
 80029c6:	0018      	movs	r0, r3
 80029c8:	0026      	movs	r6, r4
 80029ca:	1a52      	subs	r2, r2, r1
 80029cc:	4094      	lsls	r4, r2
 80029ce:	4090      	lsls	r0, r2
 80029d0:	40ce      	lsrs	r6, r1
 80029d2:	40cb      	lsrs	r3, r1
 80029d4:	1e62      	subs	r2, r4, #1
 80029d6:	4194      	sbcs	r4, r2
 80029d8:	4330      	orrs	r0, r6
 80029da:	4698      	mov	r8, r3
 80029dc:	2600      	movs	r6, #0
 80029de:	4304      	orrs	r4, r0
 80029e0:	0763      	lsls	r3, r4, #29
 80029e2:	d009      	beq.n	80029f8 <__aeabi_dsub+0x120>
 80029e4:	230f      	movs	r3, #15
 80029e6:	4023      	ands	r3, r4
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d005      	beq.n	80029f8 <__aeabi_dsub+0x120>
 80029ec:	1d23      	adds	r3, r4, #4
 80029ee:	42a3      	cmp	r3, r4
 80029f0:	41a4      	sbcs	r4, r4
 80029f2:	4264      	negs	r4, r4
 80029f4:	44a0      	add	r8, r4
 80029f6:	001c      	movs	r4, r3
 80029f8:	4643      	mov	r3, r8
 80029fa:	021b      	lsls	r3, r3, #8
 80029fc:	d400      	bmi.n	8002a00 <__aeabi_dsub+0x128>
 80029fe:	e0df      	b.n	8002bc0 <__aeabi_dsub+0x2e8>
 8002a00:	4b82      	ldr	r3, [pc, #520]	; (8002c0c <__aeabi_dsub+0x334>)
 8002a02:	3601      	adds	r6, #1
 8002a04:	429e      	cmp	r6, r3
 8002a06:	d100      	bne.n	8002a0a <__aeabi_dsub+0x132>
 8002a08:	e0fb      	b.n	8002c02 <__aeabi_dsub+0x32a>
 8002a0a:	4642      	mov	r2, r8
 8002a0c:	4b80      	ldr	r3, [pc, #512]	; (8002c10 <__aeabi_dsub+0x338>)
 8002a0e:	08e4      	lsrs	r4, r4, #3
 8002a10:	401a      	ands	r2, r3
 8002a12:	0013      	movs	r3, r2
 8002a14:	0571      	lsls	r1, r6, #21
 8002a16:	0752      	lsls	r2, r2, #29
 8002a18:	025b      	lsls	r3, r3, #9
 8002a1a:	4322      	orrs	r2, r4
 8002a1c:	0b1b      	lsrs	r3, r3, #12
 8002a1e:	0d49      	lsrs	r1, r1, #21
 8002a20:	0509      	lsls	r1, r1, #20
 8002a22:	07ed      	lsls	r5, r5, #31
 8002a24:	4319      	orrs	r1, r3
 8002a26:	4329      	orrs	r1, r5
 8002a28:	0010      	movs	r0, r2
 8002a2a:	bcf0      	pop	{r4, r5, r6, r7}
 8002a2c:	46bb      	mov	fp, r7
 8002a2e:	46b2      	mov	sl, r6
 8002a30:	46a9      	mov	r9, r5
 8002a32:	46a0      	mov	r8, r4
 8002a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a36:	1ab4      	subs	r4, r6, r2
 8002a38:	46a4      	mov	ip, r4
 8002a3a:	2c00      	cmp	r4, #0
 8002a3c:	dd58      	ble.n	8002af0 <__aeabi_dsub+0x218>
 8002a3e:	2a00      	cmp	r2, #0
 8002a40:	d100      	bne.n	8002a44 <__aeabi_dsub+0x16c>
 8002a42:	e09e      	b.n	8002b82 <__aeabi_dsub+0x2aa>
 8002a44:	4a71      	ldr	r2, [pc, #452]	; (8002c0c <__aeabi_dsub+0x334>)
 8002a46:	4296      	cmp	r6, r2
 8002a48:	d100      	bne.n	8002a4c <__aeabi_dsub+0x174>
 8002a4a:	e13b      	b.n	8002cc4 <__aeabi_dsub+0x3ec>
 8002a4c:	2280      	movs	r2, #128	; 0x80
 8002a4e:	0412      	lsls	r2, r2, #16
 8002a50:	4311      	orrs	r1, r2
 8002a52:	4662      	mov	r2, ip
 8002a54:	2a38      	cmp	r2, #56	; 0x38
 8002a56:	dd00      	ble.n	8002a5a <__aeabi_dsub+0x182>
 8002a58:	e0c1      	b.n	8002bde <__aeabi_dsub+0x306>
 8002a5a:	2a1f      	cmp	r2, #31
 8002a5c:	dc00      	bgt.n	8002a60 <__aeabi_dsub+0x188>
 8002a5e:	e1bb      	b.n	8002dd8 <__aeabi_dsub+0x500>
 8002a60:	000c      	movs	r4, r1
 8002a62:	3a20      	subs	r2, #32
 8002a64:	40d4      	lsrs	r4, r2
 8002a66:	0022      	movs	r2, r4
 8002a68:	4664      	mov	r4, ip
 8002a6a:	2c20      	cmp	r4, #32
 8002a6c:	d004      	beq.n	8002a78 <__aeabi_dsub+0x1a0>
 8002a6e:	2740      	movs	r7, #64	; 0x40
 8002a70:	1b3f      	subs	r7, r7, r4
 8002a72:	40b9      	lsls	r1, r7
 8002a74:	4308      	orrs	r0, r1
 8002a76:	4680      	mov	r8, r0
 8002a78:	4644      	mov	r4, r8
 8002a7a:	1e61      	subs	r1, r4, #1
 8002a7c:	418c      	sbcs	r4, r1
 8002a7e:	4314      	orrs	r4, r2
 8002a80:	e0b1      	b.n	8002be6 <__aeabi_dsub+0x30e>
 8002a82:	000c      	movs	r4, r1
 8002a84:	4304      	orrs	r4, r0
 8002a86:	d02a      	beq.n	8002ade <__aeabi_dsub+0x206>
 8002a88:	46bb      	mov	fp, r7
 8002a8a:	42bd      	cmp	r5, r7
 8002a8c:	d02d      	beq.n	8002aea <__aeabi_dsub+0x212>
 8002a8e:	4c61      	ldr	r4, [pc, #388]	; (8002c14 <__aeabi_dsub+0x33c>)
 8002a90:	46a4      	mov	ip, r4
 8002a92:	44b4      	add	ip, r6
 8002a94:	4664      	mov	r4, ip
 8002a96:	2c00      	cmp	r4, #0
 8002a98:	d05c      	beq.n	8002b54 <__aeabi_dsub+0x27c>
 8002a9a:	1b94      	subs	r4, r2, r6
 8002a9c:	46a4      	mov	ip, r4
 8002a9e:	2e00      	cmp	r6, #0
 8002aa0:	d000      	beq.n	8002aa4 <__aeabi_dsub+0x1cc>
 8002aa2:	e115      	b.n	8002cd0 <__aeabi_dsub+0x3f8>
 8002aa4:	464d      	mov	r5, r9
 8002aa6:	431d      	orrs	r5, r3
 8002aa8:	d100      	bne.n	8002aac <__aeabi_dsub+0x1d4>
 8002aaa:	e1c3      	b.n	8002e34 <__aeabi_dsub+0x55c>
 8002aac:	1e65      	subs	r5, r4, #1
 8002aae:	2c01      	cmp	r4, #1
 8002ab0:	d100      	bne.n	8002ab4 <__aeabi_dsub+0x1dc>
 8002ab2:	e20c      	b.n	8002ece <__aeabi_dsub+0x5f6>
 8002ab4:	4e55      	ldr	r6, [pc, #340]	; (8002c0c <__aeabi_dsub+0x334>)
 8002ab6:	42b4      	cmp	r4, r6
 8002ab8:	d100      	bne.n	8002abc <__aeabi_dsub+0x1e4>
 8002aba:	e1f8      	b.n	8002eae <__aeabi_dsub+0x5d6>
 8002abc:	46ac      	mov	ip, r5
 8002abe:	e10e      	b.n	8002cde <__aeabi_dsub+0x406>
 8002ac0:	000a      	movs	r2, r1
 8002ac2:	4302      	orrs	r2, r0
 8002ac4:	d100      	bne.n	8002ac8 <__aeabi_dsub+0x1f0>
 8002ac6:	e136      	b.n	8002d36 <__aeabi_dsub+0x45e>
 8002ac8:	0022      	movs	r2, r4
 8002aca:	3a01      	subs	r2, #1
 8002acc:	2c01      	cmp	r4, #1
 8002ace:	d100      	bne.n	8002ad2 <__aeabi_dsub+0x1fa>
 8002ad0:	e1c6      	b.n	8002e60 <__aeabi_dsub+0x588>
 8002ad2:	4c4e      	ldr	r4, [pc, #312]	; (8002c0c <__aeabi_dsub+0x334>)
 8002ad4:	45a4      	cmp	ip, r4
 8002ad6:	d100      	bne.n	8002ada <__aeabi_dsub+0x202>
 8002ad8:	e0f4      	b.n	8002cc4 <__aeabi_dsub+0x3ec>
 8002ada:	4694      	mov	ip, r2
 8002adc:	e731      	b.n	8002942 <__aeabi_dsub+0x6a>
 8002ade:	2401      	movs	r4, #1
 8002ae0:	4067      	eors	r7, r4
 8002ae2:	46bb      	mov	fp, r7
 8002ae4:	42bd      	cmp	r5, r7
 8002ae6:	d000      	beq.n	8002aea <__aeabi_dsub+0x212>
 8002ae8:	e71c      	b.n	8002924 <__aeabi_dsub+0x4c>
 8002aea:	4c4a      	ldr	r4, [pc, #296]	; (8002c14 <__aeabi_dsub+0x33c>)
 8002aec:	46a4      	mov	ip, r4
 8002aee:	44b4      	add	ip, r6
 8002af0:	4664      	mov	r4, ip
 8002af2:	2c00      	cmp	r4, #0
 8002af4:	d100      	bne.n	8002af8 <__aeabi_dsub+0x220>
 8002af6:	e0cf      	b.n	8002c98 <__aeabi_dsub+0x3c0>
 8002af8:	1b94      	subs	r4, r2, r6
 8002afa:	46a4      	mov	ip, r4
 8002afc:	2e00      	cmp	r6, #0
 8002afe:	d100      	bne.n	8002b02 <__aeabi_dsub+0x22a>
 8002b00:	e15c      	b.n	8002dbc <__aeabi_dsub+0x4e4>
 8002b02:	4e42      	ldr	r6, [pc, #264]	; (8002c0c <__aeabi_dsub+0x334>)
 8002b04:	42b2      	cmp	r2, r6
 8002b06:	d100      	bne.n	8002b0a <__aeabi_dsub+0x232>
 8002b08:	e1ec      	b.n	8002ee4 <__aeabi_dsub+0x60c>
 8002b0a:	2680      	movs	r6, #128	; 0x80
 8002b0c:	0436      	lsls	r6, r6, #16
 8002b0e:	4333      	orrs	r3, r6
 8002b10:	4664      	mov	r4, ip
 8002b12:	2c38      	cmp	r4, #56	; 0x38
 8002b14:	dd00      	ble.n	8002b18 <__aeabi_dsub+0x240>
 8002b16:	e1b3      	b.n	8002e80 <__aeabi_dsub+0x5a8>
 8002b18:	2c1f      	cmp	r4, #31
 8002b1a:	dd00      	ble.n	8002b1e <__aeabi_dsub+0x246>
 8002b1c:	e238      	b.n	8002f90 <__aeabi_dsub+0x6b8>
 8002b1e:	2620      	movs	r6, #32
 8002b20:	1b36      	subs	r6, r6, r4
 8002b22:	001c      	movs	r4, r3
 8002b24:	40b4      	lsls	r4, r6
 8002b26:	464f      	mov	r7, r9
 8002b28:	46a0      	mov	r8, r4
 8002b2a:	4664      	mov	r4, ip
 8002b2c:	40e7      	lsrs	r7, r4
 8002b2e:	4644      	mov	r4, r8
 8002b30:	433c      	orrs	r4, r7
 8002b32:	464f      	mov	r7, r9
 8002b34:	40b7      	lsls	r7, r6
 8002b36:	003e      	movs	r6, r7
 8002b38:	1e77      	subs	r7, r6, #1
 8002b3a:	41be      	sbcs	r6, r7
 8002b3c:	4334      	orrs	r4, r6
 8002b3e:	4666      	mov	r6, ip
 8002b40:	40f3      	lsrs	r3, r6
 8002b42:	18c9      	adds	r1, r1, r3
 8002b44:	1824      	adds	r4, r4, r0
 8002b46:	4284      	cmp	r4, r0
 8002b48:	419b      	sbcs	r3, r3
 8002b4a:	425b      	negs	r3, r3
 8002b4c:	4698      	mov	r8, r3
 8002b4e:	0016      	movs	r6, r2
 8002b50:	4488      	add	r8, r1
 8002b52:	e04e      	b.n	8002bf2 <__aeabi_dsub+0x31a>
 8002b54:	4a30      	ldr	r2, [pc, #192]	; (8002c18 <__aeabi_dsub+0x340>)
 8002b56:	1c74      	adds	r4, r6, #1
 8002b58:	4214      	tst	r4, r2
 8002b5a:	d000      	beq.n	8002b5e <__aeabi_dsub+0x286>
 8002b5c:	e0d6      	b.n	8002d0c <__aeabi_dsub+0x434>
 8002b5e:	464a      	mov	r2, r9
 8002b60:	431a      	orrs	r2, r3
 8002b62:	2e00      	cmp	r6, #0
 8002b64:	d000      	beq.n	8002b68 <__aeabi_dsub+0x290>
 8002b66:	e15b      	b.n	8002e20 <__aeabi_dsub+0x548>
 8002b68:	2a00      	cmp	r2, #0
 8002b6a:	d100      	bne.n	8002b6e <__aeabi_dsub+0x296>
 8002b6c:	e1a5      	b.n	8002eba <__aeabi_dsub+0x5e2>
 8002b6e:	000a      	movs	r2, r1
 8002b70:	4302      	orrs	r2, r0
 8002b72:	d000      	beq.n	8002b76 <__aeabi_dsub+0x29e>
 8002b74:	e1bb      	b.n	8002eee <__aeabi_dsub+0x616>
 8002b76:	464a      	mov	r2, r9
 8002b78:	0759      	lsls	r1, r3, #29
 8002b7a:	08d2      	lsrs	r2, r2, #3
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	08db      	lsrs	r3, r3, #3
 8002b80:	e027      	b.n	8002bd2 <__aeabi_dsub+0x2fa>
 8002b82:	000a      	movs	r2, r1
 8002b84:	4302      	orrs	r2, r0
 8002b86:	d100      	bne.n	8002b8a <__aeabi_dsub+0x2b2>
 8002b88:	e174      	b.n	8002e74 <__aeabi_dsub+0x59c>
 8002b8a:	0022      	movs	r2, r4
 8002b8c:	3a01      	subs	r2, #1
 8002b8e:	2c01      	cmp	r4, #1
 8002b90:	d005      	beq.n	8002b9e <__aeabi_dsub+0x2c6>
 8002b92:	4c1e      	ldr	r4, [pc, #120]	; (8002c0c <__aeabi_dsub+0x334>)
 8002b94:	45a4      	cmp	ip, r4
 8002b96:	d100      	bne.n	8002b9a <__aeabi_dsub+0x2c2>
 8002b98:	e094      	b.n	8002cc4 <__aeabi_dsub+0x3ec>
 8002b9a:	4694      	mov	ip, r2
 8002b9c:	e759      	b.n	8002a52 <__aeabi_dsub+0x17a>
 8002b9e:	4448      	add	r0, r9
 8002ba0:	4548      	cmp	r0, r9
 8002ba2:	4192      	sbcs	r2, r2
 8002ba4:	185b      	adds	r3, r3, r1
 8002ba6:	4698      	mov	r8, r3
 8002ba8:	0004      	movs	r4, r0
 8002baa:	4252      	negs	r2, r2
 8002bac:	4490      	add	r8, r2
 8002bae:	4643      	mov	r3, r8
 8002bb0:	2602      	movs	r6, #2
 8002bb2:	021b      	lsls	r3, r3, #8
 8002bb4:	d500      	bpl.n	8002bb8 <__aeabi_dsub+0x2e0>
 8002bb6:	e0c4      	b.n	8002d42 <__aeabi_dsub+0x46a>
 8002bb8:	3e01      	subs	r6, #1
 8002bba:	0763      	lsls	r3, r4, #29
 8002bbc:	d000      	beq.n	8002bc0 <__aeabi_dsub+0x2e8>
 8002bbe:	e711      	b.n	80029e4 <__aeabi_dsub+0x10c>
 8002bc0:	4643      	mov	r3, r8
 8002bc2:	46b4      	mov	ip, r6
 8002bc4:	0759      	lsls	r1, r3, #29
 8002bc6:	08e2      	lsrs	r2, r4, #3
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	08db      	lsrs	r3, r3, #3
 8002bcc:	490f      	ldr	r1, [pc, #60]	; (8002c0c <__aeabi_dsub+0x334>)
 8002bce:	458c      	cmp	ip, r1
 8002bd0:	d040      	beq.n	8002c54 <__aeabi_dsub+0x37c>
 8002bd2:	4661      	mov	r1, ip
 8002bd4:	031b      	lsls	r3, r3, #12
 8002bd6:	0549      	lsls	r1, r1, #21
 8002bd8:	0b1b      	lsrs	r3, r3, #12
 8002bda:	0d49      	lsrs	r1, r1, #21
 8002bdc:	e720      	b.n	8002a20 <__aeabi_dsub+0x148>
 8002bde:	4301      	orrs	r1, r0
 8002be0:	000c      	movs	r4, r1
 8002be2:	1e61      	subs	r1, r4, #1
 8002be4:	418c      	sbcs	r4, r1
 8002be6:	444c      	add	r4, r9
 8002be8:	454c      	cmp	r4, r9
 8002bea:	4192      	sbcs	r2, r2
 8002bec:	4252      	negs	r2, r2
 8002bee:	4690      	mov	r8, r2
 8002bf0:	4498      	add	r8, r3
 8002bf2:	4643      	mov	r3, r8
 8002bf4:	021b      	lsls	r3, r3, #8
 8002bf6:	d5e0      	bpl.n	8002bba <__aeabi_dsub+0x2e2>
 8002bf8:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <__aeabi_dsub+0x334>)
 8002bfa:	3601      	adds	r6, #1
 8002bfc:	429e      	cmp	r6, r3
 8002bfe:	d000      	beq.n	8002c02 <__aeabi_dsub+0x32a>
 8002c00:	e09f      	b.n	8002d42 <__aeabi_dsub+0x46a>
 8002c02:	0031      	movs	r1, r6
 8002c04:	2300      	movs	r3, #0
 8002c06:	2200      	movs	r2, #0
 8002c08:	e70a      	b.n	8002a20 <__aeabi_dsub+0x148>
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	000007ff 	.word	0x000007ff
 8002c10:	ff7fffff 	.word	0xff7fffff
 8002c14:	fffff801 	.word	0xfffff801
 8002c18:	000007fe 	.word	0x000007fe
 8002c1c:	2a00      	cmp	r2, #0
 8002c1e:	d100      	bne.n	8002c22 <__aeabi_dsub+0x34a>
 8002c20:	e160      	b.n	8002ee4 <__aeabi_dsub+0x60c>
 8002c22:	000a      	movs	r2, r1
 8002c24:	4302      	orrs	r2, r0
 8002c26:	d04d      	beq.n	8002cc4 <__aeabi_dsub+0x3ec>
 8002c28:	464a      	mov	r2, r9
 8002c2a:	075c      	lsls	r4, r3, #29
 8002c2c:	08d2      	lsrs	r2, r2, #3
 8002c2e:	4322      	orrs	r2, r4
 8002c30:	2480      	movs	r4, #128	; 0x80
 8002c32:	08db      	lsrs	r3, r3, #3
 8002c34:	0324      	lsls	r4, r4, #12
 8002c36:	4223      	tst	r3, r4
 8002c38:	d007      	beq.n	8002c4a <__aeabi_dsub+0x372>
 8002c3a:	08ce      	lsrs	r6, r1, #3
 8002c3c:	4226      	tst	r6, r4
 8002c3e:	d104      	bne.n	8002c4a <__aeabi_dsub+0x372>
 8002c40:	465d      	mov	r5, fp
 8002c42:	0033      	movs	r3, r6
 8002c44:	08c2      	lsrs	r2, r0, #3
 8002c46:	0749      	lsls	r1, r1, #29
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	0f51      	lsrs	r1, r2, #29
 8002c4c:	00d2      	lsls	r2, r2, #3
 8002c4e:	08d2      	lsrs	r2, r2, #3
 8002c50:	0749      	lsls	r1, r1, #29
 8002c52:	430a      	orrs	r2, r1
 8002c54:	0011      	movs	r1, r2
 8002c56:	4319      	orrs	r1, r3
 8002c58:	d100      	bne.n	8002c5c <__aeabi_dsub+0x384>
 8002c5a:	e1c8      	b.n	8002fee <__aeabi_dsub+0x716>
 8002c5c:	2180      	movs	r1, #128	; 0x80
 8002c5e:	0309      	lsls	r1, r1, #12
 8002c60:	430b      	orrs	r3, r1
 8002c62:	031b      	lsls	r3, r3, #12
 8002c64:	49d5      	ldr	r1, [pc, #852]	; (8002fbc <__aeabi_dsub+0x6e4>)
 8002c66:	0b1b      	lsrs	r3, r3, #12
 8002c68:	e6da      	b.n	8002a20 <__aeabi_dsub+0x148>
 8002c6a:	49d5      	ldr	r1, [pc, #852]	; (8002fc0 <__aeabi_dsub+0x6e8>)
 8002c6c:	1ab6      	subs	r6, r6, r2
 8002c6e:	400b      	ands	r3, r1
 8002c70:	4698      	mov	r8, r3
 8002c72:	e6b5      	b.n	80029e0 <__aeabi_dsub+0x108>
 8002c74:	0020      	movs	r0, r4
 8002c76:	f000 fb1d 	bl	80032b4 <__clzsi2>
 8002c7a:	0002      	movs	r2, r0
 8002c7c:	3218      	adds	r2, #24
 8002c7e:	2a1f      	cmp	r2, #31
 8002c80:	dc00      	bgt.n	8002c84 <__aeabi_dsub+0x3ac>
 8002c82:	e68f      	b.n	80029a4 <__aeabi_dsub+0xcc>
 8002c84:	0023      	movs	r3, r4
 8002c86:	3808      	subs	r0, #8
 8002c88:	4083      	lsls	r3, r0
 8002c8a:	2400      	movs	r4, #0
 8002c8c:	e692      	b.n	80029b4 <__aeabi_dsub+0xdc>
 8002c8e:	4308      	orrs	r0, r1
 8002c90:	0002      	movs	r2, r0
 8002c92:	1e50      	subs	r0, r2, #1
 8002c94:	4182      	sbcs	r2, r0
 8002c96:	e66d      	b.n	8002974 <__aeabi_dsub+0x9c>
 8002c98:	4cca      	ldr	r4, [pc, #808]	; (8002fc4 <__aeabi_dsub+0x6ec>)
 8002c9a:	1c72      	adds	r2, r6, #1
 8002c9c:	4222      	tst	r2, r4
 8002c9e:	d000      	beq.n	8002ca2 <__aeabi_dsub+0x3ca>
 8002ca0:	e0ad      	b.n	8002dfe <__aeabi_dsub+0x526>
 8002ca2:	464a      	mov	r2, r9
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	2e00      	cmp	r6, #0
 8002ca8:	d1b8      	bne.n	8002c1c <__aeabi_dsub+0x344>
 8002caa:	2a00      	cmp	r2, #0
 8002cac:	d100      	bne.n	8002cb0 <__aeabi_dsub+0x3d8>
 8002cae:	e158      	b.n	8002f62 <__aeabi_dsub+0x68a>
 8002cb0:	000a      	movs	r2, r1
 8002cb2:	4302      	orrs	r2, r0
 8002cb4:	d000      	beq.n	8002cb8 <__aeabi_dsub+0x3e0>
 8002cb6:	e159      	b.n	8002f6c <__aeabi_dsub+0x694>
 8002cb8:	464a      	mov	r2, r9
 8002cba:	0759      	lsls	r1, r3, #29
 8002cbc:	08d2      	lsrs	r2, r2, #3
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	08db      	lsrs	r3, r3, #3
 8002cc2:	e786      	b.n	8002bd2 <__aeabi_dsub+0x2fa>
 8002cc4:	464a      	mov	r2, r9
 8002cc6:	0759      	lsls	r1, r3, #29
 8002cc8:	08d2      	lsrs	r2, r2, #3
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	08db      	lsrs	r3, r3, #3
 8002cce:	e7c1      	b.n	8002c54 <__aeabi_dsub+0x37c>
 8002cd0:	4dba      	ldr	r5, [pc, #744]	; (8002fbc <__aeabi_dsub+0x6e4>)
 8002cd2:	42aa      	cmp	r2, r5
 8002cd4:	d100      	bne.n	8002cd8 <__aeabi_dsub+0x400>
 8002cd6:	e11e      	b.n	8002f16 <__aeabi_dsub+0x63e>
 8002cd8:	2580      	movs	r5, #128	; 0x80
 8002cda:	042d      	lsls	r5, r5, #16
 8002cdc:	432b      	orrs	r3, r5
 8002cde:	4664      	mov	r4, ip
 8002ce0:	2c38      	cmp	r4, #56	; 0x38
 8002ce2:	dc5d      	bgt.n	8002da0 <__aeabi_dsub+0x4c8>
 8002ce4:	2c1f      	cmp	r4, #31
 8002ce6:	dd00      	ble.n	8002cea <__aeabi_dsub+0x412>
 8002ce8:	e0d0      	b.n	8002e8c <__aeabi_dsub+0x5b4>
 8002cea:	2520      	movs	r5, #32
 8002cec:	4667      	mov	r7, ip
 8002cee:	1b2d      	subs	r5, r5, r4
 8002cf0:	464e      	mov	r6, r9
 8002cf2:	001c      	movs	r4, r3
 8002cf4:	40fe      	lsrs	r6, r7
 8002cf6:	40ac      	lsls	r4, r5
 8002cf8:	4334      	orrs	r4, r6
 8002cfa:	464e      	mov	r6, r9
 8002cfc:	40ae      	lsls	r6, r5
 8002cfe:	0035      	movs	r5, r6
 8002d00:	40fb      	lsrs	r3, r7
 8002d02:	1e6e      	subs	r6, r5, #1
 8002d04:	41b5      	sbcs	r5, r6
 8002d06:	1ac9      	subs	r1, r1, r3
 8002d08:	432c      	orrs	r4, r5
 8002d0a:	e04e      	b.n	8002daa <__aeabi_dsub+0x4d2>
 8002d0c:	464a      	mov	r2, r9
 8002d0e:	1a14      	subs	r4, r2, r0
 8002d10:	45a1      	cmp	r9, r4
 8002d12:	4192      	sbcs	r2, r2
 8002d14:	4252      	negs	r2, r2
 8002d16:	4690      	mov	r8, r2
 8002d18:	1a5f      	subs	r7, r3, r1
 8002d1a:	003a      	movs	r2, r7
 8002d1c:	4647      	mov	r7, r8
 8002d1e:	1bd2      	subs	r2, r2, r7
 8002d20:	4690      	mov	r8, r2
 8002d22:	0212      	lsls	r2, r2, #8
 8002d24:	d500      	bpl.n	8002d28 <__aeabi_dsub+0x450>
 8002d26:	e08b      	b.n	8002e40 <__aeabi_dsub+0x568>
 8002d28:	4642      	mov	r2, r8
 8002d2a:	4322      	orrs	r2, r4
 8002d2c:	d000      	beq.n	8002d30 <__aeabi_dsub+0x458>
 8002d2e:	e630      	b.n	8002992 <__aeabi_dsub+0xba>
 8002d30:	2300      	movs	r3, #0
 8002d32:	2500      	movs	r5, #0
 8002d34:	e74d      	b.n	8002bd2 <__aeabi_dsub+0x2fa>
 8002d36:	464a      	mov	r2, r9
 8002d38:	0759      	lsls	r1, r3, #29
 8002d3a:	08d2      	lsrs	r2, r2, #3
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	08db      	lsrs	r3, r3, #3
 8002d40:	e744      	b.n	8002bcc <__aeabi_dsub+0x2f4>
 8002d42:	4642      	mov	r2, r8
 8002d44:	4b9e      	ldr	r3, [pc, #632]	; (8002fc0 <__aeabi_dsub+0x6e8>)
 8002d46:	0861      	lsrs	r1, r4, #1
 8002d48:	401a      	ands	r2, r3
 8002d4a:	0013      	movs	r3, r2
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	4014      	ands	r4, r2
 8002d50:	430c      	orrs	r4, r1
 8002d52:	07da      	lsls	r2, r3, #31
 8002d54:	085b      	lsrs	r3, r3, #1
 8002d56:	4698      	mov	r8, r3
 8002d58:	4314      	orrs	r4, r2
 8002d5a:	e641      	b.n	80029e0 <__aeabi_dsub+0x108>
 8002d5c:	001a      	movs	r2, r3
 8002d5e:	3e1f      	subs	r6, #31
 8002d60:	40f2      	lsrs	r2, r6
 8002d62:	0016      	movs	r6, r2
 8002d64:	2920      	cmp	r1, #32
 8002d66:	d003      	beq.n	8002d70 <__aeabi_dsub+0x498>
 8002d68:	2240      	movs	r2, #64	; 0x40
 8002d6a:	1a51      	subs	r1, r2, r1
 8002d6c:	408b      	lsls	r3, r1
 8002d6e:	431c      	orrs	r4, r3
 8002d70:	1e62      	subs	r2, r4, #1
 8002d72:	4194      	sbcs	r4, r2
 8002d74:	2300      	movs	r3, #0
 8002d76:	4334      	orrs	r4, r6
 8002d78:	4698      	mov	r8, r3
 8002d7a:	2600      	movs	r6, #0
 8002d7c:	e71d      	b.n	8002bba <__aeabi_dsub+0x2e2>
 8002d7e:	000c      	movs	r4, r1
 8002d80:	3a20      	subs	r2, #32
 8002d82:	40d4      	lsrs	r4, r2
 8002d84:	0022      	movs	r2, r4
 8002d86:	4664      	mov	r4, ip
 8002d88:	2c20      	cmp	r4, #32
 8002d8a:	d004      	beq.n	8002d96 <__aeabi_dsub+0x4be>
 8002d8c:	2740      	movs	r7, #64	; 0x40
 8002d8e:	1b3f      	subs	r7, r7, r4
 8002d90:	40b9      	lsls	r1, r7
 8002d92:	4308      	orrs	r0, r1
 8002d94:	4680      	mov	r8, r0
 8002d96:	4644      	mov	r4, r8
 8002d98:	1e61      	subs	r1, r4, #1
 8002d9a:	418c      	sbcs	r4, r1
 8002d9c:	4322      	orrs	r2, r4
 8002d9e:	e5e9      	b.n	8002974 <__aeabi_dsub+0x9c>
 8002da0:	464c      	mov	r4, r9
 8002da2:	4323      	orrs	r3, r4
 8002da4:	001c      	movs	r4, r3
 8002da6:	1e63      	subs	r3, r4, #1
 8002da8:	419c      	sbcs	r4, r3
 8002daa:	1b04      	subs	r4, r0, r4
 8002dac:	42a0      	cmp	r0, r4
 8002dae:	419b      	sbcs	r3, r3
 8002db0:	425b      	negs	r3, r3
 8002db2:	1acb      	subs	r3, r1, r3
 8002db4:	4698      	mov	r8, r3
 8002db6:	465d      	mov	r5, fp
 8002db8:	0016      	movs	r6, r2
 8002dba:	e5e2      	b.n	8002982 <__aeabi_dsub+0xaa>
 8002dbc:	464e      	mov	r6, r9
 8002dbe:	431e      	orrs	r6, r3
 8002dc0:	d100      	bne.n	8002dc4 <__aeabi_dsub+0x4ec>
 8002dc2:	e0ae      	b.n	8002f22 <__aeabi_dsub+0x64a>
 8002dc4:	1e66      	subs	r6, r4, #1
 8002dc6:	2c01      	cmp	r4, #1
 8002dc8:	d100      	bne.n	8002dcc <__aeabi_dsub+0x4f4>
 8002dca:	e0fd      	b.n	8002fc8 <__aeabi_dsub+0x6f0>
 8002dcc:	4f7b      	ldr	r7, [pc, #492]	; (8002fbc <__aeabi_dsub+0x6e4>)
 8002dce:	42bc      	cmp	r4, r7
 8002dd0:	d100      	bne.n	8002dd4 <__aeabi_dsub+0x4fc>
 8002dd2:	e107      	b.n	8002fe4 <__aeabi_dsub+0x70c>
 8002dd4:	46b4      	mov	ip, r6
 8002dd6:	e69b      	b.n	8002b10 <__aeabi_dsub+0x238>
 8002dd8:	4664      	mov	r4, ip
 8002dda:	2220      	movs	r2, #32
 8002ddc:	1b12      	subs	r2, r2, r4
 8002dde:	000c      	movs	r4, r1
 8002de0:	4094      	lsls	r4, r2
 8002de2:	0007      	movs	r7, r0
 8002de4:	4090      	lsls	r0, r2
 8002de6:	46a0      	mov	r8, r4
 8002de8:	4664      	mov	r4, ip
 8002dea:	1e42      	subs	r2, r0, #1
 8002dec:	4190      	sbcs	r0, r2
 8002dee:	4662      	mov	r2, ip
 8002df0:	40e7      	lsrs	r7, r4
 8002df2:	4644      	mov	r4, r8
 8002df4:	40d1      	lsrs	r1, r2
 8002df6:	433c      	orrs	r4, r7
 8002df8:	4304      	orrs	r4, r0
 8002dfa:	185b      	adds	r3, r3, r1
 8002dfc:	e6f3      	b.n	8002be6 <__aeabi_dsub+0x30e>
 8002dfe:	4c6f      	ldr	r4, [pc, #444]	; (8002fbc <__aeabi_dsub+0x6e4>)
 8002e00:	42a2      	cmp	r2, r4
 8002e02:	d100      	bne.n	8002e06 <__aeabi_dsub+0x52e>
 8002e04:	e0d5      	b.n	8002fb2 <__aeabi_dsub+0x6da>
 8002e06:	4448      	add	r0, r9
 8002e08:	185b      	adds	r3, r3, r1
 8002e0a:	4548      	cmp	r0, r9
 8002e0c:	4189      	sbcs	r1, r1
 8002e0e:	4249      	negs	r1, r1
 8002e10:	185b      	adds	r3, r3, r1
 8002e12:	07dc      	lsls	r4, r3, #31
 8002e14:	0840      	lsrs	r0, r0, #1
 8002e16:	085b      	lsrs	r3, r3, #1
 8002e18:	4698      	mov	r8, r3
 8002e1a:	0016      	movs	r6, r2
 8002e1c:	4304      	orrs	r4, r0
 8002e1e:	e6cc      	b.n	8002bba <__aeabi_dsub+0x2e2>
 8002e20:	2a00      	cmp	r2, #0
 8002e22:	d000      	beq.n	8002e26 <__aeabi_dsub+0x54e>
 8002e24:	e082      	b.n	8002f2c <__aeabi_dsub+0x654>
 8002e26:	000a      	movs	r2, r1
 8002e28:	4302      	orrs	r2, r0
 8002e2a:	d140      	bne.n	8002eae <__aeabi_dsub+0x5d6>
 8002e2c:	2380      	movs	r3, #128	; 0x80
 8002e2e:	2500      	movs	r5, #0
 8002e30:	031b      	lsls	r3, r3, #12
 8002e32:	e713      	b.n	8002c5c <__aeabi_dsub+0x384>
 8002e34:	074b      	lsls	r3, r1, #29
 8002e36:	08c2      	lsrs	r2, r0, #3
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	465d      	mov	r5, fp
 8002e3c:	08cb      	lsrs	r3, r1, #3
 8002e3e:	e6c5      	b.n	8002bcc <__aeabi_dsub+0x2f4>
 8002e40:	464a      	mov	r2, r9
 8002e42:	1a84      	subs	r4, r0, r2
 8002e44:	42a0      	cmp	r0, r4
 8002e46:	4192      	sbcs	r2, r2
 8002e48:	1acb      	subs	r3, r1, r3
 8002e4a:	4252      	negs	r2, r2
 8002e4c:	1a9b      	subs	r3, r3, r2
 8002e4e:	4698      	mov	r8, r3
 8002e50:	465d      	mov	r5, fp
 8002e52:	e59e      	b.n	8002992 <__aeabi_dsub+0xba>
 8002e54:	464a      	mov	r2, r9
 8002e56:	0759      	lsls	r1, r3, #29
 8002e58:	08d2      	lsrs	r2, r2, #3
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	08db      	lsrs	r3, r3, #3
 8002e5e:	e6f9      	b.n	8002c54 <__aeabi_dsub+0x37c>
 8002e60:	464a      	mov	r2, r9
 8002e62:	1a14      	subs	r4, r2, r0
 8002e64:	45a1      	cmp	r9, r4
 8002e66:	4192      	sbcs	r2, r2
 8002e68:	1a5b      	subs	r3, r3, r1
 8002e6a:	4252      	negs	r2, r2
 8002e6c:	1a9b      	subs	r3, r3, r2
 8002e6e:	4698      	mov	r8, r3
 8002e70:	2601      	movs	r6, #1
 8002e72:	e586      	b.n	8002982 <__aeabi_dsub+0xaa>
 8002e74:	464a      	mov	r2, r9
 8002e76:	0759      	lsls	r1, r3, #29
 8002e78:	08d2      	lsrs	r2, r2, #3
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	08db      	lsrs	r3, r3, #3
 8002e7e:	e6a5      	b.n	8002bcc <__aeabi_dsub+0x2f4>
 8002e80:	464c      	mov	r4, r9
 8002e82:	4323      	orrs	r3, r4
 8002e84:	001c      	movs	r4, r3
 8002e86:	1e63      	subs	r3, r4, #1
 8002e88:	419c      	sbcs	r4, r3
 8002e8a:	e65b      	b.n	8002b44 <__aeabi_dsub+0x26c>
 8002e8c:	4665      	mov	r5, ip
 8002e8e:	001e      	movs	r6, r3
 8002e90:	3d20      	subs	r5, #32
 8002e92:	40ee      	lsrs	r6, r5
 8002e94:	2c20      	cmp	r4, #32
 8002e96:	d005      	beq.n	8002ea4 <__aeabi_dsub+0x5cc>
 8002e98:	2540      	movs	r5, #64	; 0x40
 8002e9a:	1b2d      	subs	r5, r5, r4
 8002e9c:	40ab      	lsls	r3, r5
 8002e9e:	464c      	mov	r4, r9
 8002ea0:	431c      	orrs	r4, r3
 8002ea2:	46a2      	mov	sl, r4
 8002ea4:	4654      	mov	r4, sl
 8002ea6:	1e63      	subs	r3, r4, #1
 8002ea8:	419c      	sbcs	r4, r3
 8002eaa:	4334      	orrs	r4, r6
 8002eac:	e77d      	b.n	8002daa <__aeabi_dsub+0x4d2>
 8002eae:	074b      	lsls	r3, r1, #29
 8002eb0:	08c2      	lsrs	r2, r0, #3
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	465d      	mov	r5, fp
 8002eb6:	08cb      	lsrs	r3, r1, #3
 8002eb8:	e6cc      	b.n	8002c54 <__aeabi_dsub+0x37c>
 8002eba:	000a      	movs	r2, r1
 8002ebc:	4302      	orrs	r2, r0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x5ea>
 8002ec0:	e736      	b.n	8002d30 <__aeabi_dsub+0x458>
 8002ec2:	074b      	lsls	r3, r1, #29
 8002ec4:	08c2      	lsrs	r2, r0, #3
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	465d      	mov	r5, fp
 8002eca:	08cb      	lsrs	r3, r1, #3
 8002ecc:	e681      	b.n	8002bd2 <__aeabi_dsub+0x2fa>
 8002ece:	464a      	mov	r2, r9
 8002ed0:	1a84      	subs	r4, r0, r2
 8002ed2:	42a0      	cmp	r0, r4
 8002ed4:	4192      	sbcs	r2, r2
 8002ed6:	1acb      	subs	r3, r1, r3
 8002ed8:	4252      	negs	r2, r2
 8002eda:	1a9b      	subs	r3, r3, r2
 8002edc:	4698      	mov	r8, r3
 8002ede:	465d      	mov	r5, fp
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	e54e      	b.n	8002982 <__aeabi_dsub+0xaa>
 8002ee4:	074b      	lsls	r3, r1, #29
 8002ee6:	08c2      	lsrs	r2, r0, #3
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	08cb      	lsrs	r3, r1, #3
 8002eec:	e6b2      	b.n	8002c54 <__aeabi_dsub+0x37c>
 8002eee:	464a      	mov	r2, r9
 8002ef0:	1a14      	subs	r4, r2, r0
 8002ef2:	45a1      	cmp	r9, r4
 8002ef4:	4192      	sbcs	r2, r2
 8002ef6:	1a5f      	subs	r7, r3, r1
 8002ef8:	4252      	negs	r2, r2
 8002efa:	1aba      	subs	r2, r7, r2
 8002efc:	4690      	mov	r8, r2
 8002efe:	0212      	lsls	r2, r2, #8
 8002f00:	d56b      	bpl.n	8002fda <__aeabi_dsub+0x702>
 8002f02:	464a      	mov	r2, r9
 8002f04:	1a84      	subs	r4, r0, r2
 8002f06:	42a0      	cmp	r0, r4
 8002f08:	4192      	sbcs	r2, r2
 8002f0a:	1acb      	subs	r3, r1, r3
 8002f0c:	4252      	negs	r2, r2
 8002f0e:	1a9b      	subs	r3, r3, r2
 8002f10:	4698      	mov	r8, r3
 8002f12:	465d      	mov	r5, fp
 8002f14:	e564      	b.n	80029e0 <__aeabi_dsub+0x108>
 8002f16:	074b      	lsls	r3, r1, #29
 8002f18:	08c2      	lsrs	r2, r0, #3
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	465d      	mov	r5, fp
 8002f1e:	08cb      	lsrs	r3, r1, #3
 8002f20:	e698      	b.n	8002c54 <__aeabi_dsub+0x37c>
 8002f22:	074b      	lsls	r3, r1, #29
 8002f24:	08c2      	lsrs	r2, r0, #3
 8002f26:	431a      	orrs	r2, r3
 8002f28:	08cb      	lsrs	r3, r1, #3
 8002f2a:	e64f      	b.n	8002bcc <__aeabi_dsub+0x2f4>
 8002f2c:	000a      	movs	r2, r1
 8002f2e:	4302      	orrs	r2, r0
 8002f30:	d090      	beq.n	8002e54 <__aeabi_dsub+0x57c>
 8002f32:	464a      	mov	r2, r9
 8002f34:	075c      	lsls	r4, r3, #29
 8002f36:	08d2      	lsrs	r2, r2, #3
 8002f38:	4314      	orrs	r4, r2
 8002f3a:	2280      	movs	r2, #128	; 0x80
 8002f3c:	08db      	lsrs	r3, r3, #3
 8002f3e:	0312      	lsls	r2, r2, #12
 8002f40:	4213      	tst	r3, r2
 8002f42:	d008      	beq.n	8002f56 <__aeabi_dsub+0x67e>
 8002f44:	08ce      	lsrs	r6, r1, #3
 8002f46:	4216      	tst	r6, r2
 8002f48:	d105      	bne.n	8002f56 <__aeabi_dsub+0x67e>
 8002f4a:	08c0      	lsrs	r0, r0, #3
 8002f4c:	0749      	lsls	r1, r1, #29
 8002f4e:	4308      	orrs	r0, r1
 8002f50:	0004      	movs	r4, r0
 8002f52:	465d      	mov	r5, fp
 8002f54:	0033      	movs	r3, r6
 8002f56:	0f61      	lsrs	r1, r4, #29
 8002f58:	00e2      	lsls	r2, r4, #3
 8002f5a:	0749      	lsls	r1, r1, #29
 8002f5c:	08d2      	lsrs	r2, r2, #3
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	e678      	b.n	8002c54 <__aeabi_dsub+0x37c>
 8002f62:	074b      	lsls	r3, r1, #29
 8002f64:	08c2      	lsrs	r2, r0, #3
 8002f66:	431a      	orrs	r2, r3
 8002f68:	08cb      	lsrs	r3, r1, #3
 8002f6a:	e632      	b.n	8002bd2 <__aeabi_dsub+0x2fa>
 8002f6c:	4448      	add	r0, r9
 8002f6e:	185b      	adds	r3, r3, r1
 8002f70:	4548      	cmp	r0, r9
 8002f72:	4192      	sbcs	r2, r2
 8002f74:	4698      	mov	r8, r3
 8002f76:	4252      	negs	r2, r2
 8002f78:	4490      	add	r8, r2
 8002f7a:	4643      	mov	r3, r8
 8002f7c:	0004      	movs	r4, r0
 8002f7e:	021b      	lsls	r3, r3, #8
 8002f80:	d400      	bmi.n	8002f84 <__aeabi_dsub+0x6ac>
 8002f82:	e61a      	b.n	8002bba <__aeabi_dsub+0x2e2>
 8002f84:	4642      	mov	r2, r8
 8002f86:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <__aeabi_dsub+0x6e8>)
 8002f88:	2601      	movs	r6, #1
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	4690      	mov	r8, r2
 8002f8e:	e614      	b.n	8002bba <__aeabi_dsub+0x2e2>
 8002f90:	4666      	mov	r6, ip
 8002f92:	001f      	movs	r7, r3
 8002f94:	3e20      	subs	r6, #32
 8002f96:	40f7      	lsrs	r7, r6
 8002f98:	2c20      	cmp	r4, #32
 8002f9a:	d005      	beq.n	8002fa8 <__aeabi_dsub+0x6d0>
 8002f9c:	2640      	movs	r6, #64	; 0x40
 8002f9e:	1b36      	subs	r6, r6, r4
 8002fa0:	40b3      	lsls	r3, r6
 8002fa2:	464c      	mov	r4, r9
 8002fa4:	431c      	orrs	r4, r3
 8002fa6:	46a2      	mov	sl, r4
 8002fa8:	4654      	mov	r4, sl
 8002faa:	1e63      	subs	r3, r4, #1
 8002fac:	419c      	sbcs	r4, r3
 8002fae:	433c      	orrs	r4, r7
 8002fb0:	e5c8      	b.n	8002b44 <__aeabi_dsub+0x26c>
 8002fb2:	0011      	movs	r1, r2
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	e532      	b.n	8002a20 <__aeabi_dsub+0x148>
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	000007ff 	.word	0x000007ff
 8002fc0:	ff7fffff 	.word	0xff7fffff
 8002fc4:	000007fe 	.word	0x000007fe
 8002fc8:	464a      	mov	r2, r9
 8002fca:	1814      	adds	r4, r2, r0
 8002fcc:	4284      	cmp	r4, r0
 8002fce:	4192      	sbcs	r2, r2
 8002fd0:	185b      	adds	r3, r3, r1
 8002fd2:	4698      	mov	r8, r3
 8002fd4:	4252      	negs	r2, r2
 8002fd6:	4490      	add	r8, r2
 8002fd8:	e5e9      	b.n	8002bae <__aeabi_dsub+0x2d6>
 8002fda:	4642      	mov	r2, r8
 8002fdc:	4322      	orrs	r2, r4
 8002fde:	d100      	bne.n	8002fe2 <__aeabi_dsub+0x70a>
 8002fe0:	e6a6      	b.n	8002d30 <__aeabi_dsub+0x458>
 8002fe2:	e5ea      	b.n	8002bba <__aeabi_dsub+0x2e2>
 8002fe4:	074b      	lsls	r3, r1, #29
 8002fe6:	08c2      	lsrs	r2, r0, #3
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	08cb      	lsrs	r3, r1, #3
 8002fec:	e632      	b.n	8002c54 <__aeabi_dsub+0x37c>
 8002fee:	2200      	movs	r2, #0
 8002ff0:	4901      	ldr	r1, [pc, #4]	; (8002ff8 <__aeabi_dsub+0x720>)
 8002ff2:	0013      	movs	r3, r2
 8002ff4:	e514      	b.n	8002a20 <__aeabi_dsub+0x148>
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	000007ff 	.word	0x000007ff

08002ffc <__aeabi_d2iz>:
 8002ffc:	000a      	movs	r2, r1
 8002ffe:	b530      	push	{r4, r5, lr}
 8003000:	4c13      	ldr	r4, [pc, #76]	; (8003050 <__aeabi_d2iz+0x54>)
 8003002:	0053      	lsls	r3, r2, #1
 8003004:	0309      	lsls	r1, r1, #12
 8003006:	0005      	movs	r5, r0
 8003008:	0b09      	lsrs	r1, r1, #12
 800300a:	2000      	movs	r0, #0
 800300c:	0d5b      	lsrs	r3, r3, #21
 800300e:	0fd2      	lsrs	r2, r2, #31
 8003010:	42a3      	cmp	r3, r4
 8003012:	dd04      	ble.n	800301e <__aeabi_d2iz+0x22>
 8003014:	480f      	ldr	r0, [pc, #60]	; (8003054 <__aeabi_d2iz+0x58>)
 8003016:	4283      	cmp	r3, r0
 8003018:	dd02      	ble.n	8003020 <__aeabi_d2iz+0x24>
 800301a:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <__aeabi_d2iz+0x5c>)
 800301c:	18d0      	adds	r0, r2, r3
 800301e:	bd30      	pop	{r4, r5, pc}
 8003020:	2080      	movs	r0, #128	; 0x80
 8003022:	0340      	lsls	r0, r0, #13
 8003024:	4301      	orrs	r1, r0
 8003026:	480d      	ldr	r0, [pc, #52]	; (800305c <__aeabi_d2iz+0x60>)
 8003028:	1ac0      	subs	r0, r0, r3
 800302a:	281f      	cmp	r0, #31
 800302c:	dd08      	ble.n	8003040 <__aeabi_d2iz+0x44>
 800302e:	480c      	ldr	r0, [pc, #48]	; (8003060 <__aeabi_d2iz+0x64>)
 8003030:	1ac3      	subs	r3, r0, r3
 8003032:	40d9      	lsrs	r1, r3
 8003034:	000b      	movs	r3, r1
 8003036:	4258      	negs	r0, r3
 8003038:	2a00      	cmp	r2, #0
 800303a:	d1f0      	bne.n	800301e <__aeabi_d2iz+0x22>
 800303c:	0018      	movs	r0, r3
 800303e:	e7ee      	b.n	800301e <__aeabi_d2iz+0x22>
 8003040:	4c08      	ldr	r4, [pc, #32]	; (8003064 <__aeabi_d2iz+0x68>)
 8003042:	40c5      	lsrs	r5, r0
 8003044:	46a4      	mov	ip, r4
 8003046:	4463      	add	r3, ip
 8003048:	4099      	lsls	r1, r3
 800304a:	000b      	movs	r3, r1
 800304c:	432b      	orrs	r3, r5
 800304e:	e7f2      	b.n	8003036 <__aeabi_d2iz+0x3a>
 8003050:	000003fe 	.word	0x000003fe
 8003054:	0000041d 	.word	0x0000041d
 8003058:	7fffffff 	.word	0x7fffffff
 800305c:	00000433 	.word	0x00000433
 8003060:	00000413 	.word	0x00000413
 8003064:	fffffbed 	.word	0xfffffbed

08003068 <__aeabi_i2d>:
 8003068:	b570      	push	{r4, r5, r6, lr}
 800306a:	2800      	cmp	r0, #0
 800306c:	d016      	beq.n	800309c <__aeabi_i2d+0x34>
 800306e:	17c3      	asrs	r3, r0, #31
 8003070:	18c5      	adds	r5, r0, r3
 8003072:	405d      	eors	r5, r3
 8003074:	0fc4      	lsrs	r4, r0, #31
 8003076:	0028      	movs	r0, r5
 8003078:	f000 f91c 	bl	80032b4 <__clzsi2>
 800307c:	4a11      	ldr	r2, [pc, #68]	; (80030c4 <__aeabi_i2d+0x5c>)
 800307e:	1a12      	subs	r2, r2, r0
 8003080:	280a      	cmp	r0, #10
 8003082:	dc16      	bgt.n	80030b2 <__aeabi_i2d+0x4a>
 8003084:	0003      	movs	r3, r0
 8003086:	002e      	movs	r6, r5
 8003088:	3315      	adds	r3, #21
 800308a:	409e      	lsls	r6, r3
 800308c:	230b      	movs	r3, #11
 800308e:	1a18      	subs	r0, r3, r0
 8003090:	40c5      	lsrs	r5, r0
 8003092:	0553      	lsls	r3, r2, #21
 8003094:	032d      	lsls	r5, r5, #12
 8003096:	0b2d      	lsrs	r5, r5, #12
 8003098:	0d5b      	lsrs	r3, r3, #21
 800309a:	e003      	b.n	80030a4 <__aeabi_i2d+0x3c>
 800309c:	2400      	movs	r4, #0
 800309e:	2300      	movs	r3, #0
 80030a0:	2500      	movs	r5, #0
 80030a2:	2600      	movs	r6, #0
 80030a4:	051b      	lsls	r3, r3, #20
 80030a6:	432b      	orrs	r3, r5
 80030a8:	07e4      	lsls	r4, r4, #31
 80030aa:	4323      	orrs	r3, r4
 80030ac:	0030      	movs	r0, r6
 80030ae:	0019      	movs	r1, r3
 80030b0:	bd70      	pop	{r4, r5, r6, pc}
 80030b2:	380b      	subs	r0, #11
 80030b4:	4085      	lsls	r5, r0
 80030b6:	0553      	lsls	r3, r2, #21
 80030b8:	032d      	lsls	r5, r5, #12
 80030ba:	2600      	movs	r6, #0
 80030bc:	0b2d      	lsrs	r5, r5, #12
 80030be:	0d5b      	lsrs	r3, r3, #21
 80030c0:	e7f0      	b.n	80030a4 <__aeabi_i2d+0x3c>
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	0000041e 	.word	0x0000041e

080030c8 <__aeabi_ui2d>:
 80030c8:	b510      	push	{r4, lr}
 80030ca:	1e04      	subs	r4, r0, #0
 80030cc:	d010      	beq.n	80030f0 <__aeabi_ui2d+0x28>
 80030ce:	f000 f8f1 	bl	80032b4 <__clzsi2>
 80030d2:	4b0f      	ldr	r3, [pc, #60]	; (8003110 <__aeabi_ui2d+0x48>)
 80030d4:	1a1b      	subs	r3, r3, r0
 80030d6:	280a      	cmp	r0, #10
 80030d8:	dc11      	bgt.n	80030fe <__aeabi_ui2d+0x36>
 80030da:	220b      	movs	r2, #11
 80030dc:	0021      	movs	r1, r4
 80030de:	1a12      	subs	r2, r2, r0
 80030e0:	40d1      	lsrs	r1, r2
 80030e2:	3015      	adds	r0, #21
 80030e4:	030a      	lsls	r2, r1, #12
 80030e6:	055b      	lsls	r3, r3, #21
 80030e8:	4084      	lsls	r4, r0
 80030ea:	0b12      	lsrs	r2, r2, #12
 80030ec:	0d5b      	lsrs	r3, r3, #21
 80030ee:	e001      	b.n	80030f4 <__aeabi_ui2d+0x2c>
 80030f0:	2300      	movs	r3, #0
 80030f2:	2200      	movs	r2, #0
 80030f4:	051b      	lsls	r3, r3, #20
 80030f6:	4313      	orrs	r3, r2
 80030f8:	0020      	movs	r0, r4
 80030fa:	0019      	movs	r1, r3
 80030fc:	bd10      	pop	{r4, pc}
 80030fe:	0022      	movs	r2, r4
 8003100:	380b      	subs	r0, #11
 8003102:	4082      	lsls	r2, r0
 8003104:	055b      	lsls	r3, r3, #21
 8003106:	0312      	lsls	r2, r2, #12
 8003108:	2400      	movs	r4, #0
 800310a:	0b12      	lsrs	r2, r2, #12
 800310c:	0d5b      	lsrs	r3, r3, #21
 800310e:	e7f1      	b.n	80030f4 <__aeabi_ui2d+0x2c>
 8003110:	0000041e 	.word	0x0000041e

08003114 <__aeabi_f2d>:
 8003114:	b570      	push	{r4, r5, r6, lr}
 8003116:	0043      	lsls	r3, r0, #1
 8003118:	0246      	lsls	r6, r0, #9
 800311a:	0fc4      	lsrs	r4, r0, #31
 800311c:	20fe      	movs	r0, #254	; 0xfe
 800311e:	0e1b      	lsrs	r3, r3, #24
 8003120:	1c59      	adds	r1, r3, #1
 8003122:	0a75      	lsrs	r5, r6, #9
 8003124:	4208      	tst	r0, r1
 8003126:	d00c      	beq.n	8003142 <__aeabi_f2d+0x2e>
 8003128:	22e0      	movs	r2, #224	; 0xe0
 800312a:	0092      	lsls	r2, r2, #2
 800312c:	4694      	mov	ip, r2
 800312e:	076d      	lsls	r5, r5, #29
 8003130:	0b36      	lsrs	r6, r6, #12
 8003132:	4463      	add	r3, ip
 8003134:	051b      	lsls	r3, r3, #20
 8003136:	4333      	orrs	r3, r6
 8003138:	07e4      	lsls	r4, r4, #31
 800313a:	4323      	orrs	r3, r4
 800313c:	0028      	movs	r0, r5
 800313e:	0019      	movs	r1, r3
 8003140:	bd70      	pop	{r4, r5, r6, pc}
 8003142:	2b00      	cmp	r3, #0
 8003144:	d114      	bne.n	8003170 <__aeabi_f2d+0x5c>
 8003146:	2d00      	cmp	r5, #0
 8003148:	d01b      	beq.n	8003182 <__aeabi_f2d+0x6e>
 800314a:	0028      	movs	r0, r5
 800314c:	f000 f8b2 	bl	80032b4 <__clzsi2>
 8003150:	280a      	cmp	r0, #10
 8003152:	dc1c      	bgt.n	800318e <__aeabi_f2d+0x7a>
 8003154:	230b      	movs	r3, #11
 8003156:	002a      	movs	r2, r5
 8003158:	1a1b      	subs	r3, r3, r0
 800315a:	40da      	lsrs	r2, r3
 800315c:	0003      	movs	r3, r0
 800315e:	3315      	adds	r3, #21
 8003160:	409d      	lsls	r5, r3
 8003162:	4b0e      	ldr	r3, [pc, #56]	; (800319c <__aeabi_f2d+0x88>)
 8003164:	0312      	lsls	r2, r2, #12
 8003166:	1a1b      	subs	r3, r3, r0
 8003168:	055b      	lsls	r3, r3, #21
 800316a:	0b16      	lsrs	r6, r2, #12
 800316c:	0d5b      	lsrs	r3, r3, #21
 800316e:	e7e1      	b.n	8003134 <__aeabi_f2d+0x20>
 8003170:	2d00      	cmp	r5, #0
 8003172:	d009      	beq.n	8003188 <__aeabi_f2d+0x74>
 8003174:	0b32      	lsrs	r2, r6, #12
 8003176:	2680      	movs	r6, #128	; 0x80
 8003178:	0336      	lsls	r6, r6, #12
 800317a:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <__aeabi_f2d+0x8c>)
 800317c:	076d      	lsls	r5, r5, #29
 800317e:	4316      	orrs	r6, r2
 8003180:	e7d8      	b.n	8003134 <__aeabi_f2d+0x20>
 8003182:	2300      	movs	r3, #0
 8003184:	2600      	movs	r6, #0
 8003186:	e7d5      	b.n	8003134 <__aeabi_f2d+0x20>
 8003188:	2600      	movs	r6, #0
 800318a:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <__aeabi_f2d+0x8c>)
 800318c:	e7d2      	b.n	8003134 <__aeabi_f2d+0x20>
 800318e:	0003      	movs	r3, r0
 8003190:	002a      	movs	r2, r5
 8003192:	3b0b      	subs	r3, #11
 8003194:	409a      	lsls	r2, r3
 8003196:	2500      	movs	r5, #0
 8003198:	e7e3      	b.n	8003162 <__aeabi_f2d+0x4e>
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	00000389 	.word	0x00000389
 80031a0:	000007ff 	.word	0x000007ff

080031a4 <__aeabi_d2f>:
 80031a4:	0002      	movs	r2, r0
 80031a6:	004b      	lsls	r3, r1, #1
 80031a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031aa:	0308      	lsls	r0, r1, #12
 80031ac:	0d5b      	lsrs	r3, r3, #21
 80031ae:	4e3d      	ldr	r6, [pc, #244]	; (80032a4 <__aeabi_d2f+0x100>)
 80031b0:	0fcc      	lsrs	r4, r1, #31
 80031b2:	0a40      	lsrs	r0, r0, #9
 80031b4:	0f51      	lsrs	r1, r2, #29
 80031b6:	1c5f      	adds	r7, r3, #1
 80031b8:	4308      	orrs	r0, r1
 80031ba:	00d5      	lsls	r5, r2, #3
 80031bc:	4237      	tst	r7, r6
 80031be:	d00a      	beq.n	80031d6 <__aeabi_d2f+0x32>
 80031c0:	4939      	ldr	r1, [pc, #228]	; (80032a8 <__aeabi_d2f+0x104>)
 80031c2:	185e      	adds	r6, r3, r1
 80031c4:	2efe      	cmp	r6, #254	; 0xfe
 80031c6:	dd16      	ble.n	80031f6 <__aeabi_d2f+0x52>
 80031c8:	23ff      	movs	r3, #255	; 0xff
 80031ca:	2100      	movs	r1, #0
 80031cc:	05db      	lsls	r3, r3, #23
 80031ce:	430b      	orrs	r3, r1
 80031d0:	07e0      	lsls	r0, r4, #31
 80031d2:	4318      	orrs	r0, r3
 80031d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d106      	bne.n	80031e8 <__aeabi_d2f+0x44>
 80031da:	4328      	orrs	r0, r5
 80031dc:	d027      	beq.n	800322e <__aeabi_d2f+0x8a>
 80031de:	2105      	movs	r1, #5
 80031e0:	0189      	lsls	r1, r1, #6
 80031e2:	0a49      	lsrs	r1, r1, #9
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	e7f1      	b.n	80031cc <__aeabi_d2f+0x28>
 80031e8:	4305      	orrs	r5, r0
 80031ea:	d0ed      	beq.n	80031c8 <__aeabi_d2f+0x24>
 80031ec:	2180      	movs	r1, #128	; 0x80
 80031ee:	03c9      	lsls	r1, r1, #15
 80031f0:	23ff      	movs	r3, #255	; 0xff
 80031f2:	4301      	orrs	r1, r0
 80031f4:	e7ea      	b.n	80031cc <__aeabi_d2f+0x28>
 80031f6:	2e00      	cmp	r6, #0
 80031f8:	dd1c      	ble.n	8003234 <__aeabi_d2f+0x90>
 80031fa:	0192      	lsls	r2, r2, #6
 80031fc:	0011      	movs	r1, r2
 80031fe:	1e4a      	subs	r2, r1, #1
 8003200:	4191      	sbcs	r1, r2
 8003202:	00c0      	lsls	r0, r0, #3
 8003204:	0f6d      	lsrs	r5, r5, #29
 8003206:	4301      	orrs	r1, r0
 8003208:	4329      	orrs	r1, r5
 800320a:	074b      	lsls	r3, r1, #29
 800320c:	d048      	beq.n	80032a0 <__aeabi_d2f+0xfc>
 800320e:	230f      	movs	r3, #15
 8003210:	400b      	ands	r3, r1
 8003212:	2b04      	cmp	r3, #4
 8003214:	d000      	beq.n	8003218 <__aeabi_d2f+0x74>
 8003216:	3104      	adds	r1, #4
 8003218:	2380      	movs	r3, #128	; 0x80
 800321a:	04db      	lsls	r3, r3, #19
 800321c:	400b      	ands	r3, r1
 800321e:	d03f      	beq.n	80032a0 <__aeabi_d2f+0xfc>
 8003220:	1c72      	adds	r2, r6, #1
 8003222:	2efe      	cmp	r6, #254	; 0xfe
 8003224:	d0d0      	beq.n	80031c8 <__aeabi_d2f+0x24>
 8003226:	0189      	lsls	r1, r1, #6
 8003228:	0a49      	lsrs	r1, r1, #9
 800322a:	b2d3      	uxtb	r3, r2
 800322c:	e7ce      	b.n	80031cc <__aeabi_d2f+0x28>
 800322e:	2300      	movs	r3, #0
 8003230:	2100      	movs	r1, #0
 8003232:	e7cb      	b.n	80031cc <__aeabi_d2f+0x28>
 8003234:	0032      	movs	r2, r6
 8003236:	3217      	adds	r2, #23
 8003238:	db22      	blt.n	8003280 <__aeabi_d2f+0xdc>
 800323a:	2180      	movs	r1, #128	; 0x80
 800323c:	221e      	movs	r2, #30
 800323e:	0409      	lsls	r1, r1, #16
 8003240:	4308      	orrs	r0, r1
 8003242:	1b92      	subs	r2, r2, r6
 8003244:	2a1f      	cmp	r2, #31
 8003246:	dd1d      	ble.n	8003284 <__aeabi_d2f+0xe0>
 8003248:	2102      	movs	r1, #2
 800324a:	4249      	negs	r1, r1
 800324c:	1b8e      	subs	r6, r1, r6
 800324e:	0001      	movs	r1, r0
 8003250:	40f1      	lsrs	r1, r6
 8003252:	000e      	movs	r6, r1
 8003254:	2a20      	cmp	r2, #32
 8003256:	d004      	beq.n	8003262 <__aeabi_d2f+0xbe>
 8003258:	4a14      	ldr	r2, [pc, #80]	; (80032ac <__aeabi_d2f+0x108>)
 800325a:	4694      	mov	ip, r2
 800325c:	4463      	add	r3, ip
 800325e:	4098      	lsls	r0, r3
 8003260:	4305      	orrs	r5, r0
 8003262:	0029      	movs	r1, r5
 8003264:	1e4d      	subs	r5, r1, #1
 8003266:	41a9      	sbcs	r1, r5
 8003268:	4331      	orrs	r1, r6
 800326a:	2600      	movs	r6, #0
 800326c:	074b      	lsls	r3, r1, #29
 800326e:	d1ce      	bne.n	800320e <__aeabi_d2f+0x6a>
 8003270:	2080      	movs	r0, #128	; 0x80
 8003272:	000b      	movs	r3, r1
 8003274:	04c0      	lsls	r0, r0, #19
 8003276:	2201      	movs	r2, #1
 8003278:	4003      	ands	r3, r0
 800327a:	4201      	tst	r1, r0
 800327c:	d1d3      	bne.n	8003226 <__aeabi_d2f+0x82>
 800327e:	e7af      	b.n	80031e0 <__aeabi_d2f+0x3c>
 8003280:	2300      	movs	r3, #0
 8003282:	e7ac      	b.n	80031de <__aeabi_d2f+0x3a>
 8003284:	490a      	ldr	r1, [pc, #40]	; (80032b0 <__aeabi_d2f+0x10c>)
 8003286:	468c      	mov	ip, r1
 8003288:	0029      	movs	r1, r5
 800328a:	4463      	add	r3, ip
 800328c:	40d1      	lsrs	r1, r2
 800328e:	409d      	lsls	r5, r3
 8003290:	000a      	movs	r2, r1
 8003292:	0029      	movs	r1, r5
 8003294:	4098      	lsls	r0, r3
 8003296:	1e4d      	subs	r5, r1, #1
 8003298:	41a9      	sbcs	r1, r5
 800329a:	4301      	orrs	r1, r0
 800329c:	4311      	orrs	r1, r2
 800329e:	e7e4      	b.n	800326a <__aeabi_d2f+0xc6>
 80032a0:	0033      	movs	r3, r6
 80032a2:	e79d      	b.n	80031e0 <__aeabi_d2f+0x3c>
 80032a4:	000007fe 	.word	0x000007fe
 80032a8:	fffffc80 	.word	0xfffffc80
 80032ac:	fffffca2 	.word	0xfffffca2
 80032b0:	fffffc82 	.word	0xfffffc82

080032b4 <__clzsi2>:
 80032b4:	211c      	movs	r1, #28
 80032b6:	2301      	movs	r3, #1
 80032b8:	041b      	lsls	r3, r3, #16
 80032ba:	4298      	cmp	r0, r3
 80032bc:	d301      	bcc.n	80032c2 <__clzsi2+0xe>
 80032be:	0c00      	lsrs	r0, r0, #16
 80032c0:	3910      	subs	r1, #16
 80032c2:	0a1b      	lsrs	r3, r3, #8
 80032c4:	4298      	cmp	r0, r3
 80032c6:	d301      	bcc.n	80032cc <__clzsi2+0x18>
 80032c8:	0a00      	lsrs	r0, r0, #8
 80032ca:	3908      	subs	r1, #8
 80032cc:	091b      	lsrs	r3, r3, #4
 80032ce:	4298      	cmp	r0, r3
 80032d0:	d301      	bcc.n	80032d6 <__clzsi2+0x22>
 80032d2:	0900      	lsrs	r0, r0, #4
 80032d4:	3904      	subs	r1, #4
 80032d6:	a202      	add	r2, pc, #8	; (adr r2, 80032e0 <__clzsi2+0x2c>)
 80032d8:	5c10      	ldrb	r0, [r2, r0]
 80032da:	1840      	adds	r0, r0, r1
 80032dc:	4770      	bx	lr
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	02020304 	.word	0x02020304
 80032e4:	01010101 	.word	0x01010101
	...

080032f0 <__clzdi2>:
 80032f0:	b510      	push	{r4, lr}
 80032f2:	2900      	cmp	r1, #0
 80032f4:	d103      	bne.n	80032fe <__clzdi2+0xe>
 80032f6:	f7ff ffdd 	bl	80032b4 <__clzsi2>
 80032fa:	3020      	adds	r0, #32
 80032fc:	e002      	b.n	8003304 <__clzdi2+0x14>
 80032fe:	1c08      	adds	r0, r1, #0
 8003300:	f7ff ffd8 	bl	80032b4 <__clzsi2>
 8003304:	bd10      	pop	{r4, pc}
 8003306:	46c0      	nop			; (mov r8, r8)

08003308 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8003308:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800330a:	f000 fe69 	bl	8003fe0 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800330e:	f000 f93b 	bl	8003588 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8003312:	bd10      	pop	{r4, pc}

08003314 <MX_LoRaWAN_Process>:
void MX_LoRaWAN_Process(void)
{
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8003314:	2001      	movs	r0, #1
{
 8003316:	b510      	push	{r4, lr}
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8003318:	4240      	negs	r0, r0
 800331a:	f00d fa77 	bl	801080c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800331e:	bd10      	pop	{r4, pc}

08003320 <OnTxTimerEvent>:

  /* USER CODE END SendTxData_2 */
}

static void OnTxTimerEvent(void *context)
{
 8003320:	b510      	push	{r4, lr}
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8003322:	2100      	movs	r1, #0
 8003324:	2002      	movs	r0, #2
 8003326:	f00d fa43 	bl	80107b0 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800332a:	4802      	ldr	r0, [pc, #8]	; (8003334 <OnTxTimerEvent+0x14>)
 800332c:	f00d fc8c 	bl	8010c48 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 8003330:	bd10      	pop	{r4, pc}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	200001b8 	.word	0x200001b8

08003338 <OnMacProcessNotify>:

  /* USER CODE END OnJoinRequest_2 */
}

static void OnMacProcessNotify(void)
{
 8003338:	b510      	push	{r4, lr}
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800333a:	2100      	movs	r1, #0
 800333c:	2001      	movs	r0, #1
 800333e:	f00d fa37 	bl	80107b0 <UTIL_SEQ_SetTask>
  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 8003342:	bd10      	pop	{r4, pc}

08003344 <OnRxTimerLedEvent>:
{
 8003344:	b510      	push	{r4, lr}
  LED_Off(LED_BLUE) ;
 8003346:	2002      	movs	r0, #2
 8003348:	f001 f99c 	bl	8004684 <BSP_LED_Off>
}
 800334c:	bd10      	pop	{r4, pc}

0800334e <OnTxTimerLedEvent>:
{
 800334e:	b510      	push	{r4, lr}
  LED_Off(LED_RED2);
 8003350:	2003      	movs	r0, #3
 8003352:	f001 f997 	bl	8004684 <BSP_LED_Off>
}
 8003356:	bd10      	pop	{r4, pc}

08003358 <OnJoinTimerLedEvent>:
{
 8003358:	b510      	push	{r4, lr}
  LED_Toggle(LED_RED1) ;
 800335a:	2001      	movs	r0, #1
 800335c:	f001 f9a2 	bl	80046a4 <BSP_LED_Toggle>
}
 8003360:	bd10      	pop	{r4, pc}
	...

08003364 <OnTxData>:
{
 8003364:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003366:	1e04      	subs	r4, r0, #0
  if ((params != NULL) && (params->IsMcpsConfirm != 0))
 8003368:	d034      	beq.n	80033d4 <OnTxData+0x70>
 800336a:	7803      	ldrb	r3, [r0, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d031      	beq.n	80033d4 <OnTxData+0x70>
    LED_On(LED_RED2) ;
 8003370:	2003      	movs	r0, #3
 8003372:	f001 f977 	bl	8004664 <BSP_LED_On>
    UTIL_TIMER_Start(&TxLedTimer);
 8003376:	481b      	ldr	r0, [pc, #108]	; (80033e4 <OnTxData+0x80>)
 8003378:	3018      	adds	r0, #24
 800337a:	f00d fc65 	bl	8010c48 <UTIL_TIMER_Start>
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800337e:	2200      	movs	r2, #0
 8003380:	4b19      	ldr	r3, [pc, #100]	; (80033e8 <OnTxData+0x84>)
 8003382:	0011      	movs	r1, r2
 8003384:	2002      	movs	r0, #2
 8003386:	f00d f8e3 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800338a:	2314      	movs	r3, #20
 800338c:	56e3      	ldrsb	r3, [r4, r3]
 800338e:	2200      	movs	r2, #0
 8003390:	9303      	str	r3, [sp, #12]
 8003392:	2304      	movs	r3, #4
 8003394:	56e3      	ldrsb	r3, [r4, r3]
 8003396:	0011      	movs	r1, r2
 8003398:	9302      	str	r3, [sp, #8]
 800339a:	7b23      	ldrb	r3, [r4, #12]
 800339c:	2003      	movs	r0, #3
 800339e:	9301      	str	r3, [sp, #4]
 80033a0:	68a3      	ldr	r3, [r4, #8]
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	4b11      	ldr	r3, [pc, #68]	; (80033ec <OnTxData+0x88>)
 80033a6:	f00d f8d3 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 80033aa:	2200      	movs	r2, #0
 80033ac:	4b10      	ldr	r3, [pc, #64]	; (80033f0 <OnTxData+0x8c>)
 80033ae:	0011      	movs	r1, r2
 80033b0:	2003      	movs	r0, #3
 80033b2:	f00d f8cd 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
    if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 80033b6:	78a3      	ldrb	r3, [r4, #2]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d10c      	bne.n	80033d6 <OnTxData+0x72>
      APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 80033bc:	78e2      	ldrb	r2, [r4, #3]
 80033be:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <OnTxData+0x90>)
 80033c0:	2a00      	cmp	r2, #0
 80033c2:	d100      	bne.n	80033c6 <OnTxData+0x62>
 80033c4:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <OnTxData+0x94>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	0011      	movs	r1, r2
 80033cc:	2003      	movs	r0, #3
 80033ce:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <OnTxData+0x98>)
 80033d0:	f00d f8be 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
}
 80033d4:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 80033d6:	2200      	movs	r2, #0
 80033d8:	4b09      	ldr	r3, [pc, #36]	; (8003400 <OnTxData+0x9c>)
 80033da:	0011      	movs	r1, r2
 80033dc:	2003      	movs	r0, #3
 80033de:	f00d f8b7 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
}
 80033e2:	e7f7      	b.n	80033d4 <OnTxData+0x70>
 80033e4:	200001b8 	.word	0x200001b8
 80033e8:	080119a1 	.word	0x080119a1
 80033ec:	080119d2 	.word	0x080119d2
 80033f0:	08011a03 	.word	0x08011a03
 80033f4:	0801199d 	.word	0x0801199d
 80033f8:	0801199c 	.word	0x0801199c
 80033fc:	08011a10 	.word	0x08011a10
 8003400:	08011a21 	.word	0x08011a21

08003404 <OnRxData>:
{
 8003404:	b530      	push	{r4, r5, lr}
 8003406:	0004      	movs	r4, r0
 8003408:	000d      	movs	r5, r1
 800340a:	b087      	sub	sp, #28
  if ((appData != NULL) && (params != NULL))
 800340c:	2800      	cmp	r0, #0
 800340e:	d035      	beq.n	800347c <OnRxData+0x78>
 8003410:	2900      	cmp	r1, #0
 8003412:	d033      	beq.n	800347c <OnRxData+0x78>
    LED_On(LED_BLUE);
 8003414:	2002      	movs	r0, #2
 8003416:	f001 f925 	bl	8004664 <BSP_LED_On>
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 800341a:	2200      	movs	r2, #0
 800341c:	4b26      	ldr	r3, [pc, #152]	; (80034b8 <OnRxData+0xb4>)
 800341e:	0011      	movs	r1, r2
 8003420:	2002      	movs	r0, #2
 8003422:	f00d f895 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 8003426:	2304      	movs	r3, #4
 8003428:	56eb      	ldrsb	r3, [r5, r3]
 800342a:	4a24      	ldr	r2, [pc, #144]	; (80034bc <OnRxData+0xb8>)
 800342c:	9305      	str	r3, [sp, #20]
 800342e:	2303      	movs	r3, #3
 8003430:	56eb      	ldrsb	r3, [r5, r3]
 8003432:	2003      	movs	r0, #3
 8003434:	9304      	str	r3, [sp, #16]
 8003436:	2302      	movs	r3, #2
 8003438:	56eb      	ldrsb	r3, [r5, r3]
 800343a:	9303      	str	r3, [sp, #12]
 800343c:	7823      	ldrb	r3, [r4, #0]
 800343e:	9302      	str	r3, [sp, #8]
 8003440:	230c      	movs	r3, #12
 8003442:	56eb      	ldrsb	r3, [r5, r3]
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	589b      	ldr	r3, [r3, r2]
 8003448:	2200      	movs	r2, #0
 800344a:	9301      	str	r3, [sp, #4]
 800344c:	68ab      	ldr	r3, [r5, #8]
 800344e:	0011      	movs	r1, r2
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	4b1b      	ldr	r3, [pc, #108]	; (80034c0 <OnRxData+0xbc>)
 8003454:	f00d f87c 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
    switch (appData->Port)
 8003458:	7823      	ldrb	r3, [r4, #0]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d010      	beq.n	8003480 <OnRxData+0x7c>
 800345e:	2b03      	cmp	r3, #3
 8003460:	d10c      	bne.n	800347c <OnRxData+0x78>
        if (appData->BufferSize == 1)
 8003462:	7863      	ldrb	r3, [r4, #1]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d109      	bne.n	800347c <OnRxData+0x78>
          switch (appData->Buffer[0])
 8003468:	6863      	ldr	r3, [r4, #4]
 800346a:	7818      	ldrb	r0, [r3, #0]
 800346c:	2801      	cmp	r0, #1
 800346e:	d003      	beq.n	8003478 <OnRxData+0x74>
 8003470:	2802      	cmp	r0, #2
 8003472:	d001      	beq.n	8003478 <OnRxData+0x74>
 8003474:	2800      	cmp	r0, #0
 8003476:	d101      	bne.n	800347c <OnRxData+0x78>
              LmHandlerRequestClass(CLASS_C);
 8003478:	f005 f942 	bl	8008700 <LmHandlerRequestClass>
}
 800347c:	b007      	add	sp, #28
 800347e:	bd30      	pop	{r4, r5, pc}
        if (appData->BufferSize == 1)
 8003480:	7865      	ldrb	r5, [r4, #1]
 8003482:	2d01      	cmp	r5, #1
 8003484:	d1fa      	bne.n	800347c <OnRxData+0x78>
          AppLedStateOn = appData->Buffer[0] & 0x01;
 8003486:	6863      	ldr	r3, [r4, #4]
 8003488:	781b      	ldrb	r3, [r3, #0]
          if (AppLedStateOn == RESET)
 800348a:	0019      	movs	r1, r3
 800348c:	4029      	ands	r1, r5
 800348e:	422b      	tst	r3, r5
 8003490:	d108      	bne.n	80034a4 <OnRxData+0xa0>
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 8003492:	000a      	movs	r2, r1
 8003494:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <OnRxData+0xc0>)
 8003496:	2003      	movs	r0, #3
 8003498:	f00d f85a 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
            LED_Off(LED_RED1);
 800349c:	0028      	movs	r0, r5
 800349e:	f001 f8f1 	bl	8004684 <BSP_LED_Off>
 80034a2:	e7eb      	b.n	800347c <OnRxData+0x78>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 80034a4:	2200      	movs	r2, #0
 80034a6:	4b08      	ldr	r3, [pc, #32]	; (80034c8 <OnRxData+0xc4>)
 80034a8:	0011      	movs	r1, r2
 80034aa:	2003      	movs	r0, #3
 80034ac:	f00d f850 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
            LED_On(LED_RED1);
 80034b0:	0028      	movs	r0, r5
 80034b2:	f001 f8d7 	bl	8004664 <BSP_LED_On>
}
 80034b6:	e7e1      	b.n	800347c <OnRxData+0x78>
 80034b8:	08011a2f 	.word	0x08011a2f
 80034bc:	08011170 	.word	0x08011170
 80034c0:	08011a60 	.word	0x08011a60
 80034c4:	08011aa7 	.word	0x08011aa7
 80034c8:	08011ab1 	.word	0x08011ab1

080034cc <OnJoinRequest>:
{
 80034cc:	b570      	push	{r4, r5, r6, lr}
 80034ce:	1e05      	subs	r5, r0, #0
  if (joinParams != NULL)
 80034d0:	d019      	beq.n	8003506 <OnJoinRequest+0x3a>
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 80034d2:	2401      	movs	r4, #1
 80034d4:	5704      	ldrsb	r4, [r0, r4]
 80034d6:	2c00      	cmp	r4, #0
 80034d8:	d118      	bne.n	800350c <OnJoinRequest+0x40>
      UTIL_TIMER_Stop(&JoinLedTimer);
 80034da:	480e      	ldr	r0, [pc, #56]	; (8003514 <OnJoinRequest+0x48>)
 80034dc:	3030      	adds	r0, #48	; 0x30
 80034de:	f00d fb5f 	bl	8010ba0 <UTIL_TIMER_Stop>
      LED_Off(LED_RED1) ;
 80034e2:	2001      	movs	r0, #1
 80034e4:	f001 f8ce 	bl	8004684 <BSP_LED_Off>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 80034e8:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <OnJoinRequest+0x4c>)
 80034ea:	0022      	movs	r2, r4
 80034ec:	0021      	movs	r1, r4
 80034ee:	2002      	movs	r0, #2
 80034f0:	f00d f82e 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 80034f4:	78ab      	ldrb	r3, [r5, #2]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d106      	bne.n	8003508 <OnJoinRequest+0x3c>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 80034fa:	4b08      	ldr	r3, [pc, #32]	; (800351c <OnJoinRequest+0x50>)
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 80034fc:	0022      	movs	r2, r4
 80034fe:	0021      	movs	r1, r4
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8003500:	2002      	movs	r0, #2
 8003502:	f00d f825 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
}
 8003506:	bd70      	pop	{r4, r5, r6, pc}
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <OnJoinRequest+0x54>)
 800350a:	e7f7      	b.n	80034fc <OnJoinRequest+0x30>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800350c:	2200      	movs	r2, #0
 800350e:	4b05      	ldr	r3, [pc, #20]	; (8003524 <OnJoinRequest+0x58>)
 8003510:	0011      	movs	r1, r2
 8003512:	e7f5      	b.n	8003500 <OnJoinRequest+0x34>
 8003514:	200001b8 	.word	0x200001b8
 8003518:	08011aba 	.word	0x08011aba
 800351c:	08011acf 	.word	0x08011acf
 8003520:	08011aec 	.word	0x08011aec
 8003524:	08011b09 	.word	0x08011b09

08003528 <SendTxData>:
{
 8003528:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  UTIL_TIMER_Time_t nextTxIn = 0;
 800352a:	2500      	movs	r5, #0
  AppData.Port = LORAWAN_USER_APP_PORT;
 800352c:	2302      	movs	r3, #2
 800352e:	4e13      	ldr	r6, [pc, #76]	; (800357c <SendTxData+0x54>)
  UTIL_TIMER_Time_t nextTxIn = 0;
 8003530:	9503      	str	r5, [sp, #12]
  AppData.Port = LORAWAN_USER_APP_PORT;
 8003532:	7033      	strb	r3, [r6, #0]
  batteryLevel = GetBatteryLevel();                      	/* 1 (very low) to 254 (fully charged) */
 8003534:	f000 fdd0 	bl	80040d8 <GetBatteryLevel>
  AppData.BufferSize = frameIterator;
 8003538:	2401      	movs	r4, #1
  AppData.Buffer[frameIterator++]     = 	batteryLevel;
 800353a:	6873      	ldr	r3, [r6, #4]
  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 800353c:	0029      	movs	r1, r5
  AppData.Buffer[frameIterator++]     = 	batteryLevel;
 800353e:	7018      	strb	r0, [r3, #0]
  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 8003540:	aa03      	add	r2, sp, #12
 8003542:	002b      	movs	r3, r5
 8003544:	0030      	movs	r0, r6
  AppData.BufferSize = frameIterator;
 8003546:	7074      	strb	r4, [r6, #1]
  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 8003548:	f005 f984 	bl	8008854 <LmHandlerSend>
 800354c:	0001      	movs	r1, r0
 800354e:	42a8      	cmp	r0, r5
 8003550:	d105      	bne.n	800355e <SendTxData+0x36>
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8003552:	0022      	movs	r2, r4
 8003554:	0020      	movs	r0, r4
 8003556:	4b0a      	ldr	r3, [pc, #40]	; (8003580 <SendTxData+0x58>)
 8003558:	f00c fffa 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
}
 800355c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
  else if (nextTxIn > 0)
 800355e:	9803      	ldr	r0, [sp, #12]
 8003560:	2800      	cmp	r0, #0
 8003562:	d0fb      	beq.n	800355c <SendTxData+0x34>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8003564:	21fa      	movs	r1, #250	; 0xfa
 8003566:	0089      	lsls	r1, r1, #2
 8003568:	f7fc fdfe 	bl	8000168 <__udivsi3>
 800356c:	0022      	movs	r2, r4
 800356e:	9000      	str	r0, [sp, #0]
 8003570:	0029      	movs	r1, r5
 8003572:	0020      	movs	r0, r4
 8003574:	4b03      	ldr	r3, [pc, #12]	; (8003584 <SendTxData+0x5c>)
 8003576:	f00c ffeb 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
}
 800357a:	e7ef      	b.n	800355c <SendTxData+0x34>
 800357c:	20000000 	.word	0x20000000
 8003580:	08011b22 	.word	0x08011b22
 8003584:	08011b31 	.word	0x08011b31

08003588 <LoRaWAN_Init>:
{
 8003588:	b5f0      	push	{r4, r5, r6, r7, lr}
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 800358a:	2400      	movs	r4, #0
 800358c:	2501      	movs	r5, #1
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800358e:	2702      	movs	r7, #2
{
 8003590:	b085      	sub	sp, #20
  LED_Init(LED_BLUE);
 8003592:	2002      	movs	r0, #2
 8003594:	f001 f824 	bl	80045e0 <BSP_LED_Init>
  LED_Init(LED_RED1);
 8003598:	2001      	movs	r0, #1
 800359a:	f001 f821 	bl	80045e0 <BSP_LED_Init>
  LED_Init(LED_RED2);
 800359e:	2003      	movs	r0, #3
 80035a0:	f001 f81e 	bl	80045e0 <BSP_LED_Init>
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 80035a4:	0022      	movs	r2, r4
 80035a6:	0021      	movs	r1, r4
 80035a8:	9500      	str	r5, [sp, #0]
 80035aa:	4b36      	ldr	r3, [pc, #216]	; (8003684 <LoRaWAN_Init+0xfc>)
 80035ac:	9402      	str	r4, [sp, #8]
 80035ae:	9401      	str	r4, [sp, #4]
 80035b0:	2002      	movs	r0, #2
 80035b2:	f00c ffcd 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 80035b6:	0022      	movs	r2, r4
 80035b8:	0021      	movs	r1, r4
 80035ba:	9502      	str	r5, [sp, #8]
 80035bc:	0038      	movs	r0, r7
 80035be:	4b32      	ldr	r3, [pc, #200]	; (8003688 <LoRaWAN_Init+0x100>)
 80035c0:	9701      	str	r7, [sp, #4]
 80035c2:	9700      	str	r7, [sp, #0]
 80035c4:	f00c ffc4 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 80035c8:	0022      	movs	r2, r4
 80035ca:	0021      	movs	r1, r4
 80035cc:	9502      	str	r5, [sp, #8]
 80035ce:	0038      	movs	r0, r7
 80035d0:	4b2e      	ldr	r3, [pc, #184]	; (800368c <LoRaWAN_Init+0x104>)
 80035d2:	9401      	str	r4, [sp, #4]
 80035d4:	9400      	str	r4, [sp, #0]
 80035d6:	f00c ffbb 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 80035da:	2101      	movs	r1, #1
 80035dc:	0022      	movs	r2, r4
 80035de:	4b2c      	ldr	r3, [pc, #176]	; (8003690 <LoRaWAN_Init+0x108>)
 80035e0:	9400      	str	r4, [sp, #0]
 80035e2:	4249      	negs	r1, r1
 80035e4:	482b      	ldr	r0, [pc, #172]	; (8003694 <LoRaWAN_Init+0x10c>)
 80035e6:	4e2c      	ldr	r6, [pc, #176]	; (8003698 <LoRaWAN_Init+0x110>)
 80035e8:	f00d fa7a 	bl	8010ae0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 80035ec:	2101      	movs	r1, #1
 80035ee:	0022      	movs	r2, r4
 80035f0:	4b2a      	ldr	r3, [pc, #168]	; (800369c <LoRaWAN_Init+0x114>)
 80035f2:	9400      	str	r4, [sp, #0]
 80035f4:	4249      	negs	r1, r1
 80035f6:	482a      	ldr	r0, [pc, #168]	; (80036a0 <LoRaWAN_Init+0x118>)
 80035f8:	f00d fa72 	bl	8010ae0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 80035fc:	2101      	movs	r1, #1
 80035fe:	4b29      	ldr	r3, [pc, #164]	; (80036a4 <LoRaWAN_Init+0x11c>)
 8003600:	002a      	movs	r2, r5
 8003602:	9400      	str	r4, [sp, #0]
 8003604:	4249      	negs	r1, r1
 8003606:	4828      	ldr	r0, [pc, #160]	; (80036a8 <LoRaWAN_Init+0x120>)
 8003608:	f00d fa6a 	bl	8010ae0 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 800360c:	21fa      	movs	r1, #250	; 0xfa
 800360e:	4821      	ldr	r0, [pc, #132]	; (8003694 <LoRaWAN_Init+0x10c>)
 8003610:	0049      	lsls	r1, r1, #1
 8003612:	f00d fb5b 	bl	8010ccc <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 8003616:	21fa      	movs	r1, #250	; 0xfa
 8003618:	4821      	ldr	r0, [pc, #132]	; (80036a0 <LoRaWAN_Init+0x118>)
 800361a:	0049      	lsls	r1, r1, #1
 800361c:	f00d fb56 	bl	8010ccc <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 8003620:	21fa      	movs	r1, #250	; 0xfa
 8003622:	4821      	ldr	r0, [pc, #132]	; (80036a8 <LoRaWAN_Init+0x120>)
 8003624:	0049      	lsls	r1, r1, #1
 8003626:	f00d fb51 	bl	8010ccc <UTIL_TIMER_SetPeriod>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800362a:	0021      	movs	r1, r4
 800362c:	0028      	movs	r0, r5
 800362e:	4a1f      	ldr	r2, [pc, #124]	; (80036ac <LoRaWAN_Init+0x124>)
 8003630:	f00d f952 	bl	80108d8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8003634:	0021      	movs	r1, r4
 8003636:	4a1e      	ldr	r2, [pc, #120]	; (80036b0 <LoRaWAN_Init+0x128>)
 8003638:	0038      	movs	r0, r7
 800363a:	f00d f94d 	bl	80108d8 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 800363e:	f000 f83f 	bl	80036c0 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks);
 8003642:	4d1c      	ldr	r5, [pc, #112]	; (80036b4 <LoRaWAN_Init+0x12c>)
 8003644:	0028      	movs	r0, r5
 8003646:	3008      	adds	r0, #8
 8003648:	f005 f9b8 	bl	80089bc <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 800364c:	0028      	movs	r0, r5
 800364e:	3028      	adds	r0, #40	; 0x28
 8003650:	f004 ff76 	bl	8008540 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8003654:	4814      	ldr	r0, [pc, #80]	; (80036a8 <LoRaWAN_Init+0x120>)
 8003656:	f00d faf7 	bl	8010c48 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType);
 800365a:	0038      	movs	r0, r7
 800365c:	f005 f8a0 	bl	80087a0 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8003660:	2101      	movs	r1, #1
 8003662:	0022      	movs	r2, r4
 8003664:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <LoRaWAN_Init+0x130>)
 8003666:	0030      	movs	r0, r6
 8003668:	9400      	str	r4, [sp, #0]
 800366a:	4249      	negs	r1, r1
 800366c:	f00d fa38 	bl	8010ae0 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 8003670:	4912      	ldr	r1, [pc, #72]	; (80036bc <LoRaWAN_Init+0x134>)
 8003672:	0030      	movs	r0, r6
 8003674:	f00d fb2a 	bl	8010ccc <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8003678:	0030      	movs	r0, r6
 800367a:	f00d fae5 	bl	8010c48 <UTIL_TIMER_Start>
}
 800367e:	b005      	add	sp, #20
 8003680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003682:	46c0      	nop			; (mov r8, r8)
 8003684:	08011b4f 	.word	0x08011b4f
 8003688:	08011b6f 	.word	0x08011b6f
 800368c:	08011b8f 	.word	0x08011b8f
 8003690:	0800334f 	.word	0x0800334f
 8003694:	200001d0 	.word	0x200001d0
 8003698:	200001b8 	.word	0x200001b8
 800369c:	08003345 	.word	0x08003345
 80036a0:	20000200 	.word	0x20000200
 80036a4:	08003359 	.word	0x08003359
 80036a8:	200001e8 	.word	0x200001e8
 80036ac:	0800869d 	.word	0x0800869d
 80036b0:	08003529 	.word	0x08003529
 80036b4:	20000000 	.word	0x20000000
 80036b8:	08003321 	.word	0x08003321
 80036bc:	00002710 	.word	0x00002710

080036c0 <LoraInfo_Init>:
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
  loraInfo.Region = 0;
  loraInfo.ClassB = 0;
  loraInfo.Kms = 0;
 80036c0:	2200      	movs	r2, #0
 80036c2:	4b04      	ldr	r3, [pc, #16]	; (80036d4 <LoraInfo_Init+0x14>)
 80036c4:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 80036c6:	3220      	adds	r2, #32
 80036c8:	605a      	str	r2, [r3, #4]
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
    while (1) {} /* At least one region shall be defined */
  }

#if ( LORAMAC_CLASSB_ENABLED == 1 )
  loraInfo.ClassB = 1;
 80036ca:	3a1f      	subs	r2, #31
 80036cc:	609a      	str	r2, [r3, #8]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 80036ce:	3202      	adds	r2, #2
 80036d0:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALISATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 80036d2:	4770      	bx	lr
 80036d4:	2000030c 	.word	0x2000030c

080036d8 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 80036d8:	4800      	ldr	r0, [pc, #0]	; (80036dc <LoraInfo_GetPtr+0x4>)
 80036da:	4770      	bx	lr
 80036dc:	2000030c 	.word	0x2000030c

080036e0 <MX_ADC_Init>:
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.LowPowerAutoPowerOff  = DISABLE;
  hadc1.Init.LowPowerFrequencyMode = ENABLE;
  hadc1.Init.LowPowerAutoWait      = DISABLE;
  hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
  hadc1.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 80036e0:	2107      	movs	r1, #7
  hadc1.Init.LowPowerFrequencyMode = ENABLE;
 80036e2:	2201      	movs	r2, #1
{
 80036e4:	b510      	push	{r4, lr}
  hadc1.Init.OversamplingMode      = DISABLE;
 80036e6:	4c13      	ldr	r4, [pc, #76]	; (8003734 <MX_ADC_Init+0x54>)
 80036e8:	2300      	movs	r3, #0
  hadc1.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 80036ea:	63a1      	str	r1, [r4, #56]	; 0x38
  hadc1.Instance  = ADC1;
 80036ec:	4912      	ldr	r1, [pc, #72]	; (8003738 <MX_ADC_Init+0x58>)
  hadc1.Init.LowPowerFrequencyMode = ENABLE;
 80036ee:	6362      	str	r2, [r4, #52]	; 0x34
  hadc1.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 80036f0:	6122      	str	r2, [r4, #16]
  hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ContinuousConvMode    = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 80036f2:	3203      	adds	r2, #3
  hadc1.Instance  = ADC1;
 80036f4:	6021      	str	r1, [r4, #0]
  hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 80036f6:	6162      	str	r2, [r4, #20]
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 80036f8:	2180      	movs	r1, #128	; 0x80
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80036fa:	0022      	movs	r2, r4
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 80036fc:	0609      	lsls	r1, r1, #24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80036fe:	322c      	adds	r2, #44	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003700:	0020      	movs	r0, r4
  hadc1.Init.ContinuousConvMode    = DISABLE;
 8003702:	8423      	strh	r3, [r4, #32]
  hadc1.Init.OversamplingMode      = DISABLE;
 8003704:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003706:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003708:	6061      	str	r1, [r4, #4]
  hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
 800370a:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 800370c:	60e3      	str	r3, [r4, #12]
  hadc1.Init.LowPowerAutoWait      = DISABLE;
 800370e:	61a3      	str	r3, [r4, #24]
  hadc1.Init.LowPowerAutoPowerOff  = DISABLE;
 8003710:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003712:	7013      	strb	r3, [r2, #0]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003714:	f001 fae6 	bl	8004ce4 <HAL_ADC_Init>
 8003718:	2800      	cmp	r0, #0
 800371a:	d001      	beq.n	8003720 <MX_ADC_Init+0x40>
  {
    Error_Handler();
 800371c:	f000 f944 	bl	80039a8 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8003720:	2100      	movs	r1, #0
 8003722:	0020      	movs	r0, r4
 8003724:	f001 fd0c 	bl	8005140 <HAL_ADCEx_Calibration_Start>
 8003728:	2800      	cmp	r0, #0
 800372a:	d001      	beq.n	8003730 <MX_ADC_Init+0x50>
  {
    Error_Handler();
 800372c:	f000 f93c 	bl	80039a8 <Error_Handler>
  }
}
 8003730:	bd10      	pop	{r4, pc}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	200013b8 	.word	0x200013b8
 8003738:	40012400 	.word	0x40012400

0800373c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{

  if (adcHandle->Instance == ADC1)
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <HAL_ADC_MspInit+0x18>)
 800373e:	6802      	ldr	r2, [r0, #0]
 8003740:	429a      	cmp	r2, r3
 8003742:	d105      	bne.n	8003750 <HAL_ADC_MspInit+0x14>
  {
    /* USER CODE BEGIN ADC_MspInit 0 */

    /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003744:	2380      	movs	r3, #128	; 0x80
 8003746:	4a04      	ldr	r2, [pc, #16]	; (8003758 <HAL_ADC_MspInit+0x1c>)
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800374c:	430b      	orrs	r3, r1
 800374e:	6353      	str	r3, [r2, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspInit 1 */

    /* USER CODE END ADC_MspInit 1 */
  }
}
 8003750:	4770      	bx	lr
 8003752:	46c0      	nop			; (mov r8, r8)
 8003754:	40012400 	.word	0x40012400
 8003758:	40021000 	.word	0x40021000

0800375c <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef *adcHandle)
{

  if (adcHandle->Instance == ADC1)
 800375c:	4b08      	ldr	r3, [pc, #32]	; (8003780 <HAL_ADC_MspDeInit+0x24>)
 800375e:	6802      	ldr	r2, [r0, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d10c      	bne.n	800377e <HAL_ADC_MspDeInit+0x22>
  {
    /* USER CODE BEGIN ADC_MspDeInit 0 */

    /* USER CODE END ADC_MspDeInit 0 */

    __HAL_RCC_ADC1_FORCE_RESET();
 8003764:	2280      	movs	r2, #128	; 0x80
 8003766:	4b07      	ldr	r3, [pc, #28]	; (8003784 <HAL_ADC_MspDeInit+0x28>)
 8003768:	0092      	lsls	r2, r2, #2
 800376a:	6a59      	ldr	r1, [r3, #36]	; 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 800376c:	4806      	ldr	r0, [pc, #24]	; (8003788 <HAL_ADC_MspDeInit+0x2c>)
    __HAL_RCC_ADC1_FORCE_RESET();
 800376e:	430a      	orrs	r2, r1
 8003770:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 8003772:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003774:	4001      	ands	r1, r0
 8003776:	6259      	str	r1, [r3, #36]	; 0x24
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8003778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800377a:	4002      	ands	r2, r0
 800377c:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspDeInit 1 */

    /* USER CODE END ADC_MspDeInit 1 */
  }
}
 800377e:	4770      	bx	lr
 8003780:	40012400 	.word	0x40012400
 8003784:	40021000 	.word	0x40021000
 8003788:	fffffdff 	.word	0xfffffdff

0800378c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800378c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 800378e:	2208      	movs	r2, #8
 8003790:	2100      	movs	r1, #0
{
 8003792:	0006      	movs	r6, r0
  ADC_ChannelConfTypeDef sConfig = {0};
 8003794:	4668      	mov	r0, sp
 8003796:	f00d fc4d 	bl	8011034 <memset>

  MX_ADC_Init();
 800379a:	f7ff ffa1 	bl	80036e0 <MX_ADC_Init>

  /* wait the the Vrefint used by adc is set */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 800379e:	2308      	movs	r3, #8
 80037a0:	491f      	ldr	r1, [pc, #124]	; (8003820 <ADC_ReadChannels+0x94>)
 80037a2:	684a      	ldr	r2, [r1, #4]
 80037a4:	421a      	tst	r2, r3
 80037a6:	d0fc      	beq.n	80037a2 <ADC_ReadChannels+0x16>

  __HAL_RCC_ADC1_CLK_ENABLE();
 80037a8:	2380      	movs	r3, #128	; 0x80
 80037aa:	4d1e      	ldr	r5, [pc, #120]	; (8003824 <ADC_ReadChannels+0x98>)

  /*calibrate ADC if any calibraiton hardware*/
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80037ac:	4c1e      	ldr	r4, [pc, #120]	; (8003828 <ADC_ReadChannels+0x9c>)
  __HAL_RCC_ADC1_CLK_ENABLE();
 80037ae:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4313      	orrs	r3, r2
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80037b4:	2100      	movs	r1, #0
  __HAL_RCC_ADC1_CLK_ENABLE();
 80037b6:	636b      	str	r3, [r5, #52]	; 0x34
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80037b8:	0020      	movs	r0, r4
 80037ba:	f001 fcc1 	bl	8005140 <HAL_ADCEx_Calibration_Start>

  /* Deselects all channels*/
  sConfig.Channel = ADC_CHANNEL_MASK;
 80037be:	4b1b      	ldr	r3, [pc, #108]	; (800382c <ADC_ReadChannels+0xa0>)
  sConfig.Rank = ADC_RANK_NONE;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80037c0:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_MASK;
 80037c2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_RANK_NONE;
 80037c4:	4b1a      	ldr	r3, [pc, #104]	; (8003830 <ADC_ReadChannels+0xa4>)
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80037c6:	0020      	movs	r0, r4
  sConfig.Rank = ADC_RANK_NONE;
 80037c8:	9301      	str	r3, [sp, #4]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80037ca:	f001 fc65 	bl	8005098 <HAL_ADC_ConfigChannel>

  /* Configure Regular Channel */
  sConfig.Channel = channel;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80037ce:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037d0:	4669      	mov	r1, sp
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80037d2:	015b      	lsls	r3, r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037d4:	0020      	movs	r0, r4
  sConfig.Channel = channel;
 80037d6:	9600      	str	r6, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80037d8:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037da:	f001 fc5d 	bl	8005098 <HAL_ADC_ConfigChannel>
 80037de:	2800      	cmp	r0, #0
 80037e0:	d001      	beq.n	80037e6 <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
 80037e2:	f000 f8e1 	bl	80039a8 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 80037e6:	0020      	movs	r0, r4
 80037e8:	f001 fbaa 	bl	8004f40 <HAL_ADC_Start>
 80037ec:	2800      	cmp	r0, #0
 80037ee:	d001      	beq.n	80037f4 <ADC_ReadChannels+0x68>
  {
    /* Start Error */
    Error_Handler();
 80037f0:	f000 f8da 	bl	80039a8 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80037f4:	2101      	movs	r1, #1
 80037f6:	0020      	movs	r0, r4
 80037f8:	4249      	negs	r1, r1
 80037fa:	f001 fbeb 	bl	8004fd4 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc1) ;   /* it calls also ADC_Disable() */
 80037fe:	0020      	movs	r0, r4
 8003800:	f001 fbca 	bl	8004f98 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc1);
 8003804:	0020      	movs	r0, r4
 8003806:	f001 fc43 	bl	8005090 <HAL_ADC_GetValue>
 800380a:	0006      	movs	r6, r0

  HAL_ADC_DeInit(&hadc1);
 800380c:	0020      	movs	r0, r4
 800380e:	f001 fb43 	bl	8004e98 <HAL_ADC_DeInit>

  __HAL_RCC_ADC1_CLK_DISABLE();
 8003812:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003814:	4a07      	ldr	r2, [pc, #28]	; (8003834 <ADC_ReadChannels+0xa8>)

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8003816:	0030      	movs	r0, r6
  __HAL_RCC_ADC1_CLK_DISABLE();
 8003818:	4013      	ands	r3, r2
 800381a:	636b      	str	r3, [r5, #52]	; 0x34
}
 800381c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	40007000 	.word	0x40007000
 8003824:	40021000 	.word	0x40021000
 8003828:	200013b8 	.word	0x200013b8
 800382c:	0007ffff 	.word	0x0007ffff
 8003830:	00001001 	.word	0x00001001
 8003834:	fffffdff 	.word	0xfffffdff

08003838 <SYS_InitMeasurement>:
  hadc1.Instance = ADC1;
 8003838:	4b01      	ldr	r3, [pc, #4]	; (8003840 <SYS_InitMeasurement+0x8>)
 800383a:	4a02      	ldr	r2, [pc, #8]	; (8003844 <SYS_InitMeasurement+0xc>)
 800383c:	601a      	str	r2, [r3, #0]
}
 800383e:	4770      	bx	lr
 8003840:	200013b8 	.word	0x200013b8
 8003844:	40012400 	.word	0x40012400

08003848 <SYS_GetBatteryLevel>:
{
 8003848:	b510      	push	{r4, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 800384a:	4807      	ldr	r0, [pc, #28]	; (8003868 <SYS_GetBatteryLevel+0x20>)
 800384c:	f7ff ff9e 	bl	800378c <ADC_ReadChannels>
 8003850:	0001      	movs	r1, r0
    batteryLevelmV = 0;
 8003852:	2000      	movs	r0, #0
  if (measuredLevel == 0)
 8003854:	4281      	cmp	r1, r0
 8003856:	d006      	beq.n	8003866 <SYS_GetBatteryLevel+0x1e>
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 8003858:	4b04      	ldr	r3, [pc, #16]	; (800386c <SYS_GetBatteryLevel+0x24>)
 800385a:	4805      	ldr	r0, [pc, #20]	; (8003870 <SYS_GetBatteryLevel+0x28>)
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	4358      	muls	r0, r3
 8003860:	f7fc fc82 	bl	8000168 <__udivsi3>
 8003864:	b280      	uxth	r0, r0
}
 8003866:	bd10      	pop	{r4, pc}
 8003868:	44020000 	.word	0x44020000
 800386c:	1ff80078 	.word	0x1ff80078
 8003870:	00000bb8 	.word	0x00000bb8

08003874 <SYS_GetTemperatureLevel>:
{
 8003874:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8003876:	f7ff ffe7 	bl	8003848 <SYS_GetBatteryLevel>
 800387a:	0005      	movs	r5, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 800387c:	480f      	ldr	r0, [pc, #60]	; (80038bc <SYS_GetTemperatureLevel+0x48>)
 800387e:	f7ff ff85 	bl	800378c <ADC_ReadChannels>
  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 8003882:	4b0f      	ldr	r3, [pc, #60]	; (80038c0 <SYS_GetTemperatureLevel+0x4c>)
 8003884:	4368      	muls	r0, r5
 8003886:	490f      	ldr	r1, [pc, #60]	; (80038c4 <SYS_GetTemperatureLevel+0x50>)
 8003888:	881c      	ldrh	r4, [r3, #0]
 800388a:	f7fc fc6d 	bl	8000168 <__udivsi3>
 800388e:	1b03      	subs	r3, r0, r4
 8003890:	2050      	movs	r0, #80	; 0x50
 8003892:	4358      	muls	r0, r3
 8003894:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <SYS_GetTemperatureLevel+0x54>)
 8003896:	0200      	lsls	r0, r0, #8
 8003898:	8819      	ldrh	r1, [r3, #0]
 800389a:	1b09      	subs	r1, r1, r4
 800389c:	f7fc fcee 	bl	800027c <__divsi3>
 80038a0:	23f0      	movs	r3, #240	; 0xf0
  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC >> 8);
 80038a2:	2201      	movs	r2, #1
  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 80038a4:	015b      	lsls	r3, r3, #5
 80038a6:	18c0      	adds	r0, r0, r3
 80038a8:	b204      	sxth	r4, r0
  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC >> 8);
 80038aa:	1223      	asrs	r3, r4, #8
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	2100      	movs	r1, #0
 80038b0:	0010      	movs	r0, r2
 80038b2:	4b06      	ldr	r3, [pc, #24]	; (80038cc <SYS_GetTemperatureLevel+0x58>)
 80038b4:	f00c fe4c 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
}
 80038b8:	0020      	movs	r0, r4
 80038ba:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80038bc:	48040000 	.word	0x48040000
 80038c0:	1ff8007a 	.word	0x1ff8007a
 80038c4:	00000bb8 	.word	0x00000bb8
 80038c8:	1ff8007e 	.word	0x1ff8007e
 80038cc:	08011be1 	.word	0x08011be1

080038d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80038d0:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */

  __HAL_RCC_DMA1_CLK_ENABLE();
 80038d2:	2001      	movs	r0, #1
 80038d4:	4a08      	ldr	r2, [pc, #32]	; (80038f8 <MX_DMA_Init+0x28>)
 80038d6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80038d8:	4301      	orrs	r1, r0
 80038da:	6311      	str	r1, [r2, #48]	; 0x30
 80038dc:	6b13      	ldr	r3, [r2, #48]	; 0x30

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80038de:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80038e0:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80038e2:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80038e4:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80038e6:	300a      	adds	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 80038e8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80038ea:	f001 fc79 	bl	80051e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80038ee:	200b      	movs	r0, #11
 80038f0:	f001 fca0 	bl	8005234 <HAL_NVIC_EnableIRQ>

}
 80038f4:	bd07      	pop	{r0, r1, r2, pc}
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	40021000 	.word	0x40021000

080038fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038fc:	b510      	push	{r4, lr}
 80038fe:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003900:	2220      	movs	r2, #32
 8003902:	2100      	movs	r1, #0
 8003904:	a808      	add	r0, sp, #32
 8003906:	f00d fb95 	bl	8011034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800390a:	2214      	movs	r2, #20
 800390c:	2100      	movs	r1, #0
 800390e:	a801      	add	r0, sp, #4
 8003910:	f00d fb90 	bl	8011034 <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
 8003914:	2300      	movs	r3, #0
 8003916:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 8003918:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 800391a:	2380      	movs	r3, #128	; 0x80
 800391c:	031b      	lsls	r3, r3, #12
 800391e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8003920:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8003922:	2202      	movs	r2, #2
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8003924:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003926:	2410      	movs	r4, #16
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8003928:	041b      	lsls	r3, r3, #16

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800392a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 800392c:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800392e:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003930:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8003932:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8003934:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003936:	f002 f829 	bl	800598c <HAL_RCC_OscConfig>
 800393a:	2800      	cmp	r0, #0
 800393c:	d000      	beq.n	8003940 <SystemClock_Config+0x44>
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 800393e:	e7fe      	b.n	800393e <SystemClock_Config+0x42>
  __HAL_RCC_PWR_CLK_ENABLE();
 8003940:	2380      	movs	r3, #128	; 0x80
 8003942:	4a11      	ldr	r2, [pc, #68]	; (8003988 <SystemClock_Config+0x8c>)
 8003944:	055b      	lsls	r3, r3, #21
 8003946:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8003948:	430b      	orrs	r3, r1
 800394a:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800394c:	4b0f      	ldr	r3, [pc, #60]	; (800398c <SystemClock_Config+0x90>)
 800394e:	4910      	ldr	r1, [pc, #64]	; (8003990 <SystemClock_Config+0x94>)
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	4011      	ands	r1, r2
 8003954:	2280      	movs	r2, #128	; 0x80
 8003956:	0112      	lsls	r2, r2, #4
 8003958:	430a      	orrs	r2, r1
 800395a:	601a      	str	r2, [r3, #0]
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 800395c:	6859      	ldr	r1, [r3, #4]
 800395e:	000a      	movs	r2, r1
 8003960:	4022      	ands	r2, r4
 8003962:	4221      	tst	r1, r4
 8003964:	d1fa      	bne.n	800395c <SystemClock_Config+0x60>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003966:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003968:	2101      	movs	r1, #1
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800396a:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800396c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800396e:	3b0c      	subs	r3, #12
 8003970:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003972:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003974:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003976:	9205      	str	r2, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003978:	f002 fa94 	bl	8005ea4 <HAL_RCC_ClockConfig>
 800397c:	2800      	cmp	r0, #0
 800397e:	d000      	beq.n	8003982 <SystemClock_Config+0x86>
  while (1)
 8003980:	e7fe      	b.n	8003980 <SystemClock_Config+0x84>
}
 8003982:	b014      	add	sp, #80	; 0x50
 8003984:	bd10      	pop	{r4, pc}
 8003986:	46c0      	nop			; (mov r8, r8)
 8003988:	40021000 	.word	0x40021000
 800398c:	40007000 	.word	0x40007000
 8003990:	ffffe7ff 	.word	0xffffe7ff

08003994 <main>:
{
 8003994:	b510      	push	{r4, lr}
  HAL_Init();
 8003996:	f001 f8af 	bl	8004af8 <HAL_Init>
  SystemClock_Config();
 800399a:	f7ff ffaf 	bl	80038fc <SystemClock_Config>
  MX_LoRaWAN_Init();
 800399e:	f7ff fcb3 	bl	8003308 <MX_LoRaWAN_Init>
    MX_LoRaWAN_Process();
 80039a2:	f7ff fcb7 	bl	8003314 <MX_LoRaWAN_Process>
  while (1)
 80039a6:	e7fc      	b.n	80039a2 <main+0xe>

080039a8 <Error_Handler>:
  while (1)
 80039a8:	e7fe      	b.n	80039a8 <Error_Handler>
	...

080039ac <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80039ac:	b530      	push	{r4, r5, lr}
  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 80039ae:	2400      	movs	r4, #0
{
 80039b0:	b091      	sub	sp, #68	; 0x44
  RTC_TimeTypeDef sTime = {0};
 80039b2:	2214      	movs	r2, #20
 80039b4:	2100      	movs	r1, #0
 80039b6:	a801      	add	r0, sp, #4
 80039b8:	f00d fb3c 	bl	8011034 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 80039bc:	2228      	movs	r2, #40	; 0x28
 80039be:	0021      	movs	r1, r4
 80039c0:	a806      	add	r0, sp, #24
  RTC_DateTypeDef sDate = {0};
 80039c2:	9400      	str	r4, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80039c4:	f00d fb36 	bl	8011034 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80039c8:	4d24      	ldr	r5, [pc, #144]	; (8003a5c <MX_RTC_Init+0xb0>)
 80039ca:	4b25      	ldr	r3, [pc, #148]	; (8003a60 <MX_RTC_Init+0xb4>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80039cc:	0028      	movs	r0, r5
  hrtc.Instance = RTC;
 80039ce:	602b      	str	r3, [r5, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80039d0:	231f      	movs	r3, #31
 80039d2:	60ab      	str	r3, [r5, #8]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 80039d4:	4b23      	ldr	r3, [pc, #140]	; (8003a64 <MX_RTC_Init+0xb8>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80039d6:	606c      	str	r4, [r5, #4]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 80039d8:	60eb      	str	r3, [r5, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80039da:	612c      	str	r4, [r5, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80039dc:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80039de:	61ac      	str	r4, [r5, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80039e0:	61ec      	str	r4, [r5, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80039e2:	f002 fcf3 	bl	80063cc <HAL_RTC_Init>
 80039e6:	42a0      	cmp	r0, r4
 80039e8:	d001      	beq.n	80039ee <MX_RTC_Init+0x42>
  {
    Error_Handler();
 80039ea:	f7ff ffdd 	bl	80039a8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80039ee:	466b      	mov	r3, sp
  sTime.Minutes = 0;
  sTime.Seconds = 0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80039f0:	2200      	movs	r2, #0
 80039f2:	0028      	movs	r0, r5
  sTime.Hours = 0;
 80039f4:	809c      	strh	r4, [r3, #4]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80039f6:	a901      	add	r1, sp, #4
  sTime.Seconds = 0;
 80039f8:	719c      	strb	r4, [r3, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80039fa:	9404      	str	r4, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80039fc:	9405      	str	r4, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80039fe:	f002 fd4d 	bl	800649c <HAL_RTC_SetTime>
 8003a02:	2800      	cmp	r0, #0
 8003a04:	d001      	beq.n	8003a0a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8003a06:	f7ff ffcf 	bl	80039a8 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003a0a:	4b17      	ldr	r3, [pc, #92]	; (8003a68 <MX_RTC_Init+0xbc>)
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 1;
  sDate.Year = 0;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	4669      	mov	r1, sp
 8003a10:	0028      	movs	r0, r5
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003a12:	9300      	str	r3, [sp, #0]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003a14:	f002 fdc8 	bl	80065a8 <HAL_RTC_SetDate>
 8003a18:	2800      	cmp	r0, #0
 8003a1a:	d001      	beq.n	8003a20 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8003a1c:	f7ff ffc4 	bl	80039a8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8003a20:	2200      	movs	r2, #0
 8003a22:	466b      	mov	r3, sp
 8003a24:	831a      	strh	r2, [r3, #24]
  sAlarm.AlarmTime.Minutes = 0;
  sAlarm.AlarmTime.Seconds = 0;
 8003a26:	769a      	strb	r2, [r3, #26]
  sAlarm.AlarmTime.SubSeconds = 0;
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 8003a28:	23a0      	movs	r3, #160	; 0xa0
 8003a2a:	051b      	lsls	r3, r3, #20
 8003a2c:	930c      	str	r3, [sp, #48]	; 0x30
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
  sAlarm.AlarmDateWeekDay = 30;
 8003a2e:	2319      	movs	r3, #25
 8003a30:	211e      	movs	r1, #30
 8003a32:	446b      	add	r3, sp
 8003a34:	77d9      	strb	r1, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 8003a36:	2380      	movs	r3, #128	; 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003a38:	0028      	movs	r0, r5
  sAlarm.Alarm = RTC_ALARM_A;
 8003a3a:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003a3c:	a906      	add	r1, sp, #24
  sAlarm.AlarmTime.SubSeconds = 0;
 8003a3e:	9207      	str	r2, [sp, #28]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003a40:	9209      	str	r2, [sp, #36]	; 0x24
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003a42:	920a      	str	r2, [sp, #40]	; 0x28
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003a44:	920b      	str	r2, [sp, #44]	; 0x2c
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003a46:	920d      	str	r2, [sp, #52]	; 0x34
  sAlarm.Alarm = RTC_ALARM_A;
 8003a48:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003a4a:	f002 fe19 	bl	8006680 <HAL_RTC_SetAlarm_IT>
 8003a4e:	2800      	cmp	r0, #0
 8003a50:	d001      	beq.n	8003a56 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8003a52:	f7ff ffa9 	bl	80039a8 <Error_Handler>
  }

}
 8003a56:	b011      	add	sp, #68	; 0x44
 8003a58:	bd30      	pop	{r4, r5, pc}
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	2000145c 	.word	0x2000145c
 8003a60:	40002800 	.word	0x40002800
 8003a64:	000003ff 	.word	0x000003ff
 8003a68:	00010101 	.word	0x00010101

08003a6c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 8003a6c:	b510      	push	{r4, lr}
 8003a6e:	0004      	movs	r4, r0
 8003a70:	b08e      	sub	sp, #56	; 0x38

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a72:	2238      	movs	r2, #56	; 0x38
 8003a74:	2100      	movs	r1, #0
 8003a76:	4668      	mov	r0, sp
 8003a78:	f00d fadc 	bl	8011034 <memset>
  if (rtcHandle->Instance == RTC)
 8003a7c:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <HAL_RTC_MspInit+0x58>)
 8003a7e:	6822      	ldr	r2, [r4, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d11c      	bne.n	8003abe <HAL_RTC_MspInit+0x52>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8003a84:	2304      	movs	r3, #4
 8003a86:	9300      	str	r3, [sp, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003a88:	33fc      	adds	r3, #252	; 0xfc
 8003a8a:	9302      	str	r3, [sp, #8]
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
 8003a8c:	2300      	movs	r3, #0
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a8e:	4668      	mov	r0, sp
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
 8003a90:	9305      	str	r3, [sp, #20]
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 8003a92:	9301      	str	r3, [sp, #4]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003a94:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a96:	f001 ff79 	bl	800598c <HAL_RCC_OscConfig>
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	d001      	beq.n	8003aa2 <HAL_RTC_MspInit+0x36>
    {
      Error_Handler();
 8003a9e:	f7ff ff83 	bl	80039a8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003aa2:	2380      	movs	r3, #128	; 0x80
 8003aa4:	4a08      	ldr	r2, [pc, #32]	; (8003ac8 <HAL_RTC_MspInit+0x5c>)
 8003aa6:	02db      	lsls	r3, r3, #11
 8003aa8:	6d11      	ldr	r1, [r2, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003aaa:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 8003aac:	430b      	orrs	r3, r1
 8003aae:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	0011      	movs	r1, r2
 8003ab4:	f001 fb94 	bl	80051e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8003ab8:	2002      	movs	r0, #2
 8003aba:	f001 fbbb 	bl	8005234 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 8003abe:	b00e      	add	sp, #56	; 0x38
 8003ac0:	bd10      	pop	{r4, pc}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	40002800 	.word	0x40002800
 8003ac8:	40021000 	.word	0x40021000

08003acc <RTC_IF_GetTimerContext>:

uint32_t RTC_IF_GetTimerContext(void)
{
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8003acc:	4b01      	ldr	r3, [pc, #4]	; (8003ad4 <RTC_IF_GetTimerContext+0x8>)
 8003ace:	6818      	ldr	r0, [r3, #0]
}
 8003ad0:	4770      	bx	lr
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	2000031c 	.word	0x2000031c

08003ad8 <RTC_IF_GetMinimumTimeout>:
}

uint32_t RTC_IF_GetMinimumTimeout(void)
{
  return (MIN_ALARM_DELAY);
}
 8003ad8:	2003      	movs	r0, #3
 8003ada:	4770      	bx	lr

08003adc <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8003adc:	b510      	push	{r4, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8003ade:	0e41      	lsrs	r1, r0, #25
 8003ae0:	227d      	movs	r2, #125	; 0x7d
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	01c0      	lsls	r0, r0, #7
 8003ae6:	f7fc fd2d 	bl	8000544 <__aeabi_uldivmod>
}
 8003aea:	bd10      	pop	{r4, pc}

08003aec <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 8003aec:	b510      	push	{r4, lr}
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8003aee:	227d      	movs	r2, #125	; 0x7d
 8003af0:	2300      	movs	r3, #0
 8003af2:	2100      	movs	r1, #0
 8003af4:	f7fc fd46 	bl	8000584 <__aeabi_lmul>
 8003af8:	0649      	lsls	r1, r1, #25
 8003afa:	09c0      	lsrs	r0, r0, #7
 8003afc:	4308      	orrs	r0, r1
}
 8003afe:	bd10      	pop	{r4, pc}

08003b00 <RTC_IF_StopTimer>:
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8003b00:	4806      	ldr	r0, [pc, #24]	; (8003b1c <RTC_IF_StopTimer+0x1c>)
 8003b02:	4b07      	ldr	r3, [pc, #28]	; (8003b20 <RTC_IF_StopTimer+0x20>)
 8003b04:	6801      	ldr	r1, [r0, #0]
{
 8003b06:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8003b08:	68ca      	ldr	r2, [r1, #12]
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	60cb      	str	r3, [r1, #12]
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003b10:	2180      	movs	r1, #128	; 0x80
 8003b12:	0049      	lsls	r1, r1, #1
 8003b14:	f002 fb92 	bl	800623c <HAL_RTC_DeactivateAlarm>
}
 8003b18:	2000      	movs	r0, #0
 8003b1a:	bd10      	pop	{r4, pc}
 8003b1c:	2000145c 	.word	0x2000145c
 8003b20:	fffffe7f 	.word	0xfffffe7f

08003b24 <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 8003b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t calendarValue = 0;
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8003b26:	4e25      	ldr	r6, [pc, #148]	; (8003bbc <RTC_GetCalendarValue+0x98>)
{
 8003b28:	0005      	movs	r5, r0
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	0030      	movs	r0, r6
{
 8003b2e:	000c      	movs	r4, r1
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8003b30:	f002 fe86 	bl	8006840 <HAL_RTC_GetTime>
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8003b34:	4f22      	ldr	r7, [pc, #136]	; (8003bc0 <RTC_GetCalendarValue+0x9c>)

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 8003b36:	2200      	movs	r2, #0
 8003b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3a:	0029      	movs	r1, r5
 8003b3c:	0030      	movs	r0, r6
 8003b3e:	9301      	str	r3, [sp, #4]
 8003b40:	f002 fea8 	bl	8006894 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8003b44:	2200      	movs	r2, #0
 8003b46:	0021      	movs	r1, r4
 8003b48:	0030      	movs	r0, r6
 8003b4a:	f002 fe79 	bl	8006840 <HAL_RTC_GetTime>
 8003b4e:	466b      	mov	r3, sp
 8003b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b52:	889b      	ldrh	r3, [r3, #4]
 8003b54:	b292      	uxth	r2, r2

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d1ec      	bne.n	8003b34 <RTC_GetCalendarValue+0x10>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8003b5a:	2103      	movs	r1, #3
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8003b5c:	78ea      	ldrb	r2, [r5, #3]
 8003b5e:	4e19      	ldr	r6, [pc, #100]	; (8003bc4 <RTC_GetCalendarValue+0xa0>)

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8003b60:	786f      	ldrb	r7, [r5, #1]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8003b62:	4356      	muls	r6, r2
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8003b64:	400a      	ands	r2, r1
 8003b66:	4253      	negs	r3, r2
 8003b68:	4153      	adcs	r3, r2
 8003b6a:	4a17      	ldr	r2, [pc, #92]	; (8003bc8 <RTC_GetCalendarValue+0xa4>)
 8003b6c:	425b      	negs	r3, r3
 8003b6e:	4013      	ands	r3, r2
 8003b70:	4a16      	ldr	r2, [pc, #88]	; (8003bcc <RTC_GetCalendarValue+0xa8>)
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8003b72:	3f01      	subs	r7, #1
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8003b74:	189b      	adds	r3, r3, r2
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8003b76:	223d      	movs	r2, #61	; 0x3d
 8003b78:	437a      	muls	r2, r7
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8003b7a:	007f      	lsls	r7, r7, #1
 8003b7c:	40fb      	lsrs	r3, r7
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8003b7e:	3201      	adds	r2, #1
 8003b80:	0fd0      	lsrs	r0, r2, #31
 8003b82:	1882      	adds	r2, r0, r2

  calendarValue += (RTC_DateStruct->Date - 1);
 8003b84:	78a8      	ldrb	r0, [r5, #2]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8003b86:	3603      	adds	r6, #3
 8003b88:	3801      	subs	r0, #1
 8003b8a:	08b6      	lsrs	r6, r6, #2
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8003b8c:	1052      	asrs	r2, r2, #1
 8003b8e:	1986      	adds	r6, r0, r6
 8003b90:	1996      	adds	r6, r2, r6

  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;
 8003b92:	480f      	ldr	r0, [pc, #60]	; (8003bd0 <RTC_GetCalendarValue+0xac>)
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8003b94:	400b      	ands	r3, r1
  calendarValue += (RTC_DateStruct->Date - 1);
 8003b96:	1af3      	subs	r3, r6, r3
  calendarValue *= SECONDS_IN_1DAY;
 8003b98:	4343      	muls	r3, r0

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8003b9a:	20e1      	movs	r0, #225	; 0xe1
 8003b9c:	7822      	ldrb	r2, [r4, #0]
 8003b9e:	0100      	lsls	r0, r0, #4
 8003ba0:	4350      	muls	r0, r2
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8003ba2:	223c      	movs	r2, #60	; 0x3c
 8003ba4:	7861      	ldrb	r1, [r4, #1]
 8003ba6:	434a      	muls	r2, r1
 8003ba8:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8003baa:	78a2      	ldrb	r2, [r4, #2]
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8003bac:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8003bae:	18c0      	adds	r0, r0, r3

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 8003bb0:	6863      	ldr	r3, [r4, #4]
 8003bb2:	0280      	lsls	r0, r0, #10
 8003bb4:	1ac0      	subs	r0, r0, r3
 8003bb6:	4b07      	ldr	r3, [pc, #28]	; (8003bd4 <RTC_GetCalendarValue+0xb0>)
 8003bb8:	18c0      	adds	r0, r0, r3

  return (calendarValue);
}
 8003bba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003bbc:	2000145c 	.word	0x2000145c
 8003bc0:	40002800 	.word	0x40002800
 8003bc4:	000005b5 	.word	0x000005b5
 8003bc8:	ffaaaab0 	.word	0xffaaaab0
 8003bcc:	0099aaa0 	.word	0x0099aaa0
 8003bd0:	00015180 	.word	0x00015180
 8003bd4:	000003ff 	.word	0x000003ff

08003bd8 <RTC_IF_SetTimerContext>:
{
 8003bd8:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 8003bda:	4c04      	ldr	r4, [pc, #16]	; (8003bec <RTC_IF_SetTimerContext+0x14>)
 8003bdc:	0020      	movs	r0, r4
 8003bde:	1d21      	adds	r1, r4, #4
 8003be0:	3018      	adds	r0, #24
 8003be2:	f7ff ff9f 	bl	8003b24 <RTC_GetCalendarValue>
 8003be6:	6020      	str	r0, [r4, #0]
}
 8003be8:	bd10      	pop	{r4, pc}
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	2000031c 	.word	0x2000031c

08003bf0 <RTC_IF_GetTimerElapsedTime>:
{
 8003bf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003bf2:	4668      	mov	r0, sp
 8003bf4:	a901      	add	r1, sp, #4
 8003bf6:	f7ff ff95 	bl	8003b24 <RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 8003bfa:	4b02      	ldr	r3, [pc, #8]	; (8003c04 <RTC_IF_GetTimerElapsedTime+0x14>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	1ac0      	subs	r0, r0, r3
}
 8003c00:	b007      	add	sp, #28
 8003c02:	bd00      	pop	{pc}
 8003c04:	2000031c 	.word	0x2000031c

08003c08 <RTC_IF_StartTimer>:
{
 8003c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	0006      	movs	r6, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8003c0e:	f7ff ffef 	bl	8003bf0 <RTC_IF_GetTimerElapsedTime>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 8003c12:	2100      	movs	r1, #0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8003c14:	1a30      	subs	r0, r6, r0
 8003c16:	2803      	cmp	r0, #3
 8003c18:	d800      	bhi.n	8003c1c <RTC_IF_StartTimer+0x14>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	2002      	movs	r0, #2
 8003c1e:	f00c fd4f 	bl	80106c0 <UTIL_LPM_SetStopMode>
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 8003c22:	f00c fd79 	bl	8010718 <UTIL_LPM_GetMode>
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8003c26:	4c41      	ldr	r4, [pc, #260]	; (8003d2c <RTC_IF_StartTimer+0x124>)
 8003c28:	7963      	ldrb	r3, [r4, #5]
 8003c2a:	68a7      	ldr	r7, [r4, #8]
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	79a3      	ldrb	r3, [r4, #6]
 8003c30:	7925      	ldrb	r5, [r4, #4]
 8003c32:	9301      	str	r3, [sp, #4]
 8003c34:	79e3      	ldrb	r3, [r4, #7]
 8003c36:	9302      	str	r3, [sp, #8]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8003c38:	7e63      	ldrb	r3, [r4, #25]
 8003c3a:	9303      	str	r3, [sp, #12]
 8003c3c:	7ea3      	ldrb	r3, [r4, #26]
 8003c3e:	9304      	str	r3, [sp, #16]
 8003c40:	7ee3      	ldrb	r3, [r4, #27]
 8003c42:	9305      	str	r3, [sp, #20]
  RTC_IF_StopTimer();
 8003c44:	f7ff ff5c 	bl	8003b00 <RTC_IF_StopTimer>
  rtcAlarmDays =  RTC_DateStruct.Date;
 8003c48:	4669      	mov	r1, sp
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8003c4a:	4a39      	ldr	r2, [pc, #228]	; (8003d30 <RTC_IF_StartTimer+0x128>)
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8003c4c:	05b3      	lsls	r3, r6, #22
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8003c4e:	1bd7      	subs	r7, r2, r7
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8003c50:	0d9b      	lsrs	r3, r3, #22
  rtcAlarmDays =  RTC_DateStruct.Date;
 8003c52:	8a08      	ldrh	r0, [r1, #16]
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8003c54:	18fb      	adds	r3, r7, r3
 8003c56:	9204      	str	r2, [sp, #16]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8003c58:	4a36      	ldr	r2, [pc, #216]	; (8003d34 <RTC_IF_StartTimer+0x12c>)
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8003c5a:	b29b      	uxth	r3, r3
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 8003c5c:	0ab6      	lsrs	r6, r6, #10
  while (timeoutValue >= SECONDS_IN_1DAY)
 8003c5e:	4296      	cmp	r6, r2
 8003c60:	d843      	bhi.n	8003cea <RTC_IF_StartTimer+0xe2>
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8003c62:	22e1      	movs	r2, #225	; 0xe1
  rtcAlarmHours = RTC_TimeStruct.Hours;
 8003c64:	b2ad      	uxth	r5, r5
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8003c66:	0112      	lsls	r2, r2, #4
 8003c68:	4296      	cmp	r6, r2
 8003c6a:	d243      	bcs.n	8003cf4 <RTC_IF_StartTimer+0xec>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8003c6c:	466a      	mov	r2, sp
 8003c6e:	8817      	ldrh	r7, [r2, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8003c70:	2e3b      	cmp	r6, #59	; 0x3b
 8003c72:	d844      	bhi.n	8003cfe <RTC_IF_StartTimer+0xf6>
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 8003c74:	0a9a      	lsrs	r2, r3, #10
 8003c76:	0291      	lsls	r1, r2, #10
 8003c78:	1a5b      	subs	r3, r3, r1
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	9b01      	ldr	r3, [sp, #4]
 8003c80:	18d2      	adds	r2, r2, r3
 8003c82:	1996      	adds	r6, r2, r6
 8003c84:	b2b6      	uxth	r6, r6
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8003c86:	2e3b      	cmp	r6, #59	; 0x3b
 8003c88:	d83d      	bhi.n	8003d06 <RTC_IF_StartTimer+0xfe>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8003c8a:	2f3b      	cmp	r7, #59	; 0x3b
 8003c8c:	d840      	bhi.n	8003d10 <RTC_IF_StartTimer+0x108>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8003c8e:	2d17      	cmp	r5, #23
 8003c90:	d843      	bhi.n	8003d1a <RTC_IF_StartTimer+0x112>
  if (RTC_DateStruct.Year % 4 == 0)
 8003c92:	9a03      	ldr	r2, [sp, #12]
 8003c94:	9905      	ldr	r1, [sp, #20]
 8003c96:	4b28      	ldr	r3, [pc, #160]	; (8003d38 <RTC_IF_StartTimer+0x130>)
 8003c98:	3a01      	subs	r2, #1
 8003c9a:	0789      	lsls	r1, r1, #30
 8003c9c:	d142      	bne.n	8003d24 <RTC_IF_StartTimer+0x11c>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8003c9e:	5c99      	ldrb	r1, [r3, r2]
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8003ca0:	4288      	cmp	r0, r1
 8003ca2:	d902      	bls.n	8003caa <RTC_IF_StartTimer+0xa2>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8003ca4:	f7fc fbd0 	bl	8000448 <__aeabi_idivmod>
 8003ca8:	b288      	uxth	r0, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8003caa:	9a00      	ldr	r2, [sp, #0]
 8003cac:	9b04      	ldr	r3, [sp, #16]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 8003cae:	7725      	strb	r5, [r4, #28]
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8003cb0:	1a9b      	subs	r3, r3, r2
 8003cb2:	6223      	str	r3, [r4, #32]
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 8003cb4:	23a0      	movs	r3, #160	; 0xa0
 8003cb6:	051b      	lsls	r3, r3, #20
 8003cb8:	6363      	str	r3, [r4, #52]	; 0x34
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 8003cba:	0023      	movs	r3, r4
 8003cbc:	333c      	adds	r3, #60	; 0x3c
 8003cbe:	7018      	strb	r0, [r3, #0]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8003cc0:	9b02      	ldr	r3, [sp, #8]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003cc2:	2500      	movs	r5, #0
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8003cc4:	77e3      	strb	r3, [r4, #31]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 8003cc6:	0021      	movs	r1, r4
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8003cc8:	2380      	movs	r3, #128	; 0x80
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8003cca:	002a      	movs	r2, r5
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8003ccc:	005b      	lsls	r3, r3, #1
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 8003cce:	311c      	adds	r1, #28
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8003cd0:	481a      	ldr	r0, [pc, #104]	; (8003d3c <RTC_IF_StartTimer+0x134>)
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8003cd2:	77a6      	strb	r6, [r4, #30]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 8003cd4:	7767      	strb	r7, [r4, #29]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003cd6:	63a5      	str	r5, [r4, #56]	; 0x38
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 8003cd8:	6325      	str	r5, [r4, #48]	; 0x30
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8003cda:	6423      	str	r3, [r4, #64]	; 0x40
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003cdc:	62a5      	str	r5, [r4, #40]	; 0x28
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003cde:	62e5      	str	r5, [r4, #44]	; 0x2c
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8003ce0:	f002 fcce 	bl	8006680 <HAL_RTC_SetAlarm_IT>
}
 8003ce4:	0028      	movs	r0, r5
 8003ce6:	b007      	add	sp, #28
 8003ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    timeoutValue -= SECONDS_IN_1DAY;
 8003cea:	4915      	ldr	r1, [pc, #84]	; (8003d40 <RTC_IF_StartTimer+0x138>)
    rtcAlarmDays++;
 8003cec:	3001      	adds	r0, #1
    timeoutValue -= SECONDS_IN_1DAY;
 8003cee:	1876      	adds	r6, r6, r1
    rtcAlarmDays++;
 8003cf0:	b280      	uxth	r0, r0
 8003cf2:	e7b4      	b.n	8003c5e <RTC_IF_StartTimer+0x56>
    timeoutValue -= SECONDS_IN_1HOUR;
 8003cf4:	4913      	ldr	r1, [pc, #76]	; (8003d44 <RTC_IF_StartTimer+0x13c>)
    rtcAlarmHours++;
 8003cf6:	3501      	adds	r5, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 8003cf8:	1876      	adds	r6, r6, r1
    rtcAlarmHours++;
 8003cfa:	b2ad      	uxth	r5, r5
 8003cfc:	e7b4      	b.n	8003c68 <RTC_IF_StartTimer+0x60>
    rtcAlarmMinutes++;
 8003cfe:	3701      	adds	r7, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 8003d00:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmMinutes++;
 8003d02:	b2bf      	uxth	r7, r7
 8003d04:	e7b4      	b.n	8003c70 <RTC_IF_StartTimer+0x68>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8003d06:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmMinutes++;
 8003d08:	3701      	adds	r7, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8003d0a:	b2b6      	uxth	r6, r6
    rtcAlarmMinutes++;
 8003d0c:	b2bf      	uxth	r7, r7
 8003d0e:	e7ba      	b.n	8003c86 <RTC_IF_StartTimer+0x7e>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8003d10:	3f3c      	subs	r7, #60	; 0x3c
    rtcAlarmHours++;
 8003d12:	3501      	adds	r5, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8003d14:	b2bf      	uxth	r7, r7
    rtcAlarmHours++;
 8003d16:	b2ad      	uxth	r5, r5
 8003d18:	e7b7      	b.n	8003c8a <RTC_IF_StartTimer+0x82>
    rtcAlarmHours -= HOURS_IN_1DAY;
 8003d1a:	3d18      	subs	r5, #24
    rtcAlarmDays++;
 8003d1c:	3001      	adds	r0, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 8003d1e:	b2ad      	uxth	r5, r5
    rtcAlarmDays++;
 8003d20:	b280      	uxth	r0, r0
 8003d22:	e7b4      	b.n	8003c8e <RTC_IF_StartTimer+0x86>
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8003d24:	189b      	adds	r3, r3, r2
 8003d26:	7b19      	ldrb	r1, [r3, #12]
 8003d28:	e7ba      	b.n	8003ca0 <RTC_IF_StartTimer+0x98>
 8003d2a:	46c0      	nop			; (mov r8, r8)
 8003d2c:	2000031c 	.word	0x2000031c
 8003d30:	000003ff 	.word	0x000003ff
 8003d34:	0001517f 	.word	0x0001517f
 8003d38:	08011188 	.word	0x08011188
 8003d3c:	2000145c 	.word	0x2000145c
 8003d40:	fffeae80 	.word	0xfffeae80
 8003d44:	fffff1f0 	.word	0xfffff1f0

08003d48 <RTC_IF_GetTime>:
{
 8003d48:	b530      	push	{r4, r5, lr}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	0005      	movs	r5, r0
  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003d4e:	a901      	add	r1, sp, #4
 8003d50:	4668      	mov	r0, sp
 8003d52:	f7ff fee7 	bl	8003b24 <RTC_GetCalendarValue>
 8003d56:	0004      	movs	r4, r0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8003d58:	0580      	lsls	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8003d5a:	227d      	movs	r2, #125	; 0x7d
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	2100      	movs	r1, #0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8003d60:	0d80      	lsrs	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8003d62:	f7fc fc0f 	bl	8000584 <__aeabi_lmul>
 8003d66:	09c0      	lsrs	r0, r0, #7
  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 8003d68:	8028      	strh	r0, [r5, #0]
  uint32_t seconds = (uint32_t)(calendarValue >> RTC_N_PREDIV_S);
 8003d6a:	0aa0      	lsrs	r0, r4, #10
}
 8003d6c:	b007      	add	sp, #28
 8003d6e:	bd30      	pop	{r4, r5, pc}

08003d70 <RTC_IF_BkUp_Write_Seconds>:
{
 8003d70:	b510      	push	{r4, lr}
 8003d72:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8003d74:	2100      	movs	r1, #0
 8003d76:	4802      	ldr	r0, [pc, #8]	; (8003d80 <RTC_IF_BkUp_Write_Seconds+0x10>)
 8003d78:	f002 fdae 	bl	80068d8 <HAL_RTCEx_BKUPWrite>
}
 8003d7c:	bd10      	pop	{r4, pc}
 8003d7e:	46c0      	nop			; (mov r8, r8)
 8003d80:	2000145c 	.word	0x2000145c

08003d84 <RTC_IF_BkUp_Write_SubSeconds>:
{
 8003d84:	b510      	push	{r4, lr}
 8003d86:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8003d88:	2101      	movs	r1, #1
 8003d8a:	4802      	ldr	r0, [pc, #8]	; (8003d94 <RTC_IF_BkUp_Write_SubSeconds+0x10>)
 8003d8c:	f002 fda4 	bl	80068d8 <HAL_RTCEx_BKUPWrite>
}
 8003d90:	bd10      	pop	{r4, pc}
 8003d92:	46c0      	nop			; (mov r8, r8)
 8003d94:	2000145c 	.word	0x2000145c

08003d98 <RTC_IF_BkUp_Read_Seconds>:
{
 8003d98:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	4801      	ldr	r0, [pc, #4]	; (8003da4 <RTC_IF_BkUp_Read_Seconds+0xc>)
 8003d9e:	f002 fda1 	bl	80068e4 <HAL_RTCEx_BKUPRead>
}
 8003da2:	bd10      	pop	{r4, pc}
 8003da4:	2000145c 	.word	0x2000145c

08003da8 <RTC_IF_BkUp_Read_SubSeconds>:
{
 8003da8:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8003daa:	2101      	movs	r1, #1
 8003dac:	4801      	ldr	r0, [pc, #4]	; (8003db4 <RTC_IF_BkUp_Read_SubSeconds+0xc>)
 8003dae:	f002 fd99 	bl	80068e4 <HAL_RTCEx_BKUPRead>
}
 8003db2:	bd10      	pop	{r4, pc}
 8003db4:	2000145c 	.word	0x2000145c

08003db8 <RTC_IF_Init>:
{
 8003db8:	b530      	push	{r4, r5, lr}
  if (RTC_Initalized == false)
 8003dba:	4c11      	ldr	r4, [pc, #68]	; (8003e00 <RTC_IF_Init+0x48>)
{
 8003dbc:	b08b      	sub	sp, #44	; 0x2c
  if (RTC_Initalized == false)
 8003dbe:	3444      	adds	r4, #68	; 0x44
 8003dc0:	7823      	ldrb	r3, [r4, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d119      	bne.n	8003dfa <RTC_IF_Init+0x42>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003dc6:	3320      	adds	r3, #32
 8003dc8:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003dca:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003dcc:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003dce:	025b      	lsls	r3, r3, #9
 8003dd0:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003dd2:	f002 f955 	bl	8006080 <HAL_RCCEx_PeriphCLKConfig>
 8003dd6:	2800      	cmp	r0, #0
 8003dd8:	d000      	beq.n	8003ddc <RTC_IF_Init+0x24>
      while (1);
 8003dda:	e7fe      	b.n	8003dda <RTC_IF_Init+0x22>
    MX_RTC_Init();
 8003ddc:	f7ff fde6 	bl	80039ac <MX_RTC_Init>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003de0:	2180      	movs	r1, #128	; 0x80
 8003de2:	4d08      	ldr	r5, [pc, #32]	; (8003e04 <RTC_IF_Init+0x4c>)
 8003de4:	0049      	lsls	r1, r1, #1
 8003de6:	0028      	movs	r0, r5
 8003de8:	f002 fa28 	bl	800623c <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8003dec:	0028      	movs	r0, r5
 8003dee:	f002 fd7f 	bl	80068f0 <HAL_RTCEx_EnableBypassShadow>
    RTC_IF_SetTimerContext();
 8003df2:	f7ff fef1 	bl	8003bd8 <RTC_IF_SetTimerContext>
    RTC_Initalized = true;
 8003df6:	2301      	movs	r3, #1
 8003df8:	7023      	strb	r3, [r4, #0]
}
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	b00b      	add	sp, #44	; 0x2c
 8003dfe:	bd30      	pop	{r4, r5, pc}
 8003e00:	2000031c 	.word	0x2000031c
 8003e04:	2000145c 	.word	0x2000145c

08003e08 <RTC_IF_GetTimerValue>:
{
 8003e08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = 0;
 8003e0a:	2000      	movs	r0, #0
  if (RTC_Initalized == true)
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <RTC_IF_GetTimerValue+0x1c>)
 8003e0e:	3344      	adds	r3, #68	; 0x44
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	4283      	cmp	r3, r0
 8003e14:	d003      	beq.n	8003e1e <RTC_IF_GetTimerValue+0x16>
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003e16:	4668      	mov	r0, sp
 8003e18:	a901      	add	r1, sp, #4
 8003e1a:	f7ff fe83 	bl	8003b24 <RTC_GetCalendarValue>
}
 8003e1e:	b007      	add	sp, #28
 8003e20:	bd00      	pop	{pc}
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	2000031c 	.word	0x2000031c

08003e28 <RTC_IF_DelayMs>:
{
 8003e28:	b570      	push	{r4, r5, r6, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8003e2a:	227d      	movs	r2, #125	; 0x7d
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	0e41      	lsrs	r1, r0, #25
 8003e30:	01c0      	lsls	r0, r0, #7
 8003e32:	f7fc fb87 	bl	8000544 <__aeabi_uldivmod>
 8003e36:	0004      	movs	r4, r0
  timeout = RTC_IF_GetTimerValue();
 8003e38:	f7ff ffe6 	bl	8003e08 <RTC_IF_GetTimerValue>
 8003e3c:	0005      	movs	r5, r0
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 8003e3e:	f7ff ffe3 	bl	8003e08 <RTC_IF_GetTimerValue>
 8003e42:	1b40      	subs	r0, r0, r5
 8003e44:	42a0      	cmp	r0, r4
 8003e46:	d300      	bcc.n	8003e4a <RTC_IF_DelayMs+0x22>
}
 8003e48:	bd70      	pop	{r4, r5, r6, pc}
    __NOP();
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	e7f7      	b.n	8003e3e <RTC_IF_DelayMs+0x16>

08003e4e <HAL_RTC_AlarmAEventCallback>:
{
 8003e4e:	b510      	push	{r4, lr}
  UTIL_TIMER_IRQ_Handler();
 8003e50:	f00c ff58 	bl	8010d04 <UTIL_TIMER_IRQ_Handler>
}
 8003e54:	bd10      	pop	{r4, pc}

08003e56 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8003e56:	4770      	bx	lr

08003e58 <PWR_EnterStopMode>:

  /* USER CODE END ExitOffMode_1 */
}

void PWR_EnterStopMode(void)
{
 8003e58:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e5a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003e5e:	b672      	cpsid	i
  UTILS_ENTER_CRITICAL_SECTION();

  Sx_Board_IoDeInit();
 8003e60:	f000 fd20 	bl	80048a4 <CMWX1ZZABZ0XX_RADIO_IoDeInit>

  HAL_ADC_MspDeInit(&hadc1);
 8003e64:	4807      	ldr	r0, [pc, #28]	; (8003e84 <PWR_EnterStopMode+0x2c>)
 8003e66:	f7ff fc79 	bl	800375c <HAL_ADC_MspDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 8003e6a:	2304      	movs	r3, #4
 8003e6c:	4a06      	ldr	r2, [pc, #24]	; (8003e88 <PWR_EnterStopMode+0x30>)
 8003e6e:	6811      	ldr	r1, [r2, #0]
 8003e70:	430b      	orrs	r3, r1
 8003e72:	6013      	str	r3, [r2, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e74:	f384 8810 	msr	PRIMASK, r4

  UTILS_EXIT_CRITICAL_SECTION();

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003e78:	2101      	movs	r1, #1
 8003e7a:	0008      	movs	r0, r1
 8003e7c:	f001 fcee 	bl	800585c <HAL_PWR_EnterSTOPMode>
}
 8003e80:	bd10      	pop	{r4, pc}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	200013b8 	.word	0x200013b8
 8003e88:	40007000 	.word	0x40007000

08003e8c <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8003e8c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e8e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003e92:	b672      	cpsid	i

  UTILS_ENTER_CRITICAL_SECTION();

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 8003e94:	2201      	movs	r2, #1
 8003e96:	4b10      	ldr	r3, [pc, #64]	; (8003ed8 <PWR_ExitStopMode+0x4c>)
 8003e98:	6819      	ldr	r1, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 8003e9e:	2204      	movs	r2, #4
 8003ea0:	6819      	ldr	r1, [r3, #0]
 8003ea2:	4211      	tst	r1, r2
 8003ea4:	d0fc      	beq.n	8003ea0 <PWR_ExitStopMode+0x14>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 8003ea6:	2280      	movs	r2, #128	; 0x80
 8003ea8:	6819      	ldr	r1, [r3, #0]
 8003eaa:	0452      	lsls	r2, r2, #17
 8003eac:	430a      	orrs	r2, r1
 8003eae:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 8003eb0:	2280      	movs	r2, #128	; 0x80
 8003eb2:	0492      	lsls	r2, r2, #18
 8003eb4:	6819      	ldr	r1, [r3, #0]
 8003eb6:	4211      	tst	r1, r2
 8003eb8:	d0fc      	beq.n	8003eb4 <PWR_ExitStopMode+0x28>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 8003eba:	2203      	movs	r2, #3
 8003ebc:	68d9      	ldr	r1, [r3, #12]
 8003ebe:	430a      	orrs	r2, r1

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 8003ec0:	210c      	movs	r1, #12
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 8003ec2:	60da      	str	r2, [r3, #12]
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	400a      	ands	r2, r1
 8003ec8:	2a0c      	cmp	r2, #12
 8003eca:	d1fb      	bne.n	8003ec4 <PWR_ExitStopMode+0x38>

  /* initializes the peripherals */
  Sx_Board_IoInit();
 8003ecc:	f000 fc10 	bl	80046f0 <CMWX1ZZABZ0XX_RADIO_IoInit>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed0:	f384 8810 	msr	PRIMASK, r4

  UTILS_EXIT_CRITICAL_SECTION();
}
 8003ed4:	bd10      	pop	{r4, pc}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	40021000 	.word	0x40021000

08003edc <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8003edc:	b510      	push	{r4, lr}
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8003ede:	2101      	movs	r1, #1
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	f001 fc83 	bl	80057ec <HAL_PWR_EnterSLEEPMode>
}
 8003ee6:	bd10      	pop	{r4, pc}

08003ee8 <PWR_ExitSleepMode>:
 8003ee8:	4770      	bx	lr

08003eea <PWR_ExitOffMode>:
 8003eea:	4770      	bx	lr

08003eec <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003eec:	2380      	movs	r3, #128	; 0x80
 8003eee:	4a09      	ldr	r2, [pc, #36]	; (8003f14 <HAL_MspInit+0x28>)
 8003ef0:	055b      	lsls	r3, r3, #21
 8003ef2:	6b91      	ldr	r1, [r2, #56]	; 0x38
{
 8003ef4:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ef6:	430b      	orrs	r3, r1
 8003ef8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 8003efa:	f001 fc6f 	bl	80057dc <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 8003efe:	f001 fcf3 	bl	80058e8 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 8003f02:	2308      	movs	r3, #8
 8003f04:	4a04      	ldr	r2, [pc, #16]	; (8003f18 <HAL_MspInit+0x2c>)
 8003f06:	6811      	ldr	r1, [r2, #0]
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	6013      	str	r3, [r2, #0]
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 8003f0c:	f001 fce2 	bl	80058d4 <HAL_PWREx_EnableFastWakeUp>
#endif

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f10:	bd10      	pop	{r4, pc}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	40021000 	.word	0x40021000
 8003f18:	40022000 	.word	0x40022000

08003f1c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003f1c:	4770      	bx	lr

08003f1e <HardFault_Handler>:

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    __NOP();
 8003f1e:	46c0      	nop			; (mov r8, r8)
  while (1)
 8003f20:	e7fd      	b.n	8003f1e <HardFault_Handler>

08003f22 <SVC_Handler>:
 8003f22:	4770      	bx	lr

08003f24 <PendSV_Handler>:
 8003f24:	4770      	bx	lr

08003f26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f26:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f28:	f000 fdfa 	bl	8004b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f2c:	bd10      	pop	{r4, pc}
	...

08003f30 <EXTI0_1_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void EXTI0_1_IRQHandler(void)
{
 8003f30:	b510      	push	{r4, lr}
#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8003f32:	4803      	ldr	r0, [pc, #12]	; (8003f40 <EXTI0_1_IRQHandler+0x10>)
 8003f34:	f001 faec 	bl	8005510 <HAL_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_1);
 8003f38:	4802      	ldr	r0, [pc, #8]	; (8003f44 <EXTI0_1_IRQHandler+0x14>)
 8003f3a:	f001 fae9 	bl	8005510 <HAL_EXTI_IRQHandler>
#endif
}
 8003f3e:	bd10      	pop	{r4, pc}
 8003f40:	20001604 	.word	0x20001604
 8003f44:	200015fc 	.word	0x200015fc

08003f48 <EXTI2_3_IRQHandler>:
 8003f48:	4770      	bx	lr
	...

08003f4c <EXTI4_15_IRQHandler>:
  HAL_EXTI_IRQHandler(&H_EXTI_3);
#endif
}

void EXTI4_15_IRQHandler(void)
{
 8003f4c:	b510      	push	{r4, lr}
  HAL_EXTI_IRQHandler(&H_EXTI_4);
 8003f4e:	4803      	ldr	r0, [pc, #12]	; (8003f5c <EXTI4_15_IRQHandler+0x10>)
 8003f50:	f001 fade 	bl	8005510 <HAL_EXTI_IRQHandler>
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_10);
#endif

#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8003f54:	4802      	ldr	r0, [pc, #8]	; (8003f60 <EXTI4_15_IRQHandler+0x14>)
 8003f56:	f001 fadb 	bl	8005510 <HAL_EXTI_IRQHandler>
#endif
}
 8003f5a:	bd10      	pop	{r4, pc}
 8003f5c:	200015f4 	.word	0x200015f4
 8003f60:	2000160c 	.word	0x2000160c

08003f64 <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8003f64:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(husart2.hdmatx);
 8003f66:	4b02      	ldr	r3, [pc, #8]	; (8003f70 <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 8003f68:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003f6a:	f001 fa78 	bl	800545e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8003f6e:	bd10      	pop	{r4, pc}
 8003f70:	200014c8 	.word	0x200014c8

08003f74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8003f74:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&husart2);
 8003f76:	4802      	ldr	r0, [pc, #8]	; (8003f80 <USART2_IRQHandler+0xc>)
 8003f78:	f002 ff86 	bl	8006e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003f7c:	bd10      	pop	{r4, pc}
 8003f7e:	46c0      	nop			; (mov r8, r8)
 8003f80:	200014c8 	.word	0x200014c8

08003f84 <RTC_IRQHandler>:



void RTC_IRQHandler(void)
{
 8003f84:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003f86:	4802      	ldr	r0, [pc, #8]	; (8003f90 <RTC_IRQHandler+0xc>)
 8003f88:	f002 f9ba 	bl	8006300 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003f8c:	bd10      	pop	{r4, pc}
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	2000145c 	.word	0x2000145c

08003f94 <tiny_snprintf_like.constprop.0>:
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
 8003f94:	b40c      	push	{r2, r3}
 8003f96:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8003f98:	2110      	movs	r1, #16
  va_start(vaArgs, strFormat);
 8003f9a:	ab05      	add	r3, sp, #20
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8003f9c:	4a03      	ldr	r2, [pc, #12]	; (8003fac <tiny_snprintf_like.constprop.0+0x18>)
  va_start(vaArgs, strFormat);
 8003f9e:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8003fa0:	f00c fef6 	bl	8010d90 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8003fa4:	b003      	add	sp, #12
 8003fa6:	bc08      	pop	{r3}
 8003fa8:	b002      	add	sp, #8
 8003faa:	4718      	bx	r3
 8003fac:	08011bec 	.word	0x08011bec

08003fb0 <TimestampNow>:
{
 8003fb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003fb2:	0004      	movs	r4, r0
  SysTime_t curtime = SysTimeGet();
 8003fb4:	ae02      	add	r6, sp, #8
 8003fb6:	0030      	movs	r0, r6
{
 8003fb8:	000d      	movs	r5, r1
  SysTime_t curtime = SysTimeGet();
 8003fba:	f00c fcf5 	bl	80109a8 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8003fbe:	2204      	movs	r2, #4
 8003fc0:	5eb3      	ldrsh	r3, [r6, r2]
 8003fc2:	2110      	movs	r1, #16
 8003fc4:	0020      	movs	r0, r4
 8003fc6:	4a05      	ldr	r2, [pc, #20]	; (8003fdc <TimestampNow+0x2c>)
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	9b02      	ldr	r3, [sp, #8]
 8003fcc:	f7ff ffe2 	bl	8003f94 <tiny_snprintf_like.constprop.0>
  *size = strlen((char *)buff);
 8003fd0:	0020      	movs	r0, r4
 8003fd2:	f7fc f899 	bl	8000108 <strlen>
 8003fd6:	8028      	strh	r0, [r5, #0]
}
 8003fd8:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	08011bec 	.word	0x08011bec

08003fe0 <SystemApp_Init>:
{
 8003fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fe2:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fe4:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fe6:	2704      	movs	r7, #4
{
 8003fe8:	b08b      	sub	sp, #44	; 0x2c
  UTIL_TIMER_Init();
 8003fea:	f00c fd6d 	bl	8010ac8 <UTIL_TIMER_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fee:	2208      	movs	r2, #8
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	a808      	add	r0, sp, #32
 8003ff4:	f00d f81e 	bl	8011034 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ff8:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ffa:	4c2e      	ldr	r4, [pc, #184]	; (80040b4 <SystemApp_Init+0xd4>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ffc:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ffe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004000:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004002:	432b      	orrs	r3, r5
 8004004:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004006:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004008:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800400a:	402b      	ands	r3, r5
 800400c:	9301      	str	r3, [sp, #4]
 800400e:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004010:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004012:	4333      	orrs	r3, r6
 8004014:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004016:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004018:	4033      	ands	r3, r6
 800401a:	9302      	str	r3, [sp, #8]
 800401c:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800401e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004020:	433b      	orrs	r3, r7
 8004022:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004024:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004026:	403b      	ands	r3, r7
 8004028:	9303      	str	r3, [sp, #12]
 800402a:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800402c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800402e:	4313      	orrs	r3, r2
 8004030:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004032:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004034:	4013      	ands	r3, r2
 8004036:	9304      	str	r3, [sp, #16]
 8004038:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800403a:	2303      	movs	r3, #3
 800403c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403e:	2300      	movs	r3, #0
 8004040:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 8004042:	4b1d      	ldr	r3, [pc, #116]	; (80040b8 <SystemApp_Init+0xd8>)
 8004044:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004046:	f001 fa75 	bl	8005534 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 800404a:	4b1c      	ldr	r3, [pc, #112]	; (80040bc <SystemApp_Init+0xdc>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800404c:	a905      	add	r1, sp, #20
 800404e:	481c      	ldr	r0, [pc, #112]	; (80040c0 <SystemApp_Init+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8004050:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004052:	f001 fa6f 	bl	8005534 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004056:	a905      	add	r1, sp, #20
 8004058:	481a      	ldr	r0, [pc, #104]	; (80040c4 <SystemApp_Init+0xe4>)
 800405a:	f001 fa6b 	bl	8005534 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800405e:	a905      	add	r1, sp, #20
 8004060:	4819      	ldr	r0, [pc, #100]	; (80040c8 <SystemApp_Init+0xe8>)
 8004062:	f001 fa67 	bl	8005534 <HAL_GPIO_Init>
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8004066:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8004068:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800406a:	43ab      	bics	r3, r5
 800406c:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 800406e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004070:	43b3      	bics	r3, r6
 8004072:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8004074:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004076:	43bb      	bics	r3, r7
 8004078:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 800407a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800407c:	4393      	bics	r3, r2
 800407e:	62e3      	str	r3, [r4, #44]	; 0x2c
  DBG_Init();
 8004080:	f000 f894 	bl	80041ac <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8004084:	f00c f9fc 	bl	8010480 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8004088:	4810      	ldr	r0, [pc, #64]	; (80040cc <SystemApp_Init+0xec>)
 800408a:	f00c fa13 	bl	80104b4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800408e:	0030      	movs	r0, r6
 8004090:	f00c fa16 	bl	80104c0 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8004094:	f7ff fbd0 	bl	8003838 <SYS_InitMeasurement>
  Sx_Board_Bus_Init();
 8004098:	f000 fcd8 	bl	8004a4c <CMWX1ZZABZ0XX_RADIO_Bus_Init>
  Sx_Board_IoInit();
 800409c:	f000 fb28 	bl	80046f0 <CMWX1ZZABZ0XX_RADIO_IoInit>
  EnvSensors_Init();
 80040a0:	f000 f8b8 	bl	8004214 <EnvSensors_Init>
  UTIL_LPM_Init();
 80040a4:	f00c fb04 	bl	80106b0 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80040a8:	0029      	movs	r1, r5
 80040aa:	0028      	movs	r0, r5
 80040ac:	f00c fb1e 	bl	80106ec <UTIL_LPM_SetOffMode>
}
 80040b0:	b00b      	add	sp, #44	; 0x2c
 80040b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040b4:	40021000 	.word	0x40021000
 80040b8:	00009fff 	.word	0x00009fff
 80040bc:	0000ffff 	.word	0x0000ffff
 80040c0:	50000400 	.word	0x50000400
 80040c4:	50000800 	.word	0x50000800
 80040c8:	50001c00 	.word	0x50001c00
 80040cc:	08003fb1 	.word	0x08003fb1

080040d0 <UTIL_SEQ_Idle>:
{
 80040d0:	b510      	push	{r4, lr}
  UTIL_LPM_EnterLowPower();
 80040d2:	f00c fb33 	bl	801073c <UTIL_LPM_EnterLowPower>
}
 80040d6:	bd10      	pop	{r4, pc}

080040d8 <GetBatteryLevel>:
{
 80040d8:	b513      	push	{r0, r1, r4, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80040da:	f7ff fbb5 	bl	8003848 <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 80040de:	4b0d      	ldr	r3, [pc, #52]	; (8004114 <GetBatteryLevel+0x3c>)
    batteryLevel = LORAWAN_MAX_BAT;
 80040e0:	24fe      	movs	r4, #254	; 0xfe
  if (batteryLevelmV > VDD_BAT)
 80040e2:	4298      	cmp	r0, r3
 80040e4:	d80d      	bhi.n	8004102 <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 80040e6:	23e1      	movs	r3, #225	; 0xe1
    batteryLevel = 0;
 80040e8:	2400      	movs	r4, #0
  else if (batteryLevelmV < VDD_MIN)
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	4298      	cmp	r0, r3
 80040ee:	d308      	bcc.n	8004102 <GetBatteryLevel+0x2a>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80040f0:	4b09      	ldr	r3, [pc, #36]	; (8004118 <GetBatteryLevel+0x40>)
 80040f2:	2196      	movs	r1, #150	; 0x96
 80040f4:	18c0      	adds	r0, r0, r3
 80040f6:	23fe      	movs	r3, #254	; 0xfe
 80040f8:	00c9      	lsls	r1, r1, #3
 80040fa:	4358      	muls	r0, r3
 80040fc:	f7fc f834 	bl	8000168 <__udivsi3>
 8004100:	b2c4      	uxtb	r4, r0
  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8004102:	2201      	movs	r2, #1
 8004104:	2100      	movs	r1, #0
 8004106:	4b05      	ldr	r3, [pc, #20]	; (800411c <GetBatteryLevel+0x44>)
 8004108:	9400      	str	r4, [sp, #0]
 800410a:	2002      	movs	r0, #2
 800410c:	f00c fa20 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
}
 8004110:	0020      	movs	r0, r4
 8004112:	bd16      	pop	{r1, r2, r4, pc}
 8004114:	00000bb8 	.word	0x00000bb8
 8004118:	fffff8f8 	.word	0xfffff8f8
 800411c:	08011bf5 	.word	0x08011bf5

08004120 <GetTemperatureLevel>:
{
 8004120:	b510      	push	{r4, lr}
  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8004122:	f7ff fba7 	bl	8003874 <SYS_GetTemperatureLevel>
 8004126:	0002      	movs	r2, r0
 8004128:	17c0      	asrs	r0, r0, #31
 800412a:	b2c0      	uxtb	r0, r0
 800412c:	1880      	adds	r0, r0, r2
 800412e:	1200      	asrs	r0, r0, #8
  return temperatureLevel;
 8004130:	b280      	uxth	r0, r0
}
 8004132:	bd10      	pop	{r4, pc}

08004134 <GetUniqueId>:
{
 8004134:	b570      	push	{r4, r5, r6, lr}
 8004136:	0004      	movs	r4, r0
  uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8004138:	f000 fcfe 	bl	8004b38 <HAL_GetUIDw0>
 800413c:	0005      	movs	r5, r0
 800413e:	f000 fd07 	bl	8004b50 <HAL_GetUIDw2>
 8004142:	182d      	adds	r5, r5, r0
  uint32_t ID_2_val = HAL_GetUIDw1();
 8004144:	f000 fcfe 	bl	8004b44 <HAL_GetUIDw1>
  id[7] = (ID_1_3_val) >> 24;
 8004148:	0e2b      	lsrs	r3, r5, #24
 800414a:	71e3      	strb	r3, [r4, #7]
  id[6] = (ID_1_3_val) >> 16;
 800414c:	0c2b      	lsrs	r3, r5, #16
 800414e:	71a3      	strb	r3, [r4, #6]
  id[5] = (ID_1_3_val) >> 8;
 8004150:	0a2b      	lsrs	r3, r5, #8
 8004152:	7163      	strb	r3, [r4, #5]
  id[3] = (ID_2_val) >> 24;
 8004154:	0e03      	lsrs	r3, r0, #24
 8004156:	70e3      	strb	r3, [r4, #3]
  id[2] = (ID_2_val) >> 16;
 8004158:	0c03      	lsrs	r3, r0, #16
 800415a:	70a3      	strb	r3, [r4, #2]
  id[1] = (ID_2_val) >> 8;
 800415c:	0a03      	lsrs	r3, r0, #8
  id[4] = (ID_1_3_val);
 800415e:	7125      	strb	r5, [r4, #4]
  id[1] = (ID_2_val) >> 8;
 8004160:	7063      	strb	r3, [r4, #1]
  id[0] = (ID_2_val);
 8004162:	7020      	strb	r0, [r4, #0]
}
 8004164:	bd70      	pop	{r4, r5, r6, pc}

08004166 <GetDevAddr>:
{
 8004166:	b510      	push	{r4, lr}
  return ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8004168:	f000 fce6 	bl	8004b38 <HAL_GetUIDw0>
 800416c:	0004      	movs	r4, r0
 800416e:	f000 fce9 	bl	8004b44 <HAL_GetUIDw1>
 8004172:	4044      	eors	r4, r0
 8004174:	f000 fcec 	bl	8004b50 <HAL_GetUIDw2>
 8004178:	4060      	eors	r0, r4
}
 800417a:	bd10      	pop	{r4, pc}

0800417c <UTIL_ADV_TRACE_PreSendHook>:
{
 800417c:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 800417e:	2101      	movs	r1, #1
 8004180:	2004      	movs	r0, #4
 8004182:	f00c fa9d 	bl	80106c0 <UTIL_LPM_SetStopMode>
}
 8004186:	bd10      	pop	{r4, pc}

08004188 <UTIL_ADV_TRACE_PostSendHook>:
{
 8004188:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 800418a:	2100      	movs	r1, #0
 800418c:	2004      	movs	r0, #4
 800418e:	f00c fa97 	bl	80106c0 <UTIL_LPM_SetStopMode>
}
 8004192:	bd10      	pop	{r4, pc}

08004194 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8004194:	2000      	movs	r0, #0
 8004196:	4770      	bx	lr

08004198 <HAL_GetTick>:
  * @brief Provide a tick value in millisecond measured using RTC
  * @note This function overwrites the __weak one from HAL
  * @retval tick value
  */
uint32_t HAL_GetTick(void)
{
 8004198:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 800419a:	f7ff fe35 	bl	8003e08 <RTC_IF_GetTimerValue>
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 800419e:	bd10      	pop	{r4, pc}

080041a0 <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80041a0:	b507      	push	{r0, r1, r2, lr}
 80041a2:	9001      	str	r0, [sp, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 80041a4:	9801      	ldr	r0, [sp, #4]
 80041a6:	f7ff fe3f 	bl	8003e28 <RTC_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80041aa:	bd07      	pop	{r0, r1, r2, pc}

080041ac <DBG_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void DBG_Init(void)
{
 80041ac:	b530      	push	{r4, r5, lr}
 80041ae:	b087      	sub	sp, #28
  HAL_DBGMCU_EnableDBGStandbyMode();

#elif defined (DEBUGGER_ON) && (DEBUGGER_ON == 0) /* DEBUGGER_OFF */
  /* Put the debugger pin PA13 and P14 in analog for LowPower*/
  /* The 4 debug lines above are simply not set in this case */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041b0:	2208      	movs	r2, #8
 80041b2:	2100      	movs	r1, #0
 80041b4:	a804      	add	r0, sp, #16
 80041b6:	f00c ff3d 	bl	8011034 <memset>
  GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
 80041ba:	2303      	movs	r3, #3
 80041bc:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 80041be:	2300      	movs	r3, #0
 80041c0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 80041c2:	23c0      	movs	r3, #192	; 0xc0
  /* make sure clock is enabled before setting the pins with HAL_GPIO_Init() */
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 80041c4:	2501      	movs	r5, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041c6:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 80041c8:	4c10      	ldr	r4, [pc, #64]	; (800420c <DBG_Init+0x60>)
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 80041ca:	01db      	lsls	r3, r3, #7
 80041cc:	9301      	str	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 80041ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041d0:	a901      	add	r1, sp, #4
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 80041d2:	432b      	orrs	r3, r5
 80041d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80041d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041d8:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 80041da:	402b      	ands	r3, r5
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041e0:	f001 f9a8 	bl	8005534 <HAL_GPIO_Init>
  __HAL_RCC_GPIOA_CLK_DISABLE() ;
 80041e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80041e6:	43ab      	bics	r3, r5
 80041e8:	62e3      	str	r3, [r4, #44]	; 0x2c

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 80041ea:	2380      	movs	r3, #128	; 0x80
 80041ec:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80041ee:	03db      	lsls	r3, r3, #15
 80041f0:	4313      	orrs	r3, r2
 80041f2:	6363      	str	r3, [r4, #52]	; 0x34
  HAL_DBGMCU_DisableDBGSleepMode();
 80041f4:	f000 fcb2 	bl	8004b5c <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 80041f8:	f000 fcb8 	bl	8004b6c <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 80041fc:	f000 fcbe 	bl	8004b7c <HAL_DBGMCU_DisableDBGStandbyMode>
  __HAL_RCC_DBGMCU_CLK_DISABLE();
 8004200:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004202:	4a03      	ldr	r2, [pc, #12]	; (8004210 <DBG_Init+0x64>)
 8004204:	4013      	ands	r3, r2
 8004206:	6363      	str	r3, [r4, #52]	; 0x34
#error "DEBUGGER_ON not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */
  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 8004208:	b007      	add	sp, #28
 800420a:	bd30      	pop	{r4, r5, pc}
 800420c:	40021000 	.word	0x40021000
 8004210:	ffbfffff 	.word	0xffbfffff

08004214 <EnvSensors_Init>:
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE BEGIN EnvSensors_Init_Last */

  /* USER CODE END EnvSensors_Init_Last */
}
 8004214:	4770      	bx	lr
	...

08004218 <MX_USART2_Init>:
/* USART2 init function */

void MX_USART2_Init(void)
{

  husart2.Instance        = USART2;
 8004218:	480a      	ldr	r0, [pc, #40]	; (8004244 <MX_USART2_Init+0x2c>)
 800421a:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <MX_USART2_Init+0x30>)
{
 800421c:	b510      	push	{r4, lr}
  husart2.Instance        = USART2;
 800421e:	6003      	str	r3, [r0, #0]
  husart2.Init.BaudRate   = USART_BAUDRATE;
 8004220:	23e1      	movs	r3, #225	; 0xe1
 8004222:	025b      	lsls	r3, r3, #9
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
  husart2.Init.StopBits   = UART_STOPBITS_1;
  husart2.Init.Parity     = UART_PARITY_NONE;
  husart2.Init.Mode       = UART_MODE_TX;
 8004224:	2208      	movs	r2, #8
  husart2.Init.BaudRate   = USART_BAUDRATE;
 8004226:	6043      	str	r3, [r0, #4]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004228:	2300      	movs	r3, #0
  husart2.Init.Mode       = UART_MODE_TX;
 800422a:	6142      	str	r2, [r0, #20]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 800422c:	6083      	str	r3, [r0, #8]
  husart2.Init.StopBits   = UART_STOPBITS_1;
 800422e:	60c3      	str	r3, [r0, #12]
  husart2.Init.Parity     = UART_PARITY_NONE;
 8004230:	6103      	str	r3, [r0, #16]
  husart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8004232:	6183      	str	r3, [r0, #24]

  if (HAL_UART_Init(&husart2) != HAL_OK)
 8004234:	f003 f9c0 	bl	80075b8 <HAL_UART_Init>
 8004238:	2800      	cmp	r0, #0
 800423a:	d001      	beq.n	8004240 <MX_USART2_Init+0x28>
  {
    Error_Handler();
 800423c:	f7ff fbb4 	bl	80039a8 <Error_Handler>
  }
}
 8004240:	bd10      	pop	{r4, pc}
 8004242:	46c0      	nop			; (mov r8, r8)
 8004244:	200014c8 	.word	0x200014c8
 8004248:	40004400 	.word	0x40004400

0800424c <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 800424c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800424e:	0006      	movs	r6, r0
 8004250:	b093      	sub	sp, #76	; 0x4c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004252:	2214      	movs	r2, #20
 8004254:	2100      	movs	r1, #0
 8004256:	a804      	add	r0, sp, #16
 8004258:	f00c feec 	bl	8011034 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800425c:	2224      	movs	r2, #36	; 0x24
 800425e:	2100      	movs	r1, #0
 8004260:	a809      	add	r0, sp, #36	; 0x24
 8004262:	f00c fee7 	bl	8011034 <memset>
  if (uartHandle->Instance == USART2)
 8004266:	4b37      	ldr	r3, [pc, #220]	; (8004344 <HAL_UART_MspInit+0xf8>)
 8004268:	6832      	ldr	r2, [r6, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d168      	bne.n	8004340 <HAL_UART_MspInit+0xf4>

    /* USER CODE END USART2_MspInit 0 */

    /* Enable peripherals and GPIO Clocks */
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 800426e:	2201      	movs	r2, #1
 8004270:	4b35      	ldr	r3, [pc, #212]	; (8004348 <HAL_UART_MspInit+0xfc>)
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();

    /* Select SYSTEM clock for USART2 commuincation TX/RX */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8004272:	2504      	movs	r5, #4
    USARTx_TX_GPIO_CLK_ENABLE();
 8004274:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004276:	4311      	orrs	r1, r2
 8004278:	62d9      	str	r1, [r3, #44]	; 0x2c
 800427a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800427c:	4011      	ands	r1, r2
 800427e:	9101      	str	r1, [sp, #4]
 8004280:	9901      	ldr	r1, [sp, #4]
    USARTx_RX_GPIO_CLK_ENABLE();
 8004282:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004284:	4311      	orrs	r1, r2
 8004286:	62d9      	str	r1, [r3, #44]	; 0x2c
 8004288:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800428a:	4011      	ands	r1, r2
 800428c:	9102      	str	r1, [sp, #8]
 800428e:	9902      	ldr	r1, [sp, #8]
    __USART2_CLK_ENABLE();
 8004290:	2180      	movs	r1, #128	; 0x80
 8004292:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004294:	0289      	lsls	r1, r1, #10
 8004296:	4308      	orrs	r0, r1
 8004298:	6398      	str	r0, [r3, #56]	; 0x38
    DMAx_CLK_ENABLE();
 800429a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800429c:	4310      	orrs	r0, r2
 800429e:	6318      	str	r0, [r3, #48]	; 0x30
 80042a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80042a2:	4002      	ands	r2, r0
 80042a4:	9203      	str	r2, [sp, #12]
 80042a6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_USART2_CLK_ENABLE();
 80042a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042aa:	a809      	add	r0, sp, #36	; 0x24
    __HAL_RCC_USART2_CLK_ENABLE();
 80042ac:	4311      	orrs	r1, r2
 80042ae:	6399      	str	r1, [r3, #56]	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80042b0:	2302      	movs	r3, #2
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80042b2:	950c      	str	r5, [sp, #48]	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80042b4:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042b6:	f001 fee3 	bl	8006080 <HAL_RCCEx_PeriphCLKConfig>
 80042ba:	2800      	cmp	r0, #0
 80042bc:	d001      	beq.n	80042c2 <HAL_UART_MspInit+0x76>
    {
      Error_Handler();
 80042be:	f7ff fb73 	bl	80039a8 <Error_Handler>
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 80042c2:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c4:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c6:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80042c8:	2303      	movs	r3, #3
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 80042ca:	a904      	add	r1, sp, #16
 80042cc:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ce:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80042d0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 80042d2:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d4:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80042d6:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 80042d8:	f001 f92c 	bl	8005534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 80042dc:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 80042de:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 80042e0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 80042e2:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80042e4:	3b05      	subs	r3, #5
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 80042e6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e8:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80042ea:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ec:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80042ee:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 80042f0:	f001 f920 	bl	8005534 <HAL_GPIO_Init>


    /* USART2 DMA Init */
    /* USART2_TX Init */
    /* Configure the DMA handler for Transmission process */
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 80042f4:	4f15      	ldr	r7, [pc, #84]	; (800434c <HAL_UART_MspInit+0x100>)
 80042f6:	4b16      	ldr	r3, [pc, #88]	; (8004350 <HAL_UART_MspInit+0x104>)
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
    hdma_tx.Init.Mode                = DMA_NORMAL;
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;

    if (HAL_DMA_Init(&hdma_tx) != HAL_OK)
 80042f8:	0038      	movs	r0, r7
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 80042fa:	603b      	str	r3, [r7, #0]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80042fc:	2310      	movs	r3, #16
 80042fe:	60bb      	str	r3, [r7, #8]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8004300:	3370      	adds	r3, #112	; 0x70
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 8004302:	607d      	str	r5, [r7, #4]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004304:	60fc      	str	r4, [r7, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8004306:	613b      	str	r3, [r7, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004308:	617c      	str	r4, [r7, #20]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 800430a:	61bc      	str	r4, [r7, #24]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 800430c:	61fc      	str	r4, [r7, #28]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 800430e:	623c      	str	r4, [r7, #32]
    if (HAL_DMA_Init(&hdma_tx) != HAL_OK)
 8004310:	f000 ffac 	bl	800526c <HAL_DMA_Init>
 8004314:	42a0      	cmp	r0, r4
 8004316:	d001      	beq.n	800431c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8004318:	f7ff fb46 	bl	80039a8 <Error_Handler>
    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);

    /* Configure the NVIC for DMA */
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 800431c:	2201      	movs	r2, #1
 800431e:	2100      	movs	r1, #0
 8004320:	200b      	movs	r0, #11
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);
 8004322:	66f7      	str	r7, [r6, #108]	; 0x6c
 8004324:	62be      	str	r6, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8004326:	f000 ff5b 	bl	80051e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 800432a:	200b      	movs	r0, #11
 800432c:	f000 ff82 	bl	8005234 <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 8004330:	201c      	movs	r0, #28
 8004332:	2201      	movs	r2, #1
 8004334:	2100      	movs	r1, #0
 8004336:	f000 ff53 	bl	80051e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 800433a:	201c      	movs	r0, #28
 800433c:	f000 ff7a 	bl	8005234 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
}
 8004340:	b013      	add	sp, #76	; 0x4c
 8004342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004344:	40004400 	.word	0x40004400
 8004348:	40021000 	.word	0x40021000
 800434c:	20001480 	.word	0x20001480
 8004350:	40020080 	.word	0x40020080

08004354 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{

  if (uartHandle->Instance == USART2)
 8004354:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <HAL_UART_MspDeInit+0x30>)
 8004356:	6802      	ldr	r2, [r0, #0]
{
 8004358:	b510      	push	{r4, lr}
 800435a:	0004      	movs	r4, r0
  if (uartHandle->Instance == USART2)
 800435c:	429a      	cmp	r2, r3
 800435e:	d10f      	bne.n	8004380 <HAL_UART_MspDeInit+0x2c>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8004360:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_DISABLE();
 8004362:	4a09      	ldr	r2, [pc, #36]	; (8004388 <HAL_UART_MspDeInit+0x34>)
 8004364:	4909      	ldr	r1, [pc, #36]	; (800438c <HAL_UART_MspDeInit+0x38>)
 8004366:	6b93      	ldr	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8004368:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_DISABLE();
 800436a:	400b      	ands	r3, r1
 800436c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 800436e:	210c      	movs	r1, #12
 8004370:	f001 f9a0 	bl	80056b4 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8004374:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004376:	f000 ffbd 	bl	80052f4 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800437a:	201c      	movs	r0, #28
 800437c:	f000 ff66 	bl	800524c <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8004380:	bd10      	pop	{r4, pc}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	40004400 	.word	0x40004400
 8004388:	40021000 	.word	0x40021000
 800438c:	fffdffff 	.word	0xfffdffff

08004390 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8004390:	b510      	push	{r4, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8004392:	4b04      	ldr	r3, [pc, #16]	; (80043a4 <vcom_Init+0x14>)
 8004394:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8004396:	f7ff fa9b 	bl	80038d0 <MX_DMA_Init>
  MX_USART2_Init();
 800439a:	f7ff ff3d 	bl	8004218 <MX_USART2_Init>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 800439e:	2000      	movs	r0, #0
 80043a0:	bd10      	pop	{r4, pc}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	20000364 	.word	0x20000364

080043a8 <vcom_DeInit>:
{
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 80043a8:	2280      	movs	r2, #128	; 0x80
 80043aa:	4b09      	ldr	r3, [pc, #36]	; (80043d0 <vcom_DeInit+0x28>)
 80043ac:	0292      	lsls	r2, r2, #10
 80043ae:	6a99      	ldr	r1, [r3, #40]	; 0x28
{
 80043b0:	b510      	push	{r4, lr}
  __HAL_RCC_USART2_FORCE_RESET();
 80043b2:	430a      	orrs	r2, r1
 80043b4:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_USART2_RELEASE_RESET();
 80043b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043b8:	4906      	ldr	r1, [pc, #24]	; (80043d4 <vcom_DeInit+0x2c>)

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&UartHandle);
 80043ba:	4807      	ldr	r0, [pc, #28]	; (80043d8 <vcom_DeInit+0x30>)
  __HAL_RCC_USART2_RELEASE_RESET();
 80043bc:	400a      	ands	r2, r1
 80043be:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_UART_MspDeInit(&UartHandle);
 80043c0:	f7ff ffc8 	bl	8004354 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* temporary while waiting CR 50840: MX implementation of  MX_DMA_DeInit() */
  /* For the time being user should change manually the channel according to the MX settings */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80043c4:	200b      	movs	r0, #11
 80043c6:	f000 ff41 	bl	800524c <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80043ca:	2000      	movs	r0, #0
 80043cc:	bd10      	pop	{r4, pc}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	40021000 	.word	0x40021000
 80043d4:	fffdffff 	.word	0xfffdffff
 80043d8:	200014c8 	.word	0x200014c8

080043dc <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80043dc:	b510      	push	{r4, lr}
 80043de:	000a      	movs	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 80043e0:	0001      	movs	r1, r0
 80043e2:	4802      	ldr	r0, [pc, #8]	; (80043ec <vcom_Trace_DMA+0x10>)
 80043e4:	f002 fca6 	bl	8006d34 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80043e8:	2000      	movs	r0, #0
 80043ea:	bd10      	pop	{r4, pc}
 80043ec:	200014c8 	.word	0x200014c8

080043f0 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80043f0:	b513      	push	{r0, r1, r4, lr}

  /*record call back*/
  RxCpltCallback = RxCb;

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80043f2:	2180      	movs	r1, #128	; 0x80
  RxCpltCallback = RxCb;
 80043f4:	4b10      	ldr	r3, [pc, #64]	; (8004438 <vcom_ReceiveInit+0x48>)

  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 80043f6:	4c11      	ldr	r4, [pc, #68]	; (800443c <vcom_ReceiveInit+0x4c>)
  RxCpltCallback = RxCb;
 80043f8:	6058      	str	r0, [r3, #4]
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 80043fa:	9a01      	ldr	r2, [sp, #4]
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80043fc:	0389      	lsls	r1, r1, #14
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 80043fe:	0020      	movs	r0, r4
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8004400:	9100      	str	r1, [sp, #0]
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8004402:	f003 f98b 	bl	800771c <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 8004406:	2280      	movs	r2, #128	; 0x80
 8004408:	6823      	ldr	r3, [r4, #0]
 800440a:	0252      	lsls	r2, r2, #9
 800440c:	69d9      	ldr	r1, [r3, #28]
 800440e:	4211      	tst	r1, r2
 8004410:	d1fc      	bne.n	800440c <vcom_ReceiveInit+0x1c>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_REACK) == RESET);
 8004412:	2280      	movs	r2, #128	; 0x80
 8004414:	03d2      	lsls	r2, r2, #15
 8004416:	69d9      	ldr	r1, [r3, #28]
 8004418:	4211      	tst	r1, r2
 800441a:	d0fc      	beq.n	8004416 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 800441c:	6899      	ldr	r1, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&UartHandle);
 800441e:	0020      	movs	r0, r4
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 8004420:	430a      	orrs	r2, r1
 8004422:	609a      	str	r2, [r3, #8]
  HAL_UARTEx_EnableStopMode(&UartHandle);
 8004424:	f003 f9be 	bl	80077a4 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&UartHandle, &charRx, 1);
 8004428:	2201      	movs	r2, #1
 800442a:	0020      	movs	r0, r4
 800442c:	4904      	ldr	r1, [pc, #16]	; (8004440 <vcom_ReceiveInit+0x50>)
 800442e:	f003 f93f 	bl	80076b0 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8004432:	2000      	movs	r0, #0
 8004434:	bd16      	pop	{r1, r2, r4, pc}
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	20000364 	.word	0x20000364
 800443c:	200014c8 	.word	0x200014c8
 8004440:	2000154c 	.word	0x2000154c

08004444 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8004444:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8004446:	4b02      	ldr	r3, [pc, #8]	; (8004450 <HAL_UART_TxCpltCallback+0xc>)
 8004448:	2000      	movs	r0, #0
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800444e:	bd10      	pop	{r4, pc}
 8004450:	20000364 	.word	0x20000364

08004454 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8004454:	4b09      	ldr	r3, [pc, #36]	; (800447c <HAL_UART_RxCpltCallback+0x28>)
{
 8004456:	b570      	push	{r4, r5, r6, lr}
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8004458:	685b      	ldr	r3, [r3, #4]
{
 800445a:	0004      	movs	r4, r0
 800445c:	4d08      	ldr	r5, [pc, #32]	; (8004480 <HAL_UART_RxCpltCallback+0x2c>)
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 800445e:	2b00      	cmp	r3, #0
 8004460:	d006      	beq.n	8004470 <HAL_UART_RxCpltCallback+0x1c>
 8004462:	1d02      	adds	r2, r0, #4
 8004464:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004466:	2a00      	cmp	r2, #0
 8004468:	d102      	bne.n	8004470 <HAL_UART_RxCpltCallback+0x1c>
  {
    RxCpltCallback(&charRx, 1, 0);
 800446a:	2101      	movs	r1, #1
 800446c:	0028      	movs	r0, r5
 800446e:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(UartHandle, &charRx, 1);
 8004470:	0029      	movs	r1, r5
 8004472:	2201      	movs	r2, #1
 8004474:	0020      	movs	r0, r4
 8004476:	f003 f91b 	bl	80076b0 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800447a:	bd70      	pop	{r4, r5, r6, pc}
 800447c:	20000364 	.word	0x20000364
 8004480:	2000154c 	.word	0x2000154c

08004484 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004484:	480d      	ldr	r0, [pc, #52]	; (80044bc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004486:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004488:	480d      	ldr	r0, [pc, #52]	; (80044c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800448a:	490e      	ldr	r1, [pc, #56]	; (80044c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800448c:	4a0e      	ldr	r2, [pc, #56]	; (80044c8 <LoopForever+0xe>)
  movs r3, #0
 800448e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004490:	e002      	b.n	8004498 <LoopCopyDataInit>

08004492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004496:	3304      	adds	r3, #4

08004498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800449a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800449c:	d3f9      	bcc.n	8004492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800449e:	4a0b      	ldr	r2, [pc, #44]	; (80044cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80044a0:	4c0b      	ldr	r4, [pc, #44]	; (80044d0 <LoopForever+0x16>)
  movs r3, #0
 80044a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044a4:	e001      	b.n	80044aa <LoopFillZerobss>

080044a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044a8:	3204      	adds	r2, #4

080044aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044ac:	d3fb      	bcc.n	80044a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80044ae:	f000 faf5 	bl	8004a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044b2:	f00c fd9b 	bl	8010fec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044b6:	f7ff fa6d 	bl	8003994 <main>

080044ba <LoopForever>:

LoopForever:
    b LoopForever
 80044ba:	e7fe      	b.n	80044ba <LoopForever>
   ldr   r0, =_estack
 80044bc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80044c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044c4:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 80044c8:	08012088 	.word	0x08012088
  ldr r2, =_sbss
 80044cc:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 80044d0:	200016dc 	.word	0x200016dc

080044d4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044d4:	e7fe      	b.n	80044d4 <ADC1_COMP_IRQHandler>
	...

080044d8 <BSP_SPI1_SendRecv>:
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 80044d8:	23fa      	movs	r3, #250	; 0xfa
{
 80044da:	b513      	push	{r0, r1, r4, lr}
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 80044dc:	009b      	lsls	r3, r3, #2
{
 80044de:	0014      	movs	r4, r2
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	0013      	movs	r3, r2
 80044e4:	000a      	movs	r2, r1
 80044e6:	0001      	movs	r1, r0
 80044e8:	4804      	ldr	r0, [pc, #16]	; (80044fc <BSP_SPI1_SendRecv+0x24>)
 80044ea:	f002 fb0f 	bl	8006b0c <HAL_SPI_TransmitReceive>
 80044ee:	2800      	cmp	r0, #0
 80044f0:	d101      	bne.n	80044f6 <BSP_SPI1_SendRecv+0x1e>
  {
    ret = len;
 80044f2:	0020      	movs	r0, r4
  }
  return ret;
}
 80044f4:	bd16      	pop	{r1, r2, r4, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80044f6:	2006      	movs	r0, #6
 80044f8:	4240      	negs	r0, r0
  return ret;
 80044fa:	e7fb      	b.n	80044f4 <BSP_SPI1_SendRecv+0x1c>
 80044fc:	2000159c 	.word	0x2000159c

08004500 <MX_SPI1_Init>:
/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
 8004500:	4b14      	ldr	r3, [pc, #80]	; (8004554 <MX_SPI1_Init+0x54>)
{
 8004502:	b570      	push	{r4, r5, r6, lr}
  hspi->Instance = SPI1;
 8004504:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8004506:	2382      	movs	r3, #130	; 0x82
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8004508:	2500      	movs	r5, #0
  hspi->Init.Mode = SPI_MODE_MASTER;
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	6043      	str	r3, [r0, #4]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 800450e:	33fc      	adds	r3, #252	; 0xfc
 8004510:	6183      	str	r3, [r0, #24]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8004512:	6085      	str	r5, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8004514:	60c5      	str	r5, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004516:	6105      	str	r5, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8004518:	6145      	str	r5, [r0, #20]
{
 800451a:	0004      	movs	r4, r0
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 800451c:	f001 fda0 	bl	8006060 <HAL_RCC_GetPCLK2Freq>
  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
  uint32_t divisor = 0;
 8004520:	002b      	movs	r3, r5
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 8004522:	4a0d      	ldr	r2, [pc, #52]	; (8004558 <MX_SPI1_Init+0x58>)
  {
    presc = baudrate[divisor];
 8004524:	490d      	ldr	r1, [pc, #52]	; (800455c <MX_SPI1_Init+0x5c>)
  while (spi_clk > baudrate_mbps)
 8004526:	4290      	cmp	r0, r2
 8004528:	d80d      	bhi.n	8004546 <MX_SPI1_Init+0x46>
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800452a:	2300      	movs	r3, #0
 800452c:	6223      	str	r3, [r4, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800452e:	6263      	str	r3, [r4, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004530:	62a3      	str	r3, [r4, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8004532:	3307      	adds	r3, #7
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8004534:	61e5      	str	r5, [r4, #28]
  hspi->Init.CRCPolynomial = 7;
 8004536:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8004538:	0020      	movs	r0, r4
 800453a:	f002 fa85 	bl	8006a48 <HAL_SPI_Init>
 800453e:	1e43      	subs	r3, r0, #1
 8004540:	4198      	sbcs	r0, r3
  return ret;
 8004542:	b2c0      	uxtb	r0, r0
}
 8004544:	bd70      	pop	{r4, r5, r6, pc}
    presc = baudrate[divisor];
 8004546:	009d      	lsls	r5, r3, #2
    if (++divisor > 7)
 8004548:	3301      	adds	r3, #1
    presc = baudrate[divisor];
 800454a:	586d      	ldr	r5, [r5, r1]
    if (++divisor > 7)
 800454c:	2b08      	cmp	r3, #8
 800454e:	d0ec      	beq.n	800452a <MX_SPI1_Init+0x2a>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 8004550:	0840      	lsrs	r0, r0, #1
 8004552:	e7e8      	b.n	8004526 <MX_SPI1_Init+0x26>
 8004554:	40013000 	.word	0x40013000
 8004558:	00989680 	.word	0x00989680
 800455c:	08011208 	.word	0x08011208

08004560 <BSP_SPI1_Init>:
{
 8004560:	b530      	push	{r4, r5, lr}
  hspi1.Instance  = SPI1;
 8004562:	4d1b      	ldr	r5, [pc, #108]	; (80045d0 <BSP_SPI1_Init+0x70>)
 8004564:	4b1b      	ldr	r3, [pc, #108]	; (80045d4 <BSP_SPI1_Init+0x74>)
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8004566:	0028      	movs	r0, r5
{
 8004568:	b087      	sub	sp, #28
  hspi1.Instance  = SPI1;
 800456a:	602b      	str	r3, [r5, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 800456c:	f002 fbc3 	bl	8006cf6 <HAL_SPI_GetState>
 8004570:	1e04      	subs	r4, r0, #0
 8004572:	d002      	beq.n	800457a <BSP_SPI1_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8004574:	2000      	movs	r0, #0
}
 8004576:	b007      	add	sp, #28
 8004578:	bd30      	pop	{r4, r5, pc}
  __HAL_RCC_SPI1_CLK_ENABLE();
 800457a:	2380      	movs	r3, #128	; 0x80
 800457c:	4a16      	ldr	r2, [pc, #88]	; (80045d8 <BSP_SPI1_Init+0x78>)
 800457e:	015b      	lsls	r3, r3, #5
 8004580:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004582:	430b      	orrs	r3, r1
 8004584:	6353      	str	r3, [r2, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004586:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004588:	9003      	str	r0, [sp, #12]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 800458a:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800458c:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800458e:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004590:	3301      	adds	r3, #1
 8004592:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004594:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8004596:	337d      	adds	r3, #125	; 0x7d
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004598:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 800459a:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800459c:	f000 ffca 	bl	8005534 <HAL_GPIO_Init>
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80045a0:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 80045a2:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80045a4:	a901      	add	r1, sp, #4
 80045a6:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 80045a8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 80045aa:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80045ac:	f000 ffc2 	bl	8005534 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80045b0:	2308      	movs	r3, #8
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80045b2:	480a      	ldr	r0, [pc, #40]	; (80045dc <BSP_SPI1_Init+0x7c>)
 80045b4:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80045b6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80045b8:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80045ba:	f000 ffbb 	bl	8005534 <HAL_GPIO_Init>
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 80045be:	0028      	movs	r0, r5
 80045c0:	f7ff ff9e 	bl	8004500 <MX_SPI1_Init>
 80045c4:	2800      	cmp	r0, #0
 80045c6:	d0d5      	beq.n	8004574 <BSP_SPI1_Init+0x14>
      ret = BSP_ERROR_BUS_FAILURE;
 80045c8:	2008      	movs	r0, #8
 80045ca:	4240      	negs	r0, r0
  return ret;
 80045cc:	e7d3      	b.n	8004576 <BSP_SPI1_Init+0x16>
 80045ce:	46c0      	nop			; (mov r8, r8)
 80045d0:	2000159c 	.word	0x2000159c
 80045d4:	40013000 	.word	0x40013000
 80045d8:	40021000 	.word	0x40021000
 80045dc:	50000400 	.word	0x50000400

080045e0 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80045e0:	b500      	push	{lr}
 80045e2:	b08b      	sub	sp, #44	; 0x2c
 80045e4:	2803      	cmp	r0, #3
 80045e6:	d80c      	bhi.n	8004602 <BSP_LED_Init+0x22>
 80045e8:	4b1b      	ldr	r3, [pc, #108]	; (8004658 <BSP_LED_Init+0x78>)
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80045ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ec:	f7fb fd9e 	bl	800012c <__gnu_thumb1_case_uqi>
 80045f0:	2b231b02 	.word	0x2b231b02
 80045f4:	2102      	movs	r1, #2
 80045f6:	430a      	orrs	r2, r1
 80045f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	400b      	ands	r3, r1
 80045fe:	9301      	str	r3, [sp, #4]
 8004600:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8004602:	4b16      	ldr	r3, [pc, #88]	; (800465c <BSP_LED_Init+0x7c>)
 8004604:	0042      	lsls	r2, r0, #1
 8004606:	5ad3      	ldrh	r3, [r2, r3]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8004608:	0080      	lsls	r0, r0, #2
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800460a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800460c:	2301      	movs	r3, #1
 800460e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004610:	2300      	movs	r3, #0
 8004612:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004614:	3303      	adds	r3, #3
 8004616:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8004618:	4b11      	ldr	r3, [pc, #68]	; (8004660 <BSP_LED_Init+0x80>)
 800461a:	a905      	add	r1, sp, #20
 800461c:	58c0      	ldr	r0, [r0, r3]
 800461e:	f000 ff89 	bl	8005534 <HAL_GPIO_Init>
}
 8004622:	b00b      	add	sp, #44	; 0x2c
 8004624:	bd00      	pop	{pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8004626:	2101      	movs	r1, #1
 8004628:	430a      	orrs	r2, r1
 800462a:	62da      	str	r2, [r3, #44]	; 0x2c
 800462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462e:	400b      	ands	r3, r1
 8004630:	9302      	str	r3, [sp, #8]
 8004632:	9b02      	ldr	r3, [sp, #8]
 8004634:	e7e5      	b.n	8004602 <BSP_LED_Init+0x22>
 8004636:	2102      	movs	r1, #2
 8004638:	430a      	orrs	r2, r1
 800463a:	62da      	str	r2, [r3, #44]	; 0x2c
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	400b      	ands	r3, r1
 8004640:	9303      	str	r3, [sp, #12]
 8004642:	9b03      	ldr	r3, [sp, #12]
 8004644:	e7dd      	b.n	8004602 <BSP_LED_Init+0x22>
 8004646:	2102      	movs	r1, #2
 8004648:	430a      	orrs	r2, r1
 800464a:	62da      	str	r2, [r3, #44]	; 0x2c
 800464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464e:	400b      	ands	r3, r1
 8004650:	9304      	str	r3, [sp, #16]
 8004652:	9b04      	ldr	r3, [sp, #16]
 8004654:	e7d5      	b.n	8004602 <BSP_LED_Init+0x22>
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	40021000 	.word	0x40021000
 800465c:	08011228 	.word	0x08011228
 8004660:	20000030 	.word	0x20000030

08004664 <BSP_LED_On>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8004664:	4b05      	ldr	r3, [pc, #20]	; (800467c <BSP_LED_On+0x18>)
{
 8004666:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8004668:	0042      	lsls	r2, r0, #1
 800466a:	5ad1      	ldrh	r1, [r2, r3]
 800466c:	4b04      	ldr	r3, [pc, #16]	; (8004680 <BSP_LED_On+0x1c>)
 800466e:	0080      	lsls	r0, r0, #2
 8004670:	2201      	movs	r2, #1
 8004672:	58c0      	ldr	r0, [r0, r3]
 8004674:	f001 f8a4 	bl	80057c0 <HAL_GPIO_WritePin>
}
 8004678:	bd10      	pop	{r4, pc}
 800467a:	46c0      	nop			; (mov r8, r8)
 800467c:	08011228 	.word	0x08011228
 8004680:	20000030 	.word	0x20000030

08004684 <BSP_LED_Off>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8004684:	4b05      	ldr	r3, [pc, #20]	; (800469c <BSP_LED_Off+0x18>)
{
 8004686:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8004688:	0042      	lsls	r2, r0, #1
 800468a:	5ad1      	ldrh	r1, [r2, r3]
 800468c:	4b04      	ldr	r3, [pc, #16]	; (80046a0 <BSP_LED_Off+0x1c>)
 800468e:	0080      	lsls	r0, r0, #2
 8004690:	2200      	movs	r2, #0
 8004692:	58c0      	ldr	r0, [r0, r3]
 8004694:	f001 f894 	bl	80057c0 <HAL_GPIO_WritePin>
}
 8004698:	bd10      	pop	{r4, pc}
 800469a:	46c0      	nop			; (mov r8, r8)
 800469c:	08011228 	.word	0x08011228
 80046a0:	20000030 	.word	0x20000030

080046a4 <BSP_LED_Toggle>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80046a4:	4b04      	ldr	r3, [pc, #16]	; (80046b8 <BSP_LED_Toggle+0x14>)
{
 80046a6:	b510      	push	{r4, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80046a8:	0042      	lsls	r2, r0, #1
 80046aa:	5ad1      	ldrh	r1, [r2, r3]
 80046ac:	4b03      	ldr	r3, [pc, #12]	; (80046bc <BSP_LED_Toggle+0x18>)
 80046ae:	0080      	lsls	r0, r0, #2
 80046b0:	58c0      	ldr	r0, [r0, r3]
 80046b2:	f001 f88b 	bl	80057cc <HAL_GPIO_TogglePin>
}
 80046b6:	bd10      	pop	{r4, pc}
 80046b8:	08011228 	.word	0x08011228
 80046bc:	20000030 	.word	0x20000030

080046c0 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>:

/* Exported functions ---------------------------------------------------------*/
uint32_t CMWX1ZZABZ0XX_RADIO_GetWakeUpTime(void)
{
  return  BOARD_WAKEUP_TIME;
}
 80046c0:	2005      	movs	r0, #5
 80046c2:	4770      	bx	lr

080046c4 <CMWX1ZZABZ0XX_RADIO_SetXO>:

void CMWX1ZZABZ0XX_RADIO_SetXO(uint8_t state)
{
 80046c4:	0002      	movs	r2, r0
 80046c6:	b510      	push	{r4, lr}

  if (state == SET)
 80046c8:	2801      	cmp	r0, #1
 80046ca:	d109      	bne.n	80046e0 <CMWX1ZZABZ0XX_RADIO_SetXO+0x1c>
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_SET);
 80046cc:	2180      	movs	r1, #128	; 0x80
 80046ce:	20a0      	movs	r0, #160	; 0xa0
 80046d0:	0149      	lsls	r1, r1, #5
 80046d2:	05c0      	lsls	r0, r0, #23
 80046d4:	f001 f874 	bl	80057c0 <HAL_GPIO_WritePin>

    HAL_Delay(BOARD_WAKEUP_TIME);   //start up time of TCXO
 80046d8:	2005      	movs	r0, #5
 80046da:	f7ff fd61 	bl	80041a0 <HAL_Delay>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
  }
}
 80046de:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
 80046e0:	2180      	movs	r1, #128	; 0x80
 80046e2:	20a0      	movs	r0, #160	; 0xa0
 80046e4:	2200      	movs	r2, #0
 80046e6:	0149      	lsls	r1, r1, #5
 80046e8:	05c0      	lsls	r0, r0, #23
 80046ea:	f001 f869 	bl	80057c0 <HAL_GPIO_WritePin>
}
 80046ee:	e7f6      	b.n	80046de <CMWX1ZZABZ0XX_RADIO_SetXO+0x1a>

080046f0 <CMWX1ZZABZ0XX_RADIO_IoInit>:
void CMWX1ZZABZ0XX_RADIO_IoInit(void)
{
  GPIO_InitTypeDef initStruct = {0};
 80046f0:	2300      	movs	r3, #0
{
 80046f2:	b5f0      	push	{r4, r5, r6, r7, lr}
  SPI_HandleTypeDef dummy_hspi;

  /* Enable DIO GPIO clock */
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 80046f4:	2702      	movs	r7, #2
  RADIO_DIO_1_GPIO_CLK_ENABLE();
  RADIO_DIO_2_GPIO_CLK_ENABLE();
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 80046f6:	2204      	movs	r2, #4
{
 80046f8:	b097      	sub	sp, #92	; 0x5c
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 80046fa:	4c65      	ldr	r4, [pc, #404]	; (8004890 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a0>)
  GPIO_InitTypeDef initStruct = {0};
 80046fc:	9310      	str	r3, [sp, #64]	; 0x40
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 80046fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  RADIO_DIO_5_GPIO_CLK_ENABLE();
#endif

  /* DIO IO Init */
  initStruct.Pull = GPIO_PULLDOWN;
  initStruct.Speed = GPIO_SPEED_HIGH;
 8004700:	2103      	movs	r1, #3
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8004702:	433b      	orrs	r3, r7
 8004704:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004706:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
    initStruct.Pin = RADIO_DIO_PIN[i];
 8004708:	2501      	movs	r5, #1
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 800470a:	403b      	ands	r3, r7
 800470c:	9301      	str	r3, [sp, #4]
 800470e:	9b01      	ldr	r3, [sp, #4]
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8004710:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    initStruct.Mode = RADIO_DIO_MODE[i];
 8004712:	4e60      	ldr	r6, [pc, #384]	; (8004894 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a4>)
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8004714:	433b      	orrs	r3, r7
 8004716:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004718:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800471a:	a80c      	add	r0, sp, #48	; 0x30
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 800471c:	403b      	ands	r3, r7
 800471e:	9302      	str	r3, [sp, #8]
 8004720:	9b02      	ldr	r3, [sp, #8]
  RADIO_DIO_2_GPIO_CLK_ENABLE();
 8004722:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004724:	433b      	orrs	r3, r7
 8004726:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004728:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800472a:	403b      	ands	r3, r7
 800472c:	9303      	str	r3, [sp, #12]
 800472e:	9b03      	ldr	r3, [sp, #12]
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8004730:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004732:	4313      	orrs	r3, r2
 8004734:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004736:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 8004738:	910f      	str	r1, [sp, #60]	; 0x3c
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 800473a:	4013      	ands	r3, r2
 800473c:	9304      	str	r3, [sp, #16]
 800473e:	9b04      	ldr	r3, [sp, #16]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8004740:	2310      	movs	r3, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8004742:	0001      	movs	r1, r0
 8004744:	4854      	ldr	r0, [pc, #336]	; (8004898 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8004746:	960d      	str	r6, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8004748:	930c      	str	r3, [sp, #48]	; 0x30
  initStruct.Pull = GPIO_PULLDOWN;
 800474a:	970e      	str	r7, [sp, #56]	; 0x38
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800474c:	f000 fef2 	bl	8005534 <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 8004750:	4b52      	ldr	r3, [pc, #328]	; (800489c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1ac>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8004752:	a80c      	add	r0, sp, #48	; 0x30
 8004754:	0001      	movs	r1, r0
 8004756:	4850      	ldr	r0, [pc, #320]	; (8004898 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8004758:	930d      	str	r3, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 800475a:	970c      	str	r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800475c:	f000 feea 	bl	8005534 <HAL_GPIO_Init>
 8004760:	a80c      	add	r0, sp, #48	; 0x30
 8004762:	0001      	movs	r1, r0
 8004764:	484c      	ldr	r0, [pc, #304]	; (8004898 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8004766:	960d      	str	r6, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8004768:	950c      	str	r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800476a:	f000 fee3 	bl	8005534 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 800476e:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8004770:	a80c      	add	r0, sp, #48	; 0x30
 8004772:	0001      	movs	r1, r0
    initStruct.Pin = RADIO_DIO_PIN[i];
 8004774:	019b      	lsls	r3, r3, #6
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8004776:	484a      	ldr	r0, [pc, #296]	; (80048a0 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8004778:	960d      	str	r6, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 800477a:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800477c:	f000 feda 	bl	8005534 <HAL_GPIO_Init>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8004780:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004782:	26a0      	movs	r6, #160	; 0xa0
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8004784:	433b      	orrs	r3, r7
 8004786:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004788:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800478a:	2103      	movs	r1, #3
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 800478c:	403b      	ands	r3, r7
 800478e:	9309      	str	r3, [sp, #36]	; 0x24
 8004790:	9b09      	ldr	r3, [sp, #36]	; 0x24
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8004792:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004794:	05f6      	lsls	r6, r6, #23
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8004796:	432b      	orrs	r3, r5
 8004798:	62e3      	str	r3, [r4, #44]	; 0x2c
 800479a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800479c:	a811      	add	r0, sp, #68	; 0x44
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 800479e:	402b      	ands	r3, r5
 80047a0:	930a      	str	r3, [sp, #40]	; 0x28
 80047a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 80047a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80047a6:	432b      	orrs	r3, r5
 80047a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80047aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047ac:	9114      	str	r1, [sp, #80]	; 0x50
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 80047ae:	402b      	ands	r3, r5
 80047b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80047b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 80047b4:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80047b6:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 80047b8:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80047ba:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 80047bc:	3380      	adds	r3, #128	; 0x80
 80047be:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047c0:	9712      	str	r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80047c2:	9713      	str	r7, [sp, #76]	; 0x4c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80047c4:	f000 feb6 	bl	8005534 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 80047c8:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80047ca:	a811      	add	r0, sp, #68	; 0x44
 80047cc:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 80047ce:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80047d0:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 80047d2:	3340      	adds	r3, #64	; 0x40
 80047d4:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80047d6:	f000 fead 	bl	8005534 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 80047da:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80047dc:	a811      	add	r0, sp, #68	; 0x44
 80047de:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 80047e0:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80047e2:	482d      	ldr	r0, [pc, #180]	; (8004898 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 80047e4:	3308      	adds	r3, #8
 80047e6:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80047e8:	f000 fea4 	bl	8005534 <HAL_GPIO_Init>
  initStruct.Pin = RADIO_NSS_PIN;
 80047ec:	2080      	movs	r0, #128	; 0x80
 80047ee:	0200      	lsls	r0, r0, #8
 80047f0:	900c      	str	r0, [sp, #48]	; 0x30
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047f2:	950d      	str	r5, [sp, #52]	; 0x34
  initStruct.Pull = GPIO_PULLUP;
 80047f4:	950e      	str	r5, [sp, #56]	; 0x38
  RADIO_NSS_CLK_ENABLE();
 80047f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 80047f8:	a80c      	add	r0, sp, #48	; 0x30
  RADIO_NSS_CLK_ENABLE();
 80047fa:	432b      	orrs	r3, r5
 80047fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80047fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8004800:	0001      	movs	r1, r0
  RADIO_NSS_CLK_ENABLE();
 8004802:	402b      	ands	r3, r5
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8004804:	0030      	movs	r0, r6
  RADIO_NSS_CLK_ENABLE();
 8004806:	9305      	str	r3, [sp, #20]
 8004808:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 800480a:	f000 fe93 	bl	8005534 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 800480e:	2180      	movs	r1, #128	; 0x80
 8004810:	002a      	movs	r2, r5
 8004812:	0030      	movs	r0, r6
 8004814:	0209      	lsls	r1, r1, #8
 8004816:	f000 ffd3 	bl	80057c0 <HAL_GPIO_WritePin>
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 800481a:	2204      	movs	r2, #4
  RADIO_TCXO_VCC_CLK_ENABLE();
 800481c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 800481e:	2103      	movs	r1, #3
  RADIO_TCXO_VCC_CLK_ENABLE();
 8004820:	432b      	orrs	r3, r5
 8004822:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004824:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8004826:	0030      	movs	r0, r6
  RADIO_TCXO_VCC_CLK_ENABLE();
 8004828:	402b      	ands	r3, r5
 800482a:	9306      	str	r3, [sp, #24]
 800482c:	9b06      	ldr	r3, [sp, #24]
  RADIO_ANT_SWITCH_CLK_ENABLE_RX();
 800482e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004830:	432b      	orrs	r3, r5
 8004832:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004834:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004836:	402b      	ands	r3, r5
 8004838:	9307      	str	r3, [sp, #28]
 800483a:	9b07      	ldr	r3, [sp, #28]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 800483c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800483e:	4313      	orrs	r3, r2
 8004840:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004842:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004844:	4013      	ands	r3, r2
 8004846:	9308      	str	r3, [sp, #32]
 8004848:	9b08      	ldr	r3, [sp, #32]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_RFO();
 800484a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800484c:	4313      	orrs	r3, r2
 800484e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004850:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004852:	0014      	movs	r4, r2
 8004854:	4013      	ands	r3, r2
 8004856:	9311      	str	r3, [sp, #68]	; 0x44
 8004858:	9b11      	ldr	r3, [sp, #68]	; 0x44
  initStruct.Pull = GPIO_NOPULL;
 800485a:	2300      	movs	r3, #0
 800485c:	930e      	str	r3, [sp, #56]	; 0x38
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 800485e:	2380      	movs	r3, #128	; 0x80
  initStruct.Speed = GPIO_SPEED_HIGH;
 8004860:	910f      	str	r1, [sp, #60]	; 0x3c
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8004862:	015b      	lsls	r3, r3, #5
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8004864:	a90c      	add	r1, sp, #48	; 0x30
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8004866:	930c      	str	r3, [sp, #48]	; 0x30
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004868:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 800486a:	f000 fe63 	bl	8005534 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 800486e:	0030      	movs	r0, r6
 8004870:	a90c      	add	r1, sp, #48	; 0x30
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_RX;
 8004872:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 8004874:	f000 fe5e 	bl	8005534 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 8004878:	a90c      	add	r1, sp, #48	; 0x30
 800487a:	4809      	ldr	r0, [pc, #36]	; (80048a0 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_BOOST;
 800487c:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 800487e:	f000 fe59 	bl	8005534 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 8004882:	4807      	ldr	r0, [pc, #28]	; (80048a0 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
 8004884:	a90c      	add	r1, sp, #48	; 0x30
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_RFO;
 8004886:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 8004888:	f000 fe54 	bl	8005534 <HAL_GPIO_Init>
}
 800488c:	b017      	add	sp, #92	; 0x5c
 800488e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004890:	40021000 	.word	0x40021000
 8004894:	10110000 	.word	0x10110000
 8004898:	50000400 	.word	0x50000400
 800489c:	10310000 	.word	0x10310000
 80048a0:	50000800 	.word	0x50000800

080048a4 <CMWX1ZZABZ0XX_RADIO_IoDeInit>:
{
 80048a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef initStruct = {0};
 80048a6:	2608      	movs	r6, #8
{
 80048a8:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef initStruct = {0};
 80048aa:	0032      	movs	r2, r6
 80048ac:	2100      	movs	r1, #0
 80048ae:	a803      	add	r0, sp, #12
 80048b0:	f00c fbc0 	bl	8011034 <memset>
  initStruct.Pull = GPIO_PULLDOWN;
 80048b4:	2502      	movs	r5, #2
    initStruct.Pin = RADIO_DIO_PIN[i];
 80048b6:	2310      	movs	r3, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80048b8:	4c22      	ldr	r4, [pc, #136]	; (8004944 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa0>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 80048ba:	4f23      	ldr	r7, [pc, #140]	; (8004948 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa4>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80048bc:	4669      	mov	r1, sp
 80048be:	0020      	movs	r0, r4
  initStruct.Pull = GPIO_PULLDOWN;
 80048c0:	9502      	str	r5, [sp, #8]
    initStruct.Mode = RADIO_DIO_MODE[i];
 80048c2:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 80048c4:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80048c6:	f000 fe35 	bl	8005534 <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 80048ca:	4b20      	ldr	r3, [pc, #128]	; (800494c <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa8>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80048cc:	4669      	mov	r1, sp
 80048ce:	0020      	movs	r0, r4
    initStruct.Mode = RADIO_DIO_MODE[i];
 80048d0:	9301      	str	r3, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 80048d2:	9500      	str	r5, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80048d4:	f000 fe2e 	bl	8005534 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 80048d8:	2301      	movs	r3, #1
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80048da:	4669      	mov	r1, sp
 80048dc:	0020      	movs	r0, r4
    initStruct.Mode = RADIO_DIO_MODE[i];
 80048de:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 80048e0:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80048e2:	f000 fe27 	bl	8005534 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 80048e6:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80048e8:	4669      	mov	r1, sp
    initStruct.Pin = RADIO_DIO_PIN[i];
 80048ea:	019b      	lsls	r3, r3, #6
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80048ec:	4818      	ldr	r0, [pc, #96]	; (8004950 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xac>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 80048ee:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 80048f0:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80048f2:	f000 fe1f 	bl	8005534 <HAL_GPIO_Init>
  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80048f6:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80048f8:	25a0      	movs	r5, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048fa:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 80048fc:	2780      	movs	r7, #128	; 0x80
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80048fe:	05ed      	lsls	r5, r5, #23
 8004900:	0028      	movs	r0, r5
 8004902:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004904:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8004906:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004908:	f000 fe14 	bl	8005534 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 800490c:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 800490e:	0028      	movs	r0, r5
 8004910:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8004912:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8004914:	f000 fe0e 	bl	8005534 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8004918:	0020      	movs	r0, r4
 800491a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 800491c:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 800491e:	f000 fe09 	bl	8005534 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 8004922:	0039      	movs	r1, r7
 8004924:	0028      	movs	r0, r5
 8004926:	2200      	movs	r2, #0
 8004928:	f000 ff4a 	bl	80057c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 800492c:	0028      	movs	r0, r5
 800492e:	2200      	movs	r2, #0
 8004930:	2140      	movs	r1, #64	; 0x40
 8004932:	f000 ff45 	bl	80057c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 8004936:	2200      	movs	r2, #0
 8004938:	0031      	movs	r1, r6
 800493a:	0020      	movs	r0, r4
 800493c:	f000 ff40 	bl	80057c0 <HAL_GPIO_WritePin>
}
 8004940:	b00b      	add	sp, #44	; 0x2c
 8004942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004944:	50000400 	.word	0x50000400
 8004948:	10110000 	.word	0x10110000
 800494c:	10310000 	.word	0x10310000
 8004950:	50000800 	.word	0x50000800

08004954 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>:
{
 8004954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004956:	9000      	str	r0, [sp, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004958:	f3ef 8310 	mrs	r3, PRIMASK
 800495c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800495e:	b672      	cpsid	i
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8004960:	2400      	movs	r4, #0
    HAL_EXTI_GetHandle(&hRADIO_DIO_exti[i], RADIO_DIO_EXTI_LINE[i]);
 8004962:	4b11      	ldr	r3, [pc, #68]	; (80049a8 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x54>)
 8004964:	4d11      	ldr	r5, [pc, #68]	; (80049ac <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x58>)
 8004966:	00e6      	lsls	r6, r4, #3
 8004968:	18f6      	adds	r6, r6, r3
 800496a:	00a7      	lsls	r7, r4, #2
 800496c:	5979      	ldr	r1, [r7, r5]
 800496e:	0030      	movs	r0, r6
 8004970:	f000 fdc7 	bl	8005502 <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 8004974:	9b00      	ldr	r3, [sp, #0]
 8004976:	2100      	movs	r1, #0
 8004978:	59da      	ldr	r2, [r3, r7]
 800497a:	0030      	movs	r0, r6
 800497c:	f000 fdba 	bl	80054f4 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority(RADIO_DIO_IRQn[i], RADIO_DIO_IT_PRIO[i], 0x00);
 8004980:	002b      	movs	r3, r5
 8004982:	3310      	adds	r3, #16
 8004984:	56e6      	ldrsb	r6, [r4, r3]
 8004986:	3514      	adds	r5, #20
 8004988:	2200      	movs	r2, #0
 800498a:	0030      	movs	r0, r6
 800498c:	5979      	ldr	r1, [r7, r5]
 800498e:	f000 fc27 	bl	80051e0 <HAL_NVIC_SetPriority>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8004992:	3401      	adds	r4, #1
    HAL_NVIC_EnableIRQ(RADIO_DIO_IRQn[i]);
 8004994:	0030      	movs	r0, r6
 8004996:	f000 fc4d 	bl	8005234 <HAL_NVIC_EnableIRQ>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 800499a:	2c04      	cmp	r4, #4
 800499c:	d1e1      	bne.n	8004962 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xe>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800499e:	9b01      	ldr	r3, [sp, #4]
 80049a0:	f383 8810 	msr	PRIMASK, r3
}
 80049a4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80049a6:	46c0      	nop			; (mov r8, r8)
 80049a8:	200015f4 	.word	0x200015f4
 80049ac:	08011234 	.word	0x08011234

080049b0 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>:
}
 80049b0:	2000      	movs	r0, #0
 80049b2:	4770      	bx	lr

080049b4 <CMWX1ZZABZ0XX_RADIO_SetAntSw>:
  switch (state)
 80049b4:	3801      	subs	r0, #1
{
 80049b6:	b510      	push	{r4, lr}
 80049b8:	2803      	cmp	r0, #3
 80049ba:	d811      	bhi.n	80049e0 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x2c>
 80049bc:	f7fb fbb6 	bl	800012c <__gnu_thumb1_case_uqi>
 80049c0:	080d0902 	.word	0x080d0902
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_SET);
 80049c4:	20a0      	movs	r0, #160	; 0xa0
 80049c6:	2201      	movs	r2, #1
 80049c8:	2102      	movs	r1, #2
 80049ca:	05c0      	lsls	r0, r0, #23
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 80049cc:	f000 fef8 	bl	80057c0 <HAL_GPIO_WritePin>
}
 80049d0:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_SET);
 80049d2:	2201      	movs	r2, #1
 80049d4:	2104      	movs	r1, #4
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 80049d6:	4809      	ldr	r0, [pc, #36]	; (80049fc <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x48>)
 80049d8:	e7f8      	b.n	80049cc <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x18>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_SET);
 80049da:	2201      	movs	r2, #1
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 80049dc:	2102      	movs	r1, #2
 80049de:	e7fa      	b.n	80049d6 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x22>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 80049e0:	20a0      	movs	r0, #160	; 0xa0
 80049e2:	2200      	movs	r2, #0
 80049e4:	2102      	movs	r1, #2
 80049e6:	05c0      	lsls	r0, r0, #23
 80049e8:	f000 feea 	bl	80057c0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 80049ec:	2200      	movs	r2, #0
 80049ee:	2104      	movs	r1, #4
 80049f0:	4802      	ldr	r0, [pc, #8]	; (80049fc <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x48>)
 80049f2:	f000 fee5 	bl	80057c0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 80049f6:	2200      	movs	r2, #0
 80049f8:	e7f0      	b.n	80049dc <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x28>
 80049fa:	46c0      	nop			; (mov r8, r8)
 80049fc:	50000800 	.word	0x50000800

08004a00 <CMWX1ZZABZ0XX_RADIO_CheckRfFrequency>:
}
 8004a00:	2001      	movs	r0, #1
 8004a02:	4770      	bx	lr

08004a04 <CMWX1ZZABZ0XX_RADIO_Reset>:
{
 8004a04:	b570      	push	{r4, r5, r6, lr}
  initStruct.Speed = GPIO_SPEED_HIGH;
 8004a06:	2303      	movs	r3, #3
  GPIO_InitTypeDef initStruct = { 0 };
 8004a08:	2400      	movs	r4, #0
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a0a:	2501      	movs	r5, #1
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8004a0c:	4e0e      	ldr	r6, [pc, #56]	; (8004a48 <CMWX1ZZABZ0XX_RADIO_Reset+0x44>)
{
 8004a0e:	b086      	sub	sp, #24
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8004a10:	0030      	movs	r0, r6
 8004a12:	a901      	add	r1, sp, #4
  initStruct.Speed = GPIO_SPEED_HIGH;
 8004a14:	9304      	str	r3, [sp, #16]
  GPIO_InitTypeDef initStruct = { 0 };
 8004a16:	9405      	str	r4, [sp, #20]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a18:	9502      	str	r5, [sp, #8]
  initStruct.Pull = GPIO_NOPULL;
 8004a1a:	9403      	str	r4, [sp, #12]
  initStruct.Pin = RADIO_RESET_PIN;
 8004a1c:	9501      	str	r5, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8004a1e:	f000 fd89 	bl	8005534 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 8004a22:	0022      	movs	r2, r4
 8004a24:	0029      	movs	r1, r5
 8004a26:	0030      	movs	r0, r6
 8004a28:	f000 feca 	bl	80057c0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8004a2c:	0028      	movs	r0, r5
 8004a2e:	f7ff fbb7 	bl	80041a0 <HAL_Delay>
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8004a32:	0030      	movs	r0, r6
 8004a34:	a901      	add	r1, sp, #4
  initStruct.Mode = GPIO_NOPULL;
 8004a36:	9402      	str	r4, [sp, #8]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8004a38:	f000 fd7c 	bl	8005534 <HAL_GPIO_Init>
  HAL_Delay(6);
 8004a3c:	2006      	movs	r0, #6
 8004a3e:	f7ff fbaf 	bl	80041a0 <HAL_Delay>
}
 8004a42:	b006      	add	sp, #24
 8004a44:	bd70      	pop	{r4, r5, r6, pc}
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	50000800 	.word	0x50000800

08004a4c <CMWX1ZZABZ0XX_RADIO_Bus_Init>:
{
 8004a4c:	b510      	push	{r4, lr}
  RADIO_SPI_Init();
 8004a4e:	f7ff fd87 	bl	8004560 <BSP_SPI1_Init>
}
 8004a52:	bd10      	pop	{r4, pc}

08004a54 <CMWX1ZZABZ0XX_RADIO_SendRecv>:
{
 8004a54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8004a56:	240e      	movs	r4, #14
{
 8004a58:	466b      	mov	r3, sp
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8004a5a:	446c      	add	r4, sp
{
 8004a5c:	80d8      	strh	r0, [r3, #6]
 8004a5e:	3306      	adds	r3, #6
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8004a60:	2201      	movs	r2, #1
 8004a62:	0021      	movs	r1, r4
 8004a64:	0018      	movs	r0, r3
 8004a66:	f7ff fd37 	bl	80044d8 <BSP_SPI1_SendRecv>
  return rxData;
 8004a6a:	8820      	ldrh	r0, [r4, #0]
}
 8004a6c:	b004      	add	sp, #16
 8004a6e:	bd10      	pop	{r4, pc}

08004a70 <CMWX1ZZABZ0XX_RADIO_ChipSelect>:
{
 8004a70:	0002      	movs	r2, r0
 8004a72:	b510      	push	{r4, lr}
  if (state == 0)
 8004a74:	2800      	cmp	r0, #0
 8004a76:	d106      	bne.n	8004a86 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x16>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8004a78:	2180      	movs	r1, #128	; 0x80
 8004a7a:	20a0      	movs	r0, #160	; 0xa0
 8004a7c:	0209      	lsls	r1, r1, #8
 8004a7e:	05c0      	lsls	r0, r0, #23
 8004a80:	f000 fe9e 	bl	80057c0 <HAL_GPIO_WritePin>
}
 8004a84:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8004a86:	2201      	movs	r2, #1
 8004a88:	e7f6      	b.n	8004a78 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x8>
	...

08004a8c <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>:
{
 8004a8c:	b510      	push	{r4, lr}
  return HAL_GPIO_ReadPin(RADIO_DIO_1_PORT, RADIO_DIO_1_PIN);
 8004a8e:	2102      	movs	r1, #2
 8004a90:	4801      	ldr	r0, [pc, #4]	; (8004a98 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState+0xc>)
 8004a92:	f000 fe8f 	bl	80057b4 <HAL_GPIO_ReadPin>
}
 8004a96:	bd10      	pop	{r4, pc}
 8004a98:	50000400 	.word	0x50000400

08004a9c <SystemInit>:
  * @retval None
  */
void SystemInit(void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8004a9c:	2280      	movs	r2, #128	; 0x80
 8004a9e:	4b10      	ldr	r3, [pc, #64]	; (8004ae0 <SystemInit+0x44>)
 8004aa0:	0052      	lsls	r2, r2, #1
 8004aa2:	6819      	ldr	r1, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	490e      	ldr	r1, [pc, #56]	; (8004ae4 <SystemInit+0x48>)
 8004aac:	400a      	ands	r2, r1
 8004aae:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	490d      	ldr	r1, [pc, #52]	; (8004ae8 <SystemInit+0x4c>)
 8004ab4:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004ab6:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004ab8:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	438a      	bics	r2, r1
 8004abe:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	490a      	ldr	r1, [pc, #40]	; (8004aec <SystemInit+0x50>)
 8004ac4:	400a      	ands	r2, r1
 8004ac6:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	4909      	ldr	r1, [pc, #36]	; (8004af0 <SystemInit+0x54>)
 8004acc:	400a      	ands	r2, r1
 8004ace:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004ad4:	2280      	movs	r2, #128	; 0x80
 8004ad6:	4b07      	ldr	r3, [pc, #28]	; (8004af4 <SystemInit+0x58>)
 8004ad8:	0512      	lsls	r2, r2, #20
 8004ada:	609a      	str	r2, [r3, #8]
#endif
}
 8004adc:	4770      	bx	lr
 8004ade:	46c0      	nop			; (mov r8, r8)
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	88ff400c 	.word	0x88ff400c
 8004ae8:	fef6fff6 	.word	0xfef6fff6
 8004aec:	fffbffff 	.word	0xfffbffff
 8004af0:	ff02ffff 	.word	0xff02ffff
 8004af4:	e000ed00 	.word	0xe000ed00

08004af8 <HAL_Init>:
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004af8:	2302      	movs	r3, #2
 8004afa:	4a08      	ldr	r2, [pc, #32]	; (8004b1c <HAL_Init+0x24>)
{
 8004afc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004afe:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004b00:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b02:	430b      	orrs	r3, r1
 8004b04:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004b06:	f7ff fb45 	bl	8004194 <HAL_InitTick>
 8004b0a:	1e04      	subs	r4, r0, #0
 8004b0c:	d103      	bne.n	8004b16 <HAL_Init+0x1e>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004b0e:	f7ff f9ed 	bl	8003eec <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 8004b12:	0020      	movs	r0, r4
 8004b14:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8004b16:	2401      	movs	r4, #1
 8004b18:	e7fb      	b.n	8004b12 <HAL_Init+0x1a>
 8004b1a:	46c0      	nop			; (mov r8, r8)
 8004b1c:	40022000 	.word	0x40022000

08004b20 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004b20:	4a03      	ldr	r2, [pc, #12]	; (8004b30 <HAL_IncTick+0x10>)
 8004b22:	4b04      	ldr	r3, [pc, #16]	; (8004b34 <HAL_IncTick+0x14>)
 8004b24:	6811      	ldr	r1, [r2, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	185b      	adds	r3, r3, r1
 8004b2a:	6013      	str	r3, [r2, #0]
}
 8004b2c:	4770      	bx	lr
 8004b2e:	46c0      	nop			; (mov r8, r8)
 8004b30:	20001614 	.word	0x20001614
 8004b34:	20000048 	.word	0x20000048

08004b38 <HAL_GetUIDw0>:
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8004b38:	4b01      	ldr	r3, [pc, #4]	; (8004b40 <HAL_GetUIDw0+0x8>)
 8004b3a:	6818      	ldr	r0, [r3, #0]
}
 8004b3c:	4770      	bx	lr
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	1ff80050 	.word	0x1ff80050

08004b44 <HAL_GetUIDw1>:
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8004b44:	4b01      	ldr	r3, [pc, #4]	; (8004b4c <HAL_GetUIDw1+0x8>)
 8004b46:	6818      	ldr	r0, [r3, #0]
}
 8004b48:	4770      	bx	lr
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	1ff80054 	.word	0x1ff80054

08004b50 <HAL_GetUIDw2>:
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8004b50:	4b01      	ldr	r3, [pc, #4]	; (8004b58 <HAL_GetUIDw2+0x8>)
 8004b52:	6818      	ldr	r0, [r3, #0]
}
 8004b54:	4770      	bx	lr
 8004b56:	46c0      	nop			; (mov r8, r8)
 8004b58:	1ff80064 	.word	0x1ff80064

08004b5c <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	4a02      	ldr	r2, [pc, #8]	; (8004b68 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8004b60:	6853      	ldr	r3, [r2, #4]
 8004b62:	438b      	bics	r3, r1
 8004b64:	6053      	str	r3, [r2, #4]
}
 8004b66:	4770      	bx	lr
 8004b68:	40015800 	.word	0x40015800

08004b6c <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8004b6c:	2102      	movs	r1, #2
 8004b6e:	4a02      	ldr	r2, [pc, #8]	; (8004b78 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8004b70:	6853      	ldr	r3, [r2, #4]
 8004b72:	438b      	bics	r3, r1
 8004b74:	6053      	str	r3, [r2, #4]
}
 8004b76:	4770      	bx	lr
 8004b78:	40015800 	.word	0x40015800

08004b7c <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8004b7c:	2104      	movs	r1, #4
 8004b7e:	4a02      	ldr	r2, [pc, #8]	; (8004b88 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8004b80:	6853      	ldr	r3, [r2, #4]
 8004b82:	438b      	bics	r3, r1
 8004b84:	6053      	str	r3, [r2, #4]
}
 8004b86:	4770      	bx	lr
 8004b88:	40015800 	.word	0x40015800

08004b8c <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004b8c:	4b08      	ldr	r3, [pc, #32]	; (8004bb0 <ADC_DelayMicroSecond+0x24>)
{
 8004b8e:	b513      	push	{r0, r1, r4, lr}
 8004b90:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004b92:	4908      	ldr	r1, [pc, #32]	; (8004bb4 <ADC_DelayMicroSecond+0x28>)
 8004b94:	6818      	ldr	r0, [r3, #0]
 8004b96:	f7fb fae7 	bl	8000168 <__udivsi3>
 8004b9a:	4344      	muls	r4, r0
 8004b9c:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 8004b9e:	9b01      	ldr	r3, [sp, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d100      	bne.n	8004ba6 <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 8004ba4:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 8004ba6:	9b01      	ldr	r3, [sp, #4]
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	9301      	str	r3, [sp, #4]
 8004bac:	e7f7      	b.n	8004b9e <ADC_DelayMicroSecond+0x12>
 8004bae:	46c0      	nop			; (mov r8, r8)
 8004bb0:	20000044 	.word	0x20000044
 8004bb4:	000f4240 	.word	0x000f4240

08004bb8 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004bb8:	2103      	movs	r1, #3
 8004bba:	6803      	ldr	r3, [r0, #0]
{
 8004bbc:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004bbe:	689a      	ldr	r2, [r3, #8]
{
 8004bc0:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004bc2:	400a      	ands	r2, r1
 8004bc4:	2a01      	cmp	r2, #1
 8004bc6:	d104      	bne.n	8004bd2 <ADC_Enable+0x1a>
 8004bc8:	6819      	ldr	r1, [r3, #0]
 8004bca:	4211      	tst	r1, r2
 8004bcc:	d001      	beq.n	8004bd2 <ADC_Enable+0x1a>
  return HAL_OK;
 8004bce:	2000      	movs	r0, #0
}
 8004bd0:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004bd2:	6899      	ldr	r1, [r3, #8]
 8004bd4:	4a13      	ldr	r2, [pc, #76]	; (8004c24 <ADC_Enable+0x6c>)
 8004bd6:	4211      	tst	r1, r2
 8004bd8:	d008      	beq.n	8004bec <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bda:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bdc:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bde:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004be0:	4313      	orrs	r3, r2
 8004be2:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004be4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004be6:	4303      	orrs	r3, r0
 8004be8:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8004bea:	e7f1      	b.n	8004bd0 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 8004bec:	2501      	movs	r5, #1
 8004bee:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8004bf0:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 8004bf2:	432a      	orrs	r2, r5
 8004bf4:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8004bf6:	f7ff ffc9 	bl	8004b8c <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 8004bfa:	f7ff facd 	bl	8004198 <HAL_GetTick>
 8004bfe:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004c00:	6823      	ldr	r3, [r4, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	422b      	tst	r3, r5
 8004c06:	d1e2      	bne.n	8004bce <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004c08:	f7ff fac6 	bl	8004198 <HAL_GetTick>
 8004c0c:	1b80      	subs	r0, r0, r6
 8004c0e:	280a      	cmp	r0, #10
 8004c10:	d9f6      	bls.n	8004c00 <ADC_Enable+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c12:	2310      	movs	r3, #16
 8004c14:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 8004c16:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c1e:	431d      	orrs	r5, r3
 8004c20:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 8004c22:	e7d5      	b.n	8004bd0 <ADC_Enable+0x18>
 8004c24:	80000017 	.word	0x80000017

08004c28 <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004c28:	2103      	movs	r1, #3
 8004c2a:	6803      	ldr	r3, [r0, #0]
{
 8004c2c:	b570      	push	{r4, r5, r6, lr}
 8004c2e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004c30:	6898      	ldr	r0, [r3, #8]
 8004c32:	4008      	ands	r0, r1
 8004c34:	2801      	cmp	r0, #1
 8004c36:	d001      	beq.n	8004c3c <ADC_Disable+0x14>
  return HAL_OK;
 8004c38:	2000      	movs	r0, #0
}
 8004c3a:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	4202      	tst	r2, r0
 8004c40:	d0fa      	beq.n	8004c38 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004c42:	2205      	movs	r2, #5
 8004c44:	689d      	ldr	r5, [r3, #8]
 8004c46:	4015      	ands	r5, r2
 8004c48:	2d01      	cmp	r5, #1
 8004c4a:	d119      	bne.n	8004c80 <ADC_Disable+0x58>
      __HAL_ADC_DISABLE(hadc);
 8004c4c:	6898      	ldr	r0, [r3, #8]
 8004c4e:	3a03      	subs	r2, #3
 8004c50:	4302      	orrs	r2, r0
 8004c52:	609a      	str	r2, [r3, #8]
 8004c54:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8004c56:	f7ff fa9f 	bl	8004198 <HAL_GetTick>
 8004c5a:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004c5c:	6823      	ldr	r3, [r4, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	422b      	tst	r3, r5
 8004c62:	d0e9      	beq.n	8004c38 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004c64:	f7ff fa98 	bl	8004198 <HAL_GetTick>
 8004c68:	1b80      	subs	r0, r0, r6
 8004c6a:	280a      	cmp	r0, #10
 8004c6c:	d9f6      	bls.n	8004c5c <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c6e:	2310      	movs	r3, #16
 8004c70:	6d62      	ldr	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c72:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c74:	4313      	orrs	r3, r2
 8004c76:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c7a:	431d      	orrs	r5, r3
 8004c7c:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 8004c7e:	e7dc      	b.n	8004c3a <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c80:	2310      	movs	r3, #16
 8004c82:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004c84:	4313      	orrs	r3, r2
 8004c86:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c8a:	4303      	orrs	r3, r0
 8004c8c:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8004c8e:	e7d4      	b.n	8004c3a <ADC_Disable+0x12>

08004c90 <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8004c90:	2204      	movs	r2, #4
 8004c92:	6803      	ldr	r3, [r0, #0]
{
 8004c94:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8004c96:	6899      	ldr	r1, [r3, #8]
{
 8004c98:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8004c9a:	4211      	tst	r1, r2
 8004c9c:	d101      	bne.n	8004ca2 <ADC_ConversionStop+0x12>
  return HAL_OK;
 8004c9e:	2000      	movs	r0, #0
}
 8004ca0:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004ca2:	6899      	ldr	r1, [r3, #8]
 8004ca4:	4211      	tst	r1, r2
 8004ca6:	d006      	beq.n	8004cb6 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8004ca8:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004caa:	0792      	lsls	r2, r2, #30
 8004cac:	d403      	bmi.n	8004cb6 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8004cae:	2210      	movs	r2, #16
 8004cb0:	6899      	ldr	r1, [r3, #8]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004cb6:	f7ff fa6f 	bl	8004198 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004cba:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 8004cbc:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004cbe:	6823      	ldr	r3, [r4, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	4233      	tst	r3, r6
 8004cc4:	d0eb      	beq.n	8004c9e <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004cc6:	f7ff fa67 	bl	8004198 <HAL_GetTick>
 8004cca:	1b40      	subs	r0, r0, r5
 8004ccc:	280a      	cmp	r0, #10
 8004cce:	d9f6      	bls.n	8004cbe <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cd0:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cd2:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cd4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cdc:	4303      	orrs	r3, r0
 8004cde:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8004ce0:	e7de      	b.n	8004ca0 <ADC_ConversionStop+0x10>
	...

08004ce4 <HAL_ADC_Init>:
{
 8004ce4:	b570      	push	{r4, r5, r6, lr}
 8004ce6:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004ce8:	2001      	movs	r0, #1
  if(hadc == NULL)
 8004cea:	2c00      	cmp	r4, #0
 8004cec:	d01b      	beq.n	8004d26 <HAL_ADC_Init+0x42>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004cee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d106      	bne.n	8004d02 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8004cf4:	0022      	movs	r2, r4
 8004cf6:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8004cf8:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8004cfa:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8004cfc:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8004cfe:	f7fe fd1d 	bl	800373c <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004d02:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004d04:	06db      	lsls	r3, r3, #27
 8004d06:	d406      	bmi.n	8004d16 <HAL_ADC_Init+0x32>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8004d08:	6823      	ldr	r3, [r4, #0]
 8004d0a:	2204      	movs	r2, #4
 8004d0c:	6899      	ldr	r1, [r3, #8]
 8004d0e:	0008      	movs	r0, r1
 8004d10:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004d12:	4211      	tst	r1, r2
 8004d14:	d008      	beq.n	8004d28 <HAL_ADC_Init+0x44>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d16:	2310      	movs	r3, #16
 8004d18:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8004d1a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8004d20:	2300      	movs	r3, #0
 8004d22:	3450      	adds	r4, #80	; 0x50
 8004d24:	7023      	strb	r3, [r4, #0]
}
 8004d26:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 8004d28:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004d2a:	4955      	ldr	r1, [pc, #340]	; (8004e80 <HAL_ADC_Init+0x19c>)
 8004d2c:	4011      	ands	r1, r2
 8004d2e:	2202      	movs	r2, #2
 8004d30:	430a      	orrs	r2, r1
 8004d32:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004d34:	2203      	movs	r2, #3
 8004d36:	6899      	ldr	r1, [r3, #8]
 8004d38:	4011      	ands	r1, r2
 8004d3a:	4a52      	ldr	r2, [pc, #328]	; (8004e84 <HAL_ADC_Init+0x1a0>)
 8004d3c:	2901      	cmp	r1, #1
 8004d3e:	d102      	bne.n	8004d46 <HAL_ADC_Init+0x62>
 8004d40:	681d      	ldr	r5, [r3, #0]
 8004d42:	420d      	tst	r5, r1
 8004d44:	d119      	bne.n	8004d7a <HAL_ADC_Init+0x96>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004d46:	2680      	movs	r6, #128	; 0x80
 8004d48:	6861      	ldr	r1, [r4, #4]
 8004d4a:	05f6      	lsls	r6, r6, #23
 8004d4c:	004d      	lsls	r5, r1, #1
 8004d4e:	086d      	lsrs	r5, r5, #1
 8004d50:	42b5      	cmp	r5, r6
 8004d52:	d003      	beq.n	8004d5c <HAL_ADC_Init+0x78>
 8004d54:	2580      	movs	r5, #128	; 0x80
 8004d56:	062d      	lsls	r5, r5, #24
 8004d58:	42a9      	cmp	r1, r5
 8004d5a:	d176      	bne.n	8004e4a <HAL_ADC_Init+0x166>
 8004d5c:	691d      	ldr	r5, [r3, #16]
 8004d5e:	00ad      	lsls	r5, r5, #2
 8004d60:	08ad      	lsrs	r5, r5, #2
 8004d62:	611d      	str	r5, [r3, #16]
 8004d64:	691d      	ldr	r5, [r3, #16]
 8004d66:	4329      	orrs	r1, r5
 8004d68:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8004d6a:	2518      	movs	r5, #24
 8004d6c:	68d9      	ldr	r1, [r3, #12]
 8004d6e:	43a9      	bics	r1, r5
 8004d70:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8004d72:	68d9      	ldr	r1, [r3, #12]
 8004d74:	68a5      	ldr	r5, [r4, #8]
 8004d76:	4329      	orrs	r1, r5
 8004d78:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8004d7a:	6811      	ldr	r1, [r2, #0]
 8004d7c:	4d42      	ldr	r5, [pc, #264]	; (8004e88 <HAL_ADC_Init+0x1a4>)
 8004d7e:	4029      	ands	r1, r5
 8004d80:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8004d82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d84:	6815      	ldr	r5, [r2, #0]
 8004d86:	0649      	lsls	r1, r1, #25
 8004d88:	4329      	orrs	r1, r5
 8004d8a:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8004d8c:	2280      	movs	r2, #128	; 0x80
 8004d8e:	6899      	ldr	r1, [r3, #8]
 8004d90:	0552      	lsls	r2, r2, #21
 8004d92:	4211      	tst	r1, r2
 8004d94:	d102      	bne.n	8004d9c <HAL_ADC_Init+0xb8>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004d96:	6899      	ldr	r1, [r3, #8]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	493b      	ldr	r1, [pc, #236]	; (8004e8c <HAL_ADC_Init+0x1a8>)
 8004da0:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004da2:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004da4:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004da6:	68dd      	ldr	r5, [r3, #12]
 8004da8:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004daa:	2902      	cmp	r1, #2
 8004dac:	d100      	bne.n	8004db0 <HAL_ADC_Init+0xcc>
 8004dae:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004db0:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004db2:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004db4:	4332      	orrs	r2, r6
 8004db6:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004db8:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004dba:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004dbc:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004dbe:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004dc0:	69e5      	ldr	r5, [r4, #28]
 8004dc2:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004dc4:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004dc6:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004dc8:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004dca:	0025      	movs	r5, r4
 8004dcc:	352c      	adds	r5, #44	; 0x2c
 8004dce:	782d      	ldrb	r5, [r5, #0]
 8004dd0:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004dd2:	432a      	orrs	r2, r5
 8004dd4:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004dd6:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004dd8:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004dda:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004ddc:	30ff      	adds	r0, #255	; 0xff
 8004dde:	4282      	cmp	r2, r0
 8004de0:	d004      	beq.n	8004dec <HAL_ADC_Init+0x108>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004de2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004de4:	68d8      	ldr	r0, [r3, #12]
 8004de6:	432a      	orrs	r2, r5
 8004de8:	4302      	orrs	r2, r0
 8004dea:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004dec:	1ca2      	adds	r2, r4, #2
 8004dee:	7fd2      	ldrb	r2, [r2, #31]
 8004df0:	2a01      	cmp	r2, #1
 8004df2:	d106      	bne.n	8004e02 <HAL_ADC_Init+0x11e>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004df4:	2900      	cmp	r1, #0
 8004df6:	d134      	bne.n	8004e62 <HAL_ADC_Init+0x17e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8004df8:	2280      	movs	r2, #128	; 0x80
 8004dfa:	68d9      	ldr	r1, [r3, #12]
 8004dfc:	0252      	lsls	r2, r2, #9
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 8004e02:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004e04:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 8004e06:	2901      	cmp	r1, #1
 8004e08:	d133      	bne.n	8004e72 <HAL_ADC_Init+0x18e>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004e0a:	4821      	ldr	r0, [pc, #132]	; (8004e90 <HAL_ADC_Init+0x1ac>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004e0c:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004e0e:	4002      	ands	r2, r0
 8004e10:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004e12:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004e14:	6918      	ldr	r0, [r3, #16]
 8004e16:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8004e18:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8004e1a:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004e1c:	4302      	orrs	r2, r0
 8004e1e:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004e20:	691a      	ldr	r2, [r3, #16]
 8004e22:	4311      	orrs	r1, r2
 8004e24:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004e26:	2107      	movs	r1, #7
 8004e28:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8004e2a:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004e2c:	438a      	bics	r2, r1
 8004e2e:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004e30:	695a      	ldr	r2, [r3, #20]
 8004e32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004e34:	430a      	orrs	r2, r1
 8004e36:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8004e38:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8004e3a:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8004e3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e3e:	4393      	bics	r3, r2
 8004e40:	001a      	movs	r2, r3
 8004e42:	2301      	movs	r3, #1
 8004e44:	4313      	orrs	r3, r2
 8004e46:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8004e48:	e76d      	b.n	8004d26 <HAL_ADC_Init+0x42>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004e4a:	691d      	ldr	r5, [r3, #16]
 8004e4c:	4e11      	ldr	r6, [pc, #68]	; (8004e94 <HAL_ADC_Init+0x1b0>)
 8004e4e:	00ad      	lsls	r5, r5, #2
 8004e50:	08ad      	lsrs	r5, r5, #2
 8004e52:	611d      	str	r5, [r3, #16]
 8004e54:	6815      	ldr	r5, [r2, #0]
 8004e56:	4035      	ands	r5, r6
 8004e58:	6015      	str	r5, [r2, #0]
 8004e5a:	6815      	ldr	r5, [r2, #0]
 8004e5c:	4329      	orrs	r1, r5
 8004e5e:	6011      	str	r1, [r2, #0]
 8004e60:	e783      	b.n	8004d6a <HAL_ADC_Init+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e62:	2120      	movs	r1, #32
 8004e64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e66:	4301      	orrs	r1, r0
 8004e68:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e6a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	65a2      	str	r2, [r4, #88]	; 0x58
 8004e70:	e7c7      	b.n	8004e02 <HAL_ADC_Init+0x11e>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8004e72:	2101      	movs	r1, #1
 8004e74:	420a      	tst	r2, r1
 8004e76:	d0d6      	beq.n	8004e26 <HAL_ADC_Init+0x142>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004e78:	691a      	ldr	r2, [r3, #16]
 8004e7a:	438a      	bics	r2, r1
 8004e7c:	611a      	str	r2, [r3, #16]
 8004e7e:	e7d2      	b.n	8004e26 <HAL_ADC_Init+0x142>
 8004e80:	fffffefd 	.word	0xfffffefd
 8004e84:	40012708 	.word	0x40012708
 8004e88:	fdffffff 	.word	0xfdffffff
 8004e8c:	fffe0219 	.word	0xfffe0219
 8004e90:	fffffc03 	.word	0xfffffc03
 8004e94:	ffc3ffff 	.word	0xffc3ffff

08004e98 <HAL_ADC_DeInit>:
{
 8004e98:	b570      	push	{r4, r5, r6, lr}
 8004e9a:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004e9c:	2501      	movs	r5, #1
  if(hadc == NULL)
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	d011      	beq.n	8004ec6 <HAL_ADC_DeInit+0x2e>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	6543      	str	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004eaa:	f7ff fef1 	bl	8004c90 <ADC_ConversionStop>
 8004eae:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 8004eb0:	d137      	bne.n	8004f22 <HAL_ADC_DeInit+0x8a>
    tmp_hal_status = ADC_Disable(hadc);
 8004eb2:	0020      	movs	r0, r4
 8004eb4:	f7ff feb8 	bl	8004c28 <ADC_Disable>
 8004eb8:	0005      	movs	r5, r0
    if (tmp_hal_status != HAL_ERROR)
 8004eba:	2801      	cmp	r0, #1
 8004ebc:	d105      	bne.n	8004eca <HAL_ADC_DeInit+0x32>
{
 8004ebe:	2501      	movs	r5, #1
  __HAL_UNLOCK(hadc);
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	3450      	adds	r4, #80	; 0x50
 8004ec4:	7023      	strb	r3, [r4, #0]
}
 8004ec6:	0028      	movs	r0, r5
 8004ec8:	bd70      	pop	{r4, r5, r6, pc}
      hadc->State = HAL_ADC_STATE_READY;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	4915      	ldr	r1, [pc, #84]	; (8004f28 <HAL_ADC_DeInit+0x90>)
 8004ed2:	685a      	ldr	r2, [r3, #4]
    HAL_ADC_MspDeInit(hadc);
 8004ed4:	0020      	movs	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8004ed6:	400a      	ands	r2, r1
 8004ed8:	605a      	str	r2, [r3, #4]
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8004eda:	4a14      	ldr	r2, [pc, #80]	; (8004f2c <HAL_ADC_DeInit+0x94>)
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8004edc:	4914      	ldr	r1, [pc, #80]	; (8004f30 <HAL_ADC_DeInit+0x98>)
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8004ede:	601a      	str	r2, [r3, #0]
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8004ee0:	689a      	ldr	r2, [r3, #8]
 8004ee2:	400a      	ands	r2, r1
 8004ee4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 8004ee6:	68da      	ldr	r2, [r3, #12]
 8004ee8:	4912      	ldr	r1, [pc, #72]	; (8004f34 <HAL_ADC_DeInit+0x9c>)
 8004eea:	400a      	ands	r2, r1
 8004eec:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	4911      	ldr	r1, [pc, #68]	; (8004f38 <HAL_ADC_DeInit+0xa0>)
 8004ef2:	400a      	ands	r2, r1
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8004ef4:	2107      	movs	r1, #7
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8004ef6:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8004ef8:	695a      	ldr	r2, [r3, #20]
 8004efa:	438a      	bics	r2, r1
 8004efc:	615a      	str	r2, [r3, #20]
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8004efe:	6a1a      	ldr	r2, [r3, #32]
 8004f00:	490e      	ldr	r1, [pc, #56]	; (8004f3c <HAL_ADC_DeInit+0xa4>)
 8004f02:	400a      	ands	r2, r1
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8004f04:	217f      	movs	r1, #127	; 0x7f
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8004f06:	621a      	str	r2, [r3, #32]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8004f08:	33b4      	adds	r3, #180	; 0xb4
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	438a      	bics	r2, r1
 8004f0e:	601a      	str	r2, [r3, #0]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	438a      	bics	r2, r1
 8004f14:	601a      	str	r2, [r3, #0]
    HAL_ADC_MspDeInit(hadc);
 8004f16:	f7fe fc21 	bl	800375c <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->State = HAL_ADC_STATE_RESET;
 8004f1e:	6563      	str	r3, [r4, #84]	; 0x54
 8004f20:	e7ce      	b.n	8004ec0 <HAL_ADC_DeInit+0x28>
  if (tmp_hal_status != HAL_ERROR)
 8004f22:	2801      	cmp	r0, #1
 8004f24:	d0cb      	beq.n	8004ebe <HAL_ADC_DeInit+0x26>
 8004f26:	e7d2      	b.n	8004ece <HAL_ADC_DeInit+0x36>
 8004f28:	fffff760 	.word	0xfffff760
 8004f2c:	0000089f 	.word	0x0000089f
 8004f30:	efffffff 	.word	0xefffffff
 8004f34:	833e0200 	.word	0x833e0200
 8004f38:	3ffffc02 	.word	0x3ffffc02
 8004f3c:	f000f000 	.word	0xf000f000

08004f40 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004f40:	6803      	ldr	r3, [r0, #0]
{
 8004f42:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004f44:	689b      	ldr	r3, [r3, #8]
{
 8004f46:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8004f48:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004f4a:	075b      	lsls	r3, r3, #29
 8004f4c:	d41a      	bmi.n	8004f84 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 8004f4e:	0025      	movs	r5, r4
 8004f50:	3550      	adds	r5, #80	; 0x50
 8004f52:	782b      	ldrb	r3, [r5, #0]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d015      	beq.n	8004f84 <HAL_ADC_Start+0x44>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004f5c:	69e3      	ldr	r3, [r4, #28]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d111      	bne.n	8004f86 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8004f62:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004f64:	4a0b      	ldr	r2, [pc, #44]	; (8004f94 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 8004f66:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8004f68:	401a      	ands	r2, r3
 8004f6a:	2380      	movs	r3, #128	; 0x80
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004f70:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8004f72:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8004f74:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 8004f76:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004f78:	6823      	ldr	r3, [r4, #0]
 8004f7a:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004f7c:	6899      	ldr	r1, [r3, #8]
 8004f7e:	3a18      	subs	r2, #24
 8004f80:	430a      	orrs	r2, r1
 8004f82:	609a      	str	r2, [r3, #8]
}
 8004f84:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8004f86:	0020      	movs	r0, r4
 8004f88:	f7ff fe16 	bl	8004bb8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	d0e8      	beq.n	8004f62 <HAL_ADC_Start+0x22>
 8004f90:	e7f8      	b.n	8004f84 <HAL_ADC_Start+0x44>
 8004f92:	46c0      	nop			; (mov r8, r8)
 8004f94:	fffff0fe 	.word	0xfffff0fe

08004f98 <HAL_ADC_Stop>:
{
 8004f98:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8004f9a:	0006      	movs	r6, r0
 8004f9c:	3650      	adds	r6, #80	; 0x50
 8004f9e:	7833      	ldrb	r3, [r6, #0]
{
 8004fa0:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8004fa2:	2002      	movs	r0, #2
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d012      	beq.n	8004fce <HAL_ADC_Stop+0x36>
 8004fa8:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004faa:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 8004fac:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004fae:	f7ff fe6f 	bl	8004c90 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	d109      	bne.n	8004fca <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8004fb6:	0020      	movs	r0, r4
 8004fb8:	f7ff fe36 	bl	8004c28 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	d104      	bne.n	8004fca <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8004fc0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004fc2:	4a03      	ldr	r2, [pc, #12]	; (8004fd0 <HAL_ADC_Stop+0x38>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	431d      	orrs	r5, r3
 8004fc8:	6565      	str	r5, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8004fca:	2300      	movs	r3, #0
 8004fcc:	7033      	strb	r3, [r6, #0]
}
 8004fce:	bd70      	pop	{r4, r5, r6, pc}
 8004fd0:	fffffefe 	.word	0xfffffefe

08004fd4 <HAL_ADC_PollForConversion>:
{
 8004fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004fd6:	6946      	ldr	r6, [r0, #20]
{
 8004fd8:	0004      	movs	r4, r0
 8004fda:	000d      	movs	r5, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004fdc:	2e08      	cmp	r6, #8
 8004fde:	d00d      	beq.n	8004ffc <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8004fe0:	6803      	ldr	r3, [r0, #0]
 8004fe2:	2001      	movs	r0, #1
 8004fe4:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8004fe6:	260c      	movs	r6, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8004fe8:	4203      	tst	r3, r0
 8004fea:	d007      	beq.n	8004ffc <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fec:	2320      	movs	r3, #32
 8004fee:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 8004ff0:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	7023      	strb	r3, [r4, #0]
}
 8004ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8004ffc:	f7ff f8cc 	bl	8004198 <HAL_GetTick>
 8005000:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8005002:	6823      	ldr	r3, [r4, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	4216      	tst	r6, r2
 8005008:	d024      	beq.n	8005054 <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800500a:	2280      	movs	r2, #128	; 0x80
 800500c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800500e:	0092      	lsls	r2, r2, #2
 8005010:	430a      	orrs	r2, r1
 8005012:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005014:	22c0      	movs	r2, #192	; 0xc0
 8005016:	68d9      	ldr	r1, [r3, #12]
 8005018:	0112      	lsls	r2, r2, #4
 800501a:	4211      	tst	r1, r2
 800501c:	d113      	bne.n	8005046 <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800501e:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005020:	7fd2      	ldrb	r2, [r2, #31]
 8005022:	2a00      	cmp	r2, #0
 8005024:	d10f      	bne.n	8005046 <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	0712      	lsls	r2, r2, #28
 800502a:	d50c      	bpl.n	8005046 <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800502c:	689a      	ldr	r2, [r3, #8]
 800502e:	0752      	lsls	r2, r2, #29
 8005030:	d423      	bmi.n	800507a <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005032:	210c      	movs	r1, #12
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	438a      	bics	r2, r1
 8005038:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800503a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800503c:	4913      	ldr	r1, [pc, #76]	; (800508c <HAL_ADC_PollForConversion+0xb8>)
 800503e:	4011      	ands	r1, r2
 8005040:	2201      	movs	r2, #1
 8005042:	430a      	orrs	r2, r1
 8005044:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 8005046:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8005048:	69a2      	ldr	r2, [r4, #24]
 800504a:	4282      	cmp	r2, r0
 800504c:	d1d5      	bne.n	8004ffa <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800504e:	220c      	movs	r2, #12
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	e7d2      	b.n	8004ffa <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 8005054:	1c6a      	adds	r2, r5, #1
 8005056:	d0d5      	beq.n	8005004 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005058:	2d00      	cmp	r5, #0
 800505a:	d108      	bne.n	800506e <HAL_ADC_PollForConversion+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800505c:	2304      	movs	r3, #4
 800505e:	6d62      	ldr	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8005060:	3450      	adds	r4, #80	; 0x50
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005062:	4313      	orrs	r3, r2
 8005064:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 8005066:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8005068:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 800506a:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 800506c:	e7c5      	b.n	8004ffa <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800506e:	f7ff f893 	bl	8004198 <HAL_GetTick>
 8005072:	1bc0      	subs	r0, r0, r7
 8005074:	42a8      	cmp	r0, r5
 8005076:	d9c4      	bls.n	8005002 <HAL_ADC_PollForConversion+0x2e>
 8005078:	e7f0      	b.n	800505c <HAL_ADC_PollForConversion+0x88>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800507a:	2220      	movs	r2, #32
 800507c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800507e:	430a      	orrs	r2, r1
 8005080:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005082:	2201      	movs	r2, #1
 8005084:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005086:	430a      	orrs	r2, r1
 8005088:	65a2      	str	r2, [r4, #88]	; 0x58
 800508a:	e7dc      	b.n	8005046 <HAL_ADC_PollForConversion+0x72>
 800508c:	fffffefe 	.word	0xfffffefe

08005090 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8005090:	6803      	ldr	r3, [r0, #0]
 8005092:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8005094:	4770      	bx	lr
	...

08005098 <HAL_ADC_ConfigChannel>:
{
 8005098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800509a:	0004      	movs	r4, r0
 800509c:	3450      	adds	r4, #80	; 0x50
 800509e:	7822      	ldrb	r2, [r4, #0]
{
 80050a0:	0003      	movs	r3, r0
 80050a2:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 80050a4:	2002      	movs	r0, #2
 80050a6:	2a01      	cmp	r2, #1
 80050a8:	d00b      	beq.n	80050c2 <HAL_ADC_ConfigChannel+0x2a>
 80050aa:	3801      	subs	r0, #1
 80050ac:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	6891      	ldr	r1, [r2, #8]
 80050b2:	0749      	lsls	r1, r1, #29
 80050b4:	d506      	bpl.n	80050c4 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050b6:	2220      	movs	r2, #32
 80050b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80050ba:	430a      	orrs	r2, r1
 80050bc:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80050be:	2300      	movs	r3, #0
 80050c0:	7023      	strb	r3, [r4, #0]
}
 80050c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (sConfig->Rank != ADC_RANK_NONE)
 80050c4:	2380      	movs	r3, #128	; 0x80
 80050c6:	6828      	ldr	r0, [r5, #0]
 80050c8:	4e19      	ldr	r6, [pc, #100]	; (8005130 <HAL_ADC_ConfigChannel+0x98>)
 80050ca:	686f      	ldr	r7, [r5, #4]
 80050cc:	0341      	lsls	r1, r0, #13
 80050ce:	02db      	lsls	r3, r3, #11
 80050d0:	0b49      	lsrs	r1, r1, #13
 80050d2:	4003      	ands	r3, r0
 80050d4:	42b7      	cmp	r7, r6
 80050d6:	d019      	beq.n	800510c <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80050d8:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80050da:	4301      	orrs	r1, r0
 80050dc:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d008      	beq.n	80050f4 <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;   
 80050e2:	2380      	movs	r3, #128	; 0x80
 80050e4:	4a13      	ldr	r2, [pc, #76]	; (8005134 <HAL_ADC_ConfigChannel+0x9c>)
 80050e6:	041b      	lsls	r3, r3, #16
 80050e8:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80050ea:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 80050ec:	430b      	orrs	r3, r1
 80050ee:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80050f0:	f7ff fd4c 	bl	8004b8c <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80050f4:	682b      	ldr	r3, [r5, #0]
 80050f6:	039b      	lsls	r3, r3, #14
 80050f8:	d505      	bpl.n	8005106 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 80050fa:	2380      	movs	r3, #128	; 0x80
 80050fc:	4a0d      	ldr	r2, [pc, #52]	; (8005134 <HAL_ADC_ConfigChannel+0x9c>)
 80050fe:	03db      	lsls	r3, r3, #15
 8005100:	6811      	ldr	r1, [r2, #0]
 8005102:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8005104:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8005106:	2000      	movs	r0, #0
 8005108:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800510a:	e7da      	b.n	80050c2 <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800510c:	6a95      	ldr	r5, [r2, #40]	; 0x28
 800510e:	438d      	bics	r5, r1
 8005110:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8005112:	2b00      	cmp	r3, #0
 8005114:	d004      	beq.n	8005120 <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8005116:	4a07      	ldr	r2, [pc, #28]	; (8005134 <HAL_ADC_ConfigChannel+0x9c>)
 8005118:	4907      	ldr	r1, [pc, #28]	; (8005138 <HAL_ADC_ConfigChannel+0xa0>)
 800511a:	6813      	ldr	r3, [r2, #0]
 800511c:	400b      	ands	r3, r1
 800511e:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8005120:	0383      	lsls	r3, r0, #14
 8005122:	d5f0      	bpl.n	8005106 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8005124:	4a03      	ldr	r2, [pc, #12]	; (8005134 <HAL_ADC_ConfigChannel+0x9c>)
 8005126:	4905      	ldr	r1, [pc, #20]	; (800513c <HAL_ADC_ConfigChannel+0xa4>)
 8005128:	6813      	ldr	r3, [r2, #0]
 800512a:	400b      	ands	r3, r1
 800512c:	e7ea      	b.n	8005104 <HAL_ADC_ConfigChannel+0x6c>
 800512e:	46c0      	nop			; (mov r8, r8)
 8005130:	00001001 	.word	0x00001001
 8005134:	40012708 	.word	0x40012708
 8005138:	ff7fffff 	.word	0xff7fffff
 800513c:	ffbfffff 	.word	0xffbfffff

08005140 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8005140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005142:	0005      	movs	r5, r0
 8005144:	3550      	adds	r5, #80	; 0x50
 8005146:	782b      	ldrb	r3, [r5, #0]
{
 8005148:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800514a:	2002      	movs	r0, #2
 800514c:	2b01      	cmp	r3, #1
 800514e:	d044      	beq.n	80051da <HAL_ADCEx_Calibration_Start+0x9a>
 8005150:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005152:	2203      	movs	r2, #3
  __HAL_LOCK(hadc);
 8005154:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	6898      	ldr	r0, [r3, #8]
 800515a:	4010      	ands	r0, r2
 800515c:	2801      	cmp	r0, #1
 800515e:	d109      	bne.n	8005174 <HAL_ADCEx_Calibration_Start+0x34>
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	4202      	tst	r2, r0
 8005164:	d006      	beq.n	8005174 <HAL_ADCEx_Calibration_Start+0x34>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005166:	2320      	movs	r3, #32
 8005168:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800516a:	4313      	orrs	r3, r2
 800516c:	6563      	str	r3, [r4, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800516e:	2300      	movs	r3, #0
 8005170:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 8005172:	e032      	b.n	80051da <HAL_ADCEx_Calibration_Start+0x9a>
    ADC_STATE_CLR_SET(hadc->State, 
 8005174:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005176:	4919      	ldr	r1, [pc, #100]	; (80051dc <HAL_ADCEx_Calibration_Start+0x9c>)
 8005178:	4011      	ands	r1, r2
 800517a:	2202      	movs	r2, #2
 800517c:	430a      	orrs	r2, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800517e:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 8005180:	6562      	str	r2, [r4, #84]	; 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8005182:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	438a      	bics	r2, r1
 8005188:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800518a:	2280      	movs	r2, #128	; 0x80
 800518c:	6899      	ldr	r1, [r3, #8]
 800518e:	0612      	lsls	r2, r2, #24
 8005190:	430a      	orrs	r2, r1
 8005192:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8005194:	f7ff f800 	bl	8004198 <HAL_GetTick>
 8005198:	0007      	movs	r7, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800519a:	6823      	ldr	r3, [r4, #0]
 800519c:	689a      	ldr	r2, [r3, #8]
 800519e:	2a00      	cmp	r2, #0
 80051a0:	db0c      	blt.n	80051bc <HAL_ADCEx_Calibration_Start+0x7c>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80051a2:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80051a4:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80051a6:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80051a8:	430e      	orrs	r6, r1
 80051aa:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80051ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051ae:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 80051b0:	4393      	bics	r3, r2
 80051b2:	001a      	movs	r2, r3
 80051b4:	2301      	movs	r3, #1
 80051b6:	4313      	orrs	r3, r2
 80051b8:	6563      	str	r3, [r4, #84]	; 0x54
 80051ba:	e7d8      	b.n	800516e <HAL_ADCEx_Calibration_Start+0x2e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80051bc:	f7fe ffec 	bl	8004198 <HAL_GetTick>
 80051c0:	1bc0      	subs	r0, r0, r7
 80051c2:	280a      	cmp	r0, #10
 80051c4:	d9e9      	bls.n	800519a <HAL_ADCEx_Calibration_Start+0x5a>
        ADC_STATE_CLR_SET(hadc->State,
 80051c6:	2212      	movs	r2, #18
 80051c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 80051ca:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 80051cc:	4393      	bics	r3, r2
 80051ce:	001a      	movs	r2, r3
 80051d0:	2310      	movs	r3, #16
 80051d2:	4313      	orrs	r3, r2
 80051d4:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 80051d6:	2300      	movs	r3, #0
 80051d8:	702b      	strb	r3, [r5, #0]
}
 80051da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051dc:	fffffefd 	.word	0xfffffefd

080051e0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80051e0:	b530      	push	{r4, r5, lr}
 80051e2:	25ff      	movs	r5, #255	; 0xff
 80051e4:	2403      	movs	r4, #3
 80051e6:	002a      	movs	r2, r5
 80051e8:	4004      	ands	r4, r0
 80051ea:	00e4      	lsls	r4, r4, #3
 80051ec:	40a2      	lsls	r2, r4
 80051ee:	0189      	lsls	r1, r1, #6
 80051f0:	4029      	ands	r1, r5
 80051f2:	43d2      	mvns	r2, r2
 80051f4:	40a1      	lsls	r1, r4
 80051f6:	b2c3      	uxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80051f8:	2800      	cmp	r0, #0
 80051fa:	db0a      	blt.n	8005212 <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051fc:	24c0      	movs	r4, #192	; 0xc0
 80051fe:	4b0b      	ldr	r3, [pc, #44]	; (800522c <HAL_NVIC_SetPriority+0x4c>)
 8005200:	0880      	lsrs	r0, r0, #2
 8005202:	0080      	lsls	r0, r0, #2
 8005204:	18c0      	adds	r0, r0, r3
 8005206:	00a4      	lsls	r4, r4, #2
 8005208:	5903      	ldr	r3, [r0, r4]
 800520a:	401a      	ands	r2, r3
 800520c:	4311      	orrs	r1, r2
 800520e:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8005210:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005212:	200f      	movs	r0, #15
 8005214:	4003      	ands	r3, r0
 8005216:	3b08      	subs	r3, #8
 8005218:	4805      	ldr	r0, [pc, #20]	; (8005230 <HAL_NVIC_SetPriority+0x50>)
 800521a:	089b      	lsrs	r3, r3, #2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	181b      	adds	r3, r3, r0
 8005220:	69d8      	ldr	r0, [r3, #28]
 8005222:	4002      	ands	r2, r0
 8005224:	4311      	orrs	r1, r2
 8005226:	61d9      	str	r1, [r3, #28]
 8005228:	e7f2      	b.n	8005210 <HAL_NVIC_SetPriority+0x30>
 800522a:	46c0      	nop			; (mov r8, r8)
 800522c:	e000e100 	.word	0xe000e100
 8005230:	e000ed00 	.word	0xe000ed00

08005234 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005234:	2800      	cmp	r0, #0
 8005236:	db05      	blt.n	8005244 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005238:	231f      	movs	r3, #31
 800523a:	4018      	ands	r0, r3
 800523c:	3b1e      	subs	r3, #30
 800523e:	4083      	lsls	r3, r0
 8005240:	4a01      	ldr	r2, [pc, #4]	; (8005248 <HAL_NVIC_EnableIRQ+0x14>)
 8005242:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005244:	4770      	bx	lr
 8005246:	46c0      	nop			; (mov r8, r8)
 8005248:	e000e100 	.word	0xe000e100

0800524c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800524c:	2800      	cmp	r0, #0
 800524e:	db09      	blt.n	8005264 <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005250:	231f      	movs	r3, #31
 8005252:	4018      	ands	r0, r3
 8005254:	3b1e      	subs	r3, #30
 8005256:	4083      	lsls	r3, r0
 8005258:	4a03      	ldr	r2, [pc, #12]	; (8005268 <HAL_NVIC_DisableIRQ+0x1c>)
 800525a:	67d3      	str	r3, [r2, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800525c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005260:	f3bf 8f6f 	isb	sy
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8005264:	4770      	bx	lr
 8005266:	46c0      	nop			; (mov r8, r8)
 8005268:	e000e104 	.word	0xe000e104

0800526c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800526c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526e:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8005270:	2001      	movs	r0, #1
  if(hdma == NULL)
 8005272:	2c00      	cmp	r4, #0
 8005274:	d035      	beq.n	80052e2 <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005276:	6825      	ldr	r5, [r4, #0]
 8005278:	4b1a      	ldr	r3, [pc, #104]	; (80052e4 <HAL_DMA_Init+0x78>)
 800527a:	2114      	movs	r1, #20
 800527c:	18e8      	adds	r0, r5, r3
 800527e:	f7fa ff73 	bl	8000168 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8005282:	4b19      	ldr	r3, [pc, #100]	; (80052e8 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005284:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8005286:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005288:	2302      	movs	r3, #2
 800528a:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800528c:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 800528e:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005290:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005292:	4b16      	ldr	r3, [pc, #88]	; (80052ec <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005294:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005296:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8005298:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800529a:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 800529c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800529e:	433b      	orrs	r3, r7
 80052a0:	6967      	ldr	r7, [r4, #20]
 80052a2:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052a4:	69a7      	ldr	r7, [r4, #24]
 80052a6:	433b      	orrs	r3, r7
 80052a8:	69e7      	ldr	r7, [r4, #28]
 80052aa:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 80052ac:	6a27      	ldr	r7, [r4, #32]
 80052ae:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 80052b0:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80052b2:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80052b4:	2380      	movs	r3, #128	; 0x80
 80052b6:	01db      	lsls	r3, r3, #7
 80052b8:	4299      	cmp	r1, r3
 80052ba:	d00c      	beq.n	80052d6 <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80052bc:	251c      	movs	r5, #28
 80052be:	4028      	ands	r0, r5
 80052c0:	3d0d      	subs	r5, #13
 80052c2:	4085      	lsls	r5, r0
 80052c4:	490a      	ldr	r1, [pc, #40]	; (80052f0 <HAL_DMA_Init+0x84>)
 80052c6:	680b      	ldr	r3, [r1, #0]
 80052c8:	43ab      	bics	r3, r5
 80052ca:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80052cc:	6863      	ldr	r3, [r4, #4]
 80052ce:	680d      	ldr	r5, [r1, #0]
 80052d0:	4083      	lsls	r3, r0
 80052d2:	432b      	orrs	r3, r5
 80052d4:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052d6:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80052d8:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052da:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80052dc:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 80052de:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 80052e0:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 80052e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052e4:	bffdfff8 	.word	0xbffdfff8
 80052e8:	40020000 	.word	0x40020000
 80052ec:	ffff800f 	.word	0xffff800f
 80052f0:	400200a8 	.word	0x400200a8

080052f4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80052f4:	b570      	push	{r4, r5, r6, lr}
 80052f6:	2501      	movs	r5, #1
 80052f8:	0004      	movs	r4, r0

  /* Check the DMA handle allocation */
  if (NULL == hdma )
  {
    return HAL_ERROR;
 80052fa:	0028      	movs	r0, r5
  if (NULL == hdma )
 80052fc:	2c00      	cmp	r4, #0
 80052fe:	d021      	beq.n	8005344 <HAL_DMA_DeInit+0x50>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8005300:	6826      	ldr	r6, [r4, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005302:	2114      	movs	r1, #20
  __HAL_DMA_DISABLE(hdma);
 8005304:	6833      	ldr	r3, [r6, #0]
 8005306:	43ab      	bics	r3, r5
 8005308:	6033      	str	r3, [r6, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800530a:	4b0f      	ldr	r3, [pc, #60]	; (8005348 <HAL_DMA_DeInit+0x54>)
 800530c:	18f0      	adds	r0, r6, r3
 800530e:	f7fa ff2b 	bl	8000168 <__udivsi3>

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005312:	211c      	movs	r1, #28
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005314:	0083      	lsls	r3, r0, #2
 8005316:	6463      	str	r3, [r4, #68]	; 0x44
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005318:	400b      	ands	r3, r1
  hdma->Instance->CCR  = 0U;
 800531a:	2000      	movs	r0, #0
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800531c:	409d      	lsls	r5, r3

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800531e:	390d      	subs	r1, #13
 8005320:	4099      	lsls	r1, r3
  hdma->DmaBaseAddress = DMA1;
 8005322:	4a0a      	ldr	r2, [pc, #40]	; (800534c <HAL_DMA_DeInit+0x58>)

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005324:	1da3      	adds	r3, r4, #6
  hdma->DmaBaseAddress = DMA1;
 8005326:	6422      	str	r2, [r4, #64]	; 0x40
  hdma->Instance->CCR  = 0U;
 8005328:	6030      	str	r0, [r6, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800532a:	6055      	str	r5, [r2, #4]
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800532c:	4d08      	ldr	r5, [pc, #32]	; (8005350 <HAL_DMA_DeInit+0x5c>)
 800532e:	682a      	ldr	r2, [r5, #0]
 8005330:	438a      	bics	r2, r1
 8005332:	602a      	str	r2, [r5, #0]
  hdma->XferCpltCallback = NULL;
 8005334:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8005336:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8005338:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800533a:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800533c:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800533e:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_RESET;
 8005340:	77d8      	strb	r0, [r3, #31]
  __HAL_UNLOCK(hdma);
 8005342:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8005344:	bd70      	pop	{r4, r5, r6, pc}
 8005346:	46c0      	nop			; (mov r8, r8)
 8005348:	bffdfff8 	.word	0xbffdfff8
 800534c:	40020000 	.word	0x40020000
 8005350:	400200a8 	.word	0x400200a8

08005354 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005356:	1d45      	adds	r5, r0, #5
{
 8005358:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 800535a:	7feb      	ldrb	r3, [r5, #31]
{
 800535c:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 800535e:	2002      	movs	r0, #2
 8005360:	2b01      	cmp	r3, #1
 8005362:	d029      	beq.n	80053b8 <HAL_DMA_Start_IT+0x64>
 8005364:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8005366:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 8005368:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 800536a:	7ffb      	ldrb	r3, [r7, #31]
 800536c:	2600      	movs	r6, #0
 800536e:	469c      	mov	ip, r3
 8005370:	4660      	mov	r0, ip
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2801      	cmp	r0, #1
 8005376:	d12a      	bne.n	80053ce <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005378:	3001      	adds	r0, #1
 800537a:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800537c:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800537e:	63e6      	str	r6, [r4, #60]	; 0x3c
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005380:	6c67      	ldr	r7, [r4, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8005382:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005384:	361c      	adds	r6, #28
 8005386:	403e      	ands	r6, r7
    __HAL_DMA_DISABLE(hdma);
 8005388:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800538a:	40b3      	lsls	r3, r6
    __HAL_DMA_DISABLE(hdma);
 800538c:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800538e:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8005390:	606b      	str	r3, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005392:	9b01      	ldr	r3, [sp, #4]
 8005394:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005396:	68a3      	ldr	r3, [r4, #8]
 8005398:	2b10      	cmp	r3, #16
 800539a:	d10e      	bne.n	80053ba <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800539c:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800539e:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80053a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00c      	beq.n	80053c0 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053a6:	230e      	movs	r3, #14
 80053a8:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80053aa:	4313      	orrs	r3, r2
 80053ac:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 80053ae:	2301      	movs	r3, #1
 80053b0:	6802      	ldr	r2, [r0, #0]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053b6:	2000      	movs	r0, #0
}
 80053b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80053ba:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80053bc:	60c2      	str	r2, [r0, #12]
 80053be:	e7ef      	b.n	80053a0 <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053c0:	2204      	movs	r2, #4
 80053c2:	6803      	ldr	r3, [r0, #0]
 80053c4:	4393      	bics	r3, r2
 80053c6:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80053c8:	6802      	ldr	r2, [r0, #0]
 80053ca:	230a      	movs	r3, #10
 80053cc:	e7ed      	b.n	80053aa <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 80053ce:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 80053d0:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 80053d2:	e7f1      	b.n	80053b8 <HAL_DMA_Start_IT+0x64>

080053d4 <HAL_DMA_Abort>:
{
 80053d4:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053d6:	1d85      	adds	r5, r0, #6
 80053d8:	7feb      	ldrb	r3, [r5, #31]
 80053da:	1d44      	adds	r4, r0, #5
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d005      	beq.n	80053ec <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053e0:	2304      	movs	r3, #4
 80053e2:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80053e4:	2300      	movs	r3, #0
    return HAL_ERROR;
 80053e6:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80053e8:	77e3      	strb	r3, [r4, #31]
}
 80053ea:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053ec:	210e      	movs	r1, #14
 80053ee:	6803      	ldr	r3, [r0, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	438a      	bics	r2, r1
 80053f4:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80053f6:	2201      	movs	r2, #1
 80053f8:	6819      	ldr	r1, [r3, #0]
 80053fa:	4391      	bics	r1, r2
 80053fc:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80053fe:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005400:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005402:	201c      	movs	r0, #28
 8005404:	4003      	ands	r3, r0
 8005406:	0010      	movs	r0, r2
 8005408:	4098      	lsls	r0, r3
 800540a:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 800540c:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 800540e:	77ea      	strb	r2, [r5, #31]
    __HAL_UNLOCK(hdma);
 8005410:	77e0      	strb	r0, [r4, #31]
    return status;
 8005412:	e7ea      	b.n	80053ea <HAL_DMA_Abort+0x16>

08005414 <HAL_DMA_Abort_IT>:
{
 8005414:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005416:	1d84      	adds	r4, r0, #6
 8005418:	7fe3      	ldrb	r3, [r4, #31]
 800541a:	2b02      	cmp	r3, #2
 800541c:	d004      	beq.n	8005428 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800541e:	2304      	movs	r3, #4
 8005420:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8005422:	3b03      	subs	r3, #3
}
 8005424:	0018      	movs	r0, r3
 8005426:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005428:	210e      	movs	r1, #14
 800542a:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800542c:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	438a      	bics	r2, r1
 8005432:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8005434:	2201      	movs	r2, #1
 8005436:	6819      	ldr	r1, [r3, #0]
 8005438:	4391      	bics	r1, r2
 800543a:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800543c:	231c      	movs	r3, #28
 800543e:	402b      	ands	r3, r5
 8005440:	0015      	movs	r5, r2
 8005442:	409d      	lsls	r5, r3
 8005444:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 8005446:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005448:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800544a:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 800544c:	2400      	movs	r4, #0
 800544e:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 8005450:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 8005452:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8005454:	42a2      	cmp	r2, r4
 8005456:	d0e5      	beq.n	8005424 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8005458:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 800545a:	0023      	movs	r3, r4
 800545c:	e7e2      	b.n	8005424 <HAL_DMA_Abort_IT+0x10>

0800545e <HAL_DMA_IRQHandler>:
{
 800545e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8005460:	221c      	movs	r2, #28
 8005462:	2704      	movs	r7, #4
 8005464:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005466:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8005468:	4032      	ands	r2, r6
 800546a:	003e      	movs	r6, r7
 800546c:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800546e:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005470:	6803      	ldr	r3, [r0, #0]
 8005472:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8005474:	4235      	tst	r5, r6
 8005476:	d00d      	beq.n	8005494 <HAL_DMA_IRQHandler+0x36>
 8005478:	423c      	tst	r4, r7
 800547a:	d00b      	beq.n	8005494 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	0692      	lsls	r2, r2, #26
 8005480:	d402      	bmi.n	8005488 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	43ba      	bics	r2, r7
 8005486:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8005488:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800548a:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 800548c:	2b00      	cmp	r3, #0
 800548e:	d019      	beq.n	80054c4 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8005490:	4798      	blx	r3
  return;
 8005492:	e017      	b.n	80054c4 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8005494:	2702      	movs	r7, #2
 8005496:	003e      	movs	r6, r7
 8005498:	4096      	lsls	r6, r2
 800549a:	4235      	tst	r5, r6
 800549c:	d013      	beq.n	80054c6 <HAL_DMA_IRQHandler+0x68>
 800549e:	423c      	tst	r4, r7
 80054a0:	d011      	beq.n	80054c6 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	0692      	lsls	r2, r2, #26
 80054a6:	d406      	bmi.n	80054b6 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80054a8:	240a      	movs	r4, #10
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	43a2      	bics	r2, r4
 80054ae:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80054b0:	2201      	movs	r2, #1
 80054b2:	1d83      	adds	r3, r0, #6
 80054b4:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 80054b6:	2200      	movs	r2, #0
 80054b8:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80054ba:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 80054bc:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 80054be:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d1e5      	bne.n	8005490 <HAL_DMA_IRQHandler+0x32>
}
 80054c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80054c6:	2608      	movs	r6, #8
 80054c8:	0037      	movs	r7, r6
 80054ca:	4097      	lsls	r7, r2
 80054cc:	423d      	tst	r5, r7
 80054ce:	d0f9      	beq.n	80054c4 <HAL_DMA_IRQHandler+0x66>
 80054d0:	4234      	tst	r4, r6
 80054d2:	d0f7      	beq.n	80054c4 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054d4:	250e      	movs	r5, #14
 80054d6:	681c      	ldr	r4, [r3, #0]
 80054d8:	43ac      	bics	r4, r5
 80054da:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80054dc:	2301      	movs	r3, #1
 80054de:	001c      	movs	r4, r3
 80054e0:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 80054e2:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80054e4:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80054e6:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80054e8:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 80054ea:	2200      	movs	r2, #0
 80054ec:	1d43      	adds	r3, r0, #5
 80054ee:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 80054f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80054f2:	e7e5      	b.n	80054c0 <HAL_DMA_IRQHandler+0x62>

080054f4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80054f4:	0003      	movs	r3, r0
 80054f6:	1e08      	subs	r0, r1, #0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 80054f8:	d101      	bne.n	80054fe <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80054fa:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
      break;
  }

  return status;
}
 80054fc:	4770      	bx	lr
      status = HAL_ERROR;
 80054fe:	2001      	movs	r0, #1
 8005500:	e7fc      	b.n	80054fc <HAL_EXTI_RegisterCallback+0x8>

08005502 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005502:	0003      	movs	r3, r0
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
  {
    return HAL_ERROR;
 8005504:	2001      	movs	r0, #1
  if (hexti == NULL)
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <HAL_EXTI_GetHandle+0xc>
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;

    return HAL_OK;
 800550a:	2000      	movs	r0, #0
    hexti->Line = ExtiLine;
 800550c:	6019      	str	r1, [r3, #0]
  }
}
 800550e:	4770      	bx	lr

08005510 <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8005510:	221f      	movs	r2, #31
 8005512:	6803      	ldr	r3, [r0, #0]
{
 8005514:	b510      	push	{r4, lr}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8005516:	401a      	ands	r2, r3
 8005518:	2301      	movs	r3, #1
 800551a:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 800551c:	4a04      	ldr	r2, [pc, #16]	; (8005530 <HAL_EXTI_IRQHandler+0x20>)
 800551e:	6951      	ldr	r1, [r2, #20]
  if (regval != 0x00u)
 8005520:	420b      	tst	r3, r1
 8005522:	d004      	beq.n	800552e <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8005524:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8005526:	6843      	ldr	r3, [r0, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d000      	beq.n	800552e <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 800552c:	4798      	blx	r3
    }
  }
}
 800552e:	bd10      	pop	{r4, pc}
 8005530:	40010400 	.word	0x40010400

08005534 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005534:	4a57      	ldr	r2, [pc, #348]	; (8005694 <HAL_GPIO_Init+0x160>)
{
 8005536:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005538:	1882      	adds	r2, r0, r2
 800553a:	1e54      	subs	r4, r2, #1
 800553c:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 800553e:	2300      	movs	r3, #0
{
 8005540:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005542:	3205      	adds	r2, #5
{
 8005544:	9102      	str	r1, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005546:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005548:	9a02      	ldr	r2, [sp, #8]
 800554a:	6812      	ldr	r2, [r2, #0]
 800554c:	0014      	movs	r4, r2
 800554e:	40dc      	lsrs	r4, r3
 8005550:	d101      	bne.n	8005556 <HAL_GPIO_Init+0x22>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8005552:	b007      	add	sp, #28
 8005554:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005556:	2101      	movs	r1, #1
 8005558:	000d      	movs	r5, r1
 800555a:	0014      	movs	r4, r2
 800555c:	409d      	lsls	r5, r3
 800555e:	402c      	ands	r4, r5
 8005560:	9401      	str	r4, [sp, #4]
    if (iocurrent)
 8005562:	422a      	tst	r2, r5
 8005564:	d100      	bne.n	8005568 <HAL_GPIO_Init+0x34>
 8005566:	e093      	b.n	8005690 <HAL_GPIO_Init+0x15c>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005568:	9a02      	ldr	r2, [sp, #8]
 800556a:	005f      	lsls	r7, r3, #1
 800556c:	6854      	ldr	r4, [r2, #4]
 800556e:	2210      	movs	r2, #16
 8005570:	0026      	movs	r6, r4
 8005572:	4396      	bics	r6, r2
 8005574:	3a0d      	subs	r2, #13
 8005576:	40ba      	lsls	r2, r7
 8005578:	43d2      	mvns	r2, r2
 800557a:	9203      	str	r2, [sp, #12]
 800557c:	0032      	movs	r2, r6
 800557e:	3a01      	subs	r2, #1
 8005580:	9604      	str	r6, [sp, #16]
 8005582:	428a      	cmp	r2, r1
 8005584:	d80f      	bhi.n	80055a6 <HAL_GPIO_Init+0x72>
        temp = GPIOx->OSPEEDR;
 8005586:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005588:	9a03      	ldr	r2, [sp, #12]
 800558a:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800558c:	9a02      	ldr	r2, [sp, #8]
 800558e:	68d2      	ldr	r2, [r2, #12]
 8005590:	40ba      	lsls	r2, r7
 8005592:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 8005594:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8005596:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005598:	43aa      	bics	r2, r5
 800559a:	0015      	movs	r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800559c:	0922      	lsrs	r2, r4, #4
 800559e:	400a      	ands	r2, r1
 80055a0:	409a      	lsls	r2, r3
 80055a2:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 80055a4:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80055a6:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055a8:	9a03      	ldr	r2, [sp, #12]
 80055aa:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055ac:	9a02      	ldr	r2, [sp, #8]
 80055ae:	6892      	ldr	r2, [r2, #8]
 80055b0:	40ba      	lsls	r2, r7
 80055b2:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 80055b4:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055b6:	9a04      	ldr	r2, [sp, #16]
 80055b8:	2a02      	cmp	r2, #2
 80055ba:	d10e      	bne.n	80055da <HAL_GPIO_Init+0xa6>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80055bc:	2507      	movs	r5, #7
 80055be:	210f      	movs	r1, #15
 80055c0:	401d      	ands	r5, r3
 80055c2:	00ad      	lsls	r5, r5, #2
 80055c4:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 80055c6:	08da      	lsrs	r2, r3, #3
 80055c8:	0092      	lsls	r2, r2, #2
 80055ca:	1882      	adds	r2, r0, r2
 80055cc:	6a16      	ldr	r6, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80055ce:	438e      	bics	r6, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80055d0:	9902      	ldr	r1, [sp, #8]
 80055d2:	6909      	ldr	r1, [r1, #16]
 80055d4:	40a9      	lsls	r1, r5
 80055d6:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3U] = temp;
 80055d8:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 80055da:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80055dc:	9a03      	ldr	r2, [sp, #12]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055de:	2603      	movs	r6, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80055e0:	402a      	ands	r2, r5
 80055e2:	0015      	movs	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055e4:	0022      	movs	r2, r4
 80055e6:	4032      	ands	r2, r6
 80055e8:	40ba      	lsls	r2, r7
 80055ea:	4315      	orrs	r5, r2
      GPIOx->MODER = temp;
 80055ec:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80055ee:	00e2      	lsls	r2, r4, #3
 80055f0:	d54e      	bpl.n	8005690 <HAL_GPIO_Init+0x15c>
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80055f2:	001f      	movs	r7, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055f4:	2101      	movs	r1, #1
 80055f6:	4d28      	ldr	r5, [pc, #160]	; (8005698 <HAL_GPIO_Init+0x164>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80055f8:	4037      	ands	r7, r6
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055fa:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80055fc:	468c      	mov	ip, r1
 80055fe:	430a      	orrs	r2, r1
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8005600:	00b9      	lsls	r1, r7, #2
 8005602:	270f      	movs	r7, #15
 8005604:	408f      	lsls	r7, r1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005606:	636a      	str	r2, [r5, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8005608:	4a24      	ldr	r2, [pc, #144]	; (800569c <HAL_GPIO_Init+0x168>)
 800560a:	089d      	lsrs	r5, r3, #2
 800560c:	00ad      	lsls	r5, r5, #2
 800560e:	18ad      	adds	r5, r5, r2
 8005610:	68aa      	ldr	r2, [r5, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8005612:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005614:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8005616:	9203      	str	r2, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005618:	05ff      	lsls	r7, r7, #23
 800561a:	2200      	movs	r2, #0
 800561c:	42b8      	cmp	r0, r7
 800561e:	d010      	beq.n	8005642 <HAL_GPIO_Init+0x10e>
 8005620:	4f1f      	ldr	r7, [pc, #124]	; (80056a0 <HAL_GPIO_Init+0x16c>)
 8005622:	4662      	mov	r2, ip
 8005624:	42b8      	cmp	r0, r7
 8005626:	d00c      	beq.n	8005642 <HAL_GPIO_Init+0x10e>
 8005628:	4f1e      	ldr	r7, [pc, #120]	; (80056a4 <HAL_GPIO_Init+0x170>)
 800562a:	1892      	adds	r2, r2, r2
 800562c:	42b8      	cmp	r0, r7
 800562e:	d008      	beq.n	8005642 <HAL_GPIO_Init+0x10e>
 8005630:	4f1d      	ldr	r7, [pc, #116]	; (80056a8 <HAL_GPIO_Init+0x174>)
 8005632:	0032      	movs	r2, r6
 8005634:	42b8      	cmp	r0, r7
 8005636:	d004      	beq.n	8005642 <HAL_GPIO_Init+0x10e>
 8005638:	4e1c      	ldr	r6, [pc, #112]	; (80056ac <HAL_GPIO_Init+0x178>)
 800563a:	4462      	add	r2, ip
 800563c:	42b0      	cmp	r0, r6
 800563e:	d000      	beq.n	8005642 <HAL_GPIO_Init+0x10e>
 8005640:	9a05      	ldr	r2, [sp, #20]
 8005642:	408a      	lsls	r2, r1
 8005644:	9903      	ldr	r1, [sp, #12]
 8005646:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 8005648:	9901      	ldr	r1, [sp, #4]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800564a:	60aa      	str	r2, [r5, #8]
          temp |= iocurrent;
 800564c:	000e      	movs	r6, r1
        temp = EXTI->IMR;
 800564e:	4a18      	ldr	r2, [pc, #96]	; (80056b0 <HAL_GPIO_Init+0x17c>)
        temp &= ~((uint32_t)iocurrent);
 8005650:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8005652:	6817      	ldr	r7, [r2, #0]
          temp |= iocurrent;
 8005654:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005656:	03e1      	lsls	r1, r4, #15
 8005658:	d401      	bmi.n	800565e <HAL_GPIO_Init+0x12a>
        temp &= ~((uint32_t)iocurrent);
 800565a:	003e      	movs	r6, r7
 800565c:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 800565e:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8005660:	6857      	ldr	r7, [r2, #4]
          temp |= iocurrent;
 8005662:	9e01      	ldr	r6, [sp, #4]
 8005664:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005666:	03a1      	lsls	r1, r4, #14
 8005668:	d401      	bmi.n	800566e <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 800566a:	003e      	movs	r6, r7
 800566c:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 800566e:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8005670:	6897      	ldr	r7, [r2, #8]
          temp |= iocurrent;
 8005672:	9e01      	ldr	r6, [sp, #4]
 8005674:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005676:	02e1      	lsls	r1, r4, #11
 8005678:	d401      	bmi.n	800567e <HAL_GPIO_Init+0x14a>
        temp &= ~((uint32_t)iocurrent);
 800567a:	003e      	movs	r6, r7
 800567c:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 800567e:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8005680:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8005682:	9f01      	ldr	r7, [sp, #4]
 8005684:	4337      	orrs	r7, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005686:	02a1      	lsls	r1, r4, #10
 8005688:	d401      	bmi.n	800568e <HAL_GPIO_Init+0x15a>
        temp &= ~((uint32_t)iocurrent);
 800568a:	402e      	ands	r6, r5
 800568c:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 800568e:	60d7      	str	r7, [r2, #12]
    position++;
 8005690:	3301      	adds	r3, #1
 8005692:	e759      	b.n	8005548 <HAL_GPIO_Init+0x14>
 8005694:	afffe400 	.word	0xafffe400
 8005698:	40021000 	.word	0x40021000
 800569c:	40010000 	.word	0x40010000
 80056a0:	50000400 	.word	0x50000400
 80056a4:	50000800 	.word	0x50000800
 80056a8:	50000c00 	.word	0x50000c00
 80056ac:	50001000 	.word	0x50001000
 80056b0:	40010400 	.word	0x40010400

080056b4 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80056b4:	b5f0      	push	{r4, r5, r6, r7, lr}
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80056b6:	4a38      	ldr	r2, [pc, #224]	; (8005798 <HAL_GPIO_DeInit+0xe4>)
{
 80056b8:	b087      	sub	sp, #28
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80056ba:	1882      	adds	r2, r0, r2
{
 80056bc:	9102      	str	r1, [sp, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80056be:	1e51      	subs	r1, r2, #1
 80056c0:	418a      	sbcs	r2, r1
  uint32_t position = 0x00U;
 80056c2:	2300      	movs	r3, #0
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80056c4:	3205      	adds	r2, #5
 80056c6:	9205      	str	r2, [sp, #20]
  while ((GPIO_Pin >> position) != 0)
 80056c8:	9a02      	ldr	r2, [sp, #8]
 80056ca:	40da      	lsrs	r2, r3
 80056cc:	d101      	bne.n	80056d2 <HAL_GPIO_DeInit+0x1e>
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
    }
    position++;
  }
}
 80056ce:	b007      	add	sp, #28
 80056d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 80056d2:	2701      	movs	r7, #1
 80056d4:	003a      	movs	r2, r7
 80056d6:	409a      	lsls	r2, r3
 80056d8:	9c02      	ldr	r4, [sp, #8]
 80056da:	9201      	str	r2, [sp, #4]
 80056dc:	4014      	ands	r4, r2
    if (iocurrent)
 80056de:	9901      	ldr	r1, [sp, #4]
 80056e0:	9a02      	ldr	r2, [sp, #8]
 80056e2:	420a      	tst	r2, r1
 80056e4:	d056      	beq.n	8005794 <HAL_GPIO_DeInit+0xe0>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80056e6:	4a2d      	ldr	r2, [pc, #180]	; (800579c <HAL_GPIO_DeInit+0xe8>)
 80056e8:	0899      	lsrs	r1, r3, #2
 80056ea:	0089      	lsls	r1, r1, #2
 80056ec:	1889      	adds	r1, r1, r2
 80056ee:	688a      	ldr	r2, [r1, #8]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 80056f0:	001d      	movs	r5, r3
      tmp = SYSCFG->EXTICR[position >> 2U];
 80056f2:	0016      	movs	r6, r2
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 80056f4:	2203      	movs	r2, #3
 80056f6:	4015      	ands	r5, r2
 80056f8:	00ad      	lsls	r5, r5, #2
 80056fa:	320c      	adds	r2, #12
 80056fc:	40aa      	lsls	r2, r5
 80056fe:	9203      	str	r2, [sp, #12]
 8005700:	4032      	ands	r2, r6
 8005702:	9204      	str	r2, [sp, #16]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005704:	22a0      	movs	r2, #160	; 0xa0
 8005706:	05d2      	lsls	r2, r2, #23
 8005708:	4694      	mov	ip, r2
 800570a:	2200      	movs	r2, #0
 800570c:	4560      	cmp	r0, ip
 800570e:	d011      	beq.n	8005734 <HAL_GPIO_DeInit+0x80>
 8005710:	4a23      	ldr	r2, [pc, #140]	; (80057a0 <HAL_GPIO_DeInit+0xec>)
 8005712:	4694      	mov	ip, r2
 8005714:	003a      	movs	r2, r7
 8005716:	4560      	cmp	r0, ip
 8005718:	d00c      	beq.n	8005734 <HAL_GPIO_DeInit+0x80>
 800571a:	4f22      	ldr	r7, [pc, #136]	; (80057a4 <HAL_GPIO_DeInit+0xf0>)
 800571c:	1892      	adds	r2, r2, r2
 800571e:	42b8      	cmp	r0, r7
 8005720:	d008      	beq.n	8005734 <HAL_GPIO_DeInit+0x80>
 8005722:	4f21      	ldr	r7, [pc, #132]	; (80057a8 <HAL_GPIO_DeInit+0xf4>)
 8005724:	3201      	adds	r2, #1
 8005726:	42b8      	cmp	r0, r7
 8005728:	d004      	beq.n	8005734 <HAL_GPIO_DeInit+0x80>
 800572a:	4e20      	ldr	r6, [pc, #128]	; (80057ac <HAL_GPIO_DeInit+0xf8>)
 800572c:	3201      	adds	r2, #1
 800572e:	42b0      	cmp	r0, r6
 8005730:	d000      	beq.n	8005734 <HAL_GPIO_DeInit+0x80>
 8005732:	9a05      	ldr	r2, [sp, #20]
 8005734:	40aa      	lsls	r2, r5
 8005736:	9d04      	ldr	r5, [sp, #16]
 8005738:	42aa      	cmp	r2, r5
 800573a:	d110      	bne.n	800575e <HAL_GPIO_DeInit+0xaa>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800573c:	4a1c      	ldr	r2, [pc, #112]	; (80057b0 <HAL_GPIO_DeInit+0xfc>)
 800573e:	6815      	ldr	r5, [r2, #0]
 8005740:	43a5      	bics	r5, r4
 8005742:	6015      	str	r5, [r2, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005744:	6855      	ldr	r5, [r2, #4]
 8005746:	43a5      	bics	r5, r4
 8005748:	6055      	str	r5, [r2, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800574a:	6895      	ldr	r5, [r2, #8]
 800574c:	43a5      	bics	r5, r4
 800574e:	6095      	str	r5, [r2, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005750:	68d5      	ldr	r5, [r2, #12]
 8005752:	43a5      	bics	r5, r4
 8005754:	60d5      	str	r5, [r2, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005756:	688a      	ldr	r2, [r1, #8]
 8005758:	9c03      	ldr	r4, [sp, #12]
 800575a:	43a2      	bics	r2, r4
 800575c:	608a      	str	r2, [r1, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800575e:	2103      	movs	r1, #3
 8005760:	005c      	lsls	r4, r3, #1
 8005762:	40a1      	lsls	r1, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005764:	2407      	movs	r4, #7
 8005766:	260f      	movs	r6, #15
 8005768:	401c      	ands	r4, r3
 800576a:	00a4      	lsls	r4, r4, #2
 800576c:	40a6      	lsls	r6, r4
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800576e:	6802      	ldr	r2, [r0, #0]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8005770:	9c01      	ldr	r4, [sp, #4]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005772:	430a      	orrs	r2, r1
 8005774:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005776:	08da      	lsrs	r2, r3, #3
 8005778:	0092      	lsls	r2, r2, #2
 800577a:	1882      	adds	r2, r0, r2
 800577c:	6a15      	ldr	r5, [r2, #32]
 800577e:	43b5      	bics	r5, r6
 8005780:	6215      	str	r5, [r2, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005782:	68c2      	ldr	r2, [r0, #12]
 8005784:	438a      	bics	r2, r1
 8005786:	60c2      	str	r2, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8005788:	6842      	ldr	r2, [r0, #4]
 800578a:	43a2      	bics	r2, r4
 800578c:	6042      	str	r2, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800578e:	6882      	ldr	r2, [r0, #8]
 8005790:	438a      	bics	r2, r1
 8005792:	6082      	str	r2, [r0, #8]
    position++;
 8005794:	3301      	adds	r3, #1
 8005796:	e797      	b.n	80056c8 <HAL_GPIO_DeInit+0x14>
 8005798:	afffe400 	.word	0xafffe400
 800579c:	40010000 	.word	0x40010000
 80057a0:	50000400 	.word	0x50000400
 80057a4:	50000800 	.word	0x50000800
 80057a8:	50000c00 	.word	0x50000c00
 80057ac:	50001000 	.word	0x50001000
 80057b0:	40010400 	.word	0x40010400

080057b4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80057b4:	6900      	ldr	r0, [r0, #16]
 80057b6:	4008      	ands	r0, r1
 80057b8:	1e41      	subs	r1, r0, #1
 80057ba:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80057bc:	b2c0      	uxtb	r0, r0
}
 80057be:	4770      	bx	lr

080057c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80057c0:	2a00      	cmp	r2, #0
 80057c2:	d001      	beq.n	80057c8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057c4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80057c6:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80057c8:	6281      	str	r1, [r0, #40]	; 0x28
}
 80057ca:	e7fc      	b.n	80057c6 <HAL_GPIO_WritePin+0x6>

080057cc <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80057cc:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80057ce:	0013      	movs	r3, r2
 80057d0:	400b      	ands	r3, r1
 80057d2:	041b      	lsls	r3, r3, #16
 80057d4:	4391      	bics	r1, r2
 80057d6:	4319      	orrs	r1, r3
 80057d8:	6181      	str	r1, [r0, #24]
}
 80057da:	4770      	bx	lr

080057dc <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 80057dc:	2110      	movs	r1, #16
 80057de:	4a02      	ldr	r2, [pc, #8]	; (80057e8 <HAL_PWR_DisablePVD+0xc>)
 80057e0:	6813      	ldr	r3, [r2, #0]
 80057e2:	438b      	bics	r3, r1
 80057e4:	6013      	str	r3, [r2, #0]
}
 80057e6:	4770      	bx	lr
 80057e8:	40007000 	.word	0x40007000

080057ec <HAL_PWR_EnterSLEEPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80057ec:	4b17      	ldr	r3, [pc, #92]	; (800584c <HAL_PWR_EnterSLEEPMode+0x60>)
{
 80057ee:	b5f0      	push	{r4, r5, r6, r7, lr}
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80057f0:	4a17      	ldr	r2, [pc, #92]	; (8005850 <HAL_PWR_EnterSLEEPMode+0x64>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80057f2:	681e      	ldr	r6, [r3, #0]
{
 80057f4:	0005      	movs	r5, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80057f6:	2080      	movs	r0, #128	; 0x80
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80057f8:	6a17      	ldr	r7, [r2, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80057fa:	0034      	movs	r4, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80057fc:	2201      	movs	r2, #1
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80057fe:	0080      	lsls	r0, r0, #2
 8005800:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8005802:	403a      	ands	r2, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 8005804:	4206      	tst	r6, r0
 8005806:	d005      	beq.n	8005814 <HAL_PWR_EnterSLEEPMode+0x28>
 8005808:	2a00      	cmp	r2, #0
 800580a:	d003      	beq.n	8005814 <HAL_PWR_EnterSLEEPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 800580c:	6818      	ldr	r0, [r3, #0]
 800580e:	4e11      	ldr	r6, [pc, #68]	; (8005854 <HAL_PWR_EnterSLEEPMode+0x68>)
 8005810:	4030      	ands	r0, r6
 8005812:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8005814:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 8005816:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8005818:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 800581a:	4328      	orrs	r0, r5

  /* Store the new value */
  PWR->CR = tmpreg;
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800581c:	4d0e      	ldr	r5, [pc, #56]	; (8005858 <HAL_PWR_EnterSLEEPMode+0x6c>)
  PWR->CR = tmpreg;
 800581e:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005820:	6928      	ldr	r0, [r5, #16]
 8005822:	3601      	adds	r6, #1
 8005824:	43b0      	bics	r0, r6
 8005826:	6128      	str	r0, [r5, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005828:	2901      	cmp	r1, #1
 800582a:	d10b      	bne.n	8005844 <HAL_PWR_EnterSLEEPMode+0x58>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800582c:	bf30      	wfi
    __SEV();
    __WFE();
    __WFE();
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 800582e:	2c00      	cmp	r4, #0
 8005830:	d006      	beq.n	8005840 <HAL_PWR_EnterSLEEPMode+0x54>
 8005832:	2a00      	cmp	r2, #0
 8005834:	d004      	beq.n	8005840 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8005836:	2280      	movs	r2, #128	; 0x80
 8005838:	6819      	ldr	r1, [r3, #0]
 800583a:	0092      	lsls	r2, r2, #2
 800583c:	430a      	orrs	r2, r1
 800583e:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8005840:	46c0      	nop			; (mov r8, r8)

}
 8005842:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 8005844:	bf40      	sev
    __WFE();
 8005846:	bf20      	wfe
    __WFE();
 8005848:	bf20      	wfe
 800584a:	e7f0      	b.n	800582e <HAL_PWR_EnterSLEEPMode+0x42>
 800584c:	40007000 	.word	0x40007000
 8005850:	40010000 	.word	0x40010000
 8005854:	fffffdff 	.word	0xfffffdff
 8005858:	e000ed00 	.word	0xe000ed00

0800585c <HAL_PWR_EnterSTOPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800585c:	4b19      	ldr	r3, [pc, #100]	; (80058c4 <HAL_PWR_EnterSTOPMode+0x68>)
{
 800585e:	b5f0      	push	{r4, r5, r6, r7, lr}
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005860:	681e      	ldr	r6, [r3, #0]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8005862:	4c19      	ldr	r4, [pc, #100]	; (80058c8 <HAL_PWR_EnterSTOPMode+0x6c>)
{
 8005864:	0002      	movs	r2, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005866:	2080      	movs	r0, #128	; 0x80
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8005868:	6a27      	ldr	r7, [r4, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800586a:	0035      	movs	r5, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 800586c:	2401      	movs	r4, #1
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800586e:	0080      	lsls	r0, r0, #2
 8005870:	4005      	ands	r5, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8005872:	403c      	ands	r4, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 8005874:	4206      	tst	r6, r0
 8005876:	d005      	beq.n	8005884 <HAL_PWR_EnterSTOPMode+0x28>
 8005878:	2c00      	cmp	r4, #0
 800587a:	d003      	beq.n	8005884 <HAL_PWR_EnterSTOPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 800587c:	6818      	ldr	r0, [r3, #0]
 800587e:	4e13      	ldr	r6, [pc, #76]	; (80058cc <HAL_PWR_EnterSTOPMode+0x70>)
 8005880:	4030      	ands	r0, r6
 8005882:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8005884:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 8005886:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8005888:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 800588a:	4310      	orrs	r0, r2

  /* Store the new value */
  PWR->CR = tmpreg;
 800588c:	6018      	str	r0, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800588e:	2004      	movs	r0, #4
 8005890:	4a0f      	ldr	r2, [pc, #60]	; (80058d0 <HAL_PWR_EnterSTOPMode+0x74>)
 8005892:	6916      	ldr	r6, [r2, #16]
 8005894:	4330      	orrs	r0, r6
 8005896:	6110      	str	r0, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8005898:	2901      	cmp	r1, #1
 800589a:	d10e      	bne.n	80058ba <HAL_PWR_EnterSTOPMode+0x5e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800589c:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800589e:	2004      	movs	r0, #4
 80058a0:	6911      	ldr	r1, [r2, #16]
 80058a2:	4381      	bics	r1, r0
 80058a4:	6111      	str	r1, [r2, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 80058a6:	2d00      	cmp	r5, #0
 80058a8:	d006      	beq.n	80058b8 <HAL_PWR_EnterSTOPMode+0x5c>
 80058aa:	2c00      	cmp	r4, #0
 80058ac:	d004      	beq.n	80058b8 <HAL_PWR_EnterSTOPMode+0x5c>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80058ae:	2280      	movs	r2, #128	; 0x80
 80058b0:	6819      	ldr	r1, [r3, #0]
 80058b2:	0092      	lsls	r2, r2, #2
 80058b4:	430a      	orrs	r2, r1
 80058b6:	601a      	str	r2, [r3, #0]
  }
}
 80058b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 80058ba:	bf40      	sev
    __WFE();
 80058bc:	bf20      	wfe
    __WFE();
 80058be:	bf20      	wfe
 80058c0:	e7ed      	b.n	800589e <HAL_PWR_EnterSTOPMode+0x42>
 80058c2:	46c0      	nop			; (mov r8, r8)
 80058c4:	40007000 	.word	0x40007000
 80058c8:	40010000 	.word	0x40010000
 80058cc:	fffffdff 	.word	0xfffffdff
 80058d0:	e000ed00 	.word	0xe000ed00

080058d4 <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 80058d4:	2380      	movs	r3, #128	; 0x80
 80058d6:	4a03      	ldr	r2, [pc, #12]	; (80058e4 <HAL_PWREx_EnableFastWakeUp+0x10>)
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	6811      	ldr	r1, [r2, #0]
 80058dc:	430b      	orrs	r3, r1
 80058de:	6013      	str	r3, [r2, #0]
}
 80058e0:	4770      	bx	lr
 80058e2:	46c0      	nop			; (mov r8, r8)
 80058e4:	40007000 	.word	0x40007000

080058e8 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 80058e8:	2380      	movs	r3, #128	; 0x80
 80058ea:	4a03      	ldr	r2, [pc, #12]	; (80058f8 <HAL_PWREx_EnableUltraLowPower+0x10>)
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	6811      	ldr	r1, [r2, #0]
 80058f0:	430b      	orrs	r3, r1
 80058f2:	6013      	str	r3, [r2, #0]
}
 80058f4:	4770      	bx	lr
 80058f6:	46c0      	nop			; (mov r8, r8)
 80058f8:	40007000 	.word	0x40007000

080058fc <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80058fc:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80058fe:	4b1d      	ldr	r3, [pc, #116]	; (8005974 <HAL_RCC_GetSysClockFreq+0x78>)
{
 8005900:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8005902:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8005904:	4022      	ands	r2, r4
 8005906:	2a08      	cmp	r2, #8
 8005908:	d031      	beq.n	800596e <HAL_RCC_GetSysClockFreq+0x72>
 800590a:	2a0c      	cmp	r2, #12
 800590c:	d009      	beq.n	8005922 <HAL_RCC_GetSysClockFreq+0x26>
 800590e:	2a04      	cmp	r2, #4
 8005910:	d125      	bne.n	800595e <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005912:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8005914:	4b18      	ldr	r3, [pc, #96]	; (8005978 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005916:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8005918:	17c0      	asrs	r0, r0, #31
 800591a:	4018      	ands	r0, r3
 800591c:	4b17      	ldr	r3, [pc, #92]	; (800597c <HAL_RCC_GetSysClockFreq+0x80>)
 800591e:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8005920:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005922:	02a2      	lsls	r2, r4, #10
 8005924:	4816      	ldr	r0, [pc, #88]	; (8005980 <HAL_RCC_GetSysClockFreq+0x84>)
 8005926:	0f12      	lsrs	r2, r2, #28
 8005928:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800592a:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800592c:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800592e:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005930:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005932:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005934:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005936:	4211      	tst	r1, r2
 8005938:	d009      	beq.n	800594e <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800593a:	4a12      	ldr	r2, [pc, #72]	; (8005984 <HAL_RCC_GetSysClockFreq+0x88>)
 800593c:	2300      	movs	r3, #0
 800593e:	2100      	movs	r1, #0
 8005940:	f7fa fe20 	bl	8000584 <__aeabi_lmul>
 8005944:	0022      	movs	r2, r4
 8005946:	2300      	movs	r3, #0
 8005948:	f7fa fdfc 	bl	8000544 <__aeabi_uldivmod>
 800594c:	e7e8      	b.n	8005920 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	2310      	movs	r3, #16
 8005952:	421a      	tst	r2, r3
 8005954:	d001      	beq.n	800595a <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005956:	4a0c      	ldr	r2, [pc, #48]	; (8005988 <HAL_RCC_GetSysClockFreq+0x8c>)
 8005958:	e7f0      	b.n	800593c <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800595a:	4a08      	ldr	r2, [pc, #32]	; (800597c <HAL_RCC_GetSysClockFreq+0x80>)
 800595c:	e7ee      	b.n	800593c <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800595e:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005960:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005962:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005964:	041b      	lsls	r3, r3, #16
 8005966:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005968:	3301      	adds	r3, #1
 800596a:	4098      	lsls	r0, r3
  return sysclockfreq;
 800596c:	e7d8      	b.n	8005920 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 800596e:	4805      	ldr	r0, [pc, #20]	; (8005984 <HAL_RCC_GetSysClockFreq+0x88>)
 8005970:	e7d6      	b.n	8005920 <HAL_RCC_GetSysClockFreq+0x24>
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	40021000 	.word	0x40021000
 8005978:	ff48e500 	.word	0xff48e500
 800597c:	00f42400 	.word	0x00f42400
 8005980:	08011258 	.word	0x08011258
 8005984:	007a1200 	.word	0x007a1200
 8005988:	003d0900 	.word	0x003d0900

0800598c <HAL_RCC_OscConfig>:
{
 800598c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800598e:	0005      	movs	r5, r0
 8005990:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8005992:	2800      	cmp	r0, #0
 8005994:	d059      	beq.n	8005a4a <HAL_RCC_OscConfig+0xbe>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005996:	230c      	movs	r3, #12
 8005998:	4cb8      	ldr	r4, [pc, #736]	; (8005c7c <HAL_RCC_OscConfig+0x2f0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800599a:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800599c:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800599e:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059a0:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059a2:	2380      	movs	r3, #128	; 0x80
 80059a4:	025b      	lsls	r3, r3, #9
 80059a6:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059a8:	07d2      	lsls	r2, r2, #31
 80059aa:	d442      	bmi.n	8005a32 <HAL_RCC_OscConfig+0xa6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	079b      	lsls	r3, r3, #30
 80059b0:	d500      	bpl.n	80059b4 <HAL_RCC_OscConfig+0x28>
 80059b2:	e08b      	b.n	8005acc <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80059b4:	682b      	ldr	r3, [r5, #0]
 80059b6:	06db      	lsls	r3, r3, #27
 80059b8:	d529      	bpl.n	8005a0e <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059ba:	2e00      	cmp	r6, #0
 80059bc:	d000      	beq.n	80059c0 <HAL_RCC_OscConfig+0x34>
 80059be:	e0e4      	b.n	8005b8a <HAL_RCC_OscConfig+0x1fe>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	059b      	lsls	r3, r3, #22
 80059c4:	d502      	bpl.n	80059cc <HAL_RCC_OscConfig+0x40>
 80059c6:	69eb      	ldr	r3, [r5, #28]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d03e      	beq.n	8005a4a <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059cc:	6862      	ldr	r2, [r4, #4]
 80059ce:	49ac      	ldr	r1, [pc, #688]	; (8005c80 <HAL_RCC_OscConfig+0x2f4>)
 80059d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80059d2:	400a      	ands	r2, r1
 80059d4:	431a      	orrs	r2, r3
 80059d6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059d8:	6861      	ldr	r1, [r4, #4]
 80059da:	6a2a      	ldr	r2, [r5, #32]
 80059dc:	0209      	lsls	r1, r1, #8
 80059de:	0a09      	lsrs	r1, r1, #8
 80059e0:	0612      	lsls	r2, r2, #24
 80059e2:	430a      	orrs	r2, r1
 80059e4:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80059e6:	2280      	movs	r2, #128	; 0x80
 80059e8:	0b5b      	lsrs	r3, r3, #13
 80059ea:	3301      	adds	r3, #1
 80059ec:	0212      	lsls	r2, r2, #8
 80059ee:	409a      	lsls	r2, r3
 80059f0:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80059f2:	68e1      	ldr	r1, [r4, #12]
 80059f4:	060a      	lsls	r2, r1, #24
 80059f6:	49a3      	ldr	r1, [pc, #652]	; (8005c84 <HAL_RCC_OscConfig+0x2f8>)
 80059f8:	0f12      	lsrs	r2, r2, #28
 80059fa:	5c8a      	ldrb	r2, [r1, r2]
 80059fc:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80059fe:	4aa2      	ldr	r2, [pc, #648]	; (8005c88 <HAL_RCC_OscConfig+0x2fc>)
 8005a00:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8005a02:	4ba2      	ldr	r3, [pc, #648]	; (8005c8c <HAL_RCC_OscConfig+0x300>)
 8005a04:	6818      	ldr	r0, [r3, #0]
 8005a06:	f7fe fbc5 	bl	8004194 <HAL_InitTick>
        if(status != HAL_OK)
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	d134      	bne.n	8005a78 <HAL_RCC_OscConfig+0xec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a0e:	682b      	ldr	r3, [r5, #0]
 8005a10:	071b      	lsls	r3, r3, #28
 8005a12:	d500      	bpl.n	8005a16 <HAL_RCC_OscConfig+0x8a>
 8005a14:	e0f0      	b.n	8005bf8 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a16:	682b      	ldr	r3, [r5, #0]
 8005a18:	075b      	lsls	r3, r3, #29
 8005a1a:	d500      	bpl.n	8005a1e <HAL_RCC_OscConfig+0x92>
 8005a1c:	e112      	b.n	8005c44 <HAL_RCC_OscConfig+0x2b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a1e:	682b      	ldr	r3, [r5, #0]
 8005a20:	069b      	lsls	r3, r3, #26
 8005a22:	d500      	bpl.n	8005a26 <HAL_RCC_OscConfig+0x9a>
 8005a24:	e199      	b.n	8005d5a <HAL_RCC_OscConfig+0x3ce>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a26:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d000      	beq.n	8005a2e <HAL_RCC_OscConfig+0xa2>
 8005a2c:	e1c8      	b.n	8005dc0 <HAL_RCC_OscConfig+0x434>
  return HAL_OK;
 8005a2e:	2000      	movs	r0, #0
 8005a30:	e022      	b.n	8005a78 <HAL_RCC_OscConfig+0xec>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a32:	2e08      	cmp	r6, #8
 8005a34:	d003      	beq.n	8005a3e <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005a36:	2e0c      	cmp	r6, #12
 8005a38:	d109      	bne.n	8005a4e <HAL_RCC_OscConfig+0xc2>
 8005a3a:	2f00      	cmp	r7, #0
 8005a3c:	d007      	beq.n	8005a4e <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	039b      	lsls	r3, r3, #14
 8005a42:	d5b3      	bpl.n	80059ac <HAL_RCC_OscConfig+0x20>
 8005a44:	686b      	ldr	r3, [r5, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1b0      	bne.n	80059ac <HAL_RCC_OscConfig+0x20>
          return HAL_ERROR;
 8005a4a:	2001      	movs	r0, #1
 8005a4c:	e014      	b.n	8005a78 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a4e:	686a      	ldr	r2, [r5, #4]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d113      	bne.n	8005a7c <HAL_RCC_OscConfig+0xf0>
 8005a54:	6822      	ldr	r2, [r4, #0]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005a5a:	f7fe fb9d 	bl	8004198 <HAL_GetTick>
 8005a5e:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a60:	2280      	movs	r2, #128	; 0x80
 8005a62:	6823      	ldr	r3, [r4, #0]
 8005a64:	0292      	lsls	r2, r2, #10
 8005a66:	4213      	tst	r3, r2
 8005a68:	d1a0      	bne.n	80059ac <HAL_RCC_OscConfig+0x20>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a6a:	f7fe fb95 	bl	8004198 <HAL_GetTick>
 8005a6e:	9b01      	ldr	r3, [sp, #4]
 8005a70:	1ac0      	subs	r0, r0, r3
 8005a72:	2864      	cmp	r0, #100	; 0x64
 8005a74:	d9f4      	bls.n	8005a60 <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
 8005a76:	2003      	movs	r0, #3
}
 8005a78:	b007      	add	sp, #28
 8005a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a7c:	21a0      	movs	r1, #160	; 0xa0
 8005a7e:	02c9      	lsls	r1, r1, #11
 8005a80:	428a      	cmp	r2, r1
 8005a82:	d105      	bne.n	8005a90 <HAL_RCC_OscConfig+0x104>
 8005a84:	2280      	movs	r2, #128	; 0x80
 8005a86:	6821      	ldr	r1, [r4, #0]
 8005a88:	02d2      	lsls	r2, r2, #11
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	6022      	str	r2, [r4, #0]
 8005a8e:	e7e1      	b.n	8005a54 <HAL_RCC_OscConfig+0xc8>
 8005a90:	6821      	ldr	r1, [r4, #0]
 8005a92:	487f      	ldr	r0, [pc, #508]	; (8005c90 <HAL_RCC_OscConfig+0x304>)
 8005a94:	4001      	ands	r1, r0
 8005a96:	6021      	str	r1, [r4, #0]
 8005a98:	6821      	ldr	r1, [r4, #0]
 8005a9a:	400b      	ands	r3, r1
 8005a9c:	9305      	str	r3, [sp, #20]
 8005a9e:	9b05      	ldr	r3, [sp, #20]
 8005aa0:	497c      	ldr	r1, [pc, #496]	; (8005c94 <HAL_RCC_OscConfig+0x308>)
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	400b      	ands	r3, r1
 8005aa6:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005aa8:	2a00      	cmp	r2, #0
 8005aaa:	d1d6      	bne.n	8005a5a <HAL_RCC_OscConfig+0xce>
        tickstart = HAL_GetTick();
 8005aac:	f7fe fb74 	bl	8004198 <HAL_GetTick>
 8005ab0:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ab2:	2280      	movs	r2, #128	; 0x80
 8005ab4:	6823      	ldr	r3, [r4, #0]
 8005ab6:	0292      	lsls	r2, r2, #10
 8005ab8:	4213      	tst	r3, r2
 8005aba:	d100      	bne.n	8005abe <HAL_RCC_OscConfig+0x132>
 8005abc:	e776      	b.n	80059ac <HAL_RCC_OscConfig+0x20>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005abe:	f7fe fb6b 	bl	8004198 <HAL_GetTick>
 8005ac2:	9b01      	ldr	r3, [sp, #4]
 8005ac4:	1ac0      	subs	r0, r0, r3
 8005ac6:	2864      	cmp	r0, #100	; 0x64
 8005ac8:	d9f3      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x126>
 8005aca:	e7d4      	b.n	8005a76 <HAL_RCC_OscConfig+0xea>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005acc:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8005ace:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005ad0:	4213      	tst	r3, r2
 8005ad2:	d003      	beq.n	8005adc <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005ad4:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005ad6:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005ad8:	4311      	orrs	r1, r2
 8005ada:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005adc:	2e04      	cmp	r6, #4
 8005ade:	d003      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x15c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005ae0:	2e0c      	cmp	r6, #12
 8005ae2:	d124      	bne.n	8005b2e <HAL_RCC_OscConfig+0x1a2>
 8005ae4:	2f00      	cmp	r7, #0
 8005ae6:	d122      	bne.n	8005b2e <HAL_RCC_OscConfig+0x1a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005ae8:	6822      	ldr	r2, [r4, #0]
 8005aea:	0752      	lsls	r2, r2, #29
 8005aec:	d501      	bpl.n	8005af2 <HAL_RCC_OscConfig+0x166>
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d0ab      	beq.n	8005a4a <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005af2:	6861      	ldr	r1, [r4, #4]
 8005af4:	692a      	ldr	r2, [r5, #16]
 8005af6:	4868      	ldr	r0, [pc, #416]	; (8005c98 <HAL_RCC_OscConfig+0x30c>)
 8005af8:	0212      	lsls	r2, r2, #8
 8005afa:	4001      	ands	r1, r0
 8005afc:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005afe:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b00:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005b02:	6822      	ldr	r2, [r4, #0]
 8005b04:	438a      	bics	r2, r1
 8005b06:	4313      	orrs	r3, r2
 8005b08:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b0a:	f7ff fef7 	bl	80058fc <HAL_RCC_GetSysClockFreq>
 8005b0e:	68e3      	ldr	r3, [r4, #12]
 8005b10:	4a5c      	ldr	r2, [pc, #368]	; (8005c84 <HAL_RCC_OscConfig+0x2f8>)
 8005b12:	061b      	lsls	r3, r3, #24
 8005b14:	0f1b      	lsrs	r3, r3, #28
 8005b16:	5cd3      	ldrb	r3, [r2, r3]
 8005b18:	40d8      	lsrs	r0, r3
 8005b1a:	4b5b      	ldr	r3, [pc, #364]	; (8005c88 <HAL_RCC_OscConfig+0x2fc>)
 8005b1c:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8005b1e:	4b5b      	ldr	r3, [pc, #364]	; (8005c8c <HAL_RCC_OscConfig+0x300>)
 8005b20:	6818      	ldr	r0, [r3, #0]
 8005b22:	f7fe fb37 	bl	8004194 <HAL_InitTick>
      if(status != HAL_OK)
 8005b26:	2800      	cmp	r0, #0
 8005b28:	d100      	bne.n	8005b2c <HAL_RCC_OscConfig+0x1a0>
 8005b2a:	e743      	b.n	80059b4 <HAL_RCC_OscConfig+0x28>
 8005b2c:	e7a4      	b.n	8005a78 <HAL_RCC_OscConfig+0xec>
      if(hsi_state != RCC_HSI_OFF)
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d019      	beq.n	8005b66 <HAL_RCC_OscConfig+0x1da>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005b32:	2109      	movs	r1, #9
 8005b34:	6822      	ldr	r2, [r4, #0]
 8005b36:	438a      	bics	r2, r1
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005b3c:	f7fe fb2c 	bl	8004198 <HAL_GetTick>
 8005b40:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b42:	2204      	movs	r2, #4
 8005b44:	6823      	ldr	r3, [r4, #0]
 8005b46:	4213      	tst	r3, r2
 8005b48:	d007      	beq.n	8005b5a <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b4a:	6862      	ldr	r2, [r4, #4]
 8005b4c:	692b      	ldr	r3, [r5, #16]
 8005b4e:	4952      	ldr	r1, [pc, #328]	; (8005c98 <HAL_RCC_OscConfig+0x30c>)
 8005b50:	021b      	lsls	r3, r3, #8
 8005b52:	400a      	ands	r2, r1
 8005b54:	4313      	orrs	r3, r2
 8005b56:	6063      	str	r3, [r4, #4]
 8005b58:	e72c      	b.n	80059b4 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b5a:	f7fe fb1d 	bl	8004198 <HAL_GetTick>
 8005b5e:	1bc0      	subs	r0, r0, r7
 8005b60:	2802      	cmp	r0, #2
 8005b62:	d9ee      	bls.n	8005b42 <HAL_RCC_OscConfig+0x1b6>
 8005b64:	e787      	b.n	8005a76 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI_DISABLE();
 8005b66:	2201      	movs	r2, #1
 8005b68:	6823      	ldr	r3, [r4, #0]
 8005b6a:	4393      	bics	r3, r2
 8005b6c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005b6e:	f7fe fb13 	bl	8004198 <HAL_GetTick>
 8005b72:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b74:	2204      	movs	r2, #4
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	4213      	tst	r3, r2
 8005b7a:	d100      	bne.n	8005b7e <HAL_RCC_OscConfig+0x1f2>
 8005b7c:	e71a      	b.n	80059b4 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b7e:	f7fe fb0b 	bl	8004198 <HAL_GetTick>
 8005b82:	1bc0      	subs	r0, r0, r7
 8005b84:	2802      	cmp	r0, #2
 8005b86:	d9f5      	bls.n	8005b74 <HAL_RCC_OscConfig+0x1e8>
 8005b88:	e775      	b.n	8005a76 <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005b8a:	69eb      	ldr	r3, [r5, #28]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d020      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x246>
        __HAL_RCC_MSI_ENABLE();
 8005b90:	2380      	movs	r3, #128	; 0x80
 8005b92:	6822      	ldr	r2, [r4, #0]
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	4313      	orrs	r3, r2
 8005b98:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005b9a:	f7fe fafd 	bl	8004198 <HAL_GetTick>
 8005b9e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005ba0:	2280      	movs	r2, #128	; 0x80
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	0092      	lsls	r2, r2, #2
 8005ba6:	4213      	tst	r3, r2
 8005ba8:	d00d      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005baa:	6863      	ldr	r3, [r4, #4]
 8005bac:	4a34      	ldr	r2, [pc, #208]	; (8005c80 <HAL_RCC_OscConfig+0x2f4>)
 8005bae:	4013      	ands	r3, r2
 8005bb0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005bb6:	6862      	ldr	r2, [r4, #4]
 8005bb8:	6a2b      	ldr	r3, [r5, #32]
 8005bba:	0212      	lsls	r2, r2, #8
 8005bbc:	061b      	lsls	r3, r3, #24
 8005bbe:	0a12      	lsrs	r2, r2, #8
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	6063      	str	r3, [r4, #4]
 8005bc4:	e723      	b.n	8005a0e <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005bc6:	f7fe fae7 	bl	8004198 <HAL_GetTick>
 8005bca:	1bc0      	subs	r0, r0, r7
 8005bcc:	2802      	cmp	r0, #2
 8005bce:	d9e7      	bls.n	8005ba0 <HAL_RCC_OscConfig+0x214>
 8005bd0:	e751      	b.n	8005a76 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_MSI_DISABLE();
 8005bd2:	6823      	ldr	r3, [r4, #0]
 8005bd4:	4a31      	ldr	r2, [pc, #196]	; (8005c9c <HAL_RCC_OscConfig+0x310>)
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005bda:	f7fe fadd 	bl	8004198 <HAL_GetTick>
 8005bde:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005be0:	2280      	movs	r2, #128	; 0x80
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	0092      	lsls	r2, r2, #2
 8005be6:	4213      	tst	r3, r2
 8005be8:	d100      	bne.n	8005bec <HAL_RCC_OscConfig+0x260>
 8005bea:	e710      	b.n	8005a0e <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005bec:	f7fe fad4 	bl	8004198 <HAL_GetTick>
 8005bf0:	1bc0      	subs	r0, r0, r7
 8005bf2:	2802      	cmp	r0, #2
 8005bf4:	d9f4      	bls.n	8005be0 <HAL_RCC_OscConfig+0x254>
 8005bf6:	e73e      	b.n	8005a76 <HAL_RCC_OscConfig+0xea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bf8:	696a      	ldr	r2, [r5, #20]
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	2a00      	cmp	r2, #0
 8005bfe:	d010      	beq.n	8005c22 <HAL_RCC_OscConfig+0x296>
      __HAL_RCC_LSI_ENABLE();
 8005c00:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005c02:	4313      	orrs	r3, r2
 8005c04:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8005c06:	f7fe fac7 	bl	8004198 <HAL_GetTick>
 8005c0a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005c10:	4213      	tst	r3, r2
 8005c12:	d000      	beq.n	8005c16 <HAL_RCC_OscConfig+0x28a>
 8005c14:	e6ff      	b.n	8005a16 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c16:	f7fe fabf 	bl	8004198 <HAL_GetTick>
 8005c1a:	1bc0      	subs	r0, r0, r7
 8005c1c:	2802      	cmp	r0, #2
 8005c1e:	d9f5      	bls.n	8005c0c <HAL_RCC_OscConfig+0x280>
 8005c20:	e729      	b.n	8005a76 <HAL_RCC_OscConfig+0xea>
      __HAL_RCC_LSI_DISABLE();
 8005c22:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005c24:	439a      	bics	r2, r3
 8005c26:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8005c28:	f7fe fab6 	bl	8004198 <HAL_GetTick>
 8005c2c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c2e:	2202      	movs	r2, #2
 8005c30:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005c32:	4213      	tst	r3, r2
 8005c34:	d100      	bne.n	8005c38 <HAL_RCC_OscConfig+0x2ac>
 8005c36:	e6ee      	b.n	8005a16 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c38:	f7fe faae 	bl	8004198 <HAL_GetTick>
 8005c3c:	1bc0      	subs	r0, r0, r7
 8005c3e:	2802      	cmp	r0, #2
 8005c40:	d9f5      	bls.n	8005c2e <HAL_RCC_OscConfig+0x2a2>
 8005c42:	e718      	b.n	8005a76 <HAL_RCC_OscConfig+0xea>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c44:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8005c46:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c48:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005c4a:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8005c4c:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c4e:	421a      	tst	r2, r3
 8005c50:	d104      	bne.n	8005c5c <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c52:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005c54:	4313      	orrs	r3, r2
 8005c56:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c5c:	2280      	movs	r2, #128	; 0x80
 8005c5e:	4f10      	ldr	r7, [pc, #64]	; (8005ca0 <HAL_RCC_OscConfig+0x314>)
 8005c60:	0052      	lsls	r2, r2, #1
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	4213      	tst	r3, r2
 8005c66:	d01d      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c68:	2280      	movs	r2, #128	; 0x80
 8005c6a:	68ab      	ldr	r3, [r5, #8]
 8005c6c:	0052      	lsls	r2, r2, #1
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d12e      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x344>
 8005c72:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005c74:	4313      	orrs	r3, r2
 8005c76:	6523      	str	r3, [r4, #80]	; 0x50
 8005c78:	e04f      	b.n	8005d1a <HAL_RCC_OscConfig+0x38e>
 8005c7a:	46c0      	nop			; (mov r8, r8)
 8005c7c:	40021000 	.word	0x40021000
 8005c80:	ffff1fff 	.word	0xffff1fff
 8005c84:	08011261 	.word	0x08011261
 8005c88:	20000044 	.word	0x20000044
 8005c8c:	2000004c 	.word	0x2000004c
 8005c90:	fffeffff 	.word	0xfffeffff
 8005c94:	fffbffff 	.word	0xfffbffff
 8005c98:	ffffe0ff 	.word	0xffffe0ff
 8005c9c:	fffffeff 	.word	0xfffffeff
 8005ca0:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ca4:	2280      	movs	r2, #128	; 0x80
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	0052      	lsls	r2, r2, #1
 8005caa:	4313      	orrs	r3, r2
 8005cac:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8005cae:	f7fe fa73 	bl	8004198 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb2:	2380      	movs	r3, #128	; 0x80
 8005cb4:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8005cb6:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb8:	9303      	str	r3, [sp, #12]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	9a03      	ldr	r2, [sp, #12]
 8005cbe:	4213      	tst	r3, r2
 8005cc0:	d1d2      	bne.n	8005c68 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cc2:	f7fe fa69 	bl	8004198 <HAL_GetTick>
 8005cc6:	9b02      	ldr	r3, [sp, #8]
 8005cc8:	1ac0      	subs	r0, r0, r3
 8005cca:	2864      	cmp	r0, #100	; 0x64
 8005ccc:	d9f5      	bls.n	8005cba <HAL_RCC_OscConfig+0x32e>
 8005cce:	e6d2      	b.n	8005a76 <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d116      	bne.n	8005d02 <HAL_RCC_OscConfig+0x376>
 8005cd4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005cd6:	4a6b      	ldr	r2, [pc, #428]	; (8005e84 <HAL_RCC_OscConfig+0x4f8>)
 8005cd8:	4013      	ands	r3, r2
 8005cda:	6523      	str	r3, [r4, #80]	; 0x50
 8005cdc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005cde:	4a6a      	ldr	r2, [pc, #424]	; (8005e88 <HAL_RCC_OscConfig+0x4fc>)
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8005ce4:	f7fe fa58 	bl	8004198 <HAL_GetTick>
 8005ce8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005cea:	2280      	movs	r2, #128	; 0x80
 8005cec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005cee:	0092      	lsls	r2, r2, #2
 8005cf0:	4213      	tst	r3, r2
 8005cf2:	d01a      	beq.n	8005d2a <HAL_RCC_OscConfig+0x39e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cf4:	f7fe fa50 	bl	8004198 <HAL_GetTick>
 8005cf8:	4b64      	ldr	r3, [pc, #400]	; (8005e8c <HAL_RCC_OscConfig+0x500>)
 8005cfa:	1bc0      	subs	r0, r0, r7
 8005cfc:	4298      	cmp	r0, r3
 8005cfe:	d9f4      	bls.n	8005cea <HAL_RCC_OscConfig+0x35e>
 8005d00:	e6b9      	b.n	8005a76 <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d02:	21a0      	movs	r1, #160	; 0xa0
 8005d04:	00c9      	lsls	r1, r1, #3
 8005d06:	428b      	cmp	r3, r1
 8005d08:	d118      	bne.n	8005d3c <HAL_RCC_OscConfig+0x3b0>
 8005d0a:	2380      	movs	r3, #128	; 0x80
 8005d0c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005d0e:	00db      	lsls	r3, r3, #3
 8005d10:	430b      	orrs	r3, r1
 8005d12:	6523      	str	r3, [r4, #80]	; 0x50
 8005d14:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005d16:	431a      	orrs	r2, r3
 8005d18:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8005d1a:	f7fe fa3d 	bl	8004198 <HAL_GetTick>
 8005d1e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d20:	2280      	movs	r2, #128	; 0x80
 8005d22:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005d24:	0092      	lsls	r2, r2, #2
 8005d26:	4213      	tst	r3, r2
 8005d28:	d010      	beq.n	8005d4c <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 8005d2a:	9b01      	ldr	r3, [sp, #4]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d000      	beq.n	8005d32 <HAL_RCC_OscConfig+0x3a6>
 8005d30:	e675      	b.n	8005a1e <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d34:	4a56      	ldr	r2, [pc, #344]	; (8005e90 <HAL_RCC_OscConfig+0x504>)
 8005d36:	4013      	ands	r3, r2
 8005d38:	63a3      	str	r3, [r4, #56]	; 0x38
 8005d3a:	e670      	b.n	8005a1e <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d3c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005d3e:	4a51      	ldr	r2, [pc, #324]	; (8005e84 <HAL_RCC_OscConfig+0x4f8>)
 8005d40:	4013      	ands	r3, r2
 8005d42:	6523      	str	r3, [r4, #80]	; 0x50
 8005d44:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005d46:	4a50      	ldr	r2, [pc, #320]	; (8005e88 <HAL_RCC_OscConfig+0x4fc>)
 8005d48:	4013      	ands	r3, r2
 8005d4a:	e794      	b.n	8005c76 <HAL_RCC_OscConfig+0x2ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d4c:	f7fe fa24 	bl	8004198 <HAL_GetTick>
 8005d50:	4b4e      	ldr	r3, [pc, #312]	; (8005e8c <HAL_RCC_OscConfig+0x500>)
 8005d52:	1bc0      	subs	r0, r0, r7
 8005d54:	4298      	cmp	r0, r3
 8005d56:	d9e3      	bls.n	8005d20 <HAL_RCC_OscConfig+0x394>
 8005d58:	e68d      	b.n	8005a76 <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d5a:	69a9      	ldr	r1, [r5, #24]
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	4a4d      	ldr	r2, [pc, #308]	; (8005e94 <HAL_RCC_OscConfig+0x508>)
 8005d60:	2900      	cmp	r1, #0
 8005d62:	d018      	beq.n	8005d96 <HAL_RCC_OscConfig+0x40a>
        __HAL_RCC_HSI48_ENABLE();
 8005d64:	68a1      	ldr	r1, [r4, #8]
 8005d66:	4319      	orrs	r1, r3
 8005d68:	60a1      	str	r1, [r4, #8]
 8005d6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d6c:	430b      	orrs	r3, r1
 8005d6e:	6363      	str	r3, [r4, #52]	; 0x34
 8005d70:	2380      	movs	r3, #128	; 0x80
 8005d72:	6a11      	ldr	r1, [r2, #32]
 8005d74:	019b      	lsls	r3, r3, #6
 8005d76:	430b      	orrs	r3, r1
 8005d78:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8005d7a:	f7fe fa0d 	bl	8004198 <HAL_GetTick>
 8005d7e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d80:	2202      	movs	r2, #2
 8005d82:	68a3      	ldr	r3, [r4, #8]
 8005d84:	4213      	tst	r3, r2
 8005d86:	d000      	beq.n	8005d8a <HAL_RCC_OscConfig+0x3fe>
 8005d88:	e64d      	b.n	8005a26 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d8a:	f7fe fa05 	bl	8004198 <HAL_GetTick>
 8005d8e:	1bc0      	subs	r0, r0, r7
 8005d90:	2802      	cmp	r0, #2
 8005d92:	d9f5      	bls.n	8005d80 <HAL_RCC_OscConfig+0x3f4>
 8005d94:	e66f      	b.n	8005a76 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI48_DISABLE();
 8005d96:	68a1      	ldr	r1, [r4, #8]
 8005d98:	4399      	bics	r1, r3
 8005d9a:	60a1      	str	r1, [r4, #8]
 8005d9c:	6a13      	ldr	r3, [r2, #32]
 8005d9e:	493e      	ldr	r1, [pc, #248]	; (8005e98 <HAL_RCC_OscConfig+0x50c>)
 8005da0:	400b      	ands	r3, r1
 8005da2:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8005da4:	f7fe f9f8 	bl	8004198 <HAL_GetTick>
 8005da8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005daa:	2202      	movs	r2, #2
 8005dac:	68a3      	ldr	r3, [r4, #8]
 8005dae:	4213      	tst	r3, r2
 8005db0:	d100      	bne.n	8005db4 <HAL_RCC_OscConfig+0x428>
 8005db2:	e638      	b.n	8005a26 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005db4:	f7fe f9f0 	bl	8004198 <HAL_GetTick>
 8005db8:	1bc0      	subs	r0, r0, r7
 8005dba:	2802      	cmp	r0, #2
 8005dbc:	d9f5      	bls.n	8005daa <HAL_RCC_OscConfig+0x41e>
 8005dbe:	e65a      	b.n	8005a76 <HAL_RCC_OscConfig+0xea>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005dc0:	2e0c      	cmp	r6, #12
 8005dc2:	d043      	beq.n	8005e4c <HAL_RCC_OscConfig+0x4c0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dc4:	4a35      	ldr	r2, [pc, #212]	; (8005e9c <HAL_RCC_OscConfig+0x510>)
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d12e      	bne.n	8005e28 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_PLL_DISABLE();
 8005dca:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005dcc:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8005dce:	4013      	ands	r3, r2
 8005dd0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005dd2:	f7fe f9e1 	bl	8004198 <HAL_GetTick>
 8005dd6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005dd8:	04bf      	lsls	r7, r7, #18
 8005dda:	6823      	ldr	r3, [r4, #0]
 8005ddc:	423b      	tst	r3, r7
 8005dde:	d11d      	bne.n	8005e1c <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005de0:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8005de2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005de4:	68e2      	ldr	r2, [r4, #12]
 8005de6:	430b      	orrs	r3, r1
 8005de8:	492d      	ldr	r1, [pc, #180]	; (8005ea0 <HAL_RCC_OscConfig+0x514>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005dea:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dec:	400a      	ands	r2, r1
 8005dee:	4313      	orrs	r3, r2
 8005df0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005df2:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8005df8:	2380      	movs	r3, #128	; 0x80
 8005dfa:	6822      	ldr	r2, [r4, #0]
 8005dfc:	045b      	lsls	r3, r3, #17
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005e02:	f7fe f9c9 	bl	8004198 <HAL_GetTick>
 8005e06:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005e08:	6823      	ldr	r3, [r4, #0]
 8005e0a:	4233      	tst	r3, r6
 8005e0c:	d000      	beq.n	8005e10 <HAL_RCC_OscConfig+0x484>
 8005e0e:	e60e      	b.n	8005a2e <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e10:	f7fe f9c2 	bl	8004198 <HAL_GetTick>
 8005e14:	1b40      	subs	r0, r0, r5
 8005e16:	2802      	cmp	r0, #2
 8005e18:	d9f6      	bls.n	8005e08 <HAL_RCC_OscConfig+0x47c>
 8005e1a:	e62c      	b.n	8005a76 <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e1c:	f7fe f9bc 	bl	8004198 <HAL_GetTick>
 8005e20:	1b80      	subs	r0, r0, r6
 8005e22:	2802      	cmp	r0, #2
 8005e24:	d9d9      	bls.n	8005dda <HAL_RCC_OscConfig+0x44e>
 8005e26:	e626      	b.n	8005a76 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_PLL_DISABLE();
 8005e28:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005e2a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005e30:	f7fe f9b2 	bl	8004198 <HAL_GetTick>
 8005e34:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005e36:	04b6      	lsls	r6, r6, #18
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	4233      	tst	r3, r6
 8005e3c:	d100      	bne.n	8005e40 <HAL_RCC_OscConfig+0x4b4>
 8005e3e:	e5f6      	b.n	8005a2e <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e40:	f7fe f9aa 	bl	8004198 <HAL_GetTick>
 8005e44:	1b40      	subs	r0, r0, r5
 8005e46:	2802      	cmp	r0, #2
 8005e48:	d9f6      	bls.n	8005e38 <HAL_RCC_OscConfig+0x4ac>
 8005e4a:	e614      	b.n	8005a76 <HAL_RCC_OscConfig+0xea>
        return HAL_ERROR;
 8005e4c:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d100      	bne.n	8005e54 <HAL_RCC_OscConfig+0x4c8>
 8005e52:	e611      	b.n	8005a78 <HAL_RCC_OscConfig+0xec>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e54:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8005e56:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e58:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8005e5a:	0252      	lsls	r2, r2, #9
 8005e5c:	401a      	ands	r2, r3
 8005e5e:	428a      	cmp	r2, r1
 8005e60:	d000      	beq.n	8005e64 <HAL_RCC_OscConfig+0x4d8>
 8005e62:	e5f2      	b.n	8005a4a <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005e64:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e66:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005e68:	0392      	lsls	r2, r2, #14
 8005e6a:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e6c:	428a      	cmp	r2, r1
 8005e6e:	d000      	beq.n	8005e72 <HAL_RCC_OscConfig+0x4e6>
 8005e70:	e5eb      	b.n	8005a4a <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005e72:	22c0      	movs	r2, #192	; 0xc0
 8005e74:	0412      	lsls	r2, r2, #16
 8005e76:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005e78:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d100      	bne.n	8005e80 <HAL_RCC_OscConfig+0x4f4>
 8005e7e:	e5d6      	b.n	8005a2e <HAL_RCC_OscConfig+0xa2>
 8005e80:	e5e3      	b.n	8005a4a <HAL_RCC_OscConfig+0xbe>
 8005e82:	46c0      	nop			; (mov r8, r8)
 8005e84:	fffffeff 	.word	0xfffffeff
 8005e88:	fffffbff 	.word	0xfffffbff
 8005e8c:	00001388 	.word	0x00001388
 8005e90:	efffffff 	.word	0xefffffff
 8005e94:	40010000 	.word	0x40010000
 8005e98:	ffffdfff 	.word	0xffffdfff
 8005e9c:	feffffff 	.word	0xfeffffff
 8005ea0:	ff02ffff 	.word	0xff02ffff

08005ea4 <HAL_RCC_ClockConfig>:
{
 8005ea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ea6:	1e04      	subs	r4, r0, #0
 8005ea8:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8005eaa:	d101      	bne.n	8005eb0 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8005eac:	2001      	movs	r0, #1
}
 8005eae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005eb0:	2601      	movs	r6, #1
 8005eb2:	4d5b      	ldr	r5, [pc, #364]	; (8006020 <HAL_RCC_ClockConfig+0x17c>)
 8005eb4:	9a01      	ldr	r2, [sp, #4]
 8005eb6:	682b      	ldr	r3, [r5, #0]
 8005eb8:	4033      	ands	r3, r6
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d331      	bcc.n	8005f22 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ebe:	6822      	ldr	r2, [r4, #0]
 8005ec0:	0793      	lsls	r3, r2, #30
 8005ec2:	d443      	bmi.n	8005f4c <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ec4:	07d3      	lsls	r3, r2, #31
 8005ec6:	d449      	bmi.n	8005f5c <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ec8:	2601      	movs	r6, #1
 8005eca:	682b      	ldr	r3, [r5, #0]
 8005ecc:	9a01      	ldr	r2, [sp, #4]
 8005ece:	4033      	ands	r3, r6
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d909      	bls.n	8005ee8 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ed4:	682b      	ldr	r3, [r5, #0]
 8005ed6:	43b3      	bics	r3, r6
 8005ed8:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8005eda:	f7fe f95d 	bl	8004198 <HAL_GetTick>
 8005ede:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ee0:	682b      	ldr	r3, [r5, #0]
 8005ee2:	4233      	tst	r3, r6
 8005ee4:	d000      	beq.n	8005ee8 <HAL_RCC_ClockConfig+0x44>
 8005ee6:	e08c      	b.n	8006002 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ee8:	6822      	ldr	r2, [r4, #0]
 8005eea:	4d4e      	ldr	r5, [pc, #312]	; (8006024 <HAL_RCC_ClockConfig+0x180>)
 8005eec:	0753      	lsls	r3, r2, #29
 8005eee:	d500      	bpl.n	8005ef2 <HAL_RCC_ClockConfig+0x4e>
 8005ef0:	e08f      	b.n	8006012 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ef2:	0713      	lsls	r3, r2, #28
 8005ef4:	d506      	bpl.n	8005f04 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005ef6:	68ea      	ldr	r2, [r5, #12]
 8005ef8:	6923      	ldr	r3, [r4, #16]
 8005efa:	494b      	ldr	r1, [pc, #300]	; (8006028 <HAL_RCC_ClockConfig+0x184>)
 8005efc:	00db      	lsls	r3, r3, #3
 8005efe:	400a      	ands	r2, r1
 8005f00:	4313      	orrs	r3, r2
 8005f02:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f04:	f7ff fcfa 	bl	80058fc <HAL_RCC_GetSysClockFreq>
 8005f08:	68eb      	ldr	r3, [r5, #12]
 8005f0a:	4a48      	ldr	r2, [pc, #288]	; (800602c <HAL_RCC_ClockConfig+0x188>)
 8005f0c:	061b      	lsls	r3, r3, #24
 8005f0e:	0f1b      	lsrs	r3, r3, #28
 8005f10:	5cd3      	ldrb	r3, [r2, r3]
 8005f12:	40d8      	lsrs	r0, r3
 8005f14:	4b46      	ldr	r3, [pc, #280]	; (8006030 <HAL_RCC_ClockConfig+0x18c>)
 8005f16:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8005f18:	4b46      	ldr	r3, [pc, #280]	; (8006034 <HAL_RCC_ClockConfig+0x190>)
 8005f1a:	6818      	ldr	r0, [r3, #0]
 8005f1c:	f7fe f93a 	bl	8004194 <HAL_InitTick>
  if(status != HAL_OK)
 8005f20:	e7c5      	b.n	8005eae <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f22:	682b      	ldr	r3, [r5, #0]
 8005f24:	9a01      	ldr	r2, [sp, #4]
 8005f26:	43b3      	bics	r3, r6
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8005f2c:	f7fe f934 	bl	8004198 <HAL_GetTick>
 8005f30:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f32:	682b      	ldr	r3, [r5, #0]
 8005f34:	9a01      	ldr	r2, [sp, #4]
 8005f36:	4033      	ands	r3, r6
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d0c0      	beq.n	8005ebe <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f3c:	f7fe f92c 	bl	8004198 <HAL_GetTick>
 8005f40:	4b3d      	ldr	r3, [pc, #244]	; (8006038 <HAL_RCC_ClockConfig+0x194>)
 8005f42:	1bc0      	subs	r0, r0, r7
 8005f44:	4298      	cmp	r0, r3
 8005f46:	d9f4      	bls.n	8005f32 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8005f48:	2003      	movs	r0, #3
 8005f4a:	e7b0      	b.n	8005eae <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f4c:	20f0      	movs	r0, #240	; 0xf0
 8005f4e:	4935      	ldr	r1, [pc, #212]	; (8006024 <HAL_RCC_ClockConfig+0x180>)
 8005f50:	68cb      	ldr	r3, [r1, #12]
 8005f52:	4383      	bics	r3, r0
 8005f54:	68a0      	ldr	r0, [r4, #8]
 8005f56:	4303      	orrs	r3, r0
 8005f58:	60cb      	str	r3, [r1, #12]
 8005f5a:	e7b3      	b.n	8005ec4 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f5c:	4e31      	ldr	r6, [pc, #196]	; (8006024 <HAL_RCC_ClockConfig+0x180>)
 8005f5e:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f60:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f62:	2a02      	cmp	r2, #2
 8005f64:	d118      	bne.n	8005f98 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f66:	039b      	lsls	r3, r3, #14
 8005f68:	d5a0      	bpl.n	8005eac <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f6a:	2103      	movs	r1, #3
 8005f6c:	68f3      	ldr	r3, [r6, #12]
 8005f6e:	438b      	bics	r3, r1
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8005f74:	f7fe f910 	bl	8004198 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f78:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8005f7a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d118      	bne.n	8005fb2 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f80:	220c      	movs	r2, #12
 8005f82:	68f3      	ldr	r3, [r6, #12]
 8005f84:	4013      	ands	r3, r2
 8005f86:	2b08      	cmp	r3, #8
 8005f88:	d09e      	beq.n	8005ec8 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f8a:	f7fe f905 	bl	8004198 <HAL_GetTick>
 8005f8e:	4b2a      	ldr	r3, [pc, #168]	; (8006038 <HAL_RCC_ClockConfig+0x194>)
 8005f90:	1bc0      	subs	r0, r0, r7
 8005f92:	4298      	cmp	r0, r3
 8005f94:	d9f4      	bls.n	8005f80 <HAL_RCC_ClockConfig+0xdc>
 8005f96:	e7d7      	b.n	8005f48 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f98:	2a03      	cmp	r2, #3
 8005f9a:	d102      	bne.n	8005fa2 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f9c:	019b      	lsls	r3, r3, #6
 8005f9e:	d4e4      	bmi.n	8005f6a <HAL_RCC_ClockConfig+0xc6>
 8005fa0:	e784      	b.n	8005eac <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005fa2:	2a01      	cmp	r2, #1
 8005fa4:	d102      	bne.n	8005fac <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fa6:	075b      	lsls	r3, r3, #29
 8005fa8:	d4df      	bmi.n	8005f6a <HAL_RCC_ClockConfig+0xc6>
 8005faa:	e77f      	b.n	8005eac <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005fac:	059b      	lsls	r3, r3, #22
 8005fae:	d4dc      	bmi.n	8005f6a <HAL_RCC_ClockConfig+0xc6>
 8005fb0:	e77c      	b.n	8005eac <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d10b      	bne.n	8005fce <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fb6:	220c      	movs	r2, #12
 8005fb8:	68f3      	ldr	r3, [r6, #12]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d083      	beq.n	8005ec8 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fc0:	f7fe f8ea 	bl	8004198 <HAL_GetTick>
 8005fc4:	4b1c      	ldr	r3, [pc, #112]	; (8006038 <HAL_RCC_ClockConfig+0x194>)
 8005fc6:	1bc0      	subs	r0, r0, r7
 8005fc8:	4298      	cmp	r0, r3
 8005fca:	d9f4      	bls.n	8005fb6 <HAL_RCC_ClockConfig+0x112>
 8005fcc:	e7bc      	b.n	8005f48 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d011      	beq.n	8005ff6 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005fd2:	220c      	movs	r2, #12
 8005fd4:	68f3      	ldr	r3, [r6, #12]
 8005fd6:	4213      	tst	r3, r2
 8005fd8:	d100      	bne.n	8005fdc <HAL_RCC_ClockConfig+0x138>
 8005fda:	e775      	b.n	8005ec8 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fdc:	f7fe f8dc 	bl	8004198 <HAL_GetTick>
 8005fe0:	4b15      	ldr	r3, [pc, #84]	; (8006038 <HAL_RCC_ClockConfig+0x194>)
 8005fe2:	1bc0      	subs	r0, r0, r7
 8005fe4:	4298      	cmp	r0, r3
 8005fe6:	d9f4      	bls.n	8005fd2 <HAL_RCC_ClockConfig+0x12e>
 8005fe8:	e7ae      	b.n	8005f48 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fea:	f7fe f8d5 	bl	8004198 <HAL_GetTick>
 8005fee:	4b12      	ldr	r3, [pc, #72]	; (8006038 <HAL_RCC_ClockConfig+0x194>)
 8005ff0:	1bc0      	subs	r0, r0, r7
 8005ff2:	4298      	cmp	r0, r3
 8005ff4:	d8a8      	bhi.n	8005f48 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ff6:	220c      	movs	r2, #12
 8005ff8:	68f3      	ldr	r3, [r6, #12]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	d1f4      	bne.n	8005fea <HAL_RCC_ClockConfig+0x146>
 8006000:	e762      	b.n	8005ec8 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006002:	f7fe f8c9 	bl	8004198 <HAL_GetTick>
 8006006:	4b0c      	ldr	r3, [pc, #48]	; (8006038 <HAL_RCC_ClockConfig+0x194>)
 8006008:	1bc0      	subs	r0, r0, r7
 800600a:	4298      	cmp	r0, r3
 800600c:	d800      	bhi.n	8006010 <HAL_RCC_ClockConfig+0x16c>
 800600e:	e767      	b.n	8005ee0 <HAL_RCC_ClockConfig+0x3c>
 8006010:	e79a      	b.n	8005f48 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006012:	68eb      	ldr	r3, [r5, #12]
 8006014:	4909      	ldr	r1, [pc, #36]	; (800603c <HAL_RCC_ClockConfig+0x198>)
 8006016:	400b      	ands	r3, r1
 8006018:	68e1      	ldr	r1, [r4, #12]
 800601a:	430b      	orrs	r3, r1
 800601c:	60eb      	str	r3, [r5, #12]
 800601e:	e768      	b.n	8005ef2 <HAL_RCC_ClockConfig+0x4e>
 8006020:	40022000 	.word	0x40022000
 8006024:	40021000 	.word	0x40021000
 8006028:	ffffc7ff 	.word	0xffffc7ff
 800602c:	08011261 	.word	0x08011261
 8006030:	20000044 	.word	0x20000044
 8006034:	2000004c 	.word	0x2000004c
 8006038:	00001388 	.word	0x00001388
 800603c:	fffff8ff 	.word	0xfffff8ff

08006040 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006040:	4b04      	ldr	r3, [pc, #16]	; (8006054 <HAL_RCC_GetPCLK1Freq+0x14>)
 8006042:	4a05      	ldr	r2, [pc, #20]	; (8006058 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	055b      	lsls	r3, r3, #21
 8006048:	0f5b      	lsrs	r3, r3, #29
 800604a:	5cd3      	ldrb	r3, [r2, r3]
 800604c:	4a03      	ldr	r2, [pc, #12]	; (800605c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800604e:	6810      	ldr	r0, [r2, #0]
 8006050:	40d8      	lsrs	r0, r3
}
 8006052:	4770      	bx	lr
 8006054:	40021000 	.word	0x40021000
 8006058:	08011271 	.word	0x08011271
 800605c:	20000044 	.word	0x20000044

08006060 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006060:	4b04      	ldr	r3, [pc, #16]	; (8006074 <HAL_RCC_GetPCLK2Freq+0x14>)
 8006062:	4a05      	ldr	r2, [pc, #20]	; (8006078 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	049b      	lsls	r3, r3, #18
 8006068:	0f5b      	lsrs	r3, r3, #29
 800606a:	5cd3      	ldrb	r3, [r2, r3]
 800606c:	4a03      	ldr	r2, [pc, #12]	; (800607c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800606e:	6810      	ldr	r0, [r2, #0]
 8006070:	40d8      	lsrs	r0, r3
}
 8006072:	4770      	bx	lr
 8006074:	40021000 	.word	0x40021000
 8006078:	08011271 	.word	0x08011271
 800607c:	20000044 	.word	0x20000044

08006080 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006080:	6803      	ldr	r3, [r0, #0]
{
 8006082:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006084:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006086:	069b      	lsls	r3, r3, #26
 8006088:	d53f      	bpl.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x8a>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800608a:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 800608c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800608e:	4c60      	ldr	r4, [pc, #384]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006090:	055b      	lsls	r3, r3, #21
 8006092:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 8006094:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006096:	421a      	tst	r2, r3
 8006098:	d104      	bne.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800609a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800609c:	4313      	orrs	r3, r2
 800609e:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80060a0:	2301      	movs	r3, #1
 80060a2:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060a4:	2780      	movs	r7, #128	; 0x80
 80060a6:	4e5b      	ldr	r6, [pc, #364]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80060a8:	007f      	lsls	r7, r7, #1
 80060aa:	6833      	ldr	r3, [r6, #0]
 80060ac:	423b      	tst	r3, r7
 80060ae:	d06e      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80060b0:	686b      	ldr	r3, [r5, #4]
 80060b2:	22c0      	movs	r2, #192	; 0xc0
 80060b4:	20c0      	movs	r0, #192	; 0xc0
 80060b6:	001e      	movs	r6, r3
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80060b8:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80060ba:	0292      	lsls	r2, r2, #10
 80060bc:	0380      	lsls	r0, r0, #14
 80060be:	0017      	movs	r7, r2
 80060c0:	4016      	ands	r6, r2
 80060c2:	4003      	ands	r3, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80060c4:	4001      	ands	r1, r0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80060c6:	428b      	cmp	r3, r1
 80060c8:	d000      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x4c>
 80060ca:	e071      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80060cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80060ce:	001a      	movs	r2, r3
 80060d0:	403a      	ands	r2, r7

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80060d2:	423b      	tst	r3, r7
 80060d4:	d000      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80060d6:	e074      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x142>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060d8:	6869      	ldr	r1, [r5, #4]
 80060da:	23c0      	movs	r3, #192	; 0xc0
 80060dc:	000a      	movs	r2, r1
 80060de:	029b      	lsls	r3, r3, #10
 80060e0:	401a      	ands	r2, r3
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d107      	bne.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	484b      	ldr	r0, [pc, #300]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80060ea:	4003      	ands	r3, r0
 80060ec:	20c0      	movs	r0, #192	; 0xc0
 80060ee:	0380      	lsls	r0, r0, #14
 80060f0:	4001      	ands	r1, r0
 80060f2:	430b      	orrs	r3, r1
 80060f4:	6023      	str	r3, [r4, #0]
 80060f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80060f8:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80060fa:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060fc:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d103      	bne.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006102:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006104:	4a45      	ldr	r2, [pc, #276]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8006106:	4013      	ands	r3, r2
 8006108:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800610a:	682b      	ldr	r3, [r5, #0]
 800610c:	07da      	lsls	r2, r3, #31
 800610e:	d506      	bpl.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006110:	2003      	movs	r0, #3
 8006112:	493f      	ldr	r1, [pc, #252]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006114:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8006116:	4382      	bics	r2, r0
 8006118:	68a8      	ldr	r0, [r5, #8]
 800611a:	4302      	orrs	r2, r0
 800611c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800611e:	079a      	lsls	r2, r3, #30
 8006120:	d506      	bpl.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006122:	200c      	movs	r0, #12
 8006124:	493a      	ldr	r1, [pc, #232]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006126:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8006128:	4382      	bics	r2, r0
 800612a:	68e8      	ldr	r0, [r5, #12]
 800612c:	4302      	orrs	r2, r0
 800612e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006130:	075a      	lsls	r2, r3, #29
 8006132:	d506      	bpl.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006134:	4936      	ldr	r1, [pc, #216]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006136:	483a      	ldr	r0, [pc, #232]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8006138:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800613a:	4002      	ands	r2, r0
 800613c:	6928      	ldr	r0, [r5, #16]
 800613e:	4302      	orrs	r2, r0
 8006140:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006142:	071a      	lsls	r2, r3, #28
 8006144:	d506      	bpl.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006146:	4932      	ldr	r1, [pc, #200]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006148:	4836      	ldr	r0, [pc, #216]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800614a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800614c:	4002      	ands	r2, r0
 800614e:	6968      	ldr	r0, [r5, #20]
 8006150:	4302      	orrs	r2, r0
 8006152:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006154:	05da      	lsls	r2, r3, #23
 8006156:	d506      	bpl.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006158:	492d      	ldr	r1, [pc, #180]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800615a:	4833      	ldr	r0, [pc, #204]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800615c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800615e:	4002      	ands	r2, r0
 8006160:	69a8      	ldr	r0, [r5, #24]
 8006162:	4302      	orrs	r2, r0
 8006164:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006166:	065a      	lsls	r2, r3, #25
 8006168:	d506      	bpl.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800616a:	4929      	ldr	r1, [pc, #164]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800616c:	482f      	ldr	r0, [pc, #188]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800616e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8006170:	4002      	ands	r2, r0
 8006172:	6a28      	ldr	r0, [r5, #32]
 8006174:	4302      	orrs	r2, r0
 8006176:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8006178:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800617a:	061b      	lsls	r3, r3, #24
 800617c:	d517      	bpl.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x12e>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800617e:	4a24      	ldr	r2, [pc, #144]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006180:	492b      	ldr	r1, [pc, #172]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006182:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8006184:	400b      	ands	r3, r1
 8006186:	69e9      	ldr	r1, [r5, #28]
 8006188:	430b      	orrs	r3, r1
 800618a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800618c:	e00f      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x12e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800618e:	6833      	ldr	r3, [r6, #0]
 8006190:	433b      	orrs	r3, r7
 8006192:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006194:	f7fe f800 	bl	8004198 <HAL_GetTick>
 8006198:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800619a:	6833      	ldr	r3, [r6, #0]
 800619c:	423b      	tst	r3, r7
 800619e:	d187      	bne.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061a0:	f7fd fffa 	bl	8004198 <HAL_GetTick>
 80061a4:	9b01      	ldr	r3, [sp, #4]
 80061a6:	1ac0      	subs	r0, r0, r3
 80061a8:	2864      	cmp	r0, #100	; 0x64
 80061aa:	d9f6      	bls.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x11a>
          return HAL_TIMEOUT;
 80061ac:	2003      	movs	r0, #3
}
 80061ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80061b0:	4296      	cmp	r6, r2
 80061b2:	d000      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80061b4:	e78a      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x4c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80061b6:	6823      	ldr	r3, [r4, #0]
          return HAL_ERROR;
 80061b8:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80061ba:	039b      	lsls	r3, r3, #14
 80061bc:	d400      	bmi.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80061be:	e785      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x4c>
 80061c0:	e7f5      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x12e>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80061c2:	42b2      	cmp	r2, r6
 80061c4:	d100      	bne.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80061c6:	e787      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x58>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80061c8:	682b      	ldr	r3, [r5, #0]
 80061ca:	069b      	lsls	r3, r3, #26
 80061cc:	d400      	bmi.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80061ce:	e783      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_BACKUPRESET_FORCE();
 80061d0:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80061d2:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 80061d4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80061d6:	0312      	lsls	r2, r2, #12
 80061d8:	4302      	orrs	r2, r0
 80061da:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061dc:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80061de:	4b12      	ldr	r3, [pc, #72]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061e0:	4814      	ldr	r0, [pc, #80]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80061e2:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061e4:	4002      	ands	r2, r0
 80061e6:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 80061e8:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80061ea:	05cb      	lsls	r3, r1, #23
 80061ec:	d400      	bmi.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
 80061ee:	e773      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x58>
        tickstart = HAL_GetTick();
 80061f0:	f7fd ffd2 	bl	8004198 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061f4:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80061f6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061f8:	00bf      	lsls	r7, r7, #2
 80061fa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80061fc:	423b      	tst	r3, r7
 80061fe:	d000      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8006200:	e76a      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x58>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006202:	f7fd ffc9 	bl	8004198 <HAL_GetTick>
 8006206:	4b0c      	ldr	r3, [pc, #48]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006208:	1b80      	subs	r0, r0, r6
 800620a:	4298      	cmp	r0, r3
 800620c:	d9f5      	bls.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800620e:	e7cd      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8006210:	40021000 	.word	0x40021000
 8006214:	40007000 	.word	0x40007000
 8006218:	ffcfffff 	.word	0xffcfffff
 800621c:	efffffff 	.word	0xefffffff
 8006220:	fffff3ff 	.word	0xfffff3ff
 8006224:	ffffcfff 	.word	0xffffcfff
 8006228:	fffcffff 	.word	0xfffcffff
 800622c:	fbffffff 	.word	0xfbffffff
 8006230:	fff3ffff 	.word	0xfff3ffff
 8006234:	fff7ffff 	.word	0xfff7ffff
 8006238:	00001388 	.word	0x00001388

0800623c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800623c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800623e:	2502      	movs	r5, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006240:	1c46      	adds	r6, r0, #1
 8006242:	7ff3      	ldrb	r3, [r6, #31]
{
 8006244:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8006246:	0028      	movs	r0, r5
 8006248:	2b01      	cmp	r3, #1
 800624a:	d025      	beq.n	8006298 <HAL_RTC_DeactivateAlarm+0x5c>
 800624c:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800624e:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006250:	1967      	adds	r7, r4, r5
  __HAL_LOCK(hrtc);
 8006252:	77f3      	strb	r3, [r6, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006254:	77fd      	strb	r5, [r7, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	625a      	str	r2, [r3, #36]	; 0x24
 800625a:	3a77      	subs	r2, #119	; 0x77
 800625c:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800625e:	32ad      	adds	r2, #173	; 0xad
 8006260:	4291      	cmp	r1, r2
 8006262:	d12a      	bne.n	80062ba <HAL_RTC_DeactivateAlarm+0x7e>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006264:	689a      	ldr	r2, [r3, #8]
 8006266:	4922      	ldr	r1, [pc, #136]	; (80062f0 <HAL_RTC_DeactivateAlarm+0xb4>)
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);

    tickstart = HAL_GetTick();

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006268:	3d01      	subs	r5, #1
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800626a:	400a      	ands	r2, r1
 800626c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	4920      	ldr	r1, [pc, #128]	; (80062f4 <HAL_RTC_DeactivateAlarm+0xb8>)
 8006272:	400a      	ands	r2, r1
 8006274:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8006276:	f7fd ff8f 	bl	8004198 <HAL_GetTick>
 800627a:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800627c:	6823      	ldr	r3, [r4, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	001a      	movs	r2, r3
 8006282:	402a      	ands	r2, r5
 8006284:	9201      	str	r2, [sp, #4]
 8006286:	422b      	tst	r3, r5
 8006288:	d007      	beq.n	800629a <HAL_RTC_DeactivateAlarm+0x5e>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800628a:	22ff      	movs	r2, #255	; 0xff
 800628c:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800628e:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006290:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8006292:	2301      	movs	r3, #1
 8006294:	77fb      	strb	r3, [r7, #31]
  __HAL_UNLOCK(hrtc);
 8006296:	77f0      	strb	r0, [r6, #31]

  return HAL_OK;
}
 8006298:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800629a:	f7fd ff7d 	bl	8004198 <HAL_GetTick>
 800629e:	9b00      	ldr	r3, [sp, #0]
 80062a0:	1ac0      	subs	r0, r0, r3
 80062a2:	23fa      	movs	r3, #250	; 0xfa
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4298      	cmp	r0, r3
 80062a8:	d9e8      	bls.n	800627c <HAL_RTC_DeactivateAlarm+0x40>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062aa:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062ac:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062b2:	77f8      	strb	r0, [r7, #31]
        __HAL_UNLOCK(hrtc);
 80062b4:	9b01      	ldr	r3, [sp, #4]
 80062b6:	77f3      	strb	r3, [r6, #31]
        return HAL_TIMEOUT;
 80062b8:	e7ee      	b.n	8006298 <HAL_RTC_DeactivateAlarm+0x5c>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80062ba:	689a      	ldr	r2, [r3, #8]
 80062bc:	490e      	ldr	r1, [pc, #56]	; (80062f8 <HAL_RTC_DeactivateAlarm+0xbc>)
 80062be:	400a      	ands	r2, r1
 80062c0:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	490d      	ldr	r1, [pc, #52]	; (80062fc <HAL_RTC_DeactivateAlarm+0xc0>)
 80062c6:	400a      	ands	r2, r1
 80062c8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80062ca:	f7fd ff65 	bl	8004198 <HAL_GetTick>
 80062ce:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	001a      	movs	r2, r3
 80062d6:	402a      	ands	r2, r5
 80062d8:	9201      	str	r2, [sp, #4]
 80062da:	422b      	tst	r3, r5
 80062dc:	d1d5      	bne.n	800628a <HAL_RTC_DeactivateAlarm+0x4e>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80062de:	f7fd ff5b 	bl	8004198 <HAL_GetTick>
 80062e2:	9b00      	ldr	r3, [sp, #0]
 80062e4:	1ac0      	subs	r0, r0, r3
 80062e6:	23fa      	movs	r3, #250	; 0xfa
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4298      	cmp	r0, r3
 80062ec:	d9f0      	bls.n	80062d0 <HAL_RTC_DeactivateAlarm+0x94>
 80062ee:	e7dc      	b.n	80062aa <HAL_RTC_DeactivateAlarm+0x6e>
 80062f0:	fffffeff 	.word	0xfffffeff
 80062f4:	ffffefff 	.word	0xffffefff
 80062f8:	fffffdff 	.word	0xfffffdff
 80062fc:	ffffdfff 	.word	0xffffdfff

08006300 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006300:	6803      	ldr	r3, [r0, #0]
{
 8006302:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006304:	689a      	ldr	r2, [r3, #8]
{
 8006306:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006308:	04d2      	lsls	r2, r2, #19
 800630a:	d50a      	bpl.n	8006322 <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	05db      	lsls	r3, r3, #23
 8006310:	d507      	bpl.n	8006322 <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006312:	f7fd fd9c 	bl	8003e4e <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006316:	6821      	ldr	r1, [r4, #0]
 8006318:	4b0e      	ldr	r3, [pc, #56]	; (8006354 <HAL_RTC_AlarmIRQHandler+0x54>)
 800631a:	68ca      	ldr	r2, [r1, #12]
 800631c:	b2d2      	uxtb	r2, r2
 800631e:	4313      	orrs	r3, r2
 8006320:	60cb      	str	r3, [r1, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006322:	6823      	ldr	r3, [r4, #0]
 8006324:	689a      	ldr	r2, [r3, #8]
 8006326:	0492      	lsls	r2, r2, #18
 8006328:	d50b      	bpl.n	8006342 <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	059b      	lsls	r3, r3, #22
 800632e:	d508      	bpl.n	8006342 <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006330:	0020      	movs	r0, r4
 8006332:	f000 faf7 	bl	8006924 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006336:	6821      	ldr	r1, [r4, #0]
 8006338:	4b07      	ldr	r3, [pc, #28]	; (8006358 <HAL_RTC_AlarmIRQHandler+0x58>)
 800633a:	68ca      	ldr	r2, [r1, #12]
 800633c:	b2d2      	uxtb	r2, r2
 800633e:	4313      	orrs	r3, r2
 8006340:	60cb      	str	r3, [r1, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006342:	2280      	movs	r2, #128	; 0x80
 8006344:	4b05      	ldr	r3, [pc, #20]	; (800635c <HAL_RTC_AlarmIRQHandler+0x5c>)
 8006346:	0292      	lsls	r2, r2, #10
 8006348:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800634a:	2301      	movs	r3, #1
 800634c:	3402      	adds	r4, #2
 800634e:	77e3      	strb	r3, [r4, #31]
}
 8006350:	bd10      	pop	{r4, pc}
 8006352:	46c0      	nop			; (mov r8, r8)
 8006354:	fffffe7f 	.word	0xfffffe7f
 8006358:	fffffd7f 	.word	0xfffffd7f
 800635c:	40010400 	.word	0x40010400

08006360 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006360:	21a0      	movs	r1, #160	; 0xa0
 8006362:	6802      	ldr	r2, [r0, #0]
{
 8006364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006366:	68d3      	ldr	r3, [r2, #12]
{
 8006368:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800636a:	438b      	bics	r3, r1
 800636c:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800636e:	f7fd ff13 	bl	8004198 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006372:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8006374:	0005      	movs	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006376:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006378:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800637a:	6823      	ldr	r3, [r4, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	4233      	tst	r3, r6
 8006380:	d001      	beq.n	8006386 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8006382:	2000      	movs	r0, #0
}
 8006384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006386:	f7fd ff07 	bl	8004198 <HAL_GetTick>
 800638a:	1b40      	subs	r0, r0, r5
 800638c:	42b8      	cmp	r0, r7
 800638e:	d9f4      	bls.n	800637a <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8006390:	2003      	movs	r0, #3
 8006392:	e7f7      	b.n	8006384 <HAL_RTC_WaitForSynchro+0x24>

08006394 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006396:	2440      	movs	r4, #64	; 0x40
 8006398:	6803      	ldr	r3, [r0, #0]
{
 800639a:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800639c:	68da      	ldr	r2, [r3, #12]
 800639e:	4222      	tst	r2, r4
 80063a0:	d001      	beq.n	80063a6 <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80063a2:	2000      	movs	r0, #0
}
 80063a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80063a6:	2201      	movs	r2, #1
 80063a8:	4252      	negs	r2, r2
 80063aa:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80063ac:	f7fd fef4 	bl	8004198 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80063b0:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 80063b2:	0006      	movs	r6, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80063b4:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80063b6:	682b      	ldr	r3, [r5, #0]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	4223      	tst	r3, r4
 80063bc:	d1f1      	bne.n	80063a2 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80063be:	f7fd feeb 	bl	8004198 <HAL_GetTick>
 80063c2:	1b80      	subs	r0, r0, r6
 80063c4:	42b8      	cmp	r0, r7
 80063c6:	d9f6      	bls.n	80063b6 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 80063c8:	2003      	movs	r0, #3
 80063ca:	e7eb      	b.n	80063a4 <RTC_EnterInitMode+0x10>

080063cc <HAL_RTC_Init>:
{
 80063cc:	b570      	push	{r4, r5, r6, lr}
 80063ce:	0004      	movs	r4, r0
    return HAL_ERROR;
 80063d0:	2501      	movs	r5, #1
  if (hrtc == NULL)
 80063d2:	2800      	cmp	r0, #0
 80063d4:	d01a      	beq.n	800640c <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80063d6:	1c86      	adds	r6, r0, #2
 80063d8:	7ff3      	ldrb	r3, [r6, #31]
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d103      	bne.n	80063e8 <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 80063e0:	1943      	adds	r3, r0, r5
 80063e2:	77da      	strb	r2, [r3, #31]
    HAL_RTC_MspInit(hrtc);
 80063e4:	f7fd fb42 	bl	8003a6c <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80063e8:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063ea:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 80063ec:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063ee:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80063f0:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063f2:	625a      	str	r2, [r3, #36]	; 0x24
 80063f4:	3a77      	subs	r2, #119	; 0x77
 80063f6:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80063f8:	f7ff ffcc 	bl	8006394 <RTC_EnterInitMode>
 80063fc:	6823      	ldr	r3, [r4, #0]
 80063fe:	1e05      	subs	r5, r0, #0
 8006400:	d006      	beq.n	8006410 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006402:	22ff      	movs	r2, #255	; 0xff
 8006404:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006406:	2304      	movs	r3, #4
 8006408:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 800640a:	2501      	movs	r5, #1
}
 800640c:	0028      	movs	r0, r5
 800640e:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006410:	689a      	ldr	r2, [r3, #8]
 8006412:	491b      	ldr	r1, [pc, #108]	; (8006480 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006414:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006416:	400a      	ands	r2, r1
 8006418:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800641a:	6862      	ldr	r2, [r4, #4]
 800641c:	6899      	ldr	r1, [r3, #8]
 800641e:	4302      	orrs	r2, r0
 8006420:	69a0      	ldr	r0, [r4, #24]
 8006422:	4302      	orrs	r2, r0
 8006424:	430a      	orrs	r2, r1
 8006426:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006428:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800642a:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800642c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800642e:	68a2      	ldr	r2, [r4, #8]
 8006430:	6919      	ldr	r1, [r3, #16]
 8006432:	0412      	lsls	r2, r2, #16
 8006434:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006436:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006438:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800643a:	68da      	ldr	r2, [r3, #12]
 800643c:	438a      	bics	r2, r1
 800643e:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006440:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006442:	397d      	subs	r1, #125	; 0x7d
 8006444:	438a      	bics	r2, r1
 8006446:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006448:	69e2      	ldr	r2, [r4, #28]
 800644a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800644c:	4302      	orrs	r2, r0
 800644e:	430a      	orrs	r2, r1
 8006450:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	069b      	lsls	r3, r3, #26
 8006456:	d40c      	bmi.n	8006472 <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006458:	0020      	movs	r0, r4
 800645a:	f7ff ff81 	bl	8006360 <HAL_RTC_WaitForSynchro>
 800645e:	2800      	cmp	r0, #0
 8006460:	d007      	beq.n	8006472 <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006462:	22ff      	movs	r2, #255	; 0xff
 8006464:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 8006466:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006468:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800646a:	2304      	movs	r3, #4
 800646c:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 800646e:	77e5      	strb	r5, [r4, #31]
 8006470:	e7cb      	b.n	800640a <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006472:	22ff      	movs	r2, #255	; 0xff
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8006478:	2301      	movs	r3, #1
 800647a:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 800647c:	e7c6      	b.n	800640c <HAL_RTC_Init+0x40>
 800647e:	46c0      	nop			; (mov r8, r8)
 8006480:	ff8fffbf 	.word	0xff8fffbf

08006484 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8006484:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8006486:	2809      	cmp	r0, #9
 8006488:	d803      	bhi.n	8006492 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800648a:	011b      	lsls	r3, r3, #4
 800648c:	4318      	orrs	r0, r3
 800648e:	b2c0      	uxtb	r0, r0
}
 8006490:	4770      	bx	lr
    Param -= 10U;
 8006492:	380a      	subs	r0, #10
    bcdhigh++;
 8006494:	3301      	adds	r3, #1
    Param -= 10U;
 8006496:	b2c0      	uxtb	r0, r0
 8006498:	e7f5      	b.n	8006486 <RTC_ByteToBcd2+0x2>
	...

0800649c <HAL_RTC_SetTime>:
{
 800649c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800649e:	1c43      	adds	r3, r0, #1
{
 80064a0:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 80064a2:	9302      	str	r3, [sp, #8]
{
 80064a4:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 80064a6:	7fd9      	ldrb	r1, [r3, #31]
 80064a8:	2302      	movs	r3, #2
{
 80064aa:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 80064ac:	001f      	movs	r7, r3
 80064ae:	2901      	cmp	r1, #1
 80064b0:	d038      	beq.n	8006524 <HAL_RTC_SetTime+0x88>
 80064b2:	2101      	movs	r1, #1
 80064b4:	1840      	adds	r0, r0, r1
 80064b6:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80064b8:	18e9      	adds	r1, r5, r3
 80064ba:	77cb      	strb	r3, [r1, #31]
  if (Format == RTC_FORMAT_BIN)
 80064bc:	682b      	ldr	r3, [r5, #0]
 80064be:	7820      	ldrb	r0, [r4, #0]
 80064c0:	9301      	str	r3, [sp, #4]
 80064c2:	7866      	ldrb	r6, [r4, #1]
 80064c4:	2340      	movs	r3, #64	; 0x40
  hrtc->State = HAL_RTC_STATE_BUSY;
 80064c6:	9103      	str	r1, [sp, #12]
  if (Format == RTC_FORMAT_BIN)
 80064c8:	2a00      	cmp	r2, #0
 80064ca:	d12e      	bne.n	800652a <HAL_RTC_SetTime+0x8e>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80064cc:	9a01      	ldr	r2, [sp, #4]
 80064ce:	6892      	ldr	r2, [r2, #8]
 80064d0:	0011      	movs	r1, r2
 80064d2:	4019      	ands	r1, r3
 80064d4:	421a      	tst	r2, r3
 80064d6:	d100      	bne.n	80064da <HAL_RTC_SetTime+0x3e>
      sTime->TimeFormat = 0x00U;
 80064d8:	70e1      	strb	r1, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80064da:	f7ff ffd3 	bl	8006484 <RTC_ByteToBcd2>
 80064de:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80064e0:	0030      	movs	r0, r6
 80064e2:	f7ff ffcf 	bl	8006484 <RTC_ByteToBcd2>
 80064e6:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80064e8:	78a0      	ldrb	r0, [r4, #2]
 80064ea:	f7ff ffcb 	bl	8006484 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80064ee:	78e3      	ldrb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80064f0:	043f      	lsls	r7, r7, #16
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80064f2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80064f4:	4303      	orrs	r3, r0
 80064f6:	431f      	orrs	r7, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80064f8:	0236      	lsls	r6, r6, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064fa:	23ca      	movs	r3, #202	; 0xca
 80064fc:	9a01      	ldr	r2, [sp, #4]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80064fe:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006500:	6253      	str	r3, [r2, #36]	; 0x24
 8006502:	3b77      	subs	r3, #119	; 0x77
 8006504:	6253      	str	r3, [r2, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006506:	f7ff ff45 	bl	8006394 <RTC_EnterInitMode>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800650a:	433e      	orrs	r6, r7
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800650c:	682b      	ldr	r3, [r5, #0]
 800650e:	1e07      	subs	r7, r0, #0
 8006510:	d01a      	beq.n	8006548 <HAL_RTC_SetTime+0xac>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006512:	22ff      	movs	r2, #255	; 0xff
 8006514:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006516:	2304      	movs	r3, #4
 8006518:	9a03      	ldr	r2, [sp, #12]
 800651a:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 800651c:	2300      	movs	r3, #0
 800651e:	9a02      	ldr	r2, [sp, #8]
 8006520:	77d3      	strb	r3, [r2, #31]
        return HAL_ERROR;
 8006522:	2701      	movs	r7, #1
}
 8006524:	0038      	movs	r0, r7
 8006526:	b005      	add	sp, #20
 8006528:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800652a:	9a01      	ldr	r2, [sp, #4]
 800652c:	6892      	ldr	r2, [r2, #8]
 800652e:	0011      	movs	r1, r2
 8006530:	4019      	ands	r1, r3
 8006532:	421a      	tst	r2, r3
 8006534:	d100      	bne.n	8006538 <HAL_RTC_SetTime+0x9c>
      sTime->TimeFormat = 0x00U;
 8006536:	70e1      	strb	r1, [r4, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006538:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800653a:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800653c:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800653e:	78e7      	ldrb	r7, [r4, #3]
              ((uint32_t)sTime->Seconds) | \
 8006540:	78a0      	ldrb	r0, [r4, #2]
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006542:	043f      	lsls	r7, r7, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006544:	4306      	orrs	r6, r0
 8006546:	e7d8      	b.n	80064fa <HAL_RTC_SetTime+0x5e>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006548:	4815      	ldr	r0, [pc, #84]	; (80065a0 <HAL_RTC_SetTime+0x104>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800654a:	4916      	ldr	r1, [pc, #88]	; (80065a4 <HAL_RTC_SetTime+0x108>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800654c:	4006      	ands	r6, r0
 800654e:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006550:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006552:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006554:	400a      	ands	r2, r1
 8006556:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006558:	68e2      	ldr	r2, [r4, #12]
 800655a:	6899      	ldr	r1, [r3, #8]
 800655c:	4302      	orrs	r2, r0
 800655e:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006560:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006562:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006564:	68da      	ldr	r2, [r3, #12]
 8006566:	438a      	bics	r2, r1
 8006568:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	069b      	lsls	r3, r3, #26
 800656e:	d40d      	bmi.n	800658c <HAL_RTC_SetTime+0xf0>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006570:	0028      	movs	r0, r5
 8006572:	f7ff fef5 	bl	8006360 <HAL_RTC_WaitForSynchro>
 8006576:	2800      	cmp	r0, #0
 8006578:	d008      	beq.n	800658c <HAL_RTC_SetTime+0xf0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800657a:	22ff      	movs	r2, #255	; 0xff
 800657c:	682b      	ldr	r3, [r5, #0]
 800657e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006580:	2304      	movs	r3, #4
 8006582:	9a03      	ldr	r2, [sp, #12]
 8006584:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8006586:	9b02      	ldr	r3, [sp, #8]
 8006588:	77df      	strb	r7, [r3, #31]
 800658a:	e7ca      	b.n	8006522 <HAL_RTC_SetTime+0x86>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800658c:	22ff      	movs	r2, #255	; 0xff
 800658e:	682b      	ldr	r3, [r5, #0]
 8006590:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8006592:	2301      	movs	r3, #1
 8006594:	9a03      	ldr	r2, [sp, #12]
 8006596:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8006598:	2300      	movs	r3, #0
 800659a:	9a02      	ldr	r2, [sp, #8]
 800659c:	77d3      	strb	r3, [r2, #31]
    return HAL_OK;
 800659e:	e7c1      	b.n	8006524 <HAL_RTC_SetTime+0x88>
 80065a0:	007f7f7f 	.word	0x007f7f7f
 80065a4:	fffbffff 	.word	0xfffbffff

080065a8 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 80065a8:	2302      	movs	r3, #2
{
 80065aa:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80065ac:	1c47      	adds	r7, r0, #1
{
 80065ae:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80065b0:	7ff9      	ldrb	r1, [r7, #31]
{
 80065b2:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 80065b4:	001d      	movs	r5, r3
{
 80065b6:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 80065b8:	2901      	cmp	r1, #1
 80065ba:	d036      	beq.n	800662a <HAL_RTC_SetDate+0x82>
 80065bc:	2101      	movs	r1, #1
 80065be:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80065c0:	18c1      	adds	r1, r0, r3
 80065c2:	77cb      	strb	r3, [r1, #31]
 80065c4:	9101      	str	r1, [sp, #4]
 80065c6:	7831      	ldrb	r1, [r6, #0]
 80065c8:	78f0      	ldrb	r0, [r6, #3]
 80065ca:	0349      	lsls	r1, r1, #13
 80065cc:	7873      	ldrb	r3, [r6, #1]
 80065ce:	78b5      	ldrb	r5, [r6, #2]
 80065d0:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80065d2:	2a00      	cmp	r2, #0
 80065d4:	d14c      	bne.n	8006670 <HAL_RTC_SetDate+0xc8>
 80065d6:	3210      	adds	r2, #16
 80065d8:	4213      	tst	r3, r2
 80065da:	d002      	beq.n	80065e2 <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80065dc:	4393      	bics	r3, r2
 80065de:	330a      	adds	r3, #10
 80065e0:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80065e2:	f7ff ff4f 	bl	8006484 <RTC_ByteToBcd2>
 80065e6:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80065e8:	7870      	ldrb	r0, [r6, #1]
 80065ea:	f7ff ff4b 	bl	8006484 <RTC_ByteToBcd2>
 80065ee:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80065f0:	0028      	movs	r0, r5
 80065f2:	f7ff ff47 	bl	8006484 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80065f6:	9b03      	ldr	r3, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80065f8:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80065fa:	041d      	lsls	r5, r3, #16
 80065fc:	9b02      	ldr	r3, [sp, #8]
 80065fe:	4318      	orrs	r0, r3
 8006600:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006602:	22ca      	movs	r2, #202	; 0xca
 8006604:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006606:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006608:	625a      	str	r2, [r3, #36]	; 0x24
 800660a:	3a77      	subs	r2, #119	; 0x77
 800660c:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800660e:	f7ff fec1 	bl	8006394 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006612:	432e      	orrs	r6, r5
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	1e05      	subs	r5, r0, #0
 8006618:	d00a      	beq.n	8006630 <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800661a:	22ff      	movs	r2, #255	; 0xff
 800661c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800661e:	2304      	movs	r3, #4
 8006620:	9a01      	ldr	r2, [sp, #4]
 8006622:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8006624:	2300      	movs	r3, #0
 8006626:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8006628:	2501      	movs	r5, #1
}
 800662a:	0028      	movs	r0, r5
 800662c:	b005      	add	sp, #20
 800662e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006630:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006632:	4812      	ldr	r0, [pc, #72]	; (800667c <HAL_RTC_SetDate+0xd4>)
 8006634:	4006      	ands	r6, r0
 8006636:	605e      	str	r6, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	438a      	bics	r2, r1
 800663c:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	069b      	lsls	r3, r3, #26
 8006642:	d40c      	bmi.n	800665e <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006644:	0020      	movs	r0, r4
 8006646:	f7ff fe8b 	bl	8006360 <HAL_RTC_WaitForSynchro>
 800664a:	2800      	cmp	r0, #0
 800664c:	d007      	beq.n	800665e <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800664e:	22ff      	movs	r2, #255	; 0xff
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006654:	2304      	movs	r3, #4
 8006656:	9a01      	ldr	r2, [sp, #4]
 8006658:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 800665a:	77fd      	strb	r5, [r7, #31]
 800665c:	e7e4      	b.n	8006628 <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800665e:	22ff      	movs	r2, #255	; 0xff
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8006664:	2301      	movs	r3, #1
 8006666:	9a01      	ldr	r2, [sp, #4]
 8006668:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 800666a:	2300      	movs	r3, #0
 800666c:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 800666e:	e7dc      	b.n	800662a <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006670:	9a02      	ldr	r2, [sp, #8]
 8006672:	0400      	lsls	r0, r0, #16
 8006674:	4310      	orrs	r0, r2
 8006676:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 8006678:	021e      	lsls	r6, r3, #8
 800667a:	e7c2      	b.n	8006602 <HAL_RTC_SetDate+0x5a>
 800667c:	00ffff3f 	.word	0x00ffff3f

08006680 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8006680:	2302      	movs	r3, #2
{
 8006682:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006684:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8006686:	1c41      	adds	r1, r0, #1
 8006688:	7fce      	ldrb	r6, [r1, #31]
{
 800668a:	0004      	movs	r4, r0
 800668c:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 800668e:	0018      	movs	r0, r3
 8006690:	2e01      	cmp	r6, #1
 8006692:	d100      	bne.n	8006696 <HAL_RTC_SetAlarm_IT+0x16>
 8006694:	e095      	b.n	80067c2 <HAL_RTC_SetAlarm_IT+0x142>
 8006696:	3801      	subs	r0, #1
 8006698:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800669a:	18e1      	adds	r1, r4, r3
 800669c:	77cb      	strb	r3, [r1, #31]
  if (Format == RTC_FORMAT_BIN)
 800669e:	7869      	ldrb	r1, [r5, #1]
 80066a0:	6826      	ldr	r6, [r4, #0]
 80066a2:	9101      	str	r1, [sp, #4]
 80066a4:	7828      	ldrb	r0, [r5, #0]
 80066a6:	78af      	ldrb	r7, [r5, #2]
 80066a8:	333e      	adds	r3, #62	; 0x3e
 80066aa:	2a00      	cmp	r2, #0
 80066ac:	d165      	bne.n	800677a <HAL_RTC_SetAlarm_IT+0xfa>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80066ae:	68b2      	ldr	r2, [r6, #8]
 80066b0:	0011      	movs	r1, r2
 80066b2:	4019      	ands	r1, r3
 80066b4:	421a      	tst	r2, r3
 80066b6:	d100      	bne.n	80066ba <HAL_RTC_SetAlarm_IT+0x3a>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80066b8:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80066ba:	f7ff fee3 	bl	8006484 <RTC_ByteToBcd2>
 80066be:	9002      	str	r0, [sp, #8]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80066c0:	9801      	ldr	r0, [sp, #4]
 80066c2:	f7ff fedf 	bl	8006484 <RTC_ByteToBcd2>
 80066c6:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80066c8:	0038      	movs	r0, r7
 80066ca:	f7ff fedb 	bl	8006484 <RTC_ByteToBcd2>
 80066ce:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80066d0:	1c6b      	adds	r3, r5, #1
 80066d2:	7fd8      	ldrb	r0, [r3, #31]
 80066d4:	f7ff fed6 	bl	8006484 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80066d8:	696a      	ldr	r2, [r5, #20]
 80066da:	69eb      	ldr	r3, [r5, #28]
 80066dc:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80066de:	78ea      	ldrb	r2, [r5, #3]
 80066e0:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80066e2:	4313      	orrs	r3, r2
 80066e4:	431f      	orrs	r7, r3
 80066e6:	9b02      	ldr	r3, [sp, #8]
 80066e8:	041b      	lsls	r3, r3, #16
 80066ea:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80066ec:	9b01      	ldr	r3, [sp, #4]
 80066ee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80066f0:	431f      	orrs	r7, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80066f2:	69aa      	ldr	r2, [r5, #24]
 80066f4:	686b      	ldr	r3, [r5, #4]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80066f6:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80066f8:	4313      	orrs	r3, r2
 80066fa:	9301      	str	r3, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066fc:	23ca      	movs	r3, #202	; 0xca
  if (sAlarm->Alarm == RTC_ALARM_A)
 80066fe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006700:	6273      	str	r3, [r6, #36]	; 0x24
 8006702:	3b77      	subs	r3, #119	; 0x77
 8006704:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006706:	33ad      	adds	r3, #173	; 0xad
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006708:	4307      	orrs	r7, r0
  if (sAlarm->Alarm == RTC_ALARM_A)
 800670a:	429a      	cmp	r2, r3
 800670c:	d15b      	bne.n	80067c6 <HAL_RTC_SetAlarm_IT+0x146>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800670e:	68b3      	ldr	r3, [r6, #8]
 8006710:	4a41      	ldr	r2, [pc, #260]	; (8006818 <HAL_RTC_SetAlarm_IT+0x198>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006712:	2501      	movs	r5, #1
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006714:	4013      	ands	r3, r2
 8006716:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006718:	68f2      	ldr	r2, [r6, #12]
 800671a:	4b40      	ldr	r3, [pc, #256]	; (800681c <HAL_RTC_SetAlarm_IT+0x19c>)
 800671c:	b2d2      	uxtb	r2, r2
 800671e:	4313      	orrs	r3, r2
 8006720:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8006722:	f7fd fd39 	bl	8004198 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006726:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8006728:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800672a:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	0011      	movs	r1, r2
 8006732:	4029      	ands	r1, r5
 8006734:	9103      	str	r1, [sp, #12]
 8006736:	422a      	tst	r2, r5
 8006738:	d034      	beq.n	80067a4 <HAL_RTC_SetAlarm_IT+0x124>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800673a:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800673c:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800673e:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006740:	2280      	movs	r2, #128	; 0x80
 8006742:	6899      	ldr	r1, [r3, #8]
 8006744:	0052      	lsls	r2, r2, #1
 8006746:	430a      	orrs	r2, r1
 8006748:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800674a:	2280      	movs	r2, #128	; 0x80
 800674c:	6899      	ldr	r1, [r3, #8]
 800674e:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006750:	430a      	orrs	r2, r1
 8006752:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006754:	2280      	movs	r2, #128	; 0x80
 8006756:	4b32      	ldr	r3, [pc, #200]	; (8006820 <HAL_RTC_SetAlarm_IT+0x1a0>)
 8006758:	0292      	lsls	r2, r2, #10
 800675a:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 800675c:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800675e:	4311      	orrs	r1, r2
 8006760:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006762:	6899      	ldr	r1, [r3, #8]
 8006764:	430a      	orrs	r2, r1
 8006766:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006768:	22ff      	movs	r2, #255	; 0xff
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800676e:	3afe      	subs	r2, #254	; 0xfe
 8006770:	1ca3      	adds	r3, r4, #2
  __HAL_UNLOCK(hrtc);
 8006772:	18a4      	adds	r4, r4, r2
  hrtc->State = HAL_RTC_STATE_READY;
 8006774:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 8006776:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 8006778:	e023      	b.n	80067c2 <HAL_RTC_SetAlarm_IT+0x142>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800677a:	68b2      	ldr	r2, [r6, #8]
 800677c:	0011      	movs	r1, r2
 800677e:	4019      	ands	r1, r3
 8006780:	421a      	tst	r2, r3
 8006782:	d100      	bne.n	8006786 <HAL_RTC_SetAlarm_IT+0x106>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006784:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006786:	69eb      	ldr	r3, [r5, #28]
 8006788:	696a      	ldr	r2, [r5, #20]
 800678a:	0400      	lsls	r0, r0, #16
 800678c:	4313      	orrs	r3, r2
 800678e:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006790:	9b01      	ldr	r3, [sp, #4]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006792:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006794:	0218      	lsls	r0, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006796:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006798:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800679a:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800679c:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800679e:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80067a0:	7fd8      	ldrb	r0, [r3, #31]
 80067a2:	e7a6      	b.n	80066f2 <HAL_RTC_SetAlarm_IT+0x72>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067a4:	f7fd fcf8 	bl	8004198 <HAL_GetTick>
 80067a8:	9b02      	ldr	r3, [sp, #8]
 80067aa:	1ac0      	subs	r0, r0, r3
 80067ac:	42b0      	cmp	r0, r6
 80067ae:	d9bd      	bls.n	800672c <HAL_RTC_SetAlarm_IT+0xac>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067b0:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80067b2:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80067b8:	1ca3      	adds	r3, r4, #2
 80067ba:	77d8      	strb	r0, [r3, #31]
        __HAL_UNLOCK(hrtc);
 80067bc:	9b03      	ldr	r3, [sp, #12]
 80067be:	3401      	adds	r4, #1
 80067c0:	77e3      	strb	r3, [r4, #31]
}
 80067c2:	b005      	add	sp, #20
 80067c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80067c6:	68b3      	ldr	r3, [r6, #8]
 80067c8:	4a16      	ldr	r2, [pc, #88]	; (8006824 <HAL_RTC_SetAlarm_IT+0x1a4>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80067ca:	2502      	movs	r5, #2
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80067cc:	4013      	ands	r3, r2
 80067ce:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80067d0:	68f2      	ldr	r2, [r6, #12]
 80067d2:	4b15      	ldr	r3, [pc, #84]	; (8006828 <HAL_RTC_SetAlarm_IT+0x1a8>)
 80067d4:	b2d2      	uxtb	r2, r2
 80067d6:	4313      	orrs	r3, r2
 80067d8:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 80067da:	f7fd fcdd 	bl	8004198 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067de:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 80067e0:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067e2:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80067e4:	6823      	ldr	r3, [r4, #0]
 80067e6:	68da      	ldr	r2, [r3, #12]
 80067e8:	0011      	movs	r1, r2
 80067ea:	4029      	ands	r1, r5
 80067ec:	9103      	str	r1, [sp, #12]
 80067ee:	422a      	tst	r2, r5
 80067f0:	d00b      	beq.n	800680a <HAL_RTC_SetAlarm_IT+0x18a>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80067f2:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80067f4:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80067f6:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80067f8:	2280      	movs	r2, #128	; 0x80
 80067fa:	6899      	ldr	r1, [r3, #8]
 80067fc:	0092      	lsls	r2, r2, #2
 80067fe:	430a      	orrs	r2, r1
 8006800:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006802:	2280      	movs	r2, #128	; 0x80
 8006804:	6899      	ldr	r1, [r3, #8]
 8006806:	0192      	lsls	r2, r2, #6
 8006808:	e7a2      	b.n	8006750 <HAL_RTC_SetAlarm_IT+0xd0>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800680a:	f7fd fcc5 	bl	8004198 <HAL_GetTick>
 800680e:	9b02      	ldr	r3, [sp, #8]
 8006810:	1ac0      	subs	r0, r0, r3
 8006812:	42b0      	cmp	r0, r6
 8006814:	d9e6      	bls.n	80067e4 <HAL_RTC_SetAlarm_IT+0x164>
 8006816:	e7cb      	b.n	80067b0 <HAL_RTC_SetAlarm_IT+0x130>
 8006818:	fffffeff 	.word	0xfffffeff
 800681c:	fffffe7f 	.word	0xfffffe7f
 8006820:	40010400 	.word	0x40010400
 8006824:	fffffdff 	.word	0xfffffdff
 8006828:	fffffd7f 	.word	0xfffffd7f

0800682c <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800682c:	0902      	lsrs	r2, r0, #4
{
 800682e:	0003      	movs	r3, r0
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006830:	200a      	movs	r0, #10
 8006832:	4350      	muls	r0, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006834:	220f      	movs	r2, #15
 8006836:	4013      	ands	r3, r2
 8006838:	18c0      	adds	r0, r0, r3
 800683a:	b2c0      	uxtb	r0, r0
}
 800683c:	4770      	bx	lr
	...

08006840 <HAL_RTC_GetTime>:
{
 8006840:	b570      	push	{r4, r5, r6, lr}
 8006842:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006844:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006846:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006848:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800684a:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800684c:	690b      	ldr	r3, [r1, #16]
 800684e:	045b      	lsls	r3, r3, #17
 8006850:	0c5b      	lsrs	r3, r3, #17
 8006852:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006854:	680b      	ldr	r3, [r1, #0]
 8006856:	490e      	ldr	r1, [pc, #56]	; (8006890 <HAL_RTC_GetTime+0x50>)
 8006858:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800685a:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800685c:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800685e:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006860:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006862:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006864:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006866:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006868:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800686a:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800686c:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800686e:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 8006870:	2a00      	cmp	r2, #0
 8006872:	d10a      	bne.n	800688a <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006874:	f7ff ffda 	bl	800682c <RTC_Bcd2ToByte>
 8006878:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800687a:	0030      	movs	r0, r6
 800687c:	f7ff ffd6 	bl	800682c <RTC_Bcd2ToByte>
 8006880:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006882:	0028      	movs	r0, r5
 8006884:	f7ff ffd2 	bl	800682c <RTC_Bcd2ToByte>
 8006888:	70a0      	strb	r0, [r4, #2]
}
 800688a:	2000      	movs	r0, #0
 800688c:	bd70      	pop	{r4, r5, r6, pc}
 800688e:	46c0      	nop			; (mov r8, r8)
 8006890:	007f7f7f 	.word	0x007f7f7f

08006894 <HAL_RTC_GetDate>:
{
 8006894:	b570      	push	{r4, r5, r6, lr}
 8006896:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006898:	6803      	ldr	r3, [r0, #0]
 800689a:	490e      	ldr	r1, [pc, #56]	; (80068d4 <HAL_RTC_GetDate+0x40>)
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80068a0:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80068a2:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80068a4:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80068a6:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80068a8:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80068aa:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80068ac:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80068ae:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80068b0:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80068b2:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 80068b4:	2a00      	cmp	r2, #0
 80068b6:	d10a      	bne.n	80068ce <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80068b8:	f7ff ffb8 	bl	800682c <RTC_Bcd2ToByte>
 80068bc:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80068be:	0028      	movs	r0, r5
 80068c0:	f7ff ffb4 	bl	800682c <RTC_Bcd2ToByte>
 80068c4:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80068c6:	0030      	movs	r0, r6
 80068c8:	f7ff ffb0 	bl	800682c <RTC_Bcd2ToByte>
 80068cc:	70a0      	strb	r0, [r4, #2]
}
 80068ce:	2000      	movs	r0, #0
 80068d0:	bd70      	pop	{r4, r5, r6, pc}
 80068d2:	46c0      	nop			; (mov r8, r8)
 80068d4:	00ffff3f 	.word	0x00ffff3f

080068d8 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80068d8:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 80068da:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80068dc:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 80068de:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80068e0:	600a      	str	r2, [r1, #0]
}
 80068e2:	4770      	bx	lr

080068e4 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80068e4:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 80068e6:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80068e8:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 80068ea:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80068ec:	6808      	ldr	r0, [r1, #0]
}
 80068ee:	4770      	bx	lr

080068f0 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80068f0:	2202      	movs	r2, #2
{
 80068f2:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 80068f4:	1c41      	adds	r1, r0, #1
 80068f6:	7fcc      	ldrb	r4, [r1, #31]
{
 80068f8:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 80068fa:	0010      	movs	r0, r2
 80068fc:	2c01      	cmp	r4, #1
 80068fe:	d010      	beq.n	8006922 <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006900:	1898      	adds	r0, r3, r2
 8006902:	77c2      	strb	r2, [r0, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	32c8      	adds	r2, #200	; 0xc8
 8006908:	625a      	str	r2, [r3, #36]	; 0x24
 800690a:	3a77      	subs	r2, #119	; 0x77
 800690c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800690e:	689c      	ldr	r4, [r3, #8]
 8006910:	3a33      	subs	r2, #51	; 0x33
 8006912:	4322      	orrs	r2, r4
 8006914:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006916:	22ff      	movs	r2, #255	; 0xff
 8006918:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800691a:	2301      	movs	r3, #1
 800691c:	77c3      	strb	r3, [r0, #31]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800691e:	2000      	movs	r0, #0
 8006920:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 8006922:	bd10      	pop	{r4, pc}

08006924 <HAL_RTCEx_AlarmBEventCallback>:
 8006924:	4770      	bx	lr
	...

08006928 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8006928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800692a:	001d      	movs	r5, r3
 800692c:	0017      	movs	r7, r2
 800692e:	b085      	sub	sp, #20
 8006930:	000e      	movs	r6, r1
 8006932:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006934:	f7fd fc30 	bl	8004198 <HAL_GetTick>
 8006938:	19ed      	adds	r5, r5, r7
 800693a:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800693c:	f7fd fc2c 	bl	8004198 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006940:	4b25      	ldr	r3, [pc, #148]	; (80069d8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 8006942:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	015b      	lsls	r3, r3, #5
 8006948:	0d1b      	lsrs	r3, r3, #20
 800694a:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800694c:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 800694e:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006950:	6893      	ldr	r3, [r2, #8]
 8006952:	4033      	ands	r3, r6
 8006954:	429e      	cmp	r6, r3
 8006956:	d001      	beq.n	800695c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8006958:	2000      	movs	r0, #0
 800695a:	e032      	b.n	80069c2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
    if (Timeout != HAL_MAX_DELAY)
 800695c:	1c7b      	adds	r3, r7, #1
 800695e:	d0f7      	beq.n	8006950 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006960:	f7fd fc1a 	bl	8004198 <HAL_GetTick>
 8006964:	9b01      	ldr	r3, [sp, #4]
 8006966:	1ac0      	subs	r0, r0, r3
 8006968:	42a8      	cmp	r0, r5
 800696a:	d32c      	bcc.n	80069c6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800696c:	21e0      	movs	r1, #224	; 0xe0
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	685a      	ldr	r2, [r3, #4]
 8006972:	438a      	bics	r2, r1
 8006974:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006976:	2282      	movs	r2, #130	; 0x82
 8006978:	6861      	ldr	r1, [r4, #4]
 800697a:	0052      	lsls	r2, r2, #1
 800697c:	4291      	cmp	r1, r2
 800697e:	d10c      	bne.n	800699a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 8006980:	2180      	movs	r1, #128	; 0x80
 8006982:	68a2      	ldr	r2, [r4, #8]
 8006984:	0209      	lsls	r1, r1, #8
 8006986:	428a      	cmp	r2, r1
 8006988:	d003      	beq.n	8006992 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800698a:	2180      	movs	r1, #128	; 0x80
 800698c:	00c9      	lsls	r1, r1, #3
 800698e:	428a      	cmp	r2, r1
 8006990:	d103      	bne.n	800699a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
          __HAL_SPI_DISABLE(hspi);
 8006992:	2140      	movs	r1, #64	; 0x40
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	438a      	bics	r2, r1
 8006998:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800699a:	2180      	movs	r1, #128	; 0x80
 800699c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800699e:	0189      	lsls	r1, r1, #6
 80069a0:	428a      	cmp	r2, r1
 80069a2:	d106      	bne.n	80069b2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
          SPI_RESET_CRC(hspi);
 80069a4:	6819      	ldr	r1, [r3, #0]
 80069a6:	480d      	ldr	r0, [pc, #52]	; (80069dc <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 80069a8:	4001      	ands	r1, r0
 80069aa:	6019      	str	r1, [r3, #0]
 80069ac:	6819      	ldr	r1, [r3, #0]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80069b2:	0023      	movs	r3, r4
 80069b4:	2201      	movs	r2, #1
 80069b6:	3351      	adds	r3, #81	; 0x51
 80069b8:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 80069ba:	2300      	movs	r3, #0
 80069bc:	2003      	movs	r0, #3
 80069be:	3450      	adds	r4, #80	; 0x50
 80069c0:	7023      	strb	r3, [r4, #0]
}
 80069c2:	b005      	add	sp, #20
 80069c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 80069c6:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 80069c8:	1e5a      	subs	r2, r3, #1
 80069ca:	4193      	sbcs	r3, r2
 80069cc:	425b      	negs	r3, r3
 80069ce:	401d      	ands	r5, r3
      count--;
 80069d0:	9b03      	ldr	r3, [sp, #12]
 80069d2:	3b01      	subs	r3, #1
 80069d4:	e7ba      	b.n	800694c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 80069d6:	46c0      	nop			; (mov r8, r8)
 80069d8:	20000044 	.word	0x20000044
 80069dc:	ffffdfff 	.word	0xffffdfff

080069e0 <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80069e0:	4b16      	ldr	r3, [pc, #88]	; (8006a3c <SPI_EndRxTxTransaction+0x5c>)
{
 80069e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80069e4:	0004      	movs	r4, r0
 80069e6:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80069e8:	6818      	ldr	r0, [r3, #0]
 80069ea:	4915      	ldr	r1, [pc, #84]	; (8006a40 <SPI_EndRxTxTransaction+0x60>)
{
 80069ec:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80069ee:	f7f9 fbbb 	bl	8000168 <__udivsi3>
 80069f2:	23fa      	movs	r3, #250	; 0xfa
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4343      	muls	r3, r0
 80069f8:	9301      	str	r3, [sp, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069fa:	2382      	movs	r3, #130	; 0x82
 80069fc:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80069fe:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a00:	005b      	lsls	r3, r3, #1
 8006a02:	4299      	cmp	r1, r3
 8006a04:	d10d      	bne.n	8006a22 <SPI_EndRxTxTransaction+0x42>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a06:	0033      	movs	r3, r6
 8006a08:	002a      	movs	r2, r5
 8006a0a:	2180      	movs	r1, #128	; 0x80
 8006a0c:	0020      	movs	r0, r4
 8006a0e:	f7ff ff8b 	bl	8006928 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006a12:	2800      	cmp	r0, #0
 8006a14:	d00f      	beq.n	8006a36 <SPI_EndRxTxTransaction+0x56>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a16:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8006a18:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a1a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 8006a20:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      if (count == 0U)
 8006a22:	9b01      	ldr	r3, [sp, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d006      	beq.n	8006a36 <SPI_EndRxTxTransaction+0x56>
      count--;
 8006a28:	9b01      	ldr	r3, [sp, #4]
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	4213      	tst	r3, r2
 8006a34:	d1f5      	bne.n	8006a22 <SPI_EndRxTxTransaction+0x42>
  return HAL_OK;
 8006a36:	2000      	movs	r0, #0
 8006a38:	e7f2      	b.n	8006a20 <SPI_EndRxTxTransaction+0x40>
 8006a3a:	46c0      	nop			; (mov r8, r8)
 8006a3c:	20000044 	.word	0x20000044
 8006a40:	016e3600 	.word	0x016e3600

08006a44 <HAL_SPI_MspInit>:
}
 8006a44:	4770      	bx	lr
	...

08006a48 <HAL_SPI_Init>:
{
 8006a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a4a:	0004      	movs	r4, r0
    return HAL_ERROR;
 8006a4c:	2001      	movs	r0, #1
  if (hspi == NULL)
 8006a4e:	2c00      	cmp	r4, #0
 8006a50:	d054      	beq.n	8006afc <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d152      	bne.n	8006afe <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a58:	2282      	movs	r2, #130	; 0x82
 8006a5a:	6861      	ldr	r1, [r4, #4]
 8006a5c:	0052      	lsls	r2, r2, #1
 8006a5e:	4291      	cmp	r1, r2
 8006a60:	d000      	beq.n	8006a64 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a62:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a64:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a66:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a68:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a6a:	3551      	adds	r5, #81	; 0x51
 8006a6c:	782b      	ldrb	r3, [r5, #0]
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d105      	bne.n	8006a80 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8006a74:	0023      	movs	r3, r4
 8006a76:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 8006a78:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8006a7a:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8006a7c:	f7ff ffe2 	bl	8006a44 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006a80:	2002      	movs	r0, #2
  __HAL_SPI_DISABLE(hspi);
 8006a82:	2240      	movs	r2, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8006a84:	7028      	strb	r0, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8006a86:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a88:	6866      	ldr	r6, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 8006a8a:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a8c:	68a7      	ldr	r7, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8006a8e:	4393      	bics	r3, r2
 8006a90:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a92:	2382      	movs	r3, #130	; 0x82
 8006a94:	005b      	lsls	r3, r3, #1
 8006a96:	4033      	ands	r3, r6
 8006a98:	2684      	movs	r6, #132	; 0x84
 8006a9a:	0236      	lsls	r6, r6, #8
 8006a9c:	403e      	ands	r6, r7
 8006a9e:	4333      	orrs	r3, r6
 8006aa0:	2680      	movs	r6, #128	; 0x80
 8006aa2:	68e7      	ldr	r7, [r4, #12]
 8006aa4:	0136      	lsls	r6, r6, #4
 8006aa6:	403e      	ands	r6, r7
 8006aa8:	4333      	orrs	r3, r6
 8006aaa:	6926      	ldr	r6, [r4, #16]
 8006aac:	69a2      	ldr	r2, [r4, #24]
 8006aae:	4030      	ands	r0, r6
 8006ab0:	2601      	movs	r6, #1
 8006ab2:	4303      	orrs	r3, r0
 8006ab4:	6960      	ldr	r0, [r4, #20]
 8006ab6:	69e7      	ldr	r7, [r4, #28]
 8006ab8:	4030      	ands	r0, r6
 8006aba:	4303      	orrs	r3, r0
 8006abc:	2080      	movs	r0, #128	; 0x80
 8006abe:	0080      	lsls	r0, r0, #2
 8006ac0:	4010      	ands	r0, r2
 8006ac2:	4303      	orrs	r3, r0
 8006ac4:	2038      	movs	r0, #56	; 0x38
 8006ac6:	4038      	ands	r0, r7
 8006ac8:	4303      	orrs	r3, r0
 8006aca:	2080      	movs	r0, #128	; 0x80
 8006acc:	6a27      	ldr	r7, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ace:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ad0:	4038      	ands	r0, r7
 8006ad2:	4303      	orrs	r3, r0
 8006ad4:	2080      	movs	r0, #128	; 0x80
 8006ad6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8006ad8:	0180      	lsls	r0, r0, #6
 8006ada:	4038      	ands	r0, r7
 8006adc:	4303      	orrs	r3, r0
 8006ade:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ae0:	2304      	movs	r3, #4
 8006ae2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006ae4:	401a      	ands	r2, r3
 8006ae6:	330c      	adds	r3, #12
 8006ae8:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006aea:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006aec:	431a      	orrs	r2, r3
 8006aee:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006af0:	69cb      	ldr	r3, [r1, #28]
 8006af2:	4a05      	ldr	r2, [pc, #20]	; (8006b08 <HAL_SPI_Init+0xc0>)
 8006af4:	4013      	ands	r3, r2
 8006af6:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006af8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006afa:	702e      	strb	r6, [r5, #0]
}
 8006afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006afe:	2300      	movs	r3, #0
 8006b00:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b02:	6163      	str	r3, [r4, #20]
 8006b04:	e7ae      	b.n	8006a64 <HAL_SPI_Init+0x1c>
 8006b06:	46c0      	nop			; (mov r8, r8)
 8006b08:	fffff7ff 	.word	0xfffff7ff

08006b0c <HAL_SPI_TransmitReceive>:
{
 8006b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b0e:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8006b10:	0003      	movs	r3, r0
 8006b12:	3350      	adds	r3, #80	; 0x50
{
 8006b14:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8006b16:	781a      	ldrb	r2, [r3, #0]
{
 8006b18:	0004      	movs	r4, r0
 8006b1a:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8006b1c:	2002      	movs	r0, #2
{
 8006b1e:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8006b20:	2a01      	cmp	r2, #1
 8006b22:	d100      	bne.n	8006b26 <HAL_SPI_TransmitReceive+0x1a>
 8006b24:	e092      	b.n	8006c4c <HAL_SPI_TransmitReceive+0x140>
 8006b26:	2201      	movs	r2, #1
 8006b28:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8006b2a:	f7fd fb35 	bl	8004198 <HAL_GetTick>
  tmp_state           = hspi->State;
 8006b2e:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8006b30:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 8006b32:	3351      	adds	r3, #81	; 0x51
 8006b34:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006b36:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8006b38:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d00a      	beq.n	8006b54 <HAL_SPI_TransmitReceive+0x48>
 8006b3e:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 8006b40:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b42:	005b      	lsls	r3, r3, #1
 8006b44:	4299      	cmp	r1, r3
 8006b46:	d000      	beq.n	8006b4a <HAL_SPI_TransmitReceive+0x3e>
 8006b48:	e079      	b.n	8006c3e <HAL_SPI_TransmitReceive+0x132>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006b4a:	68a3      	ldr	r3, [r4, #8]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d176      	bne.n	8006c3e <HAL_SPI_TransmitReceive+0x132>
 8006b50:	2a04      	cmp	r2, #4
 8006b52:	d174      	bne.n	8006c3e <HAL_SPI_TransmitReceive+0x132>
    errorcode = HAL_ERROR;
 8006b54:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b56:	2d00      	cmp	r5, #0
 8006b58:	d071      	beq.n	8006c3e <HAL_SPI_TransmitReceive+0x132>
 8006b5a:	2f00      	cmp	r7, #0
 8006b5c:	d06f      	beq.n	8006c3e <HAL_SPI_TransmitReceive+0x132>
 8006b5e:	2e00      	cmp	r6, #0
 8006b60:	d06d      	beq.n	8006c3e <HAL_SPI_TransmitReceive+0x132>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b62:	0023      	movs	r3, r4
 8006b64:	3351      	adds	r3, #81	; 0x51
 8006b66:	781a      	ldrb	r2, [r3, #0]
 8006b68:	2a04      	cmp	r2, #4
 8006b6a:	d001      	beq.n	8006b70 <HAL_SPI_TransmitReceive+0x64>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b6c:	2205      	movs	r2, #5
 8006b6e:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b70:	2300      	movs	r3, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b72:	2240      	movs	r2, #64	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b74:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8006b76:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006b78:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b7a:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8006b7c:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8006b7e:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b80:	6818      	ldr	r0, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b82:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006b84:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b86:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006b88:	86a6      	strh	r6, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b8a:	4210      	tst	r0, r2
 8006b8c:	d102      	bne.n	8006b94 <HAL_SPI_TransmitReceive+0x88>
    __HAL_SPI_ENABLE(hspi);
 8006b8e:	6818      	ldr	r0, [r3, #0]
 8006b90:	4302      	orrs	r2, r0
 8006b92:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b94:	2280      	movs	r2, #128	; 0x80
 8006b96:	68e0      	ldr	r0, [r4, #12]
 8006b98:	0112      	lsls	r2, r2, #4
 8006b9a:	4290      	cmp	r0, r2
 8006b9c:	d158      	bne.n	8006c50 <HAL_SPI_TransmitReceive+0x144>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b9e:	2900      	cmp	r1, #0
 8006ba0:	d001      	beq.n	8006ba6 <HAL_SPI_TransmitReceive+0x9a>
 8006ba2:	2e01      	cmp	r6, #1
 8006ba4:	d107      	bne.n	8006bb6 <HAL_SPI_TransmitReceive+0xaa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ba6:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ba8:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006baa:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8006bac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bae:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8006bb6:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006bb8:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bba:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bbc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10e      	bne.n	8006be0 <HAL_SPI_TransmitReceive+0xd4>
 8006bc2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10b      	bne.n	8006be0 <HAL_SPI_TransmitReceive+0xd4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bc8:	0020      	movs	r0, r4
 8006bca:	9a01      	ldr	r2, [sp, #4]
 8006bcc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006bce:	f7ff ff07 	bl	80069e0 <SPI_EndRxTxTransaction>
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	d100      	bne.n	8006bd8 <HAL_SPI_TransmitReceive+0xcc>
 8006bd6:	e083      	b.n	8006ce0 <HAL_SPI_TransmitReceive+0x1d4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bd8:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8006bda:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bdc:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8006bde:	e02e      	b.n	8006c3e <HAL_SPI_TransmitReceive+0x132>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006be0:	6821      	ldr	r1, [r4, #0]
 8006be2:	688b      	ldr	r3, [r1, #8]
 8006be4:	423b      	tst	r3, r7
 8006be6:	d00e      	beq.n	8006c06 <HAL_SPI_TransmitReceive+0xfa>
 8006be8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00b      	beq.n	8006c06 <HAL_SPI_TransmitReceive+0xfa>
 8006bee:	2d01      	cmp	r5, #1
 8006bf0:	d109      	bne.n	8006c06 <HAL_SPI_TransmitReceive+0xfa>
        txallowed = 0U;
 8006bf2:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bf4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006bf6:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bf8:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bfa:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bfc:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006bfe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006c00:	3b01      	subs	r3, #1
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c06:	688b      	ldr	r3, [r1, #8]
 8006c08:	001a      	movs	r2, r3
 8006c0a:	4032      	ands	r2, r6
 8006c0c:	4233      	tst	r3, r6
 8006c0e:	d00c      	beq.n	8006c2a <HAL_SPI_TransmitReceive+0x11e>
 8006c10:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d009      	beq.n	8006c2a <HAL_SPI_TransmitReceive+0x11e>
        txallowed = 1U;
 8006c16:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c18:	68c9      	ldr	r1, [r1, #12]
 8006c1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006c1c:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c1e:	3302      	adds	r3, #2
 8006c20:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006c22:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006c24:	3b01      	subs	r3, #1
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c2a:	f7fd fab5 	bl	8004198 <HAL_GetTick>
 8006c2e:	9b01      	ldr	r3, [sp, #4]
 8006c30:	1ac0      	subs	r0, r0, r3
 8006c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c34:	4298      	cmp	r0, r3
 8006c36:	d3c1      	bcc.n	8006bbc <HAL_SPI_TransmitReceive+0xb0>
 8006c38:	3301      	adds	r3, #1
 8006c3a:	d0bf      	beq.n	8006bbc <HAL_SPI_TransmitReceive+0xb0>
        errorcode = HAL_TIMEOUT;
 8006c3c:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8006c3e:	0023      	movs	r3, r4
 8006c40:	2201      	movs	r2, #1
 8006c42:	3351      	adds	r3, #81	; 0x51
 8006c44:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8006c46:	2300      	movs	r3, #0
 8006c48:	3450      	adds	r4, #80	; 0x50
 8006c4a:	7023      	strb	r3, [r4, #0]
}
 8006c4c:	b005      	add	sp, #20
 8006c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c50:	2900      	cmp	r1, #0
 8006c52:	d001      	beq.n	8006c58 <HAL_SPI_TransmitReceive+0x14c>
 8006c54:	2e01      	cmp	r6, #1
 8006c56:	d108      	bne.n	8006c6a <HAL_SPI_TransmitReceive+0x15e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c58:	782a      	ldrb	r2, [r5, #0]
 8006c5a:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006c5e:	3301      	adds	r3, #1
 8006c60:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006c62:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006c64:	3b01      	subs	r3, #1
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8006c6a:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c6c:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c6e:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c70:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d102      	bne.n	8006c7c <HAL_SPI_TransmitReceive+0x170>
 8006c76:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d0a5      	beq.n	8006bc8 <HAL_SPI_TransmitReceive+0xbc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	689a      	ldr	r2, [r3, #8]
 8006c80:	423a      	tst	r2, r7
 8006c82:	d00f      	beq.n	8006ca4 <HAL_SPI_TransmitReceive+0x198>
 8006c84:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8006c86:	2a00      	cmp	r2, #0
 8006c88:	d00c      	beq.n	8006ca4 <HAL_SPI_TransmitReceive+0x198>
 8006c8a:	2d01      	cmp	r5, #1
 8006c8c:	d10a      	bne.n	8006ca4 <HAL_SPI_TransmitReceive+0x198>
        txallowed = 0U;
 8006c8e:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c90:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006c92:	7812      	ldrb	r2, [r2, #0]
 8006c94:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8006c96:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006c98:	3301      	adds	r3, #1
 8006c9a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006c9c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	6899      	ldr	r1, [r3, #8]
 8006ca8:	000a      	movs	r2, r1
 8006caa:	4032      	ands	r2, r6
 8006cac:	4231      	tst	r1, r6
 8006cae:	d00d      	beq.n	8006ccc <HAL_SPI_TransmitReceive+0x1c0>
 8006cb0:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8006cb2:	2900      	cmp	r1, #0
 8006cb4:	d00a      	beq.n	8006ccc <HAL_SPI_TransmitReceive+0x1c0>
        txallowed = 1U;
 8006cb6:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006cbc:	700b      	strb	r3, [r1, #0]
        hspi->pRxBuffPtr++;
 8006cbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006cc4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ccc:	f7fd fa64 	bl	8004198 <HAL_GetTick>
 8006cd0:	9b01      	ldr	r3, [sp, #4]
 8006cd2:	1ac0      	subs	r0, r0, r3
 8006cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cd6:	4298      	cmp	r0, r3
 8006cd8:	d3ca      	bcc.n	8006c70 <HAL_SPI_TransmitReceive+0x164>
 8006cda:	3301      	adds	r3, #1
 8006cdc:	d0c8      	beq.n	8006c70 <HAL_SPI_TransmitReceive+0x164>
 8006cde:	e7ad      	b.n	8006c3c <HAL_SPI_TransmitReceive+0x130>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ce0:	68a3      	ldr	r3, [r4, #8]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1ab      	bne.n	8006c3e <HAL_SPI_TransmitReceive+0x132>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	9003      	str	r0, [sp, #12]
 8006cea:	68da      	ldr	r2, [r3, #12]
 8006cec:	9203      	str	r2, [sp, #12]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	9303      	str	r3, [sp, #12]
 8006cf2:	9b03      	ldr	r3, [sp, #12]
 8006cf4:	e7a3      	b.n	8006c3e <HAL_SPI_TransmitReceive+0x132>

08006cf6 <HAL_SPI_GetState>:
  return hspi->State;
 8006cf6:	3051      	adds	r0, #81	; 0x51
 8006cf8:	7800      	ldrb	r0, [r0, #0]
 8006cfa:	b2c0      	uxtb	r0, r0
}
 8006cfc:	4770      	bx	lr
	...

08006d00 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d00:	6803      	ldr	r3, [r0, #0]
 8006d02:	490b      	ldr	r1, [pc, #44]	; (8006d30 <UART_EndRxTransfer+0x30>)
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	400a      	ands	r2, r1
 8006d08:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d0a:	689a      	ldr	r2, [r3, #8]
 8006d0c:	3123      	adds	r1, #35	; 0x23
 8006d0e:	31ff      	adds	r1, #255	; 0xff
 8006d10:	438a      	bics	r2, r1
 8006d12:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d14:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8006d16:	428a      	cmp	r2, r1
 8006d18:	d103      	bne.n	8006d22 <UART_EndRxTransfer+0x22>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	310f      	adds	r1, #15
 8006d1e:	438a      	bics	r2, r1
 8006d20:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d22:	2320      	movs	r3, #32
 8006d24:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d26:	2300      	movs	r3, #0
 8006d28:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d2a:	6643      	str	r3, [r0, #100]	; 0x64
}
 8006d2c:	4770      	bx	lr
 8006d2e:	46c0      	nop			; (mov r8, r8)
 8006d30:	fffffedf 	.word	0xfffffedf

08006d34 <HAL_UART_Transmit_DMA>:
{
 8006d34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d36:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8006d38:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 8006d3a:	0004      	movs	r4, r0
    return HAL_BUSY;
 8006d3c:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8006d3e:	2a20      	cmp	r2, #32
 8006d40:	d13a      	bne.n	8006db8 <HAL_UART_Transmit_DMA+0x84>
      return HAL_ERROR;
 8006d42:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8006d44:	2900      	cmp	r1, #0
 8006d46:	d037      	beq.n	8006db8 <HAL_UART_Transmit_DMA+0x84>
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d035      	beq.n	8006db8 <HAL_UART_Transmit_DMA+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d4c:	2280      	movs	r2, #128	; 0x80
 8006d4e:	68a0      	ldr	r0, [r4, #8]
 8006d50:	0152      	lsls	r2, r2, #5
 8006d52:	4290      	cmp	r0, r2
 8006d54:	d106      	bne.n	8006d64 <HAL_UART_Transmit_DMA+0x30>
 8006d56:	6922      	ldr	r2, [r4, #16]
 8006d58:	2a00      	cmp	r2, #0
 8006d5a:	d103      	bne.n	8006d64 <HAL_UART_Transmit_DMA+0x30>
      if ((((uint32_t)pData) & 1U) != 0U)
 8006d5c:	3201      	adds	r2, #1
      return HAL_ERROR;
 8006d5e:	0010      	movs	r0, r2
      if ((((uint32_t)pData) & 1U) != 0U)
 8006d60:	4211      	tst	r1, r2
 8006d62:	d129      	bne.n	8006db8 <HAL_UART_Transmit_DMA+0x84>
    __HAL_LOCK(huart);
 8006d64:	0025      	movs	r5, r4
 8006d66:	3574      	adds	r5, #116	; 0x74
 8006d68:	782a      	ldrb	r2, [r5, #0]
    return HAL_BUSY;
 8006d6a:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8006d6c:	2a01      	cmp	r2, #1
 8006d6e:	d023      	beq.n	8006db8 <HAL_UART_Transmit_DMA+0x84>
 8006d70:	2201      	movs	r2, #1
 8006d72:	702a      	strb	r2, [r5, #0]
    huart->TxXferSize  = Size;
 8006d74:	0022      	movs	r2, r4
 8006d76:	3250      	adds	r2, #80	; 0x50
    huart->pTxBuffPtr  = pData;
 8006d78:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d7a:	2600      	movs	r6, #0
    huart->TxXferSize  = Size;
 8006d7c:	8013      	strh	r3, [r2, #0]
    huart->TxXferCount = Size;
 8006d7e:	8053      	strh	r3, [r2, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d80:	2221      	movs	r2, #33	; 0x21
    if (huart->hdmatx != NULL)
 8006d82:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d84:	1d27      	adds	r7, r4, #4
 8006d86:	67fe      	str	r6, [r7, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d88:	67a2      	str	r2, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 8006d8a:	42b0      	cmp	r0, r6
 8006d8c:	d015      	beq.n	8006dba <HAL_UART_Transmit_DMA+0x86>
 8006d8e:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferAbortCallback = NULL;
 8006d90:	6386      	str	r6, [r0, #56]	; 0x38
 8006d92:	9201      	str	r2, [sp, #4]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006d94:	4a0e      	ldr	r2, [pc, #56]	; (8006dd0 <HAL_UART_Transmit_DMA+0x9c>)
 8006d96:	62c2      	str	r2, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006d98:	4a0e      	ldr	r2, [pc, #56]	; (8006dd4 <HAL_UART_Transmit_DMA+0xa0>)
 8006d9a:	6302      	str	r2, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006d9c:	4a0e      	ldr	r2, [pc, #56]	; (8006dd8 <HAL_UART_Transmit_DMA+0xa4>)
 8006d9e:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006da0:	9a01      	ldr	r2, [sp, #4]
 8006da2:	3228      	adds	r2, #40	; 0x28
 8006da4:	f7fe fad6 	bl	8005354 <HAL_DMA_Start_IT>
 8006da8:	42b0      	cmp	r0, r6
 8006daa:	d006      	beq.n	8006dba <HAL_UART_Transmit_DMA+0x86>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006dac:	2310      	movs	r3, #16
        return HAL_ERROR;
 8006dae:	2001      	movs	r0, #1
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006db0:	67fb      	str	r3, [r7, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 8006db2:	18db      	adds	r3, r3, r3
        __HAL_UNLOCK(huart);
 8006db4:	702e      	strb	r6, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 8006db6:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8006db8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006dba:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 8006dbc:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006dbe:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 8006dc0:	3474      	adds	r4, #116	; 0x74
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006dc2:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8006dc4:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006dc6:	6899      	ldr	r1, [r3, #8]
 8006dc8:	1892      	adds	r2, r2, r2
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8006dce:	e7f3      	b.n	8006db8 <HAL_UART_Transmit_DMA+0x84>
 8006dd0:	08006ddd 	.word	0x08006ddd
 8006dd4:	08006e13 	.word	0x08006e13
 8006dd8:	08006e1f 	.word	0x08006e1f

08006ddc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ddc:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006dde:	681b      	ldr	r3, [r3, #0]
{
 8006de0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	2320      	movs	r3, #32
 8006de6:	0011      	movs	r1, r2
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006de8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006dea:	4019      	ands	r1, r3
 8006dec:	421a      	tst	r2, r3
 8006dee:	d10c      	bne.n	8006e0a <UART_DMATransmitCplt+0x2e>
  {
    huart->TxXferCount = 0U;
 8006df0:	0003      	movs	r3, r0
 8006df2:	3352      	adds	r3, #82	; 0x52
 8006df4:	8019      	strh	r1, [r3, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006df6:	2180      	movs	r1, #128	; 0x80
 8006df8:	6803      	ldr	r3, [r0, #0]
 8006dfa:	689a      	ldr	r2, [r3, #8]
 8006dfc:	438a      	bics	r2, r1
 8006dfe:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e00:	2240      	movs	r2, #64	; 0x40
 8006e02:	6819      	ldr	r1, [r3, #0]
 8006e04:	430a      	orrs	r2, r1
 8006e06:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e08:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8006e0a:	f7fd fb1b 	bl	8004444 <HAL_UART_TxCpltCallback>
}
 8006e0e:	e7fb      	b.n	8006e08 <UART_DMATransmitCplt+0x2c>

08006e10 <HAL_UART_TxHalfCpltCallback>:
 8006e10:	4770      	bx	lr

08006e12 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e12:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006e14:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8006e16:	f7ff fffb 	bl	8006e10 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e1a:	bd10      	pop	{r4, pc}

08006e1c <HAL_UART_ErrorCallback>:
 8006e1c:	4770      	bx	lr

08006e1e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e1e:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e20:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006e22:	6823      	ldr	r3, [r4, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006e24:	6fa2      	ldr	r2, [r4, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006e26:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006e28:	6898      	ldr	r0, [r3, #8]
 8006e2a:	0600      	lsls	r0, r0, #24
 8006e2c:	d50b      	bpl.n	8006e46 <UART_DMAError+0x28>
 8006e2e:	2a21      	cmp	r2, #33	; 0x21
 8006e30:	d109      	bne.n	8006e46 <UART_DMAError+0x28>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006e32:	0022      	movs	r2, r4
 8006e34:	2000      	movs	r0, #0
 8006e36:	3252      	adds	r2, #82	; 0x52
 8006e38:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	30c0      	adds	r0, #192	; 0xc0
 8006e3e:	4382      	bics	r2, r0
 8006e40:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006e42:	2220      	movs	r2, #32
 8006e44:	67a2      	str	r2, [r4, #120]	; 0x78
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	065b      	lsls	r3, r3, #25
 8006e4a:	d508      	bpl.n	8006e5e <UART_DMAError+0x40>
 8006e4c:	2922      	cmp	r1, #34	; 0x22
 8006e4e:	d106      	bne.n	8006e5e <UART_DMAError+0x40>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006e50:	0023      	movs	r3, r4
 8006e52:	2200      	movs	r2, #0
 8006e54:	335a      	adds	r3, #90	; 0x5a
    UART_EndRxTransfer(huart);
 8006e56:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 8006e58:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 8006e5a:	f7ff ff51 	bl	8006d00 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e5e:	2310      	movs	r3, #16
 8006e60:	1d22      	adds	r2, r4, #4
 8006e62:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e64:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e66:	430b      	orrs	r3, r1
 8006e68:	67d3      	str	r3, [r2, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 8006e6a:	f7ff ffd7 	bl	8006e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e6e:	bd10      	pop	{r4, pc}

08006e70 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e70:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	0002      	movs	r2, r0
{
 8006e76:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8006e78:	325a      	adds	r2, #90	; 0x5a
 8006e7a:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8006e7c:	3a08      	subs	r2, #8
 8006e7e:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e80:	f7ff ffcc 	bl	8006e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e84:	bd10      	pop	{r4, pc}

08006e86 <HAL_UARTEx_RxEventCallback>:
}
 8006e86:	4770      	bx	lr

08006e88 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e88:	6803      	ldr	r3, [r0, #0]
{
 8006e8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e8c:	69d9      	ldr	r1, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e8e:	4a85      	ldr	r2, [pc, #532]	; (80070a4 <HAL_UART_IRQHandler+0x21c>)
{
 8006e90:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e92:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e94:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 8006e96:	4211      	tst	r1, r2
 8006e98:	d10b      	bne.n	8006eb2 <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	4211      	tst	r1, r2
 8006e9e:	d100      	bne.n	8006ea2 <HAL_UART_IRQHandler+0x1a>
 8006ea0:	e076      	b.n	8006f90 <HAL_UART_IRQHandler+0x108>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ea2:	4210      	tst	r0, r2
 8006ea4:	d100      	bne.n	8006ea8 <HAL_UART_IRQHandler+0x20>
 8006ea6:	e073      	b.n	8006f90 <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 8006ea8:	6e63      	ldr	r3, [r4, #100]	; 0x64
      huart->TxISR(huart);
 8006eaa:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d165      	bne.n	8006f7c <HAL_UART_IRQHandler+0xf4>
 8006eb0:	e065      	b.n	8006f7e <HAL_UART_IRQHandler+0xf6>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006eb6:	4d7c      	ldr	r5, [pc, #496]	; (80070a8 <HAL_UART_IRQHandler+0x220>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006eb8:	4017      	ands	r7, r2
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006eba:	4005      	ands	r5, r0
 8006ebc:	433d      	orrs	r5, r7
 8006ebe:	d067      	beq.n	8006f90 <HAL_UART_IRQHandler+0x108>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ec0:	1d25      	adds	r5, r4, #4
 8006ec2:	4211      	tst	r1, r2
 8006ec4:	d005      	beq.n	8006ed2 <HAL_UART_IRQHandler+0x4a>
 8006ec6:	05c6      	lsls	r6, r0, #23
 8006ec8:	d503      	bpl.n	8006ed2 <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006eca:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ecc:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8006ece:	4332      	orrs	r2, r6
 8006ed0:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	4211      	tst	r1, r2
 8006ed6:	d006      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x5e>
 8006ed8:	2f00      	cmp	r7, #0
 8006eda:	d004      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006edc:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ede:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8006ee0:	1892      	adds	r2, r2, r2
 8006ee2:	4332      	orrs	r2, r6
 8006ee4:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ee6:	2204      	movs	r2, #4
 8006ee8:	4211      	tst	r1, r2
 8006eea:	d006      	beq.n	8006efa <HAL_UART_IRQHandler+0x72>
 8006eec:	2f00      	cmp	r7, #0
 8006eee:	d004      	beq.n	8006efa <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ef0:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ef2:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8006ef4:	3a02      	subs	r2, #2
 8006ef6:	4332      	orrs	r2, r6
 8006ef8:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006efa:	2208      	movs	r2, #8
 8006efc:	4211      	tst	r1, r2
 8006efe:	d007      	beq.n	8006f10 <HAL_UART_IRQHandler+0x88>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f00:	2620      	movs	r6, #32
 8006f02:	4006      	ands	r6, r0
 8006f04:	433e      	orrs	r6, r7
 8006f06:	d003      	beq.n	8006f10 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f08:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f0a:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8006f0c:	4332      	orrs	r2, r6
 8006f0e:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f10:	2280      	movs	r2, #128	; 0x80
 8006f12:	0112      	lsls	r2, r2, #4
 8006f14:	4211      	tst	r1, r2
 8006f16:	d006      	beq.n	8006f26 <HAL_UART_IRQHandler+0x9e>
 8006f18:	0146      	lsls	r6, r0, #5
 8006f1a:	d504      	bpl.n	8006f26 <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f1c:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f1e:	2320      	movs	r3, #32
 8006f20:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8006f22:	4313      	orrs	r3, r2
 8006f24:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f26:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d028      	beq.n	8006f7e <HAL_UART_IRQHandler+0xf6>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f2c:	2320      	movs	r3, #32
 8006f2e:	4219      	tst	r1, r3
 8006f30:	d006      	beq.n	8006f40 <HAL_UART_IRQHandler+0xb8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f32:	4218      	tst	r0, r3
 8006f34:	d004      	beq.n	8006f40 <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 8006f36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d001      	beq.n	8006f40 <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 8006f3c:	0020      	movs	r0, r4
 8006f3e:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f40:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8006f42:	6feb      	ldr	r3, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f44:	2740      	movs	r7, #64	; 0x40
 8006f46:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f48:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f4a:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f4c:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 8006f4e:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f50:	431e      	orrs	r6, r3
 8006f52:	d019      	beq.n	8006f88 <HAL_UART_IRQHandler+0x100>
        UART_EndRxTransfer(huart);
 8006f54:	f7ff fed4 	bl	8006d00 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f58:	6823      	ldr	r3, [r4, #0]
 8006f5a:	689a      	ldr	r2, [r3, #8]
 8006f5c:	423a      	tst	r2, r7
 8006f5e:	d00f      	beq.n	8006f80 <HAL_UART_IRQHandler+0xf8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f60:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8006f62:	6f20      	ldr	r0, [r4, #112]	; 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f64:	43ba      	bics	r2, r7
 8006f66:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	d009      	beq.n	8006f80 <HAL_UART_IRQHandler+0xf8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f6c:	4b4f      	ldr	r3, [pc, #316]	; (80070ac <HAL_UART_IRQHandler+0x224>)
 8006f6e:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f70:	f7fe fa50 	bl	8005414 <HAL_DMA_Abort_IT>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	d002      	beq.n	8006f7e <HAL_UART_IRQHandler+0xf6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f78:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006f7a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006f7c:	4798      	blx	r3
}
 8006f7e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8006f80:	0020      	movs	r0, r4
 8006f82:	f7ff ff4b 	bl	8006e1c <HAL_UART_ErrorCallback>
 8006f86:	e7fa      	b.n	8006f7e <HAL_UART_IRQHandler+0xf6>
        HAL_UART_ErrorCallback(huart);
 8006f88:	f7ff ff48 	bl	8006e1c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f8c:	67ee      	str	r6, [r5, #124]	; 0x7c
 8006f8e:	e7f6      	b.n	8006f7e <HAL_UART_IRQHandler+0xf6>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f90:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8006f92:	2d01      	cmp	r5, #1
 8006f94:	d161      	bne.n	800705a <HAL_UART_IRQHandler+0x1d2>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006f96:	2210      	movs	r2, #16
 8006f98:	4211      	tst	r1, r2
 8006f9a:	d05e      	beq.n	800705a <HAL_UART_IRQHandler+0x1d2>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006f9c:	4210      	tst	r0, r2
 8006f9e:	d05c      	beq.n	800705a <HAL_UART_IRQHandler+0x1d2>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fa0:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa2:	6899      	ldr	r1, [r3, #8]
 8006fa4:	2640      	movs	r6, #64	; 0x40
 8006fa6:	000f      	movs	r7, r1
 8006fa8:	4037      	ands	r7, r6
 8006faa:	4231      	tst	r1, r6
 8006fac:	d038      	beq.n	8007020 <HAL_UART_IRQHandler+0x198>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fae:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8006fb0:	680f      	ldr	r7, [r1, #0]
 8006fb2:	9100      	str	r1, [sp, #0]
 8006fb4:	6879      	ldr	r1, [r7, #4]
 8006fb6:	b289      	uxth	r1, r1
      if (  (nb_remaining_rx_data > 0U)
 8006fb8:	2900      	cmp	r1, #0
 8006fba:	d0e0      	beq.n	8006f7e <HAL_UART_IRQHandler+0xf6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006fbc:	2058      	movs	r0, #88	; 0x58
 8006fbe:	4684      	mov	ip, r0
 8006fc0:	44a4      	add	ip, r4
 8006fc2:	4660      	mov	r0, ip
 8006fc4:	8800      	ldrh	r0, [r0, #0]
 8006fc6:	4288      	cmp	r0, r1
 8006fc8:	d9d9      	bls.n	8006f7e <HAL_UART_IRQHandler+0xf6>
        huart->RxXferCount = nb_remaining_rx_data;
 8006fca:	205a      	movs	r0, #90	; 0x5a
 8006fcc:	4684      	mov	ip, r0
 8006fce:	44a4      	add	ip, r4
 8006fd0:	4660      	mov	r0, ip
 8006fd2:	8001      	strh	r1, [r0, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006fd4:	683f      	ldr	r7, [r7, #0]
 8006fd6:	2120      	movs	r1, #32
 8006fd8:	0038      	movs	r0, r7
 8006fda:	4008      	ands	r0, r1
 8006fdc:	9001      	str	r0, [sp, #4]
 8006fde:	420f      	tst	r7, r1
 8006fe0:	d112      	bne.n	8007008 <HAL_UART_IRQHandler+0x180>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fe2:	681f      	ldr	r7, [r3, #0]
 8006fe4:	4832      	ldr	r0, [pc, #200]	; (80070b0 <HAL_UART_IRQHandler+0x228>)
 8006fe6:	4007      	ands	r7, r0
 8006fe8:	601f      	str	r7, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fea:	689f      	ldr	r7, [r3, #8]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fec:	9800      	ldr	r0, [sp, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fee:	43af      	bics	r7, r5
 8006ff0:	609f      	str	r7, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ff2:	689d      	ldr	r5, [r3, #8]
 8006ff4:	43b5      	bics	r5, r6
 8006ff6:	609d      	str	r5, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8006ff8:	67e1      	str	r1, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ffa:	9901      	ldr	r1, [sp, #4]
 8006ffc:	6621      	str	r1, [r4, #96]	; 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ffe:	6819      	ldr	r1, [r3, #0]
 8007000:	4391      	bics	r1, r2
 8007002:	6019      	str	r1, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007004:	f7fe f9e6 	bl	80053d4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007008:	0023      	movs	r3, r4
 800700a:	0022      	movs	r2, r4
 800700c:	335a      	adds	r3, #90	; 0x5a
 800700e:	3258      	adds	r2, #88	; 0x58
 8007010:	881b      	ldrh	r3, [r3, #0]
 8007012:	8811      	ldrh	r1, [r2, #0]
 8007014:	1ac9      	subs	r1, r1, r3
 8007016:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007018:	0020      	movs	r0, r4
 800701a:	f7ff ff34 	bl	8006e86 <HAL_UARTEx_RxEventCallback>
 800701e:	e7ae      	b.n	8006f7e <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007020:	0026      	movs	r6, r4
 8007022:	365a      	adds	r6, #90	; 0x5a
 8007024:	8830      	ldrh	r0, [r6, #0]
      if (  (huart->RxXferCount > 0U)
 8007026:	8831      	ldrh	r1, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007028:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 800702a:	2900      	cmp	r1, #0
 800702c:	d0a7      	beq.n	8006f7e <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800702e:	0021      	movs	r1, r4
 8007030:	3158      	adds	r1, #88	; 0x58
 8007032:	8809      	ldrh	r1, [r1, #0]
 8007034:	1a09      	subs	r1, r1, r0
 8007036:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8007038:	2900      	cmp	r1, #0
 800703a:	d0a0      	beq.n	8006f7e <HAL_UART_IRQHandler+0xf6>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800703c:	6818      	ldr	r0, [r3, #0]
 800703e:	4e1d      	ldr	r6, [pc, #116]	; (80070b4 <HAL_UART_IRQHandler+0x22c>)
 8007040:	4030      	ands	r0, r6
 8007042:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007044:	6898      	ldr	r0, [r3, #8]
 8007046:	43a8      	bics	r0, r5
 8007048:	6098      	str	r0, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800704a:	2020      	movs	r0, #32
 800704c:	67e0      	str	r0, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800704e:	6627      	str	r7, [r4, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007050:	6818      	ldr	r0, [r3, #0]
        huart->RxISR = NULL;
 8007052:	6667      	str	r7, [r4, #100]	; 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007054:	4390      	bics	r0, r2
 8007056:	6018      	str	r0, [r3, #0]
 8007058:	e7de      	b.n	8007018 <HAL_UART_IRQHandler+0x190>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800705a:	2280      	movs	r2, #128	; 0x80
 800705c:	0352      	lsls	r2, r2, #13
 800705e:	4211      	tst	r1, r2
 8007060:	d006      	beq.n	8007070 <HAL_UART_IRQHandler+0x1e8>
 8007062:	0275      	lsls	r5, r6, #9
 8007064:	d504      	bpl.n	8007070 <HAL_UART_IRQHandler+0x1e8>
    HAL_UARTEx_WakeupCallback(huart);
 8007066:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007068:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800706a:	f000 fb55 	bl	8007718 <HAL_UARTEx_WakeupCallback>
    return;
 800706e:	e786      	b.n	8006f7e <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007070:	2280      	movs	r2, #128	; 0x80
 8007072:	4211      	tst	r1, r2
 8007074:	d003      	beq.n	800707e <HAL_UART_IRQHandler+0x1f6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007076:	4210      	tst	r0, r2
 8007078:	d001      	beq.n	800707e <HAL_UART_IRQHandler+0x1f6>
    if (huart->TxISR != NULL)
 800707a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800707c:	e715      	b.n	8006eaa <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800707e:	2540      	movs	r5, #64	; 0x40
 8007080:	4229      	tst	r1, r5
 8007082:	d100      	bne.n	8007086 <HAL_UART_IRQHandler+0x1fe>
 8007084:	e77b      	b.n	8006f7e <HAL_UART_IRQHandler+0xf6>
 8007086:	4228      	tst	r0, r5
 8007088:	d100      	bne.n	800708c <HAL_UART_IRQHandler+0x204>
 800708a:	e778      	b.n	8006f7e <HAL_UART_IRQHandler+0xf6>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800708c:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800708e:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007090:	43aa      	bics	r2, r5
 8007092:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007094:	2320      	movs	r3, #32
 8007096:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 8007098:	2300      	movs	r3, #0
 800709a:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 800709c:	f7fd f9d2 	bl	8004444 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070a0:	e76d      	b.n	8006f7e <HAL_UART_IRQHandler+0xf6>
 80070a2:	46c0      	nop			; (mov r8, r8)
 80070a4:	0000080f 	.word	0x0000080f
 80070a8:	04000120 	.word	0x04000120
 80070ac:	08006e71 	.word	0x08006e71
 80070b0:	fffffeff 	.word	0xfffffeff
 80070b4:	fffffedf 	.word	0xfffffedf

080070b8 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070b8:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 80070ba:	b510      	push	{r4, lr}
 80070bc:	6803      	ldr	r3, [r0, #0]
 80070be:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070c0:	2a22      	cmp	r2, #34	; 0x22
 80070c2:	d134      	bne.n	800712e <UART_RxISR_8BIT+0x76>
  uint16_t uhMask = huart->Mask;
 80070c4:	0002      	movs	r2, r0
 80070c6:	325c      	adds	r2, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80070ca:	8812      	ldrh	r2, [r2, #0]
 80070cc:	4013      	ands	r3, r2
 80070ce:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80070d0:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 80070d2:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 80070d4:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80070d6:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 80070d8:	3301      	adds	r3, #1
 80070da:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80070dc:	8813      	ldrh	r3, [r2, #0]
 80070de:	3b01      	subs	r3, #1
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 80070e4:	8813      	ldrh	r3, [r2, #0]
 80070e6:	b299      	uxth	r1, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d11b      	bne.n	8007124 <UART_RxISR_8BIT+0x6c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070ec:	6803      	ldr	r3, [r0, #0]
 80070ee:	4812      	ldr	r0, [pc, #72]	; (8007138 <UART_RxISR_8BIT+0x80>)
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	4002      	ands	r2, r0
 80070f4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070f6:	689a      	ldr	r2, [r3, #8]
 80070f8:	3023      	adds	r0, #35	; 0x23
 80070fa:	30ff      	adds	r0, #255	; 0xff
 80070fc:	4382      	bics	r2, r0
 80070fe:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007100:	2220      	movs	r2, #32
 8007102:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007104:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 8007106:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007108:	4282      	cmp	r2, r0
 800710a:	d10c      	bne.n	8007126 <UART_RxISR_8BIT+0x6e>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800710c:	2110      	movs	r1, #16
 800710e:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007110:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007112:	438a      	bics	r2, r1
 8007114:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007116:	0023      	movs	r3, r4
 8007118:	3358      	adds	r3, #88	; 0x58
 800711a:	8819      	ldrh	r1, [r3, #0]
 800711c:	f7ff feb3 	bl	8006e86 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007120:	2300      	movs	r3, #0
 8007122:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007124:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 8007126:	0020      	movs	r0, r4
 8007128:	f7fd f994 	bl	8004454 <HAL_UART_RxCpltCallback>
 800712c:	e7f8      	b.n	8007120 <UART_RxISR_8BIT+0x68>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800712e:	2208      	movs	r2, #8
 8007130:	6999      	ldr	r1, [r3, #24]
 8007132:	430a      	orrs	r2, r1
 8007134:	619a      	str	r2, [r3, #24]
}
 8007136:	e7f5      	b.n	8007124 <UART_RxISR_8BIT+0x6c>
 8007138:	fffffedf 	.word	0xfffffedf

0800713c <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800713c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 800713e:	b510      	push	{r4, lr}
 8007140:	6803      	ldr	r3, [r0, #0]
 8007142:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007144:	2a22      	cmp	r2, #34	; 0x22
 8007146:	d131      	bne.n	80071ac <UART_RxISR_16BIT+0x70>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007148:	6d42      	ldr	r2, [r0, #84]	; 0x54
  uint16_t uhMask = huart->Mask;
 800714a:	305c      	adds	r0, #92	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800714c:	6a59      	ldr	r1, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 800714e:	8800      	ldrh	r0, [r0, #0]
 8007150:	4001      	ands	r1, r0
 8007152:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8007154:	0021      	movs	r1, r4
    huart->pRxBuffPtr += 2U;
 8007156:	3202      	adds	r2, #2
    huart->RxXferCount--;
 8007158:	315a      	adds	r1, #90	; 0x5a
    huart->pRxBuffPtr += 2U;
 800715a:	6562      	str	r2, [r4, #84]	; 0x54
    huart->RxXferCount--;
 800715c:	880a      	ldrh	r2, [r1, #0]
 800715e:	3a01      	subs	r2, #1
 8007160:	b292      	uxth	r2, r2
 8007162:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 8007164:	880a      	ldrh	r2, [r1, #0]
 8007166:	b291      	uxth	r1, r2
 8007168:	2a00      	cmp	r2, #0
 800716a:	d11a      	bne.n	80071a2 <UART_RxISR_16BIT+0x66>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	4812      	ldr	r0, [pc, #72]	; (80071b8 <UART_RxISR_16BIT+0x7c>)
 8007170:	4002      	ands	r2, r0
 8007172:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007174:	689a      	ldr	r2, [r3, #8]
 8007176:	3023      	adds	r0, #35	; 0x23
 8007178:	30ff      	adds	r0, #255	; 0xff
 800717a:	4382      	bics	r2, r0
 800717c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800717e:	2220      	movs	r2, #32
 8007180:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007182:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 8007184:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007186:	4282      	cmp	r2, r0
 8007188:	d10c      	bne.n	80071a4 <UART_RxISR_16BIT+0x68>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800718a:	2110      	movs	r1, #16
 800718c:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800718e:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007190:	438a      	bics	r2, r1
 8007192:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007194:	0023      	movs	r3, r4
 8007196:	3358      	adds	r3, #88	; 0x58
 8007198:	8819      	ldrh	r1, [r3, #0]
 800719a:	f7ff fe74 	bl	8006e86 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800719e:	2300      	movs	r3, #0
 80071a0:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80071a2:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 80071a4:	0020      	movs	r0, r4
 80071a6:	f7fd f955 	bl	8004454 <HAL_UART_RxCpltCallback>
 80071aa:	e7f8      	b.n	800719e <UART_RxISR_16BIT+0x62>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071ac:	2208      	movs	r2, #8
 80071ae:	6999      	ldr	r1, [r3, #24]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	619a      	str	r2, [r3, #24]
}
 80071b4:	e7f5      	b.n	80071a2 <UART_RxISR_16BIT+0x66>
 80071b6:	46c0      	nop			; (mov r8, r8)
 80071b8:	fffffedf 	.word	0xfffffedf

080071bc <UART_SetConfig>:
{
 80071bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071be:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071c0:	6925      	ldr	r5, [r4, #16]
 80071c2:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 80071c4:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071c6:	4329      	orrs	r1, r5
 80071c8:	6965      	ldr	r5, [r4, #20]
 80071ca:	69c3      	ldr	r3, [r0, #28]
 80071cc:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071ce:	6810      	ldr	r0, [r2, #0]
 80071d0:	4d79      	ldr	r5, [pc, #484]	; (80073b8 <UART_SetConfig+0x1fc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071d2:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071d4:	4028      	ands	r0, r5
 80071d6:	4301      	orrs	r1, r0
 80071d8:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071da:	6851      	ldr	r1, [r2, #4]
 80071dc:	4877      	ldr	r0, [pc, #476]	; (80073bc <UART_SetConfig+0x200>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071de:	4d78      	ldr	r5, [pc, #480]	; (80073c0 <UART_SetConfig+0x204>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071e0:	4001      	ands	r1, r0
 80071e2:	68e0      	ldr	r0, [r4, #12]
 80071e4:	4301      	orrs	r1, r0
 80071e6:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071e8:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071ea:	42aa      	cmp	r2, r5
 80071ec:	d001      	beq.n	80071f2 <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 80071ee:	6a21      	ldr	r1, [r4, #32]
 80071f0:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071f2:	6891      	ldr	r1, [r2, #8]
 80071f4:	4e73      	ldr	r6, [pc, #460]	; (80073c4 <UART_SetConfig+0x208>)
 80071f6:	4031      	ands	r1, r6
 80071f8:	4301      	orrs	r1, r0
 80071fa:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071fc:	4972      	ldr	r1, [pc, #456]	; (80073c8 <UART_SetConfig+0x20c>)
 80071fe:	428a      	cmp	r2, r1
 8007200:	d10f      	bne.n	8007222 <UART_SetConfig+0x66>
 8007202:	2103      	movs	r1, #3
 8007204:	4a71      	ldr	r2, [pc, #452]	; (80073cc <UART_SetConfig+0x210>)
 8007206:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007208:	400a      	ands	r2, r1
 800720a:	3a01      	subs	r2, #1
 800720c:	4970      	ldr	r1, [pc, #448]	; (80073d0 <UART_SetConfig+0x214>)
 800720e:	2a02      	cmp	r2, #2
 8007210:	d910      	bls.n	8007234 <UART_SetConfig+0x78>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007212:	2280      	movs	r2, #128	; 0x80
 8007214:	0212      	lsls	r2, r2, #8
 8007216:	4293      	cmp	r3, r2
 8007218:	d000      	beq.n	800721c <UART_SetConfig+0x60>
 800721a:	e0a3      	b.n	8007364 <UART_SetConfig+0x1a8>
        pclk = HAL_RCC_GetPCLK2Freq();
 800721c:	f7fe ff20 	bl	8006060 <HAL_RCC_GetPCLK2Freq>
 8007220:	e0c5      	b.n	80073ae <UART_SetConfig+0x1f2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007222:	496c      	ldr	r1, [pc, #432]	; (80073d4 <UART_SetConfig+0x218>)
 8007224:	428a      	cmp	r2, r1
 8007226:	d118      	bne.n	800725a <UART_SetConfig+0x9e>
 8007228:	200c      	movs	r0, #12
 800722a:	4a68      	ldr	r2, [pc, #416]	; (80073cc <UART_SetConfig+0x210>)
 800722c:	4968      	ldr	r1, [pc, #416]	; (80073d0 <UART_SetConfig+0x214>)
 800722e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007230:	3103      	adds	r1, #3
 8007232:	4002      	ands	r2, r0
 8007234:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007236:	2280      	movs	r2, #128	; 0x80
 8007238:	0212      	lsls	r2, r2, #8
 800723a:	4293      	cmp	r3, r2
 800723c:	d000      	beq.n	8007240 <UART_SetConfig+0x84>
 800723e:	e083      	b.n	8007348 <UART_SetConfig+0x18c>
    switch (clocksource)
 8007240:	2808      	cmp	r0, #8
 8007242:	d824      	bhi.n	800728e <UART_SetConfig+0xd2>
 8007244:	f7f8 ff7c 	bl	8000140 <__gnu_thumb1_case_shi>
 8007248:	ffea00b1 	.word	0xffea00b1
 800724c:	0023005c 	.word	0x0023005c
 8007250:	0023007d 	.word	0x0023007d
 8007254:	00230023 	.word	0x00230023
 8007258:	0067      	.short	0x0067
  UART_GETCLOCKSOURCE(huart, clocksource);
 800725a:	495f      	ldr	r1, [pc, #380]	; (80073d8 <UART_SetConfig+0x21c>)
 800725c:	428a      	cmp	r2, r1
 800725e:	d100      	bne.n	8007262 <UART_SetConfig+0xa6>
 8007260:	e09f      	b.n	80073a2 <UART_SetConfig+0x1e6>
 8007262:	495e      	ldr	r1, [pc, #376]	; (80073dc <UART_SetConfig+0x220>)
 8007264:	428a      	cmp	r2, r1
 8007266:	d100      	bne.n	800726a <UART_SetConfig+0xae>
 8007268:	e09b      	b.n	80073a2 <UART_SetConfig+0x1e6>
 800726a:	42aa      	cmp	r2, r5
 800726c:	d10f      	bne.n	800728e <UART_SetConfig+0xd2>
 800726e:	21c0      	movs	r1, #192	; 0xc0
 8007270:	2080      	movs	r0, #128	; 0x80
 8007272:	4a56      	ldr	r2, [pc, #344]	; (80073cc <UART_SetConfig+0x210>)
 8007274:	0109      	lsls	r1, r1, #4
 8007276:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007278:	0100      	lsls	r0, r0, #4
 800727a:	400b      	ands	r3, r1
 800727c:	4283      	cmp	r3, r0
 800727e:	d016      	beq.n	80072ae <UART_SetConfig+0xf2>
 8007280:	d807      	bhi.n	8007292 <UART_SetConfig+0xd6>
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00a      	beq.n	800729c <UART_SetConfig+0xe0>
 8007286:	2280      	movs	r2, #128	; 0x80
 8007288:	00d2      	lsls	r2, r2, #3
 800728a:	4293      	cmp	r3, r2
 800728c:	d035      	beq.n	80072fa <UART_SetConfig+0x13e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800728e:	2001      	movs	r0, #1
 8007290:	e009      	b.n	80072a6 <UART_SetConfig+0xea>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007292:	428b      	cmp	r3, r1
 8007294:	d1fb      	bne.n	800728e <UART_SetConfig+0xd2>
 8007296:	2080      	movs	r0, #128	; 0x80
 8007298:	0200      	lsls	r0, r0, #8
 800729a:	e012      	b.n	80072c2 <UART_SetConfig+0x106>
        pclk = HAL_RCC_GetPCLK1Freq();
 800729c:	f7fe fed0 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80072a0:	2800      	cmp	r0, #0
 80072a2:	d10e      	bne.n	80072c2 <UART_SetConfig+0x106>
 80072a4:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80072a6:	2300      	movs	r3, #0
 80072a8:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 80072aa:	66a3      	str	r3, [r4, #104]	; 0x68
}
 80072ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072ae:	2310      	movs	r3, #16
 80072b0:	6810      	ldr	r0, [r2, #0]
 80072b2:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80072b4:	4243      	negs	r3, r0
 80072b6:	4158      	adcs	r0, r3
 80072b8:	4b49      	ldr	r3, [pc, #292]	; (80073e0 <UART_SetConfig+0x224>)
 80072ba:	4240      	negs	r0, r0
 80072bc:	4018      	ands	r0, r3
 80072be:	4b49      	ldr	r3, [pc, #292]	; (80073e4 <UART_SetConfig+0x228>)
 80072c0:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80072c2:	2203      	movs	r2, #3
 80072c4:	6863      	ldr	r3, [r4, #4]
 80072c6:	435a      	muls	r2, r3
 80072c8:	4282      	cmp	r2, r0
 80072ca:	d8e0      	bhi.n	800728e <UART_SetConfig+0xd2>
          (pclk > (4096U * huart->Init.BaudRate)))
 80072cc:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80072ce:	4282      	cmp	r2, r0
 80072d0:	d3dd      	bcc.n	800728e <UART_SetConfig+0xd2>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80072d2:	2700      	movs	r7, #0
 80072d4:	0e02      	lsrs	r2, r0, #24
 80072d6:	0201      	lsls	r1, r0, #8
 80072d8:	085e      	lsrs	r6, r3, #1
 80072da:	1989      	adds	r1, r1, r6
 80072dc:	417a      	adcs	r2, r7
 80072de:	0008      	movs	r0, r1
 80072e0:	0011      	movs	r1, r2
 80072e2:	001a      	movs	r2, r3
 80072e4:	003b      	movs	r3, r7
 80072e6:	f7f9 f92d 	bl	8000544 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072ea:	4b3f      	ldr	r3, [pc, #252]	; (80073e8 <UART_SetConfig+0x22c>)
 80072ec:	18c2      	adds	r2, r0, r3
 80072ee:	4b3f      	ldr	r3, [pc, #252]	; (80073ec <UART_SetConfig+0x230>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d8cc      	bhi.n	800728e <UART_SetConfig+0xd2>
        huart->Instance->BRR = usartdiv;
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	60d8      	str	r0, [r3, #12]
 80072f8:	e7d4      	b.n	80072a4 <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetSysClockFreq();
 80072fa:	f7fe faff 	bl	80058fc <HAL_RCC_GetSysClockFreq>
        break;
 80072fe:	e7cf      	b.n	80072a0 <UART_SetConfig+0xe4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007300:	4b32      	ldr	r3, [pc, #200]	; (80073cc <UART_SetConfig+0x210>)
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007302:	4a38      	ldr	r2, [pc, #224]	; (80073e4 <UART_SetConfig+0x228>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007304:	6818      	ldr	r0, [r3, #0]
 8007306:	2310      	movs	r3, #16
 8007308:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800730a:	4243      	negs	r3, r0
 800730c:	4158      	adcs	r0, r3
 800730e:	4b34      	ldr	r3, [pc, #208]	; (80073e0 <UART_SetConfig+0x224>)
 8007310:	4240      	negs	r0, r0
 8007312:	4003      	ands	r3, r0
 8007314:	189b      	adds	r3, r3, r2
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007316:	0058      	lsls	r0, r3, #1
 8007318:	6863      	ldr	r3, [r4, #4]
 800731a:	6861      	ldr	r1, [r4, #4]
 800731c:	085b      	lsrs	r3, r3, #1
 800731e:	18c0      	adds	r0, r0, r3
 8007320:	f7f8 ff22 	bl	8000168 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007324:	4932      	ldr	r1, [pc, #200]	; (80073f0 <UART_SetConfig+0x234>)
 8007326:	b282      	uxth	r2, r0
 8007328:	3a10      	subs	r2, #16
 800732a:	0403      	lsls	r3, r0, #16
 800732c:	428a      	cmp	r2, r1
 800732e:	d8ae      	bhi.n	800728e <UART_SetConfig+0xd2>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007330:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007332:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007334:	4390      	bics	r0, r2
 8007336:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8007338:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800733a:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 800733c:	4318      	orrs	r0, r3
 800733e:	60d0      	str	r0, [r2, #12]
 8007340:	e7b0      	b.n	80072a4 <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetSysClockFreq();
 8007342:	f7fe fadb 	bl	80058fc <HAL_RCC_GetSysClockFreq>
 8007346:	e032      	b.n	80073ae <UART_SetConfig+0x1f2>
    switch (clocksource)
 8007348:	2808      	cmp	r0, #8
 800734a:	d8a0      	bhi.n	800728e <UART_SetConfig+0xd2>
 800734c:	f7f8 fee4 	bl	8000118 <__gnu_thumb1_case_sqi>
 8007350:	9f0d0a05 	.word	0x9f0d0a05
 8007354:	9f9f9f23 	.word	0x9f9f9f23
 8007358:	26          	.byte	0x26
 8007359:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 800735a:	f7fe fe71 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800735e:	2800      	cmp	r0, #0
 8007360:	d0a0      	beq.n	80072a4 <UART_SetConfig+0xe8>
 8007362:	e00d      	b.n	8007380 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007364:	f7fe fe7c 	bl	8006060 <HAL_RCC_GetPCLK2Freq>
        break;
 8007368:	e7f9      	b.n	800735e <UART_SetConfig+0x1a2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800736a:	4b18      	ldr	r3, [pc, #96]	; (80073cc <UART_SetConfig+0x210>)
 800736c:	6818      	ldr	r0, [r3, #0]
 800736e:	2310      	movs	r3, #16
 8007370:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007372:	4243      	negs	r3, r0
 8007374:	4158      	adcs	r0, r3
 8007376:	4b1a      	ldr	r3, [pc, #104]	; (80073e0 <UART_SetConfig+0x224>)
 8007378:	4240      	negs	r0, r0
 800737a:	4018      	ands	r0, r3
 800737c:	4b19      	ldr	r3, [pc, #100]	; (80073e4 <UART_SetConfig+0x228>)
 800737e:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007380:	6863      	ldr	r3, [r4, #4]
 8007382:	6861      	ldr	r1, [r4, #4]
 8007384:	085b      	lsrs	r3, r3, #1
 8007386:	1818      	adds	r0, r3, r0
 8007388:	f7f8 feee 	bl	8000168 <__udivsi3>
 800738c:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800738e:	0002      	movs	r2, r0
 8007390:	4b17      	ldr	r3, [pc, #92]	; (80073f0 <UART_SetConfig+0x234>)
 8007392:	3a10      	subs	r2, #16
 8007394:	e7ac      	b.n	80072f0 <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetSysClockFreq();
 8007396:	f7fe fab1 	bl	80058fc <HAL_RCC_GetSysClockFreq>
        break;
 800739a:	e7e0      	b.n	800735e <UART_SetConfig+0x1a2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800739c:	2080      	movs	r0, #128	; 0x80
 800739e:	0200      	lsls	r0, r0, #8
 80073a0:	e7ee      	b.n	8007380 <UART_SetConfig+0x1c4>
 80073a2:	2280      	movs	r2, #128	; 0x80
 80073a4:	0212      	lsls	r2, r2, #8
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d1d7      	bne.n	800735a <UART_SetConfig+0x19e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80073aa:	f7fe fe49 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 80073ae:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 80073b0:	d100      	bne.n	80073b4 <UART_SetConfig+0x1f8>
 80073b2:	e777      	b.n	80072a4 <UART_SetConfig+0xe8>
 80073b4:	e7af      	b.n	8007316 <UART_SetConfig+0x15a>
 80073b6:	46c0      	nop			; (mov r8, r8)
 80073b8:	efff69f3 	.word	0xefff69f3
 80073bc:	ffffcfff 	.word	0xffffcfff
 80073c0:	40004800 	.word	0x40004800
 80073c4:	fffff4ff 	.word	0xfffff4ff
 80073c8:	40013800 	.word	0x40013800
 80073cc:	40021000 	.word	0x40021000
 80073d0:	08011279 	.word	0x08011279
 80073d4:	40004400 	.word	0x40004400
 80073d8:	40004c00 	.word	0x40004c00
 80073dc:	40005000 	.word	0x40005000
 80073e0:	00b71b00 	.word	0x00b71b00
 80073e4:	003d0900 	.word	0x003d0900
 80073e8:	fffffd00 	.word	0xfffffd00
 80073ec:	000ffcff 	.word	0x000ffcff
 80073f0:	0000ffef 	.word	0x0000ffef

080073f4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80073f6:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073f8:	07da      	lsls	r2, r3, #31
 80073fa:	d506      	bpl.n	800740a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073fc:	6801      	ldr	r1, [r0, #0]
 80073fe:	4c28      	ldr	r4, [pc, #160]	; (80074a0 <UART_AdvFeatureConfig+0xac>)
 8007400:	684a      	ldr	r2, [r1, #4]
 8007402:	4022      	ands	r2, r4
 8007404:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8007406:	4322      	orrs	r2, r4
 8007408:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800740a:	079a      	lsls	r2, r3, #30
 800740c:	d506      	bpl.n	800741c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800740e:	6801      	ldr	r1, [r0, #0]
 8007410:	4c24      	ldr	r4, [pc, #144]	; (80074a4 <UART_AdvFeatureConfig+0xb0>)
 8007412:	684a      	ldr	r2, [r1, #4]
 8007414:	4022      	ands	r2, r4
 8007416:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8007418:	4322      	orrs	r2, r4
 800741a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800741c:	075a      	lsls	r2, r3, #29
 800741e:	d506      	bpl.n	800742e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007420:	6801      	ldr	r1, [r0, #0]
 8007422:	4c21      	ldr	r4, [pc, #132]	; (80074a8 <UART_AdvFeatureConfig+0xb4>)
 8007424:	684a      	ldr	r2, [r1, #4]
 8007426:	4022      	ands	r2, r4
 8007428:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800742a:	4322      	orrs	r2, r4
 800742c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800742e:	071a      	lsls	r2, r3, #28
 8007430:	d506      	bpl.n	8007440 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007432:	6801      	ldr	r1, [r0, #0]
 8007434:	4c1d      	ldr	r4, [pc, #116]	; (80074ac <UART_AdvFeatureConfig+0xb8>)
 8007436:	684a      	ldr	r2, [r1, #4]
 8007438:	4022      	ands	r2, r4
 800743a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800743c:	4322      	orrs	r2, r4
 800743e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007440:	06da      	lsls	r2, r3, #27
 8007442:	d506      	bpl.n	8007452 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007444:	6801      	ldr	r1, [r0, #0]
 8007446:	4c1a      	ldr	r4, [pc, #104]	; (80074b0 <UART_AdvFeatureConfig+0xbc>)
 8007448:	688a      	ldr	r2, [r1, #8]
 800744a:	4022      	ands	r2, r4
 800744c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800744e:	4322      	orrs	r2, r4
 8007450:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007452:	069a      	lsls	r2, r3, #26
 8007454:	d506      	bpl.n	8007464 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007456:	6801      	ldr	r1, [r0, #0]
 8007458:	4c16      	ldr	r4, [pc, #88]	; (80074b4 <UART_AdvFeatureConfig+0xc0>)
 800745a:	688a      	ldr	r2, [r1, #8]
 800745c:	4022      	ands	r2, r4
 800745e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8007460:	4322      	orrs	r2, r4
 8007462:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007464:	065a      	lsls	r2, r3, #25
 8007466:	d510      	bpl.n	800748a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007468:	6801      	ldr	r1, [r0, #0]
 800746a:	4d13      	ldr	r5, [pc, #76]	; (80074b8 <UART_AdvFeatureConfig+0xc4>)
 800746c:	684a      	ldr	r2, [r1, #4]
 800746e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8007470:	402a      	ands	r2, r5
 8007472:	4322      	orrs	r2, r4
 8007474:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007476:	2280      	movs	r2, #128	; 0x80
 8007478:	0352      	lsls	r2, r2, #13
 800747a:	4294      	cmp	r4, r2
 800747c:	d105      	bne.n	800748a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800747e:	684a      	ldr	r2, [r1, #4]
 8007480:	4c0e      	ldr	r4, [pc, #56]	; (80074bc <UART_AdvFeatureConfig+0xc8>)
 8007482:	4022      	ands	r2, r4
 8007484:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8007486:	4322      	orrs	r2, r4
 8007488:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800748a:	061b      	lsls	r3, r3, #24
 800748c:	d506      	bpl.n	800749c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800748e:	6802      	ldr	r2, [r0, #0]
 8007490:	490b      	ldr	r1, [pc, #44]	; (80074c0 <UART_AdvFeatureConfig+0xcc>)
 8007492:	6853      	ldr	r3, [r2, #4]
 8007494:	400b      	ands	r3, r1
 8007496:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007498:	430b      	orrs	r3, r1
 800749a:	6053      	str	r3, [r2, #4]
}
 800749c:	bd30      	pop	{r4, r5, pc}
 800749e:	46c0      	nop			; (mov r8, r8)
 80074a0:	fffdffff 	.word	0xfffdffff
 80074a4:	fffeffff 	.word	0xfffeffff
 80074a8:	fffbffff 	.word	0xfffbffff
 80074ac:	ffff7fff 	.word	0xffff7fff
 80074b0:	ffffefff 	.word	0xffffefff
 80074b4:	ffffdfff 	.word	0xffffdfff
 80074b8:	ffefffff 	.word	0xffefffff
 80074bc:	ff9fffff 	.word	0xff9fffff
 80074c0:	fff7ffff 	.word	0xfff7ffff

080074c4 <UART_WaitOnFlagUntilTimeout>:
{
 80074c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074c6:	2780      	movs	r7, #128	; 0x80
{
 80074c8:	0004      	movs	r4, r0
 80074ca:	000d      	movs	r5, r1
 80074cc:	0016      	movs	r6, r2
 80074ce:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074d0:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074d2:	6822      	ldr	r2, [r4, #0]
 80074d4:	69d3      	ldr	r3, [r2, #28]
 80074d6:	402b      	ands	r3, r5
 80074d8:	1b5b      	subs	r3, r3, r5
 80074da:	4259      	negs	r1, r3
 80074dc:	414b      	adcs	r3, r1
 80074de:	42b3      	cmp	r3, r6
 80074e0:	d001      	beq.n	80074e6 <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 80074e2:	2000      	movs	r0, #0
 80074e4:	e01c      	b.n	8007520 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80074e6:	9b08      	ldr	r3, [sp, #32]
 80074e8:	3301      	adds	r3, #1
 80074ea:	d0f3      	beq.n	80074d4 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ec:	f7fc fe54 	bl	8004198 <HAL_GetTick>
 80074f0:	9b01      	ldr	r3, [sp, #4]
 80074f2:	9a08      	ldr	r2, [sp, #32]
 80074f4:	1ac0      	subs	r0, r0, r3
 80074f6:	6823      	ldr	r3, [r4, #0]
 80074f8:	4290      	cmp	r0, r2
 80074fa:	d801      	bhi.n	8007500 <UART_WaitOnFlagUntilTimeout+0x3c>
 80074fc:	2a00      	cmp	r2, #0
 80074fe:	d110      	bne.n	8007522 <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	4913      	ldr	r1, [pc, #76]	; (8007550 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8007504:	400a      	ands	r2, r1
 8007506:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007508:	689a      	ldr	r2, [r3, #8]
 800750a:	31a3      	adds	r1, #163	; 0xa3
 800750c:	31ff      	adds	r1, #255	; 0xff
 800750e:	438a      	bics	r2, r1
 8007510:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8007512:	2320      	movs	r3, #32
 8007514:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007516:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8007518:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800751a:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800751c:	3474      	adds	r4, #116	; 0x74
 800751e:	7023      	strb	r3, [r4, #0]
}
 8007520:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007522:	2104      	movs	r1, #4
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	420a      	tst	r2, r1
 8007528:	d0d3      	beq.n	80074d2 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800752a:	69da      	ldr	r2, [r3, #28]
 800752c:	423a      	tst	r2, r7
 800752e:	d0d0      	beq.n	80074d2 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007530:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	4906      	ldr	r1, [pc, #24]	; (8007550 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8007536:	400a      	ands	r2, r1
 8007538:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800753a:	689a      	ldr	r2, [r3, #8]
 800753c:	31a3      	adds	r1, #163	; 0xa3
 800753e:	31ff      	adds	r1, #255	; 0xff
 8007540:	438a      	bics	r2, r1
 8007542:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8007544:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007546:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 8007548:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800754a:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800754c:	67d3      	str	r3, [r2, #124]	; 0x7c
 800754e:	e7e3      	b.n	8007518 <UART_WaitOnFlagUntilTimeout+0x54>
 8007550:	fffffe5f 	.word	0xfffffe5f

08007554 <UART_CheckIdleState>:
{
 8007554:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007556:	2600      	movs	r6, #0
{
 8007558:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800755a:	1d03      	adds	r3, r0, #4
 800755c:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800755e:	f7fc fe1b 	bl	8004198 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007562:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8007564:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	071b      	lsls	r3, r3, #28
 800756a:	d416      	bmi.n	800759a <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800756c:	6823      	ldr	r3, [r4, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	075b      	lsls	r3, r3, #29
 8007572:	d50a      	bpl.n	800758a <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007574:	2180      	movs	r1, #128	; 0x80
 8007576:	4b0f      	ldr	r3, [pc, #60]	; (80075b4 <UART_CheckIdleState+0x60>)
 8007578:	2200      	movs	r2, #0
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	0020      	movs	r0, r4
 800757e:	002b      	movs	r3, r5
 8007580:	03c9      	lsls	r1, r1, #15
 8007582:	f7ff ff9f 	bl	80074c4 <UART_WaitOnFlagUntilTimeout>
 8007586:	2800      	cmp	r0, #0
 8007588:	d112      	bne.n	80075b0 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 800758a:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800758c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800758e:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007590:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007592:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8007594:	3474      	adds	r4, #116	; 0x74
 8007596:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8007598:	e00b      	b.n	80075b2 <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800759a:	2180      	movs	r1, #128	; 0x80
 800759c:	4b05      	ldr	r3, [pc, #20]	; (80075b4 <UART_CheckIdleState+0x60>)
 800759e:	0032      	movs	r2, r6
 80075a0:	9300      	str	r3, [sp, #0]
 80075a2:	0389      	lsls	r1, r1, #14
 80075a4:	0003      	movs	r3, r0
 80075a6:	0020      	movs	r0, r4
 80075a8:	f7ff ff8c 	bl	80074c4 <UART_WaitOnFlagUntilTimeout>
 80075ac:	2800      	cmp	r0, #0
 80075ae:	d0dd      	beq.n	800756c <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80075b0:	2003      	movs	r0, #3
}
 80075b2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80075b4:	01ffffff 	.word	0x01ffffff

080075b8 <HAL_UART_Init>:
{
 80075b8:	b510      	push	{r4, lr}
 80075ba:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80075bc:	d101      	bne.n	80075c2 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80075be:	2001      	movs	r0, #1
}
 80075c0:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80075c2:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d104      	bne.n	80075d2 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80075c8:	0002      	movs	r2, r0
 80075ca:	3274      	adds	r2, #116	; 0x74
 80075cc:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80075ce:	f7fc fe3d 	bl	800424c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80075d2:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80075d4:	2101      	movs	r1, #1
 80075d6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80075d8:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80075da:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075dc:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80075de:	438b      	bics	r3, r1
 80075e0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075e2:	f7ff fdeb 	bl	80071bc <UART_SetConfig>
 80075e6:	2801      	cmp	r0, #1
 80075e8:	d0e9      	beq.n	80075be <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d002      	beq.n	80075f6 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80075f0:	0020      	movs	r0, r4
 80075f2:	f7ff feff 	bl	80073f4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	4907      	ldr	r1, [pc, #28]	; (8007618 <HAL_UART_Init+0x60>)
 80075fa:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80075fc:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075fe:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007600:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007602:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007604:	689a      	ldr	r2, [r3, #8]
 8007606:	438a      	bics	r2, r1
 8007608:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800760a:	2201      	movs	r2, #1
 800760c:	6819      	ldr	r1, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8007612:	f7ff ff9f 	bl	8007554 <UART_CheckIdleState>
 8007616:	e7d3      	b.n	80075c0 <HAL_UART_Init+0x8>
 8007618:	ffffb7ff 	.word	0xffffb7ff

0800761c <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 800761c:	0003      	movs	r3, r0
 800761e:	3358      	adds	r3, #88	; 0x58
{
 8007620:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 8007622:	6541      	str	r1, [r0, #84]	; 0x54
  UART_MASK_COMPUTATION(huart);
 8007624:	2480      	movs	r4, #128	; 0x80
  huart->RxXferSize  = Size;
 8007626:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 8007628:	805a      	strh	r2, [r3, #2]
  huart->RxISR       = NULL;
 800762a:	2200      	movs	r2, #0
  UART_MASK_COMPUTATION(huart);
 800762c:	6881      	ldr	r1, [r0, #8]
  huart->RxISR       = NULL;
 800762e:	6642      	str	r2, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8007630:	0164      	lsls	r4, r4, #5
 8007632:	3304      	adds	r3, #4
 8007634:	42a1      	cmp	r1, r4
 8007636:	d124      	bne.n	8007682 <UART_Start_Receive_IT+0x66>
 8007638:	6902      	ldr	r2, [r0, #16]
 800763a:	2a00      	cmp	r2, #0
 800763c:	d11f      	bne.n	800767e <UART_Start_Receive_IT+0x62>
 800763e:	4a19      	ldr	r2, [pc, #100]	; (80076a4 <UART_Start_Receive_IT+0x88>)
 8007640:	801a      	strh	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007642:	2200      	movs	r2, #0
 8007644:	1d03      	adds	r3, r0, #4
 8007646:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007648:	2322      	movs	r3, #34	; 0x22
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800764a:	6802      	ldr	r2, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800764c:	67c3      	str	r3, [r0, #124]	; 0x7c
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800764e:	6894      	ldr	r4, [r2, #8]
 8007650:	3b21      	subs	r3, #33	; 0x21
 8007652:	4323      	orrs	r3, r4
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007654:	2480      	movs	r4, #128	; 0x80
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007656:	6093      	str	r3, [r2, #8]
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007658:	0164      	lsls	r4, r4, #5
    huart->RxISR = UART_RxISR_8BIT;
 800765a:	4b13      	ldr	r3, [pc, #76]	; (80076a8 <UART_Start_Receive_IT+0x8c>)
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800765c:	42a1      	cmp	r1, r4
 800765e:	d103      	bne.n	8007668 <UART_Start_Receive_IT+0x4c>
 8007660:	6901      	ldr	r1, [r0, #16]
 8007662:	2900      	cmp	r1, #0
 8007664:	d100      	bne.n	8007668 <UART_Start_Receive_IT+0x4c>
    huart->RxISR = UART_RxISR_16BIT;
 8007666:	4b11      	ldr	r3, [pc, #68]	; (80076ac <UART_Start_Receive_IT+0x90>)
 8007668:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 800766a:	0003      	movs	r3, r0
 800766c:	2000      	movs	r0, #0
 800766e:	3374      	adds	r3, #116	; 0x74
 8007670:	7018      	strb	r0, [r3, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007672:	2390      	movs	r3, #144	; 0x90
 8007674:	6811      	ldr	r1, [r2, #0]
 8007676:	005b      	lsls	r3, r3, #1
 8007678:	430b      	orrs	r3, r1
 800767a:	6013      	str	r3, [r2, #0]
}
 800767c:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 800767e:	22ff      	movs	r2, #255	; 0xff
 8007680:	e7de      	b.n	8007640 <UART_Start_Receive_IT+0x24>
 8007682:	2900      	cmp	r1, #0
 8007684:	d104      	bne.n	8007690 <UART_Start_Receive_IT+0x74>
 8007686:	6902      	ldr	r2, [r0, #16]
 8007688:	2a00      	cmp	r2, #0
 800768a:	d0f8      	beq.n	800767e <UART_Start_Receive_IT+0x62>
 800768c:	227f      	movs	r2, #127	; 0x7f
 800768e:	e7d7      	b.n	8007640 <UART_Start_Receive_IT+0x24>
 8007690:	2480      	movs	r4, #128	; 0x80
 8007692:	0564      	lsls	r4, r4, #21
 8007694:	42a1      	cmp	r1, r4
 8007696:	d1d3      	bne.n	8007640 <UART_Start_Receive_IT+0x24>
 8007698:	6902      	ldr	r2, [r0, #16]
 800769a:	2a00      	cmp	r2, #0
 800769c:	d0f6      	beq.n	800768c <UART_Start_Receive_IT+0x70>
 800769e:	223f      	movs	r2, #63	; 0x3f
 80076a0:	e7ce      	b.n	8007640 <UART_Start_Receive_IT+0x24>
 80076a2:	46c0      	nop			; (mov r8, r8)
 80076a4:	000001ff 	.word	0x000001ff
 80076a8:	080070b9 	.word	0x080070b9
 80076ac:	0800713d 	.word	0x0800713d

080076b0 <HAL_UART_Receive_IT>:
{
 80076b0:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80076b2:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    return HAL_BUSY;
 80076b4:	2302      	movs	r3, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 80076b6:	2c20      	cmp	r4, #32
 80076b8:	d129      	bne.n	800770e <HAL_UART_Receive_IT+0x5e>
      return HAL_ERROR;
 80076ba:	3b01      	subs	r3, #1
    if ((pData == NULL) || (Size == 0U))
 80076bc:	2900      	cmp	r1, #0
 80076be:	d026      	beq.n	800770e <HAL_UART_Receive_IT+0x5e>
 80076c0:	2a00      	cmp	r2, #0
 80076c2:	d024      	beq.n	800770e <HAL_UART_Receive_IT+0x5e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076c4:	2380      	movs	r3, #128	; 0x80
 80076c6:	6884      	ldr	r4, [r0, #8]
 80076c8:	015b      	lsls	r3, r3, #5
 80076ca:	429c      	cmp	r4, r3
 80076cc:	d106      	bne.n	80076dc <HAL_UART_Receive_IT+0x2c>
 80076ce:	6903      	ldr	r3, [r0, #16]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d103      	bne.n	80076dc <HAL_UART_Receive_IT+0x2c>
      if ((((uint32_t)pData) & 1U) != 0U)
 80076d4:	2401      	movs	r4, #1
      return HAL_ERROR;
 80076d6:	0023      	movs	r3, r4
      if ((((uint32_t)pData) & 1U) != 0U)
 80076d8:	4221      	tst	r1, r4
 80076da:	d118      	bne.n	800770e <HAL_UART_Receive_IT+0x5e>
    __HAL_LOCK(huart);
 80076dc:	0004      	movs	r4, r0
 80076de:	3474      	adds	r4, #116	; 0x74
 80076e0:	7825      	ldrb	r5, [r4, #0]
    return HAL_BUSY;
 80076e2:	2302      	movs	r3, #2
    __HAL_LOCK(huart);
 80076e4:	2d01      	cmp	r5, #1
 80076e6:	d012      	beq.n	800770e <HAL_UART_Receive_IT+0x5e>
 80076e8:	3b01      	subs	r3, #1
 80076ea:	7023      	strb	r3, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ec:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80076ee:	4c09      	ldr	r4, [pc, #36]	; (8007714 <HAL_UART_Receive_IT+0x64>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076f0:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80076f2:	6803      	ldr	r3, [r0, #0]
 80076f4:	42a3      	cmp	r3, r4
 80076f6:	d007      	beq.n	8007708 <HAL_UART_Receive_IT+0x58>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80076f8:	685c      	ldr	r4, [r3, #4]
 80076fa:	0224      	lsls	r4, r4, #8
 80076fc:	d504      	bpl.n	8007708 <HAL_UART_Receive_IT+0x58>
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076fe:	2480      	movs	r4, #128	; 0x80
 8007700:	681d      	ldr	r5, [r3, #0]
 8007702:	04e4      	lsls	r4, r4, #19
 8007704:	432c      	orrs	r4, r5
 8007706:	601c      	str	r4, [r3, #0]
    return(UART_Start_Receive_IT(huart, pData, Size));
 8007708:	f7ff ff88 	bl	800761c <UART_Start_Receive_IT>
 800770c:	0003      	movs	r3, r0
}
 800770e:	0018      	movs	r0, r3
 8007710:	bd70      	pop	{r4, r5, r6, pc}
 8007712:	46c0      	nop			; (mov r8, r8)
 8007714:	40004800 	.word	0x40004800

08007718 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007718:	4770      	bx	lr
	...

0800771c <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800771c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800771e:	0005      	movs	r5, r0
{
 8007720:	9102      	str	r1, [sp, #8]
 8007722:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(huart);
 8007724:	3574      	adds	r5, #116	; 0x74
 8007726:	782b      	ldrb	r3, [r5, #0]
{
 8007728:	0004      	movs	r4, r0
 800772a:	ae02      	add	r6, sp, #8
  __HAL_LOCK(huart);
 800772c:	2002      	movs	r0, #2
 800772e:	2b01      	cmp	r3, #1
 8007730:	d030      	beq.n	8007794 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8007732:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8007734:	3801      	subs	r0, #1
 8007736:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007738:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800773a:	6823      	ldr	r3, [r4, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	4382      	bics	r2, r0
 8007740:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8007742:	689a      	ldr	r2, [r3, #8]
 8007744:	4815      	ldr	r0, [pc, #84]	; (800779c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x80>)
 8007746:	4002      	ands	r2, r0
 8007748:	430a      	orrs	r2, r1
 800774a:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800774c:	2900      	cmp	r1, #0
 800774e:	d10c      	bne.n	800776a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x4e>
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007750:	2210      	movs	r2, #16
 8007752:	6859      	ldr	r1, [r3, #4]
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8007754:	79b0      	ldrb	r0, [r6, #6]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007756:	4391      	bics	r1, r2
 8007758:	88b2      	ldrh	r2, [r6, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800775a:	0600      	lsls	r0, r0, #24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800775c:	4311      	orrs	r1, r2
 800775e:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8007760:	685a      	ldr	r2, [r3, #4]
 8007762:	0212      	lsls	r2, r2, #8
 8007764:	0a12      	lsrs	r2, r2, #8
 8007766:	4302      	orrs	r2, r0
 8007768:	605a      	str	r2, [r3, #4]
  __HAL_UART_ENABLE(huart);
 800776a:	2201      	movs	r2, #1
 800776c:	6819      	ldr	r1, [r3, #0]
 800776e:	430a      	orrs	r2, r1
 8007770:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8007772:	f7fc fd11 	bl	8004198 <HAL_GetTick>
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007776:	2180      	movs	r1, #128	; 0x80
 8007778:	4a09      	ldr	r2, [pc, #36]	; (80077a0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x84>)
  tickstart = HAL_GetTick();
 800777a:	0003      	movs	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800777c:	9200      	str	r2, [sp, #0]
 800777e:	0020      	movs	r0, r4
 8007780:	2200      	movs	r2, #0
 8007782:	03c9      	lsls	r1, r1, #15
 8007784:	f7ff fe9e 	bl	80074c4 <UART_WaitOnFlagUntilTimeout>
 8007788:	2800      	cmp	r0, #0
 800778a:	d105      	bne.n	8007798 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 800778c:	2320      	movs	r3, #32
 800778e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8007790:	2300      	movs	r3, #0
 8007792:	702b      	strb	r3, [r5, #0]
}
 8007794:	b004      	add	sp, #16
 8007796:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_TIMEOUT;
 8007798:	2003      	movs	r0, #3
 800779a:	e7f9      	b.n	8007790 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
 800779c:	ffcfffff 	.word	0xffcfffff
 80077a0:	01ffffff 	.word	0x01ffffff

080077a4 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 80077a4:	0001      	movs	r1, r0
 80077a6:	2302      	movs	r3, #2
{
 80077a8:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 80077aa:	3174      	adds	r1, #116	; 0x74
 80077ac:	780c      	ldrb	r4, [r1, #0]
{
 80077ae:	0002      	movs	r2, r0
  __HAL_LOCK(huart);
 80077b0:	0018      	movs	r0, r3
 80077b2:	2c01      	cmp	r4, #1
 80077b4:	d005      	beq.n	80077c2 <HAL_UARTEx_EnableStopMode+0x1e>
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80077b6:	6812      	ldr	r2, [r2, #0]
 80077b8:	6810      	ldr	r0, [r2, #0]
 80077ba:	4303      	orrs	r3, r0
  __HAL_UNLOCK(huart);
 80077bc:	2000      	movs	r0, #0
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80077be:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 80077c0:	7008      	strb	r0, [r1, #0]
}
 80077c2:	bd10      	pop	{r4, pc}

080077c4 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 80077c4:	b510      	push	{r4, lr}
 80077c6:	0004      	movs	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 80077c8:	2210      	movs	r2, #16
 80077ca:	2100      	movs	r1, #0
 80077cc:	30f1      	adds	r0, #241	; 0xf1
 80077ce:	f007 fb25 	bl	800ee1c <memset1>
    ctx->M_n = 0;
 80077d2:	0023      	movs	r3, r4
 80077d4:	2100      	movs	r1, #0
 80077d6:	33fc      	adds	r3, #252	; 0xfc
    memset1( ctx->rijndael.ksch, '\0', 240 );
 80077d8:	22f0      	movs	r2, #240	; 0xf0
 80077da:	0020      	movs	r0, r4
    ctx->M_n = 0;
 80077dc:	6199      	str	r1, [r3, #24]
    memset1( ctx->rijndael.ksch, '\0', 240 );
 80077de:	f007 fb1d 	bl	800ee1c <memset1>
}
 80077e2:	bd10      	pop	{r4, pc}

080077e4 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 80077e4:	b510      	push	{r4, lr}
 80077e6:	0002      	movs	r2, r0
 80077e8:	0008      	movs	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 80077ea:	2110      	movs	r1, #16
 80077ec:	f000 f9a0 	bl	8007b30 <lorawan_aes_set_key>
}
 80077f0:	bd10      	pop	{r4, pc}

080077f2 <AES_CMAC_Update>:
void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 80077f2:	0003      	movs	r3, r0
{
 80077f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077f6:	0004      	movs	r4, r0
    if( ctx->M_n > 0 )
 80077f8:	33fc      	adds	r3, #252	; 0xfc
 80077fa:	6998      	ldr	r0, [r3, #24]
 80077fc:	1ca3      	adds	r3, r4, #2
{
 80077fe:	b087      	sub	sp, #28
 8007800:	33ff      	adds	r3, #255	; 0xff
 8007802:	000e      	movs	r6, r1
 8007804:	0015      	movs	r5, r2
 8007806:	9301      	str	r3, [sp, #4]
    if( ctx->M_n > 0 )
 8007808:	2800      	cmp	r0, #0
 800780a:	d036      	beq.n	800787a <AES_CMAC_Update+0x88>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800780c:	2710      	movs	r7, #16
 800780e:	1a3f      	subs	r7, r7, r0
 8007810:	9700      	str	r7, [sp, #0]
 8007812:	4297      	cmp	r7, r2
 8007814:	d900      	bls.n	8007818 <AES_CMAC_Update+0x26>
 8007816:	9200      	str	r2, [sp, #0]
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8007818:	466b      	mov	r3, sp
 800781a:	881a      	ldrh	r2, [r3, #0]
 800781c:	1ca3      	adds	r3, r4, #2
 800781e:	33ff      	adds	r3, #255	; 0xff
 8007820:	0031      	movs	r1, r6
 8007822:	1818      	adds	r0, r3, r0
 8007824:	f007 fae4 	bl	800edf0 <memcpy1>
        ctx->M_n += mlen;
 8007828:	0022      	movs	r2, r4
 800782a:	32fc      	adds	r2, #252	; 0xfc
 800782c:	6991      	ldr	r1, [r2, #24]
 800782e:	9b00      	ldr	r3, [sp, #0]
 8007830:	185b      	adds	r3, r3, r1
 8007832:	6193      	str	r3, [r2, #24]
        if( ctx->M_n < 16 || len == mlen )
 8007834:	2b0f      	cmp	r3, #15
 8007836:	d929      	bls.n	800788c <AES_CMAC_Update+0x9a>
 8007838:	42af      	cmp	r7, r5
 800783a:	d227      	bcs.n	800788c <AES_CMAC_Update+0x9a>
 800783c:	0023      	movs	r3, r4
 800783e:	1ca1      	adds	r1, r4, #2
 8007840:	33f1      	adds	r3, #241	; 0xf1
 8007842:	31ff      	adds	r1, #255	; 0xff
            return;
        XOR( ctx->M_last, ctx->X );
 8007844:	781a      	ldrb	r2, [r3, #0]
 8007846:	7c18      	ldrb	r0, [r3, #16]
 8007848:	4042      	eors	r2, r0
 800784a:	701a      	strb	r2, [r3, #0]
 800784c:	3301      	adds	r3, #1
 800784e:	428b      	cmp	r3, r1
 8007850:	d1f8      	bne.n	8007844 <AES_CMAC_Update+0x52>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8007852:	0027      	movs	r7, r4
 8007854:	37f1      	adds	r7, #241	; 0xf1
 8007856:	2210      	movs	r2, #16
 8007858:	0039      	movs	r1, r7
 800785a:	a802      	add	r0, sp, #8
 800785c:	f007 fac8 	bl	800edf0 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8007860:	a902      	add	r1, sp, #8
 8007862:	0022      	movs	r2, r4
 8007864:	0008      	movs	r0, r1
 8007866:	f000 f9e9 	bl	8007c3c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800786a:	2210      	movs	r2, #16
 800786c:	0038      	movs	r0, r7
 800786e:	a902      	add	r1, sp, #8
 8007870:	f007 fabe 	bl	800edf0 <memcpy1>

        data += mlen;
 8007874:	9b00      	ldr	r3, [sp, #0]
 8007876:	18f6      	adds	r6, r6, r3
        len -= mlen;
 8007878:	1aed      	subs	r5, r5, r3
    }
    while( len > 16 )
 800787a:	2d10      	cmp	r5, #16
 800787c:	d808      	bhi.n	8007890 <AES_CMAC_Update+0x9e>

        data += 16;
        len -= 16;
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800787e:	0031      	movs	r1, r6
 8007880:	9801      	ldr	r0, [sp, #4]
 8007882:	b2aa      	uxth	r2, r5
    ctx->M_n = len;
 8007884:	34fc      	adds	r4, #252	; 0xfc
    memcpy1( ctx->M_last, data, len );
 8007886:	f007 fab3 	bl	800edf0 <memcpy1>
    ctx->M_n = len;
 800788a:	61a5      	str	r5, [r4, #24]
}
 800788c:	b007      	add	sp, #28
 800788e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007890:	0023      	movs	r3, r4
 8007892:	0032      	movs	r2, r6
 8007894:	1ca0      	adds	r0, r4, #2
 8007896:	33f1      	adds	r3, #241	; 0xf1
 8007898:	30ff      	adds	r0, #255	; 0xff
        XOR( data, ctx->X );
 800789a:	7819      	ldrb	r1, [r3, #0]
 800789c:	7817      	ldrb	r7, [r2, #0]
 800789e:	3201      	adds	r2, #1
 80078a0:	4079      	eors	r1, r7
 80078a2:	7019      	strb	r1, [r3, #0]
 80078a4:	3301      	adds	r3, #1
 80078a6:	4283      	cmp	r3, r0
 80078a8:	d1f7      	bne.n	800789a <AES_CMAC_Update+0xa8>
        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80078aa:	0027      	movs	r7, r4
 80078ac:	37f1      	adds	r7, #241	; 0xf1
 80078ae:	2210      	movs	r2, #16
 80078b0:	0039      	movs	r1, r7
 80078b2:	a802      	add	r0, sp, #8
 80078b4:	f007 fa9c 	bl	800edf0 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 80078b8:	a902      	add	r1, sp, #8
 80078ba:	0022      	movs	r2, r4
 80078bc:	0008      	movs	r0, r1
 80078be:	f000 f9bd 	bl	8007c3c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 80078c2:	2210      	movs	r2, #16
 80078c4:	0038      	movs	r0, r7
 80078c6:	a902      	add	r1, sp, #8
 80078c8:	f007 fa92 	bl	800edf0 <memcpy1>
        data += 16;
 80078cc:	3610      	adds	r6, #16
        len -= 16;
 80078ce:	3d10      	subs	r5, #16
 80078d0:	e7d3      	b.n	800787a <AES_CMAC_Update+0x88>

080078d2 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 80078d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078d4:	000c      	movs	r4, r1
 80078d6:	b089      	sub	sp, #36	; 0x24
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 80078d8:	2210      	movs	r2, #16
 80078da:	2100      	movs	r1, #0
{
 80078dc:	0005      	movs	r5, r0
    memset1( K, '\0', 16 );
 80078de:	4668      	mov	r0, sp
 80078e0:	f007 fa9c 	bl	800ee1c <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 80078e4:	0022      	movs	r2, r4
 80078e6:	4669      	mov	r1, sp
 80078e8:	4668      	mov	r0, sp
 80078ea:	f000 f9a7 	bl	8007c3c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 80078ee:	466b      	mov	r3, sp
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	2b7f      	cmp	r3, #127	; 0x7f
 80078f4:	d940      	bls.n	8007978 <AES_CMAC_Final+0xa6>
 80078f6:	466b      	mov	r3, sp
    {
        LSHIFT( K, K );
 80078f8:	2100      	movs	r1, #0
 80078fa:	781a      	ldrb	r2, [r3, #0]
 80078fc:	7858      	ldrb	r0, [r3, #1]
 80078fe:	0052      	lsls	r2, r2, #1
 8007900:	09c0      	lsrs	r0, r0, #7
 8007902:	4302      	orrs	r2, r0
 8007904:	3101      	adds	r1, #1
 8007906:	701a      	strb	r2, [r3, #0]
 8007908:	3301      	adds	r3, #1
 800790a:	290f      	cmp	r1, #15
 800790c:	d1f5      	bne.n	80078fa <AES_CMAC_Final+0x28>
 800790e:	466b      	mov	r3, sp
 8007910:	7bda      	ldrb	r2, [r3, #15]
        K[15] ^= 0x87;
 8007912:	2379      	movs	r3, #121	; 0x79
        LSHIFT( K, K );
 8007914:	0052      	lsls	r2, r2, #1
        K[15] ^= 0x87;
 8007916:	425b      	negs	r3, r3
 8007918:	4053      	eors	r3, r2
    }
    else
        LSHIFT( K, K );

    if( ctx->M_n == 16 )
 800791a:	0020      	movs	r0, r4
        LSHIFT( K, K );
 800791c:	466a      	mov	r2, sp
    if( ctx->M_n == 16 )
 800791e:	30fc      	adds	r0, #252	; 0xfc
 8007920:	6986      	ldr	r6, [r0, #24]
        LSHIFT( K, K );
 8007922:	73d3      	strb	r3, [r2, #15]
    if( ctx->M_n == 16 )
 8007924:	2e10      	cmp	r6, #16
 8007926:	d137      	bne.n	8007998 <AES_CMAC_Final+0xc6>
 8007928:	466a      	mov	r2, sp
 800792a:	1ca3      	adds	r3, r4, #2
 800792c:	33ff      	adds	r3, #255	; 0xff
 800792e:	3015      	adds	r0, #21
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 8007930:	7819      	ldrb	r1, [r3, #0]
 8007932:	7816      	ldrb	r6, [r2, #0]
 8007934:	3201      	adds	r2, #1
 8007936:	4071      	eors	r1, r6
 8007938:	7019      	strb	r1, [r3, #0]
 800793a:	3301      	adds	r3, #1
 800793c:	4298      	cmp	r0, r3
 800793e:	d1f7      	bne.n	8007930 <AES_CMAC_Final+0x5e>
 8007940:	0023      	movs	r3, r4
 8007942:	33f1      	adds	r3, #241	; 0xf1
 8007944:	0019      	movs	r1, r3
 8007946:	1ca0      	adds	r0, r4, #2
 8007948:	30ff      	adds	r0, #255	; 0xff
        while( ++ctx->M_n < 16 )
            ctx->M_last[ctx->M_n] = 0;

        XOR( K, ctx->M_last );
    }
    XOR( ctx->M_last, ctx->X );
 800794a:	781a      	ldrb	r2, [r3, #0]
 800794c:	7c1e      	ldrb	r6, [r3, #16]
 800794e:	4072      	eors	r2, r6
 8007950:	701a      	strb	r2, [r3, #0]
 8007952:	3301      	adds	r3, #1
 8007954:	4298      	cmp	r0, r3
 8007956:	d1f8      	bne.n	800794a <AES_CMAC_Final+0x78>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8007958:	a804      	add	r0, sp, #16
 800795a:	2210      	movs	r2, #16
 800795c:	f007 fa48 	bl	800edf0 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8007960:	0022      	movs	r2, r4
 8007962:	0029      	movs	r1, r5
 8007964:	a804      	add	r0, sp, #16
 8007966:	f000 f969 	bl	8007c3c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800796a:	2210      	movs	r2, #16
 800796c:	2100      	movs	r1, #0
 800796e:	4668      	mov	r0, sp
 8007970:	f007 fa54 	bl	800ee1c <memset1>
}
 8007974:	b009      	add	sp, #36	; 0x24
 8007976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007978:	466b      	mov	r3, sp
        LSHIFT( K, K );
 800797a:	2100      	movs	r1, #0
 800797c:	781a      	ldrb	r2, [r3, #0]
 800797e:	7858      	ldrb	r0, [r3, #1]
 8007980:	0052      	lsls	r2, r2, #1
 8007982:	09c0      	lsrs	r0, r0, #7
 8007984:	4302      	orrs	r2, r0
 8007986:	3101      	adds	r1, #1
 8007988:	701a      	strb	r2, [r3, #0]
 800798a:	3301      	adds	r3, #1
 800798c:	290f      	cmp	r1, #15
 800798e:	d1f5      	bne.n	800797c <AES_CMAC_Final+0xaa>
 8007990:	466b      	mov	r3, sp
 8007992:	7bdb      	ldrb	r3, [r3, #15]
 8007994:	005b      	lsls	r3, r3, #1
 8007996:	e7c0      	b.n	800791a <AES_CMAC_Final+0x48>
        if( K[0] & 0x80 )
 8007998:	7813      	ldrb	r3, [r2, #0]
 800799a:	2b7f      	cmp	r3, #127	; 0x7f
 800799c:	d932      	bls.n	8007a04 <AES_CMAC_Final+0x132>
 800799e:	466b      	mov	r3, sp
            LSHIFT( K, K );
 80079a0:	2100      	movs	r1, #0
 80079a2:	781a      	ldrb	r2, [r3, #0]
 80079a4:	785f      	ldrb	r7, [r3, #1]
 80079a6:	0052      	lsls	r2, r2, #1
 80079a8:	09ff      	lsrs	r7, r7, #7
 80079aa:	433a      	orrs	r2, r7
 80079ac:	3101      	adds	r1, #1
 80079ae:	701a      	strb	r2, [r3, #0]
 80079b0:	3301      	adds	r3, #1
 80079b2:	290f      	cmp	r1, #15
 80079b4:	d1f5      	bne.n	80079a2 <AES_CMAC_Final+0xd0>
 80079b6:	466b      	mov	r3, sp
 80079b8:	7bda      	ldrb	r2, [r3, #15]
            K[15] ^= 0x87;
 80079ba:	2379      	movs	r3, #121	; 0x79
            LSHIFT( K, K );
 80079bc:	0052      	lsls	r2, r2, #1
            K[15] ^= 0x87;
 80079be:	425b      	negs	r3, r3
 80079c0:	4053      	eors	r3, r2
            LSHIFT( K, K );
 80079c2:	466a      	mov	r2, sp
 80079c4:	73d3      	strb	r3, [r2, #15]
        ctx->M_last[ctx->M_n] = 0x80;
 80079c6:	2280      	movs	r2, #128	; 0x80
 80079c8:	19a3      	adds	r3, r4, r6
 80079ca:	33ff      	adds	r3, #255	; 0xff
 80079cc:	1c77      	adds	r7, r6, #1
 80079ce:	709a      	strb	r2, [r3, #2]
        while( ++ctx->M_n < 16 )
 80079d0:	0039      	movs	r1, r7
            ctx->M_last[ctx->M_n] = 0;
 80079d2:	2200      	movs	r2, #0
 80079d4:	1ca3      	adds	r3, r4, #2
 80079d6:	33ff      	adds	r3, #255	; 0xff
        while( ++ctx->M_n < 16 )
 80079d8:	290f      	cmp	r1, #15
 80079da:	d923      	bls.n	8007a24 <AES_CMAC_Final+0x152>
 80079dc:	2200      	movs	r2, #0
 80079de:	2f10      	cmp	r7, #16
 80079e0:	d801      	bhi.n	80079e6 <AES_CMAC_Final+0x114>
 80079e2:	320f      	adds	r2, #15
 80079e4:	1b92      	subs	r2, r2, r6
 80079e6:	19d2      	adds	r2, r2, r7
 80079e8:	6182      	str	r2, [r0, #24]
 80079ea:	0020      	movs	r0, r4
 80079ec:	466a      	mov	r2, sp
 80079ee:	3012      	adds	r0, #18
 80079f0:	30ff      	adds	r0, #255	; 0xff
        XOR( K, ctx->M_last );
 80079f2:	7819      	ldrb	r1, [r3, #0]
 80079f4:	7816      	ldrb	r6, [r2, #0]
 80079f6:	3201      	adds	r2, #1
 80079f8:	4071      	eors	r1, r6
 80079fa:	7019      	strb	r1, [r3, #0]
 80079fc:	3301      	adds	r3, #1
 80079fe:	4298      	cmp	r0, r3
 8007a00:	d1f7      	bne.n	80079f2 <AES_CMAC_Final+0x120>
 8007a02:	e79d      	b.n	8007940 <AES_CMAC_Final+0x6e>
 8007a04:	466b      	mov	r3, sp
            LSHIFT( K, K );
 8007a06:	2100      	movs	r1, #0
 8007a08:	781a      	ldrb	r2, [r3, #0]
 8007a0a:	785f      	ldrb	r7, [r3, #1]
 8007a0c:	0052      	lsls	r2, r2, #1
 8007a0e:	09ff      	lsrs	r7, r7, #7
 8007a10:	433a      	orrs	r2, r7
 8007a12:	3101      	adds	r1, #1
 8007a14:	701a      	strb	r2, [r3, #0]
 8007a16:	3301      	adds	r3, #1
 8007a18:	290f      	cmp	r1, #15
 8007a1a:	d1f5      	bne.n	8007a08 <AES_CMAC_Final+0x136>
 8007a1c:	466b      	mov	r3, sp
 8007a1e:	7bdb      	ldrb	r3, [r3, #15]
 8007a20:	005b      	lsls	r3, r3, #1
 8007a22:	e7ce      	b.n	80079c2 <AES_CMAC_Final+0xf0>
            ctx->M_last[ctx->M_n] = 0;
 8007a24:	545a      	strb	r2, [r3, r1]
 8007a26:	3101      	adds	r1, #1
 8007a28:	e7d6      	b.n	80079d8 <AES_CMAC_Final+0x106>

08007a2a <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8007a2a:	780a      	ldrb	r2, [r1, #0]
 8007a2c:	7803      	ldrb	r3, [r0, #0]
 8007a2e:	4053      	eors	r3, r2
 8007a30:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8007a32:	784a      	ldrb	r2, [r1, #1]
 8007a34:	7843      	ldrb	r3, [r0, #1]
 8007a36:	4053      	eors	r3, r2
 8007a38:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8007a3a:	788a      	ldrb	r2, [r1, #2]
 8007a3c:	7883      	ldrb	r3, [r0, #2]
 8007a3e:	4053      	eors	r3, r2
 8007a40:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8007a42:	78ca      	ldrb	r2, [r1, #3]
 8007a44:	78c3      	ldrb	r3, [r0, #3]
 8007a46:	4053      	eors	r3, r2
 8007a48:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8007a4a:	790a      	ldrb	r2, [r1, #4]
 8007a4c:	7903      	ldrb	r3, [r0, #4]
 8007a4e:	4053      	eors	r3, r2
 8007a50:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8007a52:	794a      	ldrb	r2, [r1, #5]
 8007a54:	7943      	ldrb	r3, [r0, #5]
 8007a56:	4053      	eors	r3, r2
 8007a58:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8007a5a:	798a      	ldrb	r2, [r1, #6]
 8007a5c:	7983      	ldrb	r3, [r0, #6]
 8007a5e:	4053      	eors	r3, r2
 8007a60:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8007a62:	79ca      	ldrb	r2, [r1, #7]
 8007a64:	79c3      	ldrb	r3, [r0, #7]
 8007a66:	4053      	eors	r3, r2
 8007a68:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8007a6a:	7a0a      	ldrb	r2, [r1, #8]
 8007a6c:	7a03      	ldrb	r3, [r0, #8]
 8007a6e:	4053      	eors	r3, r2
 8007a70:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8007a72:	7a4a      	ldrb	r2, [r1, #9]
 8007a74:	7a43      	ldrb	r3, [r0, #9]
 8007a76:	4053      	eors	r3, r2
 8007a78:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8007a7a:	7a8a      	ldrb	r2, [r1, #10]
 8007a7c:	7a83      	ldrb	r3, [r0, #10]
 8007a7e:	4053      	eors	r3, r2
 8007a80:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8007a82:	7aca      	ldrb	r2, [r1, #11]
 8007a84:	7ac3      	ldrb	r3, [r0, #11]
 8007a86:	4053      	eors	r3, r2
 8007a88:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8007a8a:	7b0a      	ldrb	r2, [r1, #12]
 8007a8c:	7b03      	ldrb	r3, [r0, #12]
 8007a8e:	4053      	eors	r3, r2
 8007a90:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8007a92:	7b4a      	ldrb	r2, [r1, #13]
 8007a94:	7b43      	ldrb	r3, [r0, #13]
 8007a96:	4053      	eors	r3, r2
 8007a98:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8007a9a:	7b8a      	ldrb	r2, [r1, #14]
 8007a9c:	7b83      	ldrb	r3, [r0, #14]
 8007a9e:	4053      	eors	r3, r2
 8007aa0:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8007aa2:	7bca      	ldrb	r2, [r1, #15]
 8007aa4:	7bc3      	ldrb	r3, [r0, #15]
 8007aa6:	4053      	eors	r3, r2
 8007aa8:	73c3      	strb	r3, [r0, #15]
#endif
}
 8007aaa:	4770      	bx	lr

08007aac <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 8007aac:	b510      	push	{r4, lr}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8007aae:	780b      	ldrb	r3, [r1, #0]
 8007ab0:	7814      	ldrb	r4, [r2, #0]
 8007ab2:	4063      	eors	r3, r4
 8007ab4:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8007ab6:	7854      	ldrb	r4, [r2, #1]
 8007ab8:	784b      	ldrb	r3, [r1, #1]
 8007aba:	4063      	eors	r3, r4
 8007abc:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8007abe:	7894      	ldrb	r4, [r2, #2]
 8007ac0:	788b      	ldrb	r3, [r1, #2]
 8007ac2:	4063      	eors	r3, r4
 8007ac4:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8007ac6:	78d4      	ldrb	r4, [r2, #3]
 8007ac8:	78cb      	ldrb	r3, [r1, #3]
 8007aca:	4063      	eors	r3, r4
 8007acc:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8007ace:	7914      	ldrb	r4, [r2, #4]
 8007ad0:	790b      	ldrb	r3, [r1, #4]
 8007ad2:	4063      	eors	r3, r4
 8007ad4:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8007ad6:	7954      	ldrb	r4, [r2, #5]
 8007ad8:	794b      	ldrb	r3, [r1, #5]
 8007ada:	4063      	eors	r3, r4
 8007adc:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8007ade:	7994      	ldrb	r4, [r2, #6]
 8007ae0:	798b      	ldrb	r3, [r1, #6]
 8007ae2:	4063      	eors	r3, r4
 8007ae4:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8007ae6:	79d4      	ldrb	r4, [r2, #7]
 8007ae8:	79cb      	ldrb	r3, [r1, #7]
 8007aea:	4063      	eors	r3, r4
 8007aec:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8007aee:	7a14      	ldrb	r4, [r2, #8]
 8007af0:	7a0b      	ldrb	r3, [r1, #8]
 8007af2:	4063      	eors	r3, r4
 8007af4:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8007af6:	7a4b      	ldrb	r3, [r1, #9]
 8007af8:	7a54      	ldrb	r4, [r2, #9]
 8007afa:	4063      	eors	r3, r4
 8007afc:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8007afe:	7a8b      	ldrb	r3, [r1, #10]
 8007b00:	7a94      	ldrb	r4, [r2, #10]
 8007b02:	4063      	eors	r3, r4
 8007b04:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8007b06:	7ad4      	ldrb	r4, [r2, #11]
 8007b08:	7acb      	ldrb	r3, [r1, #11]
 8007b0a:	4063      	eors	r3, r4
 8007b0c:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8007b0e:	7b14      	ldrb	r4, [r2, #12]
 8007b10:	7b0b      	ldrb	r3, [r1, #12]
 8007b12:	4063      	eors	r3, r4
 8007b14:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8007b16:	7b54      	ldrb	r4, [r2, #13]
 8007b18:	7b4b      	ldrb	r3, [r1, #13]
 8007b1a:	4063      	eors	r3, r4
 8007b1c:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8007b1e:	7b94      	ldrb	r4, [r2, #14]
 8007b20:	7b8b      	ldrb	r3, [r1, #14]
 8007b22:	4063      	eors	r3, r4
 8007b24:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8007b26:	7bcb      	ldrb	r3, [r1, #15]
 8007b28:	7bd2      	ldrb	r2, [r2, #15]
 8007b2a:	4053      	eors	r3, r2
 8007b2c:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8007b2e:	bd10      	pop	{r4, pc}

08007b30 <lorawan_aes_set_key>:

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
    uint8_t cc, rc, hi;

    switch( keylen )
 8007b30:	000b      	movs	r3, r1
{
 8007b32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b34:	3b10      	subs	r3, #16
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	000e      	movs	r6, r1
 8007b3a:	0014      	movs	r4, r2
 8007b3c:	b087      	sub	sp, #28
 8007b3e:	2b10      	cmp	r3, #16
 8007b40:	d805      	bhi.n	8007b4e <lorawan_aes_set_key+0x1e>
 8007b42:	2201      	movs	r2, #1
 8007b44:	409a      	lsls	r2, r3
 8007b46:	0013      	movs	r3, r2
 8007b48:	4a3a      	ldr	r2, [pc, #232]	; (8007c34 <lorawan_aes_set_key+0x104>)
 8007b4a:	4213      	tst	r3, r2
 8007b4c:	d105      	bne.n	8007b5a <lorawan_aes_set_key+0x2a>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8007b4e:	2300      	movs	r3, #0
        return ( uint8_t )-1;
 8007b50:	20ff      	movs	r0, #255	; 0xff
        ctx->rnd = 0;
 8007b52:	34f0      	adds	r4, #240	; 0xf0
 8007b54:	7023      	strb	r3, [r4, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8007b56:	b007      	add	sp, #28
 8007b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while( nn-- )
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	429e      	cmp	r6, r3
 8007b5e:	d153      	bne.n	8007c08 <lorawan_aes_set_key+0xd8>
    hi = (keylen + 28) << 2;
 8007b60:	0033      	movs	r3, r6
    ctx->rnd = (hi >> 4) - 1;
 8007b62:	0022      	movs	r2, r4
    hi = (keylen + 28) << 2;
 8007b64:	331c      	adds	r3, #28
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	9305      	str	r3, [sp, #20]
    ctx->rnd = (hi >> 4) - 1;
 8007b6c:	091b      	lsrs	r3, r3, #4
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	32f0      	adds	r2, #240	; 0xf0
 8007b72:	7013      	strb	r3, [r2, #0]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007b74:	2301      	movs	r3, #1
    ctx->rnd = (hi >> 4) - 1;
 8007b76:	0035      	movs	r5, r6
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007b78:	9304      	str	r3, [sp, #16]
        t0 = ctx->ksch[cc - 4];
 8007b7a:	1963      	adds	r3, r4, r5
 8007b7c:	1f1a      	subs	r2, r3, #4
 8007b7e:	7817      	ldrb	r7, [r2, #0]
        t1 = ctx->ksch[cc - 3];
 8007b80:	1eda      	subs	r2, r3, #3
 8007b82:	7812      	ldrb	r2, [r2, #0]
        if( cc % keylen == 0 )
 8007b84:	0031      	movs	r1, r6
        t1 = ctx->ksch[cc - 3];
 8007b86:	9201      	str	r2, [sp, #4]
        t2 = ctx->ksch[cc - 2];
 8007b88:	1e9a      	subs	r2, r3, #2
        t3 = ctx->ksch[cc - 1];
 8007b8a:	3b01      	subs	r3, #1
        t2 = ctx->ksch[cc - 2];
 8007b8c:	7812      	ldrb	r2, [r2, #0]
        t3 = ctx->ksch[cc - 1];
 8007b8e:	781b      	ldrb	r3, [r3, #0]
        if( cc % keylen == 0 )
 8007b90:	0028      	movs	r0, r5
        t2 = ctx->ksch[cc - 2];
 8007b92:	9202      	str	r2, [sp, #8]
        t3 = ctx->ksch[cc - 1];
 8007b94:	9303      	str	r3, [sp, #12]
        if( cc % keylen == 0 )
 8007b96:	f7f8 fb6d 	bl	8000274 <__aeabi_uidivmod>
 8007b9a:	b2c9      	uxtb	r1, r1
 8007b9c:	2900      	cmp	r1, #0
 8007b9e:	d137      	bne.n	8007c10 <lorawan_aes_set_key+0xe0>
            t0 = s_box(t1) ^ rc;
 8007ba0:	4b25      	ldr	r3, [pc, #148]	; (8007c38 <lorawan_aes_set_key+0x108>)
 8007ba2:	9a01      	ldr	r2, [sp, #4]
            t1 = s_box(t2);
 8007ba4:	9902      	ldr	r1, [sp, #8]
            t0 = s_box(t1) ^ rc;
 8007ba6:	5c9a      	ldrb	r2, [r3, r2]
 8007ba8:	9b04      	ldr	r3, [sp, #16]
 8007baa:	405a      	eors	r2, r3
            t1 = s_box(t2);
 8007bac:	4b22      	ldr	r3, [pc, #136]	; (8007c38 <lorawan_aes_set_key+0x108>)
 8007bae:	5c5b      	ldrb	r3, [r3, r1]
            t2 = s_box(t3);
 8007bb0:	9903      	ldr	r1, [sp, #12]
            t1 = s_box(t2);
 8007bb2:	9301      	str	r3, [sp, #4]
            t2 = s_box(t3);
 8007bb4:	4b20      	ldr	r3, [pc, #128]	; (8007c38 <lorawan_aes_set_key+0x108>)
 8007bb6:	5c5b      	ldrb	r3, [r3, r1]
            rc = f2(rc);
 8007bb8:	211b      	movs	r1, #27
            t2 = s_box(t3);
 8007bba:	9302      	str	r3, [sp, #8]
            t3 = s_box(tt);
 8007bbc:	4b1e      	ldr	r3, [pc, #120]	; (8007c38 <lorawan_aes_set_key+0x108>)
 8007bbe:	5ddb      	ldrb	r3, [r3, r7]
            t0 = s_box(t1) ^ rc;
 8007bc0:	0017      	movs	r7, r2
            t3 = s_box(tt);
 8007bc2:	9303      	str	r3, [sp, #12]
            rc = f2(rc);
 8007bc4:	9b04      	ldr	r3, [sp, #16]
 8007bc6:	09db      	lsrs	r3, r3, #7
 8007bc8:	434b      	muls	r3, r1
 8007bca:	9904      	ldr	r1, [sp, #16]
 8007bcc:	0049      	lsls	r1, r1, #1
 8007bce:	404b      	eors	r3, r1
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	9304      	str	r3, [sp, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8007bd4:	1bab      	subs	r3, r5, r6
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	5ce2      	ldrb	r2, [r4, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8007bda:	18e3      	adds	r3, r4, r3
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8007bdc:	4057      	eors	r7, r2
 8007bde:	5567      	strb	r7, [r4, r5]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8007be0:	785a      	ldrb	r2, [r3, #1]
 8007be2:	9801      	ldr	r0, [sp, #4]
 8007be4:	1961      	adds	r1, r4, r5
 8007be6:	4050      	eors	r0, r2
 8007be8:	7048      	strb	r0, [r1, #1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8007bea:	789a      	ldrb	r2, [r3, #2]
 8007bec:	9802      	ldr	r0, [sp, #8]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007bee:	3504      	adds	r5, #4
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8007bf0:	4050      	eors	r0, r2
 8007bf2:	7088      	strb	r0, [r1, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8007bf4:	78db      	ldrb	r3, [r3, #3]
 8007bf6:	9a03      	ldr	r2, [sp, #12]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007bf8:	b2ed      	uxtb	r5, r5
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8007bfa:	405a      	eors	r2, r3
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007bfc:	9b05      	ldr	r3, [sp, #20]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8007bfe:	70ca      	strb	r2, [r1, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007c00:	42ab      	cmp	r3, r5
 8007c02:	d8ba      	bhi.n	8007b7a <lorawan_aes_set_key+0x4a>
    return 0;
 8007c04:	2000      	movs	r0, #0
 8007c06:	e7a6      	b.n	8007b56 <lorawan_aes_set_key+0x26>
        *d++ = *s++;
 8007c08:	5cc2      	ldrb	r2, [r0, r3]
 8007c0a:	54e2      	strb	r2, [r4, r3]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	e7a5      	b.n	8007b5c <lorawan_aes_set_key+0x2c>
        else if( keylen > 24 && cc % keylen == 16 )
 8007c10:	2e18      	cmp	r6, #24
 8007c12:	d9df      	bls.n	8007bd4 <lorawan_aes_set_key+0xa4>
 8007c14:	2910      	cmp	r1, #16
 8007c16:	d1dd      	bne.n	8007bd4 <lorawan_aes_set_key+0xa4>
            t1 = s_box(t1);
 8007c18:	9a01      	ldr	r2, [sp, #4]
            t0 = s_box(t0);
 8007c1a:	4b07      	ldr	r3, [pc, #28]	; (8007c38 <lorawan_aes_set_key+0x108>)
 8007c1c:	5ddf      	ldrb	r7, [r3, r7]
            t1 = s_box(t1);
 8007c1e:	5c9b      	ldrb	r3, [r3, r2]
            t2 = s_box(t2);
 8007c20:	9a02      	ldr	r2, [sp, #8]
            t1 = s_box(t1);
 8007c22:	9301      	str	r3, [sp, #4]
            t2 = s_box(t2);
 8007c24:	4b04      	ldr	r3, [pc, #16]	; (8007c38 <lorawan_aes_set_key+0x108>)
 8007c26:	5c9b      	ldrb	r3, [r3, r2]
            t3 = s_box(t3);
 8007c28:	9a03      	ldr	r2, [sp, #12]
            t2 = s_box(t2);
 8007c2a:	9302      	str	r3, [sp, #8]
            t3 = s_box(t3);
 8007c2c:	4b02      	ldr	r3, [pc, #8]	; (8007c38 <lorawan_aes_set_key+0x108>)
 8007c2e:	5c9b      	ldrb	r3, [r3, r2]
 8007c30:	9303      	str	r3, [sp, #12]
 8007c32:	e7cf      	b.n	8007bd4 <lorawan_aes_set_key+0xa4>
 8007c34:	00010101 	.word	0x00010101
 8007c38:	08011489 	.word	0x08011489

08007c3c <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 8007c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c3e:	b0a5      	sub	sp, #148	; 0x94
 8007c40:	0016      	movs	r6, r2
 8007c42:	911f      	str	r1, [sp, #124]	; 0x7c
    if( ctx->rnd )
 8007c44:	32f0      	adds	r2, #240	; 0xf0
 8007c46:	7812      	ldrb	r2, [r2, #0]
{
 8007c48:	0003      	movs	r3, r0
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
    }
    else
        return ( uint8_t )-1;
 8007c4a:	20ff      	movs	r0, #255	; 0xff
    if( ctx->rnd )
 8007c4c:	2a00      	cmp	r2, #0
 8007c4e:	d100      	bne.n	8007c52 <lorawan_aes_encrypt+0x16>
 8007c50:	e08a      	b.n	8007d68 <lorawan_aes_encrypt+0x12c>
        copy_and_key( s1, in, ctx->ksch );
 8007c52:	0032      	movs	r2, r6
 8007c54:	0019      	movs	r1, r3
 8007c56:	a820      	add	r0, sp, #128	; 0x80
 8007c58:	f7ff ff28 	bl	8007aac <copy_and_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8007c5c:	2501      	movs	r5, #1
 8007c5e:	012a      	lsls	r2, r5, #4
 8007c60:	18b3      	adds	r3, r6, r2
 8007c62:	469c      	mov	ip, r3
 8007c64:	ab20      	add	r3, sp, #128	; 0x80
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	9301      	str	r3, [sp, #4]
 8007c6a:	ab20      	add	r3, sp, #128	; 0x80
 8007c6c:	795b      	ldrb	r3, [r3, #5]
 8007c6e:	9302      	str	r3, [sp, #8]
 8007c70:	ab20      	add	r3, sp, #128	; 0x80
 8007c72:	7a9f      	ldrb	r7, [r3, #10]
 8007c74:	4b91      	ldr	r3, [pc, #580]	; (8007ebc <lorawan_aes_encrypt+0x280>)
 8007c76:	5dda      	ldrb	r2, [r3, r7]
 8007c78:	9203      	str	r2, [sp, #12]
 8007c7a:	aa20      	add	r2, sp, #128	; 0x80
 8007c7c:	7bd2      	ldrb	r2, [r2, #15]
 8007c7e:	9204      	str	r2, [sp, #16]
 8007c80:	5c9a      	ldrb	r2, [r3, r2]
 8007c82:	9205      	str	r2, [sp, #20]
 8007c84:	9a01      	ldr	r2, [sp, #4]
 8007c86:	5c98      	ldrb	r0, [r3, r2]
 8007c88:	9a02      	ldr	r2, [sp, #8]
 8007c8a:	5c9a      	ldrb	r2, [r3, r2]
 8007c8c:	9206      	str	r2, [sp, #24]
 8007c8e:	aa20      	add	r2, sp, #128	; 0x80
 8007c90:	7912      	ldrb	r2, [r2, #4]
 8007c92:	9207      	str	r2, [sp, #28]
 8007c94:	aa20      	add	r2, sp, #128	; 0x80
 8007c96:	7a52      	ldrb	r2, [r2, #9]
 8007c98:	9208      	str	r2, [sp, #32]
 8007c9a:	aa20      	add	r2, sp, #128	; 0x80
 8007c9c:	7b92      	ldrb	r2, [r2, #14]
 8007c9e:	9209      	str	r2, [sp, #36]	; 0x24
 8007ca0:	5c9a      	ldrb	r2, [r3, r2]
 8007ca2:	920a      	str	r2, [sp, #40]	; 0x28
 8007ca4:	aa20      	add	r2, sp, #128	; 0x80
 8007ca6:	78d2      	ldrb	r2, [r2, #3]
 8007ca8:	920b      	str	r2, [sp, #44]	; 0x2c
 8007caa:	5c9a      	ldrb	r2, [r3, r2]
 8007cac:	920c      	str	r2, [sp, #48]	; 0x30
 8007cae:	9a07      	ldr	r2, [sp, #28]
 8007cb0:	5c9a      	ldrb	r2, [r3, r2]
 8007cb2:	920d      	str	r2, [sp, #52]	; 0x34
 8007cb4:	9a08      	ldr	r2, [sp, #32]
 8007cb6:	5c9a      	ldrb	r2, [r3, r2]
 8007cb8:	920e      	str	r2, [sp, #56]	; 0x38
 8007cba:	aa20      	add	r2, sp, #128	; 0x80
 8007cbc:	7a12      	ldrb	r2, [r2, #8]
 8007cbe:	920f      	str	r2, [sp, #60]	; 0x3c
 8007cc0:	aa20      	add	r2, sp, #128	; 0x80
 8007cc2:	7b52      	ldrb	r2, [r2, #13]
 8007cc4:	9210      	str	r2, [sp, #64]	; 0x40
 8007cc6:	aa20      	add	r2, sp, #128	; 0x80
 8007cc8:	7892      	ldrb	r2, [r2, #2]
 8007cca:	9211      	str	r2, [sp, #68]	; 0x44
 8007ccc:	5c9a      	ldrb	r2, [r3, r2]
 8007cce:	9212      	str	r2, [sp, #72]	; 0x48
 8007cd0:	aa20      	add	r2, sp, #128	; 0x80
 8007cd2:	79d2      	ldrb	r2, [r2, #7]
 8007cd4:	9213      	str	r2, [sp, #76]	; 0x4c
 8007cd6:	5c9a      	ldrb	r2, [r3, r2]
 8007cd8:	9214      	str	r2, [sp, #80]	; 0x50
 8007cda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007cdc:	5c9a      	ldrb	r2, [r3, r2]
 8007cde:	9215      	str	r2, [sp, #84]	; 0x54
 8007ce0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ce2:	5c9a      	ldrb	r2, [r3, r2]
 8007ce4:	9216      	str	r2, [sp, #88]	; 0x58
 8007ce6:	aa20      	add	r2, sp, #128	; 0x80
 8007ce8:	7b12      	ldrb	r2, [r2, #12]
 8007cea:	9217      	str	r2, [sp, #92]	; 0x5c
 8007cec:	aa20      	add	r2, sp, #128	; 0x80
 8007cee:	7852      	ldrb	r2, [r2, #1]
 8007cf0:	9218      	str	r2, [sp, #96]	; 0x60
 8007cf2:	aa20      	add	r2, sp, #128	; 0x80
 8007cf4:	7992      	ldrb	r2, [r2, #6]
 8007cf6:	9219      	str	r2, [sp, #100]	; 0x64
 8007cf8:	5c9a      	ldrb	r2, [r3, r2]
 8007cfa:	921a      	str	r2, [sp, #104]	; 0x68
 8007cfc:	aa20      	add	r2, sp, #128	; 0x80
 8007cfe:	7ad2      	ldrb	r2, [r2, #11]
 8007d00:	921b      	str	r2, [sp, #108]	; 0x6c
 8007d02:	5c9a      	ldrb	r2, [r3, r2]
 8007d04:	921c      	str	r2, [sp, #112]	; 0x70
 8007d06:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007d08:	5c9a      	ldrb	r2, [r3, r2]
 8007d0a:	921d      	str	r2, [sp, #116]	; 0x74
 8007d0c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007d0e:	5c9b      	ldrb	r3, [r3, r2]
 8007d10:	931e      	str	r3, [sp, #120]	; 0x78
 8007d12:	0033      	movs	r3, r6
 8007d14:	33f0      	adds	r3, #240	; 0xf0
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	42ab      	cmp	r3, r5
 8007d1a:	d827      	bhi.n	8007d6c <lorawan_aes_encrypt+0x130>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8007d1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d1e:	ab20      	add	r3, sp, #128	; 0x80
 8007d20:	711a      	strb	r2, [r3, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8007d22:	9a15      	ldr	r2, [sp, #84]	; 0x54
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8007d24:	7018      	strb	r0, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8007d26:	721a      	strb	r2, [r3, #8]
 8007d28:	9a1d      	ldr	r2, [sp, #116]	; 0x74
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8007d2a:	981f      	ldr	r0, [sp, #124]	; 0x7c
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8007d2c:	731a      	strb	r2, [r3, #12]
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8007d2e:	9a06      	ldr	r2, [sp, #24]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8007d30:	0019      	movs	r1, r3
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8007d32:	705a      	strb	r2, [r3, #1]
 8007d34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d36:	715a      	strb	r2, [r3, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8007d38:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007d3a:	725a      	strb	r2, [r3, #9]
 8007d3c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007d3e:	735a      	strb	r2, [r3, #13]
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8007d40:	9a03      	ldr	r2, [sp, #12]
 8007d42:	709a      	strb	r2, [r3, #2]
 8007d44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d46:	729a      	strb	r2, [r3, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8007d48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d4a:	719a      	strb	r2, [r3, #6]
 8007d4c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007d4e:	739a      	strb	r2, [r3, #14]
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8007d50:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007d52:	73da      	strb	r2, [r3, #15]
 8007d54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007d56:	72da      	strb	r2, [r3, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8007d58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d5a:	71da      	strb	r2, [r3, #7]
 8007d5c:	9a05      	ldr	r2, [sp, #20]
 8007d5e:	70da      	strb	r2, [r3, #3]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8007d60:	4662      	mov	r2, ip
 8007d62:	f7ff fea3 	bl	8007aac <copy_and_key>
    return 0;
 8007d66:	2000      	movs	r0, #0
}
 8007d68:	b025      	add	sp, #148	; 0x94
 8007d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8007d6c:	4b54      	ldr	r3, [pc, #336]	; (8007ec0 <lorawan_aes_encrypt+0x284>)
 8007d6e:	9c01      	ldr	r4, [sp, #4]
 8007d70:	9905      	ldr	r1, [sp, #20]
 8007d72:	9a03      	ldr	r2, [sp, #12]
 8007d74:	5d1c      	ldrb	r4, [r3, r4]
 8007d76:	404a      	eors	r2, r1
 8007d78:	4054      	eors	r4, r2
 8007d7a:	9902      	ldr	r1, [sp, #8]
 8007d7c:	4a51      	ldr	r2, [pc, #324]	; (8007ec4 <lorawan_aes_encrypt+0x288>)
        for( r = 1 ; r < ctx->rnd ; ++r )
 8007d7e:	3501      	adds	r5, #1
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8007d80:	5c51      	ldrb	r1, [r2, r1]
        for( r = 1 ; r < ctx->rnd ; ++r )
 8007d82:	b2ed      	uxtb	r5, r5
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8007d84:	404c      	eors	r4, r1
 8007d86:	a920      	add	r1, sp, #128	; 0x80
 8007d88:	700c      	strb	r4, [r1, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8007d8a:	9c02      	ldr	r4, [sp, #8]
 8007d8c:	9905      	ldr	r1, [sp, #20]
 8007d8e:	5d1c      	ldrb	r4, [r3, r4]
 8007d90:	4041      	eors	r1, r0
 8007d92:	4061      	eors	r1, r4
 8007d94:	5dd4      	ldrb	r4, [r2, r7]
 8007d96:	4061      	eors	r1, r4
 8007d98:	ac20      	add	r4, sp, #128	; 0x80
 8007d9a:	7061      	strb	r1, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8007d9c:	9906      	ldr	r1, [sp, #24]
 8007d9e:	4048      	eors	r0, r1
 8007da0:	5dd9      	ldrb	r1, [r3, r7]
 8007da2:	4048      	eors	r0, r1
 8007da4:	9904      	ldr	r1, [sp, #16]
 8007da6:	5c51      	ldrb	r1, [r2, r1]
 8007da8:	4048      	eors	r0, r1
 8007daa:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8007dac:	9903      	ldr	r1, [sp, #12]
 8007dae:	9806      	ldr	r0, [sp, #24]
 8007db0:	4041      	eors	r1, r0
 8007db2:	9801      	ldr	r0, [sp, #4]
 8007db4:	5c10      	ldrb	r0, [r2, r0]
 8007db6:	4041      	eors	r1, r0
 8007db8:	9804      	ldr	r0, [sp, #16]
 8007dba:	5c18      	ldrb	r0, [r3, r0]
 8007dbc:	4041      	eors	r1, r0
 8007dbe:	70e1      	strb	r1, [r4, #3]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8007dc0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007dc2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007dc4:	4041      	eors	r1, r0
 8007dc6:	9807      	ldr	r0, [sp, #28]
 8007dc8:	5c18      	ldrb	r0, [r3, r0]
 8007dca:	4041      	eors	r1, r0
 8007dcc:	9808      	ldr	r0, [sp, #32]
 8007dce:	5c10      	ldrb	r0, [r2, r0]
 8007dd0:	4041      	eors	r1, r0
 8007dd2:	7121      	strb	r1, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8007dd4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007dd6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007dd8:	4041      	eors	r1, r0
 8007dda:	9808      	ldr	r0, [sp, #32]
 8007ddc:	5c18      	ldrb	r0, [r3, r0]
 8007dde:	4041      	eors	r1, r0
 8007de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007de2:	5c10      	ldrb	r0, [r2, r0]
 8007de4:	4041      	eors	r1, r0
 8007de6:	7161      	strb	r1, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8007de8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007dea:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007dec:	4041      	eors	r1, r0
 8007dee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007df0:	5c18      	ldrb	r0, [r3, r0]
 8007df2:	4041      	eors	r1, r0
 8007df4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007df6:	5c10      	ldrb	r0, [r2, r0]
 8007df8:	4041      	eors	r1, r0
 8007dfa:	71a1      	strb	r1, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8007dfc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007dfe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007e00:	4041      	eors	r1, r0
 8007e02:	9807      	ldr	r0, [sp, #28]
 8007e04:	5c10      	ldrb	r0, [r2, r0]
 8007e06:	4041      	eors	r1, r0
 8007e08:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007e0a:	5c18      	ldrb	r0, [r3, r0]
 8007e0c:	4041      	eors	r1, r0
 8007e0e:	71e1      	strb	r1, [r4, #7]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8007e10:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007e12:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007e14:	4041      	eors	r1, r0
 8007e16:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007e18:	5c18      	ldrb	r0, [r3, r0]
 8007e1a:	4041      	eors	r1, r0
 8007e1c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007e1e:	5c10      	ldrb	r0, [r2, r0]
 8007e20:	4041      	eors	r1, r0
 8007e22:	7221      	strb	r1, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8007e24:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007e26:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007e28:	4041      	eors	r1, r0
 8007e2a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007e2c:	5c18      	ldrb	r0, [r3, r0]
 8007e2e:	4041      	eors	r1, r0
 8007e30:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007e32:	5c10      	ldrb	r0, [r2, r0]
 8007e34:	4041      	eors	r1, r0
 8007e36:	7261      	strb	r1, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8007e38:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007e3a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007e3c:	4041      	eors	r1, r0
 8007e3e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007e40:	5c18      	ldrb	r0, [r3, r0]
 8007e42:	4041      	eors	r1, r0
 8007e44:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007e46:	5c10      	ldrb	r0, [r2, r0]
 8007e48:	4041      	eors	r1, r0
 8007e4a:	72a1      	strb	r1, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8007e4c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007e4e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007e50:	4041      	eors	r1, r0
 8007e52:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007e54:	5c10      	ldrb	r0, [r2, r0]
 8007e56:	4041      	eors	r1, r0
 8007e58:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007e5a:	5c18      	ldrb	r0, [r3, r0]
 8007e5c:	4041      	eors	r1, r0
 8007e5e:	72e1      	strb	r1, [r4, #11]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8007e60:	981c      	ldr	r0, [sp, #112]	; 0x70
 8007e62:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007e64:	4041      	eors	r1, r0
 8007e66:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007e68:	5c18      	ldrb	r0, [r3, r0]
 8007e6a:	4041      	eors	r1, r0
 8007e6c:	9818      	ldr	r0, [sp, #96]	; 0x60
 8007e6e:	5c10      	ldrb	r0, [r2, r0]
 8007e70:	4041      	eors	r1, r0
 8007e72:	7321      	strb	r1, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8007e74:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007e76:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007e78:	4041      	eors	r1, r0
 8007e7a:	9818      	ldr	r0, [sp, #96]	; 0x60
 8007e7c:	5c18      	ldrb	r0, [r3, r0]
 8007e7e:	4041      	eors	r1, r0
 8007e80:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007e82:	5c10      	ldrb	r0, [r2, r0]
 8007e84:	4041      	eors	r1, r0
 8007e86:	7361      	strb	r1, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8007e88:	991d      	ldr	r1, [sp, #116]	; 0x74
 8007e8a:	981e      	ldr	r0, [sp, #120]	; 0x78
 8007e8c:	4041      	eors	r1, r0
 8007e8e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007e90:	5c18      	ldrb	r0, [r3, r0]
 8007e92:	4041      	eors	r1, r0
 8007e94:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007e96:	5c10      	ldrb	r0, [r2, r0]
 8007e98:	4041      	eors	r1, r0
 8007e9a:	73a1      	strb	r1, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8007e9c:	981e      	ldr	r0, [sp, #120]	; 0x78
 8007e9e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007ea0:	4041      	eors	r1, r0
 8007ea2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007ea4:	5c12      	ldrb	r2, [r2, r0]
    xor_block(d, k);
 8007ea6:	0020      	movs	r0, r4
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8007ea8:	404a      	eors	r2, r1
 8007eaa:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8007eac:	5c5b      	ldrb	r3, [r3, r1]
    xor_block(d, k);
 8007eae:	4661      	mov	r1, ip
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8007eb0:	4053      	eors	r3, r2
 8007eb2:	73e3      	strb	r3, [r4, #15]
    xor_block(d, k);
 8007eb4:	f7ff fdb9 	bl	8007a2a <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8007eb8:	e6d1      	b.n	8007c5e <lorawan_aes_encrypt+0x22>
 8007eba:	46c0      	nop			; (mov r8, r8)
 8007ebc:	08011489 	.word	0x08011489
 8007ec0:	08011389 	.word	0x08011389
 8007ec4:	08011289 	.word	0x08011289

08007ec8 <GetKeyByID>:
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID(KeyIdentifier_t keyID, Key_t **keyItem)
{
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 8007ec8:	4a09      	ldr	r2, [pc, #36]	; (8007ef0 <GetKeyByID+0x28>)
{
 8007eca:	b530      	push	{r4, r5, lr}
 8007ecc:	2300      	movs	r3, #0
 8007ece:	0014      	movs	r4, r2
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 8007ed0:	7c15      	ldrb	r5, [r2, #16]
 8007ed2:	4285      	cmp	r5, r0
 8007ed4:	d106      	bne.n	8007ee4 <GetKeyByID+0x1c>
    {
      *keyItem = &(SeNvmCtx.KeyList[i]);
 8007ed6:	2211      	movs	r2, #17
      return SECURE_ELEMENT_SUCCESS;
 8007ed8:	2000      	movs	r0, #0
      *keyItem = &(SeNvmCtx.KeyList[i]);
 8007eda:	4353      	muls	r3, r2
 8007edc:	3310      	adds	r3, #16
 8007ede:	18e3      	adds	r3, r4, r3
 8007ee0:	600b      	str	r3, [r1, #0]
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
}
 8007ee2:	bd30      	pop	{r4, r5, pc}
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	3211      	adds	r2, #17
 8007ee8:	2b0a      	cmp	r3, #10
 8007eea:	d1f1      	bne.n	8007ed0 <GetKeyByID+0x8>
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8007eec:	2003      	movs	r0, #3
 8007eee:	e7f8      	b.n	8007ee2 <GetKeyByID+0x1a>
 8007ef0:	20000050 	.word	0x20000050

08007ef4 <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB(void)
{
  return;
}
 8007ef4:	4770      	bx	lr

08007ef6 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac)
{
 8007ef6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ef8:	b0cf      	sub	sp, #316	; 0x13c
 8007efa:	0006      	movs	r6, r0
 8007efc:	000d      	movs	r5, r1
 8007efe:	0017      	movs	r7, r2
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
  if ((buffer == NULL) || (cmac == NULL))
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8007f00:	2402      	movs	r4, #2
{
 8007f02:	9301      	str	r3, [sp, #4]
  if ((buffer == NULL) || (cmac == NULL))
 8007f04:	2900      	cmp	r1, #0
 8007f06:	d023      	beq.n	8007f50 <ComputeCmac+0x5a>
 8007f08:	9b54      	ldr	r3, [sp, #336]	; 0x150
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d020      	beq.n	8007f50 <ComputeCmac+0x5a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t Cmac[16];
  AES_CMAC_CTX aesCmacCtx[1];

  AES_CMAC_Init(aesCmacCtx);
 8007f0e:	a808      	add	r0, sp, #32
 8007f10:	f7ff fc58 	bl	80077c4 <AES_CMAC_Init>

  Key_t *keyItem;
  retval = GetKeyByID(keyID, &keyItem);
 8007f14:	9801      	ldr	r0, [sp, #4]
 8007f16:	a903      	add	r1, sp, #12
 8007f18:	f7ff ffd6 	bl	8007ec8 <GetKeyByID>
 8007f1c:	1e04      	subs	r4, r0, #0

  if (retval == SECURE_ELEMENT_SUCCESS)
 8007f1e:	d117      	bne.n	8007f50 <ComputeCmac+0x5a>
  {
    AES_CMAC_SetKey(aesCmacCtx, keyItem->KeyValue);
 8007f20:	9b03      	ldr	r3, [sp, #12]
 8007f22:	a808      	add	r0, sp, #32
 8007f24:	1c59      	adds	r1, r3, #1
 8007f26:	f7ff fc5d 	bl	80077e4 <AES_CMAC_SetKey>

    if (micBxBuffer != NULL)
 8007f2a:	2e00      	cmp	r6, #0
 8007f2c:	d004      	beq.n	8007f38 <ComputeCmac+0x42>
    {
      AES_CMAC_Update(aesCmacCtx, micBxBuffer, 16);
 8007f2e:	2210      	movs	r2, #16
 8007f30:	0031      	movs	r1, r6
 8007f32:	a808      	add	r0, sp, #32
 8007f34:	f7ff fc5d 	bl	80077f2 <AES_CMAC_Update>
    }

    AES_CMAC_Update(aesCmacCtx, buffer, size);
 8007f38:	003a      	movs	r2, r7
 8007f3a:	0029      	movs	r1, r5
 8007f3c:	a808      	add	r0, sp, #32
 8007f3e:	f7ff fc58 	bl	80077f2 <AES_CMAC_Update>

    AES_CMAC_Final(Cmac, aesCmacCtx);
 8007f42:	a908      	add	r1, sp, #32
 8007f44:	a804      	add	r0, sp, #16
 8007f46:	f7ff fcc4 	bl	80078d2 <AES_CMAC_Final>

    /* Bring into the required format */
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 8007f4a:	9b54      	ldr	r3, [sp, #336]	; 0x150
 8007f4c:	9a04      	ldr	r2, [sp, #16]
 8007f4e:	601a      	str	r2, [r3, #0]
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
}
 8007f50:	0020      	movs	r0, r4
 8007f52:	b04f      	add	sp, #316	; 0x13c
 8007f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007f58 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit(SecureElementNvmEvent seNvmCtxChanged)
{
 8007f58:	b530      	push	{r4, r5, lr}
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  Key_t *keyItem;
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;

  /* Initialize LoRaWAN Key List buffer */
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 8007f5a:	22aa      	movs	r2, #170	; 0xaa
{
 8007f5c:	b093      	sub	sp, #76	; 0x4c
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 8007f5e:	4968      	ldr	r1, [pc, #416]	; (8008100 <SecureElementInit+0x1a8>)
{
 8007f60:	0004      	movs	r4, r0
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 8007f62:	4868      	ldr	r0, [pc, #416]	; (8008104 <SecureElementInit+0x1ac>)
 8007f64:	f006 ff44 	bl	800edf0 <memcpy1>

  retval = GetKeyByID(APP_KEY, &keyItem);
 8007f68:	a911      	add	r1, sp, #68	; 0x44
 8007f6a:	2000      	movs	r0, #0
 8007f6c:	f7ff ffac 	bl	8007ec8 <GetKeyByID>
  KEY_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 8007f70:	2200      	movs	r2, #0
  retval = GetKeyByID(APP_KEY, &keyItem);
 8007f72:	0005      	movs	r5, r0
  KEY_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 8007f74:	0011      	movs	r1, r2
 8007f76:	2002      	movs	r0, #2
 8007f78:	4b63      	ldr	r3, [pc, #396]	; (8008108 <SecureElementInit+0x1b0>)
 8007f7a:	f008 fae9 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
  if (retval == SECURE_ELEMENT_SUCCESS)
 8007f7e:	2d00      	cmp	r5, #0
 8007f80:	d126      	bne.n	8007fd0 <SecureElementInit+0x78>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 8007f82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f84:	0029      	movs	r1, r5
 8007f86:	7c1a      	ldrb	r2, [r3, #16]
 8007f88:	2002      	movs	r0, #2
 8007f8a:	920f      	str	r2, [sp, #60]	; 0x3c
 8007f8c:	7bda      	ldrb	r2, [r3, #15]
 8007f8e:	920e      	str	r2, [sp, #56]	; 0x38
 8007f90:	7b9a      	ldrb	r2, [r3, #14]
 8007f92:	920d      	str	r2, [sp, #52]	; 0x34
 8007f94:	7b5a      	ldrb	r2, [r3, #13]
 8007f96:	920c      	str	r2, [sp, #48]	; 0x30
 8007f98:	7b1a      	ldrb	r2, [r3, #12]
 8007f9a:	920b      	str	r2, [sp, #44]	; 0x2c
 8007f9c:	7ada      	ldrb	r2, [r3, #11]
 8007f9e:	920a      	str	r2, [sp, #40]	; 0x28
 8007fa0:	7a9a      	ldrb	r2, [r3, #10]
 8007fa2:	9209      	str	r2, [sp, #36]	; 0x24
 8007fa4:	7a5a      	ldrb	r2, [r3, #9]
 8007fa6:	9208      	str	r2, [sp, #32]
 8007fa8:	7a1a      	ldrb	r2, [r3, #8]
 8007faa:	9207      	str	r2, [sp, #28]
 8007fac:	79da      	ldrb	r2, [r3, #7]
 8007fae:	9206      	str	r2, [sp, #24]
 8007fb0:	799a      	ldrb	r2, [r3, #6]
 8007fb2:	9205      	str	r2, [sp, #20]
 8007fb4:	795a      	ldrb	r2, [r3, #5]
 8007fb6:	9204      	str	r2, [sp, #16]
 8007fb8:	791a      	ldrb	r2, [r3, #4]
 8007fba:	9203      	str	r2, [sp, #12]
 8007fbc:	78da      	ldrb	r2, [r3, #3]
 8007fbe:	9202      	str	r2, [sp, #8]
 8007fc0:	789a      	ldrb	r2, [r3, #2]
 8007fc2:	9201      	str	r2, [sp, #4]
 8007fc4:	785b      	ldrb	r3, [r3, #1]
 8007fc6:	002a      	movs	r2, r5
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	4b50      	ldr	r3, [pc, #320]	; (800810c <SecureElementInit+0x1b4>)
 8007fcc:	f008 fac0 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_KEY, &keyItem);
 8007fd0:	a911      	add	r1, sp, #68	; 0x44
 8007fd2:	2001      	movs	r0, #1
 8007fd4:	f7ff ff78 	bl	8007ec8 <GetKeyByID>
 8007fd8:	1e01      	subs	r1, r0, #0
  if (retval == SECURE_ELEMENT_SUCCESS)
 8007fda:	d125      	bne.n	8008028 <SecureElementInit+0xd0>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 8007fdc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fde:	7c1a      	ldrb	r2, [r3, #16]
 8007fe0:	920f      	str	r2, [sp, #60]	; 0x3c
 8007fe2:	7bda      	ldrb	r2, [r3, #15]
 8007fe4:	920e      	str	r2, [sp, #56]	; 0x38
 8007fe6:	7b9a      	ldrb	r2, [r3, #14]
 8007fe8:	920d      	str	r2, [sp, #52]	; 0x34
 8007fea:	7b5a      	ldrb	r2, [r3, #13]
 8007fec:	920c      	str	r2, [sp, #48]	; 0x30
 8007fee:	7b1a      	ldrb	r2, [r3, #12]
 8007ff0:	920b      	str	r2, [sp, #44]	; 0x2c
 8007ff2:	7ada      	ldrb	r2, [r3, #11]
 8007ff4:	920a      	str	r2, [sp, #40]	; 0x28
 8007ff6:	7a9a      	ldrb	r2, [r3, #10]
 8007ff8:	9209      	str	r2, [sp, #36]	; 0x24
 8007ffa:	7a5a      	ldrb	r2, [r3, #9]
 8007ffc:	9208      	str	r2, [sp, #32]
 8007ffe:	7a1a      	ldrb	r2, [r3, #8]
 8008000:	9207      	str	r2, [sp, #28]
 8008002:	79da      	ldrb	r2, [r3, #7]
 8008004:	9206      	str	r2, [sp, #24]
 8008006:	799a      	ldrb	r2, [r3, #6]
 8008008:	9205      	str	r2, [sp, #20]
 800800a:	795a      	ldrb	r2, [r3, #5]
 800800c:	9204      	str	r2, [sp, #16]
 800800e:	791a      	ldrb	r2, [r3, #4]
 8008010:	9203      	str	r2, [sp, #12]
 8008012:	78da      	ldrb	r2, [r3, #3]
 8008014:	9202      	str	r2, [sp, #8]
 8008016:	789a      	ldrb	r2, [r3, #2]
 8008018:	9201      	str	r2, [sp, #4]
 800801a:	785b      	ldrb	r3, [r3, #1]
 800801c:	0002      	movs	r2, r0
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	2002      	movs	r0, #2
 8008022:	4b3b      	ldr	r3, [pc, #236]	; (8008110 <SecureElementInit+0x1b8>)
 8008024:	f008 fa94 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
  }
  KEY_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 8008028:	2200      	movs	r2, #0
 800802a:	4b3a      	ldr	r3, [pc, #232]	; (8008114 <SecureElementInit+0x1bc>)
 800802c:	0011      	movs	r1, r2
 800802e:	2002      	movs	r0, #2
 8008030:	f008 fa8e 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
  retval = GetKeyByID(APP_S_KEY, &keyItem);
 8008034:	a911      	add	r1, sp, #68	; 0x44
 8008036:	2003      	movs	r0, #3
 8008038:	f7ff ff46 	bl	8007ec8 <GetKeyByID>
 800803c:	1e01      	subs	r1, r0, #0
  if (retval == SECURE_ELEMENT_SUCCESS)
 800803e:	d125      	bne.n	800808c <SecureElementInit+0x134>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppSKey: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 8008040:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008042:	7c1a      	ldrb	r2, [r3, #16]
 8008044:	920f      	str	r2, [sp, #60]	; 0x3c
 8008046:	7bda      	ldrb	r2, [r3, #15]
 8008048:	920e      	str	r2, [sp, #56]	; 0x38
 800804a:	7b9a      	ldrb	r2, [r3, #14]
 800804c:	920d      	str	r2, [sp, #52]	; 0x34
 800804e:	7b5a      	ldrb	r2, [r3, #13]
 8008050:	920c      	str	r2, [sp, #48]	; 0x30
 8008052:	7b1a      	ldrb	r2, [r3, #12]
 8008054:	920b      	str	r2, [sp, #44]	; 0x2c
 8008056:	7ada      	ldrb	r2, [r3, #11]
 8008058:	920a      	str	r2, [sp, #40]	; 0x28
 800805a:	7a9a      	ldrb	r2, [r3, #10]
 800805c:	9209      	str	r2, [sp, #36]	; 0x24
 800805e:	7a5a      	ldrb	r2, [r3, #9]
 8008060:	9208      	str	r2, [sp, #32]
 8008062:	7a1a      	ldrb	r2, [r3, #8]
 8008064:	9207      	str	r2, [sp, #28]
 8008066:	79da      	ldrb	r2, [r3, #7]
 8008068:	9206      	str	r2, [sp, #24]
 800806a:	799a      	ldrb	r2, [r3, #6]
 800806c:	9205      	str	r2, [sp, #20]
 800806e:	795a      	ldrb	r2, [r3, #5]
 8008070:	9204      	str	r2, [sp, #16]
 8008072:	791a      	ldrb	r2, [r3, #4]
 8008074:	9203      	str	r2, [sp, #12]
 8008076:	78da      	ldrb	r2, [r3, #3]
 8008078:	9202      	str	r2, [sp, #8]
 800807a:	789a      	ldrb	r2, [r3, #2]
 800807c:	9201      	str	r2, [sp, #4]
 800807e:	785b      	ldrb	r3, [r3, #1]
 8008080:	0002      	movs	r2, r0
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	2002      	movs	r0, #2
 8008086:	4b24      	ldr	r3, [pc, #144]	; (8008118 <SecureElementInit+0x1c0>)
 8008088:	f008 fa62 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_S_KEY, &keyItem);
 800808c:	a911      	add	r1, sp, #68	; 0x44
 800808e:	2002      	movs	r0, #2
 8008090:	f7ff ff1a 	bl	8007ec8 <GetKeyByID>
 8008094:	1e01      	subs	r1, r0, #0
  if (retval == SECURE_ELEMENT_SUCCESS)
 8008096:	d125      	bne.n	80080e4 <SecureElementInit+0x18c>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 8008098:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800809a:	7c1a      	ldrb	r2, [r3, #16]
 800809c:	920f      	str	r2, [sp, #60]	; 0x3c
 800809e:	7bda      	ldrb	r2, [r3, #15]
 80080a0:	920e      	str	r2, [sp, #56]	; 0x38
 80080a2:	7b9a      	ldrb	r2, [r3, #14]
 80080a4:	920d      	str	r2, [sp, #52]	; 0x34
 80080a6:	7b5a      	ldrb	r2, [r3, #13]
 80080a8:	920c      	str	r2, [sp, #48]	; 0x30
 80080aa:	7b1a      	ldrb	r2, [r3, #12]
 80080ac:	920b      	str	r2, [sp, #44]	; 0x2c
 80080ae:	7ada      	ldrb	r2, [r3, #11]
 80080b0:	920a      	str	r2, [sp, #40]	; 0x28
 80080b2:	7a9a      	ldrb	r2, [r3, #10]
 80080b4:	9209      	str	r2, [sp, #36]	; 0x24
 80080b6:	7a5a      	ldrb	r2, [r3, #9]
 80080b8:	9208      	str	r2, [sp, #32]
 80080ba:	7a1a      	ldrb	r2, [r3, #8]
 80080bc:	9207      	str	r2, [sp, #28]
 80080be:	79da      	ldrb	r2, [r3, #7]
 80080c0:	9206      	str	r2, [sp, #24]
 80080c2:	799a      	ldrb	r2, [r3, #6]
 80080c4:	9205      	str	r2, [sp, #20]
 80080c6:	795a      	ldrb	r2, [r3, #5]
 80080c8:	9204      	str	r2, [sp, #16]
 80080ca:	791a      	ldrb	r2, [r3, #4]
 80080cc:	9203      	str	r2, [sp, #12]
 80080ce:	78da      	ldrb	r2, [r3, #3]
 80080d0:	9202      	str	r2, [sp, #8]
 80080d2:	789a      	ldrb	r2, [r3, #2]
 80080d4:	9201      	str	r2, [sp, #4]
 80080d6:	785b      	ldrb	r3, [r3, #1]
 80080d8:	0002      	movs	r2, r0
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	2002      	movs	r0, #2
 80080de:	4b0f      	ldr	r3, [pc, #60]	; (800811c <SecureElementInit+0x1c4>)
 80080e0:	f008 fa36 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
  SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;

#endif /* LORAWAN_KMS */

  /* Assign callback */
  if (seNvmCtxChanged != 0)
 80080e4:	2c00      	cmp	r4, #0
 80080e6:	d100      	bne.n	80080ea <SecureElementInit+0x192>
  {
    SeNvmCtxChanged = seNvmCtxChanged;
  }
  else
  {
    SeNvmCtxChanged = DummyCB;
 80080e8:	4c0d      	ldr	r4, [pc, #52]	; (8008120 <SecureElementInit+0x1c8>)
 80080ea:	4d0e      	ldr	r5, [pc, #56]	; (8008124 <SecureElementInit+0x1cc>)
  }

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if ( STATIC_DEVICE_EUI == 0 )
  /* Get a DevEUI from MCU unique ID */
  GetUniqueId(SeNvmCtx.DevEui);
 80080ec:	480e      	ldr	r0, [pc, #56]	; (8008128 <SecureElementInit+0x1d0>)
 80080ee:	602c      	str	r4, [r5, #0]
 80080f0:	f7fc f820 	bl	8004134 <GetUniqueId>
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
  SeNvmCtxChanged();
 80080f4:	682b      	ldr	r3, [r5, #0]
 80080f6:	4798      	blx	r3

  return SECURE_ELEMENT_SUCCESS;
}
 80080f8:	2000      	movs	r0, #0
 80080fa:	b013      	add	sp, #76	; 0x4c
 80080fc:	bd30      	pop	{r4, r5, pc}
 80080fe:	46c0      	nop			; (mov r8, r8)
 8008100:	08011589 	.word	0x08011589
 8008104:	20000060 	.word	0x20000060
 8008108:	08011c00 	.word	0x08011c00
 800810c:	08011c15 	.word	0x08011c15
 8008110:	08011c77 	.word	0x08011c77
 8008114:	08011cd9 	.word	0x08011cd9
 8008118:	08011cee 	.word	0x08011cee
 800811c:	08011d50 	.word	0x08011d50
 8008120:	08007ef5 	.word	0x08007ef5
 8008124:	2000036c 	.word	0x2000036c
 8008128:	20000050 	.word	0x20000050

0800812c <SecureElementRestoreNvmCtx>:
  return SECURE_ELEMENT_SUCCESS;
#endif /* LORAWAN_KMS == 1 */
}

SecureElementStatus_t SecureElementRestoreNvmCtx(void *seNvmCtx)
{
 800812c:	0001      	movs	r1, r0
 800812e:	b510      	push	{r4, lr}
    memcpy1((uint8_t *) &SeNvmCtx, (uint8_t *) seNvmCtx, sizeof(SeNvmCtx));
    return SECURE_ELEMENT_SUCCESS;
  }
  else
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8008130:	2002      	movs	r0, #2
  if (seNvmCtx != 0)
 8008132:	2900      	cmp	r1, #0
 8008134:	d004      	beq.n	8008140 <SecureElementRestoreNvmCtx+0x14>
    memcpy1((uint8_t *) &SeNvmCtx, (uint8_t *) seNvmCtx, sizeof(SeNvmCtx));
 8008136:	4803      	ldr	r0, [pc, #12]	; (8008144 <SecureElementRestoreNvmCtx+0x18>)
 8008138:	22ba      	movs	r2, #186	; 0xba
 800813a:	f006 fe59 	bl	800edf0 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800813e:	2000      	movs	r0, #0
  }
}
 8008140:	bd10      	pop	{r4, pc}
 8008142:	46c0      	nop			; (mov r8, r8)
 8008144:	20000050 	.word	0x20000050

08008148 <SecureElementGetNvmCtx>:

void *SecureElementGetNvmCtx(size_t *seNvmCtxSize)
{
  *seNvmCtxSize = sizeof(SeNvmCtx);
 8008148:	23ba      	movs	r3, #186	; 0xba
 800814a:	6003      	str	r3, [r0, #0]
  return &SeNvmCtx;
}
 800814c:	4800      	ldr	r0, [pc, #0]	; (8008150 <SecureElementGetNvmCtx+0x8>)
 800814e:	4770      	bx	lr
 8008150:	20000050 	.word	0x20000050

08008154 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size,
                                                  KeyIdentifier_t keyID, uint32_t *cmac)
{
 8008154:	b513      	push	{r0, r1, r4, lr}
 8008156:	0004      	movs	r4, r0
  if (keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS)
  {
    /* Never accept multicast key identifier for cmac computation */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8008158:	2003      	movs	r0, #3
  if (keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS)
 800815a:	2b7e      	cmp	r3, #126	; 0x7e
 800815c:	d804      	bhi.n	8008168 <SecureElementComputeAesCmac+0x14>
  }

  return ComputeCmac(micBxBuffer, buffer, size, keyID, cmac);
 800815e:	9804      	ldr	r0, [sp, #16]
 8008160:	9000      	str	r0, [sp, #0]
 8008162:	0020      	movs	r0, r4
 8008164:	f7ff fec7 	bl	8007ef6 <ComputeCmac>
}
 8008168:	bd16      	pop	{r1, r2, r4, pc}

0800816a <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac(uint8_t *buffer, uint16_t size, uint32_t expectedCmac,
                                                 KeyIdentifier_t keyID)
{
 800816a:	b530      	push	{r4, r5, lr}
 800816c:	0004      	movs	r4, r0
 800816e:	0015      	movs	r5, r2
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
  if (buffer == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8008170:	2002      	movs	r0, #2
{
 8008172:	b085      	sub	sp, #20
  if (buffer == NULL)
 8008174:	2c00      	cmp	r4, #0
 8008176:	d00e      	beq.n	8008196 <SecureElementVerifyAesCmac+0x2c>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint32_t compCmac = 0;
 8008178:	2000      	movs	r0, #0

  retval = ComputeCmac(NULL, buffer, size, keyID, &compCmac);
 800817a:	aa03      	add	r2, sp, #12
 800817c:	9200      	str	r2, [sp, #0]
 800817e:	000a      	movs	r2, r1
 8008180:	0021      	movs	r1, r4
  uint32_t compCmac = 0;
 8008182:	9003      	str	r0, [sp, #12]
  retval = ComputeCmac(NULL, buffer, size, keyID, &compCmac);
 8008184:	f7ff feb7 	bl	8007ef6 <ComputeCmac>
  if (retval != SECURE_ELEMENT_SUCCESS)
 8008188:	2800      	cmp	r0, #0
 800818a:	d104      	bne.n	8008196 <SecureElementVerifyAesCmac+0x2c>
  {
    return retval;
  }

  if (expectedCmac != compCmac)
 800818c:	9b03      	ldr	r3, [sp, #12]
 800818e:	1b58      	subs	r0, r3, r5
 8008190:	1e42      	subs	r2, r0, #1
 8008192:	4190      	sbcs	r0, r2
    return SECURE_ELEMENT_ERROR_NPE;
 8008194:	b2c0      	uxtb	r0, r0
  }

#endif /* LORAWAN_KMS */

  return retval;
}
 8008196:	b005      	add	sp, #20
 8008198:	bd30      	pop	{r4, r5, pc}

0800819a <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt(uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                              uint8_t *encBuffer)
{
 800819a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800819c:	b0c1      	sub	sp, #260	; 0x104
 800819e:	000e      	movs	r6, r1
 80081a0:	0015      	movs	r5, r2
 80081a2:	001f      	movs	r7, r3
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
  if (buffer == NULL || encBuffer == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 80081a4:	2402      	movs	r4, #2
{
 80081a6:	9001      	str	r0, [sp, #4]
  if (buffer == NULL || encBuffer == NULL)
 80081a8:	2800      	cmp	r0, #0
 80081aa:	d01b      	beq.n	80081e4 <SecureElementAesEncrypt+0x4a>
 80081ac:	2f00      	cmp	r7, #0
 80081ae:	d019      	beq.n	80081e4 <SecureElementAesEncrypt+0x4a>
  }

  /* Check if the size is divisible by 16 */
  if ((size % 16) != 0)
 80081b0:	230f      	movs	r3, #15
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80081b2:	3403      	adds	r4, #3
  if ((size % 16) != 0)
 80081b4:	4019      	ands	r1, r3
 80081b6:	421e      	tst	r6, r3
 80081b8:	d114      	bne.n	80081e4 <SecureElementAesEncrypt+0x4a>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  lorawan_aes_context aesContext;
  memset1(aesContext.ksch, '\0', 240);
 80081ba:	22f0      	movs	r2, #240	; 0xf0
 80081bc:	a803      	add	r0, sp, #12
 80081be:	f006 fe2d 	bl	800ee1c <memset1>

  Key_t *pItem;
  retval = GetKeyByID(keyID, &pItem);
 80081c2:	0028      	movs	r0, r5
 80081c4:	a902      	add	r1, sp, #8
 80081c6:	f7ff fe7f 	bl	8007ec8 <GetKeyByID>
 80081ca:	1e04      	subs	r4, r0, #0

  if (retval == SECURE_ELEMENT_SUCCESS)
 80081cc:	d10a      	bne.n	80081e4 <SecureElementAesEncrypt+0x4a>
  {
    lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 80081ce:	9b02      	ldr	r3, [sp, #8]
 80081d0:	2110      	movs	r1, #16
 80081d2:	1c58      	adds	r0, r3, #1
 80081d4:	aa03      	add	r2, sp, #12
 80081d6:	f7ff fcab 	bl	8007b30 <lorawan_aes_set_key>

    uint8_t block = 0;

    while (size != 0)
 80081da:	0035      	movs	r5, r6
 80081dc:	1b70      	subs	r0, r6, r5
 80081de:	b2c0      	uxtb	r0, r0
 80081e0:	2d00      	cmp	r5, #0
 80081e2:	d102      	bne.n	80081ea <SecureElementAesEncrypt+0x50>
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
}
 80081e4:	0020      	movs	r0, r4
 80081e6:	b041      	add	sp, #260	; 0x104
 80081e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 80081ea:	9b01      	ldr	r3, [sp, #4]
 80081ec:	1839      	adds	r1, r7, r0
 80081ee:	aa03      	add	r2, sp, #12
 80081f0:	1818      	adds	r0, r3, r0
      size = size - 16;
 80081f2:	3d10      	subs	r5, #16
      lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 80081f4:	f7ff fd22 	bl	8007c3c <lorawan_aes_encrypt>
      size = size - 16;
 80081f8:	b2ad      	uxth	r5, r5
 80081fa:	e7ef      	b.n	80081dc <SecureElementAesEncrypt+0x42>

080081fc <SecureElementSetKey.part.0>:
SecureElementStatus_t SecureElementSetKey(KeyIdentifier_t keyID, uint8_t *key)
 80081fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80081fe:	4a19      	ldr	r2, [pc, #100]	; (8008264 <SecureElementSetKey.part.0+0x68>)
 8008200:	000c      	movs	r4, r1
 8008202:	2300      	movs	r3, #0
 8008204:	0015      	movs	r5, r2
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 8008206:	7c11      	ldrb	r1, [r2, #16]
 8008208:	3301      	adds	r3, #1
 800820a:	4281      	cmp	r1, r0
 800820c:	d125      	bne.n	800825a <SecureElementSetKey.part.0+0x5e>
      if (keyID == MC_KEY_0)
 800820e:	2211      	movs	r2, #17
 8008210:	4353      	muls	r3, r2
 8008212:	4e15      	ldr	r6, [pc, #84]	; (8008268 <SecureElementSetKey.part.0+0x6c>)
 8008214:	18ed      	adds	r5, r5, r3
 8008216:	2880      	cmp	r0, #128	; 0x80
 8008218:	d116      	bne.n	8008248 <SecureElementSetKey.part.0+0x4c>
        uint8_t decryptedKey[16] = { 0 };
 800821a:	2100      	movs	r1, #0
 800821c:	3a05      	subs	r2, #5
 800821e:	a801      	add	r0, sp, #4
 8008220:	9100      	str	r1, [sp, #0]
 8008222:	f008 ff07 	bl	8011034 <memset>
        retval = SecureElementAesEncrypt(key, 16, MC_KE_KEY, decryptedKey);
 8008226:	466b      	mov	r3, sp
 8008228:	227f      	movs	r2, #127	; 0x7f
 800822a:	2110      	movs	r1, #16
 800822c:	0020      	movs	r0, r4
 800822e:	f7ff ffb4 	bl	800819a <SecureElementAesEncrypt>
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 8008232:	2210      	movs	r2, #16
        retval = SecureElementAesEncrypt(key, 16, MC_KE_KEY, decryptedKey);
 8008234:	0004      	movs	r4, r0
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 8008236:	4669      	mov	r1, sp
 8008238:	0028      	movs	r0, r5
 800823a:	f006 fdd9 	bl	800edf0 <memcpy1>
        SeNvmCtxChanged();
 800823e:	6833      	ldr	r3, [r6, #0]
 8008240:	4798      	blx	r3
}
 8008242:	0020      	movs	r0, r4
 8008244:	b004      	add	sp, #16
 8008246:	bd70      	pop	{r4, r5, r6, pc}
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, key, SE_KEY_SIZE);
 8008248:	0021      	movs	r1, r4
 800824a:	2210      	movs	r2, #16
 800824c:	0028      	movs	r0, r5
 800824e:	f006 fdcf 	bl	800edf0 <memcpy1>
        SeNvmCtxChanged();
 8008252:	6833      	ldr	r3, [r6, #0]
 8008254:	4798      	blx	r3
        return SECURE_ELEMENT_SUCCESS;
 8008256:	2400      	movs	r4, #0
 8008258:	e7f3      	b.n	8008242 <SecureElementSetKey.part.0+0x46>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800825a:	3211      	adds	r2, #17
 800825c:	2b0a      	cmp	r3, #10
 800825e:	d1d2      	bne.n	8008206 <SecureElementSetKey.part.0+0xa>
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8008260:	2403      	movs	r4, #3
 8008262:	e7ee      	b.n	8008242 <SecureElementSetKey.part.0+0x46>
 8008264:	20000050 	.word	0x20000050
 8008268:	2000036c 	.word	0x2000036c

0800826c <SecureElementSetKey>:
{
 800826c:	0003      	movs	r3, r0
 800826e:	b510      	push	{r4, lr}
    return SECURE_ELEMENT_ERROR_NPE;
 8008270:	2002      	movs	r0, #2
  if (key == NULL)
 8008272:	2900      	cmp	r1, #0
 8008274:	d002      	beq.n	800827c <SecureElementSetKey+0x10>
 8008276:	0018      	movs	r0, r3
 8008278:	f7ff ffc0 	bl	80081fc <SecureElementSetKey.part.0>
}
 800827c:	bd10      	pop	{r4, pc}

0800827e <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey(Version_t version, uint8_t *input, KeyIdentifier_t rootKeyID,
                                                     KeyIdentifier_t targetKeyID)
{
 800827e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008280:	000d      	movs	r5, r1
 8008282:	0016      	movs	r6, r2
 8008284:	001c      	movs	r4, r3
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
  if (input == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8008286:	2002      	movs	r0, #2
  if (input == NULL)
 8008288:	2900      	cmp	r1, #0
 800828a:	d016      	beq.n	80082ba <SecureElementDeriveAndStoreKey+0x3c>
  }

  /* In case of MC_KE_KEY, only McRootKey can be used as root key */
  if (targetKeyID == MC_KE_KEY)
 800828c:	2b7f      	cmp	r3, #127	; 0x7f
 800828e:	d102      	bne.n	8008296 <SecureElementDeriveAndStoreKey+0x18>
  {
    if (rootKeyID != MC_ROOT_KEY)
    {
      return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8008290:	3001      	adds	r0, #1
    if (rootKeyID != MC_ROOT_KEY)
 8008292:	2a04      	cmp	r2, #4
 8008294:	d111      	bne.n	80082ba <SecureElementDeriveAndStoreKey+0x3c>
    }
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t key[16] = { 0 };
 8008296:	2100      	movs	r1, #0
 8008298:	220c      	movs	r2, #12
 800829a:	a801      	add	r0, sp, #4
 800829c:	9100      	str	r1, [sp, #0]
 800829e:	f008 fec9 	bl	8011034 <memset>
  /* Derive key */
  retval = SecureElementAesEncrypt(input, 16, rootKeyID, key);
 80082a2:	466b      	mov	r3, sp
 80082a4:	0032      	movs	r2, r6
 80082a6:	2110      	movs	r1, #16
 80082a8:	0028      	movs	r0, r5
 80082aa:	f7ff ff76 	bl	800819a <SecureElementAesEncrypt>
  if (retval != SECURE_ELEMENT_SUCCESS)
 80082ae:	2800      	cmp	r0, #0
 80082b0:	d103      	bne.n	80082ba <SecureElementDeriveAndStoreKey+0x3c>
  if (key == NULL)
 80082b2:	4669      	mov	r1, sp
 80082b4:	0020      	movs	r0, r4
 80082b6:	f7ff ffa1 	bl	80081fc <SecureElementSetKey.part.0>
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
}
 80082ba:	b004      	add	sp, #16
 80082bc:	bd70      	pop	{r4, r5, r6, pc}

080082be <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept(JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                     uint16_t devNonce, uint8_t *encJoinAccept,
                                                     uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                     uint8_t *versionMinor)
{
 80082be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c0:	001d      	movs	r5, r3
 80082c2:	ab06      	add	r3, sp, #24
  if ((encJoinAccept == NULL) || (decJoinAccept == NULL) || (versionMinor == NULL))
  {
    return SECURE_ELEMENT_ERROR_NPE;
 80082c4:	2002      	movs	r0, #2
{
 80082c6:	781f      	ldrb	r7, [r3, #0]
 80082c8:	9e07      	ldr	r6, [sp, #28]
  if ((encJoinAccept == NULL) || (decJoinAccept == NULL) || (versionMinor == NULL))
 80082ca:	2d00      	cmp	r5, #0
 80082cc:	d037      	beq.n	800833e <SecureElementProcessJoinAccept+0x80>
 80082ce:	2e00      	cmp	r6, #0
 80082d0:	d035      	beq.n	800833e <SecureElementProcessJoinAccept+0x80>
 80082d2:	9b08      	ldr	r3, [sp, #32]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d032      	beq.n	800833e <SecureElementProcessJoinAccept+0x80>
  }

  /* Check that frame size isn't bigger than a JoinAccept with CFList size */
  if (encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE)
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80082d8:	3003      	adds	r0, #3
  if (encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE)
 80082da:	2f21      	cmp	r7, #33	; 0x21
 80082dc:	d82f      	bhi.n	800833e <SecureElementProcessJoinAccept+0x80>
  {
    encKeyID = J_S_ENC_KEY;
  }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

  memcpy1(decJoinAccept, encJoinAccept, encJoinAcceptSize);
 80082de:	b2bc      	uxth	r4, r7
 80082e0:	0022      	movs	r2, r4
 80082e2:	0029      	movs	r1, r5
 80082e4:	0030      	movs	r0, r6
 80082e6:	f006 fd83 	bl	800edf0 <memcpy1>

  /* Decrypt JoinAccept, skip MHDR */
  if (SecureElementAesEncrypt(encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 80082ea:	1e61      	subs	r1, r4, #1
 80082ec:	1c73      	adds	r3, r6, #1
 80082ee:	2201      	movs	r2, #1
 80082f0:	b289      	uxth	r1, r1
 80082f2:	1c68      	adds	r0, r5, #1
 80082f4:	f7ff ff51 	bl	800819a <SecureElementAesEncrypt>
 80082f8:	0003      	movs	r3, r0
                              encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE) != SECURE_ELEMENT_SUCCESS)
  {
    return SECURE_ELEMENT_FAIL_ENCRYPT;
 80082fa:	2007      	movs	r0, #7
  if (SecureElementAesEncrypt(encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d11e      	bne.n	800833e <SecureElementProcessJoinAccept+0x80>
  }

  *versionMinor = ((decJoinAccept[11] & 0x80) == 0x80) ? 1 : 0;
 8008300:	7af3      	ldrb	r3, [r6, #11]
 8008302:	9a08      	ldr	r2, [sp, #32]
 8008304:	40c3      	lsrs	r3, r0
    }
  }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
  else
  {
    return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 8008306:	3803      	subs	r0, #3
  *versionMinor = ((decJoinAccept[11] & 0x80) == 0x80) ? 1 : 0;
 8008308:	7013      	strb	r3, [r2, #0]
  if (*versionMinor == 0)
 800830a:	2b00      	cmp	r3, #0
 800830c:	d117      	bne.n	800833e <SecureElementProcessJoinAccept+0x80>
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16);
 800830e:	19f3      	adds	r3, r6, r7
 8008310:	1e9a      	subs	r2, r3, #2
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24);
 8008312:	1e59      	subs	r1, r3, #1
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16);
 8008314:	7812      	ldrb	r2, [r2, #0]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24);
 8008316:	7809      	ldrb	r1, [r1, #0]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16);
 8008318:	0412      	lsls	r2, r2, #16
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24);
 800831a:	0609      	lsls	r1, r1, #24
 800831c:	430a      	orrs	r2, r1
  mic = ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0);
 800831e:	1f19      	subs	r1, r3, #4
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8);
 8008320:	3b03      	subs	r3, #3
  mic = ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0);
 8008322:	7809      	ldrb	r1, [r1, #0]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8);
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	430a      	orrs	r2, r1
 8008328:	021b      	lsls	r3, r3, #8
    if (SecureElementVerifyAesCmac(decJoinAccept, (encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE), mic, NWK_KEY) !=
 800832a:	1f21      	subs	r1, r4, #4
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24);
 800832c:	431a      	orrs	r2, r3
    if (SecureElementVerifyAesCmac(decJoinAccept, (encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE), mic, NWK_KEY) !=
 800832e:	0030      	movs	r0, r6
 8008330:	2301      	movs	r3, #1
 8008332:	b289      	uxth	r1, r1
 8008334:	f7ff ff19 	bl	800816a <SecureElementVerifyAesCmac>
 8008338:	1e43      	subs	r3, r0, #1
 800833a:	4198      	sbcs	r0, r3
    return SECURE_ELEMENT_ERROR_NPE;
 800833c:	b2c0      	uxtb	r0, r0
  }

  return SECURE_ELEMENT_SUCCESS;
}
 800833e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008340 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber(uint32_t *randomNum)
{
 8008340:	b513      	push	{r0, r1, r4, lr}
 8008342:	0004      	movs	r4, r0
  if (randomNum == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8008344:	2002      	movs	r0, #2
  if (randomNum == NULL)
 8008346:	2c00      	cmp	r4, #0
 8008348:	d005      	beq.n	8008356 <SecureElementRandomNumber+0x16>
  }
  *randomNum = Radio.Random( );
 800834a:	4b03      	ldr	r3, [pc, #12]	; (8008358 <SecureElementRandomNumber+0x18>)
 800834c:	695b      	ldr	r3, [r3, #20]
 800834e:	9301      	str	r3, [sp, #4]
 8008350:	4798      	blx	r3
 8008352:	6020      	str	r0, [r4, #0]
  return SECURE_ELEMENT_SUCCESS;
 8008354:	2000      	movs	r0, #0
}
 8008356:	bd16      	pop	{r1, r2, r4, pc}
 8008358:	080117e0 	.word	0x080117e0

0800835c <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui(uint8_t *devEui)
{
 800835c:	0001      	movs	r1, r0
 800835e:	b510      	push	{r4, lr}
  if (devEui == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8008360:	2002      	movs	r0, #2
  if (devEui == NULL)
 8008362:	2900      	cmp	r1, #0
 8008364:	d007      	beq.n	8008376 <SecureElementSetDevEui+0x1a>
  }
  memcpy1(SeNvmCtx.DevEui, devEui, SE_EUI_SIZE);
 8008366:	4804      	ldr	r0, [pc, #16]	; (8008378 <SecureElementSetDevEui+0x1c>)
 8008368:	2208      	movs	r2, #8
 800836a:	f006 fd41 	bl	800edf0 <memcpy1>
  SeNvmCtxChanged();
 800836e:	4b03      	ldr	r3, [pc, #12]	; (800837c <SecureElementSetDevEui+0x20>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 8008374:	2000      	movs	r0, #0
}
 8008376:	bd10      	pop	{r4, pc}
 8008378:	20000050 	.word	0x20000050
 800837c:	2000036c 	.word	0x2000036c

08008380 <SecureElementGetDevEui>:

uint8_t *SecureElementGetDevEui(void)
{
  return SeNvmCtx.DevEui;
}
 8008380:	4800      	ldr	r0, [pc, #0]	; (8008384 <SecureElementGetDevEui+0x4>)
 8008382:	4770      	bx	lr
 8008384:	20000050 	.word	0x20000050

08008388 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui(uint8_t *joinEui)
{
 8008388:	0001      	movs	r1, r0
 800838a:	b510      	push	{r4, lr}
  if (joinEui == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800838c:	2002      	movs	r0, #2
  if (joinEui == NULL)
 800838e:	2900      	cmp	r1, #0
 8008390:	d007      	beq.n	80083a2 <SecureElementSetJoinEui+0x1a>
  }
  memcpy1(SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE);
 8008392:	4804      	ldr	r0, [pc, #16]	; (80083a4 <SecureElementSetJoinEui+0x1c>)
 8008394:	2208      	movs	r2, #8
 8008396:	f006 fd2b 	bl	800edf0 <memcpy1>
  SeNvmCtxChanged();
 800839a:	4b03      	ldr	r3, [pc, #12]	; (80083a8 <SecureElementSetJoinEui+0x20>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 80083a0:	2000      	movs	r0, #0
}
 80083a2:	bd10      	pop	{r4, pc}
 80083a4:	20000058 	.word	0x20000058
 80083a8:	2000036c 	.word	0x2000036c

080083ac <SecureElementGetJoinEui>:

uint8_t *SecureElementGetJoinEui(void)
{
  return SeNvmCtx.JoinEui;
}
 80083ac:	4800      	ldr	r0, [pc, #0]	; (80083b0 <SecureElementGetJoinEui+0x4>)
 80083ae:	4770      	bx	lr
 80083b0:	20000058 	.word	0x20000058

080083b4 <DisplayClassUpdate>:
    }
  }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 80083b4:	b507      	push	{r0, r1, r2, lr}
  MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 80083b6:	2200      	movs	r2, #0
 80083b8:	4b04      	ldr	r3, [pc, #16]	; (80083cc <DisplayClassUpdate+0x18>)
 80083ba:	0011      	movs	r1, r2
 80083bc:	5c1b      	ldrb	r3, [r3, r0]
 80083be:	2002      	movs	r0, #2
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	4b03      	ldr	r3, [pc, #12]	; (80083d0 <DisplayClassUpdate+0x1c>)
 80083c4:	f008 f8c4 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
}
 80083c8:	bd07      	pop	{r0, r1, r2, pc}
 80083ca:	46c0      	nop			; (mov r8, r8)
 80083cc:	08011dcc 	.word	0x08011dcc
 80083d0:	08011db2 	.word	0x08011db2

080083d4 <LmHandlerDeviceTimeReq>:
{
 80083d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  mlmeReq.Type = MLME_DEVICE_TIME;
 80083d6:	230a      	movs	r3, #10
 80083d8:	a801      	add	r0, sp, #4
 80083da:	7003      	strb	r3, [r0, #0]
  status = LoRaMacMlmeRequest(&mlmeReq);
 80083dc:	f003 f8e0 	bl	800b5a0 <LoRaMacMlmeRequest>
  if (status == LORAMAC_STATUS_OK)
 80083e0:	1e43      	subs	r3, r0, #1
 80083e2:	4198      	sbcs	r0, r3
 80083e4:	4240      	negs	r0, r0
}
 80083e6:	b007      	add	sp, #28
 80083e8:	bd00      	pop	{pc}
	...

080083ec <DisplayBeaconUpdate.constprop.0>:

#if ( LORAMAC_CLASSB_ENABLED == 1 )
static void DisplayBeaconUpdate(LmHandlerBeaconParams_t *params)
 80083ec:	b510      	push	{r4, lr}
{
  static const char *EventBeaconStateStrings[] = { "BC_ACQUIRING", "BC_LOST", "BC_RECEIVED", "BC_NOT_RECEIVED" };

  MW_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== %s\r\n", EventBeaconStateStrings[params->State]);
 80083ee:	4c1c      	ldr	r4, [pc, #112]	; (8008460 <DisplayBeaconUpdate.constprop.0+0x74>)
 80083f0:	4a1c      	ldr	r2, [pc, #112]	; (8008464 <DisplayBeaconUpdate.constprop.0+0x78>)
 80083f2:	7863      	ldrb	r3, [r4, #1]
static void DisplayBeaconUpdate(LmHandlerBeaconParams_t *params)
 80083f4:	b088      	sub	sp, #32
  MW_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== %s\r\n", EventBeaconStateStrings[params->State]);
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	589b      	ldr	r3, [r3, r2]
 80083fa:	2200      	movs	r2, #0
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	0011      	movs	r1, r2
 8008400:	4b19      	ldr	r3, [pc, #100]	; (8008468 <DisplayBeaconUpdate.constprop.0+0x7c>)
 8008402:	2002      	movs	r0, #2
 8008404:	f008 f8a4 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
  if (params->State == LORAMAC_HANDLER_BEACON_RX)
 8008408:	7863      	ldrb	r3, [r4, #1]
 800840a:	2b02      	cmp	r3, #2
 800840c:	d125      	bne.n	800845a <DisplayBeaconUpdate.constprop.0+0x6e>
  {
    MW_LOG(TS_OFF, VLEVEL_H, "###### BTIME:%010d | GW DESC:%d | GW INFO:%02X %02X %02X %02X %02X %02X\r\n",
 800840e:	2200      	movs	r2, #0
 8008410:	7ee3      	ldrb	r3, [r4, #27]
 8008412:	0011      	movs	r1, r2
 8008414:	9307      	str	r3, [sp, #28]
 8008416:	7ea3      	ldrb	r3, [r4, #26]
 8008418:	2003      	movs	r0, #3
 800841a:	9306      	str	r3, [sp, #24]
 800841c:	7e63      	ldrb	r3, [r4, #25]
 800841e:	9305      	str	r3, [sp, #20]
 8008420:	7e23      	ldrb	r3, [r4, #24]
 8008422:	9304      	str	r3, [sp, #16]
 8008424:	7de3      	ldrb	r3, [r4, #23]
 8008426:	9303      	str	r3, [sp, #12]
 8008428:	7da3      	ldrb	r3, [r4, #22]
 800842a:	9302      	str	r3, [sp, #8]
 800842c:	7d63      	ldrb	r3, [r4, #21]
 800842e:	9301      	str	r3, [sp, #4]
 8008430:	6863      	ldr	r3, [r4, #4]
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	4b0d      	ldr	r3, [pc, #52]	; (800846c <DisplayBeaconUpdate.constprop.0+0x80>)
 8008436:	f008 f88b 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
           params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
           params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
           params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
           params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
    MW_LOG(TS_OFF, VLEVEL_H, "###### FREQ:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 800843a:	2314      	movs	r3, #20
 800843c:	56e3      	ldrsb	r3, [r4, r3]
 800843e:	2003      	movs	r0, #3
 8008440:	9303      	str	r3, [sp, #12]
 8008442:	2212      	movs	r2, #18
 8008444:	5ea3      	ldrsh	r3, [r4, r2]
 8008446:	2200      	movs	r2, #0
 8008448:	9302      	str	r3, [sp, #8]
 800844a:	7c23      	ldrb	r3, [r4, #16]
 800844c:	0011      	movs	r1, r2
 800844e:	9301      	str	r3, [sp, #4]
 8008450:	68e3      	ldr	r3, [r4, #12]
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	4b06      	ldr	r3, [pc, #24]	; (8008470 <DisplayBeaconUpdate.constprop.0+0x84>)
 8008456:	f008 f87b 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
           params->Info.Frequency, params->Info.Datarate,
           params->Info.Rssi, params->Info.Snr);
  }
}
 800845a:	b008      	add	sp, #32
 800845c:	bd10      	pop	{r4, pc}
 800845e:	46c0      	nop			; (mov r8, r8)
 8008460:	20000370 	.word	0x20000370
 8008464:	08011634 	.word	0x08011634
 8008468:	08011dd0 	.word	0x08011dd0
 800846c:	08011de9 	.word	0x08011de9
 8008470:	08011e33 	.word	0x08011e33

08008474 <MlmeIndication>:
{
 8008474:	b530      	push	{r4, r5, lr}
  RxParams.IsMcpsIndication = 0;
 8008476:	2400      	movs	r4, #0
 8008478:	4b1c      	ldr	r3, [pc, #112]	; (80084ec <MlmeIndication+0x78>)
{
 800847a:	b08b      	sub	sp, #44	; 0x2c
  RxParams.IsMcpsIndication = 0;
 800847c:	701c      	strb	r4, [r3, #0]
  RxParams.Status = mlmeIndication->Status;
 800847e:	7842      	ldrb	r2, [r0, #1]
 8008480:	705a      	strb	r2, [r3, #1]
  switch (mlmeIndication->MlmeIndication)
 8008482:	7803      	ldrb	r3, [r0, #0]
 8008484:	2b0b      	cmp	r3, #11
 8008486:	d020      	beq.n	80084ca <MlmeIndication+0x56>
 8008488:	2b0f      	cmp	r3, #15
 800848a:	d11c      	bne.n	80084c6 <MlmeIndication+0x52>
      mibReq.Type = MIB_DEVICE_CLASS;
 800848c:	466b      	mov	r3, sp
      LoRaMacMibSetRequestConfirm(&mibReq);
 800848e:	a801      	add	r0, sp, #4
      mibReq.Type = MIB_DEVICE_CLASS;
 8008490:	711c      	strb	r4, [r3, #4]
      mibReq.Param.Class = CLASS_A;
 8008492:	721c      	strb	r4, [r3, #8]
      LoRaMacMibSetRequestConfirm(&mibReq);
 8008494:	f002 fe58 	bl	800b148 <LoRaMacMibSetRequestConfirm>
      BeaconParams.State = LORAMAC_HANDLER_BEACON_LOST;
 8008498:	4d15      	ldr	r5, [pc, #84]	; (80084f0 <MlmeIndication+0x7c>)
 800849a:	2301      	movs	r3, #1
      UTIL_MEM_set_8(BeaconParams.Info.GwSpecific.Info, 0, 6);
 800849c:	0028      	movs	r0, r5
 800849e:	2206      	movs	r2, #6
 80084a0:	0021      	movs	r1, r4
 80084a2:	3016      	adds	r0, #22
      BeaconParams.State = LORAMAC_HANDLER_BEACON_LOST;
 80084a4:	706b      	strb	r3, [r5, #1]
      BeaconParams.Info.Time.Seconds = 0;
 80084a6:	606c      	str	r4, [r5, #4]
      BeaconParams.Info.GwSpecific.InfoDesc = 0;
 80084a8:	756c      	strb	r4, [r5, #21]
      UTIL_MEM_set_8(BeaconParams.Info.GwSpecific.Info, 0, 6);
 80084aa:	f008 f975 	bl	8010798 <UTIL_MEM_set_8>
      DisplayClassUpdate(CLASS_A);
 80084ae:	0020      	movs	r0, r4
 80084b0:	f7ff ff80 	bl	80083b4 <DisplayClassUpdate>
      if (LmHandlerCallbacks.OnClassChange != NULL)
 80084b4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80084b6:	42a3      	cmp	r3, r4
 80084b8:	d001      	beq.n	80084be <MlmeIndication+0x4a>
        LmHandlerCallbacks.OnClassChange( CLASS_A );      
 80084ba:	0020      	movs	r0, r4
 80084bc:	4798      	blx	r3
      DisplayBeaconUpdate(&BeaconParams);
 80084be:	f7ff ff95 	bl	80083ec <DisplayBeaconUpdate.constprop.0>
      LmHandlerDeviceTimeReq();
 80084c2:	f7ff ff87 	bl	80083d4 <LmHandlerDeviceTimeReq>
}
 80084c6:	b00b      	add	sp, #44	; 0x2c
 80084c8:	bd30      	pop	{r4, r5, pc}
      if (mlmeIndication->Status == LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED)
 80084ca:	4b09      	ldr	r3, [pc, #36]	; (80084f0 <MlmeIndication+0x7c>)
 80084cc:	3004      	adds	r0, #4
 80084ce:	2a0e      	cmp	r2, #14
 80084d0:	d109      	bne.n	80084e6 <MlmeIndication+0x72>
        BeaconParams.State = LORAMAC_HANDLER_BEACON_RX;
 80084d2:	3a0c      	subs	r2, #12
        BeaconParams.State = LORAMAC_HANDLER_BEACON_NRX;
 80084d4:	705a      	strb	r2, [r3, #1]
        BeaconParams.Info = mlmeIndication->BeaconInfo;
 80084d6:	3304      	adds	r3, #4
 80084d8:	c816      	ldmia	r0!, {r1, r2, r4}
 80084da:	c316      	stmia	r3!, {r1, r2, r4}
 80084dc:	c816      	ldmia	r0!, {r1, r2, r4}
 80084de:	c316      	stmia	r3!, {r1, r2, r4}
        DisplayBeaconUpdate(&BeaconParams);
 80084e0:	f7ff ff84 	bl	80083ec <DisplayBeaconUpdate.constprop.0>
}
 80084e4:	e7ef      	b.n	80084c6 <MlmeIndication+0x52>
        BeaconParams.State = LORAMAC_HANDLER_BEACON_NRX;
 80084e6:	2203      	movs	r2, #3
 80084e8:	e7f4      	b.n	80084d4 <MlmeIndication+0x60>
 80084ea:	46c0      	nop			; (mov r8, r8)
 80084ec:	2000010c 	.word	0x2000010c
 80084f0:	20000370 	.word	0x20000370

080084f4 <McpsConfirm>:
{
 80084f4:	b570      	push	{r4, r5, r6, lr}
  TxParams.IsMcpsConfirm = 1;
 80084f6:	4d11      	ldr	r5, [pc, #68]	; (800853c <McpsConfirm+0x48>)
{
 80084f8:	0004      	movs	r4, r0
  TxParams.IsMcpsConfirm = 1;
 80084fa:	0028      	movs	r0, r5
 80084fc:	2301      	movs	r3, #1
 80084fe:	303c      	adds	r0, #60	; 0x3c
 8008500:	7003      	strb	r3, [r0, #0]
  TxParams.Status = mcpsConfirm->Status;
 8008502:	7863      	ldrb	r3, [r4, #1]
 8008504:	002e      	movs	r6, r5
 8008506:	7043      	strb	r3, [r0, #1]
  TxParams.Datarate = mcpsConfirm->Datarate;
 8008508:	78a3      	ldrb	r3, [r4, #2]
 800850a:	3654      	adds	r6, #84	; 0x54
 800850c:	7103      	strb	r3, [r0, #4]
  TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800850e:	68e3      	ldr	r3, [r4, #12]
 8008510:	646b      	str	r3, [r5, #68]	; 0x44
  TxParams.TxPower = mcpsConfirm->TxPower;
 8008512:	78e3      	ldrb	r3, [r4, #3]
 8008514:	7503      	strb	r3, [r0, #20]
  TxParams.Channel = mcpsConfirm->Channel;
 8008516:	6923      	ldr	r3, [r4, #16]
 8008518:	7543      	strb	r3, [r0, #21]
  TxParams.AckReceived = mcpsConfirm->AckReceived;
 800851a:	7923      	ldrb	r3, [r4, #4]
 800851c:	70c3      	strb	r3, [r0, #3]
  LmHandlerCallbacks.OnTxData(&TxParams);
 800851e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008520:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 8008522:	3568      	adds	r5, #104	; 0x68
    if (LmHandlerPackages[i] != NULL)
 8008524:	6833      	ldr	r3, [r6, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d004      	beq.n	8008534 <McpsConfirm+0x40>
          if (LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL)
 800852a:	695b      	ldr	r3, [r3, #20]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d001      	beq.n	8008534 <McpsConfirm+0x40>
            LmHandlerPackages[i]->OnMcpsConfirmProcess(params);
 8008530:	0020      	movs	r0, r4
 8008532:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 8008534:	3604      	adds	r6, #4
 8008536:	42ae      	cmp	r6, r5
 8008538:	d1f4      	bne.n	8008524 <McpsConfirm+0x30>
}
 800853a:	bd70      	pop	{r4, r5, r6, pc}
 800853c:	20000370 	.word	0x20000370

08008540 <LmHandlerConfigure>:
{
 8008540:	b5f0      	push	{r4, r5, r6, r7, lr}
  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8008542:	4f50      	ldr	r7, [pc, #320]	; (8008684 <LmHandlerConfigure+0x144>)
{
 8008544:	0001      	movs	r1, r0
  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8008546:	003c      	movs	r4, r7
 8008548:	3468      	adds	r4, #104	; 0x68
 800854a:	2206      	movs	r2, #6
 800854c:	0020      	movs	r0, r4
{
 800854e:	b097      	sub	sp, #92	; 0x5c
  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8008550:	f008 f918 	bl	8010784 <UTIL_MEM_cpy_8>
  IsClassBSwitchPending = false;
 8008554:	003b      	movs	r3, r7
 8008556:	2200      	movs	r2, #0
 8008558:	336e      	adds	r3, #110	; 0x6e
 800855a:	701a      	strb	r2, [r3, #0]
  loraInfo = LoraInfo_GetPtr();
 800855c:	f7fb f8bc 	bl	80036d8 <LoraInfo_GetPtr>
  if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 8008560:	2301      	movs	r3, #1
 8008562:	7822      	ldrb	r2, [r4, #0]
 8008564:	6841      	ldr	r1, [r0, #4]
 8008566:	4093      	lsls	r3, r2
 8008568:	0008      	movs	r0, r1
 800856a:	4018      	ands	r0, r3
 800856c:	4219      	tst	r1, r3
 800856e:	d00b      	beq.n	8008588 <LmHandlerConfigure+0x48>
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 8008570:	0039      	movs	r1, r7
 8008572:	4e45      	ldr	r6, [pc, #276]	; (8008688 <LmHandlerConfigure+0x148>)
 8008574:	3170      	adds	r1, #112	; 0x70
 8008576:	0030      	movs	r0, r6
 8008578:	f002 fa62 	bl	800aa40 <LoRaMacInitialization>
 800857c:	9009      	str	r0, [sp, #36]	; 0x24
 800857e:	2800      	cmp	r0, #0
 8008580:	d008      	beq.n	8008594 <LmHandlerConfigure+0x54>
      return LORAMAC_HANDLER_ERROR;
 8008582:	2001      	movs	r0, #1
 8008584:	4240      	negs	r0, r0
 8008586:	e062      	b.n	800864e <LmHandlerConfigure+0x10e>
    MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 8008588:	2201      	movs	r2, #1
 800858a:	0001      	movs	r1, r0
 800858c:	4b3f      	ldr	r3, [pc, #252]	; (800868c <LmHandlerConfigure+0x14c>)
 800858e:	f007 ffdf 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
    while (1) {}  /* error: Region is not defined in the MW */
 8008592:	e7fe      	b.n	8008592 <LmHandlerConfigure+0x52>
  if (NvmCtxMgmtRestore() == NVMCTXMGMT_STATUS_SUCCESS)
 8008594:	f000 fcd1 	bl	8008f3a <NvmCtxMgmtRestore>
 8008598:	ac0d      	add	r4, sp, #52	; 0x34
 800859a:	4d3d      	ldr	r5, [pc, #244]	; (8008690 <LmHandlerConfigure+0x150>)
 800859c:	2800      	cmp	r0, #0
 800859e:	d158      	bne.n	8008652 <LmHandlerConfigure+0x112>
    CtxRestoreDone = true;
 80085a0:	2301      	movs	r3, #1
 80085a2:	7433      	strb	r3, [r6, #16]
  MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\r\n",
 80085a4:	2200      	movs	r2, #0
 80085a6:	7deb      	ldrb	r3, [r5, #23]
 80085a8:	0011      	movs	r1, r2
 80085aa:	9307      	str	r3, [sp, #28]
 80085ac:	7dab      	ldrb	r3, [r5, #22]
 80085ae:	2002      	movs	r0, #2
 80085b0:	9306      	str	r3, [sp, #24]
 80085b2:	7d6b      	ldrb	r3, [r5, #21]
  mibReq.Type = MIB_PUBLIC_NETWORK;
 80085b4:	260f      	movs	r6, #15
  MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\r\n",
 80085b6:	9305      	str	r3, [sp, #20]
 80085b8:	7d2b      	ldrb	r3, [r5, #20]
  mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 80085ba:	3768      	adds	r7, #104	; 0x68
  MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\r\n",
 80085bc:	9304      	str	r3, [sp, #16]
 80085be:	7ceb      	ldrb	r3, [r5, #19]
 80085c0:	9303      	str	r3, [sp, #12]
 80085c2:	7cab      	ldrb	r3, [r5, #18]
 80085c4:	9302      	str	r3, [sp, #8]
 80085c6:	7c6b      	ldrb	r3, [r5, #17]
 80085c8:	9301      	str	r3, [sp, #4]
 80085ca:	7c2b      	ldrb	r3, [r5, #16]
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	4b31      	ldr	r3, [pc, #196]	; (8008694 <LmHandlerConfigure+0x154>)
 80085d0:	f007 ffbe 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
  MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\r\n",
 80085d4:	2200      	movs	r2, #0
 80085d6:	7feb      	ldrb	r3, [r5, #31]
 80085d8:	0011      	movs	r1, r2
 80085da:	9307      	str	r3, [sp, #28]
 80085dc:	7fab      	ldrb	r3, [r5, #30]
 80085de:	2002      	movs	r0, #2
 80085e0:	9306      	str	r3, [sp, #24]
 80085e2:	7f6b      	ldrb	r3, [r5, #29]
 80085e4:	9305      	str	r3, [sp, #20]
 80085e6:	7f2b      	ldrb	r3, [r5, #28]
 80085e8:	9304      	str	r3, [sp, #16]
 80085ea:	7eeb      	ldrb	r3, [r5, #27]
 80085ec:	9303      	str	r3, [sp, #12]
 80085ee:	7eab      	ldrb	r3, [r5, #26]
 80085f0:	9302      	str	r3, [sp, #8]
 80085f2:	7e6b      	ldrb	r3, [r5, #25]
 80085f4:	9301      	str	r3, [sp, #4]
 80085f6:	7e2b      	ldrb	r3, [r5, #24]
  mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 80085f8:	2500      	movs	r5, #0
  MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\r\n",
 80085fa:	9300      	str	r3, [sp, #0]
 80085fc:	4b26      	ldr	r3, [pc, #152]	; (8008698 <LmHandlerConfigure+0x158>)
 80085fe:	f007 ffa7 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
  mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8008602:	2301      	movs	r3, #1
  LoRaMacMibSetRequestConfirm(&mibReq);
 8008604:	0020      	movs	r0, r4
  mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8008606:	7123      	strb	r3, [r4, #4]
  mibReq.Type = MIB_PUBLIC_NETWORK;
 8008608:	7026      	strb	r6, [r4, #0]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800860a:	f002 fd9d 	bl	800b148 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_REPEATER_SUPPORT;
 800860e:	2310      	movs	r3, #16
  LoRaMacMibSetRequestConfirm(&mibReq);
 8008610:	0020      	movs	r0, r4
  mibReq.Type = MIB_REPEATER_SUPPORT;
 8008612:	7023      	strb	r3, [r4, #0]
  mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8008614:	7125      	strb	r5, [r4, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 8008616:	f002 fd97 	bl	800b148 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_ADR;
 800861a:	2304      	movs	r3, #4
 800861c:	7023      	strb	r3, [r4, #0]
  mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800861e:	78bb      	ldrb	r3, [r7, #2]
  LoRaMacMibSetRequestConfirm(&mibReq);
 8008620:	0020      	movs	r0, r4
  mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8008622:	7123      	strb	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 8008624:	f002 fd90 	bl	800b148 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8008628:	2322      	movs	r3, #34	; 0x22
  LoRaMacMibSetRequestConfirm(&mibReq);
 800862a:	0020      	movs	r0, r4
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800862c:	7023      	strb	r3, [r4, #0]
  mibReq.Param.SystemMaxRxError = 20;
 800862e:	3b0e      	subs	r3, #14
 8008630:	6063      	str	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 8008632:	f002 fd89 	bl	800b148 <LoRaMacMibSetRequestConfirm>
  getPhy.Attribute = PHY_DUTY_CYCLE;
 8008636:	a90b      	add	r1, sp, #44	; 0x2c
  phyParam = RegionGetPhyParam(LmHandlerParams.ActiveRegion, &getPhy);
 8008638:	7838      	ldrb	r0, [r7, #0]
  getPhy.Attribute = PHY_DUTY_CYCLE;
 800863a:	700e      	strb	r6, [r1, #0]
  phyParam = RegionGetPhyParam(LmHandlerParams.ActiveRegion, &getPhy);
 800863c:	f005 fa68 	bl	800db10 <RegionGetPhyParam>
  LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 8008640:	1e43      	subs	r3, r0, #1
 8008642:	4198      	sbcs	r0, r3
 8008644:	b2c0      	uxtb	r0, r0
 8008646:	7138      	strb	r0, [r7, #4]
  LoRaMacTestSetDutyCycleOn(LmHandlerParams.DutyCycleEnabled);
 8008648:	f003 fa7a 	bl	800bb40 <LoRaMacTestSetDutyCycleOn>
  return LORAMAC_HANDLER_SUCCESS;
 800864c:	0028      	movs	r0, r5
}
 800864e:	b017      	add	sp, #92	; 0x5c
 8008650:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CtxRestoreDone = false;
 8008652:	9b09      	ldr	r3, [sp, #36]	; 0x24
    LoRaMacMibGetRequestConfirm(&mibReq);
 8008654:	0020      	movs	r0, r4
    CtxRestoreDone = false;
 8008656:	7433      	strb	r3, [r6, #16]
    mibReq.Type = MIB_DEV_EUI;
 8008658:	2302      	movs	r3, #2
 800865a:	7023      	strb	r3, [r4, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 800865c:	f002 fc56 	bl	800af0c <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.DevEui, mibReq.Param.DevEui, 8);
 8008660:	0028      	movs	r0, r5
 8008662:	6861      	ldr	r1, [r4, #4]
 8008664:	2208      	movs	r2, #8
 8008666:	3010      	adds	r0, #16
 8008668:	f006 fbc2 	bl	800edf0 <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 800866c:	2303      	movs	r3, #3
    LoRaMacMibGetRequestConfirm(&mibReq);
 800866e:	0020      	movs	r0, r4
    mibReq.Type = MIB_JOIN_EUI;
 8008670:	7023      	strb	r3, [r4, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 8008672:	f002 fc4b 	bl	800af0c <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8);
 8008676:	0028      	movs	r0, r5
 8008678:	2208      	movs	r2, #8
 800867a:	6861      	ldr	r1, [r4, #4]
 800867c:	3018      	adds	r0, #24
 800867e:	f006 fbb7 	bl	800edf0 <memcpy1>
 8008682:	e78f      	b.n	80085a4 <LmHandlerConfigure+0x64>
 8008684:	20000370 	.word	0x20000370
 8008688:	200003f0 	.word	0x200003f0
 800868c:	08011e5f 	.word	0x08011e5f
 8008690:	2000010c 	.word	0x2000010c
 8008694:	08011ea8 	.word	0x08011ea8
 8008698:	08011ee2 	.word	0x08011ee2

0800869c <LmHandlerProcess>:
{
 800869c:	b570      	push	{r4, r5, r6, lr}
  LoRaMacProcess();
 800869e:	f001 fccf 	bl	800a040 <LoRaMacProcess>
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 80086a2:	4d0c      	ldr	r5, [pc, #48]	; (80086d4 <LmHandlerProcess+0x38>)
 80086a4:	002c      	movs	r4, r5
 80086a6:	3568      	adds	r5, #104	; 0x68
 80086a8:	3454      	adds	r4, #84	; 0x54
    if ((LmHandlerPackages[i] != NULL) &&
 80086aa:	6823      	ldr	r3, [r4, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00b      	beq.n	80086c8 <LmHandlerProcess+0x2c>
 80086b0:	691a      	ldr	r2, [r3, #16]
 80086b2:	2a00      	cmp	r2, #0
 80086b4:	d008      	beq.n	80086c8 <LmHandlerProcess+0x2c>
  if ((id < PKG_MAX_NUMBER) && (LmHandlerPackages[id]->IsInitialized != NULL))
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d005      	beq.n	80086c8 <LmHandlerProcess+0x2c>
    return LmHandlerPackages[id]->IsInitialized();
 80086bc:	4798      	blx	r3
        (LmHandlerPackages[i]->Process != NULL) &&
 80086be:	2800      	cmp	r0, #0
 80086c0:	d002      	beq.n	80086c8 <LmHandlerProcess+0x2c>
      LmHandlerPackages[i]->Process();
 80086c2:	6823      	ldr	r3, [r4, #0]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 80086c8:	3404      	adds	r4, #4
 80086ca:	42a5      	cmp	r5, r4
 80086cc:	d1ed      	bne.n	80086aa <LmHandlerProcess+0xe>
  NvmCtxMgmtStore();
 80086ce:	f000 fc32 	bl	8008f36 <NvmCtxMgmtStore>
}
 80086d2:	bd70      	pop	{r4, r5, r6, pc}
 80086d4:	20000370 	.word	0x20000370

080086d8 <LmHandlerJoinStatus>:
{
 80086d8:	b500      	push	{lr}
 80086da:	b08b      	sub	sp, #44	; 0x2c
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 80086dc:	2301      	movs	r3, #1
 80086de:	466a      	mov	r2, sp
  status = LoRaMacMibGetRequestConfirm(&mibReq);
 80086e0:	a801      	add	r0, sp, #4
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 80086e2:	7113      	strb	r3, [r2, #4]
  status = LoRaMacMibGetRequestConfirm(&mibReq);
 80086e4:	f002 fc12 	bl	800af0c <LoRaMacMibGetRequestConfirm>
    return LORAMAC_HANDLER_RESET;
 80086e8:	2300      	movs	r3, #0
  if (status == LORAMAC_STATUS_OK)
 80086ea:	4298      	cmp	r0, r3
 80086ec:	d104      	bne.n	80086f8 <LmHandlerJoinStatus+0x20>
    if (mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE)
 80086ee:	466b      	mov	r3, sp
 80086f0:	7a1b      	ldrb	r3, [r3, #8]
 80086f2:	1e58      	subs	r0, r3, #1
 80086f4:	4183      	sbcs	r3, r0
      return LORAMAC_HANDLER_RESET;
 80086f6:	b2db      	uxtb	r3, r3
}
 80086f8:	0018      	movs	r0, r3
 80086fa:	b00b      	add	sp, #44	; 0x2c
 80086fc:	bd00      	pop	{pc}
	...

08008700 <LmHandlerRequestClass>:
{
 8008700:	b570      	push	{r4, r5, r6, lr}
 8008702:	b08a      	sub	sp, #40	; 0x28
 8008704:	0005      	movs	r5, r0
  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8008706:	f7ff ffe7 	bl	80086d8 <LmHandlerJoinStatus>
 800870a:	2801      	cmp	r0, #1
 800870c:	d143      	bne.n	8008796 <LmHandlerRequestClass+0x96>
  mibReq.Type = MIB_DEVICE_CLASS;
 800870e:	2300      	movs	r3, #0
 8008710:	ae01      	add	r6, sp, #4
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008712:	0030      	movs	r0, r6
  mibReq.Type = MIB_DEVICE_CLASS;
 8008714:	7033      	strb	r3, [r6, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008716:	f002 fbf9 	bl	800af0c <LoRaMacMibGetRequestConfirm>
 800871a:	1e04      	subs	r4, r0, #0
 800871c:	d002      	beq.n	8008724 <LmHandlerRequestClass+0x24>
    return LORAMAC_HANDLER_ERROR;
 800871e:	2401      	movs	r4, #1
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008720:	4264      	negs	r4, r4
 8008722:	e003      	b.n	800872c <LmHandlerRequestClass+0x2c>
  currentClass = mibReq.Param.Class;
 8008724:	7933      	ldrb	r3, [r6, #4]
  if (currentClass != newClass)
 8008726:	42ab      	cmp	r3, r5
 8008728:	d103      	bne.n	8008732 <LmHandlerRequestClass+0x32>
  LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800872a:	2400      	movs	r4, #0
}
 800872c:	0020      	movs	r0, r4
 800872e:	b00a      	add	sp, #40	; 0x28
 8008730:	bd70      	pop	{r4, r5, r6, pc}
    switch (newClass)
 8008732:	2d01      	cmp	r5, #1
 8008734:	d015      	beq.n	8008762 <LmHandlerRequestClass+0x62>
 8008736:	2d02      	cmp	r5, #2
 8008738:	d01c      	beq.n	8008774 <LmHandlerRequestClass+0x74>
 800873a:	2d00      	cmp	r5, #0
 800873c:	d1f6      	bne.n	800872c <LmHandlerRequestClass+0x2c>
        if (currentClass != CLASS_A)
 800873e:	2b00      	cmp	r3, #0
 8008740:	d0f3      	beq.n	800872a <LmHandlerRequestClass+0x2a>
          mibReq.Param.Class = CLASS_A;
 8008742:	7130      	strb	r0, [r6, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 8008744:	0030      	movs	r0, r6
 8008746:	f002 fcff 	bl	800b148 <LoRaMacMibSetRequestConfirm>
 800874a:	2800      	cmp	r0, #0
 800874c:	d1e7      	bne.n	800871e <LmHandlerRequestClass+0x1e>
            DisplayClassUpdate(CLASS_A);
 800874e:	0020      	movs	r0, r4
 8008750:	f7ff fe30 	bl	80083b4 <DisplayClassUpdate>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 8008754:	4b11      	ldr	r3, [pc, #68]	; (800879c <LmHandlerRequestClass+0x9c>)
              LmHandlerCallbacks.OnClassChange( CLASS_A );
 8008756:	0020      	movs	r0, r4
            if (LmHandlerCallbacks.OnClassChange != NULL)
 8008758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800875a:	2b00      	cmp	r3, #0
 800875c:	d0e5      	beq.n	800872a <LmHandlerRequestClass+0x2a>
              LmHandlerCallbacks.OnClassChange( CLASS_C );
 800875e:	4798      	blx	r3
 8008760:	e7e4      	b.n	800872c <LmHandlerRequestClass+0x2c>
        if (currentClass != CLASS_A)
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1db      	bne.n	800871e <LmHandlerRequestClass+0x1e>
          errorStatus = LmHandlerDeviceTimeReq();
 8008766:	f7ff fe35 	bl	80083d4 <LmHandlerDeviceTimeReq>
          IsClassBSwitchPending = true;
 800876a:	4b0c      	ldr	r3, [pc, #48]	; (800879c <LmHandlerRequestClass+0x9c>)
          errorStatus = LmHandlerDeviceTimeReq();
 800876c:	0004      	movs	r4, r0
          IsClassBSwitchPending = true;
 800876e:	336e      	adds	r3, #110	; 0x6e
 8008770:	701d      	strb	r5, [r3, #0]
 8008772:	e7db      	b.n	800872c <LmHandlerRequestClass+0x2c>
        if (currentClass != CLASS_A)
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1d2      	bne.n	800871e <LmHandlerRequestClass+0x1e>
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 8008778:	0030      	movs	r0, r6
          mibReq.Param.Class = CLASS_C;
 800877a:	7135      	strb	r5, [r6, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 800877c:	f002 fce4 	bl	800b148 <LoRaMacMibSetRequestConfirm>
 8008780:	1e04      	subs	r4, r0, #0
 8008782:	d1cc      	bne.n	800871e <LmHandlerRequestClass+0x1e>
            DisplayClassUpdate(CLASS_C);
 8008784:	0028      	movs	r0, r5
 8008786:	f7ff fe15 	bl	80083b4 <DisplayClassUpdate>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 800878a:	4b04      	ldr	r3, [pc, #16]	; (800879c <LmHandlerRequestClass+0x9c>)
 800878c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800878e:	2b00      	cmp	r3, #0
 8008790:	d0cb      	beq.n	800872a <LmHandlerRequestClass+0x2a>
              LmHandlerCallbacks.OnClassChange( CLASS_C );
 8008792:	0028      	movs	r0, r5
 8008794:	e7e3      	b.n	800875e <LmHandlerRequestClass+0x5e>
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008796:	2403      	movs	r4, #3
 8008798:	e7c2      	b.n	8008720 <LmHandlerRequestClass+0x20>
 800879a:	46c0      	nop			; (mov r8, r8)
 800879c:	20000370 	.word	0x20000370

080087a0 <LmHandlerJoin>:
{
 80087a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087a2:	b08d      	sub	sp, #52	; 0x34
 80087a4:	4d26      	ldr	r5, [pc, #152]	; (8008840 <LmHandlerJoin+0xa0>)
 80087a6:	4e27      	ldr	r6, [pc, #156]	; (8008844 <LmHandlerJoin+0xa4>)
 80087a8:	ac03      	add	r4, sp, #12
  if (mode == ACTIVATION_TYPE_OTAA)
 80087aa:	2802      	cmp	r0, #2
 80087ac:	d10d      	bne.n	80087ca <LmHandlerJoin+0x2a>
    JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 80087ae:	3528      	adds	r5, #40	; 0x28
 80087b0:	70a8      	strb	r0, [r5, #2]
    LoRaMacStart();
 80087b2:	f002 fb47 	bl	800ae44 <LoRaMacStart>
    mlmeReq.Type = MLME_JOIN;
 80087b6:	2301      	movs	r3, #1
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 80087b8:	3668      	adds	r6, #104	; 0x68
    mlmeReq.Type = MLME_JOIN;
 80087ba:	7023      	strb	r3, [r4, #0]
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 80087bc:	78f3      	ldrb	r3, [r6, #3]
    LoRaMacMlmeRequest(&mlmeReq);
 80087be:	0020      	movs	r0, r4
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 80087c0:	7123      	strb	r3, [r4, #4]
    LoRaMacMlmeRequest(&mlmeReq);
 80087c2:	f002 feed 	bl	800b5a0 <LoRaMacMlmeRequest>
}
 80087c6:	b00d      	add	sp, #52	; 0x34
 80087c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    JoinParams.Mode = ACTIVATION_TYPE_ABP;
 80087ca:	002b      	movs	r3, r5
 80087cc:	2201      	movs	r2, #1
 80087ce:	3328      	adds	r3, #40	; 0x28
 80087d0:	709a      	strb	r2, [r3, #2]
    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80087d2:	2200      	movs	r2, #0
 80087d4:	705a      	strb	r2, [r3, #1]
    if (CtxRestoreDone == false)
 80087d6:	4b1c      	ldr	r3, [pc, #112]	; (8008848 <LmHandlerJoin+0xa8>)
 80087d8:	7c1f      	ldrb	r7, [r3, #16]
 80087da:	4297      	cmp	r7, r2
 80087dc:	d11e      	bne.n	800881c <LmHandlerJoin+0x7c>
      mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 80087de:	2327      	movs	r3, #39	; 0x27
 80087e0:	7023      	strb	r3, [r4, #0]
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 80087e2:	4b1a      	ldr	r3, [pc, #104]	; (800884c <LmHandlerJoin+0xac>)
      LoRaMacMibSetRequestConfirm(&mibReq);
 80087e4:	0020      	movs	r0, r4
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 80087e6:	6063      	str	r3, [r4, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 80087e8:	f002 fcae 	bl	800b148 <LoRaMacMibSetRequestConfirm>
      mibReq.Type = MIB_NET_ID;
 80087ec:	2305      	movs	r3, #5
 80087ee:	7023      	strb	r3, [r4, #0]
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 80087f0:	6a2b      	ldr	r3, [r5, #32]
      LoRaMacMibSetRequestConfirm(&mibReq);
 80087f2:	0020      	movs	r0, r4
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 80087f4:	6063      	str	r3, [r4, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 80087f6:	f002 fca7 	bl	800b148 <LoRaMacMibSetRequestConfirm>
      CommissioningParams.DevAddr = GetDevAddr();
 80087fa:	f7fb fcb4 	bl	8004166 <GetDevAddr>
      mibReq.Type = MIB_DEV_ADDR;
 80087fe:	2306      	movs	r3, #6
      CommissioningParams.DevAddr = GetDevAddr();
 8008800:	6268      	str	r0, [r5, #36]	; 0x24
      mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 8008802:	6060      	str	r0, [r4, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 8008804:	0020      	movs	r0, r4
      mibReq.Type = MIB_DEV_ADDR;
 8008806:	7023      	strb	r3, [r4, #0]
      LoRaMacMibSetRequestConfirm(&mibReq);
 8008808:	f002 fc9e 	bl	800b148 <LoRaMacMibSetRequestConfirm>
      MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:   %08X\r\n", CommissioningParams.DevAddr);
 800880c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800880e:	003a      	movs	r2, r7
 8008810:	9300      	str	r3, [sp, #0]
 8008812:	0039      	movs	r1, r7
 8008814:	2002      	movs	r0, #2
 8008816:	4b0e      	ldr	r3, [pc, #56]	; (8008850 <LmHandlerJoin+0xb0>)
 8008818:	f007 fe9a 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
    LoRaMacStart();
 800881c:	f002 fb12 	bl	800ae44 <LoRaMacStart>
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008820:	2301      	movs	r3, #1
    LoRaMacMibSetRequestConfirm(&mibReq);
 8008822:	0020      	movs	r0, r4
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008824:	7023      	strb	r3, [r4, #0]
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8008826:	7123      	strb	r3, [r4, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8008828:	f002 fc8e 	bl	800b148 <LoRaMacMibSetRequestConfirm>
    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 800882c:	0028      	movs	r0, r5
 800882e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8008830:	3028      	adds	r0, #40	; 0x28
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8008832:	3668      	adds	r6, #104	; 0x68
    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 8008834:	4798      	blx	r3
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8008836:	7870      	ldrb	r0, [r6, #1]
 8008838:	f7ff ff62 	bl	8008700 <LmHandlerRequestClass>
}
 800883c:	e7c3      	b.n	80087c6 <LmHandlerJoin+0x26>
 800883e:	46c0      	nop			; (mov r8, r8)
 8008840:	2000010c 	.word	0x2000010c
 8008844:	20000370 	.word	0x20000370
 8008848:	200003f0 	.word	0x200003f0
 800884c:	01000300 	.word	0x01000300
 8008850:	08011f1c 	.word	0x08011f1c

08008854 <LmHandlerSend>:
{
 8008854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008856:	b089      	sub	sp, #36	; 0x24
 8008858:	0005      	movs	r5, r0
 800885a:	000f      	movs	r7, r1
 800885c:	9200      	str	r2, [sp, #0]
 800885e:	9301      	str	r3, [sp, #4]
  if (LoRaMacIsBusy() == true)
 8008860:	f001 fbdc 	bl	800a01c <LoRaMacIsBusy>
 8008864:	2800      	cmp	r0, #0
 8008866:	d157      	bne.n	8008918 <LmHandlerSend+0xc4>
  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8008868:	f7ff ff36 	bl	80086d8 <LmHandlerJoinStatus>
 800886c:	2801      	cmp	r0, #1
 800886e:	d007      	beq.n	8008880 <LmHandlerSend+0x2c>
    LmHandlerJoin(JoinParams.Mode);
 8008870:	4b2c      	ldr	r3, [pc, #176]	; (8008924 <LmHandlerSend+0xd0>)
 8008872:	3328      	adds	r3, #40	; 0x28
 8008874:	7898      	ldrb	r0, [r3, #2]
 8008876:	f7ff ff93 	bl	80087a0 <LmHandlerJoin>
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800887a:	2003      	movs	r0, #3
    return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800887c:	4240      	negs	r0, r0
 800887e:	e039      	b.n	80088f4 <LmHandlerSend+0xa0>
  if ((LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() == true)
 8008880:	4e29      	ldr	r6, [pc, #164]	; (8008928 <LmHandlerSend+0xd4>)
 8008882:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	4798      	blx	r3
 8008888:	2800      	cmp	r0, #0
 800888a:	d006      	beq.n	800889a <LmHandlerSend+0x46>
      && (appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port) && (appData->Port != 0))
 800888c:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800888e:	782b      	ldrb	r3, [r5, #0]
 8008890:	7812      	ldrb	r2, [r2, #0]
 8008892:	429a      	cmp	r2, r3
 8008894:	d001      	beq.n	800889a <LmHandlerSend+0x46>
 8008896:	2b00      	cmp	r3, #0
 8008898:	d140      	bne.n	800891c <LmHandlerSend+0xc8>
  mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800889a:	0033      	movs	r3, r6
 800889c:	3368      	adds	r3, #104	; 0x68
 800889e:	78db      	ldrb	r3, [r3, #3]
 80088a0:	ac03      	add	r4, sp, #12
 80088a2:	73a3      	strb	r3, [r4, #14]
  if (LoRaMacQueryTxPossible(appData->BufferSize, &txInfo) != LORAMAC_STATUS_OK)
 80088a4:	7868      	ldrb	r0, [r5, #1]
 80088a6:	a902      	add	r1, sp, #8
 80088a8:	f002 fad4 	bl	800ae54 <LoRaMacQueryTxPossible>
 80088ac:	0032      	movs	r2, r6
 80088ae:	323c      	adds	r2, #60	; 0x3c
 80088b0:	2800      	cmp	r0, #0
 80088b2:	d021      	beq.n	80088f8 <LmHandlerSend+0xa4>
    TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 80088b4:	2300      	movs	r3, #0
 80088b6:	7093      	strb	r3, [r2, #2]
    mcpsReq.Type = MCPS_UNCONFIRMED;
 80088b8:	7023      	strb	r3, [r4, #0]
    mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 80088ba:	60a3      	str	r3, [r4, #8]
    mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 80088bc:	81a3      	strh	r3, [r4, #12]
  TxParams.AppData = *appData;
 80088be:	0033      	movs	r3, r6
 80088c0:	3348      	adds	r3, #72	; 0x48
 80088c2:	cd06      	ldmia	r5!, {r1, r2}
 80088c4:	c306      	stmia	r3!, {r1, r2}
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 80088c6:	0033      	movs	r3, r6
 80088c8:	3668      	adds	r6, #104	; 0x68
 80088ca:	78f2      	ldrb	r2, [r6, #3]
 80088cc:	333c      	adds	r3, #60	; 0x3c
  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 80088ce:	0020      	movs	r0, r4
 80088d0:	9901      	ldr	r1, [sp, #4]
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 80088d2:	711a      	strb	r2, [r3, #4]
  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 80088d4:	f002 ff6c 	bl	800b7b0 <LoRaMacMcpsRequest>
  if (nextTxIn != NULL)
 80088d8:	9b00      	ldr	r3, [sp, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d004      	beq.n	80088e8 <LmHandlerSend+0x94>
    *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 80088de:	6923      	ldr	r3, [r4, #16]
 80088e0:	9301      	str	r3, [sp, #4]
 80088e2:	9a01      	ldr	r2, [sp, #4]
 80088e4:	9b00      	ldr	r3, [sp, #0]
 80088e6:	601a      	str	r2, [r3, #0]
  switch(status)
 80088e8:	2811      	cmp	r0, #17
 80088ea:	d819      	bhi.n	8008920 <LmHandlerSend+0xcc>
 80088ec:	4b0f      	ldr	r3, [pc, #60]	; (800892c <LmHandlerSend+0xd8>)
 80088ee:	1818      	adds	r0, r3, r0
 80088f0:	7c00      	ldrb	r0, [r0, #16]
 80088f2:	b240      	sxtb	r0, r0
}
 80088f4:	b009      	add	sp, #36	; 0x24
 80088f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TxParams.MsgType = isTxConfirmed;
 80088f8:	7097      	strb	r7, [r2, #2]
    mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 80088fa:	782b      	ldrb	r3, [r5, #0]
 80088fc:	7123      	strb	r3, [r4, #4]
    mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 80088fe:	786b      	ldrb	r3, [r5, #1]
 8008900:	81a3      	strh	r3, [r4, #12]
    mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8008902:	686b      	ldr	r3, [r5, #4]
 8008904:	60a3      	str	r3, [r4, #8]
    if (isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG)
 8008906:	2f00      	cmp	r7, #0
 8008908:	d101      	bne.n	800890e <LmHandlerSend+0xba>
      mcpsReq.Type = MCPS_UNCONFIRMED;
 800890a:	7027      	strb	r7, [r4, #0]
 800890c:	e7d7      	b.n	80088be <LmHandlerSend+0x6a>
      mcpsReq.Type = MCPS_CONFIRMED;
 800890e:	2301      	movs	r3, #1
 8008910:	7023      	strb	r3, [r4, #0]
      mcpsReq.Req.Confirmed.NbTrials = 8;
 8008912:	3307      	adds	r3, #7
 8008914:	73e3      	strb	r3, [r4, #15]
 8008916:	e7d2      	b.n	80088be <LmHandlerSend+0x6a>
    return LORAMAC_HANDLER_BUSY_ERROR;
 8008918:	2002      	movs	r0, #2
 800891a:	e7af      	b.n	800887c <LmHandlerSend+0x28>
    return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800891c:	2004      	movs	r0, #4
 800891e:	e7ad      	b.n	800887c <LmHandlerSend+0x28>
 8008920:	2001      	movs	r0, #1
 8008922:	e7ab      	b.n	800887c <LmHandlerSend+0x28>
 8008924:	2000010c 	.word	0x2000010c
 8008928:	20000370 	.word	0x20000370
 800892c:	08011634 	.word	0x08011634

08008930 <LmHandlerPingSlotReq>:
{
 8008930:	b510      	push	{r4, lr}
 8008932:	b088      	sub	sp, #32
  mlmeReq.Type = MLME_PING_SLOT_INFO;
 8008934:	466a      	mov	r2, sp
 8008936:	230d      	movs	r3, #13
 8008938:	7313      	strb	r3, [r2, #12]
  mlmeReq.Req.PingSlotInfo.PingSlot.Fields.Periodicity = periodicity;
 800893a:	3b06      	subs	r3, #6
 800893c:	4003      	ands	r3, r0
{
 800893e:	0004      	movs	r4, r0
  mlmeReq.Req.PingSlotInfo.PingSlot.Fields.Periodicity = periodicity;
 8008940:	7413      	strb	r3, [r2, #16]
  status = LoRaMacMlmeRequest(&mlmeReq);
 8008942:	a803      	add	r0, sp, #12
 8008944:	f002 fe2c 	bl	800b5a0 <LoRaMacMlmeRequest>
 8008948:	1e01      	subs	r1, r0, #0
  if (status == LORAMAC_STATUS_OK)
 800894a:	d10b      	bne.n	8008964 <LmHandlerPingSlotReq+0x34>
    LmHandlerParams.PingPeriodicity = periodicity;
 800894c:	4b07      	ldr	r3, [pc, #28]	; (800896c <LmHandlerPingSlotReq+0x3c>)
    LmHandlerAppData_t appData =
 800894e:	a801      	add	r0, sp, #4
    LmHandlerParams.PingPeriodicity = periodicity;
 8008950:	3368      	adds	r3, #104	; 0x68
 8008952:	715c      	strb	r4, [r3, #5]
    return LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, false);
 8008954:	000a      	movs	r2, r1
 8008956:	000b      	movs	r3, r1
    LmHandlerAppData_t appData =
 8008958:	8001      	strh	r1, [r0, #0]
 800895a:	6041      	str	r1, [r0, #4]
    return LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, false);
 800895c:	f7ff ff7a 	bl	8008854 <LmHandlerSend>
}
 8008960:	b008      	add	sp, #32
 8008962:	bd10      	pop	{r4, pc}
    return LORAMAC_HANDLER_ERROR;
 8008964:	2001      	movs	r0, #1
 8008966:	4240      	negs	r0, r0
 8008968:	e7fa      	b.n	8008960 <LmHandlerPingSlotReq+0x30>
 800896a:	46c0      	nop			; (mov r8, r8)
 800896c:	20000370 	.word	0x20000370

08008970 <LmHandlerPackageRegister>:
{
 8008970:	b570      	push	{r4, r5, r6, lr}
 8008972:	0004      	movs	r4, r0
 8008974:	000d      	movs	r5, r1
  switch (id)
 8008976:	2800      	cmp	r0, #0
 8008978:	d002      	beq.n	8008980 <LmHandlerPackageRegister+0x10>
    return LORAMAC_HANDLER_ERROR;
 800897a:	2001      	movs	r0, #1
 800897c:	4240      	negs	r0, r0
}
 800897e:	bd70      	pop	{r4, r5, r6, pc}
      package = LmphCompliancePackageFactory();
 8008980:	f000 fad4 	bl	8008f2c <LmphCompliancePackageFactory>
  if (package != NULL)
 8008984:	2800      	cmp	r0, #0
 8008986:	d0f8      	beq.n	800897a <LmHandlerPackageRegister+0xa>
    LmHandlerPackages[id] = package;
 8008988:	4b07      	ldr	r3, [pc, #28]	; (80089a8 <LmHandlerPackageRegister+0x38>)
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 800898a:	22f2      	movs	r2, #242	; 0xf2
    LmHandlerPackages[id] = package;
 800898c:	6558      	str	r0, [r3, #84]	; 0x54
    LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800898e:	4b07      	ldr	r3, [pc, #28]	; (80089ac <LmHandlerPackageRegister+0x3c>)
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 8008990:	4907      	ldr	r1, [pc, #28]	; (80089b0 <LmHandlerPackageRegister+0x40>)
    LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8008992:	6203      	str	r3, [r0, #32]
    LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 8008994:	4b07      	ldr	r3, [pc, #28]	; (80089b4 <LmHandlerPackageRegister+0x44>)
 8008996:	6243      	str	r3, [r0, #36]	; 0x24
    LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8008998:	4b07      	ldr	r3, [pc, #28]	; (80089b8 <LmHandlerPackageRegister+0x48>)
 800899a:	6283      	str	r3, [r0, #40]	; 0x28
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 800899c:	6843      	ldr	r3, [r0, #4]
 800899e:	0028      	movs	r0, r5
 80089a0:	4798      	blx	r3
    return LORAMAC_HANDLER_SUCCESS;
 80089a2:	0020      	movs	r0, r4
 80089a4:	e7eb      	b.n	800897e <LmHandlerPackageRegister+0xe>
 80089a6:	46c0      	nop			; (mov r8, r8)
 80089a8:	20000370 	.word	0x20000370
 80089ac:	080087a1 	.word	0x080087a1
 80089b0:	20000401 	.word	0x20000401
 80089b4:	08008855 	.word	0x08008855
 80089b8:	080083d5 	.word	0x080083d5

080089bc <LmHandlerInit>:
{
 80089bc:	b510      	push	{r4, lr}
  UTIL_MEM_cpy_8((void *)&LmHandlerCallbacks, (const void *)handlerCallbacks, sizeof(LmHandlerCallbacks_t));
 80089be:	4c10      	ldr	r4, [pc, #64]	; (8008a00 <LmHandlerInit+0x44>)
{
 80089c0:	0001      	movs	r1, r0
  UTIL_MEM_cpy_8((void *)&LmHandlerCallbacks, (const void *)handlerCallbacks, sizeof(LmHandlerCallbacks_t));
 80089c2:	0020      	movs	r0, r4
 80089c4:	2220      	movs	r2, #32
 80089c6:	301c      	adds	r0, #28
 80089c8:	f007 fedc 	bl	8010784 <UTIL_MEM_cpy_8>
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 80089cc:	4b0d      	ldr	r3, [pc, #52]	; (8008a04 <LmHandlerInit+0x48>)
 80089ce:	4a0e      	ldr	r2, [pc, #56]	; (8008a08 <LmHandlerInit+0x4c>)
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 80089d0:	490e      	ldr	r1, [pc, #56]	; (8008a0c <LmHandlerInit+0x50>)
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 80089d2:	601a      	str	r2, [r3, #0]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 80089d4:	4a0e      	ldr	r2, [pc, #56]	; (8008a10 <LmHandlerInit+0x54>)
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 80089d6:	312c      	adds	r1, #44	; 0x2c
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 80089d8:	605a      	str	r2, [r3, #4]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 80089da:	4a0e      	ldr	r2, [pc, #56]	; (8008a14 <LmHandlerInit+0x58>)
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 80089dc:	2000      	movs	r0, #0
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 80089de:	609a      	str	r2, [r3, #8]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 80089e0:	4a0d      	ldr	r2, [pc, #52]	; (8008a18 <LmHandlerInit+0x5c>)
 80089e2:	60da      	str	r2, [r3, #12]
  LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks.GetBatteryLevel;
 80089e4:	69e3      	ldr	r3, [r4, #28]
 80089e6:	6723      	str	r3, [r4, #112]	; 0x70
  LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks.GetTemperature;
 80089e8:	6a23      	ldr	r3, [r4, #32]
 80089ea:	6763      	str	r3, [r4, #116]	; 0x74
  LoRaMacCallbacks.NvmContextChange = NvmCtxMgmtEvent;
 80089ec:	4b0b      	ldr	r3, [pc, #44]	; (8008a1c <LmHandlerInit+0x60>)
 80089ee:	67a3      	str	r3, [r4, #120]	; 0x78
  LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks.OnMacProcess;
 80089f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089f2:	67e3      	str	r3, [r4, #124]	; 0x7c
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 80089f4:	f7ff ffbc 	bl	8008970 <LmHandlerPackageRegister>
 80089f8:	1e43      	subs	r3, r0, #1
 80089fa:	4198      	sbcs	r0, r3
 80089fc:	4240      	negs	r0, r0
}
 80089fe:	bd10      	pop	{r4, pc}
 8008a00:	20000370 	.word	0x20000370
 8008a04:	200003f0 	.word	0x200003f0
 8008a08:	080084f5 	.word	0x080084f5
 8008a0c:	2000010c 	.word	0x2000010c
 8008a10:	08008a4d 	.word	0x08008a4d
 8008a14:	08008b41 	.word	0x08008b41
 8008a18:	08008475 	.word	0x08008475
 8008a1c:	08008f35 	.word	0x08008f35

08008a20 <LmHandlerGetCurrentClass>:
{
 8008a20:	b510      	push	{r4, lr}
 8008a22:	0004      	movs	r4, r0
 8008a24:	b08a      	sub	sp, #40	; 0x28
  if (deviceClass == NULL)
 8008a26:	2800      	cmp	r0, #0
 8008a28:	d103      	bne.n	8008a32 <LmHandlerGetCurrentClass+0x12>
    return LORAMAC_HANDLER_ERROR;
 8008a2a:	2001      	movs	r0, #1
 8008a2c:	4240      	negs	r0, r0
}
 8008a2e:	b00a      	add	sp, #40	; 0x28
 8008a30:	bd10      	pop	{r4, pc}
  mibReq.Type = MIB_DEVICE_CLASS;
 8008a32:	2300      	movs	r3, #0
 8008a34:	466a      	mov	r2, sp
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008a36:	a801      	add	r0, sp, #4
  mibReq.Type = MIB_DEVICE_CLASS;
 8008a38:	7113      	strb	r3, [r2, #4]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008a3a:	f002 fa67 	bl	800af0c <LoRaMacMibGetRequestConfirm>
 8008a3e:	2800      	cmp	r0, #0
 8008a40:	d1f3      	bne.n	8008a2a <LmHandlerGetCurrentClass+0xa>
  *deviceClass = mibReq.Param.Class;
 8008a42:	466b      	mov	r3, sp
 8008a44:	7a1b      	ldrb	r3, [r3, #8]
 8008a46:	7023      	strb	r3, [r4, #0]
  return LORAMAC_HANDLER_SUCCESS;
 8008a48:	e7f1      	b.n	8008a2e <LmHandlerGetCurrentClass+0xe>
	...

08008a4c <McpsIndication>:
  RxParams.IsMcpsIndication = 1;
 8008a4c:	2301      	movs	r3, #1
{
 8008a4e:	b5f0      	push	{r4, r5, r6, r7, lr}
  RxParams.IsMcpsIndication = 1;
 8008a50:	492b      	ldr	r1, [pc, #172]	; (8008b00 <McpsIndication+0xb4>)
{
 8008a52:	0004      	movs	r4, r0
  RxParams.IsMcpsIndication = 1;
 8008a54:	700b      	strb	r3, [r1, #0]
  RxParams.Status = mcpsIndication->Status;
 8008a56:	7843      	ldrb	r3, [r0, #1]
{
 8008a58:	b087      	sub	sp, #28
  RxParams.Status = mcpsIndication->Status;
 8008a5a:	704b      	strb	r3, [r1, #1]
  if (RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK)
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d145      	bne.n	8008aec <McpsIndication+0xa0>
  if (mcpsIndication->BufferSize > 0)
 8008a60:	7b03      	ldrb	r3, [r0, #12]
 8008a62:	4e28      	ldr	r6, [pc, #160]	; (8008b04 <McpsIndication+0xb8>)
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d012      	beq.n	8008a8e <McpsIndication+0x42>
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8008a68:	7902      	ldrb	r2, [r0, #4]
 8008a6a:	708a      	strb	r2, [r1, #2]
    RxParams.Rssi = mcpsIndication->Rssi;
 8008a6c:	89c2      	ldrh	r2, [r0, #14]
 8008a6e:	70ca      	strb	r2, [r1, #3]
    RxParams.Snr = mcpsIndication->Snr;
 8008a70:	7c02      	ldrb	r2, [r0, #16]
 8008a72:	710a      	strb	r2, [r1, #4]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8008a74:	6942      	ldr	r2, [r0, #20]
 8008a76:	608a      	str	r2, [r1, #8]
    RxParams.RxSlot = mcpsIndication->RxSlot;
 8008a78:	7c42      	ldrb	r2, [r0, #17]
 8008a7a:	730a      	strb	r2, [r1, #12]
    appData.Port = mcpsIndication->Port;
 8008a7c:	78c2      	ldrb	r2, [r0, #3]
 8008a7e:	4668      	mov	r0, sp
    appData.BufferSize = mcpsIndication->BufferSize;
 8008a80:	7243      	strb	r3, [r0, #9]
    appData.Buffer = mcpsIndication->Buffer;
 8008a82:	68a3      	ldr	r3, [r4, #8]
    appData.Port = mcpsIndication->Port;
 8008a84:	7202      	strb	r2, [r0, #8]
    appData.Buffer = mcpsIndication->Buffer;
 8008a86:	9303      	str	r3, [sp, #12]
    LmHandlerCallbacks.OnRxData(&appData, &RxParams);
 8008a88:	a802      	add	r0, sp, #8
 8008a8a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8008a8c:	4798      	blx	r3
    if( mcpsIndication->DeviceTimeAnsReceived == true )
 8008a8e:	7f23      	ldrb	r3, [r4, #28]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d003      	beq.n	8008a9c <McpsIndication+0x50>
      if( LmHandlerCallbacks.OnSysTimeUpdate != NULL)
 8008a94:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d000      	beq.n	8008a9c <McpsIndication+0x50>
        LmHandlerCallbacks.OnSysTimeUpdate( );
 8008a9a:	4798      	blx	r3
 8008a9c:	0037      	movs	r7, r6
{
 8008a9e:	2500      	movs	r5, #0
 8008aa0:	3754      	adds	r7, #84	; 0x54
    if (LmHandlerPackages[i] != NULL)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00a      	beq.n	8008abe <McpsIndication+0x72>
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 8008aa8:	699a      	ldr	r2, [r3, #24]
 8008aaa:	2a00      	cmp	r2, #0
 8008aac:	d007      	beq.n	8008abe <McpsIndication+0x72>
 8008aae:	781a      	ldrb	r2, [r3, #0]
 8008ab0:	78e3      	ldrb	r3, [r4, #3]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d11c      	bne.n	8008af0 <McpsIndication+0xa4>
            LmHandlerPackages[i]->OnMcpsIndicationProcess(params);
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	0020      	movs	r0, r4
 8008aba:	699b      	ldr	r3, [r3, #24]
 8008abc:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 8008abe:	3501      	adds	r5, #1
 8008ac0:	b2eb      	uxtb	r3, r5
 8008ac2:	3704      	adds	r7, #4
 8008ac4:	b26d      	sxtb	r5, r5
 8008ac6:	2b05      	cmp	r3, #5
 8008ac8:	d1eb      	bne.n	8008aa2 <McpsIndication+0x56>
  LmHandlerGetCurrentClass(&deviceClass);
 8008aca:	466b      	mov	r3, sp
 8008acc:	1ddd      	adds	r5, r3, #7
 8008ace:	0028      	movs	r0, r5
 8008ad0:	f7ff ffa6 	bl	8008a20 <LmHandlerGetCurrentClass>
  if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 8008ad4:	7963      	ldrb	r3, [r4, #5]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d108      	bne.n	8008aec <McpsIndication+0xa0>
 8008ada:	7829      	ldrb	r1, [r5, #0]
 8008adc:	2900      	cmp	r1, #0
 8008ade:	d105      	bne.n	8008aec <McpsIndication+0xa0>
    LmHandlerAppData_t appData =
 8008ae0:	a804      	add	r0, sp, #16
    LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 8008ae2:	000a      	movs	r2, r1
    LmHandlerAppData_t appData =
 8008ae4:	8001      	strh	r1, [r0, #0]
 8008ae6:	6041      	str	r1, [r0, #4]
    LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 8008ae8:	f7ff feb4 	bl	8008854 <LmHandlerSend>
}
 8008aec:	b007      	add	sp, #28
 8008aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 8008af0:	2d00      	cmp	r5, #0
 8008af2:	d1e4      	bne.n	8008abe <McpsIndication+0x72>
               ((i == PACKAGE_ID_COMPLIANCE) && (LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning()))))
 8008af4:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	4798      	blx	r3
 8008afa:	2800      	cmp	r0, #0
 8008afc:	d1db      	bne.n	8008ab6 <McpsIndication+0x6a>
 8008afe:	e7de      	b.n	8008abe <McpsIndication+0x72>
 8008b00:	2000010c 	.word	0x2000010c
 8008b04:	20000370 	.word	0x20000370

08008b08 <LmHandlerGetTxDatarate>:
{
 8008b08:	b510      	push	{r4, lr}
 8008b0a:	0004      	movs	r4, r0
 8008b0c:	b08a      	sub	sp, #40	; 0x28
  if (txDatarate == NULL)
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	d103      	bne.n	8008b1a <LmHandlerGetTxDatarate+0x12>
    return LORAMAC_HANDLER_ERROR;
 8008b12:	2001      	movs	r0, #1
 8008b14:	4240      	negs	r0, r0
}
 8008b16:	b00a      	add	sp, #40	; 0x28
 8008b18:	bd10      	pop	{r4, pc}
  mibGet.Type = MIB_CHANNELS_DATARATE;
 8008b1a:	231f      	movs	r3, #31
 8008b1c:	466a      	mov	r2, sp
  if (LoRaMacMibGetRequestConfirm(&mibGet) != LORAMAC_STATUS_OK)
 8008b1e:	a801      	add	r0, sp, #4
  mibGet.Type = MIB_CHANNELS_DATARATE;
 8008b20:	7113      	strb	r3, [r2, #4]
  if (LoRaMacMibGetRequestConfirm(&mibGet) != LORAMAC_STATUS_OK)
 8008b22:	f002 f9f3 	bl	800af0c <LoRaMacMibGetRequestConfirm>
 8008b26:	2800      	cmp	r0, #0
 8008b28:	d1f3      	bne.n	8008b12 <LmHandlerGetTxDatarate+0xa>
  *txDatarate = mibGet.Param.ChannelsDatarate;
 8008b2a:	466b      	mov	r3, sp
 8008b2c:	2208      	movs	r2, #8
 8008b2e:	569a      	ldrsb	r2, [r3, r2]
  LmHandlerParams.TxDatarate = mibGet.Param.ChannelsDatarate;
 8008b30:	4b02      	ldr	r3, [pc, #8]	; (8008b3c <LmHandlerGetTxDatarate+0x34>)
  *txDatarate = mibGet.Param.ChannelsDatarate;
 8008b32:	7022      	strb	r2, [r4, #0]
  LmHandlerParams.TxDatarate = mibGet.Param.ChannelsDatarate;
 8008b34:	3368      	adds	r3, #104	; 0x68
 8008b36:	70da      	strb	r2, [r3, #3]
  return LORAMAC_HANDLER_SUCCESS;
 8008b38:	e7ed      	b.n	8008b16 <LmHandlerGetTxDatarate+0xe>
 8008b3a:	46c0      	nop			; (mov r8, r8)
 8008b3c:	20000370 	.word	0x20000370

08008b40 <MlmeConfirm>:
{
 8008b40:	b5f0      	push	{r4, r5, r6, r7, lr}
  TxParams.IsMcpsConfirm = 0;
 8008b42:	4c37      	ldr	r4, [pc, #220]	; (8008c20 <MlmeConfirm+0xe0>)
 8008b44:	2200      	movs	r2, #0
 8008b46:	0023      	movs	r3, r4
 8008b48:	0026      	movs	r6, r4
 8008b4a:	0027      	movs	r7, r4
{
 8008b4c:	0005      	movs	r5, r0
  TxParams.IsMcpsConfirm = 0;
 8008b4e:	333c      	adds	r3, #60	; 0x3c
 8008b50:	701a      	strb	r2, [r3, #0]
  TxParams.Status = mlmeConfirm->Status;
 8008b52:	7842      	ldrb	r2, [r0, #1]
{
 8008b54:	b08b      	sub	sp, #44	; 0x2c
  TxParams.Status = mlmeConfirm->Status;
 8008b56:	705a      	strb	r2, [r3, #1]
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 8008b58:	3654      	adds	r6, #84	; 0x54
 8008b5a:	3768      	adds	r7, #104	; 0x68
    if (LmHandlerPackages[i] != NULL)
 8008b5c:	6833      	ldr	r3, [r6, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d004      	beq.n	8008b6c <MlmeConfirm+0x2c>
          if (LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL)
 8008b62:	69db      	ldr	r3, [r3, #28]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d001      	beq.n	8008b6c <MlmeConfirm+0x2c>
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
 8008b68:	0028      	movs	r0, r5
 8008b6a:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 8008b6c:	3604      	adds	r6, #4
 8008b6e:	42be      	cmp	r6, r7
 8008b70:	d1f4      	bne.n	8008b5c <MlmeConfirm+0x1c>
  switch (mlmeConfirm->MlmeRequest)
 8008b72:	782b      	ldrb	r3, [r5, #0]
 8008b74:	2b0c      	cmp	r3, #12
 8008b76:	d047      	beq.n	8008c08 <MlmeConfirm+0xc8>
 8008b78:	d805      	bhi.n	8008b86 <MlmeConfirm+0x46>
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d01b      	beq.n	8008bb6 <MlmeConfirm+0x76>
 8008b7e:	2b0a      	cmp	r3, #10
 8008b80:	d038      	beq.n	8008bf4 <MlmeConfirm+0xb4>
}
 8008b82:	b00b      	add	sp, #44	; 0x2c
 8008b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (mlmeConfirm->MlmeRequest)
 8008b86:	2b0d      	cmp	r3, #13
 8008b88:	d1fb      	bne.n	8008b82 <MlmeConfirm+0x42>
      if (mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK)
 8008b8a:	786b      	ldrb	r3, [r5, #1]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d13e      	bne.n	8008c0e <MlmeConfirm+0xce>
        mibReq.Type = MIB_DEVICE_CLASS;
 8008b90:	466a      	mov	r2, sp
        mibReq.Param.Class = CLASS_B;
 8008b92:	2501      	movs	r5, #1
        LoRaMacMibSetRequestConfirm(&mibReq);
 8008b94:	a801      	add	r0, sp, #4
        mibReq.Type = MIB_DEVICE_CLASS;
 8008b96:	7113      	strb	r3, [r2, #4]
        mibReq.Param.Class = CLASS_B;
 8008b98:	7215      	strb	r5, [r2, #8]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8008b9a:	f002 fad5 	bl	800b148 <LoRaMacMibSetRequestConfirm>
        DisplayClassUpdate(CLASS_B);
 8008b9e:	0028      	movs	r0, r5
 8008ba0:	f7ff fc08 	bl	80083b4 <DisplayClassUpdate>
        if (LmHandlerCallbacks.OnClassChange != NULL)
 8008ba4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d001      	beq.n	8008bae <MlmeConfirm+0x6e>
          LmHandlerCallbacks.OnClassChange( CLASS_B );
 8008baa:	0028      	movs	r0, r5
 8008bac:	4798      	blx	r3
        IsClassBSwitchPending = false;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	346e      	adds	r4, #110	; 0x6e
 8008bb2:	7023      	strb	r3, [r4, #0]
}
 8008bb4:	e7e5      	b.n	8008b82 <MlmeConfirm+0x42>
      mibReq.Type = MIB_DEV_ADDR;
 8008bb6:	2306      	movs	r3, #6
 8008bb8:	af01      	add	r7, sp, #4
      LoRaMacMibGetRequestConfirm(&mibReq);
 8008bba:	0038      	movs	r0, r7
      mibReq.Type = MIB_DEV_ADDR;
 8008bbc:	703b      	strb	r3, [r7, #0]
      LoRaMacMibGetRequestConfirm(&mibReq);
 8008bbe:	f002 f9a5 	bl	800af0c <LoRaMacMibGetRequestConfirm>
      CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8008bc2:	4e18      	ldr	r6, [pc, #96]	; (8008c24 <MlmeConfirm+0xe4>)
 8008bc4:	687b      	ldr	r3, [r7, #4]
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 8008bc6:	0037      	movs	r7, r6
 8008bc8:	3728      	adds	r7, #40	; 0x28
 8008bca:	0038      	movs	r0, r7
      CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8008bcc:	6273      	str	r3, [r6, #36]	; 0x24
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 8008bce:	f7ff ff9b 	bl	8008b08 <LmHandlerGetTxDatarate>
      if (mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK)
 8008bd2:	786b      	ldrb	r3, [r5, #1]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d10a      	bne.n	8008bee <MlmeConfirm+0xae>
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8008bd8:	707b      	strb	r3, [r7, #1]
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8008bda:	0023      	movs	r3, r4
 8008bdc:	3368      	adds	r3, #104	; 0x68
 8008bde:	7858      	ldrb	r0, [r3, #1]
 8008be0:	f7ff fd8e 	bl	8008700 <LmHandlerRequestClass>
      LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 8008be4:	0030      	movs	r0, r6
 8008be6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008be8:	3028      	adds	r0, #40	; 0x28
 8008bea:	4798      	blx	r3
    break;
 8008bec:	e7c9      	b.n	8008b82 <MlmeConfirm+0x42>
        JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8008bee:	23ff      	movs	r3, #255	; 0xff
 8008bf0:	707b      	strb	r3, [r7, #1]
 8008bf2:	e7f7      	b.n	8008be4 <MlmeConfirm+0xa4>
      if (IsClassBSwitchPending == true)
 8008bf4:	346e      	adds	r4, #110	; 0x6e
 8008bf6:	7823      	ldrb	r3, [r4, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d0c2      	beq.n	8008b82 <MlmeConfirm+0x42>
  mlmeReq.Type = MLME_BEACON_ACQUISITION;
 8008bfc:	230c      	movs	r3, #12
 8008bfe:	a801      	add	r0, sp, #4
 8008c00:	7003      	strb	r3, [r0, #0]
  status = LoRaMacMlmeRequest(&mlmeReq);
 8008c02:	f002 fccd 	bl	800b5a0 <LoRaMacMlmeRequest>
  if (status == LORAMAC_STATUS_OK)
 8008c06:	e7bc      	b.n	8008b82 <MlmeConfirm+0x42>
      if (mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK)
 8008c08:	786b      	ldrb	r3, [r5, #1]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d104      	bne.n	8008c18 <MlmeConfirm+0xd8>
        LmHandlerPingSlotReq(LmHandlerParams.PingPeriodicity);
 8008c0e:	3468      	adds	r4, #104	; 0x68
 8008c10:	7960      	ldrb	r0, [r4, #5]
 8008c12:	f7ff fe8d 	bl	8008930 <LmHandlerPingSlotReq>
 8008c16:	e7b4      	b.n	8008b82 <MlmeConfirm+0x42>
        LmHandlerDeviceTimeReq();
 8008c18:	f7ff fbdc 	bl	80083d4 <LmHandlerDeviceTimeReq>
 8008c1c:	e7b1      	b.n	8008b82 <MlmeConfirm+0x42>
 8008c1e:	46c0      	nop			; (mov r8, r8)
 8008c20:	20000370 	.word	0x20000370
 8008c24:	2000010c 	.word	0x2000010c

08008c28 <LmhpComplianceInit>:
}

/* Private  functions ---------------------------------------------------------*/
static void LmhpComplianceInit(void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize)
{
  if ((params != NULL) && (dataBuffer != NULL))
 8008c28:	4b06      	ldr	r3, [pc, #24]	; (8008c44 <LmhpComplianceInit+0x1c>)
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	d007      	beq.n	8008c3e <LmhpComplianceInit+0x16>
 8008c2e:	2900      	cmp	r1, #0
 8008c30:	d005      	beq.n	8008c3e <LmhpComplianceInit+0x16>
  {
    LmhpComplianceParams = (LmhpComplianceParams_t *)params;
    ComplianceTestState.DataBuffer = dataBuffer;
    ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8008c32:	729a      	strb	r2, [r3, #10]
    ComplianceTestState.Initialized = true;
 8008c34:	2201      	movs	r2, #1
    LmhpComplianceParams = (LmhpComplianceParams_t *)params;
 8008c36:	6018      	str	r0, [r3, #0]
    ComplianceTestState.DataBuffer = dataBuffer;
 8008c38:	60d9      	str	r1, [r3, #12]
  }
  else
  {
    LmhpComplianceParams = NULL;
    ComplianceTestState.Initialized = false;
 8008c3a:	711a      	strb	r2, [r3, #4]
  }
}
 8008c3c:	4770      	bx	lr
    LmhpComplianceParams = NULL;
 8008c3e:	2200      	movs	r2, #0
 8008c40:	601a      	str	r2, [r3, #0]
 8008c42:	e7fa      	b.n	8008c3a <LmhpComplianceInit+0x12>
 8008c44:	200004f4 	.word	0x200004f4

08008c48 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized(void)
{
  return ComplianceTestState.Initialized;
 8008c48:	4b01      	ldr	r3, [pc, #4]	; (8008c50 <LmhpComplianceIsInitialized+0x8>)
 8008c4a:	7918      	ldrb	r0, [r3, #4]
}
 8008c4c:	4770      	bx	lr
 8008c4e:	46c0      	nop			; (mov r8, r8)
 8008c50:	200004f4 	.word	0x200004f4

08008c54 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning(void)
{
  if (ComplianceTestState.Initialized == false)
 8008c54:	4b02      	ldr	r3, [pc, #8]	; (8008c60 <LmhpComplianceIsRunning+0xc>)
 8008c56:	7918      	ldrb	r0, [r3, #4]
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	d000      	beq.n	8008c5e <LmhpComplianceIsRunning+0xa>
  {
    return false;
  }

  return ComplianceTestState.IsRunning;
 8008c5c:	7958      	ldrb	r0, [r3, #5]
}
 8008c5e:	4770      	bx	lr
 8008c60:	200004f4 	.word	0x200004f4

08008c64 <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess(void)
{
  /* Nothing to process */
}
 8008c64:	4770      	bx	lr
	...

08008c68 <LmhpComplianceTxProcess>:
{
 8008c68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (ComplianceTestState.Initialized == false)
 8008c6a:	4c1c      	ldr	r4, [pc, #112]	; (8008cdc <LmhpComplianceTxProcess+0x74>)
 8008c6c:	7923      	ldrb	r3, [r4, #4]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d031      	beq.n	8008cd6 <LmhpComplianceTxProcess+0x6e>
  if (ComplianceTestState.LinkCheck == true)
 8008c72:	7ca2      	ldrb	r2, [r4, #18]
 8008c74:	68e3      	ldr	r3, [r4, #12]
 8008c76:	2a00      	cmp	r2, #0
 8008c78:	d020      	beq.n	8008cbc <LmhpComplianceTxProcess+0x54>
    ComplianceTestState.LinkCheck = false;
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	74a2      	strb	r2, [r4, #18]
    ComplianceTestState.DataBufferSize = 3;
 8008c7e:	3203      	adds	r2, #3
 8008c80:	72e2      	strb	r2, [r4, #11]
    ComplianceTestState.DataBuffer[0] = 5;
 8008c82:	3202      	adds	r2, #2
 8008c84:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 8008c86:	7ce2      	ldrb	r2, [r4, #19]
 8008c88:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8008c8a:	7d22      	ldrb	r2, [r4, #20]
 8008c8c:	709a      	strb	r2, [r3, #2]
    ComplianceTestState.State = 1;
 8008c8e:	2201      	movs	r2, #1
 8008c90:	71a2      	strb	r2, [r4, #6]
  LmHandlerAppData_t appData =
 8008c92:	4669      	mov	r1, sp
 8008c94:	22e0      	movs	r2, #224	; 0xe0
  TimerStart(&ComplianceTxNextPacketTimer);
 8008c96:	0020      	movs	r0, r4
  LmHandlerAppData_t appData =
 8008c98:	720a      	strb	r2, [r1, #8]
 8008c9a:	7ae2      	ldrb	r2, [r4, #11]
 8008c9c:	9303      	str	r3, [sp, #12]
  TimerTime_t nextTxIn = 0;
 8008c9e:	2300      	movs	r3, #0
  TimerStart(&ComplianceTxNextPacketTimer);
 8008ca0:	3018      	adds	r0, #24
  LmHandlerAppData_t appData =
 8008ca2:	724a      	strb	r2, [r1, #9]
  TimerTime_t nextTxIn = 0;
 8008ca4:	9301      	str	r3, [sp, #4]
  TimerStart(&ComplianceTxNextPacketTimer);
 8008ca6:	f007 ffcf 	bl	8010c48 <UTIL_TIMER_Start>
  return LmhpCompliancePackage.OnSendRequest(&appData, (LmHandlerMsgTypes_t)ComplianceTestState.IsTxConfirmed, &nextTxIn,
 8008caa:	4b0d      	ldr	r3, [pc, #52]	; (8008ce0 <LmhpComplianceTxProcess+0x78>)
 8008cac:	7a21      	ldrb	r1, [r4, #8]
 8008cae:	aa01      	add	r2, sp, #4
 8008cb0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008cb2:	a802      	add	r0, sp, #8
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	47a0      	blx	r4
}
 8008cb8:	b004      	add	sp, #16
 8008cba:	bd10      	pop	{r4, pc}
    switch (ComplianceTestState.State)
 8008cbc:	79a2      	ldrb	r2, [r4, #6]
 8008cbe:	2a01      	cmp	r2, #1
 8008cc0:	d002      	beq.n	8008cc8 <LmhpComplianceTxProcess+0x60>
 8008cc2:	2a04      	cmp	r2, #4
 8008cc4:	d1e5      	bne.n	8008c92 <LmhpComplianceTxProcess+0x2a>
 8008cc6:	e7e2      	b.n	8008c8e <LmhpComplianceTxProcess+0x26>
        ComplianceTestState.DataBufferSize = 2;
 8008cc8:	2202      	movs	r2, #2
 8008cca:	72e2      	strb	r2, [r4, #11]
        ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8008ccc:	8a22      	ldrh	r2, [r4, #16]
 8008cce:	0a11      	lsrs	r1, r2, #8
 8008cd0:	7019      	strb	r1, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8008cd2:	705a      	strb	r2, [r3, #1]
        break;
 8008cd4:	e7dd      	b.n	8008c92 <LmhpComplianceTxProcess+0x2a>
    return LORAMAC_HANDLER_ERROR;
 8008cd6:	2001      	movs	r0, #1
 8008cd8:	4240      	negs	r0, r0
 8008cda:	e7ed      	b.n	8008cb8 <LmhpComplianceTxProcess+0x50>
 8008cdc:	200004f4 	.word	0x200004f4
 8008ce0:	20000144 	.word	0x20000144

08008ce4 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent(void *context)
{
 8008ce4:	b510      	push	{r4, lr}
  LmhpComplianceTxProcess();
 8008ce6:	f7ff ffbf 	bl	8008c68 <LmhpComplianceTxProcess>
}
 8008cea:	bd10      	pop	{r4, pc}

08008cec <LmhpComplianceOnMcpsConfirm>:
  if (ComplianceTestState.Initialized == false)
 8008cec:	4b08      	ldr	r3, [pc, #32]	; (8008d10 <LmhpComplianceOnMcpsConfirm+0x24>)
 8008cee:	791a      	ldrb	r2, [r3, #4]
 8008cf0:	2a00      	cmp	r2, #0
 8008cf2:	d00b      	beq.n	8008d0c <LmhpComplianceOnMcpsConfirm+0x20>
  if ((ComplianceTestState.IsRunning == true) &&
 8008cf4:	795a      	ldrb	r2, [r3, #5]
 8008cf6:	2a00      	cmp	r2, #0
 8008cf8:	d008      	beq.n	8008d0c <LmhpComplianceOnMcpsConfirm+0x20>
 8008cfa:	7802      	ldrb	r2, [r0, #0]
 8008cfc:	2a01      	cmp	r2, #1
 8008cfe:	d105      	bne.n	8008d0c <LmhpComplianceOnMcpsConfirm+0x20>
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8008d00:	7902      	ldrb	r2, [r0, #4]
 8008d02:	2a00      	cmp	r2, #0
 8008d04:	d002      	beq.n	8008d0c <LmhpComplianceOnMcpsConfirm+0x20>
    ComplianceTestState.DownLinkCounter++;
 8008d06:	8a1a      	ldrh	r2, [r3, #16]
 8008d08:	3201      	adds	r2, #1
 8008d0a:	821a      	strh	r2, [r3, #16]
}
 8008d0c:	4770      	bx	lr
 8008d0e:	46c0      	nop			; (mov r8, r8)
 8008d10:	200004f4 	.word	0x200004f4

08008d14 <LmhpComplianceOnMlmeConfirm>:
  if (ComplianceTestState.Initialized == false)
 8008d14:	4b06      	ldr	r3, [pc, #24]	; (8008d30 <LmhpComplianceOnMlmeConfirm+0x1c>)
 8008d16:	791a      	ldrb	r2, [r3, #4]
 8008d18:	2a00      	cmp	r2, #0
 8008d1a:	d008      	beq.n	8008d2e <LmhpComplianceOnMlmeConfirm+0x1a>
  if (mlmeConfirm->MlmeRequest == MLME_LINK_CHECK)
 8008d1c:	7802      	ldrb	r2, [r0, #0]
 8008d1e:	2a04      	cmp	r2, #4
 8008d20:	d105      	bne.n	8008d2e <LmhpComplianceOnMlmeConfirm+0x1a>
    ComplianceTestState.LinkCheck = true;
 8008d22:	3a03      	subs	r2, #3
 8008d24:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 8008d26:	7a02      	ldrb	r2, [r0, #8]
 8008d28:	74da      	strb	r2, [r3, #19]
    ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8008d2a:	7a42      	ldrb	r2, [r0, #9]
 8008d2c:	751a      	strb	r2, [r3, #20]
}
 8008d2e:	4770      	bx	lr
 8008d30:	200004f4 	.word	0x200004f4

08008d34 <LmhpComplianceOnMcpsIndication>:
{
 8008d34:	b530      	push	{r4, r5, lr}
  if (ComplianceTestState.Initialized == false)
 8008d36:	4c78      	ldr	r4, [pc, #480]	; (8008f18 <LmhpComplianceOnMcpsIndication+0x1e4>)
{
 8008d38:	0002      	movs	r2, r0
  if (ComplianceTestState.Initialized == false)
 8008d3a:	7923      	ldrb	r3, [r4, #4]
{
 8008d3c:	b08d      	sub	sp, #52	; 0x34
  if (ComplianceTestState.Initialized == false)
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d045      	beq.n	8008dce <LmhpComplianceOnMcpsIndication+0x9a>
  if (mcpsIndication->RxData == false)
 8008d42:	7b43      	ldrb	r3, [r0, #13]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d042      	beq.n	8008dce <LmhpComplianceOnMcpsIndication+0x9a>
  if ((ComplianceTestState.IsRunning == true) &&
 8008d48:	7965      	ldrb	r5, [r4, #5]
 8008d4a:	2d00      	cmp	r5, #0
 8008d4c:	d005      	beq.n	8008d5a <LmhpComplianceOnMcpsIndication+0x26>
 8008d4e:	7c83      	ldrb	r3, [r0, #18]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d102      	bne.n	8008d5a <LmhpComplianceOnMcpsIndication+0x26>
    ComplianceTestState.DownLinkCounter++;
 8008d54:	8a23      	ldrh	r3, [r4, #16]
 8008d56:	3301      	adds	r3, #1
 8008d58:	8223      	strh	r3, [r4, #16]
  if (mcpsIndication->Port != COMPLIANCE_PORT)
 8008d5a:	78d3      	ldrb	r3, [r2, #3]
 8008d5c:	2be0      	cmp	r3, #224	; 0xe0
 8008d5e:	d136      	bne.n	8008dce <LmhpComplianceOnMcpsIndication+0x9a>
  if (ComplianceTestState.IsRunning == false)
 8008d60:	2d00      	cmp	r5, #0
 8008d62:	d136      	bne.n	8008dd2 <LmhpComplianceOnMcpsIndication+0x9e>
    if ((mcpsIndication->BufferSize == 4) &&
 8008d64:	7b11      	ldrb	r1, [r2, #12]
 8008d66:	2904      	cmp	r1, #4
 8008d68:	d131      	bne.n	8008dce <LmhpComplianceOnMcpsIndication+0x9a>
        (mcpsIndication->Buffer[0] == 0x01) &&
 8008d6a:	6893      	ldr	r3, [r2, #8]
    if ((mcpsIndication->BufferSize == 4) &&
 8008d6c:	781a      	ldrb	r2, [r3, #0]
 8008d6e:	2a01      	cmp	r2, #1
 8008d70:	d12d      	bne.n	8008dce <LmhpComplianceOnMcpsIndication+0x9a>
        (mcpsIndication->Buffer[0] == 0x01) &&
 8008d72:	785a      	ldrb	r2, [r3, #1]
 8008d74:	2a01      	cmp	r2, #1
 8008d76:	d12a      	bne.n	8008dce <LmhpComplianceOnMcpsIndication+0x9a>
        (mcpsIndication->Buffer[1] == 0x01) &&
 8008d78:	789a      	ldrb	r2, [r3, #2]
 8008d7a:	2a01      	cmp	r2, #1
 8008d7c:	d127      	bne.n	8008dce <LmhpComplianceOnMcpsIndication+0x9a>
        (mcpsIndication->Buffer[2] == 0x01) &&
 8008d7e:	78db      	ldrb	r3, [r3, #3]
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d124      	bne.n	8008dce <LmhpComplianceOnMcpsIndication+0x9a>
      ComplianceTestState.IsTxConfirmed = false;
 8008d84:	4a65      	ldr	r2, [pc, #404]	; (8008f1c <LmhpComplianceOnMcpsIndication+0x1e8>)
      ComplianceTestState.DownLinkCounter = 0;
 8008d86:	6125      	str	r5, [r4, #16]
      ComplianceTestState.IsTxConfirmed = false;
 8008d88:	8122      	strh	r2, [r4, #8]
      ComplianceTestState.DataBufferSize = 2;
 8008d8a:	2202      	movs	r2, #2
 8008d8c:	72e2      	strb	r2, [r4, #11]
      mibReq.Type = MIB_ADR;
 8008d8e:	466a      	mov	r2, sp
      LoRaMacMibSetRequestConfirm(&mibReq);
 8008d90:	a803      	add	r0, sp, #12
      ComplianceTestState.IsRunning = true;
 8008d92:	7163      	strb	r3, [r4, #5]
      ComplianceTestState.State = 1;
 8008d94:	71a3      	strb	r3, [r4, #6]
      mibReq.Param.AdrEnable = true;
 8008d96:	7413      	strb	r3, [r2, #16]
      mibReq.Type = MIB_ADR;
 8008d98:	7311      	strb	r1, [r2, #12]
      ComplianceTestState.NbGateways = 0;
 8008d9a:	7525      	strb	r5, [r4, #20]
      LoRaMacMibSetRequestConfirm(&mibReq);
 8008d9c:	f002 f9d4 	bl	800b148 <LoRaMacMibSetRequestConfirm>
      LoRaMacTestSetDutyCycleOn(false);
 8008da0:	0028      	movs	r0, r5
 8008da2:	f002 fecd 	bl	800bb40 <LoRaMacTestSetDutyCycleOn>
      if (LmhpComplianceParams->StopPeripherals != NULL)
 8008da6:	6823      	ldr	r3, [r4, #0]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d000      	beq.n	8008db0 <LmhpComplianceOnMcpsIndication+0x7c>
        LmhpComplianceParams->StopPeripherals();
 8008dae:	4798      	blx	r3
      TimerInit(&ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent);
 8008db0:	2200      	movs	r2, #0
 8008db2:	2101      	movs	r1, #1
 8008db4:	3418      	adds	r4, #24
 8008db6:	4b5a      	ldr	r3, [pc, #360]	; (8008f20 <LmhpComplianceOnMcpsIndication+0x1ec>)
 8008db8:	9200      	str	r2, [sp, #0]
 8008dba:	4249      	negs	r1, r1
 8008dbc:	0020      	movs	r0, r4
 8008dbe:	f007 fe8f 	bl	8010ae0 <UTIL_TIMER_Create>
      TimerSetValue(&ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE);
 8008dc2:	4958      	ldr	r1, [pc, #352]	; (8008f24 <LmhpComplianceOnMcpsIndication+0x1f0>)
 8008dc4:	0020      	movs	r0, r4
 8008dc6:	f007 ff81 	bl	8010ccc <UTIL_TIMER_SetPeriod>
      LmhpComplianceTxProcess();
 8008dca:	f7ff ff4d 	bl	8008c68 <LmhpComplianceTxProcess>
}
 8008dce:	b00d      	add	sp, #52	; 0x34
 8008dd0:	bd30      	pop	{r4, r5, pc}
    ComplianceTestState.State = mcpsIndication->Buffer[0];
 8008dd2:	6893      	ldr	r3, [r2, #8]
 8008dd4:	7818      	ldrb	r0, [r3, #0]
 8008dd6:	71a0      	strb	r0, [r4, #6]
    switch (ComplianceTestState.State)
 8008dd8:	280a      	cmp	r0, #10
 8008dda:	d8f8      	bhi.n	8008dce <LmhpComplianceOnMcpsIndication+0x9a>
 8008ddc:	f7f7 f9a6 	bl	800012c <__gnu_thumb1_case_uqi>
 8008de0:	27232006 	.word	0x27232006
 8008de4:	6446402b 	.word	0x6446402b
 8008de8:	8c89      	.short	0x8c89
 8008dea:	95          	.byte	0x95
 8008deb:	00          	.byte	0x00
        TimerStop(&ComplianceTxNextPacketTimer);
 8008dec:	0020      	movs	r0, r4
 8008dee:	3018      	adds	r0, #24
 8008df0:	f007 fed6 	bl	8010ba0 <UTIL_TIMER_Stop>
        ComplianceTestState.DownLinkCounter = 0;
 8008df4:	2300      	movs	r3, #0
        mibReq.Type = MIB_ADR;
 8008df6:	466a      	mov	r2, sp
        ComplianceTestState.DownLinkCounter = 0;
 8008df8:	8223      	strh	r3, [r4, #16]
        ComplianceTestState.IsRunning = false;
 8008dfa:	7163      	strb	r3, [r4, #5]
        mibReq.Type = MIB_ADR;
 8008dfc:	3304      	adds	r3, #4
 8008dfe:	7313      	strb	r3, [r2, #12]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8008e00:	6823      	ldr	r3, [r4, #0]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8008e02:	a803      	add	r0, sp, #12
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	7413      	strb	r3, [r2, #16]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8008e08:	f002 f99e 	bl	800b148 <LoRaMacMibSetRequestConfirm>
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 8008e0c:	6823      	ldr	r3, [r4, #0]
 8008e0e:	7858      	ldrb	r0, [r3, #1]
 8008e10:	f002 fe96 	bl	800bb40 <LoRaMacTestSetDutyCycleOn>
        if (LmhpComplianceParams->StartPeripherals != NULL)
 8008e14:	6823      	ldr	r3, [r4, #0]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d0d8      	beq.n	8008dce <LmhpComplianceOnMcpsIndication+0x9a>
          LmhpComplianceParams->StartPeripherals();
 8008e1c:	4798      	blx	r3
      break;
 8008e1e:	e7d6      	b.n	8008dce <LmhpComplianceOnMcpsIndication+0x9a>
        ComplianceTestState.DataBufferSize = 2;
 8008e20:	2302      	movs	r3, #2
 8008e22:	72e3      	strb	r3, [r4, #11]
        break;
 8008e24:	e7d3      	b.n	8008dce <LmhpComplianceOnMcpsIndication+0x9a>
        ComplianceTestState.IsTxConfirmed = true;
 8008e26:	2301      	movs	r3, #1
 8008e28:	7223      	strb	r3, [r4, #8]
        ComplianceTestState.State = 1;
 8008e2a:	71a3      	strb	r3, [r4, #6]
        break;
 8008e2c:	e7cf      	b.n	8008dce <LmhpComplianceOnMcpsIndication+0x9a>
        ComplianceTestState.IsTxConfirmed = false;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	7223      	strb	r3, [r4, #8]
        ComplianceTestState.State = 1;
 8008e32:	3301      	adds	r3, #1
 8008e34:	e7f9      	b.n	8008e2a <LmhpComplianceOnMcpsIndication+0xf6>
        ComplianceTestState.DataBuffer[0] = 4;
 8008e36:	2304      	movs	r3, #4
 8008e38:	68e5      	ldr	r5, [r4, #12]
        ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8008e3a:	7b11      	ldrb	r1, [r2, #12]
        ComplianceTestState.DataBuffer[0] = 4;
 8008e3c:	702b      	strb	r3, [r5, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 8008e3e:	7aa0      	ldrb	r0, [r4, #10]
        ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8008e40:	72e1      	strb	r1, [r4, #11]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 8008e42:	1c03      	adds	r3, r0, #0
 8008e44:	4288      	cmp	r0, r1
 8008e46:	d900      	bls.n	8008e4a <LmhpComplianceOnMcpsIndication+0x116>
 8008e48:	1c0b      	adds	r3, r1, #0
 8008e4a:	b2d9      	uxtb	r1, r3
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	3301      	adds	r3, #1
 8008e50:	b2d8      	uxtb	r0, r3
 8008e52:	4281      	cmp	r1, r0
 8008e54:	d9bb      	bls.n	8008dce <LmhpComplianceOnMcpsIndication+0x9a>
          ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8008e56:	6890      	ldr	r0, [r2, #8]
 8008e58:	5cc0      	ldrb	r0, [r0, r3]
 8008e5a:	3001      	adds	r0, #1
 8008e5c:	54e8      	strb	r0, [r5, r3]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 8008e5e:	e7f6      	b.n	8008e4e <LmhpComplianceOnMcpsIndication+0x11a>
        mlmeReq.Type = MLME_LINK_CHECK;
 8008e60:	2304      	movs	r3, #4
 8008e62:	a803      	add	r0, sp, #12
        mlmeReq.Type = MLME_DEVICE_TIME;
 8008e64:	7003      	strb	r3, [r0, #0]
        LoRaMacMlmeRequest(&mlmeReq);
 8008e66:	f002 fb9b 	bl	800b5a0 <LoRaMacMlmeRequest>
      break;
 8008e6a:	e7b0      	b.n	8008dce <LmhpComplianceOnMcpsIndication+0x9a>
        TimerStop(&ComplianceTxNextPacketTimer);
 8008e6c:	0020      	movs	r0, r4
 8008e6e:	3018      	adds	r0, #24
 8008e70:	f007 fe96 	bl	8010ba0 <UTIL_TIMER_Stop>
        ComplianceTestState.DownLinkCounter = 0;
 8008e74:	2300      	movs	r3, #0
        mibReq.Type = MIB_ADR;
 8008e76:	466a      	mov	r2, sp
        ComplianceTestState.DownLinkCounter = 0;
 8008e78:	8223      	strh	r3, [r4, #16]
        ComplianceTestState.IsRunning = false;
 8008e7a:	7163      	strb	r3, [r4, #5]
        mibReq.Type = MIB_ADR;
 8008e7c:	3304      	adds	r3, #4
 8008e7e:	7313      	strb	r3, [r2, #12]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8008e80:	6823      	ldr	r3, [r4, #0]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8008e82:	a803      	add	r0, sp, #12
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	7413      	strb	r3, [r2, #16]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8008e88:	f002 f95e 	bl	800b148 <LoRaMacMibSetRequestConfirm>
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 8008e8c:	6823      	ldr	r3, [r4, #0]
 8008e8e:	7858      	ldrb	r0, [r3, #1]
 8008e90:	f002 fe56 	bl	800bb40 <LoRaMacTestSetDutyCycleOn>
        if (LmhpComplianceParams->StartPeripherals != NULL)
 8008e94:	6823      	ldr	r3, [r4, #0]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d000      	beq.n	8008e9e <LmhpComplianceOnMcpsIndication+0x16a>
          LmhpComplianceParams->StartPeripherals();
 8008e9c:	4798      	blx	r3
        LmhpCompliancePackage.OnJoinRequest(ACTIVATION_TYPE_OTAA);
 8008e9e:	4b22      	ldr	r3, [pc, #136]	; (8008f28 <LmhpComplianceOnMcpsIndication+0x1f4>)
 8008ea0:	2002      	movs	r0, #2
 8008ea2:	6a1b      	ldr	r3, [r3, #32]
 8008ea4:	4798      	blx	r3
      break;
 8008ea6:	e792      	b.n	8008dce <LmhpComplianceOnMcpsIndication+0x9a>
        if (mcpsIndication->BufferSize == 3)
 8008ea8:	7b12      	ldrb	r2, [r2, #12]
 8008eaa:	a803      	add	r0, sp, #12
 8008eac:	2a03      	cmp	r2, #3
 8008eae:	d10a      	bne.n	8008ec6 <LmhpComplianceOnMcpsIndication+0x192>
          mlmeReq.Type = MLME_TXCW;
 8008eb0:	3202      	adds	r2, #2
 8008eb2:	7002      	strb	r2, [r0, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 8008eb4:	785a      	ldrb	r2, [r3, #1]
 8008eb6:	789b      	ldrb	r3, [r3, #2]
 8008eb8:	0212      	lsls	r2, r2, #8
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	8083      	strh	r3, [r0, #4]
        LoRaMacMlmeRequest(&mlmeReq);
 8008ebe:	f002 fb6f 	bl	800b5a0 <LoRaMacMlmeRequest>
        ComplianceTestState.State = 1;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e7b1      	b.n	8008e2a <LmhpComplianceOnMcpsIndication+0xf6>
        else if (mcpsIndication->BufferSize == 7)
 8008ec6:	2a07      	cmp	r2, #7
 8008ec8:	d1f9      	bne.n	8008ebe <LmhpComplianceOnMcpsIndication+0x18a>
          mlmeReq.Type = MLME_TXCW_1;
 8008eca:	3a01      	subs	r2, #1
 8008ecc:	7002      	strb	r2, [r0, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 8008ece:	7859      	ldrb	r1, [r3, #1]
 8008ed0:	789a      	ldrb	r2, [r3, #2]
 8008ed2:	0209      	lsls	r1, r1, #8
 8008ed4:	430a      	orrs	r2, r1
 8008ed6:	8082      	strh	r2, [r0, #4]
          mlmeReq.Req.TxCw.Frequency = (uint32_t)((mcpsIndication->Buffer[3] << 16) | (mcpsIndication->Buffer[4] << 8) | mcpsIndication->Buffer[5]) * 100;
 8008ed8:	78da      	ldrb	r2, [r3, #3]
 8008eda:	7919      	ldrb	r1, [r3, #4]
 8008edc:	0412      	lsls	r2, r2, #16
 8008ede:	0209      	lsls	r1, r1, #8
 8008ee0:	430a      	orrs	r2, r1
 8008ee2:	7959      	ldrb	r1, [r3, #5]
 8008ee4:	430a      	orrs	r2, r1
 8008ee6:	2164      	movs	r1, #100	; 0x64
 8008ee8:	434a      	muls	r2, r1
 8008eea:	6082      	str	r2, [r0, #8]
          mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8008eec:	799b      	ldrb	r3, [r3, #6]
 8008eee:	7303      	strb	r3, [r0, #12]
 8008ef0:	e7e5      	b.n	8008ebe <LmhpComplianceOnMcpsIndication+0x18a>
        mlmeReq.Type = MLME_DEVICE_TIME;
 8008ef2:	230a      	movs	r3, #10
 8008ef4:	a803      	add	r0, sp, #12
 8008ef6:	e7b5      	b.n	8008e64 <LmhpComplianceOnMcpsIndication+0x130>
        mibReq.Type = MIB_DEVICE_CLASS;
 8008ef8:	4669      	mov	r1, sp
 8008efa:	2200      	movs	r2, #0
 8008efc:	730a      	strb	r2, [r1, #12]
        mibReq.Param.Class = (DeviceClass_t)mcpsIndication->Buffer[1];;
 8008efe:	785b      	ldrb	r3, [r3, #1]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8008f00:	a803      	add	r0, sp, #12
        mibReq.Param.Class = (DeviceClass_t)mcpsIndication->Buffer[1];;
 8008f02:	740b      	strb	r3, [r1, #16]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8008f04:	f002 f920 	bl	800b148 <LoRaMacMibSetRequestConfirm>
      break;
 8008f08:	e761      	b.n	8008dce <LmhpComplianceOnMcpsIndication+0x9a>
        mlmeReq.Type = MLME_PING_SLOT_INFO;
 8008f0a:	4669      	mov	r1, sp
 8008f0c:	220d      	movs	r2, #13
 8008f0e:	730a      	strb	r2, [r1, #12]
        mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8008f10:	785b      	ldrb	r3, [r3, #1]
        LoRaMacMlmeRequest(&mlmeReq);
 8008f12:	a803      	add	r0, sp, #12
        mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8008f14:	740b      	strb	r3, [r1, #16]
        LoRaMacMlmeRequest(&mlmeReq);
 8008f16:	e7a6      	b.n	8008e66 <LmhpComplianceOnMcpsIndication+0x132>
 8008f18:	200004f4 	.word	0x200004f4
 8008f1c:	ffffe000 	.word	0xffffe000
 8008f20:	08008ce5 	.word	0x08008ce5
 8008f24:	00001388 	.word	0x00001388
 8008f28:	20000144 	.word	0x20000144

08008f2c <LmphCompliancePackageFactory>:
}
 8008f2c:	4800      	ldr	r0, [pc, #0]	; (8008f30 <LmphCompliancePackageFactory+0x4>)
 8008f2e:	4770      	bx	lr
 8008f30:	20000144 	.word	0x20000144

08008f34 <NvmCtxMgmtEvent>:
    {
      break;
    }
  }
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 8008f34:	4770      	bx	lr

08008f36 <NvmCtxMgmtStore>:

  return NVMCTXMGMT_STATUS_SUCCESS;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8008f36:	2001      	movs	r0, #1
 8008f38:	4770      	bx	lr

08008f3a <NvmCtxMgmtRestore>:
 8008f3a:	2001      	movs	r0, #1
 8008f3c:	4770      	bx	lr
	...

08008f40 <OnRadioRxError>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
 8008f40:	2302      	movs	r3, #2
 8008f42:	4a08      	ldr	r2, [pc, #32]	; (8008f64 <OnRadioRxError+0x24>)
{
 8008f44:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8008f46:	7811      	ldrb	r1, [r2, #0]
 8008f48:	430b      	orrs	r3, r1
 8008f4a:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008f4c:	23d2      	movs	r3, #210	; 0xd2
 8008f4e:	4a06      	ldr	r2, [pc, #24]	; (8008f68 <OnRadioRxError+0x28>)
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	58d3      	ldr	r3, [r2, r3]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d003      	beq.n	8008f60 <OnRadioRxError+0x20>
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d000      	beq.n	8008f60 <OnRadioRxError+0x20>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008f5e:	4798      	blx	r3
    }
}
 8008f60:	bd10      	pop	{r4, pc}
 8008f62:	46c0      	nop			; (mov r8, r8)
 8008f64:	20000524 	.word	0x20000524
 8008f68:	200006cc 	.word	0x200006cc

08008f6c <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8008f6c:	4a05      	ldr	r2, [pc, #20]	; (8008f84 <UpdateRxSlotIdleState+0x18>)
 8008f6e:	4b06      	ldr	r3, [pc, #24]	; (8008f88 <UpdateRxSlotIdleState+0x1c>)
 8008f70:	58d3      	ldr	r3, [r2, r3]
 8008f72:	337c      	adds	r3, #124	; 0x7c
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	d000      	beq.n	8008f7c <UpdateRxSlotIdleState+0x10>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8008f7a:	2306      	movs	r3, #6
 8008f7c:	2190      	movs	r1, #144	; 0x90
 8008f7e:	00c9      	lsls	r1, r1, #3
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 8008f80:	5453      	strb	r3, [r2, r1]
 8008f82:	4770      	bx	lr
 8008f84:	200006cc 	.word	0x200006cc
 8008f88:	00000484 	.word	0x00000484

08008f8c <StopRetransmission>:
    return false;
}

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8008f8c:	4b11      	ldr	r3, [pc, #68]	; (8008fd4 <StopRetransmission+0x48>)
 8008f8e:	4a12      	ldr	r2, [pc, #72]	; (8008fd8 <StopRetransmission+0x4c>)
 8008f90:	5c9a      	ldrb	r2, [r3, r2]
 8008f92:	0792      	lsls	r2, r2, #30
 8008f94:	d503      	bpl.n	8008f9e <StopRetransmission+0x12>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8008f96:	4a11      	ldr	r2, [pc, #68]	; (8008fdc <StopRetransmission+0x50>)
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8008f98:	5c9a      	ldrb	r2, [r3, r2]
 8008f9a:	2a01      	cmp	r2, #1
 8008f9c:	d90a      	bls.n	8008fb4 <StopRetransmission+0x28>
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 8008f9e:	4a10      	ldr	r2, [pc, #64]	; (8008fe0 <StopRetransmission+0x54>)
 8008fa0:	589a      	ldr	r2, [r3, r2]
 8008fa2:	0011      	movs	r1, r2
 8008fa4:	317e      	adds	r1, #126	; 0x7e
 8008fa6:	7809      	ldrb	r1, [r1, #0]
 8008fa8:	2900      	cmp	r1, #0
 8008faa:	d003      	beq.n	8008fb4 <StopRetransmission+0x28>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 8008fac:	3204      	adds	r2, #4
 8008fae:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
 8008fb0:	3101      	adds	r1, #1
 8008fb2:	67d1      	str	r1, [r2, #124]	; 0x7c
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8008fb4:	2182      	movs	r1, #130	; 0x82
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	00c9      	lsls	r1, r1, #3
 8008fba:	545a      	strb	r2, [r3, r1]
    MacCtx.NodeAckRequested = false;
 8008fbc:	4909      	ldr	r1, [pc, #36]	; (8008fe4 <StopRetransmission+0x58>)
 8008fbe:	545a      	strb	r2, [r3, r1]
    MacCtx.AckTimeoutRetry = false;
 8008fc0:	4909      	ldr	r1, [pc, #36]	; (8008fe8 <StopRetransmission+0x5c>)
 8008fc2:	545a      	strb	r2, [r3, r1]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008fc4:	39d3      	subs	r1, #211	; 0xd3
 8008fc6:	5858      	ldr	r0, [r3, r1]
 8008fc8:	3202      	adds	r2, #2
 8008fca:	4390      	bics	r0, r2
 8008fcc:	5058      	str	r0, [r3, r1]

    return true;
}
 8008fce:	2001      	movs	r0, #1
 8008fd0:	4770      	bx	lr
 8008fd2:	46c0      	nop			; (mov r8, r8)
 8008fd4:	200006cc 	.word	0x200006cc
 8008fd8:	00000481 	.word	0x00000481
 8008fdc:	0000042d 	.word	0x0000042d
 8008fe0:	00000484 	.word	0x00000484
 8008fe4:	00000414 	.word	0x00000414
 8008fe8:	00000413 	.word	0x00000413

08008fec <CallNvmCtxCallback>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 8008fec:	23d2      	movs	r3, #210	; 0xd2
 8008fee:	4a05      	ldr	r2, [pc, #20]	; (8009004 <CallNvmCtxCallback+0x18>)
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	58d3      	ldr	r3, [r2, r3]
{
 8008ff4:	b510      	push	{r4, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d003      	beq.n	8009002 <CallNvmCtxCallback+0x16>
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d000      	beq.n	8009002 <CallNvmCtxCallback+0x16>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 8009000:	4798      	blx	r3
    }
}
 8009002:	bd10      	pop	{r4, pc}
 8009004:	200006cc 	.word	0x200006cc

08009008 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 8009008:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 800900a:	2000      	movs	r0, #0
 800900c:	f7ff ffee 	bl	8008fec <CallNvmCtxCallback>
}
 8009010:	bd10      	pop	{r4, pc}

08009012 <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 8009012:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 8009014:	2001      	movs	r0, #1
 8009016:	f7ff ffe9 	bl	8008fec <CallNvmCtxCallback>
}
 800901a:	bd10      	pop	{r4, pc}

0800901c <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 800901c:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 800901e:	2002      	movs	r0, #2
 8009020:	f7ff ffe4 	bl	8008fec <CallNvmCtxCallback>
}
 8009024:	bd10      	pop	{r4, pc}

08009026 <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 8009026:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 8009028:	2003      	movs	r0, #3
 800902a:	f7ff ffdf 	bl	8008fec <CallNvmCtxCallback>
}
 800902e:	bd10      	pop	{r4, pc}

08009030 <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 8009030:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 8009032:	2004      	movs	r0, #4
 8009034:	f7ff ffda 	bl	8008fec <CallNvmCtxCallback>
}
 8009038:	bd10      	pop	{r4, pc}

0800903a <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
 800903a:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 800903c:	2005      	movs	r0, #5
 800903e:	f7ff ffd5 	bl	8008fec <CallNvmCtxCallback>
}
 8009042:	bd10      	pop	{r4, pc}

08009044 <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
 8009044:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 8009046:	2006      	movs	r0, #6
 8009048:	f7ff ffd0 	bl	8008fec <CallNvmCtxCallback>
}
 800904c:	bd10      	pop	{r4, pc}
	...

08009050 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8009050:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8009052:	4a0c      	ldr	r2, [pc, #48]	; (8009084 <GetMaxAppPayloadWithoutFOptsLength+0x34>)
 8009054:	4b0c      	ldr	r3, [pc, #48]	; (8009088 <GetMaxAppPayloadWithoutFOptsLength+0x38>)
 8009056:	a902      	add	r1, sp, #8
 8009058:	58d3      	ldr	r3, [r2, r3]
 800905a:	001a      	movs	r2, r3
 800905c:	32b8      	adds	r2, #184	; 0xb8
 800905e:	7812      	ldrb	r2, [r2, #0]
    getPhy.Datarate = datarate;
 8009060:	7048      	strb	r0, [r1, #1]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8009062:	708a      	strb	r2, [r1, #2]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8009064:	220d      	movs	r2, #13
 8009066:	700a      	strb	r2, [r1, #0]
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 8009068:	001a      	movs	r2, r3
 800906a:	32ca      	adds	r2, #202	; 0xca
 800906c:	7812      	ldrb	r2, [r2, #0]
 800906e:	2a00      	cmp	r2, #0
 8009070:	d001      	beq.n	8009076 <GetMaxAppPayloadWithoutFOptsLength+0x26>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8009072:	220e      	movs	r2, #14
 8009074:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009076:	7818      	ldrb	r0, [r3, #0]
 8009078:	f004 fd4a 	bl	800db10 <RegionGetPhyParam>
    return phyParam.Value;
 800907c:	b2c0      	uxtb	r0, r0
}
 800907e:	b005      	add	sp, #20
 8009080:	bd00      	pop	{pc}
 8009082:	46c0      	nop			; (mov r8, r8)
 8009084:	200006cc 	.word	0x200006cc
 8009088:	00000484 	.word	0x00000484

0800908c <OnAckTimeoutTimerEvent>:
{
 800908c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 800908e:	4810      	ldr	r0, [pc, #64]	; (80090d0 <OnAckTimeoutTimerEvent+0x44>)
 8009090:	f007 fd86 	bl	8010ba0 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 8009094:	4b0f      	ldr	r3, [pc, #60]	; (80090d4 <OnAckTimeoutTimerEvent+0x48>)
 8009096:	4a10      	ldr	r2, [pc, #64]	; (80090d8 <OnAckTimeoutTimerEvent+0x4c>)
 8009098:	5c9a      	ldrb	r2, [r3, r2]
 800909a:	2a00      	cmp	r2, #0
 800909c:	d002      	beq.n	80090a4 <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 800909e:	2101      	movs	r1, #1
 80090a0:	4a0e      	ldr	r2, [pc, #56]	; (80090dc <OnAckTimeoutTimerEvent+0x50>)
 80090a2:	5499      	strb	r1, [r3, r2]
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 80090a4:	4a0e      	ldr	r2, [pc, #56]	; (80090e0 <OnAckTimeoutTimerEvent+0x54>)
 80090a6:	589a      	ldr	r2, [r3, r2]
 80090a8:	327c      	adds	r2, #124	; 0x7c
 80090aa:	7812      	ldrb	r2, [r2, #0]
 80090ac:	2a02      	cmp	r2, #2
 80090ae:	d104      	bne.n	80090ba <OnAckTimeoutTimerEvent+0x2e>
        MacCtx.MacFlags.Bits.MacDone = 1;
 80090b0:	490c      	ldr	r1, [pc, #48]	; (80090e4 <OnAckTimeoutTimerEvent+0x58>)
 80090b2:	321e      	adds	r2, #30
 80090b4:	5c58      	ldrb	r0, [r3, r1]
 80090b6:	4302      	orrs	r2, r0
 80090b8:	545a      	strb	r2, [r3, r1]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80090ba:	22d2      	movs	r2, #210	; 0xd2
 80090bc:	0092      	lsls	r2, r2, #2
 80090be:	589b      	ldr	r3, [r3, r2]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d003      	beq.n	80090cc <OnAckTimeoutTimerEvent+0x40>
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d000      	beq.n	80090cc <OnAckTimeoutTimerEvent+0x40>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80090ca:	4798      	blx	r3
}
 80090cc:	bd10      	pop	{r4, pc}
 80090ce:	46c0      	nop			; (mov r8, r8)
 80090d0:	20000ac4 	.word	0x20000ac4
 80090d4:	200006cc 	.word	0x200006cc
 80090d8:	00000414 	.word	0x00000414
 80090dc:	00000413 	.word	0x00000413
 80090e0:	00000484 	.word	0x00000484
 80090e4:	00000481 	.word	0x00000481

080090e8 <PrepareRxDoneAbort>:
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80090e8:	22d0      	movs	r2, #208	; 0xd0
 80090ea:	2380      	movs	r3, #128	; 0x80
{
 80090ec:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80090ee:	4c0a      	ldr	r4, [pc, #40]	; (8009118 <PrepareRxDoneAbort+0x30>)
 80090f0:	0092      	lsls	r2, r2, #2
 80090f2:	58a1      	ldr	r1, [r4, r2]
 80090f4:	430b      	orrs	r3, r1
 80090f6:	50a3      	str	r3, [r4, r2]
    if( MacCtx.NodeAckRequested == true )
 80090f8:	4b08      	ldr	r3, [pc, #32]	; (800911c <PrepareRxDoneAbort+0x34>)
 80090fa:	5ce3      	ldrb	r3, [r4, r3]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d002      	beq.n	8009106 <PrepareRxDoneAbort+0x1e>
        OnAckTimeoutTimerEvent( NULL );
 8009100:	2000      	movs	r0, #0
 8009102:	f7ff ffc3 	bl	800908c <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 8009106:	2322      	movs	r3, #34	; 0x22
 8009108:	4905      	ldr	r1, [pc, #20]	; (8009120 <PrepareRxDoneAbort+0x38>)
 800910a:	5c62      	ldrb	r2, [r4, r1]
 800910c:	439a      	bics	r2, r3
 800910e:	4313      	orrs	r3, r2
 8009110:	5463      	strb	r3, [r4, r1]
    UpdateRxSlotIdleState( );
 8009112:	f7ff ff2b 	bl	8008f6c <UpdateRxSlotIdleState>
}
 8009116:	bd10      	pop	{r4, pc}
 8009118:	200006cc 	.word	0x200006cc
 800911c:	00000414 	.word	0x00000414
 8009120:	00000481 	.word	0x00000481

08009124 <HandleRadioRxErrorTimeout>:
{
 8009124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8009126:	4c33      	ldr	r4, [pc, #204]	; (80091f4 <HandleRadioRxErrorTimeout+0xd0>)
 8009128:	4d33      	ldr	r5, [pc, #204]	; (80091f8 <HandleRadioRxErrorTimeout+0xd4>)
{
 800912a:	9000      	str	r0, [sp, #0]
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800912c:	5963      	ldr	r3, [r4, r5]
{
 800912e:	000f      	movs	r7, r1
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8009130:	337c      	adds	r3, #124	; 0x7c
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	2b02      	cmp	r3, #2
 8009136:	d003      	beq.n	8009140 <HandleRadioRxErrorTimeout+0x1c>
        Radio.Sleep( );
 8009138:	4b30      	ldr	r3, [pc, #192]	; (80091fc <HandleRadioRxErrorTimeout+0xd8>)
 800913a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800913c:	9301      	str	r3, [sp, #4]
 800913e:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8009140:	f003 f8ca 	bl	800c2d8 <LoRaMacClassBIsBeaconExpected>
 8009144:	1e06      	subs	r6, r0, #0
 8009146:	d005      	beq.n	8009154 <HandleRadioRxErrorTimeout+0x30>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8009148:	2002      	movs	r0, #2
 800914a:	f003 f8ef 	bl	800c32c <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800914e:	2000      	movs	r0, #0
 8009150:	f002 fdb8 	bl	800bcc4 <LoRaMacClassBBeaconTimerEvent>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8009154:	5963      	ldr	r3, [r4, r5]
 8009156:	337c      	adds	r3, #124	; 0x7c
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	2b01      	cmp	r3, #1
 800915c:	d118      	bne.n	8009190 <HandleRadioRxErrorTimeout+0x6c>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800915e:	f003 f8c9 	bl	800c2f4 <LoRaMacClassBIsPingExpected>
 8009162:	9001      	str	r0, [sp, #4]
 8009164:	2800      	cmp	r0, #0
 8009166:	d006      	beq.n	8009176 <HandleRadioRxErrorTimeout+0x52>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009168:	2000      	movs	r0, #0
 800916a:	f002 ffc3 	bl	800c0f4 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800916e:	2000      	movs	r0, #0
 8009170:	f002 fd70 	bl	800bc54 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8009174:	9e01      	ldr	r6, [sp, #4]
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009176:	f003 f8c7 	bl	800c308 <LoRaMacClassBIsMulticastExpected>
 800917a:	2800      	cmp	r0, #0
 800917c:	d008      	beq.n	8009190 <HandleRadioRxErrorTimeout+0x6c>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800917e:	2000      	movs	r0, #0
 8009180:	f002 ffbe 	bl	800c100 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8009184:	2000      	movs	r0, #0
 8009186:	f002 fd77 	bl	800bc78 <LoRaMacClassBMulticastSlotTimerEvent>
    UpdateRxSlotIdleState( );
 800918a:	f7ff feef 	bl	8008f6c <UpdateRxSlotIdleState>
}
 800918e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    if( classBRx == false )
 8009190:	2e00      	cmp	r6, #0
 8009192:	d1fa      	bne.n	800918a <HandleRadioRxErrorTimeout+0x66>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8009194:	2290      	movs	r2, #144	; 0x90
 8009196:	00d2      	lsls	r2, r2, #3
 8009198:	4b19      	ldr	r3, [pc, #100]	; (8009200 <HandleRadioRxErrorTimeout+0xdc>)
 800919a:	5ca2      	ldrb	r2, [r4, r2]
 800919c:	5ce3      	ldrb	r3, [r4, r3]
 800919e:	2a00      	cmp	r2, #0
 80091a0:	d11a      	bne.n	80091d8 <HandleRadioRxErrorTimeout+0xb4>
            if( MacCtx.NodeAckRequested == true )
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d002      	beq.n	80091ac <HandleRadioRxErrorTimeout+0x88>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 80091a6:	4b17      	ldr	r3, [pc, #92]	; (8009204 <HandleRadioRxErrorTimeout+0xe0>)
 80091a8:	9a00      	ldr	r2, [sp, #0]
 80091aa:	54e2      	strb	r2, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 80091ac:	9800      	ldr	r0, [sp, #0]
 80091ae:	f003 ffcf 	bl	800d150 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( MacCtx.NvmCtx->LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 80091b2:	5963      	ldr	r3, [r4, r5]
 80091b4:	33fc      	adds	r3, #252	; 0xfc
 80091b6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80091b8:	f007 fcb8 	bl	8010b2c <UTIL_TIMER_GetElapsedTime>
 80091bc:	23ed      	movs	r3, #237	; 0xed
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	58e3      	ldr	r3, [r4, r3]
 80091c2:	4298      	cmp	r0, r3
 80091c4:	d3e1      	bcc.n	800918a <HandleRadioRxErrorTimeout+0x66>
                TimerStop( &MacCtx.RxWindowTimer2 );
 80091c6:	4810      	ldr	r0, [pc, #64]	; (8009208 <HandleRadioRxErrorTimeout+0xe4>)
 80091c8:	f007 fcea 	bl	8010ba0 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80091cc:	2320      	movs	r3, #32
 80091ce:	4a0f      	ldr	r2, [pc, #60]	; (800920c <HandleRadioRxErrorTimeout+0xe8>)
 80091d0:	5ca1      	ldrb	r1, [r4, r2]
 80091d2:	430b      	orrs	r3, r1
 80091d4:	54a3      	strb	r3, [r4, r2]
 80091d6:	e7d8      	b.n	800918a <HandleRadioRxErrorTimeout+0x66>
            if( MacCtx.NodeAckRequested == true )
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d001      	beq.n	80091e0 <HandleRadioRxErrorTimeout+0xbc>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 80091dc:	4b09      	ldr	r3, [pc, #36]	; (8009204 <HandleRadioRxErrorTimeout+0xe0>)
 80091de:	54e7      	strb	r7, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 80091e0:	0038      	movs	r0, r7
 80091e2:	f003 ffb5 	bl	800d150 <LoRaMacConfirmQueueSetStatusCmn>
            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80091e6:	5963      	ldr	r3, [r4, r5]
 80091e8:	337c      	adds	r3, #124	; 0x7c
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d1ed      	bne.n	80091cc <HandleRadioRxErrorTimeout+0xa8>
 80091f0:	e7cb      	b.n	800918a <HandleRadioRxErrorTimeout+0x66>
 80091f2:	46c0      	nop			; (mov r8, r8)
 80091f4:	200006cc 	.word	0x200006cc
 80091f8:	00000484 	.word	0x00000484
 80091fc:	080117e0 	.word	0x080117e0
 8009200:	00000414 	.word	0x00000414
 8009204:	0000043d 	.word	0x0000043d
 8009208:	20000a64 	.word	0x20000a64
 800920c:	00000481 	.word	0x00000481

08009210 <ResetMacParameters>:
{
 8009210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 8009212:	22b2      	movs	r2, #178	; 0xb2
 8009214:	2500      	movs	r5, #0
 8009216:	4c2e      	ldr	r4, [pc, #184]	; (80092d0 <ResetMacParameters+0xc0>)
 8009218:	4e2e      	ldr	r6, [pc, #184]	; (80092d4 <ResetMacParameters+0xc4>)
 800921a:	0052      	lsls	r2, r2, #1
 800921c:	59a3      	ldr	r3, [r4, r6]
    MacCtx.ChannelsNbTransCounter = 0;
 800921e:	492e      	ldr	r1, [pc, #184]	; (80092d8 <ResetMacParameters+0xc8>)
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 8009220:	549d      	strb	r5, [r3, r2]
    MacCtx.NvmCtx->AdrAckCounter = 0;
 8009222:	1d1a      	adds	r2, r3, #4
 8009224:	67d5      	str	r5, [r2, #124]	; 0x7c
    MacCtx.ChannelsNbTransCounter = 0;
 8009226:	2282      	movs	r2, #130	; 0x82
 8009228:	00d2      	lsls	r2, r2, #3
 800922a:	50a1      	str	r1, [r4, r2]
    MacCtx.NvmCtx->MaxDCycle = 0;
 800922c:	001a      	movs	r2, r3
 800922e:	32c8      	adds	r2, #200	; 0xc8
 8009230:	7015      	strb	r5, [r2, #0]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 8009232:	2201      	movs	r2, #1
 8009234:	4694      	mov	ip, r2
 8009236:	4661      	mov	r1, ip
 8009238:	324c      	adds	r2, #76	; 0x4c
 800923a:	32ff      	adds	r2, #255	; 0xff
 800923c:	5299      	strh	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800923e:	001a      	movs	r2, r3
 8009240:	8899      	ldrh	r1, [r3, #4]
 8009242:	3284      	adds	r2, #132	; 0x84
 8009244:	8011      	strh	r1, [r2, #0]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 8009246:	1d99      	adds	r1, r3, #6
 8009248:	7fc9      	ldrb	r1, [r1, #31]
 800924a:	3221      	adds	r2, #33	; 0x21
 800924c:	7011      	strb	r1, [r2, #0]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 800924e:	0019      	movs	r1, r3
 8009250:	3a7d      	subs	r2, #125	; 0x7d
 8009252:	31a8      	adds	r1, #168	; 0xa8
 8009254:	ca81      	ldmia	r2!, {r0, r7}
 8009256:	c181      	stmia	r1!, {r0, r7}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8009258:	ca81      	ldmia	r2!, {r0, r7}
 800925a:	c181      	stmia	r1!, {r0, r7}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 800925c:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 800925e:	3280      	adds	r2, #128	; 0x80
 8009260:	8011      	strh	r1, [r2, #0]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 8009262:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    params.NvmCtx = NULL;
 8009264:	9500      	str	r5, [sp, #0]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 8009266:	6051      	str	r1, [r2, #4]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8009268:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800926a:	6091      	str	r1, [r2, #8]
    MacCtx.NodeAckRequested = false;
 800926c:	4a1b      	ldr	r2, [pc, #108]	; (80092dc <ResetMacParameters+0xcc>)
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800926e:	4661      	mov	r1, ip
    MacCtx.NodeAckRequested = false;
 8009270:	54a5      	strb	r5, [r4, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 8009272:	224c      	movs	r2, #76	; 0x4c
 8009274:	32ff      	adds	r2, #255	; 0xff
 8009276:	549d      	strb	r5, [r3, r2]
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8009278:	466a      	mov	r2, sp
 800927a:	7111      	strb	r1, [r2, #4]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800927c:	7818      	ldrb	r0, [r3, #0]
 800927e:	4669      	mov	r1, sp
 8009280:	f004 fc59 	bl	800db36 <RegionInitDefaults>
    MacCtx.Channel = 0;
 8009284:	4b16      	ldr	r3, [pc, #88]	; (80092e0 <ResetMacParameters+0xd0>)
 8009286:	54e5      	strb	r5, [r4, r3]
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009288:	3b49      	subs	r3, #73	; 0x49
 800928a:	54e5      	strb	r5, [r4, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 800928c:	59a3      	ldr	r3, [r4, r6]
 800928e:	001a      	movs	r2, r3
 8009290:	32a8      	adds	r2, #168	; 0xa8
 8009292:	6811      	ldr	r1, [r2, #0]
 8009294:	22f4      	movs	r2, #244	; 0xf4
 8009296:	0092      	lsls	r2, r2, #2
 8009298:	50a1      	str	r1, [r4, r2]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800929a:	001a      	movs	r2, r3
 800929c:	32b9      	adds	r2, #185	; 0xb9
 800929e:	7811      	ldrb	r1, [r2, #0]
 80092a0:	22f7      	movs	r2, #247	; 0xf7
 80092a2:	0092      	lsls	r2, r2, #2
 80092a4:	54a1      	strb	r1, [r4, r2]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80092a6:	33ca      	adds	r3, #202	; 0xca
 80092a8:	781a      	ldrb	r2, [r3, #0]
 80092aa:	4b0e      	ldr	r3, [pc, #56]	; (80092e4 <ResetMacParameters+0xd4>)
 80092ac:	54e2      	strb	r2, [r4, r3]
    MacCtx.RxWindow2Config.RxContinuous = false;
 80092ae:	2280      	movs	r2, #128	; 0x80
 80092b0:	4b0d      	ldr	r3, [pc, #52]	; (80092e8 <ResetMacParameters+0xd8>)
 80092b2:	0052      	lsls	r2, r2, #1
 80092b4:	52e2      	strh	r2, [r4, r3]
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80092b6:	22f3      	movs	r2, #243	; 0xf3
 80092b8:	3302      	adds	r3, #2
 80092ba:	0092      	lsls	r2, r2, #2
 80092bc:	18e3      	adds	r3, r4, r3
 80092be:	18a2      	adds	r2, r4, r2
 80092c0:	ca23      	ldmia	r2!, {r0, r1, r5}
 80092c2:	c323      	stmia	r3!, {r0, r1, r5}
 80092c4:	ca03      	ldmia	r2!, {r0, r1}
 80092c6:	c303      	stmia	r3!, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80092c8:	4b08      	ldr	r3, [pc, #32]	; (80092ec <ResetMacParameters+0xdc>)
 80092ca:	4a09      	ldr	r2, [pc, #36]	; (80092f0 <ResetMacParameters+0xe0>)
 80092cc:	52e2      	strh	r2, [r4, r3]
}
 80092ce:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80092d0:	200006cc 	.word	0x200006cc
 80092d4:	00000484 	.word	0x00000484
 80092d8:	00010100 	.word	0x00010100
 80092dc:	00000414 	.word	0x00000414
 80092e0:	00000415 	.word	0x00000415
 80092e4:	000003dd 	.word	0x000003dd
 80092e8:	000003de 	.word	0x000003de
 80092ec:	000003f2 	.word	0x000003f2
 80092f0:	00000201 	.word	0x00000201

080092f4 <OnRadioRxTimeout>:
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 80092f4:	2301      	movs	r3, #1
 80092f6:	4a0b      	ldr	r2, [pc, #44]	; (8009324 <OnRadioRxTimeout+0x30>)
{
 80092f8:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 80092fa:	7811      	ldrb	r1, [r2, #0]
 80092fc:	430b      	orrs	r3, r1
 80092fe:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009300:	23d2      	movs	r3, #210	; 0xd2
 8009302:	4a09      	ldr	r2, [pc, #36]	; (8009328 <OnRadioRxTimeout+0x34>)
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	58d3      	ldr	r3, [r2, r3]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d003      	beq.n	8009314 <OnRadioRxTimeout+0x20>
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d000      	beq.n	8009314 <OnRadioRxTimeout+0x20>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009312:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8009314:	2201      	movs	r2, #1
 8009316:	2100      	movs	r1, #0
 8009318:	2002      	movs	r0, #2
 800931a:	4b04      	ldr	r3, [pc, #16]	; (800932c <OnRadioRxTimeout+0x38>)
 800931c:	f007 f918 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
}
 8009320:	bd10      	pop	{r4, pc}
 8009322:	46c0      	nop			; (mov r8, r8)
 8009324:	20000524 	.word	0x20000524
 8009328:	200006cc 	.word	0x200006cc
 800932c:	08011f66 	.word	0x08011f66

08009330 <OnRadioTxTimeout>:
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8009330:	2304      	movs	r3, #4
 8009332:	4a0b      	ldr	r2, [pc, #44]	; (8009360 <OnRadioTxTimeout+0x30>)
{
 8009334:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8009336:	7811      	ldrb	r1, [r2, #0]
 8009338:	430b      	orrs	r3, r1
 800933a:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800933c:	23d2      	movs	r3, #210	; 0xd2
 800933e:	4a09      	ldr	r2, [pc, #36]	; (8009364 <OnRadioTxTimeout+0x34>)
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	58d3      	ldr	r3, [r2, r3]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d003      	beq.n	8009350 <OnRadioTxTimeout+0x20>
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d000      	beq.n	8009350 <OnRadioTxTimeout+0x20>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800934e:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8009350:	2201      	movs	r2, #1
 8009352:	2100      	movs	r1, #0
 8009354:	2002      	movs	r0, #2
 8009356:	4b04      	ldr	r3, [pc, #16]	; (8009368 <OnRadioTxTimeout+0x38>)
 8009358:	f007 f8fa 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
}
 800935c:	bd10      	pop	{r4, pc}
 800935e:	46c0      	nop			; (mov r8, r8)
 8009360:	20000524 	.word	0x20000524
 8009364:	200006cc 	.word	0x200006cc
 8009368:	08011f76 	.word	0x08011f76

0800936c <OnRadioRxDone>:
{
 800936c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936e:	000e      	movs	r6, r1
 8009370:	0015      	movs	r5, r2
 8009372:	001c      	movs	r4, r3
 8009374:	0007      	movs	r7, r0
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8009376:	f007 fbcf 	bl	8010b18 <UTIL_TIMER_GetCurrentTime>
 800937a:	4b0e      	ldr	r3, [pc, #56]	; (80093b4 <OnRadioRxDone+0x48>)
    LoRaMacRadioEvents.Events.RxDone = 1;
 800937c:	4a0e      	ldr	r2, [pc, #56]	; (80093b8 <OnRadioRxDone+0x4c>)
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800937e:	6018      	str	r0, [r3, #0]
    RxDoneParams.Payload = payload;
 8009380:	605f      	str	r7, [r3, #4]
    RxDoneParams.Size = size;
 8009382:	811e      	strh	r6, [r3, #8]
    RxDoneParams.Rssi = rssi;
 8009384:	815d      	strh	r5, [r3, #10]
    RxDoneParams.Snr = snr;
 8009386:	731c      	strb	r4, [r3, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 8009388:	2308      	movs	r3, #8
 800938a:	7811      	ldrb	r1, [r2, #0]
 800938c:	430b      	orrs	r3, r1
 800938e:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009390:	23d2      	movs	r3, #210	; 0xd2
 8009392:	4a0a      	ldr	r2, [pc, #40]	; (80093bc <OnRadioRxDone+0x50>)
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	58d3      	ldr	r3, [r2, r3]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d003      	beq.n	80093a4 <OnRadioRxDone+0x38>
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d000      	beq.n	80093a4 <OnRadioRxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80093a2:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 80093a4:	2201      	movs	r2, #1
 80093a6:	2100      	movs	r1, #0
 80093a8:	4b05      	ldr	r3, [pc, #20]	; (80093c0 <OnRadioRxDone+0x54>)
 80093aa:	2002      	movs	r0, #2
 80093ac:	f007 f8d0 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
}
 80093b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093b2:	46c0      	nop			; (mov r8, r8)
 80093b4:	2000161c 	.word	0x2000161c
 80093b8:	20000524 	.word	0x20000524
 80093bc:	200006cc 	.word	0x200006cc
 80093c0:	08011f86 	.word	0x08011f86

080093c4 <OnRadioTxDone>:
{
 80093c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80093c6:	f007 fba7 	bl	8010b18 <UTIL_TIMER_GetCurrentTime>
    MacCtx.LastTxSysTime = SysTimeGet( );
 80093ca:	466c      	mov	r4, sp
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80093cc:	4b0f      	ldr	r3, [pc, #60]	; (800940c <OnRadioTxDone+0x48>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 80093ce:	4d10      	ldr	r5, [pc, #64]	; (8009410 <OnRadioTxDone+0x4c>)
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80093d0:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 80093d2:	0020      	movs	r0, r4
 80093d4:	f007 fae8 	bl	80109a8 <SysTimeGet>
 80093d8:	23ce      	movs	r3, #206	; 0xce
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	18eb      	adds	r3, r5, r3
 80093de:	cc06      	ldmia	r4!, {r1, r2}
 80093e0:	c306      	stmia	r3!, {r1, r2}
    LoRaMacRadioEvents.Events.TxDone = 1;
 80093e2:	2310      	movs	r3, #16
 80093e4:	4a0b      	ldr	r2, [pc, #44]	; (8009414 <OnRadioTxDone+0x50>)
 80093e6:	7811      	ldrb	r1, [r2, #0]
 80093e8:	430b      	orrs	r3, r1
 80093ea:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80093ec:	23d2      	movs	r3, #210	; 0xd2
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	58eb      	ldr	r3, [r5, r3]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d003      	beq.n	80093fe <OnRadioTxDone+0x3a>
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d000      	beq.n	80093fe <OnRadioTxDone+0x3a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80093fc:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 80093fe:	2201      	movs	r2, #1
 8009400:	2100      	movs	r1, #0
 8009402:	4b05      	ldr	r3, [pc, #20]	; (8009418 <OnRadioTxDone+0x54>)
 8009404:	2002      	movs	r0, #2
 8009406:	f007 f8a3 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
}
 800940a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800940c:	20001618 	.word	0x20001618
 8009410:	200006cc 	.word	0x200006cc
 8009414:	20000524 	.word	0x20000524
 8009418:	08011f93 	.word	0x08011f93

0800941c <ScheduleTx>:
{
 800941c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800941e:	b095      	sub	sp, #84	; 0x54
 8009420:	9003      	str	r0, [sp, #12]
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8009422:	f002 ff59 	bl	800c2d8 <LoRaMacClassBIsBeaconExpected>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8009426:	250e      	movs	r5, #14
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8009428:	2800      	cmp	r0, #0
 800942a:	d11b      	bne.n	8009464 <ScheduleTx+0x48>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800942c:	4ccf      	ldr	r4, [pc, #828]	; (800976c <ScheduleTx+0x350>)
 800942e:	4ed0      	ldr	r6, [pc, #832]	; (8009770 <ScheduleTx+0x354>)
 8009430:	59a3      	ldr	r3, [r4, r6]
 8009432:	337c      	adds	r3, #124	; 0x7c
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	2b01      	cmp	r3, #1
 8009438:	d00f      	beq.n	800945a <ScheduleTx+0x3e>
    if( MacCtx.NvmCtx->AggregatedTimeOff == 0 )
 800943a:	59a3      	ldr	r3, [r4, r6]
 800943c:	0019      	movs	r1, r3
 800943e:	31fc      	adds	r1, #252	; 0xfc
 8009440:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009442:	2a00      	cmp	r2, #0
 8009444:	d016      	beq.n	8009474 <ScheduleTx+0x58>
    switch( MacCtx.TxMsg.Type )
 8009446:	0025      	movs	r5, r4
 8009448:	35ff      	adds	r5, #255	; 0xff
 800944a:	796b      	ldrb	r3, [r5, #5]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d01b      	beq.n	8009488 <ScheduleTx+0x6c>
 8009450:	2b04      	cmp	r3, #4
 8009452:	d100      	bne.n	8009456 <ScheduleTx+0x3a>
 8009454:	e079      	b.n	800954a <ScheduleTx+0x12e>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8009456:	2503      	movs	r5, #3
 8009458:	e004      	b.n	8009464 <ScheduleTx+0x48>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800945a:	f002 ff4b 	bl	800c2f4 <LoRaMacClassBIsPingExpected>
 800945e:	2800      	cmp	r0, #0
 8009460:	d003      	beq.n	800946a <ScheduleTx+0x4e>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8009462:	250f      	movs	r5, #15
}
 8009464:	0028      	movs	r0, r5
 8009466:	b015      	add	sp, #84	; 0x54
 8009468:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800946a:	f002 ff4d 	bl	800c308 <LoRaMacClassBIsMulticastExpected>
 800946e:	2800      	cmp	r0, #0
 8009470:	d0e3      	beq.n	800943a <ScheduleTx+0x1e>
 8009472:	e7f6      	b.n	8009462 <ScheduleTx+0x46>
        MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 8009474:	22a6      	movs	r2, #166	; 0xa6
 8009476:	0052      	lsls	r2, r2, #1
 8009478:	5a9a      	ldrh	r2, [r3, r2]
 800947a:	2383      	movs	r3, #131	; 0x83
 800947c:	00db      	lsls	r3, r3, #3
 800947e:	58e3      	ldr	r3, [r4, r3]
 8009480:	3a01      	subs	r2, #1
 8009482:	4353      	muls	r3, r2
 8009484:	658b      	str	r3, [r1, #88]	; 0x58
 8009486:	e7de      	b.n	8009446 <ScheduleTx+0x2a>
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8009488:	48ba      	ldr	r0, [pc, #744]	; (8009774 <ScheduleTx+0x358>)
 800948a:	f004 fa98 	bl	800d9be <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800948e:	2800      	cmp	r0, #0
 8009490:	d000      	beq.n	8009494 <ScheduleTx+0x78>
 8009492:	e166      	b.n	8009762 <ScheduleTx+0x346>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8009494:	7b6b      	ldrb	r3, [r5, #13]
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8009496:	ad0e      	add	r5, sp, #56	; 0x38
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8009498:	8023      	strh	r3, [r4, #0]
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 800949a:	59a3      	ldr	r3, [r4, r6]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 800949c:	a808      	add	r0, sp, #32
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 800949e:	001a      	movs	r2, r3
 80094a0:	32fc      	adds	r2, #252	; 0xfc
 80094a2:	6d92      	ldr	r2, [r2, #88]	; 0x58
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 80094a4:	af04      	add	r7, sp, #16
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 80094a6:	920e      	str	r2, [sp, #56]	; 0x38
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80094a8:	001a      	movs	r2, r3
 80094aa:	3285      	adds	r2, #133	; 0x85
 80094ac:	7812      	ldrb	r2, [r2, #0]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 80094ae:	33c9      	adds	r3, #201	; 0xc9
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80094b0:	722a      	strb	r2, [r5, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	72ab      	strb	r3, [r5, #10]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 80094b6:	f007 faa3 	bl	8010a00 <SysTimeGetMcuTime>
 80094ba:	59a3      	ldr	r3, [r4, r6]
 80094bc:	9908      	ldr	r1, [sp, #32]
 80094be:	001a      	movs	r2, r3
 80094c0:	325d      	adds	r2, #93	; 0x5d
 80094c2:	32ff      	adds	r2, #255	; 0xff
 80094c4:	6812      	ldr	r2, [r2, #0]
 80094c6:	0038      	movs	r0, r7
 80094c8:	9200      	str	r2, [sp, #0]
 80094ca:	22ac      	movs	r2, #172	; 0xac
 80094cc:	0052      	lsls	r2, r2, #1
 80094ce:	589b      	ldr	r3, [r3, r2]
 80094d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094d2:	f007 fa2b 	bl	801092c <SysTimeSub>
 80094d6:	ab11      	add	r3, sp, #68	; 0x44
 80094d8:	cf06      	ldmia	r7!, {r1, r2}
 80094da:	c306      	stmia	r3!, {r1, r2}
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 80094dc:	59a3      	ldr	r3, [r4, r6]
    nextChan.Joined = true;
 80094de:	2101      	movs	r1, #1
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 80094e0:	001a      	movs	r2, r3
 80094e2:	32fc      	adds	r2, #252	; 0xfc
 80094e4:	6d52      	ldr	r2, [r2, #84]	; 0x54
    nextChan.Joined = true;
 80094e6:	7269      	strb	r1, [r5, #9]
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 80094e8:	606a      	str	r2, [r5, #4]
    nextChan.LastTxIsJoinRequest = false;
 80094ea:	2200      	movs	r2, #0
 80094ec:	752a      	strb	r2, [r5, #20]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80094ee:	8822      	ldrh	r2, [r4, #0]
 80094f0:	82ea      	strh	r2, [r5, #22]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80094f2:	22b2      	movs	r2, #178	; 0xb2
 80094f4:	0052      	lsls	r2, r2, #1
 80094f6:	5c9a      	ldrb	r2, [r3, r2]
 80094f8:	2a00      	cmp	r2, #0
 80094fa:	d101      	bne.n	8009500 <ScheduleTx+0xe4>
        nextChan.LastTxIsJoinRequest = true;
 80094fc:	7529      	strb	r1, [r5, #20]
        nextChan.Joined = false;
 80094fe:	726a      	strb	r2, [r5, #9]
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &MacCtx.NvmCtx->AggregatedTimeOff );
 8009500:	7818      	ldrb	r0, [r3, #0]
 8009502:	3355      	adds	r3, #85	; 0x55
 8009504:	33ff      	adds	r3, #255	; 0xff
 8009506:	0029      	movs	r1, r5
 8009508:	9300      	str	r3, [sp, #0]
 800950a:	4a9b      	ldr	r2, [pc, #620]	; (8009778 <ScheduleTx+0x35c>)
 800950c:	4b9b      	ldr	r3, [pc, #620]	; (800977c <ScheduleTx+0x360>)
 800950e:	f004 fba8 	bl	800dc62 <RegionNextChannel>
 8009512:	1e05      	subs	r5, r0, #0
    if( status != LORAMAC_STATUS_OK )
 8009514:	d01d      	beq.n	8009552 <ScheduleTx+0x136>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8009516:	280b      	cmp	r0, #11
 8009518:	d1a4      	bne.n	8009464 <ScheduleTx+0x48>
 800951a:	9b03      	ldr	r3, [sp, #12]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d0a1      	beq.n	8009464 <ScheduleTx+0x48>
            if( MacCtx.DutyCycleWaitTime != 0 )
 8009520:	2291      	movs	r2, #145	; 0x91
            return LORAMAC_STATUS_OK;
 8009522:	2500      	movs	r5, #0
            if( MacCtx.DutyCycleWaitTime != 0 )
 8009524:	4b91      	ldr	r3, [pc, #580]	; (800976c <ScheduleTx+0x350>)
 8009526:	00d2      	lsls	r2, r2, #3
 8009528:	5899      	ldr	r1, [r3, r2]
 800952a:	42a9      	cmp	r1, r5
 800952c:	d09a      	beq.n	8009464 <ScheduleTx+0x48>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800952e:	20d0      	movs	r0, #208	; 0xd0
 8009530:	2220      	movs	r2, #32
 8009532:	0080      	lsls	r0, r0, #2
 8009534:	581c      	ldr	r4, [r3, r0]
 8009536:	4322      	orrs	r2, r4
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8009538:	4c91      	ldr	r4, [pc, #580]	; (8009780 <ScheduleTx+0x364>)
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800953a:	501a      	str	r2, [r3, r0]
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800953c:	0020      	movs	r0, r4
 800953e:	f007 fbc5 	bl	8010ccc <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8009542:	0020      	movs	r0, r4
 8009544:	f007 fb80 	bl	8010c48 <UTIL_TIMER_Start>
 8009548:	e78c      	b.n	8009464 <ScheduleTx+0x48>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800954a:	488a      	ldr	r0, [pc, #552]	; (8009774 <ScheduleTx+0x358>)
 800954c:	f004 fa6c 	bl	800da28 <LoRaMacSerializerData>
 8009550:	e79d      	b.n	800948e <ScheduleTx+0x72>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009552:	59a1      	ldr	r1, [r4, r6]
                                                          MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 8009554:	000b      	movs	r3, r1
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8009556:	000a      	movs	r2, r1
                                                          MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 8009558:	33a5      	adds	r3, #165	; 0xa5
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 800955a:	3285      	adds	r2, #133	; 0x85
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800955c:	780f      	ldrb	r7, [r1, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	7812      	ldrb	r2, [r2, #0]
 8009562:	31b9      	adds	r1, #185	; 0xb9
 8009564:	0038      	movs	r0, r7
 8009566:	7809      	ldrb	r1, [r1, #0]
 8009568:	b25b      	sxtb	r3, r3
 800956a:	b252      	sxtb	r2, r2
 800956c:	f004 fb8e 	bl	800dc8c <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009570:	2288      	movs	r2, #136	; 0x88
 8009572:	4694      	mov	ip, r2
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8009574:	59a3      	ldr	r3, [r4, r6]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009576:	b241      	sxtb	r1, r0
 8009578:	449c      	add	ip, r3
 800957a:	338c      	adds	r3, #140	; 0x8c
 800957c:	781a      	ldrb	r2, [r3, #0]
 800957e:	4b81      	ldr	r3, [pc, #516]	; (8009784 <ScheduleTx+0x368>)
 8009580:	0038      	movs	r0, r7
 8009582:	9300      	str	r3, [sp, #0]
 8009584:	4663      	mov	r3, ip
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f004 fb03 	bl	800db92 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800958c:	59a3      	ldr	r3, [r4, r6]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 800958e:	0019      	movs	r1, r3
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009590:	001a      	movs	r2, r3
 8009592:	001f      	movs	r7, r3
 8009594:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 8009596:	31ac      	adds	r1, #172	; 0xac
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009598:	4b7b      	ldr	r3, [pc, #492]	; (8009788 <ScheduleTx+0x36c>)
 800959a:	7809      	ldrb	r1, [r1, #0]
 800959c:	328c      	adds	r2, #140	; 0x8c
 800959e:	7812      	ldrb	r2, [r2, #0]
 80095a0:	3788      	adds	r7, #136	; 0x88
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	b249      	sxtb	r1, r1
 80095a8:	f004 faf3 	bl	800db92 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80095ac:	22f1      	movs	r2, #241	; 0xf1
 80095ae:	0092      	lsls	r2, r2, #2
 80095b0:	59a3      	ldr	r3, [r4, r6]
 80095b2:	58a2      	ldr	r2, [r4, r2]
 80095b4:	27ec      	movs	r7, #236	; 0xec
 80095b6:	4694      	mov	ip, r2
 80095b8:	001a      	movs	r2, r3
 80095ba:	3294      	adds	r2, #148	; 0x94
 80095bc:	6812      	ldr	r2, [r2, #0]
 80095be:	00bf      	lsls	r7, r7, #2
 80095c0:	4462      	add	r2, ip
 80095c2:	51e2      	str	r2, [r4, r7]
    MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80095c4:	22f6      	movs	r2, #246	; 0xf6
 80095c6:	0092      	lsls	r2, r2, #2
 80095c8:	58a0      	ldr	r0, [r4, r2]
 80095ca:	001a      	movs	r2, r3
 80095cc:	21ed      	movs	r1, #237	; 0xed
 80095ce:	3298      	adds	r2, #152	; 0x98
 80095d0:	6812      	ldr	r2, [r2, #0]
 80095d2:	0089      	lsls	r1, r1, #2
 80095d4:	1812      	adds	r2, r2, r0
 80095d6:	5062      	str	r2, [r4, r1]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80095d8:	22b2      	movs	r2, #178	; 0xb2
 80095da:	0052      	lsls	r2, r2, #1
 80095dc:	5c9a      	ldrb	r2, [r3, r2]
 80095de:	9203      	str	r2, [sp, #12]
 80095e0:	2a00      	cmp	r2, #0
 80095e2:	d108      	bne.n	80095f6 <ScheduleTx+0x1da>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80095e4:	001a      	movs	r2, r3
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80095e6:	33a0      	adds	r3, #160	; 0xa0
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80095e8:	329c      	adds	r2, #156	; 0x9c
 80095ea:	6812      	ldr	r2, [r2, #0]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80095ec:	681b      	ldr	r3, [r3, #0]
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80095ee:	4462      	add	r2, ip
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80095f0:	1818      	adds	r0, r3, r0
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80095f2:	51e2      	str	r2, [r4, r7]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80095f4:	5060      	str	r0, [r4, r1]
    size_t macCmdsSize = 0;
 80095f6:	2300      	movs	r3, #0
 80095f8:	930a      	str	r3, [sp, #40]	; 0x28
    if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 80095fa:	9b03      	ldr	r3, [sp, #12]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d012      	beq.n	8009626 <ScheduleTx+0x20a>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009600:	a80a      	add	r0, sp, #40	; 0x28
 8009602:	f003 fca1 	bl	800cf48 <LoRaMacCommandsGetSizeSerializedCmds>
 8009606:	2800      	cmp	r0, #0
 8009608:	d155      	bne.n	80096b6 <ScheduleTx+0x29a>
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800960a:	2085      	movs	r0, #133	; 0x85
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 800960c:	4b57      	ldr	r3, [pc, #348]	; (800976c <ScheduleTx+0x350>)
 800960e:	4a5f      	ldr	r2, [pc, #380]	; (800978c <ScheduleTx+0x370>)
 8009610:	5c9c      	ldrb	r4, [r3, r2]
 8009612:	599b      	ldr	r3, [r3, r6]
 8009614:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8009616:	5618      	ldrsb	r0, [r3, r0]
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8009618:	b2d7      	uxtb	r7, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800961a:	f7ff fd19 	bl	8009050 <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800961e:	19e4      	adds	r4, r4, r7
 8009620:	b280      	uxth	r0, r0
 8009622:	42a0      	cmp	r0, r4
 8009624:	d345      	bcc.n	80096b2 <ScheduleTx+0x296>
    return SendFrameOnChannel( MacCtx.Channel );
 8009626:	4c51      	ldr	r4, [pc, #324]	; (800976c <ScheduleTx+0x350>)
 8009628:	4b59      	ldr	r3, [pc, #356]	; (8009790 <ScheduleTx+0x374>)
    int8_t txPower = 0;
 800962a:	aa02      	add	r2, sp, #8
    return SendFrameOnChannel( MacCtx.Channel );
 800962c:	5ce7      	ldrb	r7, [r4, r3]
    int8_t txPower = 0;
 800962e:	2300      	movs	r3, #0
 8009630:	74d3      	strb	r3, [r2, #19]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009632:	59a3      	ldr	r3, [r4, r6]
    txConfig.Channel = channel;
 8009634:	a90a      	add	r1, sp, #40	; 0x28
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009636:	001a      	movs	r2, r3
    txConfig.Channel = channel;
 8009638:	700f      	strb	r7, [r1, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800963a:	3285      	adds	r2, #133	; 0x85
 800963c:	7812      	ldrb	r2, [r2, #0]
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800963e:	a802      	add	r0, sp, #8
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009640:	704a      	strb	r2, [r1, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8009642:	001a      	movs	r2, r3
 8009644:	3284      	adds	r2, #132	; 0x84
 8009646:	7812      	ldrb	r2, [r2, #0]
 8009648:	708a      	strb	r2, [r1, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800964a:	001a      	movs	r2, r3
 800964c:	32bc      	adds	r2, #188	; 0xbc
 800964e:	6812      	ldr	r2, [r2, #0]
 8009650:	604a      	str	r2, [r1, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8009652:	001a      	movs	r2, r3
 8009654:	32c0      	adds	r2, #192	; 0xc0
 8009656:	6812      	ldr	r2, [r2, #0]
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8009658:	781b      	ldrb	r3, [r3, #0]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800965a:	608a      	str	r2, [r1, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800965c:	8822      	ldrh	r2, [r4, #0]
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800965e:	469c      	mov	ip, r3
    txConfig.PktLen = MacCtx.PktBufferLen;
 8009660:	818a      	strh	r2, [r1, #12]
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8009662:	2213      	movs	r2, #19
 8009664:	4b4b      	ldr	r3, [pc, #300]	; (8009794 <ScheduleTx+0x378>)
 8009666:	1812      	adds	r2, r2, r0
 8009668:	4660      	mov	r0, ip
 800966a:	f004 faa9 	bl	800dbc0 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800966e:	2201      	movs	r2, #1
 8009670:	4b49      	ldr	r3, [pc, #292]	; (8009798 <ScheduleTx+0x37c>)
 8009672:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009674:	59a3      	ldr	r3, [r4, r6]
 8009676:	3385      	adds	r3, #133	; 0x85
 8009678:	781a      	ldrb	r2, [r3, #0]
 800967a:	4b48      	ldr	r3, [pc, #288]	; (800979c <ScheduleTx+0x380>)
 800967c:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.TxPower = txPower;
 800967e:	ab02      	add	r3, sp, #8
 8009680:	7cda      	ldrb	r2, [r3, #19]
 8009682:	4b47      	ldr	r3, [pc, #284]	; (80097a0 <ScheduleTx+0x384>)
 8009684:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Channel = channel;
 8009686:	4b47      	ldr	r3, [pc, #284]	; (80097a4 <ScheduleTx+0x388>)
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8009688:	4a47      	ldr	r2, [pc, #284]	; (80097a8 <ScheduleTx+0x38c>)
    MacCtx.McpsConfirm.Channel = channel;
 800968a:	50e7      	str	r7, [r4, r3]
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800968c:	2783      	movs	r7, #131	; 0x83
 800968e:	00ff      	lsls	r7, r7, #3
 8009690:	59e3      	ldr	r3, [r4, r7]
 8009692:	50a3      	str	r3, [r4, r2]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8009694:	4a45      	ldr	r2, [pc, #276]	; (80097ac <ScheduleTx+0x390>)
 8009696:	50a3      	str	r3, [r4, r2]
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8009698:	f002 fe78 	bl	800c38c <LoRaMacClassBIsBeaconModeActive>
 800969c:	4b3c      	ldr	r3, [pc, #240]	; (8009790 <ScheduleTx+0x374>)
 800969e:	9303      	str	r3, [sp, #12]
 80096a0:	2800      	cmp	r0, #0
 80096a2:	d00a      	beq.n	80096ba <ScheduleTx+0x29e>
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80096a4:	59e0      	ldr	r0, [r4, r7]
 80096a6:	f002 ffdd 	bl	800c664 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 80096aa:	2800      	cmp	r0, #0
 80096ac:	d005      	beq.n	80096ba <ScheduleTx+0x29e>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80096ae:	2510      	movs	r5, #16
    return SendFrameOnChannel( MacCtx.Channel );
 80096b0:	e6d8      	b.n	8009464 <ScheduleTx+0x48>
            return LORAMAC_STATUS_LENGTH_ERROR;
 80096b2:	2508      	movs	r5, #8
 80096b4:	e6d6      	b.n	8009464 <ScheduleTx+0x48>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80096b6:	2513      	movs	r5, #19
 80096b8:	e6d4      	b.n	8009464 <ScheduleTx+0x48>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 80096ba:	59a3      	ldr	r3, [r4, r6]
 80096bc:	337c      	adds	r3, #124	; 0x7c
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d101      	bne.n	80096c8 <ScheduleTx+0x2ac>
        LoRaMacClassBStopRxSlots( );
 80096c4:	f002 fff6 	bl	800c6b4 <LoRaMacClassBStopRxSlots>
    LoRaMacClassBHaltBeaconing( );
 80096c8:	f003 f80c 	bl	800c6e4 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 80096cc:	59a3      	ldr	r3, [r4, r6]
    switch( MacCtx.TxMsg.Type )
 80096ce:	0026      	movs	r6, r4
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 80096d0:	3385      	adds	r3, #133	; 0x85
 80096d2:	781b      	ldrb	r3, [r3, #0]
    switch( MacCtx.TxMsg.Type )
 80096d4:	36ff      	adds	r6, #255	; 0xff
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 80096d6:	b25b      	sxtb	r3, r3
 80096d8:	9303      	str	r3, [sp, #12]
 80096da:	4b2d      	ldr	r3, [pc, #180]	; (8009790 <ScheduleTx+0x374>)
 80096dc:	5ce7      	ldrb	r7, [r4, r3]
    uint32_t fCntUp = 0;
 80096de:	2300      	movs	r3, #0
 80096e0:	9307      	str	r3, [sp, #28]
    switch( MacCtx.TxMsg.Type )
 80096e2:	7973      	ldrb	r3, [r6, #5]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d020      	beq.n	800972a <ScheduleTx+0x30e>
 80096e8:	2b04      	cmp	r3, #4
 80096ea:	d000      	beq.n	80096ee <ScheduleTx+0x2d2>
 80096ec:	e6b3      	b.n	8009456 <ScheduleTx+0x3a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80096ee:	a807      	add	r0, sp, #28
 80096f0:	f003 fed8 	bl	800d4a4 <LoRaMacCryptoGetFCntUp>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	d136      	bne.n	8009766 <ScheduleTx+0x34a>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 80096f8:	2382      	movs	r3, #130	; 0x82
 80096fa:	00db      	lsls	r3, r3, #3
 80096fc:	5ce3      	ldrb	r3, [r4, r3]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d103      	bne.n	800970a <ScheduleTx+0x2ee>
 8009702:	4b2b      	ldr	r3, [pc, #172]	; (80097b0 <ScheduleTx+0x394>)
 8009704:	5ce3      	ldrb	r3, [r4, r3]
 8009706:	2b01      	cmp	r3, #1
 8009708:	d902      	bls.n	8009710 <ScheduleTx+0x2f4>
                fCntUp -= 1;
 800970a:	9b07      	ldr	r3, [sp, #28]
 800970c:	3b01      	subs	r3, #1
 800970e:	9307      	str	r3, [sp, #28]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8009710:	466b      	mov	r3, sp
 8009712:	003a      	movs	r2, r7
 8009714:	7b19      	ldrb	r1, [r3, #12]
 8009716:	9807      	ldr	r0, [sp, #28]
 8009718:	4b16      	ldr	r3, [pc, #88]	; (8009774 <ScheduleTx+0x358>)
 800971a:	f003 ff4b 	bl	800d5b4 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800971e:	2800      	cmp	r0, #0
 8009720:	d11f      	bne.n	8009762 <ScheduleTx+0x346>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8009722:	0023      	movs	r3, r4
 8009724:	33ff      	adds	r3, #255	; 0xff
 8009726:	7b5b      	ldrb	r3, [r3, #13]
 8009728:	e005      	b.n	8009736 <ScheduleTx+0x31a>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800972a:	4812      	ldr	r0, [pc, #72]	; (8009774 <ScheduleTx+0x358>)
 800972c:	f003 ff12 	bl	800d554 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8009730:	2800      	cmp	r0, #0
 8009732:	d116      	bne.n	8009762 <ScheduleTx+0x346>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8009734:	7b73      	ldrb	r3, [r6, #13]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009736:	22d0      	movs	r2, #208	; 0xd0
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8009738:	8023      	strh	r3, [r4, #0]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800973a:	2302      	movs	r3, #2
 800973c:	0092      	lsls	r2, r2, #2
 800973e:	58a1      	ldr	r1, [r4, r2]
 8009740:	430b      	orrs	r3, r1
 8009742:	50a3      	str	r3, [r4, r2]
    if( MacCtx.NodeAckRequested == false )
 8009744:	4b1b      	ldr	r3, [pc, #108]	; (80097b4 <ScheduleTx+0x398>)
 8009746:	5ce3      	ldrb	r3, [r4, r3]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d103      	bne.n	8009754 <ScheduleTx+0x338>
        MacCtx.ChannelsNbTransCounter++;
 800974c:	32d0      	adds	r2, #208	; 0xd0
 800974e:	5ca3      	ldrb	r3, [r4, r2]
 8009750:	3301      	adds	r3, #1
 8009752:	54a3      	strb	r3, [r4, r2]
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8009754:	4b18      	ldr	r3, [pc, #96]	; (80097b8 <ScheduleTx+0x39c>)
 8009756:	7821      	ldrb	r1, [r4, #0]
 8009758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800975a:	4818      	ldr	r0, [pc, #96]	; (80097bc <ScheduleTx+0x3a0>)
 800975c:	9303      	str	r3, [sp, #12]
 800975e:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 8009760:	e680      	b.n	8009464 <ScheduleTx+0x48>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8009762:	2511      	movs	r5, #17
 8009764:	e67e      	b.n	8009464 <ScheduleTx+0x48>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8009766:	2512      	movs	r5, #18
 8009768:	e67c      	b.n	8009464 <ScheduleTx+0x48>
 800976a:	46c0      	nop			; (mov r8, r8)
 800976c:	200006cc 	.word	0x200006cc
 8009770:	00000484 	.word	0x00000484
 8009774:	200007d4 	.word	0x200007d4
 8009778:	20000ae1 	.word	0x20000ae1
 800977c:	20000b54 	.word	0x20000b54
 8009780:	20000a34 	.word	0x20000a34
 8009784:	20000a84 	.word	0x20000a84
 8009788:	20000a98 	.word	0x20000a98
 800978c:	00000237 	.word	0x00000237
 8009790:	00000415 	.word	0x00000415
 8009794:	20000ae4 	.word	0x20000ae4
 8009798:	0000043d 	.word	0x0000043d
 800979c:	0000043e 	.word	0x0000043e
 80097a0:	0000043f 	.word	0x0000043f
 80097a4:	0000044c 	.word	0x0000044c
 80097a8:	00000444 	.word	0x00000444
 80097ac:	00000454 	.word	0x00000454
 80097b0:	00000412 	.word	0x00000412
 80097b4:	00000414 	.word	0x00000414
 80097b8:	080117e0 	.word	0x080117e0
 80097bc:	200006ce 	.word	0x200006ce

080097c0 <OnTxDelayedTimerEvent>:
{
 80097c0:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 80097c2:	4811      	ldr	r0, [pc, #68]	; (8009808 <OnTxDelayedTimerEvent+0x48>)
 80097c4:	f007 f9ec 	bl	8010ba0 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80097c8:	22d0      	movs	r2, #208	; 0xd0
 80097ca:	2320      	movs	r3, #32
 80097cc:	4c0f      	ldr	r4, [pc, #60]	; (800980c <OnTxDelayedTimerEvent+0x4c>)
 80097ce:	0092      	lsls	r2, r2, #2
 80097d0:	58a1      	ldr	r1, [r4, r2]
    switch( ScheduleTx( true ) )
 80097d2:	2001      	movs	r0, #1
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80097d4:	4399      	bics	r1, r3
 80097d6:	50a1      	str	r1, [r4, r2]
    switch( ScheduleTx( true ) )
 80097d8:	f7ff fe20 	bl	800941c <ScheduleTx>
 80097dc:	2800      	cmp	r0, #0
 80097de:	d012      	beq.n	8009806 <OnTxDelayedTimerEvent+0x46>
 80097e0:	280b      	cmp	r0, #11
 80097e2:	d010      	beq.n	8009806 <OnTxDelayedTimerEvent+0x46>
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80097e4:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80097e6:	4b0a      	ldr	r3, [pc, #40]	; (8009810 <OnTxDelayedTimerEvent+0x50>)
 80097e8:	58e3      	ldr	r3, [r4, r3]
 80097ea:	3385      	adds	r3, #133	; 0x85
 80097ec:	781a      	ldrb	r2, [r3, #0]
 80097ee:	4b09      	ldr	r3, [pc, #36]	; (8009814 <OnTxDelayedTimerEvent+0x54>)
 80097f0:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80097f2:	4b09      	ldr	r3, [pc, #36]	; (8009818 <OnTxDelayedTimerEvent+0x58>)
 80097f4:	5ce2      	ldrb	r2, [r4, r3]
 80097f6:	4b09      	ldr	r3, [pc, #36]	; (800981c <OnTxDelayedTimerEvent+0x5c>)
 80097f8:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80097fa:	4b09      	ldr	r3, [pc, #36]	; (8009820 <OnTxDelayedTimerEvent+0x60>)
 80097fc:	54e0      	strb	r0, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 80097fe:	f003 fca7 	bl	800d150 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8009802:	f7ff fbc3 	bl	8008f8c <StopRetransmission>
}
 8009806:	bd10      	pop	{r4, pc}
 8009808:	20000a34 	.word	0x20000a34
 800980c:	200006cc 	.word	0x200006cc
 8009810:	00000484 	.word	0x00000484
 8009814:	0000043e 	.word	0x0000043e
 8009818:	00000412 	.word	0x00000412
 800981c:	00000441 	.word	0x00000441
 8009820:	0000043d 	.word	0x0000043d

08009824 <OpenContinuousRxCWindow>:
{
 8009824:	b5f0      	push	{r4, r5, r6, r7, lr}
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009826:	4c14      	ldr	r4, [pc, #80]	; (8009878 <OpenContinuousRxCWindow+0x54>)
 8009828:	4e14      	ldr	r6, [pc, #80]	; (800987c <OpenContinuousRxCWindow+0x58>)
 800982a:	4d15      	ldr	r5, [pc, #84]	; (8009880 <OpenContinuousRxCWindow+0x5c>)
 800982c:	59a3      	ldr	r3, [r4, r6]
{
 800982e:	b085      	sub	sp, #20
                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 8009830:	0019      	movs	r1, r3
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009832:	001a      	movs	r2, r3
 8009834:	001f      	movs	r7, r3
                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 8009836:	31b4      	adds	r1, #180	; 0xb4
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009838:	7809      	ldrb	r1, [r1, #0]
 800983a:	328c      	adds	r2, #140	; 0x8c
 800983c:	7818      	ldrb	r0, [r3, #0]
 800983e:	7812      	ldrb	r2, [r2, #0]
 8009840:	3788      	adds	r7, #136	; 0x88
 8009842:	9500      	str	r5, [sp, #0]
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	b249      	sxtb	r1, r1
 8009848:	f004 f9a3 	bl	800db92 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800984c:	4b0d      	ldr	r3, [pc, #52]	; (8009884 <OpenContinuousRxCWindow+0x60>)
 800984e:	4a0e      	ldr	r2, [pc, #56]	; (8009888 <OpenContinuousRxCWindow+0x64>)
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8009850:	0029      	movs	r1, r5
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009852:	52e2      	strh	r2, [r4, r3]
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8009854:	59a3      	ldr	r3, [r4, r6]
 8009856:	4a0d      	ldr	r2, [pc, #52]	; (800988c <OpenContinuousRxCWindow+0x68>)
 8009858:	7818      	ldrb	r0, [r3, #0]
 800985a:	f004 f9a5 	bl	800dba8 <RegionRxConfig>
 800985e:	2800      	cmp	r0, #0
 8009860:	d008      	beq.n	8009874 <OpenContinuousRxCWindow+0x50>
        Radio.Rx( 0 ); // Continuous mode
 8009862:	4b0b      	ldr	r3, [pc, #44]	; (8009890 <OpenContinuousRxCWindow+0x6c>)
 8009864:	2000      	movs	r0, #0
 8009866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009868:	9303      	str	r3, [sp, #12]
 800986a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800986c:	4b09      	ldr	r3, [pc, #36]	; (8009894 <OpenContinuousRxCWindow+0x70>)
 800986e:	5ce2      	ldrb	r2, [r4, r3]
 8009870:	338d      	adds	r3, #141	; 0x8d
 8009872:	54e2      	strb	r2, [r4, r3]
}
 8009874:	b005      	add	sp, #20
 8009876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009878:	200006cc 	.word	0x200006cc
 800987c:	00000484 	.word	0x00000484
 8009880:	20000aac 	.word	0x20000aac
 8009884:	000003f2 	.word	0x000003f2
 8009888:	00000201 	.word	0x00000201
 800988c:	20000aec 	.word	0x20000aec
 8009890:	080117e0 	.word	0x080117e0
 8009894:	000003f3 	.word	0x000003f3

08009898 <SwitchClass>:
{
 8009898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch( MacCtx.NvmCtx->DeviceClass )
 800989a:	4e34      	ldr	r6, [pc, #208]	; (800996c <SwitchClass+0xd4>)
 800989c:	4f34      	ldr	r7, [pc, #208]	; (8009970 <SwitchClass+0xd8>)
{
 800989e:	0005      	movs	r5, r0
    switch( MacCtx.NvmCtx->DeviceClass )
 80098a0:	59f3      	ldr	r3, [r6, r7]
 80098a2:	001a      	movs	r2, r3
 80098a4:	327c      	adds	r2, #124	; 0x7c
 80098a6:	7814      	ldrb	r4, [r2, #0]
 80098a8:	469c      	mov	ip, r3
 80098aa:	2c01      	cmp	r4, #1
 80098ac:	d04a      	beq.n	8009944 <SwitchClass+0xac>
 80098ae:	2c02      	cmp	r4, #2
 80098b0:	d051      	beq.n	8009956 <SwitchClass+0xbe>
 80098b2:	2c00      	cmp	r4, #0
 80098b4:	d10c      	bne.n	80098d0 <SwitchClass+0x38>
            if( deviceClass == CLASS_A )
 80098b6:	2800      	cmp	r0, #0
 80098b8:	d106      	bne.n	80098c8 <SwitchClass+0x30>
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 80098ba:	3234      	adds	r2, #52	; 0x34
 80098bc:	33a8      	adds	r3, #168	; 0xa8
 80098be:	cb03      	ldmia	r3!, {r0, r1}
 80098c0:	c203      	stmia	r2!, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80098c2:	3403      	adds	r4, #3
}
 80098c4:	0020      	movs	r0, r4
 80098c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_B )
 80098c8:	2801      	cmp	r0, #1
 80098ca:	d03b      	beq.n	8009944 <SwitchClass+0xac>
            if( deviceClass == CLASS_C )
 80098cc:	2802      	cmp	r0, #2
 80098ce:	d001      	beq.n	80098d4 <SwitchClass+0x3c>
    switch( MacCtx.NvmCtx->DeviceClass )
 80098d0:	2403      	movs	r4, #3
 80098d2:	e7f7      	b.n	80098c4 <SwitchClass+0x2c>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 80098d4:	7010      	strb	r0, [r2, #0]
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80098d6:	21f3      	movs	r1, #243	; 0xf3
 80098d8:	22f8      	movs	r2, #248	; 0xf8
 80098da:	0089      	lsls	r1, r1, #2
 80098dc:	0092      	lsls	r2, r2, #2
 80098de:	18b2      	adds	r2, r6, r2
 80098e0:	1871      	adds	r1, r6, r1
 80098e2:	c989      	ldmia	r1!, {r0, r3, r7}
 80098e4:	c289      	stmia	r2!, {r0, r3, r7}
 80098e6:	c909      	ldmia	r1!, {r0, r3}
 80098e8:	c209      	stmia	r2!, {r0, r3}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80098ea:	4a22      	ldr	r2, [pc, #136]	; (8009974 <SwitchClass+0xdc>)
 80098ec:	54b5      	strb	r5, [r6, r2]
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 80098ee:	4662      	mov	r2, ip
 80098f0:	3252      	adds	r2, #82	; 0x52
 80098f2:	7812      	ldrb	r2, [r2, #0]
 80098f4:	2a00      	cmp	r2, #0
 80098f6:	d01b      	beq.n	8009930 <SwitchClass+0x98>
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 80098f8:	4663      	mov	r3, ip
 80098fa:	4661      	mov	r1, ip
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 80098fc:	4660      	mov	r0, ip
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 80098fe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009900:	31b0      	adds	r1, #176	; 0xb0
 8009902:	600a      	str	r2, [r1, #0]
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8009904:	306c      	adds	r0, #108	; 0x6c
 8009906:	7800      	ldrb	r0, [r0, #0]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8009908:	33ca      	adds	r3, #202	; 0xca
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800990a:	7108      	strb	r0, [r1, #4]
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800990c:	491a      	ldr	r1, [pc, #104]	; (8009978 <SwitchClass+0xe0>)
 800990e:	5c70      	ldrb	r0, [r6, r1]
 8009910:	3935      	subs	r1, #53	; 0x35
 8009912:	5470      	strb	r0, [r6, r1]
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 8009914:	3104      	adds	r1, #4
 8009916:	5072      	str	r2, [r6, r1]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009918:	4662      	mov	r2, ip
 800991a:	32b9      	adds	r2, #185	; 0xb9
 800991c:	7811      	ldrb	r1, [r2, #0]
 800991e:	22fc      	movs	r2, #252	; 0xfc
 8009920:	0092      	lsls	r2, r2, #2
 8009922:	54b1      	strb	r1, [r6, r2]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8009924:	781a      	ldrb	r2, [r3, #0]
 8009926:	4b15      	ldr	r3, [pc, #84]	; (800997c <SwitchClass+0xe4>)
 8009928:	54f2      	strb	r2, [r6, r3]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800992a:	4b15      	ldr	r3, [pc, #84]	; (8009980 <SwitchClass+0xe8>)
 800992c:	4a15      	ldr	r2, [pc, #84]	; (8009984 <SwitchClass+0xec>)
 800992e:	52f2      	strh	r2, [r6, r3]
                MacCtx.NodeAckRequested = false;
 8009930:	2200      	movs	r2, #0
 8009932:	4b15      	ldr	r3, [pc, #84]	; (8009988 <SwitchClass+0xf0>)
 8009934:	54f2      	strb	r2, [r6, r3]
                Radio.Sleep( );
 8009936:	4b15      	ldr	r3, [pc, #84]	; (800998c <SwitchClass+0xf4>)
 8009938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800993a:	9301      	str	r3, [sp, #4]
 800993c:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800993e:	f7ff ff71 	bl	8009824 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 8009942:	e7bf      	b.n	80098c4 <SwitchClass+0x2c>
            status = LoRaMacClassBSwitchClass( deviceClass );
 8009944:	0028      	movs	r0, r5
 8009946:	f002 fef9 	bl	800c73c <LoRaMacClassBSwitchClass>
 800994a:	1e04      	subs	r4, r0, #0
            if( status == LORAMAC_STATUS_OK )
 800994c:	d1ba      	bne.n	80098c4 <SwitchClass+0x2c>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800994e:	59f3      	ldr	r3, [r6, r7]
 8009950:	337c      	adds	r3, #124	; 0x7c
 8009952:	701d      	strb	r5, [r3, #0]
 8009954:	e7b6      	b.n	80098c4 <SwitchClass+0x2c>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009956:	2403      	movs	r4, #3
            if( deviceClass == CLASS_A )
 8009958:	2800      	cmp	r0, #0
 800995a:	d1b3      	bne.n	80098c4 <SwitchClass+0x2c>
                Radio.Sleep( );
 800995c:	4b0b      	ldr	r3, [pc, #44]	; (800998c <SwitchClass+0xf4>)
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800995e:	7010      	strb	r0, [r2, #0]
                Radio.Sleep( );
 8009960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                status = LORAMAC_STATUS_OK;
 8009962:	002c      	movs	r4, r5
                Radio.Sleep( );
 8009964:	9301      	str	r3, [sp, #4]
 8009966:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8009968:	e7ac      	b.n	80098c4 <SwitchClass+0x2c>
 800996a:	46c0      	nop			; (mov r8, r8)
 800996c:	200006cc 	.word	0x200006cc
 8009970:	00000484 	.word	0x00000484
 8009974:	000003f3 	.word	0x000003f3
 8009978:	00000415 	.word	0x00000415
 800997c:	000003f1 	.word	0x000003f1
 8009980:	000003f2 	.word	0x000003f2
 8009984:	00000301 	.word	0x00000301
 8009988:	00000414 	.word	0x00000414
 800998c:	080117e0 	.word	0x080117e0

08009990 <RxWindowSetup.constprop.0>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 8009990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009992:	000c      	movs	r4, r1
    TimerStop( rxTimer );
 8009994:	f007 f904 	bl	8010ba0 <UTIL_TIMER_Stop>
    Radio.Standby( );
 8009998:	4e0c      	ldr	r6, [pc, #48]	; (80099cc <RxWindowSetup.constprop.0+0x3c>)
    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800999a:	4f0d      	ldr	r7, [pc, #52]	; (80099d0 <RxWindowSetup.constprop.0+0x40>)
    Radio.Standby( );
 800999c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800999e:	9301      	str	r3, [sp, #4]
 80099a0:	4798      	blx	r3
    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80099a2:	4d0c      	ldr	r5, [pc, #48]	; (80099d4 <RxWindowSetup.constprop.0+0x44>)
 80099a4:	0021      	movs	r1, r4
 80099a6:	59eb      	ldr	r3, [r5, r7]
 80099a8:	4a0b      	ldr	r2, [pc, #44]	; (80099d8 <RxWindowSetup.constprop.0+0x48>)
 80099aa:	7818      	ldrb	r0, [r3, #0]
 80099ac:	f004 f8fc 	bl	800dba8 <RegionRxConfig>
 80099b0:	2800      	cmp	r0, #0
 80099b2:	d009      	beq.n	80099c8 <RxWindowSetup.constprop.0+0x38>
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 80099b4:	59eb      	ldr	r3, [r5, r7]
 80099b6:	6b72      	ldr	r2, [r6, #52]	; 0x34
 80099b8:	3390      	adds	r3, #144	; 0x90
 80099ba:	6818      	ldr	r0, [r3, #0]
 80099bc:	9201      	str	r2, [sp, #4]
 80099be:	4790      	blx	r2
        MacCtx.RxSlot = rxConfig->RxSlot;
 80099c0:	2390      	movs	r3, #144	; 0x90
 80099c2:	7ce2      	ldrb	r2, [r4, #19]
 80099c4:	00db      	lsls	r3, r3, #3
 80099c6:	54ea      	strb	r2, [r5, r3]
}
 80099c8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80099ca:	46c0      	nop			; (mov r8, r8)
 80099cc:	080117e0 	.word	0x080117e0
 80099d0:	00000484 	.word	0x00000484
 80099d4:	200006cc 	.word	0x200006cc
 80099d8:	20000aec 	.word	0x20000aec

080099dc <OnRxWindow1TimerEvent>:
{
 80099dc:	b510      	push	{r4, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80099de:	4b0f      	ldr	r3, [pc, #60]	; (8009a1c <OnRxWindow1TimerEvent+0x40>)
 80099e0:	4a0f      	ldr	r2, [pc, #60]	; (8009a20 <OnRxWindow1TimerEvent+0x44>)
 80099e2:	5c99      	ldrb	r1, [r3, r2]
 80099e4:	3a5d      	subs	r2, #93	; 0x5d
 80099e6:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 80099e8:	4a0e      	ldr	r2, [pc, #56]	; (8009a24 <OnRxWindow1TimerEvent+0x48>)
 80099ea:	589a      	ldr	r2, [r3, r2]
 80099ec:	0011      	movs	r1, r2
 80099ee:	31a5      	adds	r1, #165	; 0xa5
 80099f0:	7808      	ldrb	r0, [r1, #0]
 80099f2:	490d      	ldr	r1, [pc, #52]	; (8009a28 <OnRxWindow1TimerEvent+0x4c>)
 80099f4:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80099f6:	0011      	movs	r1, r2
 80099f8:	31b9      	adds	r1, #185	; 0xb9
 80099fa:	7808      	ldrb	r0, [r1, #0]
 80099fc:	21f2      	movs	r1, #242	; 0xf2
 80099fe:	0089      	lsls	r1, r1, #2
 8009a00:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8009a02:	32ca      	adds	r2, #202	; 0xca
 8009a04:	7811      	ldrb	r1, [r2, #0]
 8009a06:	4a09      	ldr	r2, [pc, #36]	; (8009a2c <OnRxWindow1TimerEvent+0x50>)
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8009a08:	4809      	ldr	r0, [pc, #36]	; (8009a30 <OnRxWindow1TimerEvent+0x54>)
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8009a0a:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 8009a0c:	2100      	movs	r1, #0
 8009a0e:	4a09      	ldr	r2, [pc, #36]	; (8009a34 <OnRxWindow1TimerEvent+0x58>)
 8009a10:	5299      	strh	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8009a12:	4909      	ldr	r1, [pc, #36]	; (8009a38 <OnRxWindow1TimerEvent+0x5c>)
 8009a14:	f7ff ffbc 	bl	8009990 <RxWindowSetup.constprop.0>
}
 8009a18:	bd10      	pop	{r4, pc}
 8009a1a:	46c0      	nop			; (mov r8, r8)
 8009a1c:	200006cc 	.word	0x200006cc
 8009a20:	00000415 	.word	0x00000415
 8009a24:	00000484 	.word	0x00000484
 8009a28:	000003bb 	.word	0x000003bb
 8009a2c:	000003c9 	.word	0x000003c9
 8009a30:	20000a4c 	.word	0x20000a4c
 8009a34:	000003ca 	.word	0x000003ca
 8009a38:	20000a84 	.word	0x20000a84

08009a3c <OnRxWindow2TimerEvent>:
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8009a3c:	2290      	movs	r2, #144	; 0x90
{
 8009a3e:	b510      	push	{r4, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8009a40:	4b11      	ldr	r3, [pc, #68]	; (8009a88 <OnRxWindow2TimerEvent+0x4c>)
 8009a42:	00d2      	lsls	r2, r2, #3
 8009a44:	5c9a      	ldrb	r2, [r3, r2]
 8009a46:	2a00      	cmp	r2, #0
 8009a48:	d01d      	beq.n	8009a86 <OnRxWindow2TimerEvent+0x4a>
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009a4a:	4a10      	ldr	r2, [pc, #64]	; (8009a8c <OnRxWindow2TimerEvent+0x50>)
 8009a4c:	5c99      	ldrb	r1, [r3, r2]
 8009a4e:	3a49      	subs	r2, #73	; 0x49
 8009a50:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 8009a52:	4a0f      	ldr	r2, [pc, #60]	; (8009a90 <OnRxWindow2TimerEvent+0x54>)
 8009a54:	589a      	ldr	r2, [r3, r2]
 8009a56:	0011      	movs	r1, r2
 8009a58:	31a8      	adds	r1, #168	; 0xa8
 8009a5a:	6808      	ldr	r0, [r1, #0]
 8009a5c:	21f4      	movs	r1, #244	; 0xf4
 8009a5e:	0089      	lsls	r1, r1, #2
 8009a60:	5058      	str	r0, [r3, r1]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009a62:	0011      	movs	r1, r2
 8009a64:	31b9      	adds	r1, #185	; 0xb9
 8009a66:	7808      	ldrb	r0, [r1, #0]
 8009a68:	21f7      	movs	r1, #247	; 0xf7
 8009a6a:	0089      	lsls	r1, r1, #2
 8009a6c:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8009a6e:	32ca      	adds	r2, #202	; 0xca
 8009a70:	7811      	ldrb	r1, [r2, #0]
 8009a72:	4a08      	ldr	r2, [pc, #32]	; (8009a94 <OnRxWindow2TimerEvent+0x58>)
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8009a74:	4808      	ldr	r0, [pc, #32]	; (8009a98 <OnRxWindow2TimerEvent+0x5c>)
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8009a76:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8009a78:	2180      	movs	r1, #128	; 0x80
 8009a7a:	4a08      	ldr	r2, [pc, #32]	; (8009a9c <OnRxWindow2TimerEvent+0x60>)
 8009a7c:	0049      	lsls	r1, r1, #1
 8009a7e:	5299      	strh	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8009a80:	4907      	ldr	r1, [pc, #28]	; (8009aa0 <OnRxWindow2TimerEvent+0x64>)
 8009a82:	f7ff ff85 	bl	8009990 <RxWindowSetup.constprop.0>
}
 8009a86:	bd10      	pop	{r4, pc}
 8009a88:	200006cc 	.word	0x200006cc
 8009a8c:	00000415 	.word	0x00000415
 8009a90:	00000484 	.word	0x00000484
 8009a94:	000003dd 	.word	0x000003dd
 8009a98:	20000a64 	.word	0x20000a64
 8009a9c:	000003de 	.word	0x000003de
 8009aa0:	20000a98 	.word	0x20000a98

08009aa4 <ProcessMacCommands.isra.0.constprop.0>:
    uint8_t status = 0;
 8009aa4:	2300      	movs	r3, #0
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8009aa6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009aa8:	b097      	sub	sp, #92	; 0x5c
 8009aaa:	9208      	str	r2, [sp, #32]
    uint8_t status = 0;
 8009aac:	220d      	movs	r2, #13
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8009aae:	0007      	movs	r7, r0
    while( macIndex < commandsSize )
 8009ab0:	001c      	movs	r4, r3
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8009ab2:	9105      	str	r1, [sp, #20]
    uint8_t status = 0;
 8009ab4:	a908      	add	r1, sp, #32
 8009ab6:	1852      	adds	r2, r2, r1
 8009ab8:	7013      	strb	r3, [r2, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8009aba:	aa0c      	add	r2, sp, #48	; 0x30
 8009abc:	8013      	strh	r3, [r2, #0]
    bool adrBlockFound = false;
 8009abe:	9303      	str	r3, [sp, #12]
    while( macIndex < commandsSize )
 8009ac0:	9b05      	ldr	r3, [sp, #20]
 8009ac2:	429c      	cmp	r4, r3
 8009ac4:	d301      	bcc.n	8009aca <ProcessMacCommands.isra.0.constprop.0+0x26>
}
 8009ac6:	b017      	add	sp, #92	; 0x5c
 8009ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8009aca:	5d38      	ldrb	r0, [r7, r4]
 8009acc:	f003 fa90 	bl	800cff0 <LoRaMacCommandsGetCmdSize>
 8009ad0:	9b05      	ldr	r3, [sp, #20]
 8009ad2:	1900      	adds	r0, r0, r4
 8009ad4:	193e      	adds	r6, r7, r4
 8009ad6:	4298      	cmp	r0, r3
 8009ad8:	dcf5      	bgt.n	8009ac6 <ProcessMacCommands.isra.0.constprop.0+0x22>
        switch( payload[macIndex++] )
 8009ada:	7830      	ldrb	r0, [r6, #0]
 8009adc:	1c65      	adds	r5, r4, #1
 8009ade:	3802      	subs	r0, #2
 8009ae0:	b2ed      	uxtb	r5, r5
 8009ae2:	2811      	cmp	r0, #17
 8009ae4:	d8ef      	bhi.n	8009ac6 <ProcessMacCommands.isra.0.constprop.0+0x22>
 8009ae6:	f7f6 fb2b 	bl	8000140 <__gnu_thumb1_case_shi>
 8009aea:	0012      	.short	0x0012
 8009aec:	00900029 	.word	0x00900029
 8009af0:	00ee00a8 	.word	0x00ee00a8
 8009af4:	01340106 	.word	0x01340106
 8009af8:	01ac0158 	.word	0x01ac0158
 8009afc:	ffeeffee 	.word	0xffeeffee
 8009b00:	ffee01e3 	.word	0xffee01e3
 8009b04:	0233ffee 	.word	0x0233ffee
 8009b08:	02630248 	.word	0x02630248
 8009b0c:	027d      	.short	0x027d
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8009b0e:	2004      	movs	r0, #4
 8009b10:	f003 fb3a 	bl	800d188 <LoRaMacConfirmQueueIsCmdActive>
 8009b14:	2800      	cmp	r0, #0
 8009b16:	d00f      	beq.n	8009b38 <ProcessMacCommands.isra.0.constprop.0+0x94>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8009b18:	2104      	movs	r1, #4
 8009b1a:	2000      	movs	r0, #0
 8009b1c:	f003 faf2 	bl	800d104 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8009b20:	228b      	movs	r2, #139	; 0x8b
 8009b22:	5d79      	ldrb	r1, [r7, r5]
 8009b24:	4bdd      	ldr	r3, [pc, #884]	; (8009e9c <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 8009b26:	00d2      	lsls	r2, r2, #3
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8009b28:	1ce5      	adds	r5, r4, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8009b2a:	3402      	adds	r4, #2
 8009b2c:	5499      	strb	r1, [r3, r2]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8009b2e:	b2e4      	uxtb	r4, r4
 8009b30:	5d39      	ldrb	r1, [r7, r4]
 8009b32:	4adb      	ldr	r2, [pc, #876]	; (8009ea0 <ProcessMacCommands.isra.0.constprop.0+0x3fc>)
 8009b34:	b2ed      	uxtb	r5, r5
 8009b36:	5499      	strb	r1, [r3, r2]
                uint8_t eirpDwellTime = payload[macIndex++];
 8009b38:	002c      	movs	r4, r5
 8009b3a:	e7c1      	b.n	8009ac0 <ProcessMacCommands.isra.0.constprop.0+0x1c>
                int8_t linkAdrDatarate = DR_0;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	aa08      	add	r2, sp, #32
 8009b40:	7393      	strb	r3, [r2, #14]
                int8_t linkAdrTxPower = TX_POWER_0;
 8009b42:	73d3      	strb	r3, [r2, #15]
                uint8_t linkAdrNbRep = 0;
 8009b44:	ae0d      	add	r6, sp, #52	; 0x34
                uint8_t linkAdrNbBytesParsed = 0;
 8009b46:	aa0e      	add	r2, sp, #56	; 0x38
                uint8_t linkAdrNbRep = 0;
 8009b48:	7033      	strb	r3, [r6, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 8009b4a:	7013      	strb	r3, [r2, #0]
                if( adrBlockFound == false )
 8009b4c:	9b03      	ldr	r3, [sp, #12]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d158      	bne.n	8009c04 <ProcessMacCommands.isra.0.constprop.0+0x160>
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8009b52:	9b05      	ldr	r3, [sp, #20]
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8009b54:	3d01      	subs	r5, #1
 8009b56:	a912      	add	r1, sp, #72	; 0x48
 8009b58:	197d      	adds	r5, r7, r5
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8009b5a:	1b1b      	subs	r3, r3, r4
 8009b5c:	720b      	strb	r3, [r1, #8]
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8009b5e:	604d      	str	r5, [r1, #4]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8009b60:	4bce      	ldr	r3, [pc, #824]	; (8009e9c <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 8009b62:	4dd0      	ldr	r5, [pc, #832]	; (8009ea4 <ProcessMacCommands.isra.0.constprop.0+0x400>)
 8009b64:	595b      	ldr	r3, [r3, r5]
 8009b66:	0018      	movs	r0, r3
 8009b68:	307e      	adds	r0, #126	; 0x7e
 8009b6a:	7800      	ldrb	r0, [r0, #0]
 8009b6c:	7288      	strb	r0, [r1, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8009b6e:	0018      	movs	r0, r3
 8009b70:	30b8      	adds	r0, #184	; 0xb8
 8009b72:	7800      	ldrb	r0, [r0, #0]
 8009b74:	7248      	strb	r0, [r1, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009b76:	0018      	movs	r0, r3
 8009b78:	3085      	adds	r0, #133	; 0x85
 8009b7a:	7800      	ldrb	r0, [r0, #0]
 8009b7c:	72c8      	strb	r0, [r1, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8009b7e:	0018      	movs	r0, r3
 8009b80:	3084      	adds	r0, #132	; 0x84
 8009b82:	7800      	ldrb	r0, [r0, #0]
 8009b84:	7308      	strb	r0, [r1, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8009b86:	0018      	movs	r0, r3
 8009b88:	30a4      	adds	r0, #164	; 0xa4
 8009b8a:	7800      	ldrb	r0, [r0, #0]
 8009b8c:	7348      	strb	r0, [r1, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8009b8e:	0018      	movs	r0, r3
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8009b90:	781b      	ldrb	r3, [r3, #0]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8009b92:	30fc      	adds	r0, #252	; 0xfc
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8009b94:	469c      	mov	ip, r3
 8009b96:	230f      	movs	r3, #15
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8009b98:	6e40      	ldr	r0, [r0, #100]	; 0x64
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8009b9a:	9201      	str	r2, [sp, #4]
 8009b9c:	aa08      	add	r2, sp, #32
 8009b9e:	189b      	adds	r3, r3, r2
 8009ba0:	220e      	movs	r2, #14
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8009ba2:	9012      	str	r0, [sp, #72]	; 0x48
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8009ba4:	a808      	add	r0, sp, #32
 8009ba6:	1812      	adds	r2, r2, r0
 8009ba8:	9600      	str	r6, [sp, #0]
 8009baa:	4660      	mov	r0, ip
 8009bac:	f004 f815 	bl	800dbda <RegionLinkAdrReq>
 8009bb0:	ab08      	add	r3, sp, #32
 8009bb2:	7358      	strb	r0, [r3, #13]
                    if( ( status & 0x07 ) == 0x07 )
 8009bb4:	43c0      	mvns	r0, r0
 8009bb6:	0743      	lsls	r3, r0, #29
 8009bb8:	d10d      	bne.n	8009bd6 <ProcessMacCommands.isra.0.constprop.0+0x132>
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 8009bba:	4bb8      	ldr	r3, [pc, #736]	; (8009e9c <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 8009bbc:	a908      	add	r1, sp, #32
 8009bbe:	595b      	ldr	r3, [r3, r5]
 8009bc0:	7b89      	ldrb	r1, [r1, #14]
 8009bc2:	001a      	movs	r2, r3
 8009bc4:	3285      	adds	r2, #133	; 0x85
 8009bc6:	7011      	strb	r1, [r2, #0]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 8009bc8:	a908      	add	r1, sp, #32
 8009bca:	7bc9      	ldrb	r1, [r1, #15]
 8009bcc:	3a01      	subs	r2, #1
 8009bce:	7011      	strb	r1, [r2, #0]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 8009bd0:	7832      	ldrb	r2, [r6, #0]
 8009bd2:	33a4      	adds	r3, #164	; 0xa4
 8009bd4:	701a      	strb	r2, [r3, #0]
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8009bd6:	2600      	movs	r6, #0
 8009bd8:	e009      	b.n	8009bee <ProcessMacCommands.isra.0.constprop.0+0x14a>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8009bda:	230d      	movs	r3, #13
 8009bdc:	a908      	add	r1, sp, #32
 8009bde:	185b      	adds	r3, r3, r1
 8009be0:	2201      	movs	r2, #1
 8009be2:	0019      	movs	r1, r3
 8009be4:	2003      	movs	r0, #3
 8009be6:	f003 f909 	bl	800cdfc <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8009bea:	3601      	adds	r6, #1
 8009bec:	b2f6      	uxtb	r6, r6
 8009bee:	ab0e      	add	r3, sp, #56	; 0x38
 8009bf0:	781d      	ldrb	r5, [r3, #0]
 8009bf2:	2105      	movs	r1, #5
 8009bf4:	0028      	movs	r0, r5
 8009bf6:	f7f6 fab7 	bl	8000168 <__udivsi3>
 8009bfa:	b2c0      	uxtb	r0, r0
 8009bfc:	4286      	cmp	r6, r0
 8009bfe:	d3ec      	bcc.n	8009bda <ProcessMacCommands.isra.0.constprop.0+0x136>
                    macIndex += linkAdrNbBytesParsed - 1;
 8009c00:	1965      	adds	r5, r4, r5
 8009c02:	b2ed      	uxtb	r5, r5
                break;
 8009c04:	2301      	movs	r3, #1
 8009c06:	9303      	str	r3, [sp, #12]
 8009c08:	e796      	b.n	8009b38 <ProcessMacCommands.isra.0.constprop.0+0x94>
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8009c0a:	4aa4      	ldr	r2, [pc, #656]	; (8009e9c <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 8009c0c:	4ba5      	ldr	r3, [pc, #660]	; (8009ea4 <ProcessMacCommands.isra.0.constprop.0+0x400>)
 8009c0e:	3402      	adds	r4, #2
 8009c10:	58d1      	ldr	r1, [r2, r3]
 8009c12:	220f      	movs	r2, #15
 8009c14:	5d7b      	ldrb	r3, [r7, r5]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8009c16:	2004      	movs	r0, #4
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8009c18:	4013      	ands	r3, r2
 8009c1a:	000a      	movs	r2, r1
 8009c1c:	32c8      	adds	r2, #200	; 0xc8
 8009c1e:	7013      	strb	r3, [r2, #0]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 8009c20:	2201      	movs	r2, #1
 8009c22:	409a      	lsls	r2, r3
 8009c24:	0013      	movs	r3, r2
 8009c26:	22a6      	movs	r2, #166	; 0xa6
 8009c28:	0052      	lsls	r2, r2, #1
 8009c2a:	528b      	strh	r3, [r1, r2]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	a90c      	add	r1, sp, #48	; 0x30
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8009c30:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8009c32:	f003 f8e3 	bl	800cdfc <LoRaMacCommandsAddCmd>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8009c36:	0025      	movs	r5, r4
}
 8009c38:	e77e      	b.n	8009b38 <ProcessMacCommands.isra.0.constprop.0+0x94>
                status = 0x07;
 8009c3a:	2107      	movs	r1, #7
 8009c3c:	ab08      	add	r3, sp, #32
 8009c3e:	7359      	strb	r1, [r3, #13]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8009c40:	5d7b      	ldrb	r3, [r7, r5]
 8009c42:	ae12      	add	r6, sp, #72	; 0x48
 8009c44:	091a      	lsrs	r2, r3, #4
 8009c46:	400a      	ands	r2, r1
 8009c48:	7072      	strb	r2, [r6, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8009c4a:	220f      	movs	r2, #15
 8009c4c:	4013      	ands	r3, r2
 8009c4e:	7033      	strb	r3, [r6, #0]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009c50:	1d22      	adds	r2, r4, #4
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8009c52:	1ce3      	adds	r3, r4, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009c54:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009c56:	b2d2      	uxtb	r2, r2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009c58:	5cfb      	ldrb	r3, [r7, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009c5a:	5cba      	ldrb	r2, [r7, r2]
 8009c5c:	1d65      	adds	r5, r4, #5
                macIndex++;
 8009c5e:	3402      	adds	r4, #2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009c60:	0412      	lsls	r2, r2, #16
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8009c62:	b2e4      	uxtb	r4, r4
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009c64:	021b      	lsls	r3, r3, #8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009c66:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8009c68:	5d3a      	ldrb	r2, [r7, r4]
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8009c6a:	4c8e      	ldr	r4, [pc, #568]	; (8009ea4 <ProcessMacCommands.isra.0.constprop.0+0x400>)
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009c6c:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 8009c6e:	2264      	movs	r2, #100	; 0x64
 8009c70:	4353      	muls	r3, r2
 8009c72:	9313      	str	r3, [sp, #76]	; 0x4c
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8009c74:	4b89      	ldr	r3, [pc, #548]	; (8009e9c <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 8009c76:	0031      	movs	r1, r6
 8009c78:	591b      	ldr	r3, [r3, r4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009c7a:	b2ed      	uxtb	r5, r5
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8009c7c:	7818      	ldrb	r0, [r3, #0]
 8009c7e:	9304      	str	r3, [sp, #16]
 8009c80:	f003 ffbb 	bl	800dbfa <RegionRxParamSetupReq>
 8009c84:	ab08      	add	r3, sp, #32
 8009c86:	7358      	strb	r0, [r3, #13]
                if( ( status & 0x07 ) == 0x07 )
 8009c88:	2307      	movs	r3, #7
 8009c8a:	4003      	ands	r3, r0
 8009c8c:	2b07      	cmp	r3, #7
 8009c8e:	d10d      	bne.n	8009cac <ProcessMacCommands.isra.0.constprop.0+0x208>
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8009c90:	4b82      	ldr	r3, [pc, #520]	; (8009e9c <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 8009c92:	7832      	ldrb	r2, [r6, #0]
 8009c94:	591b      	ldr	r3, [r3, r4]
 8009c96:	0019      	movs	r1, r3
 8009c98:	31ac      	adds	r1, #172	; 0xac
 8009c9a:	700a      	strb	r2, [r1, #0]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8009c9c:	720a      	strb	r2, [r1, #8]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8009c9e:	6872      	ldr	r2, [r6, #4]
 8009ca0:	3904      	subs	r1, #4
 8009ca2:	600a      	str	r2, [r1, #0]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8009ca4:	608a      	str	r2, [r1, #8]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8009ca6:	7872      	ldrb	r2, [r6, #1]
 8009ca8:	33a5      	adds	r3, #165	; 0xa5
 8009caa:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 8009cac:	a90c      	add	r1, sp, #48	; 0x30
 8009cae:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	2005      	movs	r0, #5
 8009cb4:	f003 f8a2 	bl	800cdfc <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8009cb8:	2310      	movs	r3, #16
 8009cba:	4978      	ldr	r1, [pc, #480]	; (8009e9c <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 8009cbc:	4a7a      	ldr	r2, [pc, #488]	; (8009ea8 <ProcessMacCommands.isra.0.constprop.0+0x404>)
 8009cbe:	5c88      	ldrb	r0, [r1, r2]
 8009cc0:	4303      	orrs	r3, r0
 8009cc2:	548b      	strb	r3, [r1, r2]
                break;
 8009cc4:	e738      	b.n	8009b38 <ProcessMacCommands.isra.0.constprop.0+0x94>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8009cc6:	23d2      	movs	r3, #210	; 0xd2
 8009cc8:	4a74      	ldr	r2, [pc, #464]	; (8009e9c <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	58d3      	ldr	r3, [r2, r3]
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8009cce:	20ff      	movs	r0, #255	; 0xff
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d003      	beq.n	8009cdc <ProcessMacCommands.isra.0.constprop.0+0x238>
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d000      	beq.n	8009cdc <ProcessMacCommands.isra.0.constprop.0+0x238>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8009cda:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 8009cdc:	ab08      	add	r3, sp, #32
 8009cde:	7418      	strb	r0, [r3, #16]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8009ce0:	233f      	movs	r3, #63	; 0x3f
 8009ce2:	9a08      	ldr	r2, [sp, #32]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8009ce4:	2006      	movs	r0, #6
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8009ce6:	4013      	ands	r3, r2
 8009ce8:	aa08      	add	r2, sp, #32
 8009cea:	7453      	strb	r3, [r2, #17]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8009cec:	2202      	movs	r2, #2
 8009cee:	a90c      	add	r1, sp, #48	; 0x30
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8009cf0:	f003 f884 	bl	800cdfc <LoRaMacCommandsAddCmd>
                break;
 8009cf4:	e720      	b.n	8009b38 <ProcessMacCommands.isra.0.constprop.0+0x94>
                status = 0x03;
 8009cf6:	260d      	movs	r6, #13
 8009cf8:	ab08      	add	r3, sp, #32
 8009cfa:	18f6      	adds	r6, r6, r3
 8009cfc:	2303      	movs	r3, #3
 8009cfe:	7033      	strb	r3, [r6, #0]
                newChannelReq.ChannelId = payload[macIndex++];
 8009d00:	5d7b      	ldrb	r3, [r7, r5]
 8009d02:	a90e      	add	r1, sp, #56	; 0x38
 8009d04:	710b      	strb	r3, [r1, #4]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8009d06:	1ce3      	adds	r3, r4, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	5cf8      	ldrb	r0, [r7, r3]
 8009d0c:	1d23      	adds	r3, r4, #4
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	5cfb      	ldrb	r3, [r7, r3]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009d12:	0200      	lsls	r0, r0, #8
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009d14:	041b      	lsls	r3, r3, #16
 8009d16:	4303      	orrs	r3, r0
                newChannelReq.ChannelId = payload[macIndex++];
 8009d18:	1ca0      	adds	r0, r4, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8009d1a:	b2c0      	uxtb	r0, r0
 8009d1c:	5c38      	ldrb	r0, [r7, r0]
                chParam.DrRange.Value = payload[macIndex++];
 8009d1e:	1da5      	adds	r5, r4, #6
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009d20:	4303      	orrs	r3, r0
                chParam.Frequency *= 100;
 8009d22:	2064      	movs	r0, #100	; 0x64
 8009d24:	4343      	muls	r3, r0
 8009d26:	9312      	str	r3, [sp, #72]	; 0x48
                chParam.Rx1Frequency = 0;
 8009d28:	2300      	movs	r3, #0
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009d2a:	3405      	adds	r4, #5
                chParam.DrRange.Value = payload[macIndex++];
 8009d2c:	b2e4      	uxtb	r4, r4
                chParam.Rx1Frequency = 0;
 8009d2e:	9313      	str	r3, [sp, #76]	; 0x4c
                chParam.DrRange.Value = payload[macIndex++];
 8009d30:	5d3b      	ldrb	r3, [r7, r4]
                newChannelReq.NewChannel = &chParam;
 8009d32:	aa12      	add	r2, sp, #72	; 0x48
                chParam.DrRange.Value = payload[macIndex++];
 8009d34:	7213      	strb	r3, [r2, #8]
                newChannelReq.NewChannel = &chParam;
 8009d36:	920e      	str	r2, [sp, #56]	; 0x38
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8009d38:	4b5a      	ldr	r3, [pc, #360]	; (8009ea4 <ProcessMacCommands.isra.0.constprop.0+0x400>)
 8009d3a:	4a58      	ldr	r2, [pc, #352]	; (8009e9c <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
                chParam.DrRange.Value = payload[macIndex++];
 8009d3c:	b2ed      	uxtb	r5, r5
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8009d3e:	58d3      	ldr	r3, [r2, r3]
 8009d40:	7818      	ldrb	r0, [r3, #0]
 8009d42:	f003 ff64 	bl	800dc0e <RegionNewChannelReq>
                macCmdPayload[0] = status;
 8009d46:	a90c      	add	r1, sp, #48	; 0x30
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8009d48:	7030      	strb	r0, [r6, #0]
                macCmdPayload[0] = status;
 8009d4a:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	2007      	movs	r0, #7
 8009d50:	e7ce      	b.n	8009cf0 <ProcessMacCommands.isra.0.constprop.0+0x24c>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8009d52:	230f      	movs	r3, #15
 8009d54:	5d79      	ldrb	r1, [r7, r5]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8009d56:	4a51      	ldr	r2, [pc, #324]	; (8009e9c <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
                uint8_t delay = payload[macIndex++] & 0x0F;
 8009d58:	4019      	ands	r1, r3
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8009d5a:	4b52      	ldr	r3, [pc, #328]	; (8009ea4 <ProcessMacCommands.isra.0.constprop.0+0x400>)
                uint8_t delay = payload[macIndex++] & 0x0F;
 8009d5c:	3402      	adds	r4, #2
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8009d5e:	58d2      	ldr	r2, [r2, r3]
                uint8_t delay = payload[macIndex++] & 0x0F;
 8009d60:	b2e4      	uxtb	r4, r4
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8009d62:	1c0b      	adds	r3, r1, #0
 8009d64:	2900      	cmp	r1, #0
 8009d66:	d100      	bne.n	8009d6a <ProcessMacCommands.isra.0.constprop.0+0x2c6>
 8009d68:	2301      	movs	r3, #1
 8009d6a:	b2d9      	uxtb	r1, r3
 8009d6c:	23fa      	movs	r3, #250	; 0xfa
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	434b      	muls	r3, r1
 8009d72:	0011      	movs	r1, r2
 8009d74:	3194      	adds	r1, #148	; 0x94
 8009d76:	600b      	str	r3, [r1, #0]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8009d78:	21fa      	movs	r1, #250	; 0xfa
 8009d7a:	0089      	lsls	r1, r1, #2
 8009d7c:	185b      	adds	r3, r3, r1
 8009d7e:	3298      	adds	r2, #152	; 0x98
 8009d80:	6013      	str	r3, [r2, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8009d82:	a90c      	add	r1, sp, #48	; 0x30
 8009d84:	2200      	movs	r2, #0
 8009d86:	2008      	movs	r0, #8
 8009d88:	f003 f838 	bl	800cdfc <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8009d8c:	2310      	movs	r3, #16
 8009d8e:	4943      	ldr	r1, [pc, #268]	; (8009e9c <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 8009d90:	4a45      	ldr	r2, [pc, #276]	; (8009ea8 <ProcessMacCommands.isra.0.constprop.0+0x404>)
 8009d92:	5c88      	ldrb	r0, [r1, r2]
 8009d94:	4303      	orrs	r3, r0
 8009d96:	548b      	strb	r3, [r1, r2]
 8009d98:	e74d      	b.n	8009c36 <ProcessMacCommands.isra.0.constprop.0+0x192>
                uint8_t eirpDwellTime = payload[macIndex++];
 8009d9a:	3402      	adds	r4, #2
 8009d9c:	b2e3      	uxtb	r3, r4
 8009d9e:	9306      	str	r3, [sp, #24]
 8009da0:	5d7b      	ldrb	r3, [r7, r5]
                txParamSetupReq.UplinkDwellTime = 0;
 8009da2:	2200      	movs	r2, #0
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8009da4:	0019      	movs	r1, r3
                txParamSetupReq.UplinkDwellTime = 0;
 8009da6:	ac0d      	add	r4, sp, #52	; 0x34
 8009da8:	7022      	strb	r2, [r4, #0]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8009daa:	3220      	adds	r2, #32
 8009dac:	4011      	ands	r1, r2
 8009dae:	4213      	tst	r3, r2
 8009db0:	d144      	bne.n	8009e3c <ProcessMacCommands.isra.0.constprop.0+0x398>
                txParamSetupReq.DownlinkDwellTime = 0;
 8009db2:	7061      	strb	r1, [r4, #1]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8009db4:	06da      	lsls	r2, r3, #27
 8009db6:	d501      	bpl.n	8009dbc <ProcessMacCommands.isra.0.constprop.0+0x318>
                    txParamSetupReq.UplinkDwellTime = 1;
 8009db8:	2201      	movs	r2, #1
 8009dba:	7022      	strb	r2, [r4, #0]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8009dbc:	220f      	movs	r2, #15
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8009dbe:	4d37      	ldr	r5, [pc, #220]	; (8009e9c <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 8009dc0:	4e38      	ldr	r6, [pc, #224]	; (8009ea4 <ProcessMacCommands.isra.0.constprop.0+0x400>)
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8009dc2:	4013      	ands	r3, r2
 8009dc4:	70a3      	strb	r3, [r4, #2]
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8009dc6:	59ab      	ldr	r3, [r5, r6]
 8009dc8:	0021      	movs	r1, r4
 8009dca:	7818      	ldrb	r0, [r3, #0]
 8009dcc:	f003 ff29 	bl	800dc22 <RegionTxParamSetupReq>
 8009dd0:	1c43      	adds	r3, r0, #1
 8009dd2:	d031      	beq.n	8009e38 <ProcessMacCommands.isra.0.constprop.0+0x394>
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8009dd4:	59ab      	ldr	r3, [r5, r6]
 8009dd6:	8822      	ldrh	r2, [r4, #0]
 8009dd8:	9304      	str	r3, [sp, #16]
 8009dda:	7823      	ldrb	r3, [r4, #0]
 8009ddc:	9307      	str	r3, [sp, #28]
 8009dde:	9b04      	ldr	r3, [sp, #16]
 8009de0:	33b8      	adds	r3, #184	; 0xb8
 8009de2:	801a      	strh	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8009de4:	9b04      	ldr	r3, [sp, #16]
 8009de6:	4a31      	ldr	r2, [pc, #196]	; (8009eac <ProcessMacCommands.isra.0.constprop.0+0x408>)
 8009de8:	33bc      	adds	r3, #188	; 0xbc
 8009dea:	9309      	str	r3, [sp, #36]	; 0x24
 8009dec:	78a3      	ldrb	r3, [r4, #2]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8009dee:	2400      	movs	r4, #0
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8009df0:	5cd0      	ldrb	r0, [r2, r3]
 8009df2:	f7f7 fb59 	bl	80014a8 <__aeabi_ui2f>
 8009df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8009df8:	2128      	movs	r1, #40	; 0x28
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8009dfa:	6018      	str	r0, [r3, #0]
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8009dfc:	2302      	movs	r3, #2
 8009dfe:	aa08      	add	r2, sp, #32
 8009e00:	1852      	adds	r2, r2, r1
 8009e02:	7013      	strb	r3, [r2, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8009e04:	222a      	movs	r2, #42	; 0x2a
 8009e06:	ab08      	add	r3, sp, #32
 8009e08:	189b      	adds	r3, r3, r2
 8009e0a:	9a07      	ldr	r2, [sp, #28]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009e0c:	a912      	add	r1, sp, #72	; 0x48
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8009e0e:	701a      	strb	r2, [r3, #0]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009e10:	9b04      	ldr	r3, [sp, #16]
 8009e12:	7818      	ldrb	r0, [r3, #0]
 8009e14:	f003 fe7c 	bl	800db10 <RegionGetPhyParam>
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8009e18:	59ab      	ldr	r3, [r5, r6]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009e1a:	900e      	str	r0, [sp, #56]	; 0x38
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8009e1c:	3385      	adds	r3, #133	; 0x85
 8009e1e:	571c      	ldrsb	r4, [r3, r4]
 8009e20:	1c02      	adds	r2, r0, #0
 8009e22:	b240      	sxtb	r0, r0
 8009e24:	7819      	ldrb	r1, [r3, #0]
 8009e26:	42a0      	cmp	r0, r4
 8009e28:	da00      	bge.n	8009e2c <ProcessMacCommands.isra.0.constprop.0+0x388>
 8009e2a:	1c0a      	adds	r2, r1, #0
 8009e2c:	701a      	strb	r2, [r3, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8009e2e:	2009      	movs	r0, #9
 8009e30:	2200      	movs	r2, #0
 8009e32:	a90c      	add	r1, sp, #48	; 0x30
 8009e34:	f002 ffe2 	bl	800cdfc <LoRaMacCommandsAddCmd>
                uint8_t eirpDwellTime = payload[macIndex++];
 8009e38:	9d06      	ldr	r5, [sp, #24]
 8009e3a:	e67d      	b.n	8009b38 <ProcessMacCommands.isra.0.constprop.0+0x94>
                    txParamSetupReq.DownlinkDwellTime = 1;
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	7062      	strb	r2, [r4, #1]
 8009e40:	e7b8      	b.n	8009db4 <ProcessMacCommands.isra.0.constprop.0+0x310>
                status = 0x03;
 8009e42:	260d      	movs	r6, #13
 8009e44:	ab08      	add	r3, sp, #32
 8009e46:	18f6      	adds	r6, r6, r3
 8009e48:	2303      	movs	r3, #3
 8009e4a:	7033      	strb	r3, [r6, #0]
                dlChannelReq.ChannelId = payload[macIndex++];
 8009e4c:	5d7b      	ldrb	r3, [r7, r5]
 8009e4e:	a912      	add	r1, sp, #72	; 0x48
 8009e50:	700b      	strb	r3, [r1, #0]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009e52:	1d22      	adds	r2, r4, #4
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8009e54:	1ce3      	adds	r3, r4, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009e56:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009e58:	b2d2      	uxtb	r2, r2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009e5a:	5cfb      	ldrb	r3, [r7, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009e5c:	5cba      	ldrb	r2, [r7, r2]
 8009e5e:	1d65      	adds	r5, r4, #5
                dlChannelReq.ChannelId = payload[macIndex++];
 8009e60:	3402      	adds	r4, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009e62:	0412      	lsls	r2, r2, #16
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8009e64:	b2e4      	uxtb	r4, r4
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009e66:	021b      	lsls	r3, r3, #8
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009e68:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8009e6a:	5d3a      	ldrb	r2, [r7, r4]
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8009e6c:	4c0b      	ldr	r4, [pc, #44]	; (8009e9c <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009e6e:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 8009e70:	2264      	movs	r2, #100	; 0x64
 8009e72:	4353      	muls	r3, r2
 8009e74:	604b      	str	r3, [r1, #4]
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8009e76:	4b0b      	ldr	r3, [pc, #44]	; (8009ea4 <ProcessMacCommands.isra.0.constprop.0+0x400>)
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009e78:	b2ed      	uxtb	r5, r5
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8009e7a:	58e3      	ldr	r3, [r4, r3]
 8009e7c:	7818      	ldrb	r0, [r3, #0]
 8009e7e:	f003 feda 	bl	800dc36 <RegionDlChannelReq>
                macCmdPayload[0] = status;
 8009e82:	a90c      	add	r1, sp, #48	; 0x30
 8009e84:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8009e86:	2201      	movs	r2, #1
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8009e88:	7030      	strb	r0, [r6, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8009e8a:	200a      	movs	r0, #10
 8009e8c:	f002 ffb6 	bl	800cdfc <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8009e90:	2310      	movs	r3, #16
 8009e92:	4a05      	ldr	r2, [pc, #20]	; (8009ea8 <ProcessMacCommands.isra.0.constprop.0+0x404>)
 8009e94:	5ca1      	ldrb	r1, [r4, r2]
 8009e96:	430b      	orrs	r3, r1
 8009e98:	54a3      	strb	r3, [r4, r2]
                break;
 8009e9a:	e64d      	b.n	8009b38 <ProcessMacCommands.isra.0.constprop.0+0x94>
 8009e9c:	200006cc 	.word	0x200006cc
 8009ea0:	00000459 	.word	0x00000459
 8009ea4:	00000484 	.word	0x00000484
 8009ea8:	00000481 	.word	0x00000481
 8009eac:	08011656 	.word	0x08011656
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8009eb0:	200a      	movs	r0, #10
 8009eb2:	f003 f969 	bl	800d188 <LoRaMacConfirmQueueIsCmdActive>
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	d100      	bne.n	8009ebc <ProcessMacCommands.isra.0.constprop.0+0x418>
 8009eba:	e63d      	b.n	8009b38 <ProcessMacCommands.isra.0.constprop.0+0x94>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8009ebc:	210a      	movs	r1, #10
 8009ebe:	2000      	movs	r0, #0
 8009ec0:	f003 f920 	bl	800d104 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t sysTime = { 0 };
 8009ec4:	231e      	movs	r3, #30
 8009ec6:	aa08      	add	r2, sp, #32
 8009ec8:	189b      	adds	r3, r3, r2
 8009eca:	2200      	movs	r2, #0
 8009ecc:	801a      	strh	r2, [r3, #0]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8009ece:	1ca3      	adds	r3, r4, #2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	5cfe      	ldrb	r6, [r7, r3]
 8009ed4:	1ce3      	adds	r3, r4, #3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	5cf9      	ldrb	r1, [r7, r3]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8009eda:	0236      	lsls	r6, r6, #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8009edc:	0409      	lsls	r1, r1, #16
 8009ede:	430e      	orrs	r6, r1
 8009ee0:	1d23      	adds	r3, r4, #4
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8009ee2:	5d79      	ldrb	r1, [r7, r5]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8009ee4:	b2db      	uxtb	r3, r3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8009ee6:	430e      	orrs	r6, r1
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8009ee8:	5cf9      	ldrb	r1, [r7, r3]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8009eea:	23fa      	movs	r3, #250	; 0xfa
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8009eec:	1da5      	adds	r5, r4, #6
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8009eee:	3405      	adds	r4, #5
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8009ef0:	b2e4      	uxtb	r4, r4
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8009ef2:	5d3a      	ldrb	r2, [r7, r4]
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	4353      	muls	r3, r2
 8009ef8:	aa08      	add	r2, sp, #32
 8009efa:	121b      	asrs	r3, r3, #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8009efc:	0609      	lsls	r1, r1, #24
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8009efe:	8393      	strh	r3, [r2, #28]
                    sysTimeCurrent = SysTimeGet( );
 8009f00:	a812      	add	r0, sp, #72	; 0x48
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8009f02:	430e      	orrs	r6, r1
                    sysTimeCurrent = SysTimeGet( );
 8009f04:	f006 fd50 	bl	80109a8 <SysTimeGet>
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8009f08:	4b41      	ldr	r3, [pc, #260]	; (800a010 <ProcessMacCommands.isra.0.constprop.0+0x56c>)
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8009f0a:	4c42      	ldr	r4, [pc, #264]	; (800a014 <ProcessMacCommands.isra.0.constprop.0+0x570>)
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8009f0c:	18f1      	adds	r1, r6, r3
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8009f0e:	23cf      	movs	r3, #207	; 0xcf
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	18e3      	adds	r3, r4, r3
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009f18:	9300      	str	r3, [sp, #0]
 8009f1a:	23ce      	movs	r3, #206	; 0xce
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	58e3      	ldr	r3, [r4, r3]
 8009f20:	a810      	add	r0, sp, #64	; 0x40
 8009f22:	910e      	str	r1, [sp, #56]	; 0x38
 8009f24:	f006 fd02 	bl	801092c <SysTimeSub>
 8009f28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f2a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009f2c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	a80e      	add	r0, sp, #56	; 0x38
 8009f32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f34:	f006 fce0 	bl	80108f8 <SysTimeAdd>
                    SysTimeSet( sysTime );
 8009f38:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009f3a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009f3c:	f006 fd0c 	bl	8010958 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8009f40:	f002 fb18 	bl	800c574 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8009f44:	2387      	movs	r3, #135	; 0x87
 8009f46:	2201      	movs	r2, #1
 8009f48:	00db      	lsls	r3, r3, #3
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8009f4a:	b2ed      	uxtb	r5, r5
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8009f4c:	54e2      	strb	r2, [r4, r3]
 8009f4e:	e5f3      	b.n	8009b38 <ProcessMacCommands.isra.0.constprop.0+0x94>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8009f50:	200d      	movs	r0, #13
 8009f52:	f003 f919 	bl	800d188 <LoRaMacConfirmQueueIsCmdActive>
 8009f56:	2800      	cmp	r0, #0
 8009f58:	d100      	bne.n	8009f5c <ProcessMacCommands.isra.0.constprop.0+0x4b8>
 8009f5a:	e5ed      	b.n	8009b38 <ProcessMacCommands.isra.0.constprop.0+0x94>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8009f5c:	210d      	movs	r1, #13
 8009f5e:	2000      	movs	r0, #0
 8009f60:	f003 f8d0 	bl	800d104 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8009f64:	2390      	movs	r3, #144	; 0x90
 8009f66:	4a2b      	ldr	r2, [pc, #172]	; (800a014 <ProcessMacCommands.isra.0.constprop.0+0x570>)
 8009f68:	00db      	lsls	r3, r3, #3
 8009f6a:	5cd3      	ldrb	r3, [r2, r3]
 8009f6c:	3b04      	subs	r3, #4
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d800      	bhi.n	8009f74 <ProcessMacCommands.isra.0.constprop.0+0x4d0>
 8009f72:	e5e1      	b.n	8009b38 <ProcessMacCommands.isra.0.constprop.0+0x94>
                        LoRaMacClassBPingSlotInfoAns( );
 8009f74:	f002 fa66 	bl	800c444 <LoRaMacClassBPingSlotInfoAns>
 8009f78:	e5de      	b.n	8009b38 <ProcessMacCommands.isra.0.constprop.0+0x94>
                frequency = ( uint32_t )payload[macIndex++];
 8009f7a:	1ca3      	adds	r3, r4, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	5cf9      	ldrb	r1, [r7, r3]
 8009f80:	1ce3      	adds	r3, r4, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	5cfb      	ldrb	r3, [r7, r3]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8009f86:	0209      	lsls	r1, r1, #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009f88:	041b      	lsls	r3, r3, #16
 8009f8a:	4319      	orrs	r1, r3
                frequency *= 100;
 8009f8c:	2364      	movs	r3, #100	; 0x64
                frequency = ( uint32_t )payload[macIndex++];
 8009f8e:	5d7a      	ldrb	r2, [r7, r5]
                datarate = payload[macIndex++] & 0x0F;
 8009f90:	1d65      	adds	r5, r4, #5
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009f92:	3404      	adds	r4, #4
                datarate = payload[macIndex++] & 0x0F;
 8009f94:	b2e4      	uxtb	r4, r4
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009f96:	4311      	orrs	r1, r2
                datarate = payload[macIndex++] & 0x0F;
 8009f98:	5d38      	ldrb	r0, [r7, r4]
                frequency *= 100;
 8009f9a:	4359      	muls	r1, r3
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8009f9c:	3b55      	subs	r3, #85	; 0x55
 8009f9e:	4018      	ands	r0, r3
 8009fa0:	f002 fa66 	bl	800c470 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8009fa4:	a90c      	add	r1, sp, #48	; 0x30
 8009fa6:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8009fa8:	2201      	movs	r2, #1
 8009faa:	2011      	movs	r0, #17
                datarate = payload[macIndex++] & 0x0F;
 8009fac:	b2ed      	uxtb	r5, r5
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8009fae:	e69f      	b.n	8009cf0 <ProcessMacCommands.isra.0.constprop.0+0x24c>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8009fb0:	200e      	movs	r0, #14
 8009fb2:	f003 f8e9 	bl	800d188 <LoRaMacConfirmQueueIsCmdActive>
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d100      	bne.n	8009fbc <ProcessMacCommands.isra.0.constprop.0+0x518>
 8009fba:	e5bd      	b.n	8009b38 <ProcessMacCommands.isra.0.constprop.0+0x94>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8009fbc:	210e      	movs	r1, #14
 8009fbe:	2000      	movs	r0, #0
 8009fc0:	f003 f8a0 	bl	800d104 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8009fc4:	1ca3      	adds	r3, r4, #2
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	5cf8      	ldrb	r0, [r7, r3]
 8009fca:	5d7b      	ldrb	r3, [r7, r5]
 8009fcc:	0200      	lsls	r0, r0, #8
 8009fce:	4318      	orrs	r0, r3
                    beaconTimingChannel = payload[macIndex++];
 8009fd0:	1d25      	adds	r5, r4, #4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8009fd2:	4b11      	ldr	r3, [pc, #68]	; (800a018 <ProcessMacCommands.isra.0.constprop.0+0x574>)
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8009fd4:	3403      	adds	r4, #3
                    beaconTimingChannel = payload[macIndex++];
 8009fd6:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8009fd8:	5d39      	ldrb	r1, [r7, r4]
 8009fda:	681a      	ldr	r2, [r3, #0]
                    beaconTimingChannel = payload[macIndex++];
 8009fdc:	b2ed      	uxtb	r5, r5
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8009fde:	f002 fa93 	bl	800c508 <LoRaMacClassBBeaconTimingAns>
 8009fe2:	e5a9      	b.n	8009b38 <ProcessMacCommands.isra.0.constprop.0+0x94>
                    frequency = ( uint32_t )payload[macIndex++];
 8009fe4:	5d7a      	ldrb	r2, [r7, r5]
 8009fe6:	1ca3      	adds	r3, r4, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009fe8:	1d25      	adds	r5, r4, #4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8009fea:	3403      	adds	r4, #3
 8009fec:	b2db      	uxtb	r3, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009fee:	b2e4      	uxtb	r4, r4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8009ff0:	5cf8      	ldrb	r0, [r7, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009ff2:	5d3b      	ldrb	r3, [r7, r4]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8009ff4:	0200      	lsls	r0, r0, #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009ff6:	041b      	lsls	r3, r3, #16
 8009ff8:	4318      	orrs	r0, r3
                    frequency *= 100;
 8009ffa:	2364      	movs	r3, #100	; 0x64
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009ffc:	4310      	orrs	r0, r2
                    frequency *= 100;
 8009ffe:	4358      	muls	r0, r3
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800a000:	f002 fb0c 	bl	800c61c <LoRaMacClassBBeaconFreqReq>
 800a004:	a90c      	add	r1, sp, #48	; 0x30
 800a006:	7008      	strb	r0, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800a008:	2201      	movs	r2, #1
 800a00a:	2013      	movs	r0, #19
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800a00c:	b2ed      	uxtb	r5, r5
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800a00e:	e66f      	b.n	8009cf0 <ProcessMacCommands.isra.0.constprop.0+0x24c>
 800a010:	12d53d80 	.word	0x12d53d80
 800a014:	200006cc 	.word	0x200006cc
 800a018:	2000161c 	.word	0x2000161c

0800a01c <LoRaMacIsBusy>:
}

/* Exported functions ---------------------------------------------------------*/
bool LoRaMacIsBusy( void )
{
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800a01c:	22d0      	movs	r2, #208	; 0xd0
 800a01e:	4b06      	ldr	r3, [pc, #24]	; (800a038 <LoRaMacIsBusy+0x1c>)
 800a020:	0092      	lsls	r2, r2, #2
 800a022:	589a      	ldr	r2, [r3, r2]
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
    {
        return false;
    }
    return true;
 800a024:	2001      	movs	r0, #1
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800a026:	2a00      	cmp	r2, #0
 800a028:	d105      	bne.n	800a036 <LoRaMacIsBusy+0x1a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800a02a:	4a04      	ldr	r2, [pc, #16]	; (800a03c <LoRaMacIsBusy+0x20>)
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800a02c:	5c98      	ldrb	r0, [r3, r2]
 800a02e:	3801      	subs	r0, #1
 800a030:	1e43      	subs	r3, r0, #1
 800a032:	4198      	sbcs	r0, r3
 800a034:	b2c0      	uxtb	r0, r0
}
 800a036:	4770      	bx	lr
 800a038:	200006cc 	.word	0x200006cc
 800a03c:	00000482 	.word	0x00000482

0800a040 <LoRaMacProcess>:

void LoRaMacProcess( void )
{
 800a040:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a042:	b0ab      	sub	sp, #172	; 0xac
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a044:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a048:	b672      	cpsid	i
    LoRaMacRadioEvents.Value = 0;
 800a04a:	2000      	movs	r0, #0
    events = LoRaMacRadioEvents;
 800a04c:	4acc      	ldr	r2, [pc, #816]	; (800a380 <LoRaMacProcess+0x340>)
 800a04e:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800a050:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a052:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 800a056:	4fcb      	ldr	r7, [pc, #812]	; (800a384 <LoRaMacProcess+0x344>)
 800a058:	4283      	cmp	r3, r0
 800a05a:	d100      	bne.n	800a05e <LoRaMacProcess+0x1e>
 800a05c:	e0ec      	b.n	800a238 <LoRaMacProcess+0x1f8>
        if( events.Events.TxDone == 1 )
 800a05e:	b2da      	uxtb	r2, r3
 800a060:	9206      	str	r2, [sp, #24]
 800a062:	06db      	lsls	r3, r3, #27
 800a064:	d571      	bpl.n	800a14a <LoRaMacProcess+0x10a>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800a066:	4cc8      	ldr	r4, [pc, #800]	; (800a388 <LoRaMacProcess+0x348>)
 800a068:	4dc8      	ldr	r5, [pc, #800]	; (800a38c <LoRaMacProcess+0x34c>)
 800a06a:	5963      	ldr	r3, [r4, r5]
 800a06c:	337c      	adds	r3, #124	; 0x7c
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	2b02      	cmp	r3, #2
 800a072:	d003      	beq.n	800a07c <LoRaMacProcess+0x3c>
        Radio.Sleep( );
 800a074:	4bc6      	ldr	r3, [pc, #792]	; (800a390 <LoRaMacProcess+0x350>)
 800a076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a078:	9303      	str	r3, [sp, #12]
 800a07a:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800a07c:	23ec      	movs	r3, #236	; 0xec
 800a07e:	4ec5      	ldr	r6, [pc, #788]	; (800a394 <LoRaMacProcess+0x354>)
 800a080:	009b      	lsls	r3, r3, #2
 800a082:	58e1      	ldr	r1, [r4, r3]
 800a084:	0030      	movs	r0, r6
 800a086:	f006 fe21 	bl	8010ccc <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800a08a:	0030      	movs	r0, r6
 800a08c:	f006 fddc 	bl	8010c48 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800a090:	23ed      	movs	r3, #237	; 0xed
 800a092:	4ec1      	ldr	r6, [pc, #772]	; (800a398 <LoRaMacProcess+0x358>)
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	58e1      	ldr	r1, [r4, r3]
 800a098:	0030      	movs	r0, r6
 800a09a:	f006 fe17 	bl	8010ccc <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800a09e:	0030      	movs	r0, r6
 800a0a0:	f006 fdd2 	bl	8010c48 <UTIL_TIMER_Start>
    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800a0a4:	5963      	ldr	r3, [r4, r5]
 800a0a6:	001a      	movs	r2, r3
 800a0a8:	327c      	adds	r2, #124	; 0x7c
 800a0aa:	7812      	ldrb	r2, [r2, #0]
 800a0ac:	2a02      	cmp	r2, #2
 800a0ae:	d003      	beq.n	800a0b8 <LoRaMacProcess+0x78>
 800a0b0:	4aba      	ldr	r2, [pc, #744]	; (800a39c <LoRaMacProcess+0x35c>)
 800a0b2:	5ca2      	ldrb	r2, [r4, r2]
 800a0b4:	2a00      	cmp	r2, #0
 800a0b6:	d011      	beq.n	800a0dc <LoRaMacProcess+0x9c>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800a0b8:	2216      	movs	r2, #22
 800a0ba:	a914      	add	r1, sp, #80	; 0x50
 800a0bc:	700a      	strb	r2, [r1, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a0be:	7818      	ldrb	r0, [r3, #0]
 800a0c0:	f003 fd26 	bl	800db10 <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800a0c4:	23ed      	movs	r3, #237	; 0xed
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	4eb5      	ldr	r6, [pc, #724]	; (800a3a0 <LoRaMacProcess+0x360>)
 800a0ca:	58e1      	ldr	r1, [r4, r3]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a0cc:	9012      	str	r0, [sp, #72]	; 0x48
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800a0ce:	1809      	adds	r1, r1, r0
 800a0d0:	0030      	movs	r0, r6
 800a0d2:	f006 fdfb 	bl	8010ccc <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800a0d6:	0030      	movs	r0, r6
 800a0d8:	f006 fdb6 	bl	8010c48 <UTIL_TIMER_Start>
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 800a0dc:	4bb1      	ldr	r3, [pc, #708]	; (800a3a4 <LoRaMacProcess+0x364>)
    txDone.Channel = MacCtx.Channel;
 800a0de:	ae1e      	add	r6, sp, #120	; 0x78
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	5963      	ldr	r3, [r4, r5]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 800a0e4:	a810      	add	r0, sp, #64	; 0x40
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 800a0e6:	33fc      	adds	r3, #252	; 0xfc
 800a0e8:	655a      	str	r2, [r3, #84]	; 0x54
    txDone.Channel = MacCtx.Channel;
 800a0ea:	4baf      	ldr	r3, [pc, #700]	; (800a3a8 <LoRaMacProcess+0x368>)
 800a0ec:	5ce3      	ldrb	r3, [r4, r3]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800a0ee:	6072      	str	r2, [r6, #4]
    txDone.Channel = MacCtx.Channel;
 800a0f0:	7033      	strb	r3, [r6, #0]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 800a0f2:	f006 fc85 	bl	8010a00 <SysTimeGetMcuTime>
 800a0f6:	5963      	ldr	r3, [r4, r5]
 800a0f8:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a0fa:	001a      	movs	r2, r3
 800a0fc:	325d      	adds	r2, #93	; 0x5d
 800a0fe:	32ff      	adds	r2, #255	; 0xff
 800a100:	6812      	ldr	r2, [r2, #0]
 800a102:	a80a      	add	r0, sp, #40	; 0x28
 800a104:	9200      	str	r2, [sp, #0]
 800a106:	22ac      	movs	r2, #172	; 0xac
 800a108:	0052      	lsls	r2, r2, #1
 800a10a:	589b      	ldr	r3, [r3, r2]
 800a10c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a10e:	f006 fc0d 	bl	801092c <SysTimeSub>
 800a112:	ab21      	add	r3, sp, #132	; 0x84
 800a114:	aa0a      	add	r2, sp, #40	; 0x28
 800a116:	ca03      	ldmia	r2!, {r0, r1}
 800a118:	c303      	stmia	r3!, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800a11a:	2383      	movs	r3, #131	; 0x83
 800a11c:	00db      	lsls	r3, r3, #3
 800a11e:	58e3      	ldr	r3, [r4, r3]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800a120:	22b2      	movs	r2, #178	; 0xb2
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800a122:	60b3      	str	r3, [r6, #8]
    txDone.Joined  = true;
 800a124:	2301      	movs	r3, #1
 800a126:	7073      	strb	r3, [r6, #1]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800a128:	5963      	ldr	r3, [r4, r5]
 800a12a:	0052      	lsls	r2, r2, #1
 800a12c:	5c9a      	ldrb	r2, [r3, r2]
 800a12e:	2a00      	cmp	r2, #0
 800a130:	d100      	bne.n	800a134 <LoRaMacProcess+0xf4>
        txDone.Joined  = false;
 800a132:	7072      	strb	r2, [r6, #1]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 800a134:	7818      	ldrb	r0, [r3, #0]
 800a136:	0031      	movs	r1, r6
 800a138:	f003 fcf6 	bl	800db28 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 800a13c:	4b92      	ldr	r3, [pc, #584]	; (800a388 <LoRaMacProcess+0x348>)
 800a13e:	4a97      	ldr	r2, [pc, #604]	; (800a39c <LoRaMacProcess+0x35c>)
 800a140:	5c9a      	ldrb	r2, [r3, r2]
 800a142:	2a00      	cmp	r2, #0
 800a144:	d101      	bne.n	800a14a <LoRaMacProcess+0x10a>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a146:	4999      	ldr	r1, [pc, #612]	; (800a3ac <LoRaMacProcess+0x36c>)
 800a148:	545a      	strb	r2, [r3, r1]
        if( events.Events.RxDone == 1 )
 800a14a:	9b06      	ldr	r3, [sp, #24]
 800a14c:	071b      	lsls	r3, r3, #28
 800a14e:	d545      	bpl.n	800a1dc <LoRaMacProcess+0x19c>
    uint8_t *payload = RxDoneParams.Payload;
 800a150:	4b97      	ldr	r3, [pc, #604]	; (800a3b0 <LoRaMacProcess+0x370>)
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800a152:	4c8d      	ldr	r4, [pc, #564]	; (800a388 <LoRaMacProcess+0x348>)
    uint8_t *payload = RxDoneParams.Payload;
 800a154:	685a      	ldr	r2, [r3, #4]
 800a156:	9203      	str	r2, [sp, #12]
    int16_t rssi = RxDoneParams.Rssi;
 800a158:	210a      	movs	r1, #10
 800a15a:	5e5a      	ldrsh	r2, [r3, r1]
    uint16_t size = RxDoneParams.Size;
 800a15c:	891e      	ldrh	r6, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 800a15e:	9205      	str	r2, [sp, #20]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800a160:	4a8a      	ldr	r2, [pc, #552]	; (800a38c <LoRaMacProcess+0x34c>)
    int8_t snr = RxDoneParams.Snr;
 800a162:	7b1b      	ldrb	r3, [r3, #12]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800a164:	58a2      	ldr	r2, [r4, r2]
    int8_t snr = RxDoneParams.Snr;
 800a166:	b25b      	sxtb	r3, r3
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800a168:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    int8_t snr = RxDoneParams.Snr;
 800a16a:	9304      	str	r3, [sp, #16]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800a16c:	9208      	str	r2, [sp, #32]
    MacCtx.McpsConfirm.AckReceived = false;
 800a16e:	2288      	movs	r2, #136	; 0x88
    uint32_t downLinkCounter = 0;
 800a170:	2300      	movs	r3, #0
    MacCtx.McpsConfirm.AckReceived = false;
 800a172:	00d2      	lsls	r2, r2, #3
 800a174:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.Rssi = rssi;
 800a176:	9905      	ldr	r1, [sp, #20]
 800a178:	4a8e      	ldr	r2, [pc, #568]	; (800a3b4 <LoRaMacProcess+0x374>)
    uint32_t downLinkCounter = 0;
 800a17a:	930d      	str	r3, [sp, #52]	; 0x34
    MacCtx.McpsIndication.Rssi = rssi;
 800a17c:	52a1      	strh	r1, [r4, r2]
    MacCtx.McpsIndication.Snr = snr;
 800a17e:	9904      	ldr	r1, [sp, #16]
 800a180:	4a8d      	ldr	r2, [pc, #564]	; (800a3b8 <LoRaMacProcess+0x378>)
 800a182:	54a1      	strb	r1, [r4, r2]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 800a184:	3254      	adds	r2, #84	; 0x54
 800a186:	5ca2      	ldrb	r2, [r4, r2]
 800a188:	498c      	ldr	r1, [pc, #560]	; (800a3bc <LoRaMacProcess+0x37c>)
 800a18a:	5462      	strb	r2, [r4, r1]
    MacCtx.McpsIndication.Multicast = 0;
 800a18c:	4a8c      	ldr	r2, [pc, #560]	; (800a3c0 <LoRaMacProcess+0x380>)
 800a18e:	52a3      	strh	r3, [r4, r2]
    MacCtx.McpsIndication.FramePending = 0;
 800a190:	4a8c      	ldr	r2, [pc, #560]	; (800a3c4 <LoRaMacProcess+0x384>)
 800a192:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 800a194:	4a8c      	ldr	r2, [pc, #560]	; (800a3c8 <LoRaMacProcess+0x388>)
 800a196:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 800a198:	3204      	adds	r2, #4
 800a19a:	52a3      	strh	r3, [r4, r2]
    MacCtx.McpsIndication.AckReceived = false;
 800a19c:	4a8b      	ldr	r2, [pc, #556]	; (800a3cc <LoRaMacProcess+0x38c>)
 800a19e:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800a1a0:	3202      	adds	r2, #2
 800a1a2:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800a1a4:	4a8a      	ldr	r2, [pc, #552]	; (800a3d0 <LoRaMacProcess+0x390>)
 800a1a6:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 800a1a8:	4a8a      	ldr	r2, [pc, #552]	; (800a3d4 <LoRaMacProcess+0x394>)
 800a1aa:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800a1ac:	3204      	adds	r2, #4
 800a1ae:	54a3      	strb	r3, [r4, r2]
    Radio.Sleep( );
 800a1b0:	4b77      	ldr	r3, [pc, #476]	; (800a390 <LoRaMacProcess+0x350>)
 800a1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b4:	9307      	str	r3, [sp, #28]
 800a1b6:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800a1b8:	4877      	ldr	r0, [pc, #476]	; (800a398 <LoRaMacProcess+0x358>)
 800a1ba:	f006 fcf1 	bl	8010ba0 <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800a1be:	0031      	movs	r1, r6
 800a1c0:	9803      	ldr	r0, [sp, #12]
 800a1c2:	f001 ffa3 	bl	800c10c <LoRaMacClassBRxBeacon>
 800a1c6:	4b83      	ldr	r3, [pc, #524]	; (800a3d4 <LoRaMacProcess+0x394>)
 800a1c8:	1e05      	subs	r5, r0, #0
 800a1ca:	9307      	str	r3, [sp, #28]
 800a1cc:	d100      	bne.n	800a1d0 <LoRaMacProcess+0x190>
 800a1ce:	e111      	b.n	800a3f4 <LoRaMacProcess+0x3b4>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800a1d0:	4b81      	ldr	r3, [pc, #516]	; (800a3d8 <LoRaMacProcess+0x398>)
 800a1d2:	9a05      	ldr	r2, [sp, #20]
 800a1d4:	52e2      	strh	r2, [r4, r3]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800a1d6:	9a04      	ldr	r2, [sp, #16]
 800a1d8:	3302      	adds	r3, #2
 800a1da:	54e2      	strb	r2, [r4, r3]
        if( events.Events.TxTimeout == 1 )
 800a1dc:	9b06      	ldr	r3, [sp, #24]
 800a1de:	075b      	lsls	r3, r3, #29
 800a1e0:	d51c      	bpl.n	800a21c <LoRaMacProcess+0x1dc>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800a1e2:	4c69      	ldr	r4, [pc, #420]	; (800a388 <LoRaMacProcess+0x348>)
 800a1e4:	4b69      	ldr	r3, [pc, #420]	; (800a38c <LoRaMacProcess+0x34c>)
 800a1e6:	58e3      	ldr	r3, [r4, r3]
 800a1e8:	337c      	adds	r3, #124	; 0x7c
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	2b02      	cmp	r3, #2
 800a1ee:	d003      	beq.n	800a1f8 <LoRaMacProcess+0x1b8>
        Radio.Sleep( );
 800a1f0:	4b67      	ldr	r3, [pc, #412]	; (800a390 <LoRaMacProcess+0x350>)
 800a1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f4:	9303      	str	r3, [sp, #12]
 800a1f6:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 800a1f8:	f7fe feb8 	bl	8008f6c <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800a1fc:	2002      	movs	r0, #2
 800a1fe:	4b6b      	ldr	r3, [pc, #428]	; (800a3ac <LoRaMacProcess+0x36c>)
 800a200:	54e0      	strb	r0, [r4, r3]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800a202:	f002 ffa5 	bl	800d150 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800a206:	4b65      	ldr	r3, [pc, #404]	; (800a39c <LoRaMacProcess+0x35c>)
 800a208:	5ce3      	ldrb	r3, [r4, r3]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d002      	beq.n	800a214 <LoRaMacProcess+0x1d4>
        MacCtx.AckTimeoutRetry = true;
 800a20e:	2201      	movs	r2, #1
 800a210:	4b72      	ldr	r3, [pc, #456]	; (800a3dc <LoRaMacProcess+0x39c>)
 800a212:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacFlags.Bits.MacDone = 1;
 800a214:	2320      	movs	r3, #32
 800a216:	5de2      	ldrb	r2, [r4, r7]
 800a218:	4313      	orrs	r3, r2
 800a21a:	55e3      	strb	r3, [r4, r7]
        if( events.Events.RxError == 1 )
 800a21c:	9b06      	ldr	r3, [sp, #24]
 800a21e:	079b      	lsls	r3, r3, #30
 800a220:	d503      	bpl.n	800a22a <LoRaMacProcess+0x1ea>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800a222:	2106      	movs	r1, #6
 800a224:	2005      	movs	r0, #5
 800a226:	f7fe ff7d 	bl	8009124 <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
 800a22a:	9b06      	ldr	r3, [sp, #24]
 800a22c:	07db      	lsls	r3, r3, #31
 800a22e:	d503      	bpl.n	800a238 <LoRaMacProcess+0x1f8>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800a230:	2104      	movs	r1, #4
 800a232:	2003      	movs	r0, #3
 800a234:	f7fe ff76 	bl	8009124 <HandleRadioRxErrorTimeout>
    uint8_t noTx = 0x00;

    LoRaMacHandleIrqEvents( );
    LoRaMacClassBProcess( );
 800a238:	f002 fb0e 	bl	800c858 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800a23c:	4c52      	ldr	r4, [pc, #328]	; (800a388 <LoRaMacProcess+0x348>)
 800a23e:	5de2      	ldrb	r2, [r4, r7]
 800a240:	0693      	lsls	r3, r2, #26
 800a242:	d56c      	bpl.n	800a31e <LoRaMacProcess+0x2de>
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800a244:	21d0      	movs	r1, #208	; 0xd0
    MacCtx.AllowRequests = requestState;
 800a246:	2300      	movs	r3, #0
 800a248:	4865      	ldr	r0, [pc, #404]	; (800a3e0 <LoRaMacProcess+0x3a0>)
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800a24a:	0089      	lsls	r1, r1, #2
    MacCtx.AllowRequests = requestState;
 800a24c:	5423      	strb	r3, [r4, r0]
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800a24e:	5863      	ldr	r3, [r4, r1]
 800a250:	9003      	str	r0, [sp, #12]
 800a252:	0618      	lsls	r0, r3, #24
 800a254:	d502      	bpl.n	800a25c <LoRaMacProcess+0x21c>
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a256:	2082      	movs	r0, #130	; 0x82
 800a258:	4383      	bics	r3, r0
 800a25a:	5063      	str	r3, [r4, r1]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800a25c:	2305      	movs	r3, #5
 800a25e:	421a      	tst	r2, r3
 800a260:	d100      	bne.n	800a264 <LoRaMacProcess+0x224>
 800a262:	e31f      	b.n	800a8a4 <LoRaMacProcess+0x864>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800a264:	200c      	movs	r0, #12
 800a266:	f002 ff8f 	bl	800d188 <LoRaMacConfirmQueueIsCmdActive>
 800a26a:	2800      	cmp	r0, #0
 800a26c:	d100      	bne.n	800a270 <LoRaMacProcess+0x230>
 800a26e:	e319      	b.n	800a8a4 <LoRaMacProcess+0x864>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800a270:	5de3      	ldrb	r3, [r4, r7]
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800a272:	07da      	lsls	r2, r3, #31
 800a274:	d500      	bpl.n	800a278 <LoRaMacProcess+0x238>
 800a276:	e315      	b.n	800a8a4 <LoRaMacProcess+0x864>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800a278:	075b      	lsls	r3, r3, #29
 800a27a:	d400      	bmi.n	800a27e <LoRaMacProcess+0x23e>
 800a27c:	e328      	b.n	800a8d0 <LoRaMacProcess+0x890>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a27e:	22d0      	movs	r2, #208	; 0xd0
 800a280:	2302      	movs	r3, #2
 800a282:	0092      	lsls	r2, r2, #2
 800a284:	58a1      	ldr	r1, [r4, r2]
 800a286:	4399      	bics	r1, r3
 800a288:	50a1      	str	r1, [r4, r2]
    if( MacCtx.MacState == LORAMAC_IDLE )
 800a28a:	23d0      	movs	r3, #208	; 0xd0
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	58e3      	ldr	r3, [r4, r3]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d141      	bne.n	800a318 <LoRaMacProcess+0x2d8>
 800a294:	5de6      	ldrb	r6, [r4, r7]
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800a296:	3301      	adds	r3, #1
 800a298:	0031      	movs	r1, r6
 800a29a:	4019      	ands	r1, r3
 800a29c:	421e      	tst	r6, r3
 800a29e:	d002      	beq.n	800a2a6 <LoRaMacProcess+0x266>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800a2a0:	0032      	movs	r2, r6
 800a2a2:	439a      	bics	r2, r3
 800a2a4:	55e2      	strb	r2, [r4, r7]
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800a2a6:	2204      	movs	r2, #4
 800a2a8:	5de3      	ldrb	r3, [r4, r7]
 800a2aa:	4213      	tst	r3, r2
 800a2ac:	d001      	beq.n	800a2b2 <LoRaMacProcess+0x272>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800a2ae:	4393      	bics	r3, r2
 800a2b0:	55e3      	strb	r3, [r4, r7]
    MacCtx.AllowRequests = requestState;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	9a03      	ldr	r2, [sp, #12]
 800a2b6:	54a3      	strb	r3, [r4, r2]
        if( reqEvents.Bits.McpsReq == 1 )
 800a2b8:	2900      	cmp	r1, #0
 800a2ba:	d005      	beq.n	800a2c8 <LoRaMacProcess+0x288>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800a2bc:	23d1      	movs	r3, #209	; 0xd1
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	58e3      	ldr	r3, [r4, r3]
 800a2c2:	4848      	ldr	r0, [pc, #288]	; (800a3e4 <LoRaMacProcess+0x3a4>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800a2c8:	2504      	movs	r5, #4
 800a2ca:	422e      	tst	r6, r5
 800a2cc:	d009      	beq.n	800a2e2 <LoRaMacProcess+0x2a2>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800a2ce:	4846      	ldr	r0, [pc, #280]	; (800a3e8 <LoRaMacProcess+0x3a8>)
 800a2d0:	f002 ff66 	bl	800d1a0 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800a2d4:	f002 ff90 	bl	800d1f8 <LoRaMacConfirmQueueGetCnt>
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	d002      	beq.n	800a2e2 <LoRaMacProcess+0x2a2>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800a2dc:	5de3      	ldrb	r3, [r4, r7]
 800a2de:	431d      	orrs	r5, r3
 800a2e0:	55e5      	strb	r5, [r4, r7]
        LoRaMacClassBResumeBeaconing( );
 800a2e2:	f002 f875 	bl	800c3d0 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800a2e6:	2220      	movs	r2, #32
 800a2e8:	5de3      	ldrb	r3, [r4, r7]
 800a2ea:	4393      	bics	r3, r2
 800a2ec:	55e3      	strb	r3, [r4, r7]
    if( MacCtx.MacState == LORAMAC_IDLE )
 800a2ee:	23d0      	movs	r3, #208	; 0xd0
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	58e3      	ldr	r3, [r4, r3]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d10f      	bne.n	800a318 <LoRaMacProcess+0x2d8>
        bool isStickyMacCommandPending = false;
 800a2f8:	2558      	movs	r5, #88	; 0x58
 800a2fa:	aa08      	add	r2, sp, #32
 800a2fc:	1952      	adds	r2, r2, r5
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800a2fe:	a81e      	add	r0, sp, #120	; 0x78
        bool isStickyMacCommandPending = false;
 800a300:	7013      	strb	r3, [r2, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800a302:	f002 fe5f 	bl	800cfc4 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800a306:	ab08      	add	r3, sp, #32
 800a308:	195b      	adds	r3, r3, r5
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d003      	beq.n	800a318 <LoRaMacProcess+0x2d8>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800a310:	2310      	movs	r3, #16
 800a312:	5de2      	ldrb	r2, [r4, r7]
 800a314:	4313      	orrs	r3, r2
 800a316:	55e3      	strb	r3, [r4, r7]
    MacCtx.AllowRequests = requestState;
 800a318:	2301      	movs	r3, #1
 800a31a:	9a03      	ldr	r2, [sp, #12]
 800a31c:	54a3      	strb	r3, [r4, r2]
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800a31e:	2208      	movs	r2, #8
 800a320:	5de3      	ldrb	r3, [r4, r7]
 800a322:	4213      	tst	r3, r2
 800a324:	d007      	beq.n	800a336 <LoRaMacProcess+0x2f6>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800a326:	4393      	bics	r3, r2
 800a328:	55e3      	strb	r3, [r4, r7]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 800a32a:	23d1      	movs	r3, #209	; 0xd1
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	58e3      	ldr	r3, [r4, r3]
 800a330:	482e      	ldr	r0, [pc, #184]	; (800a3ec <LoRaMacProcess+0x3ac>)
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800a336:	2510      	movs	r5, #16
 800a338:	5de3      	ldrb	r3, [r4, r7]
 800a33a:	422b      	tst	r3, r5
 800a33c:	d00a      	beq.n	800a354 <LoRaMacProcess+0x314>
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800a33e:	2307      	movs	r3, #7
 800a340:	a81e      	add	r0, sp, #120	; 0x78
 800a342:	8003      	strh	r3, [r0, #0]
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 800a344:	23d1      	movs	r3, #209	; 0xd1
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	58e3      	ldr	r3, [r4, r3]
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800a34e:	5de3      	ldrb	r3, [r4, r7]
 800a350:	43ab      	bics	r3, r5
 800a352:	55e3      	strb	r3, [r4, r7]
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800a354:	2202      	movs	r2, #2
 800a356:	5de3      	ldrb	r3, [r4, r7]
 800a358:	4213      	tst	r3, r2
 800a35a:	d007      	beq.n	800a36c <LoRaMacProcess+0x32c>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800a35c:	4393      	bics	r3, r2
 800a35e:	55e3      	strb	r3, [r4, r7]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 800a360:	23d1      	movs	r3, #209	; 0xd1
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	58e3      	ldr	r3, [r4, r3]
 800a366:	4822      	ldr	r0, [pc, #136]	; (800a3f0 <LoRaMacProcess+0x3b0>)
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	4798      	blx	r3
        LoRaMacHandleRequestEvents( );
        LoRaMacHandleScheduleUplinkEvent( );
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
    }
    LoRaMacHandleIndicationEvents( );
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800a36c:	2390      	movs	r3, #144	; 0x90
 800a36e:	00db      	lsls	r3, r3, #3
 800a370:	5ce3      	ldrb	r3, [r4, r3]
 800a372:	2b02      	cmp	r3, #2
 800a374:	d101      	bne.n	800a37a <LoRaMacProcess+0x33a>
    {
        OpenContinuousRxCWindow( );
 800a376:	f7ff fa55 	bl	8009824 <OpenContinuousRxCWindow>
    }
}
 800a37a:	b02b      	add	sp, #172	; 0xac
 800a37c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a37e:	46c0      	nop			; (mov r8, r8)
 800a380:	20000524 	.word	0x20000524
 800a384:	00000481 	.word	0x00000481
 800a388:	200006cc 	.word	0x200006cc
 800a38c:	00000484 	.word	0x00000484
 800a390:	080117e0 	.word	0x080117e0
 800a394:	20000a4c 	.word	0x20000a4c
 800a398:	20000a64 	.word	0x20000a64
 800a39c:	00000414 	.word	0x00000414
 800a3a0:	20000ac4 	.word	0x20000ac4
 800a3a4:	20001618 	.word	0x20001618
 800a3a8:	00000415 	.word	0x00000415
 800a3ac:	0000043d 	.word	0x0000043d
 800a3b0:	2000161c 	.word	0x2000161c
 800a3b4:	0000042a 	.word	0x0000042a
 800a3b8:	0000042c 	.word	0x0000042c
 800a3bc:	0000042d 	.word	0x0000042d
 800a3c0:	0000041e 	.word	0x0000041e
 800a3c4:	00000421 	.word	0x00000421
 800a3c8:	00000424 	.word	0x00000424
 800a3cc:	0000042e 	.word	0x0000042e
 800a3d0:	0000041c 	.word	0x0000041c
 800a3d4:	00000434 	.word	0x00000434
 800a3d8:	00000476 	.word	0x00000476
 800a3dc:	00000413 	.word	0x00000413
 800a3e0:	00000482 	.word	0x00000482
 800a3e4:	20000b08 	.word	0x20000b08
 800a3e8:	20000b1c 	.word	0x20000b1c
 800a3ec:	20000b30 	.word	0x20000b30
 800a3f0:	20000ae8 	.word	0x20000ae8
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800a3f4:	4bcb      	ldr	r3, [pc, #812]	; (800a724 <LoRaMacProcess+0x6e4>)
 800a3f6:	58e3      	ldr	r3, [r4, r3]
 800a3f8:	9305      	str	r3, [sp, #20]
 800a3fa:	337c      	adds	r3, #124	; 0x7c
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d10d      	bne.n	800a41e <LoRaMacProcess+0x3de>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800a402:	f001 ff77 	bl	800c2f4 <LoRaMacClassBIsPingExpected>
 800a406:	9005      	str	r0, [sp, #20]
 800a408:	2800      	cmp	r0, #0
 800a40a:	d019      	beq.n	800a440 <LoRaMacProcess+0x400>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a40c:	0028      	movs	r0, r5
 800a40e:	f001 fe71 	bl	800c0f4 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800a412:	0028      	movs	r0, r5
 800a414:	f001 fc1e 	bl	800bc54 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800a418:	2304      	movs	r3, #4
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800a41a:	4ac3      	ldr	r2, [pc, #780]	; (800a728 <LoRaMacProcess+0x6e8>)
 800a41c:	54a3      	strb	r3, [r4, r2]
    macHdr.Value = payload[pktHeaderLen++];
 800a41e:	9b03      	ldr	r3, [sp, #12]
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	0958      	lsrs	r0, r3, #5
 800a424:	3801      	subs	r0, #1
 800a426:	9307      	str	r3, [sp, #28]
    switch( macHdr.Bits.MType )
 800a428:	2806      	cmp	r0, #6
 800a42a:	d900      	bls.n	800a42e <LoRaMacProcess+0x3ee>
 800a42c:	e22c      	b.n	800a888 <LoRaMacProcess+0x848>
 800a42e:	f7f5 fe91 	bl	8000154 <__gnu_thumb1_case_uhi>
 800a432:	0013      	.short	0x0013
 800a434:	009a022b 	.word	0x009a022b
 800a438:	0097022b 	.word	0x0097022b
 800a43c:	021b022b 	.word	0x021b022b
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a440:	f001 ff62 	bl	800c308 <LoRaMacClassBIsMulticastExpected>
 800a444:	2800      	cmp	r0, #0
 800a446:	d0ea      	beq.n	800a41e <LoRaMacProcess+0x3de>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a448:	9805      	ldr	r0, [sp, #20]
 800a44a:	f001 fe59 	bl	800c100 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800a44e:	9805      	ldr	r0, [sp, #20]
 800a450:	f001 fc12 	bl	800bc78 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800a454:	2305      	movs	r3, #5
 800a456:	e7e0      	b.n	800a41a <LoRaMacProcess+0x3da>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800a458:	2e10      	cmp	r6, #16
 800a45a:	d806      	bhi.n	800a46a <LoRaMacProcess+0x42a>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a45c:	2101      	movs	r1, #1
 800a45e:	4ab3      	ldr	r2, [pc, #716]	; (800a72c <LoRaMacProcess+0x6ec>)
 800a460:	4bb3      	ldr	r3, [pc, #716]	; (800a730 <LoRaMacProcess+0x6f0>)
 800a462:	54d1      	strb	r1, [r2, r3]
                PrepareRxDoneAbort( );
 800a464:	f7fe fe40 	bl	80090e8 <PrepareRxDoneAbort>
                return;
 800a468:	e6b8      	b.n	800a1dc <LoRaMacProcess+0x19c>
            macMsgJoinAccept.Buffer = payload;
 800a46a:	9b03      	ldr	r3, [sp, #12]
 800a46c:	ad14      	add	r5, sp, #80	; 0x50
 800a46e:	9314      	str	r3, [sp, #80]	; 0x50
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 800a470:	4bac      	ldr	r3, [pc, #688]	; (800a724 <LoRaMacProcess+0x6e4>)
            macMsgJoinAccept.BufSize = size;
 800a472:	b2f6      	uxtb	r6, r6
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 800a474:	58e3      	ldr	r3, [r4, r3]
            macMsgJoinAccept.BufSize = size;
 800a476:	712e      	strb	r6, [r5, #4]
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 800a478:	9303      	str	r3, [sp, #12]
 800a47a:	23b2      	movs	r3, #178	; 0xb2
 800a47c:	9a03      	ldr	r2, [sp, #12]
 800a47e:	005b      	lsls	r3, r3, #1
 800a480:	5cd3      	ldrb	r3, [r2, r3]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d1ea      	bne.n	800a45c <LoRaMacProcess+0x41c>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800a486:	f7fd ff91 	bl	80083ac <SecureElementGetJoinEui>
 800a48a:	002a      	movs	r2, r5
 800a48c:	0001      	movs	r1, r0
 800a48e:	20ff      	movs	r0, #255	; 0xff
 800a490:	f003 f990 	bl	800d7b4 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800a494:	2800      	cmp	r0, #0
 800a496:	d15b      	bne.n	800a550 <LoRaMacProcess+0x510>
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800a498:	7aaa      	ldrb	r2, [r5, #10]
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800a49a:	7ae9      	ldrb	r1, [r5, #11]
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800a49c:	4ba1      	ldr	r3, [pc, #644]	; (800a724 <LoRaMacProcess+0x6e4>)
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800a49e:	0409      	lsls	r1, r1, #16
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800a4a0:	0212      	lsls	r2, r2, #8
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800a4a2:	58e3      	ldr	r3, [r4, r3]
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800a4a4:	430a      	orrs	r2, r1
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800a4a6:	7a69      	ldrb	r1, [r5, #9]
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800a4a8:	430a      	orrs	r2, r1
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800a4aa:	0019      	movs	r1, r3
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800a4ac:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 800a4ae:	68ea      	ldr	r2, [r5, #12]
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800a4b0:	31a5      	adds	r1, #165	; 0xa5
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 800a4b2:	64da      	str	r2, [r3, #76]	; 0x4c
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800a4b4:	7c2a      	ldrb	r2, [r5, #16]
 800a4b6:	0652      	lsls	r2, r2, #25
 800a4b8:	0f52      	lsrs	r2, r2, #29
 800a4ba:	700a      	strb	r2, [r1, #0]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a4bc:	7c2a      	ldrb	r2, [r5, #16]
 800a4be:	0712      	lsls	r2, r2, #28
 800a4c0:	0f12      	lsrs	r2, r2, #28
 800a4c2:	71ca      	strb	r2, [r1, #7]
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a4c4:	73ca      	strb	r2, [r1, #15]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800a4c6:	7c6a      	ldrb	r2, [r5, #17]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 800a4c8:	3911      	subs	r1, #17
 800a4ca:	2a00      	cmp	r2, #0
 800a4cc:	d03e      	beq.n	800a54c <LoRaMacProcess+0x50c>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 800a4ce:	600a      	str	r2, [r1, #0]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 800a4d0:	22fa      	movs	r2, #250	; 0xfa
 800a4d2:	6808      	ldr	r0, [r1, #0]
 800a4d4:	0092      	lsls	r2, r2, #2
 800a4d6:	4342      	muls	r2, r0
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800a4d8:	20fa      	movs	r0, #250	; 0xfa
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 800a4da:	600a      	str	r2, [r1, #0]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800a4dc:	0019      	movs	r1, r3
 800a4de:	0080      	lsls	r0, r0, #2
 800a4e0:	1812      	adds	r2, r2, r0
 800a4e2:	3198      	adds	r1, #152	; 0x98
 800a4e4:	600a      	str	r2, [r1, #0]
                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 800a4e6:	22b1      	movs	r2, #177	; 0xb1
 800a4e8:	2500      	movs	r5, #0
 800a4ea:	0052      	lsls	r2, r2, #1
 800a4ec:	549d      	strb	r5, [r3, r2]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800a4ee:	a912      	add	r1, sp, #72	; 0x48
 800a4f0:	3a21      	subs	r2, #33	; 0x21
                applyCFList.Size = size - 17;
 800a4f2:	3e11      	subs	r6, #17
 800a4f4:	710e      	strb	r6, [r1, #4]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800a4f6:	a808      	add	r0, sp, #32
 800a4f8:	3aff      	subs	r2, #255	; 0xff
 800a4fa:	1812      	adds	r2, r2, r0
                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 800a4fc:	7818      	ldrb	r0, [r3, #0]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800a4fe:	9212      	str	r2, [sp, #72]	; 0x48
                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 800a500:	f003 fb36 	bl	800db70 <RegionApplyCFList>
                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 800a504:	4b87      	ldr	r3, [pc, #540]	; (800a724 <LoRaMacProcess+0x6e4>)
 800a506:	2102      	movs	r1, #2
 800a508:	58e2      	ldr	r2, [r4, r3]
 800a50a:	23b2      	movs	r3, #178	; 0xb2
 800a50c:	005b      	lsls	r3, r3, #1
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a50e:	2001      	movs	r0, #1
                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 800a510:	54d1      	strb	r1, [r2, r3]
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a512:	f002 fe39 	bl	800d188 <LoRaMacConfirmQueueIsCmdActive>
 800a516:	42a8      	cmp	r0, r5
 800a518:	d003      	beq.n	800a522 <LoRaMacProcess+0x4e2>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800a51a:	2101      	movs	r1, #1
 800a51c:	0028      	movs	r0, r5
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800a51e:	f002 fdf1 	bl	800d104 <LoRaMacConfirmQueueSetStatus>
    if( MacCtx.NodeAckRequested == true )
 800a522:	4c82      	ldr	r4, [pc, #520]	; (800a72c <LoRaMacProcess+0x6ec>)
 800a524:	4b83      	ldr	r3, [pc, #524]	; (800a734 <LoRaMacProcess+0x6f4>)
 800a526:	5ce3      	ldrb	r3, [r4, r3]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d100      	bne.n	800a52e <LoRaMacProcess+0x4ee>
 800a52c:	e1b2      	b.n	800a894 <LoRaMacProcess+0x854>
        if( MacCtx.McpsConfirm.AckReceived == true )
 800a52e:	2388      	movs	r3, #136	; 0x88
 800a530:	00db      	lsls	r3, r3, #3
 800a532:	5ce3      	ldrb	r3, [r4, r3]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d002      	beq.n	800a53e <LoRaMacProcess+0x4fe>
            OnAckTimeoutTimerEvent( NULL );
 800a538:	2000      	movs	r0, #0
 800a53a:	f7fe fda7 	bl	800908c <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.MacDone = 1;
 800a53e:	2320      	movs	r3, #32
 800a540:	5de2      	ldrb	r2, [r4, r7]
 800a542:	4313      	orrs	r3, r2
 800a544:	55e3      	strb	r3, [r4, r7]
    UpdateRxSlotIdleState( );
 800a546:	f7fe fd11 	bl	8008f6c <UpdateRxSlotIdleState>
 800a54a:	e647      	b.n	800a1dc <LoRaMacProcess+0x19c>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 800a54c:	2201      	movs	r2, #1
 800a54e:	e7be      	b.n	800a4ce <LoRaMacProcess+0x48e>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a550:	2001      	movs	r0, #1
 800a552:	f002 fe19 	bl	800d188 <LoRaMacConfirmQueueIsCmdActive>
 800a556:	2800      	cmp	r0, #0
 800a558:	d0e3      	beq.n	800a522 <LoRaMacProcess+0x4e2>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800a55a:	2101      	movs	r1, #1
 800a55c:	2007      	movs	r0, #7
 800a55e:	e7de      	b.n	800a51e <LoRaMacProcess+0x4de>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a560:	2301      	movs	r3, #1
 800a562:	4a75      	ldr	r2, [pc, #468]	; (800a738 <LoRaMacProcess+0x6f8>)
 800a564:	54a3      	strb	r3, [r4, r2]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800a566:	4c71      	ldr	r4, [pc, #452]	; (800a72c <LoRaMacProcess+0x6ec>)
 800a568:	4b6e      	ldr	r3, [pc, #440]	; (800a724 <LoRaMacProcess+0x6e4>)
 800a56a:	a90e      	add	r1, sp, #56	; 0x38
 800a56c:	58e3      	ldr	r3, [r4, r3]
 800a56e:	001a      	movs	r2, r3
 800a570:	32b9      	adds	r2, #185	; 0xb9
 800a572:	7812      	ldrb	r2, [r2, #0]
 800a574:	708a      	strb	r2, [r1, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800a576:	2284      	movs	r2, #132	; 0x84
 800a578:	00d2      	lsls	r2, r2, #3
 800a57a:	5ca2      	ldrb	r2, [r4, r2]
 800a57c:	704a      	strb	r2, [r1, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800a57e:	220d      	movs	r2, #13
 800a580:	700a      	strb	r2, [r1, #0]
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 800a582:	001a      	movs	r2, r3
 800a584:	32ca      	adds	r2, #202	; 0xca
 800a586:	7812      	ldrb	r2, [r2, #0]
 800a588:	2a00      	cmp	r2, #0
 800a58a:	d001      	beq.n	800a590 <LoRaMacProcess+0x550>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800a58c:	220e      	movs	r2, #14
 800a58e:	700a      	strb	r2, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a590:	7818      	ldrb	r0, [r3, #0]
 800a592:	f003 fabd 	bl	800db10 <RegionGetPhyParam>
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800a596:	0032      	movs	r2, r6
 800a598:	3a0d      	subs	r2, #13
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a59a:	900c      	str	r0, [sp, #48]	; 0x30
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800a59c:	1c13      	adds	r3, r2, #0
 800a59e:	0412      	lsls	r2, r2, #16
 800a5a0:	d500      	bpl.n	800a5a4 <LoRaMacProcess+0x564>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5a6:	b21b      	sxth	r3, r3
 800a5a8:	b212      	sxth	r2, r2
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	dd00      	ble.n	800a5b0 <LoRaMacProcess+0x570>
 800a5ae:	e755      	b.n	800a45c <LoRaMacProcess+0x41c>
 800a5b0:	2e0b      	cmp	r6, #11
 800a5b2:	d800      	bhi.n	800a5b6 <LoRaMacProcess+0x576>
 800a5b4:	e752      	b.n	800a45c <LoRaMacProcess+0x41c>
            macMsgData.BufSize = size;
 800a5b6:	225c      	movs	r2, #92	; 0x5c
            macMsgData.Buffer = payload;
 800a5b8:	9b03      	ldr	r3, [sp, #12]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800a5ba:	a81e      	add	r0, sp, #120	; 0x78
            macMsgData.Buffer = payload;
 800a5bc:	931e      	str	r3, [sp, #120]	; 0x78
            macMsgData.BufSize = size;
 800a5be:	ab08      	add	r3, sp, #32
 800a5c0:	189b      	adds	r3, r3, r2
 800a5c2:	701e      	strb	r6, [r3, #0]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800a5c4:	4b5d      	ldr	r3, [pc, #372]	; (800a73c <LoRaMacProcess+0x6fc>)
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800a5c6:	32a3      	adds	r2, #163	; 0xa3
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800a5c8:	9327      	str	r3, [sp, #156]	; 0x9c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800a5ca:	ab28      	add	r3, sp, #160	; 0xa0
 800a5cc:	701a      	strb	r2, [r3, #0]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800a5ce:	f003 f99b 	bl	800d908 <LoRaMacParserData>
 800a5d2:	9005      	str	r0, [sp, #20]
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	d000      	beq.n	800a5da <LoRaMacProcess+0x59a>
 800a5d8:	e740      	b.n	800a45c <LoRaMacProcess+0x41c>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800a5da:	2264      	movs	r2, #100	; 0x64
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800a5dc:	4b58      	ldr	r3, [pc, #352]	; (800a740 <LoRaMacProcess+0x700>)
 800a5de:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a5e0:	50e1      	str	r1, [r4, r3]
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800a5e2:	ab08      	add	r3, sp, #32
 800a5e4:	189b      	adds	r3, r3, r2
 800a5e6:	781a      	ldrb	r2, [r3, #0]
 800a5e8:	230f      	movs	r3, #15
 800a5ea:	0010      	movs	r0, r2
 800a5ec:	4018      	ands	r0, r3
 800a5ee:	421a      	tst	r2, r3
 800a5f0:	d005      	beq.n	800a5fe <LoRaMacProcess+0x5be>
 800a5f2:	334a      	adds	r3, #74	; 0x4a
 800a5f4:	ac08      	add	r4, sp, #32
 800a5f6:	191b      	adds	r3, r3, r4
 800a5f8:	7fdb      	ldrb	r3, [r3, #31]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d151      	bne.n	800a6a2 <LoRaMacProcess+0x662>
    else if( macMsg->FRMPayloadSize == 0 )
 800a5fe:	ab28      	add	r3, sp, #160	; 0xa0
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d04f      	beq.n	800a6a6 <LoRaMacProcess+0x666>
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800a606:	2800      	cmp	r0, #0
 800a608:	d000      	beq.n	800a60c <LoRaMacProcess+0x5cc>
 800a60a:	e727      	b.n	800a45c <LoRaMacProcess+0x41c>
 800a60c:	2359      	movs	r3, #89	; 0x59
 800a60e:	a808      	add	r0, sp, #32
 800a610:	181b      	adds	r3, r3, r0
 800a612:	7fdb      	ldrb	r3, [r3, #31]
        *fType = FRAME_TYPE_D;
 800a614:	1e58      	subs	r0, r3, #1
 800a616:	4183      	sbcs	r3, r0
 800a618:	3302      	adds	r3, #2
        *fType = FRAME_TYPE_B;
 800a61a:	9303      	str	r3, [sp, #12]
            downLinkCounter = 0;
 800a61c:	2300      	movs	r3, #0
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a61e:	4c43      	ldr	r4, [pc, #268]	; (800a72c <LoRaMacProcess+0x6ec>)
            downLinkCounter = 0;
 800a620:	930d      	str	r3, [sp, #52]	; 0x34
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a622:	4b40      	ldr	r3, [pc, #256]	; (800a724 <LoRaMacProcess+0x6e4>)
 800a624:	58e3      	ldr	r3, [r4, r3]
 800a626:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800a628:	4281      	cmp	r1, r0
 800a62a:	d13e      	bne.n	800a6aa <LoRaMacProcess+0x66a>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800a62c:	0019      	movs	r1, r3
 800a62e:	3152      	adds	r1, #82	; 0x52
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a630:	7809      	ldrb	r1, [r1, #0]
 800a632:	2501      	movs	r5, #1
 800a634:	2900      	cmp	r1, #0
 800a636:	d018      	beq.n	800a66a <LoRaMacProcess+0x62a>
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 800a638:	0019      	movs	r1, r3
 800a63a:	3153      	adds	r1, #83	; 0x53
 800a63c:	780d      	ldrb	r5, [r1, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 800a63e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a640:	6809      	ldr	r1, [r1, #0]
 800a642:	910d      	str	r1, [sp, #52]	; 0x34
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800a644:	0019      	movs	r1, r3
 800a646:	317c      	adds	r1, #124	; 0x7c
 800a648:	7809      	ldrb	r1, [r1, #0]
 800a64a:	2902      	cmp	r1, #2
 800a64c:	d102      	bne.n	800a654 <LoRaMacProcess+0x614>
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800a64e:	4e36      	ldr	r6, [pc, #216]	; (800a728 <LoRaMacProcess+0x6e8>)
 800a650:	3101      	adds	r1, #1
 800a652:	55a1      	strb	r1, [r4, r6]
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800a654:	9903      	ldr	r1, [sp, #12]
 800a656:	2903      	cmp	r1, #3
 800a658:	d000      	beq.n	800a65c <LoRaMacProcess+0x61c>
 800a65a:	e6ff      	b.n	800a45c <LoRaMacProcess+0x41c>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800a65c:	2160      	movs	r1, #96	; 0x60
 800a65e:	420a      	tst	r2, r1
 800a660:	d000      	beq.n	800a664 <LoRaMacProcess+0x624>
 800a662:	e6fb      	b.n	800a45c <LoRaMacProcess+0x41c>
 800a664:	2201      	movs	r2, #1
 800a666:	9008      	str	r0, [sp, #32]
 800a668:	9205      	str	r2, [sp, #20]
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800a66a:	2215      	movs	r2, #21
 800a66c:	a90e      	add	r1, sp, #56	; 0x38
 800a66e:	700a      	strb	r2, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a670:	7818      	ldrb	r0, [r3, #0]
 800a672:	f003 fa4d 	bl	800db10 <RegionGetPhyParam>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800a676:	4a2b      	ldr	r2, [pc, #172]	; (800a724 <LoRaMacProcess+0x6e4>)
 800a678:	4b2c      	ldr	r3, [pc, #176]	; (800a72c <LoRaMacProcess+0x6ec>)
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a67a:	900c      	str	r0, [sp, #48]	; 0x30
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800a67c:	589b      	ldr	r3, [r3, r2]
 800a67e:	9309      	str	r3, [sp, #36]	; 0x24
 800a680:	23b1      	movs	r3, #177	; 0xb1
 800a682:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a684:	005b      	lsls	r3, r3, #1
 800a686:	5cd4      	ldrb	r4, [r2, r3]
    switch( addrID )
 800a688:	2d00      	cmp	r5, #0
 800a68a:	d010      	beq.n	800a6ae <LoRaMacProcess+0x66e>
 800a68c:	2d01      	cmp	r5, #1
 800a68e:	d145      	bne.n	800a71c <LoRaMacProcess+0x6dc>
            if( lrWanVersion.Fields.Minor == 1 )
 800a690:	2c01      	cmp	r4, #1
 800a692:	d13a      	bne.n	800a70a <LoRaMacProcess+0x6ca>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800a694:	9b03      	ldr	r3, [sp, #12]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d001      	beq.n	800a69e <LoRaMacProcess+0x65e>
 800a69a:	2b03      	cmp	r3, #3
 800a69c:	d108      	bne.n	800a6b0 <LoRaMacProcess+0x670>
                    *fCntID = A_FCNT_DOWN;
 800a69e:	2402      	movs	r4, #2
 800a6a0:	e006      	b.n	800a6b0 <LoRaMacProcess+0x670>
        *fType = FRAME_TYPE_A;
 800a6a2:	9b05      	ldr	r3, [sp, #20]
 800a6a4:	e7b9      	b.n	800a61a <LoRaMacProcess+0x5da>
        *fType = FRAME_TYPE_B;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e7b7      	b.n	800a61a <LoRaMacProcess+0x5da>
 800a6aa:	2501      	movs	r5, #1
 800a6ac:	e7dd      	b.n	800a66a <LoRaMacProcess+0x62a>
    switch( addrID )
 800a6ae:	2404      	movs	r4, #4
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800a6b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6b2:	ae1e      	add	r6, sp, #120	; 0x78
 800a6b4:	b299      	uxth	r1, r3
 800a6b6:	0020      	movs	r0, r4
 800a6b8:	89f2      	ldrh	r2, [r6, #14]
 800a6ba:	ab0d      	add	r3, sp, #52	; 0x34
 800a6bc:	f002 ff00 	bl	800d4c0 <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	d03f      	beq.n	800a744 <LoRaMacProcess+0x704>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800a6c4:	2807      	cmp	r0, #7
 800a6c6:	d122      	bne.n	800a70e <LoRaMacProcess+0x6ce>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800a6c8:	2308      	movs	r3, #8
 800a6ca:	4a18      	ldr	r2, [pc, #96]	; (800a72c <LoRaMacProcess+0x6ec>)
 800a6cc:	4918      	ldr	r1, [pc, #96]	; (800a730 <LoRaMacProcess+0x6f0>)
 800a6ce:	5453      	strb	r3, [r2, r1]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 800a6d0:	0013      	movs	r3, r2
 800a6d2:	4a14      	ldr	r2, [pc, #80]	; (800a724 <LoRaMacProcess+0x6e4>)
 800a6d4:	589b      	ldr	r3, [r3, r2]
 800a6d6:	22b1      	movs	r2, #177	; 0xb1
 800a6d8:	0052      	lsls	r2, r2, #1
 800a6da:	5c9a      	ldrb	r2, [r3, r2]
 800a6dc:	2a00      	cmp	r2, #0
 800a6de:	d10e      	bne.n	800a6fe <LoRaMacProcess+0x6be>
 800a6e0:	9907      	ldr	r1, [sp, #28]
 800a6e2:	321f      	adds	r2, #31
 800a6e4:	4391      	bics	r1, r2
 800a6e6:	29a0      	cmp	r1, #160	; 0xa0
 800a6e8:	d109      	bne.n	800a6fe <LoRaMacProcess+0x6be>
 800a6ea:	001a      	movs	r2, r3
 800a6ec:	32fc      	adds	r2, #252	; 0xfc
 800a6ee:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
 800a6f0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800a6f2:	4291      	cmp	r1, r2
 800a6f4:	d103      	bne.n	800a6fe <LoRaMacProcess+0x6be>
                        MacCtx.NvmCtx->SrvAckRequested = true;
 800a6f6:	224c      	movs	r2, #76	; 0x4c
 800a6f8:	2101      	movs	r1, #1
 800a6fa:	32ff      	adds	r2, #255	; 0xff
 800a6fc:	5499      	strb	r1, [r3, r2]
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a6fe:	2386      	movs	r3, #134	; 0x86
 800a700:	4a0a      	ldr	r2, [pc, #40]	; (800a72c <LoRaMacProcess+0x6ec>)
 800a702:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a704:	00db      	lsls	r3, r3, #3
 800a706:	50d1      	str	r1, [r2, r3]
                PrepareRxDoneAbort( );
 800a708:	e6ac      	b.n	800a464 <LoRaMacProcess+0x424>
                *fCntID = FCNT_DOWN;
 800a70a:	2403      	movs	r4, #3
 800a70c:	e7d0      	b.n	800a6b0 <LoRaMacProcess+0x670>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800a70e:	2808      	cmp	r0, #8
 800a710:	d104      	bne.n	800a71c <LoRaMacProcess+0x6dc>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800a712:	220a      	movs	r2, #10
 800a714:	4b05      	ldr	r3, [pc, #20]	; (800a72c <LoRaMacProcess+0x6ec>)
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a716:	4906      	ldr	r1, [pc, #24]	; (800a730 <LoRaMacProcess+0x6f0>)
 800a718:	545a      	strb	r2, [r3, r1]
 800a71a:	e7f0      	b.n	800a6fe <LoRaMacProcess+0x6be>
 800a71c:	2201      	movs	r2, #1
 800a71e:	4b03      	ldr	r3, [pc, #12]	; (800a72c <LoRaMacProcess+0x6ec>)
 800a720:	e7f9      	b.n	800a716 <LoRaMacProcess+0x6d6>
 800a722:	46c0      	nop			; (mov r8, r8)
 800a724:	00000484 	.word	0x00000484
 800a728:	0000042d 	.word	0x0000042d
 800a72c:	200006cc 	.word	0x200006cc
 800a730:	0000041d 	.word	0x0000041d
 800a734:	00000414 	.word	0x00000414
 800a738:	0000041c 	.word	0x0000041c
 800a73c:	20000904 	.word	0x20000904
 800a740:	00000434 	.word	0x00000434
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800a744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a746:	0022      	movs	r2, r4
 800a748:	0028      	movs	r0, r5
 800a74a:	9908      	ldr	r1, [sp, #32]
 800a74c:	9600      	str	r6, [sp, #0]
 800a74e:	f002 ff91 	bl	800d674 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a752:	4ba6      	ldr	r3, [pc, #664]	; (800a9ec <LoRaMacProcess+0x9ac>)
 800a754:	2800      	cmp	r0, #0
 800a756:	d006      	beq.n	800a766 <LoRaMacProcess+0x726>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800a758:	3802      	subs	r0, #2
 800a75a:	1e42      	subs	r2, r0, #1
 800a75c:	4190      	sbcs	r0, r2
 800a75e:	4aa4      	ldr	r2, [pc, #656]	; (800a9f0 <LoRaMacProcess+0x9b0>)
 800a760:	300b      	adds	r0, #11
 800a762:	5498      	strb	r0, [r3, r2]
 800a764:	e67e      	b.n	800a464 <LoRaMacProcess+0x424>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a766:	4aa2      	ldr	r2, [pc, #648]	; (800a9f0 <LoRaMacProcess+0x9b0>)
            MacCtx.McpsIndication.Multicast = multicast;
 800a768:	9905      	ldr	r1, [sp, #20]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a76a:	5498      	strb	r0, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 800a76c:	4aa1      	ldr	r2, [pc, #644]	; (800a9f4 <LoRaMacProcess+0x9b4>)
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800a76e:	4ca2      	ldr	r4, [pc, #648]	; (800a9f8 <LoRaMacProcess+0x9b8>)
            MacCtx.McpsIndication.Multicast = multicast;
 800a770:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800a772:	7b32      	ldrb	r2, [r6, #12]
 800a774:	06d1      	lsls	r1, r2, #27
 800a776:	0fc9      	lsrs	r1, r1, #31
 800a778:	5519      	strb	r1, [r3, r4]
            MacCtx.McpsIndication.Buffer = NULL;
 800a77a:	49a0      	ldr	r1, [pc, #640]	; (800a9fc <LoRaMacProcess+0x9bc>)
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a77c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
            MacCtx.McpsIndication.Buffer = NULL;
 800a77e:	5058      	str	r0, [r3, r1]
            MacCtx.McpsIndication.BufferSize = 0;
 800a780:	3104      	adds	r1, #4
 800a782:	5458      	strb	r0, [r3, r1]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a784:	3108      	adds	r1, #8
 800a786:	505c      	str	r4, [r3, r1]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a788:	0692      	lsls	r2, r2, #26
 800a78a:	499d      	ldr	r1, [pc, #628]	; (800aa00 <LoRaMacProcess+0x9c0>)
 800a78c:	0fd2      	lsrs	r2, r2, #31
 800a78e:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a790:	499c      	ldr	r1, [pc, #624]	; (800aa04 <LoRaMacProcess+0x9c4>)
 800a792:	5458      	strb	r0, [r3, r1]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a794:	3103      	adds	r1, #3
 800a796:	545a      	strb	r2, [r3, r1]
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800a798:	4a9b      	ldr	r2, [pc, #620]	; (800aa08 <LoRaMacProcess+0x9c8>)
 800a79a:	5c9a      	ldrb	r2, [r3, r2]
 800a79c:	2a01      	cmp	r2, #1
 800a79e:	d803      	bhi.n	800a7a8 <LoRaMacProcess+0x768>
                MacCtx.NvmCtx->AdrAckCounter = 0;
 800a7a0:	499a      	ldr	r1, [pc, #616]	; (800aa0c <LoRaMacProcess+0x9cc>)
 800a7a2:	585b      	ldr	r3, [r3, r1]
 800a7a4:	3304      	adds	r3, #4
 800a7a6:	67d8      	str	r0, [r3, #124]	; 0x7c
            if( multicast == 1 )
 800a7a8:	9b05      	ldr	r3, [sp, #20]
 800a7aa:	4c90      	ldr	r4, [pc, #576]	; (800a9ec <LoRaMacProcess+0x9ac>)
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d130      	bne.n	800a812 <LoRaMacProcess+0x7d2>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800a7b0:	3301      	adds	r3, #1
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a7b2:	4997      	ldr	r1, [pc, #604]	; (800aa10 <LoRaMacProcess+0x9d0>)
 800a7b4:	5463      	strb	r3, [r4, r1]
            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800a7b6:	4b97      	ldr	r3, [pc, #604]	; (800aa14 <LoRaMacProcess+0x9d4>)
 800a7b8:	ad1e      	add	r5, sp, #120	; 0x78
 800a7ba:	5ce1      	ldrb	r1, [r4, r3]
 800a7bc:	7b2b      	ldrb	r3, [r5, #12]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800a7be:	2a01      	cmp	r2, #1
 800a7c0:	d805      	bhi.n	800a7ce <LoRaMacProcess+0x78e>
        if( request == MCPS_CONFIRMED )
 800a7c2:	2901      	cmp	r1, #1
 800a7c4:	d101      	bne.n	800a7ca <LoRaMacProcess+0x78a>
            if( fCtrl.Bits.Ack == 1 )
 800a7c6:	069b      	lsls	r3, r3, #26
 800a7c8:	d501      	bpl.n	800a7ce <LoRaMacProcess+0x78e>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800a7ca:	f002 fba5 	bl	800cf18 <LoRaMacCommandsRemoveStickyAnsCmds>
            switch( fType )
 800a7ce:	9b03      	ldr	r3, [sp, #12]
 800a7d0:	4e91      	ldr	r6, [pc, #580]	; (800aa18 <LoRaMacProcess+0x9d8>)
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d038      	beq.n	800a848 <LoRaMacProcess+0x808>
 800a7d6:	2b03      	cmp	r3, #3
 800a7d8:	d008      	beq.n	800a7ec <LoRaMacProcess+0x7ac>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800a7da:	7b29      	ldrb	r1, [r5, #12]
 800a7dc:	9a04      	ldr	r2, [sp, #16]
 800a7de:	0709      	lsls	r1, r1, #28
 800a7e0:	0f09      	lsrs	r1, r1, #28
 800a7e2:	a822      	add	r0, sp, #136	; 0x88
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d033      	beq.n	800a850 <LoRaMacProcess+0x810>
 800a7e8:	f7ff f95c 	bl	8009aa4 <ProcessMacCommands.isra.0.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a7ec:	2278      	movs	r2, #120	; 0x78
 800a7ee:	ab08      	add	r3, sp, #32
 800a7f0:	189b      	adds	r3, r3, r2
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	55a3      	strb	r3, [r4, r6]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800a7f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a7f8:	9303      	str	r3, [sp, #12]
 800a7fa:	9a03      	ldr	r2, [sp, #12]
 800a7fc:	4b7f      	ldr	r3, [pc, #508]	; (800a9fc <LoRaMacProcess+0x9bc>)
 800a7fe:	50e2      	str	r2, [r4, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800a800:	ab28      	add	r3, sp, #160	; 0xa0
 800a802:	781a      	ldrb	r2, [r3, #0]
 800a804:	2385      	movs	r3, #133	; 0x85
 800a806:	00db      	lsls	r3, r3, #3
 800a808:	54e2      	strb	r2, [r4, r3]
                    MacCtx.McpsIndication.RxData = true;
 800a80a:	2201      	movs	r2, #1
 800a80c:	4b83      	ldr	r3, [pc, #524]	; (800aa1c <LoRaMacProcess+0x9dc>)
 800a80e:	54e2      	strb	r2, [r4, r3]
                    break;
 800a810:	e025      	b.n	800a85e <LoRaMacProcess+0x81e>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800a812:	211f      	movs	r1, #31
 800a814:	9807      	ldr	r0, [sp, #28]
 800a816:	4b7d      	ldr	r3, [pc, #500]	; (800aa0c <LoRaMacProcess+0x9cc>)
 800a818:	4388      	bics	r0, r1
 800a81a:	0001      	movs	r1, r0
 800a81c:	204c      	movs	r0, #76	; 0x4c
 800a81e:	58e3      	ldr	r3, [r4, r3]
 800a820:	30ff      	adds	r0, #255	; 0xff
 800a822:	29a0      	cmp	r1, #160	; 0xa0
 800a824:	d10b      	bne.n	800a83e <LoRaMacProcess+0x7fe>
                    MacCtx.NvmCtx->SrvAckRequested = true;
 800a826:	399f      	subs	r1, #159	; 0x9f
 800a828:	5419      	strb	r1, [r3, r0]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800a82a:	3162      	adds	r1, #98	; 0x62
 800a82c:	31ff      	adds	r1, #255	; 0xff
 800a82e:	5c59      	ldrb	r1, [r3, r1]
 800a830:	2900      	cmp	r1, #0
 800a832:	d102      	bne.n	800a83a <LoRaMacProcess+0x7fa>
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 800a834:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800a836:	33fc      	adds	r3, #252	; 0xfc
 800a838:	66d9      	str	r1, [r3, #108]	; 0x6c
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a83a:	2301      	movs	r3, #1
 800a83c:	e7b9      	b.n	800a7b2 <LoRaMacProcess+0x772>
                    MacCtx.NvmCtx->SrvAckRequested = false;
 800a83e:	2100      	movs	r1, #0
 800a840:	5419      	strb	r1, [r3, r0]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800a842:	4b73      	ldr	r3, [pc, #460]	; (800aa10 <LoRaMacProcess+0x9d0>)
 800a844:	54e1      	strb	r1, [r4, r3]
 800a846:	e7b6      	b.n	800a7b6 <LoRaMacProcess+0x776>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 800a848:	ab28      	add	r3, sp, #160	; 0xa0
 800a84a:	7819      	ldrb	r1, [r3, #0]
 800a84c:	9a04      	ldr	r2, [sp, #16]
 800a84e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a850:	f7ff f928 	bl	8009aa4 <ProcessMacCommands.isra.0.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a854:	2278      	movs	r2, #120	; 0x78
 800a856:	ab08      	add	r3, sp, #32
 800a858:	189b      	adds	r3, r3, r2
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	55a3      	strb	r3, [r4, r6]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a85e:	2302      	movs	r3, #2
 800a860:	5de2      	ldrb	r2, [r4, r7]
 800a862:	4313      	orrs	r3, r2
 800a864:	55e3      	strb	r3, [r4, r7]
            break;
 800a866:	e65c      	b.n	800a522 <LoRaMacProcess+0x4e2>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800a868:	1e75      	subs	r5, r6, #1
 800a86a:	9903      	ldr	r1, [sp, #12]
 800a86c:	4e6c      	ldr	r6, [pc, #432]	; (800aa20 <LoRaMacProcess+0x9e0>)
 800a86e:	b2aa      	uxth	r2, r5
 800a870:	0030      	movs	r0, r6
 800a872:	3101      	adds	r1, #1
 800a874:	f004 fabc 	bl	800edf0 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800a878:	2303      	movs	r3, #3
 800a87a:	4a65      	ldr	r2, [pc, #404]	; (800aa10 <LoRaMacProcess+0x9d0>)
 800a87c:	52a3      	strh	r3, [r4, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800a87e:	4b5f      	ldr	r3, [pc, #380]	; (800a9fc <LoRaMacProcess+0x9bc>)
 800a880:	50e6      	str	r6, [r4, r3]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800a882:	3304      	adds	r3, #4
 800a884:	54e5      	strb	r5, [r4, r3]
 800a886:	e7ea      	b.n	800a85e <LoRaMacProcess+0x81e>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a888:	2201      	movs	r2, #1
 800a88a:	4b59      	ldr	r3, [pc, #356]	; (800a9f0 <LoRaMacProcess+0x9b0>)
 800a88c:	54e2      	strb	r2, [r4, r3]
            PrepareRxDoneAbort( );
 800a88e:	f7fe fc2b 	bl	80090e8 <PrepareRxDoneAbort>
            break;
 800a892:	e646      	b.n	800a522 <LoRaMacProcess+0x4e2>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800a894:	4b5d      	ldr	r3, [pc, #372]	; (800aa0c <LoRaMacProcess+0x9cc>)
 800a896:	58e3      	ldr	r3, [r4, r3]
 800a898:	337c      	adds	r3, #124	; 0x7c
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	d000      	beq.n	800a8a2 <LoRaMacProcess+0x862>
 800a8a0:	e64d      	b.n	800a53e <LoRaMacProcess+0x4fe>
 800a8a2:	e649      	b.n	800a538 <LoRaMacProcess+0x4f8>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800a8a4:	5de3      	ldrb	r3, [r4, r7]
 800a8a6:	075b      	lsls	r3, r3, #29
 800a8a8:	d512      	bpl.n	800a8d0 <LoRaMacProcess+0x890>
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a8aa:	2001      	movs	r0, #1
 800a8ac:	25d0      	movs	r5, #208	; 0xd0
 800a8ae:	f002 fc6b 	bl	800d188 <LoRaMacConfirmQueueIsCmdActive>
 800a8b2:	00ad      	lsls	r5, r5, #2
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	d035      	beq.n	800a924 <LoRaMacProcess+0x8e4>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800a8b8:	2001      	movs	r0, #1
 800a8ba:	f002 fc37 	bl	800d12c <LoRaMacConfirmQueueGetStatus>
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	d102      	bne.n	800a8c8 <LoRaMacProcess+0x888>
                MacCtx.ChannelsNbTransCounter = 0;
 800a8c2:	2382      	movs	r3, #130	; 0x82
 800a8c4:	00db      	lsls	r3, r3, #3
 800a8c6:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a8c8:	2302      	movs	r3, #2
 800a8ca:	5962      	ldr	r2, [r4, r5]
 800a8cc:	439a      	bics	r2, r3
 800a8ce:	5162      	str	r2, [r4, r5]
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800a8d0:	5de1      	ldrb	r1, [r4, r7]
 800a8d2:	07cb      	lsls	r3, r1, #31
 800a8d4:	d400      	bmi.n	800a8d8 <LoRaMacProcess+0x898>
 800a8d6:	e4d8      	b.n	800a28a <LoRaMacProcess+0x24a>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800a8d8:	4b4e      	ldr	r3, [pc, #312]	; (800aa14 <LoRaMacProcess+0x9d4>)
 800a8da:	5ce3      	ldrb	r3, [r4, r3]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d001      	beq.n	800a8e4 <LoRaMacProcess+0x8a4>
 800a8e0:	2b03      	cmp	r3, #3
 800a8e2:	d12a      	bne.n	800a93a <LoRaMacProcess+0x8fa>
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 800a8e4:	4b49      	ldr	r3, [pc, #292]	; (800aa0c <LoRaMacProcess+0x9cc>)
    if( MacCtx.ChannelsNbTransCounter >=
 800a8e6:	2082      	movs	r0, #130	; 0x82
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 800a8e8:	58e3      	ldr	r3, [r4, r3]
    if( MacCtx.ChannelsNbTransCounter >=
 800a8ea:	00c0      	lsls	r0, r0, #3
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 800a8ec:	001a      	movs	r2, r3
 800a8ee:	32a4      	adds	r2, #164	; 0xa4
    if( MacCtx.ChannelsNbTransCounter >=
 800a8f0:	5c20      	ldrb	r0, [r4, r0]
 800a8f2:	7812      	ldrb	r2, [r2, #0]
 800a8f4:	4290      	cmp	r0, r2
 800a8f6:	d209      	bcs.n	800a90c <LoRaMacProcess+0x8cc>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800a8f8:	078a      	lsls	r2, r1, #30
 800a8fa:	d554      	bpl.n	800a9a6 <LoRaMacProcess+0x966>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800a8fc:	337c      	adds	r3, #124	; 0x7c
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d003      	beq.n	800a90c <LoRaMacProcess+0x8cc>
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 800a904:	4b40      	ldr	r3, [pc, #256]	; (800aa08 <LoRaMacProcess+0x9c8>)
 800a906:	5ce3      	ldrb	r3, [r4, r3]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d14c      	bne.n	800a9a6 <LoRaMacProcess+0x966>
            TimerStop( &MacCtx.TxDelayedTimer );
 800a90c:	4845      	ldr	r0, [pc, #276]	; (800aa24 <LoRaMacProcess+0x9e4>)
 800a90e:	f006 f947 	bl	8010ba0 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800a912:	22d0      	movs	r2, #208	; 0xd0
 800a914:	2320      	movs	r3, #32
 800a916:	0092      	lsls	r2, r2, #2
 800a918:	58a1      	ldr	r1, [r4, r2]
 800a91a:	4399      	bics	r1, r3
 800a91c:	50a1      	str	r1, [r4, r2]
            StopRetransmission( );
 800a91e:	f7fe fb35 	bl	8008f8c <StopRetransmission>
 800a922:	e4b2      	b.n	800a28a <LoRaMacProcess+0x24a>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800a924:	2005      	movs	r0, #5
 800a926:	f002 fc2f 	bl	800d188 <LoRaMacConfirmQueueIsCmdActive>
 800a92a:	2800      	cmp	r0, #0
 800a92c:	d1cc      	bne.n	800a8c8 <LoRaMacProcess+0x888>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800a92e:	2006      	movs	r0, #6
 800a930:	f002 fc2a 	bl	800d188 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800a934:	2800      	cmp	r0, #0
 800a936:	d1c7      	bne.n	800a8c8 <LoRaMacProcess+0x888>
 800a938:	e7ca      	b.n	800a8d0 <LoRaMacProcess+0x890>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	d133      	bne.n	800a9a6 <LoRaMacProcess+0x966>
            if( MacCtx.AckTimeoutRetry == true )
 800a93e:	4b3a      	ldr	r3, [pc, #232]	; (800aa28 <LoRaMacProcess+0x9e8>)
 800a940:	5ce2      	ldrb	r2, [r4, r3]
 800a942:	2a00      	cmp	r2, #0
 800a944:	d100      	bne.n	800a948 <LoRaMacProcess+0x908>
 800a946:	e4a0      	b.n	800a28a <LoRaMacProcess+0x24a>
    if( MacCtx.AckTimeoutRetriesCounter >=
 800a948:	4d38      	ldr	r5, [pc, #224]	; (800aa2c <LoRaMacProcess+0x9ec>)
        MacCtx.AckTimeoutRetries )
 800a94a:	4839      	ldr	r0, [pc, #228]	; (800aa30 <LoRaMacProcess+0x9f0>)
    if( MacCtx.AckTimeoutRetriesCounter >=
 800a94c:	5d63      	ldrb	r3, [r4, r5]
        MacCtx.AckTimeoutRetries )
 800a94e:	5c20      	ldrb	r0, [r4, r0]
 800a950:	4684      	mov	ip, r0
    if( MacCtx.AckTimeoutRetriesCounter >=
 800a952:	4283      	cmp	r3, r0
 800a954:	d205      	bcs.n	800a962 <LoRaMacProcess+0x922>
    return false;
 800a956:	2200      	movs	r2, #0
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800a958:	0789      	lsls	r1, r1, #30
 800a95a:	d502      	bpl.n	800a962 <LoRaMacProcess+0x922>
        if( MacCtx.McpsConfirm.AckReceived == true )
 800a95c:	2288      	movs	r2, #136	; 0x88
 800a95e:	00d2      	lsls	r2, r2, #3
 800a960:	5ca2      	ldrb	r2, [r4, r2]
                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800a962:	21b1      	movs	r1, #177	; 0xb1
 800a964:	4e29      	ldr	r6, [pc, #164]	; (800aa0c <LoRaMacProcess+0x9cc>)
 800a966:	0049      	lsls	r1, r1, #1
 800a968:	59a0      	ldr	r0, [r4, r6]
 800a96a:	5c41      	ldrb	r1, [r0, r1]
 800a96c:	2900      	cmp	r1, #0
 800a96e:	d13a      	bne.n	800a9e6 <LoRaMacProcess+0x9a6>
                    if( stopRetransmission == false )
 800a970:	2a00      	cmp	r2, #0
 800a972:	d122      	bne.n	800a9ba <LoRaMacProcess+0x97a>
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 800a974:	4563      	cmp	r3, ip
 800a976:	d216      	bcs.n	800a9a6 <LoRaMacProcess+0x966>
        MacCtx.AckTimeoutRetriesCounter++;
 800a978:	3301      	adds	r3, #1
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	5563      	strb	r3, [r4, r5]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 800a97e:	07db      	lsls	r3, r3, #31
 800a980:	d511      	bpl.n	800a9a6 <LoRaMacProcess+0x966>
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800a982:	2322      	movs	r3, #34	; 0x22
 800a984:	a91e      	add	r1, sp, #120	; 0x78
 800a986:	700b      	strb	r3, [r1, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a988:	0003      	movs	r3, r0
 800a98a:	33b8      	adds	r3, #184	; 0xb8
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	708b      	strb	r3, [r1, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800a990:	0003      	movs	r3, r0
 800a992:	3385      	adds	r3, #133	; 0x85
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	704b      	strb	r3, [r1, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a998:	7800      	ldrb	r0, [r0, #0]
 800a99a:	f003 f8b9 	bl	800db10 <RegionGetPhyParam>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 800a99e:	59a3      	ldr	r3, [r4, r6]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a9a0:	9014      	str	r0, [sp, #80]	; 0x50
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 800a9a2:	3385      	adds	r3, #133	; 0x85
 800a9a4:	7018      	strb	r0, [r3, #0]
            MacCtx.MacFlags.Bits.MacDone = 0;
 800a9a6:	2220      	movs	r2, #32
            MacCtx.AckTimeoutRetry = false;
 800a9a8:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
 800a9aa:	5de3      	ldrb	r3, [r4, r7]
 800a9ac:	4393      	bics	r3, r2
 800a9ae:	55e3      	strb	r3, [r4, r7]
            MacCtx.AckTimeoutRetry = false;
 800a9b0:	4b1d      	ldr	r3, [pc, #116]	; (800aa28 <LoRaMacProcess+0x9e8>)
 800a9b2:	54e0      	strb	r0, [r4, r3]
            OnTxDelayedTimerEvent( NULL );
 800a9b4:	f7fe ff04 	bl	80097c0 <OnTxDelayedTimerEvent>
 800a9b8:	e467      	b.n	800a28a <LoRaMacProcess+0x24a>
    if( MacCtx.McpsConfirm.AckReceived == false )
 800a9ba:	2388      	movs	r3, #136	; 0x88
 800a9bc:	00db      	lsls	r3, r3, #3
 800a9be:	5ce6      	ldrb	r6, [r4, r3]
 800a9c0:	2e00      	cmp	r6, #0
 800a9c2:	d10c      	bne.n	800a9de <LoRaMacProcess+0x99e>
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	a91e      	add	r1, sp, #120	; 0x78
 800a9c8:	710b      	strb	r3, [r1, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 800a9ca:	4b1a      	ldr	r3, [pc, #104]	; (800aa34 <LoRaMacProcess+0x9f4>)
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800a9cc:	7800      	ldrb	r0, [r0, #0]
        params.NvmCtx = Contexts.RegionNvmCtx;
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	931e      	str	r3, [sp, #120]	; 0x78
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800a9d2:	f003 f8b0 	bl	800db36 <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 800a9d6:	4b18      	ldr	r3, [pc, #96]	; (800aa38 <LoRaMacProcess+0x9f8>)
 800a9d8:	54e6      	strb	r6, [r4, r3]
        MacCtx.McpsConfirm.AckReceived = false;
 800a9da:	332c      	adds	r3, #44	; 0x2c
 800a9dc:	54e6      	strb	r6, [r4, r3]
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800a9de:	5d62      	ldrb	r2, [r4, r5]
 800a9e0:	4b16      	ldr	r3, [pc, #88]	; (800aa3c <LoRaMacProcess+0x9fc>)
 800a9e2:	54e2      	strb	r2, [r4, r3]
        if( stopRetransmission == true )
 800a9e4:	e792      	b.n	800a90c <LoRaMacProcess+0x8cc>
 800a9e6:	2a00      	cmp	r2, #0
 800a9e8:	d0dd      	beq.n	800a9a6 <LoRaMacProcess+0x966>
 800a9ea:	e78f      	b.n	800a90c <LoRaMacProcess+0x8cc>
 800a9ec:	200006cc 	.word	0x200006cc
 800a9f0:	0000041d 	.word	0x0000041d
 800a9f4:	0000041e 	.word	0x0000041e
 800a9f8:	00000421 	.word	0x00000421
 800a9fc:	00000424 	.word	0x00000424
 800aa00:	0000042e 	.word	0x0000042e
 800aa04:	0000043d 	.word	0x0000043d
 800aa08:	0000042d 	.word	0x0000042d
 800aa0c:	00000484 	.word	0x00000484
 800aa10:	0000041c 	.word	0x0000041c
 800aa14:	0000043c 	.word	0x0000043c
 800aa18:	0000041f 	.word	0x0000041f
 800aa1c:	00000429 	.word	0x00000429
 800aa20:	20000904 	.word	0x20000904
 800aa24:	20000a34 	.word	0x20000a34
 800aa28:	00000413 	.word	0x00000413
 800aa2c:	00000412 	.word	0x00000412
 800aa30:	00000411 	.word	0x00000411
 800aa34:	20000524 	.word	0x20000524
 800aa38:	00000414 	.word	0x00000414
 800aa3c:	00000441 	.word	0x00000441

0800aa40 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800aa40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa42:	b097      	sub	sp, #92	; 0x5c
 800aa44:	0007      	movs	r7, r0
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800aa46:	2503      	movs	r5, #3
{
 800aa48:	9102      	str	r1, [sp, #8]
 800aa4a:	9203      	str	r2, [sp, #12]
    if( ( primitives == NULL ) ||
 800aa4c:	2800      	cmp	r0, #0
 800aa4e:	d100      	bne.n	800aa52 <LoRaMacInitialization+0x12>
 800aa50:	e170      	b.n	800ad34 <LoRaMacInitialization+0x2f4>
 800aa52:	2900      	cmp	r1, #0
 800aa54:	d100      	bne.n	800aa58 <LoRaMacInitialization+0x18>
 800aa56:	e16d      	b.n	800ad34 <LoRaMacInitialization+0x2f4>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800aa58:	6803      	ldr	r3, [r0, #0]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d100      	bne.n	800aa60 <LoRaMacInitialization+0x20>
 800aa5e:	e169      	b.n	800ad34 <LoRaMacInitialization+0x2f4>
 800aa60:	6843      	ldr	r3, [r0, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d100      	bne.n	800aa68 <LoRaMacInitialization+0x28>
 800aa66:	e165      	b.n	800ad34 <LoRaMacInitialization+0x2f4>
        ( primitives->MacMcpsIndication == NULL ) ||
 800aa68:	6883      	ldr	r3, [r0, #8]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d100      	bne.n	800aa70 <LoRaMacInitialization+0x30>
 800aa6e:	e161      	b.n	800ad34 <LoRaMacInitialization+0x2f4>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800aa70:	68c3      	ldr	r3, [r0, #12]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d100      	bne.n	800aa78 <LoRaMacInitialization+0x38>
 800aa76:	e15d      	b.n	800ad34 <LoRaMacInitialization+0x2f4>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800aa78:	0010      	movs	r0, r2
 800aa7a:	f003 f844 	bl	800db06 <RegionIsActive>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800aa7e:	3506      	adds	r5, #6
    if( RegionIsActive( region ) == false )
 800aa80:	2800      	cmp	r0, #0
 800aa82:	d100      	bne.n	800aa86 <LoRaMacInitialization+0x46>
 800aa84:	e156      	b.n	800ad34 <LoRaMacInitialization+0x2f4>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 800aa86:	0038      	movs	r0, r7
 800aa88:	49cc      	ldr	r1, [pc, #816]	; (800adbc <LoRaMacInitialization+0x37c>)
 800aa8a:	f002 fad9 	bl	800d040 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 800aa8e:	22b6      	movs	r2, #182	; 0xb6
 800aa90:	4dcb      	ldr	r5, [pc, #812]	; (800adc0 <LoRaMacInitialization+0x380>)
 800aa92:	2100      	movs	r1, #0
 800aa94:	0028      	movs	r0, r5
 800aa96:	0052      	lsls	r2, r2, #1
 800aa98:	f004 f9c0 	bl	800ee1c <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800aa9c:	4cc9      	ldr	r4, [pc, #804]	; (800adc4 <LoRaMacInitialization+0x384>)
 800aa9e:	2100      	movs	r1, #0
 800aaa0:	0020      	movs	r0, r4
 800aaa2:	4ac9      	ldr	r2, [pc, #804]	; (800adc8 <LoRaMacInitialization+0x388>)
 800aaa4:	f004 f9ba 	bl	800ee1c <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 800aaa8:	2101      	movs	r1, #1
 800aaaa:	4bc8      	ldr	r3, [pc, #800]	; (800adcc <LoRaMacInitialization+0x38c>)
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.NvmCtx->Region = region;
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 800aaac:	2200      	movs	r2, #0
    MacCtx.AckTimeoutRetriesCounter = 1;
 800aaae:	54e1      	strb	r1, [r4, r3]
    MacCtx.AckTimeoutRetries = 1;
 800aab0:	4bc7      	ldr	r3, [pc, #796]	; (800add0 <LoRaMacInitialization+0x390>)
    MacCtx.NvmCtx = &NvmMacCtx;
 800aab2:	4ec8      	ldr	r6, [pc, #800]	; (800add4 <LoRaMacInitialization+0x394>)
    MacCtx.AckTimeoutRetries = 1;
 800aab4:	54e1      	strb	r1, [r4, r3]
    MacCtx.NvmCtx->Region = region;
 800aab6:	9b03      	ldr	r3, [sp, #12]
    MacCtx.NvmCtx = &NvmMacCtx;
 800aab8:	51a5      	str	r5, [r4, r6]
    MacCtx.NvmCtx->Region = region;
 800aaba:	702b      	strb	r3, [r5, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 800aabc:	002b      	movs	r3, r5
 800aabe:	337c      	adds	r3, #124	; 0x7c
 800aac0:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->RepeaterSupport = false;
 800aac2:	002b      	movs	r3, r5
 800aac4:	33ca      	adds	r3, #202	; 0xca
 800aac6:	701a      	strb	r2, [r3, #0]

    // Setup version
    MacCtx.NvmCtx->Version.Value = LORAMAC_VERSION;
 800aac8:	4bc3      	ldr	r3, [pc, #780]	; (800add8 <LoRaMacInitialization+0x398>)
 800aaca:	35fc      	adds	r5, #252	; 0xfc
 800aacc:	666b      	str	r3, [r5, #100]	; 0x64

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800aace:	230f      	movs	r3, #15
 800aad0:	ad08      	add	r5, sp, #32
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800aad2:	0029      	movs	r1, r5
 800aad4:	9803      	ldr	r0, [sp, #12]
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800aad6:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800aad8:	f003 f81a 	bl	800db10 <RegionGetPhyParam>
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 800aadc:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800aade:	9007      	str	r0, [sp, #28]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 800aae0:	1e42      	subs	r2, r0, #1
 800aae2:	4190      	sbcs	r0, r2
 800aae4:	001a      	movs	r2, r3
 800aae6:	32c9      	adds	r2, #201	; 0xc9
 800aae8:	7010      	strb	r0, [r2, #0]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800aaea:	200a      	movs	r0, #10
 800aaec:	7028      	strb	r0, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800aaee:	0029      	movs	r1, r5
 800aaf0:	7818      	ldrb	r0, [r3, #0]
 800aaf2:	f003 f80d 	bl	800db10 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;

    getPhy.Attribute = PHY_DEF_TX_DR;
 800aaf6:	2206      	movs	r2, #6
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 800aaf8:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_TX_DR;
 800aafa:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800aafc:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 800aafe:	7118      	strb	r0, [r3, #4]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab00:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab02:	7818      	ldrb	r0, [r3, #0]
 800ab04:	f003 f804 	bl	800db10 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800ab08:	2210      	movs	r2, #16
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 800ab0a:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800ab0c:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab0e:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 800ab10:	7158      	strb	r0, [r3, #5]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab12:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab14:	7818      	ldrb	r0, [r3, #0]
 800ab16:	f002 fffb 	bl	800db10 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800ab1a:	2211      	movs	r2, #17
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800ab1c:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800ab1e:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab20:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800ab22:	6118      	str	r0, [r3, #16]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab24:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab26:	7818      	ldrb	r0, [r3, #0]
 800ab28:	f002 fff2 	bl	800db10 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800ab2c:	2212      	movs	r2, #18
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800ab2e:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800ab30:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab32:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800ab34:	6158      	str	r0, [r3, #20]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab36:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab38:	7818      	ldrb	r0, [r3, #0]
 800ab3a:	f002 ffe9 	bl	800db10 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800ab3e:	2213      	movs	r2, #19
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800ab40:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800ab42:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab44:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800ab46:	6198      	str	r0, [r3, #24]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab48:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab4a:	7818      	ldrb	r0, [r3, #0]
 800ab4c:	f002 ffe0 	bl	800db10 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800ab50:	2214      	movs	r2, #20
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800ab52:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800ab54:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab56:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800ab58:	61d8      	str	r0, [r3, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab5a:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab5c:	7818      	ldrb	r0, [r3, #0]
 800ab5e:	f002 ffd7 	bl	800db10 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800ab62:	2217      	movs	r2, #23
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800ab64:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800ab66:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab68:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800ab6a:	6218      	str	r0, [r3, #32]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab6c:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab6e:	7818      	ldrb	r0, [r3, #0]
 800ab70:	f002 ffce 	bl	800db10 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800ab74:	59a3      	ldr	r3, [r4, r6]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab76:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800ab78:	1d9a      	adds	r2, r3, #6
 800ab7a:	77d0      	strb	r0, [r2, #31]
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800ab7c:	2218      	movs	r2, #24
 800ab7e:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab80:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab82:	7818      	ldrb	r0, [r3, #0]
 800ab84:	f002 ffc4 	bl	800db10 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800ab88:	2219      	movs	r2, #25
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800ab8a:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_RX2_DR;
 800ab8c:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab8e:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800ab90:	6298      	str	r0, [r3, #40]	; 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800ab92:	6318      	str	r0, [r3, #48]	; 0x30
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab94:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab96:	7818      	ldrb	r0, [r3, #0]
 800ab98:	f002 ffba 	bl	800db10 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800ab9c:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab9e:	9007      	str	r0, [sp, #28]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800aba0:	001a      	movs	r2, r3
 800aba2:	b2c0      	uxtb	r0, r0
 800aba4:	322c      	adds	r2, #44	; 0x2c
 800aba6:	7010      	strb	r0, [r2, #0]
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800aba8:	7210      	strb	r0, [r2, #8]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800abaa:	221e      	movs	r2, #30
 800abac:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800abae:	0029      	movs	r1, r5
 800abb0:	7818      	ldrb	r0, [r3, #0]
 800abb2:	f002 ffad 	bl	800db10 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800abb6:	59a3      	ldr	r3, [r4, r6]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800abb8:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800abba:	001a      	movs	r2, r3
 800abbc:	3238      	adds	r2, #56	; 0x38
 800abbe:	7010      	strb	r0, [r2, #0]
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800abc0:	221f      	movs	r2, #31
 800abc2:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800abc4:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800abc6:	7818      	ldrb	r0, [r3, #0]
 800abc8:	f002 ffa2 	bl	800db10 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800abcc:	59a3      	ldr	r3, [r4, r6]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800abce:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800abd0:	001a      	movs	r2, r3
 800abd2:	3239      	adds	r2, #57	; 0x39
 800abd4:	7010      	strb	r0, [r2, #0]
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800abd6:	2220      	movs	r2, #32
 800abd8:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800abda:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800abdc:	7818      	ldrb	r0, [r3, #0]
 800abde:	f002 ff97 	bl	800db10 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800abe2:	2221      	movs	r2, #33	; 0x21
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 800abe4:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800abe6:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800abe8:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 800abea:	63d8      	str	r0, [r3, #60]	; 0x3c
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800abec:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800abee:	7818      	ldrb	r0, [r3, #0]
 800abf0:	f002 ff8e 	bl	800db10 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800abf4:	220b      	movs	r2, #11
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 800abf6:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800abf8:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800abfa:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 800abfc:	6418      	str	r0, [r3, #64]	; 0x40
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800abfe:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ac00:	7818      	ldrb	r0, [r3, #0]
 800ac02:	f002 ff85 	bl	800db10 <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;
 800ac06:	23fd      	movs	r3, #253	; 0xfd
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	52e0      	strh	r0, [r4, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800ac0c:	230c      	movs	r3, #12
 800ac0e:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ac10:	59a3      	ldr	r3, [r4, r6]
 800ac12:	0029      	movs	r1, r5
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ac14:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ac16:	7818      	ldrb	r0, [r3, #0]
 800ac18:	f002 ff7a 	bl	800db10 <RegionGetPhyParam>
    MacCtx.AdrAckDelay = phyParam.Value;

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 800ac1c:	2101      	movs	r1, #1
    MacCtx.AdrAckDelay = phyParam.Value;
 800ac1e:	4b6f      	ldr	r3, [pc, #444]	; (800addc <LoRaMacInitialization+0x39c>)
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 800ac20:	2506      	movs	r5, #6
    MacCtx.AdrAckDelay = phyParam.Value;
 800ac22:	52e0      	strh	r0, [r4, r3]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 800ac24:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ac26:	9007      	str	r0, [sp, #28]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 800ac28:	1d5a      	adds	r2, r3, #5
 800ac2a:	77d1      	strb	r1, [r2, #31]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 800ac2c:	001a      	movs	r2, r3
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
 800ac2e:	200a      	movs	r0, #10
    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 800ac30:	3288      	adds	r2, #136	; 0x88
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
 800ac32:	6098      	str	r0, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 800ac34:	731d      	strb	r5, [r3, #12]
    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 800ac36:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 800ac38:	0018      	movs	r0, r3
 800ac3a:	308c      	adds	r0, #140	; 0x8c
 800ac3c:	7005      	strb	r5, [r0, #0]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 800ac3e:	0018      	movs	r0, r3
 800ac40:	3090      	adds	r0, #144	; 0x90
 800ac42:	0002      	movs	r2, r0
 800ac44:	6918      	ldr	r0, [r3, #16]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800ac46:	2500      	movs	r5, #0
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 800ac48:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 800ac4a:	0018      	movs	r0, r3
 800ac4c:	3094      	adds	r0, #148	; 0x94
 800ac4e:	0002      	movs	r2, r0
 800ac50:	6958      	ldr	r0, [r3, #20]
    params.NvmCtx = NULL;
 800ac52:	950c      	str	r5, [sp, #48]	; 0x30
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 800ac54:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 800ac56:	0018      	movs	r0, r3
 800ac58:	3098      	adds	r0, #152	; 0x98
 800ac5a:	0002      	movs	r2, r0
 800ac5c:	6998      	ldr	r0, [r3, #24]
 800ac5e:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 800ac60:	0018      	movs	r0, r3
 800ac62:	309c      	adds	r0, #156	; 0x9c
 800ac64:	0002      	movs	r2, r0
 800ac66:	69d8      	ldr	r0, [r3, #28]
 800ac68:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 800ac6a:	0018      	movs	r0, r3
 800ac6c:	30a0      	adds	r0, #160	; 0xa0
 800ac6e:	0002      	movs	r2, r0
 800ac70:	6a18      	ldr	r0, [r3, #32]
 800ac72:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 800ac74:	0018      	movs	r0, r3
 800ac76:	30a4      	adds	r0, #164	; 0xa4
 800ac78:	7001      	strb	r1, [r0, #0]
    params.Type = INIT_TYPE_DEFAULTS;
 800ac7a:	a90c      	add	r1, sp, #48	; 0x30
 800ac7c:	710d      	strb	r5, [r1, #4]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800ac7e:	7818      	ldrb	r0, [r3, #0]
 800ac80:	f002 ff59 	bl	800db36 <RegionInitDefaults>

    ResetMacParameters( );
 800ac84:	f7fe fac4 	bl	8009210 <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 800ac88:	59a3      	ldr	r3, [r4, r6]
 800ac8a:	2101      	movs	r1, #1
 800ac8c:	001a      	movs	r2, r3
 800ac8e:	327d      	adds	r2, #125	; 0x7d
 800ac90:	7011      	strb	r1, [r2, #0]

    MacCtx.MacPrimitives = primitives;
 800ac92:	22d1      	movs	r2, #209	; 0xd1
    MacCtx.MacCallbacks = callbacks;
 800ac94:	9802      	ldr	r0, [sp, #8]
    MacCtx.MacPrimitives = primitives;
 800ac96:	0092      	lsls	r2, r2, #2
 800ac98:	50a7      	str	r7, [r4, r2]
    MacCtx.MacCallbacks = callbacks;
 800ac9a:	3204      	adds	r2, #4
 800ac9c:	50a0      	str	r0, [r4, r2]
    MacCtx.MacFlags.Value = 0;
 800ac9e:	4a50      	ldr	r2, [pc, #320]	; (800ade0 <LoRaMacInitialization+0x3a0>)
    MacCtx.MacState = LORAMAC_STOPPED;

    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 800aca0:	33fc      	adds	r3, #252	; 0xfc
    MacCtx.MacFlags.Value = 0;
 800aca2:	54a5      	strb	r5, [r4, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 800aca4:	3a42      	subs	r2, #66	; 0x42
 800aca6:	3aff      	subs	r2, #255	; 0xff
 800aca8:	50a1      	str	r1, [r4, r2]
    MacCtx.NvmCtx->AggregatedTimeOff = 0;

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800acaa:	484e      	ldr	r0, [pc, #312]	; (800ade4 <LoRaMacInitialization+0x3a4>)
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 800acac:	655d      	str	r5, [r3, #84]	; 0x54
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 800acae:	659d      	str	r5, [r3, #88]	; 0x58
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800acb0:	002a      	movs	r2, r5
 800acb2:	4b4d      	ldr	r3, [pc, #308]	; (800ade8 <LoRaMacInitialization+0x3a8>)
 800acb4:	9500      	str	r5, [sp, #0]
 800acb6:	3902      	subs	r1, #2
 800acb8:	f005 ff12 	bl	8010ae0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800acbc:	2101      	movs	r1, #1
 800acbe:	002a      	movs	r2, r5
 800acc0:	4b4a      	ldr	r3, [pc, #296]	; (800adec <LoRaMacInitialization+0x3ac>)
 800acc2:	9500      	str	r5, [sp, #0]
 800acc4:	4249      	negs	r1, r1
 800acc6:	484a      	ldr	r0, [pc, #296]	; (800adf0 <LoRaMacInitialization+0x3b0>)
 800acc8:	f005 ff0a 	bl	8010ae0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800accc:	2101      	movs	r1, #1
 800acce:	002a      	movs	r2, r5
 800acd0:	4b48      	ldr	r3, [pc, #288]	; (800adf4 <LoRaMacInitialization+0x3b4>)
 800acd2:	9500      	str	r5, [sp, #0]
 800acd4:	4249      	negs	r1, r1
 800acd6:	4848      	ldr	r0, [pc, #288]	; (800adf8 <LoRaMacInitialization+0x3b8>)
 800acd8:	f005 ff02 	bl	8010ae0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800acdc:	2101      	movs	r1, #1
 800acde:	002a      	movs	r2, r5
 800ace0:	4b46      	ldr	r3, [pc, #280]	; (800adfc <LoRaMacInitialization+0x3bc>)
 800ace2:	4249      	negs	r1, r1
 800ace4:	9500      	str	r5, [sp, #0]
 800ace6:	4846      	ldr	r0, [pc, #280]	; (800ae00 <LoRaMacInitialization+0x3c0>)
 800ace8:	f005 fefa 	bl	8010ae0 <UTIL_TIMER_Create>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = SysTimeGetMcuTime( );
 800acec:	59a5      	ldr	r5, [r4, r6]
 800acee:	af04      	add	r7, sp, #16
 800acf0:	3559      	adds	r5, #89	; 0x59
 800acf2:	0038      	movs	r0, r7
 800acf4:	35ff      	adds	r5, #255	; 0xff
 800acf6:	f005 fe83 	bl	8010a00 <SysTimeGetMcuTime>
 800acfa:	cf0c      	ldmia	r7!, {r2, r3}
 800acfc:	c50c      	stmia	r5!, {r2, r3}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800acfe:	23d3      	movs	r3, #211	; 0xd3
 800ad00:	4a40      	ldr	r2, [pc, #256]	; (800ae04 <LoRaMacInitialization+0x3c4>)
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800ad06:	4a40      	ldr	r2, [pc, #256]	; (800ae08 <LoRaMacInitialization+0x3c8>)
 800ad08:	3308      	adds	r3, #8
 800ad0a:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800ad0c:	4a3f      	ldr	r2, [pc, #252]	; (800ae0c <LoRaMacInitialization+0x3cc>)
 800ad0e:	3308      	adds	r3, #8
 800ad10:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800ad12:	4a3f      	ldr	r2, [pc, #252]	; (800ae10 <LoRaMacInitialization+0x3d0>)
 800ad14:	3b0c      	subs	r3, #12
 800ad16:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
    Radio.Init( &MacCtx.RadioEvents );
 800ad18:	4f3e      	ldr	r7, [pc, #248]	; (800ae14 <LoRaMacInitialization+0x3d4>)
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800ad1a:	4a3f      	ldr	r2, [pc, #252]	; (800ae18 <LoRaMacInitialization+0x3d8>)
 800ad1c:	3308      	adds	r3, #8
 800ad1e:	50e2      	str	r2, [r4, r3]
    Radio.Init( &MacCtx.RadioEvents );
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	483e      	ldr	r0, [pc, #248]	; (800ae1c <LoRaMacInitialization+0x3dc>)
 800ad24:	9303      	str	r3, [sp, #12]
 800ad26:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 800ad28:	483d      	ldr	r0, [pc, #244]	; (800ae20 <LoRaMacInitialization+0x3e0>)
 800ad2a:	f7fd f915 	bl	8007f58 <SecureElementInit>
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	d003      	beq.n	800ad3a <LoRaMacInitialization+0x2fa>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800ad32:	2511      	movs	r5, #17
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );

    return LORAMAC_STATUS_OK;
}
 800ad34:	0028      	movs	r0, r5
 800ad36:	b017      	add	sp, #92	; 0x5c
 800ad38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 800ad3a:	483a      	ldr	r0, [pc, #232]	; (800ae24 <LoRaMacInitialization+0x3e4>)
 800ad3c:	f002 fb6c 	bl	800d418 <LoRaMacCryptoInit>
 800ad40:	2800      	cmp	r0, #0
 800ad42:	d1f6      	bne.n	800ad32 <LoRaMacInitialization+0x2f2>
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 800ad44:	4838      	ldr	r0, [pc, #224]	; (800ae28 <LoRaMacInitialization+0x3e8>)
 800ad46:	f002 f833 	bl	800cdb0 <LoRaMacCommandsInit>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ad4a:	2513      	movs	r5, #19
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	d1f1      	bne.n	800ad34 <LoRaMacInitialization+0x2f4>
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800ad50:	59a0      	ldr	r0, [r4, r6]
 800ad52:	3050      	adds	r0, #80	; 0x50
 800ad54:	f002 fbf2 	bl	800d53c <LoRaMacCryptoSetMulticastReference>
 800ad58:	1e05      	subs	r5, r0, #0
 800ad5a:	d1ea      	bne.n	800ad32 <LoRaMacInitialization+0x2f2>
    srand1( Radio.Random( ) );
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	9303      	str	r3, [sp, #12]
 800ad60:	4798      	blx	r3
 800ad62:	f004 f823 	bl	800edac <srand1>
    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800ad66:	59a3      	ldr	r3, [r4, r6]
 800ad68:	337d      	adds	r3, #125	; 0x7d
 800ad6a:	7818      	ldrb	r0, [r3, #0]
 800ad6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad6e:	9303      	str	r3, [sp, #12]
 800ad70:	4798      	blx	r3
    Radio.Sleep( );
 800ad72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad74:	9303      	str	r3, [sp, #12]
 800ad76:	4798      	blx	r3
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 800ad78:	9b02      	ldr	r3, [sp, #8]
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 800ad7a:	a90a      	add	r1, sp, #40	; 0x28
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 800ad7c:	685b      	ldr	r3, [r3, #4]
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 800ad7e:	a80e      	add	r0, sp, #56	; 0x38
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 800ad80:	9303      	str	r3, [sp, #12]
 800ad82:	930a      	str	r3, [sp, #40]	; 0x28
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 800ad84:	9b02      	ldr	r3, [sp, #8]
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	9302      	str	r3, [sp, #8]
 800ad8a:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800ad8c:	4b27      	ldr	r3, [pc, #156]	; (800ae2c <LoRaMacInitialization+0x3ec>)
 800ad8e:	930e      	str	r3, [sp, #56]	; 0x38
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800ad90:	4b27      	ldr	r3, [pc, #156]	; (800ae30 <LoRaMacInitialization+0x3f0>)
 800ad92:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800ad94:	4b27      	ldr	r3, [pc, #156]	; (800ae34 <LoRaMacInitialization+0x3f4>)
 800ad96:	9310      	str	r3, [sp, #64]	; 0x40
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800ad98:	4b27      	ldr	r3, [pc, #156]	; (800ae38 <LoRaMacInitialization+0x3f8>)
 800ad9a:	9311      	str	r3, [sp, #68]	; 0x44
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 800ad9c:	59a3      	ldr	r3, [r4, r6]
 800ad9e:	001a      	movs	r2, r3
 800ada0:	324c      	adds	r2, #76	; 0x4c
 800ada2:	9212      	str	r2, [sp, #72]	; 0x48
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 800ada4:	3238      	adds	r2, #56	; 0x38
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 800ada6:	9313      	str	r3, [sp, #76]	; 0x4c
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 800ada8:	9214      	str	r2, [sp, #80]	; 0x50
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 800adaa:	3350      	adds	r3, #80	; 0x50
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 800adac:	4a23      	ldr	r2, [pc, #140]	; (800ae3c <LoRaMacInitialization+0x3fc>)
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 800adae:	9315      	str	r3, [sp, #84]	; 0x54
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 800adb0:	f001 f948 	bl	800c044 <LoRaMacClassBInit>
    MacCtx.AllowRequests = requestState;
 800adb4:	2201      	movs	r2, #1
 800adb6:	4b22      	ldr	r3, [pc, #136]	; (800ae40 <LoRaMacInitialization+0x400>)
 800adb8:	54e2      	strb	r2, [r4, r3]
    return LORAMAC_STATUS_OK;
 800adba:	e7bb      	b.n	800ad34 <LoRaMacInitialization+0x2f4>
 800adbc:	08009045 	.word	0x08009045
 800adc0:	20000560 	.word	0x20000560
 800adc4:	200006cc 	.word	0x200006cc
 800adc8:	0000048c 	.word	0x0000048c
 800adcc:	00000412 	.word	0x00000412
 800add0:	00000411 	.word	0x00000411
 800add4:	00000484 	.word	0x00000484
 800add8:	01000300 	.word	0x01000300
 800addc:	000003f6 	.word	0x000003f6
 800ade0:	00000481 	.word	0x00000481
 800ade4:	20000a34 	.word	0x20000a34
 800ade8:	080097c1 	.word	0x080097c1
 800adec:	080099dd 	.word	0x080099dd
 800adf0:	20000a4c 	.word	0x20000a4c
 800adf4:	08009a3d 	.word	0x08009a3d
 800adf8:	20000a64 	.word	0x20000a64
 800adfc:	0800908d 	.word	0x0800908d
 800ae00:	20000ac4 	.word	0x20000ac4
 800ae04:	080093c5 	.word	0x080093c5
 800ae08:	0800936d 	.word	0x0800936d
 800ae0c:	08008f41 	.word	0x08008f41
 800ae10:	08009331 	.word	0x08009331
 800ae14:	080117e0 	.word	0x080117e0
 800ae18:	080092f5 	.word	0x080092f5
 800ae1c:	20000a18 	.word	0x20000a18
 800ae20:	08009027 	.word	0x08009027
 800ae24:	0800901d 	.word	0x0800901d
 800ae28:	08009031 	.word	0x08009031
 800ae2c:	20000b30 	.word	0x20000b30
 800ae30:	20000ae8 	.word	0x20000ae8
 800ae34:	20000b1c 	.word	0x20000b1c
 800ae38:	20000b4d 	.word	0x20000b4d
 800ae3c:	0800903b 	.word	0x0800903b
 800ae40:	00000482 	.word	0x00000482

0800ae44 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 800ae44:	23d0      	movs	r3, #208	; 0xd0
 800ae46:	2000      	movs	r0, #0
 800ae48:	4a01      	ldr	r2, [pc, #4]	; (800ae50 <LoRaMacStart+0xc>)
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	50d0      	str	r0, [r2, r3]
    return LORAMAC_STATUS_OK;
}
 800ae4e:	4770      	bx	lr
 800ae50:	200006cc 	.word	0x200006cc

0800ae54 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800ae54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae56:	b089      	sub	sp, #36	; 0x24
 800ae58:	0005      	movs	r5, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800ae5a:	4668      	mov	r0, sp
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800ae5c:	4a29      	ldr	r2, [pc, #164]	; (800af04 <LoRaMacQueryTxPossible+0xb0>)
 800ae5e:	4b2a      	ldr	r3, [pc, #168]	; (800af08 <LoRaMacQueryTxPossible+0xb4>)
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
    size_t macCmdsSize = 0;
 800ae60:	2700      	movs	r7, #0
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800ae62:	58d3      	ldr	r3, [r2, r3]
{
 800ae64:	000c      	movs	r4, r1
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800ae66:	1d1a      	adds	r2, r3, #4
 800ae68:	6fd6      	ldr	r6, [r2, #124]	; 0x7c
 800ae6a:	9601      	str	r6, [sp, #4]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800ae6c:	795a      	ldrb	r2, [r3, #5]
 800ae6e:	7082      	strb	r2, [r0, #2]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800ae70:	466a      	mov	r2, sp
 800ae72:	7918      	ldrb	r0, [r3, #4]
 800ae74:	3203      	adds	r2, #3
 800ae76:	7010      	strb	r0, [r2, #0]
    size_t macCmdsSize = 0;
 800ae78:	9702      	str	r7, [sp, #8]

    if( txInfo == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ae7a:	2003      	movs	r0, #3
    if( txInfo == NULL )
 800ae7c:	42b9      	cmp	r1, r7
 800ae7e:	d038      	beq.n	800aef2 <LoRaMacQueryTxPossible+0x9e>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 800ae80:	21fc      	movs	r1, #252	; 0xfc
 800ae82:	468c      	mov	ip, r1
 800ae84:	449c      	add	ip, r3
 800ae86:	4661      	mov	r1, ip
 800ae88:	a803      	add	r0, sp, #12
    adrNext.UpdateChanMask = false;
 800ae8a:	7107      	strb	r7, [r0, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800ae8c:	001f      	movs	r7, r3
    adrNext.Version = MacCtx.NvmCtx->Version;
 800ae8e:	6e49      	ldr	r1, [r1, #100]	; 0x64
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800ae90:	377e      	adds	r7, #126	; 0x7e
    adrNext.Version = MacCtx.NvmCtx->Version;
 800ae92:	9103      	str	r1, [sp, #12]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800ae94:	783f      	ldrb	r7, [r7, #0]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800ae96:	6086      	str	r6, [r0, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800ae98:	26fd      	movs	r6, #253	; 0xfd
 800ae9a:	491a      	ldr	r1, [pc, #104]	; (800af04 <LoRaMacQueryTxPossible+0xb0>)
 800ae9c:	00b6      	lsls	r6, r6, #2
 800ae9e:	5989      	ldr	r1, [r1, r6]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800aea0:	7147      	strb	r7, [r0, #5]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800aea2:	9106      	str	r1, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800aea4:	0019      	movs	r1, r3
 800aea6:	3184      	adds	r1, #132	; 0x84
 800aea8:	8809      	ldrh	r1, [r1, #0]
 800aeaa:	ba49      	rev16	r1, r1
 800aeac:	8201      	strh	r1, [r0, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800aeae:	0019      	movs	r1, r3
 800aeb0:	31b8      	adds	r1, #184	; 0xb8
 800aeb2:	7809      	ldrb	r1, [r1, #0]
 800aeb4:	7481      	strb	r1, [r0, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800aeb6:	4669      	mov	r1, sp
    adrNext.Region = MacCtx.NvmCtx->Region;
 800aeb8:	781b      	ldrb	r3, [r3, #0]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800aeba:	3102      	adds	r1, #2
    adrNext.Region = MacCtx.NvmCtx->Region;
 800aebc:	74c3      	strb	r3, [r0, #19]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800aebe:	ab01      	add	r3, sp, #4
 800aec0:	f000 fe54 	bl	800bb6c <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800aec4:	466b      	mov	r3, sp
 800aec6:	2002      	movs	r0, #2
 800aec8:	5618      	ldrsb	r0, [r3, r0]
 800aeca:	f7fe f8c1 	bl	8009050 <GetMaxAppPayloadWithoutFOptsLength>
 800aece:	7060      	strb	r0, [r4, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800aed0:	a802      	add	r0, sp, #8
 800aed2:	f002 f839 	bl	800cf48 <LoRaMacCommandsGetSizeSerializedCmds>
 800aed6:	2800      	cmp	r0, #0
 800aed8:	d111      	bne.n	800aefe <LoRaMacQueryTxPossible+0xaa>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800aeda:	9b02      	ldr	r3, [sp, #8]
 800aedc:	2b0f      	cmp	r3, #15
 800aede:	d80a      	bhi.n	800aef6 <LoRaMacQueryTxPossible+0xa2>
 800aee0:	7862      	ldrb	r2, [r4, #1]
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d807      	bhi.n	800aef6 <LoRaMacQueryTxPossible+0xa2>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800aee6:	1ad1      	subs	r1, r2, r3

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800aee8:	18ed      	adds	r5, r5, r3
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800aeea:	7021      	strb	r1, [r4, #0]
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800aeec:	42aa      	cmp	r2, r5
 800aeee:	d200      	bcs.n	800aef2 <LoRaMacQueryTxPossible+0x9e>
        {
            return LORAMAC_STATUS_OK;
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 800aef0:	3008      	adds	r0, #8
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800aef2:	b009      	add	sp, #36	; 0x24
 800aef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800aef6:	2300      	movs	r3, #0
        return LORAMAC_STATUS_LENGTH_ERROR;
 800aef8:	2008      	movs	r0, #8
        txInfo->MaxPossibleApplicationDataSize = 0;
 800aefa:	7023      	strb	r3, [r4, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800aefc:	e7f9      	b.n	800aef2 <LoRaMacQueryTxPossible+0x9e>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800aefe:	2013      	movs	r0, #19
 800af00:	e7f7      	b.n	800aef2 <LoRaMacQueryTxPossible+0x9e>
 800af02:	46c0      	nop			; (mov r8, r8)
 800af04:	200006cc 	.word	0x200006cc
 800af08:	00000484 	.word	0x00000484

0800af0c <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 800af0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af0e:	0004      	movs	r4, r0
 800af10:	b085      	sub	sp, #20
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800af12:	2003      	movs	r0, #3
    if( mibGet == NULL )
 800af14:	2c00      	cmp	r4, #0
 800af16:	d034      	beq.n	800af82 <LoRaMacMibGetRequestConfirm+0x76>
    }

    switch( mibGet->Type )
 800af18:	7820      	ldrb	r0, [r4, #0]
 800af1a:	2828      	cmp	r0, #40	; 0x28
 800af1c:	d900      	bls.n	800af20 <LoRaMacMibGetRequestConfirm+0x14>
 800af1e:	e107      	b.n	800b130 <LoRaMacMibGetRequestConfirm+0x224>
 800af20:	f7f5 f918 	bl	8000154 <__gnu_thumb1_case_uhi>
 800af24:	00310029 	.word	0x00310029
 800af28:	003e0039 	.word	0x003e0039
 800af2c:	00470041 	.word	0x00470041
 800af30:	0106004d 	.word	0x0106004d
 800af34:	01060106 	.word	0x01060106
 800af38:	01060106 	.word	0x01060106
 800af3c:	01060106 	.word	0x01060106
 800af40:	00520106 	.word	0x00520106
 800af44:	005c0057 	.word	0x005c0057
 800af48:	006c0066 	.word	0x006c0066
 800af4c:	00790074 	.word	0x00790074
 800af50:	007f0082 	.word	0x007f0082
 800af54:	008a0085 	.word	0x008a0085
 800af58:	00950090 	.word	0x00950090
 800af5c:	009f009a 	.word	0x009f009a
 800af60:	00a900a4 	.word	0x00a900a4
 800af64:	00ae00b3 	.word	0x00ae00b3
 800af68:	00bd00b8 	.word	0x00bd00b8
 800af6c:	00f700c2 	.word	0x00f700c2
 800af70:	010600c9 	.word	0x010600c9
 800af74:	00fc      	.short	0x00fc
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 800af76:	4a70      	ldr	r2, [pc, #448]	; (800b138 <LoRaMacMibGetRequestConfirm+0x22c>)
 800af78:	4b70      	ldr	r3, [pc, #448]	; (800b13c <LoRaMacMibGetRequestConfirm+0x230>)
 800af7a:	58d3      	ldr	r3, [r2, r3]
 800af7c:	337c      	adds	r3, #124	; 0x7c
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800af82:	b005      	add	sp, #20
 800af84:	bdf0      	pop	{r4, r5, r6, r7, pc}
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 800af86:	4b6d      	ldr	r3, [pc, #436]	; (800b13c <LoRaMacMibGetRequestConfirm+0x230>)
 800af88:	4a6b      	ldr	r2, [pc, #428]	; (800b138 <LoRaMacMibGetRequestConfirm+0x22c>)
 800af8a:	58d2      	ldr	r2, [r2, r3]
 800af8c:	23b2      	movs	r3, #178	; 0xb2
 800af8e:	005b      	lsls	r3, r3, #1
 800af90:	5cd3      	ldrb	r3, [r2, r3]
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 800af92:	7123      	strb	r3, [r4, #4]
            break;
 800af94:	e002      	b.n	800af9c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800af96:	f7fd f9f3 	bl	8008380 <SecureElementGetDevEui>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800af9a:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800af9c:	2000      	movs	r0, #0
            break;
 800af9e:	e7f0      	b.n	800af82 <LoRaMacMibGetRequestConfirm+0x76>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800afa0:	f7fd fa04 	bl	80083ac <SecureElementGetJoinEui>
 800afa4:	e7f9      	b.n	800af9a <LoRaMacMibGetRequestConfirm+0x8e>
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 800afa6:	4a64      	ldr	r2, [pc, #400]	; (800b138 <LoRaMacMibGetRequestConfirm+0x22c>)
 800afa8:	4b64      	ldr	r3, [pc, #400]	; (800b13c <LoRaMacMibGetRequestConfirm+0x230>)
 800afaa:	58d3      	ldr	r3, [r2, r3]
 800afac:	337e      	adds	r3, #126	; 0x7e
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	e7ef      	b.n	800af92 <LoRaMacMibGetRequestConfirm+0x86>
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 800afb2:	4a61      	ldr	r2, [pc, #388]	; (800b138 <LoRaMacMibGetRequestConfirm+0x22c>)
 800afb4:	4b61      	ldr	r3, [pc, #388]	; (800b13c <LoRaMacMibGetRequestConfirm+0x230>)
 800afb6:	58d3      	ldr	r3, [r2, r3]
 800afb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 800afba:	6063      	str	r3, [r4, #4]
 800afbc:	e7ee      	b.n	800af9c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 800afbe:	4a5e      	ldr	r2, [pc, #376]	; (800b138 <LoRaMacMibGetRequestConfirm+0x22c>)
 800afc0:	4b5e      	ldr	r3, [pc, #376]	; (800b13c <LoRaMacMibGetRequestConfirm+0x230>)
 800afc2:	58d3      	ldr	r3, [r2, r3]
 800afc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afc6:	e7f8      	b.n	800afba <LoRaMacMibGetRequestConfirm+0xae>
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 800afc8:	4a5b      	ldr	r2, [pc, #364]	; (800b138 <LoRaMacMibGetRequestConfirm+0x22c>)
 800afca:	4b5c      	ldr	r3, [pc, #368]	; (800b13c <LoRaMacMibGetRequestConfirm+0x230>)
 800afcc:	58d3      	ldr	r3, [r2, r3]
 800afce:	337d      	adds	r3, #125	; 0x7d
 800afd0:	e7ed      	b.n	800afae <LoRaMacMibGetRequestConfirm+0xa2>
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800afd2:	4a59      	ldr	r2, [pc, #356]	; (800b138 <LoRaMacMibGetRequestConfirm+0x22c>)
 800afd4:	4b59      	ldr	r3, [pc, #356]	; (800b13c <LoRaMacMibGetRequestConfirm+0x230>)
 800afd6:	58d3      	ldr	r3, [r2, r3]
 800afd8:	33ca      	adds	r3, #202	; 0xca
 800afda:	e7e8      	b.n	800afae <LoRaMacMibGetRequestConfirm+0xa2>
            getPhy.Attribute = PHY_CHANNELS;
 800afdc:	231d      	movs	r3, #29
 800afde:	a902      	add	r1, sp, #8
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800afe0:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800afe2:	4a55      	ldr	r2, [pc, #340]	; (800b138 <LoRaMacMibGetRequestConfirm+0x22c>)
 800afe4:	4b55      	ldr	r3, [pc, #340]	; (800b13c <LoRaMacMibGetRequestConfirm+0x230>)
 800afe6:	58d3      	ldr	r3, [r2, r3]
 800afe8:	7818      	ldrb	r0, [r3, #0]
 800afea:	f002 fd91 	bl	800db10 <RegionGetPhyParam>
 800afee:	e7d4      	b.n	800af9a <LoRaMacMibGetRequestConfirm+0x8e>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 800aff0:	4a51      	ldr	r2, [pc, #324]	; (800b138 <LoRaMacMibGetRequestConfirm+0x22c>)
 800aff2:	4b52      	ldr	r3, [pc, #328]	; (800b13c <LoRaMacMibGetRequestConfirm+0x230>)
 800aff4:	58d3      	ldr	r3, [r2, r3]
 800aff6:	33a8      	adds	r3, #168	; 0xa8
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 800aff8:	3404      	adds	r4, #4
 800affa:	e004      	b.n	800b006 <LoRaMacMibGetRequestConfirm+0xfa>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 800affc:	4a4e      	ldr	r2, [pc, #312]	; (800b138 <LoRaMacMibGetRequestConfirm+0x22c>)
 800affe:	4b4f      	ldr	r3, [pc, #316]	; (800b13c <LoRaMacMibGetRequestConfirm+0x230>)
 800b000:	3404      	adds	r4, #4
 800b002:	58d3      	ldr	r3, [r2, r3]
 800b004:	3328      	adds	r3, #40	; 0x28
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 800b006:	cb06      	ldmia	r3!, {r1, r2}
 800b008:	c406      	stmia	r4!, {r1, r2}
            break;
 800b00a:	e7c7      	b.n	800af9c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 800b00c:	4a4a      	ldr	r2, [pc, #296]	; (800b138 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b00e:	4b4b      	ldr	r3, [pc, #300]	; (800b13c <LoRaMacMibGetRequestConfirm+0x230>)
 800b010:	58d3      	ldr	r3, [r2, r3]
 800b012:	33b0      	adds	r3, #176	; 0xb0
 800b014:	e7f0      	b.n	800aff8 <LoRaMacMibGetRequestConfirm+0xec>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 800b016:	4a48      	ldr	r2, [pc, #288]	; (800b138 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b018:	4b48      	ldr	r3, [pc, #288]	; (800b13c <LoRaMacMibGetRequestConfirm+0x230>)
 800b01a:	3404      	adds	r4, #4
 800b01c:	58d3      	ldr	r3, [r2, r3]
 800b01e:	3330      	adds	r3, #48	; 0x30
 800b020:	e7f1      	b.n	800b006 <LoRaMacMibGetRequestConfirm+0xfa>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800b022:	231b      	movs	r3, #27
 800b024:	a902      	add	r1, sp, #8
 800b026:	e7db      	b.n	800afe0 <LoRaMacMibGetRequestConfirm+0xd4>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800b028:	231a      	movs	r3, #26
 800b02a:	a902      	add	r1, sp, #8
 800b02c:	e7d8      	b.n	800afe0 <LoRaMacMibGetRequestConfirm+0xd4>
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800b02e:	4a42      	ldr	r2, [pc, #264]	; (800b138 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b030:	4b42      	ldr	r3, [pc, #264]	; (800b13c <LoRaMacMibGetRequestConfirm+0x230>)
 800b032:	58d3      	ldr	r3, [r2, r3]
 800b034:	33a4      	adds	r3, #164	; 0xa4
 800b036:	e7ba      	b.n	800afae <LoRaMacMibGetRequestConfirm+0xa2>
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 800b038:	4a3f      	ldr	r2, [pc, #252]	; (800b138 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b03a:	4b40      	ldr	r3, [pc, #256]	; (800b13c <LoRaMacMibGetRequestConfirm+0x230>)
 800b03c:	58d3      	ldr	r3, [r2, r3]
 800b03e:	3390      	adds	r3, #144	; 0x90
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	e7ba      	b.n	800afba <LoRaMacMibGetRequestConfirm+0xae>
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 800b044:	4a3c      	ldr	r2, [pc, #240]	; (800b138 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b046:	4b3d      	ldr	r3, [pc, #244]	; (800b13c <LoRaMacMibGetRequestConfirm+0x230>)
 800b048:	58d3      	ldr	r3, [r2, r3]
 800b04a:	3394      	adds	r3, #148	; 0x94
 800b04c:	e7f8      	b.n	800b040 <LoRaMacMibGetRequestConfirm+0x134>
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 800b04e:	4a3a      	ldr	r2, [pc, #232]	; (800b138 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b050:	4b3a      	ldr	r3, [pc, #232]	; (800b13c <LoRaMacMibGetRequestConfirm+0x230>)
 800b052:	58d3      	ldr	r3, [r2, r3]
 800b054:	3398      	adds	r3, #152	; 0x98
 800b056:	e7f3      	b.n	800b040 <LoRaMacMibGetRequestConfirm+0x134>
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 800b058:	4a37      	ldr	r2, [pc, #220]	; (800b138 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b05a:	4b38      	ldr	r3, [pc, #224]	; (800b13c <LoRaMacMibGetRequestConfirm+0x230>)
 800b05c:	58d3      	ldr	r3, [r2, r3]
 800b05e:	339c      	adds	r3, #156	; 0x9c
 800b060:	e7ee      	b.n	800b040 <LoRaMacMibGetRequestConfirm+0x134>
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 800b062:	4a35      	ldr	r2, [pc, #212]	; (800b138 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b064:	4b35      	ldr	r3, [pc, #212]	; (800b13c <LoRaMacMibGetRequestConfirm+0x230>)
 800b066:	58d3      	ldr	r3, [r2, r3]
 800b068:	33a0      	adds	r3, #160	; 0xa0
 800b06a:	e7e9      	b.n	800b040 <LoRaMacMibGetRequestConfirm+0x134>
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800b06c:	4a32      	ldr	r2, [pc, #200]	; (800b138 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b06e:	4b33      	ldr	r3, [pc, #204]	; (800b13c <LoRaMacMibGetRequestConfirm+0x230>)
 800b070:	58d3      	ldr	r3, [r2, r3]
 800b072:	795b      	ldrb	r3, [r3, #5]
 800b074:	e78d      	b.n	800af92 <LoRaMacMibGetRequestConfirm+0x86>
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800b076:	4a30      	ldr	r2, [pc, #192]	; (800b138 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b078:	4b30      	ldr	r3, [pc, #192]	; (800b13c <LoRaMacMibGetRequestConfirm+0x230>)
 800b07a:	58d3      	ldr	r3, [r2, r3]
 800b07c:	3385      	adds	r3, #133	; 0x85
 800b07e:	e796      	b.n	800afae <LoRaMacMibGetRequestConfirm+0xa2>
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800b080:	4a2d      	ldr	r2, [pc, #180]	; (800b138 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b082:	4b2e      	ldr	r3, [pc, #184]	; (800b13c <LoRaMacMibGetRequestConfirm+0x230>)
 800b084:	58d3      	ldr	r3, [r2, r3]
 800b086:	791b      	ldrb	r3, [r3, #4]
 800b088:	e783      	b.n	800af92 <LoRaMacMibGetRequestConfirm+0x86>
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800b08a:	4a2b      	ldr	r2, [pc, #172]	; (800b138 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b08c:	4b2b      	ldr	r3, [pc, #172]	; (800b13c <LoRaMacMibGetRequestConfirm+0x230>)
 800b08e:	58d3      	ldr	r3, [r2, r3]
 800b090:	3384      	adds	r3, #132	; 0x84
 800b092:	e78c      	b.n	800afae <LoRaMacMibGetRequestConfirm+0xa2>
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 800b094:	4a28      	ldr	r2, [pc, #160]	; (800b138 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b096:	4b29      	ldr	r3, [pc, #164]	; (800b13c <LoRaMacMibGetRequestConfirm+0x230>)
 800b098:	58d3      	ldr	r3, [r2, r3]
 800b09a:	3388      	adds	r3, #136	; 0x88
 800b09c:	e7d0      	b.n	800b040 <LoRaMacMibGetRequestConfirm+0x134>
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 800b09e:	4a26      	ldr	r2, [pc, #152]	; (800b138 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b0a0:	4b26      	ldr	r3, [pc, #152]	; (800b13c <LoRaMacMibGetRequestConfirm+0x230>)
 800b0a2:	58d3      	ldr	r3, [r2, r3]
 800b0a4:	338c      	adds	r3, #140	; 0x8c
 800b0a6:	e782      	b.n	800afae <LoRaMacMibGetRequestConfirm+0xa2>
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800b0a8:	4a23      	ldr	r2, [pc, #140]	; (800b138 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b0aa:	4b24      	ldr	r3, [pc, #144]	; (800b13c <LoRaMacMibGetRequestConfirm+0x230>)
 800b0ac:	58d3      	ldr	r3, [r2, r3]
 800b0ae:	33c0      	adds	r3, #192	; 0xc0
 800b0b0:	681b      	ldr	r3, [r3, #0]
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800b0b2:	6063      	str	r3, [r4, #4]
 800b0b4:	e772      	b.n	800af9c <LoRaMacMibGetRequestConfirm+0x90>
    Contexts.MacNvmCtx = &NvmMacCtx;
 800b0b6:	4e22      	ldr	r6, [pc, #136]	; (800b140 <LoRaMacMibGetRequestConfirm+0x234>)
 800b0b8:	4b22      	ldr	r3, [pc, #136]	; (800b144 <LoRaMacMibGetRequestConfirm+0x238>)
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800b0ba:	0030      	movs	r0, r6
    Contexts.MacNvmCtx = &NvmMacCtx;
 800b0bc:	6073      	str	r3, [r6, #4]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 800b0be:	23b6      	movs	r3, #182	; 0xb6
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800b0c0:	3018      	adds	r0, #24
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 800b0c2:	005b      	lsls	r3, r3, #1
 800b0c4:	60b3      	str	r3, [r6, #8]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800b0c6:	f002 f9e5 	bl	800d494 <LoRaMacCryptoGetNvmCtx>
    GetNvmCtxParams_t params ={ 0 };
 800b0ca:	2500      	movs	r5, #0
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800b0cc:	4a1a      	ldr	r2, [pc, #104]	; (800b138 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b0ce:	4b1b      	ldr	r3, [pc, #108]	; (800b13c <LoRaMacMibGetRequestConfirm+0x230>)
 800b0d0:	a902      	add	r1, sp, #8
 800b0d2:	58d3      	ldr	r3, [r2, r3]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800b0d4:	6170      	str	r0, [r6, #20]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800b0d6:	7818      	ldrb	r0, [r3, #0]
    GetNvmCtxParams_t params ={ 0 };
 800b0d8:	9502      	str	r5, [sp, #8]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800b0da:	f002 fd33 	bl	800db44 <RegionGetNvmCtx>
 800b0de:	60f0      	str	r0, [r6, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 800b0e0:	0030      	movs	r0, r6
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 800b0e2:	9b02      	ldr	r3, [sp, #8]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 800b0e4:	3020      	adds	r0, #32
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 800b0e6:	6133      	str	r3, [r6, #16]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 800b0e8:	f7fd f82e 	bl	8008148 <SecureElementGetNvmCtx>
 800b0ec:	61f0      	str	r0, [r6, #28]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 800b0ee:	0030      	movs	r0, r6
 800b0f0:	3028      	adds	r0, #40	; 0x28
 800b0f2:	f001 fe7d 	bl	800cdf0 <LoRaMacCommandsGetNvmCtx>
 800b0f6:	6270      	str	r0, [r6, #36]	; 0x24
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 800b0f8:	0030      	movs	r0, r6
 800b0fa:	3030      	adds	r0, #48	; 0x30
 800b0fc:	f000 fff2 	bl	800c0e4 <LoRaMacClassBGetNvmCtx>
 800b100:	62f0      	str	r0, [r6, #44]	; 0x2c
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 800b102:	0030      	movs	r0, r6
 800b104:	3038      	adds	r0, #56	; 0x38
 800b106:	f001 ffc1 	bl	800d08c <LoRaMacConfirmQueueGetNvmCtx>
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800b10a:	1d37      	adds	r7, r6, #4
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 800b10c:	6370      	str	r0, [r6, #52]	; 0x34
            mibGet->Param.Contexts = GetCtxs( );
 800b10e:	6067      	str	r7, [r4, #4]
            break;
 800b110:	e744      	b.n	800af9c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800b112:	4a09      	ldr	r2, [pc, #36]	; (800b138 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b114:	4b09      	ldr	r3, [pc, #36]	; (800b13c <LoRaMacMibGetRequestConfirm+0x230>)
 800b116:	58d3      	ldr	r3, [r2, r3]
 800b118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b11a:	e7ca      	b.n	800b0b2 <LoRaMacMibGetRequestConfirm+0x1a6>
            mibGet->Param.LrWanVersion.LoRaWan = MacCtx.NvmCtx->Version;
 800b11c:	4a06      	ldr	r2, [pc, #24]	; (800b138 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b11e:	4b07      	ldr	r3, [pc, #28]	; (800b13c <LoRaMacMibGetRequestConfirm+0x230>)
 800b120:	58d3      	ldr	r3, [r2, r3]
 800b122:	33fc      	adds	r3, #252	; 0xfc
 800b124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b126:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800b128:	f002 fdc6 	bl	800dcb8 <RegionGetVersion>
 800b12c:	60a0      	str	r0, [r4, #8]
            break;
 800b12e:	e735      	b.n	800af9c <LoRaMacMibGetRequestConfirm+0x90>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800b130:	0020      	movs	r0, r4
 800b132:	f001 f96b 	bl	800c40c <LoRaMacClassBMibGetRequestConfirm>
            break;
 800b136:	e724      	b.n	800af82 <LoRaMacMibGetRequestConfirm+0x76>
 800b138:	200006cc 	.word	0x200006cc
 800b13c:	00000484 	.word	0x00000484
 800b140:	20000524 	.word	0x20000524
 800b144:	20000560 	.word	0x20000560

0800b148 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800b148:	b570      	push	{r4, r5, r6, lr}
 800b14a:	0004      	movs	r4, r0
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b14c:	2603      	movs	r6, #3
{
 800b14e:	b086      	sub	sp, #24
    if( mibSet == NULL )
 800b150:	2800      	cmp	r0, #0
 800b152:	d06b      	beq.n	800b22c <LoRaMacMibSetRequestConfirm+0xe4>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800b154:	23d0      	movs	r3, #208	; 0xd0
 800b156:	4db9      	ldr	r5, [pc, #740]	; (800b43c <LoRaMacMibSetRequestConfirm+0x2f4>)
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	58eb      	ldr	r3, [r5, r3]
    {
        return LORAMAC_STATUS_BUSY;
 800b15c:	3e02      	subs	r6, #2
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800b15e:	079a      	lsls	r2, r3, #30
 800b160:	d464      	bmi.n	800b22c <LoRaMacMibSetRequestConfirm+0xe4>
    }

    switch( mibSet->Type )
 800b162:	7800      	ldrb	r0, [r0, #0]
 800b164:	2827      	cmp	r0, #39	; 0x27
 800b166:	d900      	bls.n	800b16a <LoRaMacMibSetRequestConfirm+0x22>
 800b168:	e20a      	b.n	800b580 <LoRaMacMibSetRequestConfirm+0x438>
 800b16a:	f7f4 fff3 	bl	8000154 <__gnu_thumb1_case_uhi>
 800b16e:	0028      	.short	0x0028
 800b170:	0037002d 	.word	0x0037002d
 800b174:	00460042 	.word	0x00460042
 800b178:	0051004c 	.word	0x0051004c
 800b17c:	00620056 	.word	0x00620056
 800b180:	006c0067 	.word	0x006c0067
 800b184:	00760071 	.word	0x00760071
 800b188:	0080007b 	.word	0x0080007b
 800b18c:	00920085 	.word	0x00920085
 800b190:	00960209 	.word	0x00960209
 800b194:	00ce00b9 	.word	0x00ce00b9
 800b198:	011b00f8 	.word	0x011b00f8
 800b19c:	0120010d 	.word	0x0120010d
 800b1a0:	012f0129 	.word	0x012f0129
 800b1a4:	01370133 	.word	0x01370133
 800b1a8:	013f013b 	.word	0x013f013b
 800b1ac:	017f0151 	.word	0x017f0151
 800b1b0:	0191016d 	.word	0x0191016d
 800b1b4:	019d0197 	.word	0x019d0197
 800b1b8:	01a801a3 	.word	0x01a801a3
 800b1bc:	01fc      	.short	0x01fc
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800b1be:	7920      	ldrb	r0, [r4, #4]
 800b1c0:	f7fe fb6a 	bl	8009898 <SwitchClass>
            }
            break;
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800b1c4:	0006      	movs	r6, r0
            break;
 800b1c6:	e00f      	b.n	800b1e8 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800b1c8:	7923      	ldrb	r3, [r4, #4]
 800b1ca:	2b02      	cmp	r3, #2
 800b1cc:	d00b      	beq.n	800b1e6 <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 800b1ce:	4a9c      	ldr	r2, [pc, #624]	; (800b440 <LoRaMacMibSetRequestConfirm+0x2f8>)
 800b1d0:	58a9      	ldr	r1, [r5, r2]
 800b1d2:	22b2      	movs	r2, #178	; 0xb2
 800b1d4:	0052      	lsls	r2, r2, #1
 800b1d6:	548b      	strb	r3, [r1, r2]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b1d8:	2600      	movs	r6, #0
            break;
 800b1da:	e005      	b.n	800b1e8 <LoRaMacMibSetRequestConfirm+0xa0>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800b1dc:	6860      	ldr	r0, [r4, #4]
 800b1de:	f7fd f8bd 	bl	800835c <SecureElementSetDevEui>
 800b1e2:	2800      	cmp	r0, #0
 800b1e4:	d0f8      	beq.n	800b1d8 <LoRaMacMibSetRequestConfirm+0x90>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b1e6:	2603      	movs	r6, #3
        }
    }
    EventRegionNvmCtxChanged( );
 800b1e8:	f7fd ff13 	bl	8009012 <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 800b1ec:	f7fd ff0c 	bl	8009008 <EventMacNvmCtxChanged>
    return status;
 800b1f0:	e01c      	b.n	800b22c <LoRaMacMibSetRequestConfirm+0xe4>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800b1f2:	6860      	ldr	r0, [r4, #4]
 800b1f4:	f7fd f8c8 	bl	8008388 <SecureElementSetJoinEui>
 800b1f8:	e7f3      	b.n	800b1e2 <LoRaMacMibSetRequestConfirm+0x9a>
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 800b1fa:	4b91      	ldr	r3, [pc, #580]	; (800b440 <LoRaMacMibSetRequestConfirm+0x2f8>)
 800b1fc:	58eb      	ldr	r3, [r5, r3]
 800b1fe:	337e      	adds	r3, #126	; 0x7e
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800b200:	7922      	ldrb	r2, [r4, #4]
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800b202:	701a      	strb	r2, [r3, #0]
 800b204:	e7e8      	b.n	800b1d8 <LoRaMacMibSetRequestConfirm+0x90>
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 800b206:	4b8e      	ldr	r3, [pc, #568]	; (800b440 <LoRaMacMibSetRequestConfirm+0x2f8>)
 800b208:	6862      	ldr	r2, [r4, #4]
 800b20a:	58eb      	ldr	r3, [r5, r3]
 800b20c:	649a      	str	r2, [r3, #72]	; 0x48
 800b20e:	e7e3      	b.n	800b1d8 <LoRaMacMibSetRequestConfirm+0x90>
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 800b210:	4b8b      	ldr	r3, [pc, #556]	; (800b440 <LoRaMacMibSetRequestConfirm+0x2f8>)
 800b212:	6862      	ldr	r2, [r4, #4]
 800b214:	58eb      	ldr	r3, [r5, r3]
 800b216:	64da      	str	r2, [r3, #76]	; 0x4c
 800b218:	e7de      	b.n	800b1d8 <LoRaMacMibSetRequestConfirm+0x90>
            if( mibSet->Param.AppKey != NULL )
 800b21a:	6861      	ldr	r1, [r4, #4]
 800b21c:	2900      	cmp	r1, #0
 800b21e:	d0e2      	beq.n	800b1e6 <LoRaMacMibSetRequestConfirm+0x9e>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800b220:	2000      	movs	r0, #0
 800b222:	f002 fab3 	bl	800d78c <LoRaMacCryptoSetKey>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b226:	2611      	movs	r6, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800b228:	2800      	cmp	r0, #0
 800b22a:	d0d5      	beq.n	800b1d8 <LoRaMacMibSetRequestConfirm+0x90>
}
 800b22c:	0030      	movs	r0, r6
 800b22e:	b006      	add	sp, #24
 800b230:	bd70      	pop	{r4, r5, r6, pc}
            if( mibSet->Param.NwkKey != NULL )
 800b232:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800b234:	2001      	movs	r0, #1
            if( mibSet->Param.NwkKey != NULL )
 800b236:	2900      	cmp	r1, #0
 800b238:	d1f3      	bne.n	800b222 <LoRaMacMibSetRequestConfirm+0xda>
 800b23a:	e7d4      	b.n	800b1e6 <LoRaMacMibSetRequestConfirm+0x9e>
            if( mibSet->Param.NwkSKey != NULL )
 800b23c:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800b23e:	2002      	movs	r0, #2
            if( mibSet->Param.NwkSKey != NULL )
 800b240:	2900      	cmp	r1, #0
 800b242:	d1ee      	bne.n	800b222 <LoRaMacMibSetRequestConfirm+0xda>
 800b244:	e7cf      	b.n	800b1e6 <LoRaMacMibSetRequestConfirm+0x9e>
            if( mibSet->Param.AppSKey != NULL )
 800b246:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800b248:	2003      	movs	r0, #3
            if( mibSet->Param.AppSKey != NULL )
 800b24a:	2900      	cmp	r1, #0
 800b24c:	d1e9      	bne.n	800b222 <LoRaMacMibSetRequestConfirm+0xda>
 800b24e:	e7ca      	b.n	800b1e6 <LoRaMacMibSetRequestConfirm+0x9e>
            if( mibSet->Param.McKEKey != NULL )
 800b250:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800b252:	207f      	movs	r0, #127	; 0x7f
            if( mibSet->Param.McKEKey != NULL )
 800b254:	2900      	cmp	r1, #0
 800b256:	d1e4      	bne.n	800b222 <LoRaMacMibSetRequestConfirm+0xda>
 800b258:	e7c5      	b.n	800b1e6 <LoRaMacMibSetRequestConfirm+0x9e>
            if( mibSet->Param.McKey0 != NULL )
 800b25a:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800b25c:	2080      	movs	r0, #128	; 0x80
            if( mibSet->Param.McKey0 != NULL )
 800b25e:	2900      	cmp	r1, #0
 800b260:	d1df      	bne.n	800b222 <LoRaMacMibSetRequestConfirm+0xda>
 800b262:	e7c0      	b.n	800b1e6 <LoRaMacMibSetRequestConfirm+0x9e>
            if( mibSet->Param.McAppSKey0 != NULL )
 800b264:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800b266:	2081      	movs	r0, #129	; 0x81
            if( mibSet->Param.McAppSKey0 != NULL )
 800b268:	2900      	cmp	r1, #0
 800b26a:	d1da      	bne.n	800b222 <LoRaMacMibSetRequestConfirm+0xda>
 800b26c:	e7bb      	b.n	800b1e6 <LoRaMacMibSetRequestConfirm+0x9e>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800b26e:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800b270:	2082      	movs	r0, #130	; 0x82
            if( mibSet->Param.McNwkSKey0 != NULL )
 800b272:	2900      	cmp	r1, #0
 800b274:	d1d5      	bne.n	800b222 <LoRaMacMibSetRequestConfirm+0xda>
 800b276:	e7b6      	b.n	800b1e6 <LoRaMacMibSetRequestConfirm+0x9e>
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800b278:	4b71      	ldr	r3, [pc, #452]	; (800b440 <LoRaMacMibSetRequestConfirm+0x2f8>)
 800b27a:	7920      	ldrb	r0, [r4, #4]
 800b27c:	58eb      	ldr	r3, [r5, r3]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800b27e:	4c71      	ldr	r4, [pc, #452]	; (800b444 <LoRaMacMibSetRequestConfirm+0x2fc>)
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800b280:	337d      	adds	r3, #125	; 0x7d
 800b282:	7018      	strb	r0, [r3, #0]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800b284:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b286:	9301      	str	r3, [sp, #4]
 800b288:	4798      	blx	r3
            Radio.Sleep( );
 800b28a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b28c:	9301      	str	r3, [sp, #4]
 800b28e:	4798      	blx	r3
            break;
 800b290:	e7a2      	b.n	800b1d8 <LoRaMacMibSetRequestConfirm+0x90>
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800b292:	4b6b      	ldr	r3, [pc, #428]	; (800b440 <LoRaMacMibSetRequestConfirm+0x2f8>)
 800b294:	58eb      	ldr	r3, [r5, r3]
 800b296:	33ca      	adds	r3, #202	; 0xca
 800b298:	e7b2      	b.n	800b200 <LoRaMacMibSetRequestConfirm+0xb8>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800b29a:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b29c:	4e68      	ldr	r6, [pc, #416]	; (800b440 <LoRaMacMibSetRequestConfirm+0x2f8>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800b29e:	aa02      	add	r2, sp, #8
 800b2a0:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b2a2:	59ab      	ldr	r3, [r5, r6]
 800b2a4:	a902      	add	r1, sp, #8
 800b2a6:	001a      	movs	r2, r3
 800b2a8:	32b9      	adds	r2, #185	; 0xb9
 800b2aa:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) != true )
 800b2ac:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b2ae:	714a      	strb	r2, [r1, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) != true )
 800b2b0:	2207      	movs	r2, #7
 800b2b2:	a903      	add	r1, sp, #12
 800b2b4:	f002 fc50 	bl	800db58 <RegionVerify>
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	d100      	bne.n	800b2be <LoRaMacMibSetRequestConfirm+0x176>
 800b2bc:	e793      	b.n	800b1e6 <LoRaMacMibSetRequestConfirm+0x9e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800b2be:	6863      	ldr	r3, [r4, #4]
                if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_FREQUENCY ) != true )
 800b2c0:	2200      	movs	r2, #0
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800b2c2:	9303      	str	r3, [sp, #12]
                if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_FREQUENCY ) != true )
 800b2c4:	59ab      	ldr	r3, [r5, r6]
 800b2c6:	a903      	add	r1, sp, #12
 800b2c8:	7818      	ldrb	r0, [r3, #0]
 800b2ca:	f002 fc45 	bl	800db58 <RegionVerify>
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	d100      	bne.n	800b2d4 <LoRaMacMibSetRequestConfirm+0x18c>
 800b2d2:	e788      	b.n	800b1e6 <LoRaMacMibSetRequestConfirm+0x9e>
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800b2d4:	59ab      	ldr	r3, [r5, r6]
 800b2d6:	33a8      	adds	r3, #168	; 0xa8
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800b2d8:	3404      	adds	r4, #4
 800b2da:	cc06      	ldmia	r4!, {r1, r2}
 800b2dc:	c306      	stmia	r3!, {r1, r2}
 800b2de:	e77b      	b.n	800b1d8 <LoRaMacMibSetRequestConfirm+0x90>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800b2e0:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b2e2:	4e57      	ldr	r6, [pc, #348]	; (800b440 <LoRaMacMibSetRequestConfirm+0x2f8>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800b2e4:	aa02      	add	r2, sp, #8
 800b2e6:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b2e8:	59ab      	ldr	r3, [r5, r6]
 800b2ea:	a902      	add	r1, sp, #8
 800b2ec:	001a      	movs	r2, r3
 800b2ee:	32b9      	adds	r2, #185	; 0xb9
 800b2f0:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800b2f2:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b2f4:	714a      	strb	r2, [r1, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800b2f6:	2207      	movs	r2, #7
 800b2f8:	a903      	add	r1, sp, #12
 800b2fa:	f002 fc2d 	bl	800db58 <RegionVerify>
 800b2fe:	2800      	cmp	r0, #0
 800b300:	d100      	bne.n	800b304 <LoRaMacMibSetRequestConfirm+0x1bc>
 800b302:	e770      	b.n	800b1e6 <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800b304:	59ab      	ldr	r3, [r5, r6]
 800b306:	3328      	adds	r3, #40	; 0x28
 800b308:	e7e6      	b.n	800b2d8 <LoRaMacMibSetRequestConfirm+0x190>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800b30a:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b30c:	4e4c      	ldr	r6, [pc, #304]	; (800b440 <LoRaMacMibSetRequestConfirm+0x2f8>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800b30e:	aa02      	add	r2, sp, #8
 800b310:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b312:	59ab      	ldr	r3, [r5, r6]
 800b314:	a902      	add	r1, sp, #8
 800b316:	001a      	movs	r2, r3
 800b318:	32b9      	adds	r2, #185	; 0xb9
 800b31a:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800b31c:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b31e:	714a      	strb	r2, [r1, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800b320:	2207      	movs	r2, #7
 800b322:	a903      	add	r1, sp, #12
 800b324:	f002 fc18 	bl	800db58 <RegionVerify>
 800b328:	2800      	cmp	r0, #0
 800b32a:	d100      	bne.n	800b32e <LoRaMacMibSetRequestConfirm+0x1e6>
 800b32c:	e75b      	b.n	800b1e6 <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800b32e:	59ab      	ldr	r3, [r5, r6]
 800b330:	3404      	adds	r4, #4
 800b332:	001a      	movs	r2, r3
 800b334:	32b0      	adds	r2, #176	; 0xb0
 800b336:	cc03      	ldmia	r4!, {r0, r1}
 800b338:	c203      	stmia	r2!, {r0, r1}
                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800b33a:	3a3c      	subs	r2, #60	; 0x3c
 800b33c:	7812      	ldrb	r2, [r2, #0]
 800b33e:	2a02      	cmp	r2, #2
 800b340:	d000      	beq.n	800b344 <LoRaMacMibSetRequestConfirm+0x1fc>
 800b342:	e749      	b.n	800b1d8 <LoRaMacMibSetRequestConfirm+0x90>
 800b344:	3263      	adds	r2, #99	; 0x63
 800b346:	32ff      	adds	r2, #255	; 0xff
 800b348:	5c9b      	ldrb	r3, [r3, r2]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d100      	bne.n	800b350 <LoRaMacMibSetRequestConfirm+0x208>
 800b34e:	e743      	b.n	800b1d8 <LoRaMacMibSetRequestConfirm+0x90>
                    Radio.Sleep( );
 800b350:	4b3c      	ldr	r3, [pc, #240]	; (800b444 <LoRaMacMibSetRequestConfirm+0x2fc>)
 800b352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b354:	9301      	str	r3, [sp, #4]
 800b356:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800b358:	f7fe fa64 	bl	8009824 <OpenContinuousRxCWindow>
 800b35c:	e73c      	b.n	800b1d8 <LoRaMacMibSetRequestConfirm+0x90>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800b35e:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b360:	4e37      	ldr	r6, [pc, #220]	; (800b440 <LoRaMacMibSetRequestConfirm+0x2f8>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800b362:	aa02      	add	r2, sp, #8
 800b364:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b366:	59ab      	ldr	r3, [r5, r6]
 800b368:	a902      	add	r1, sp, #8
 800b36a:	001a      	movs	r2, r3
 800b36c:	32b9      	adds	r2, #185	; 0xb9
 800b36e:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800b370:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b372:	714a      	strb	r2, [r1, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800b374:	2207      	movs	r2, #7
 800b376:	a903      	add	r1, sp, #12
 800b378:	f002 fbee 	bl	800db58 <RegionVerify>
 800b37c:	2800      	cmp	r0, #0
 800b37e:	d100      	bne.n	800b382 <LoRaMacMibSetRequestConfirm+0x23a>
 800b380:	e731      	b.n	800b1e6 <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800b382:	59ab      	ldr	r3, [r5, r6]
 800b384:	3330      	adds	r3, #48	; 0x30
 800b386:	e7a7      	b.n	800b2d8 <LoRaMacMibSetRequestConfirm+0x190>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800b388:	6863      	ldr	r3, [r4, #4]
 800b38a:	a904      	add	r1, sp, #16
 800b38c:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800b38e:	2301      	movs	r3, #1
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800b390:	710b      	strb	r3, [r1, #4]
            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 800b392:	4b2b      	ldr	r3, [pc, #172]	; (800b440 <LoRaMacMibSetRequestConfirm+0x2f8>)
 800b394:	58eb      	ldr	r3, [r5, r3]
 800b396:	7818      	ldrb	r0, [r3, #0]
 800b398:	f002 fbf1 	bl	800db7e <RegionChanMaskSet>
 800b39c:	2800      	cmp	r0, #0
 800b39e:	d000      	beq.n	800b3a2 <LoRaMacMibSetRequestConfirm+0x25a>
 800b3a0:	e71a      	b.n	800b1d8 <LoRaMacMibSetRequestConfirm+0x90>
 800b3a2:	e720      	b.n	800b1e6 <LoRaMacMibSetRequestConfirm+0x9e>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800b3a4:	6863      	ldr	r3, [r4, #4]
 800b3a6:	a904      	add	r1, sp, #16
 800b3a8:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	e7f0      	b.n	800b390 <LoRaMacMibSetRequestConfirm+0x248>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800b3ae:	7922      	ldrb	r2, [r4, #4]
 800b3b0:	1e53      	subs	r3, r2, #1
 800b3b2:	2b0e      	cmp	r3, #14
 800b3b4:	d900      	bls.n	800b3b8 <LoRaMacMibSetRequestConfirm+0x270>
 800b3b6:	e716      	b.n	800b1e6 <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800b3b8:	4b21      	ldr	r3, [pc, #132]	; (800b440 <LoRaMacMibSetRequestConfirm+0x2f8>)
 800b3ba:	58eb      	ldr	r3, [r5, r3]
 800b3bc:	33a4      	adds	r3, #164	; 0xa4
 800b3be:	e720      	b.n	800b202 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800b3c0:	4b1f      	ldr	r3, [pc, #124]	; (800b440 <LoRaMacMibSetRequestConfirm+0x2f8>)
 800b3c2:	58eb      	ldr	r3, [r5, r3]
 800b3c4:	3390      	adds	r3, #144	; 0x90
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800b3c6:	6862      	ldr	r2, [r4, #4]
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800b3c8:	601a      	str	r2, [r3, #0]
 800b3ca:	e705      	b.n	800b1d8 <LoRaMacMibSetRequestConfirm+0x90>
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800b3cc:	4b1c      	ldr	r3, [pc, #112]	; (800b440 <LoRaMacMibSetRequestConfirm+0x2f8>)
 800b3ce:	58eb      	ldr	r3, [r5, r3]
 800b3d0:	3394      	adds	r3, #148	; 0x94
 800b3d2:	e7f8      	b.n	800b3c6 <LoRaMacMibSetRequestConfirm+0x27e>
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800b3d4:	4b1a      	ldr	r3, [pc, #104]	; (800b440 <LoRaMacMibSetRequestConfirm+0x2f8>)
 800b3d6:	58eb      	ldr	r3, [r5, r3]
 800b3d8:	3398      	adds	r3, #152	; 0x98
 800b3da:	e7f4      	b.n	800b3c6 <LoRaMacMibSetRequestConfirm+0x27e>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800b3dc:	4b18      	ldr	r3, [pc, #96]	; (800b440 <LoRaMacMibSetRequestConfirm+0x2f8>)
 800b3de:	58eb      	ldr	r3, [r5, r3]
 800b3e0:	339c      	adds	r3, #156	; 0x9c
 800b3e2:	e7f0      	b.n	800b3c6 <LoRaMacMibSetRequestConfirm+0x27e>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800b3e4:	4b16      	ldr	r3, [pc, #88]	; (800b440 <LoRaMacMibSetRequestConfirm+0x2f8>)
 800b3e6:	58eb      	ldr	r3, [r5, r3]
 800b3e8:	33a0      	adds	r3, #160	; 0xa0
 800b3ea:	e7ec      	b.n	800b3c6 <LoRaMacMibSetRequestConfirm+0x27e>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800b3ec:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 800b3ee:	4c14      	ldr	r4, [pc, #80]	; (800b440 <LoRaMacMibSetRequestConfirm+0x2f8>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800b3f0:	aa02      	add	r2, sp, #8
 800b3f2:	7113      	strb	r3, [r2, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 800b3f4:	592b      	ldr	r3, [r5, r4]
 800b3f6:	2206      	movs	r2, #6
 800b3f8:	7818      	ldrb	r0, [r3, #0]
 800b3fa:	a903      	add	r1, sp, #12
 800b3fc:	f002 fbac 	bl	800db58 <RegionVerify>
 800b400:	2800      	cmp	r0, #0
 800b402:	d100      	bne.n	800b406 <LoRaMacMibSetRequestConfirm+0x2be>
 800b404:	e6ef      	b.n	800b1e6 <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 800b406:	aa02      	add	r2, sp, #8
 800b408:	592b      	ldr	r3, [r5, r4]
 800b40a:	7912      	ldrb	r2, [r2, #4]
 800b40c:	715a      	strb	r2, [r3, #5]
 800b40e:	e6e3      	b.n	800b1d8 <LoRaMacMibSetRequestConfirm+0x90>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800b410:	7923      	ldrb	r3, [r4, #4]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b412:	4c0b      	ldr	r4, [pc, #44]	; (800b440 <LoRaMacMibSetRequestConfirm+0x2f8>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800b414:	ae03      	add	r6, sp, #12
 800b416:	7033      	strb	r3, [r6, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b418:	592b      	ldr	r3, [r5, r4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800b41a:	0031      	movs	r1, r6
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b41c:	001a      	movs	r2, r3
 800b41e:	32b8      	adds	r2, #184	; 0xb8
 800b420:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800b422:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b424:	70b2      	strb	r2, [r6, #2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800b426:	2205      	movs	r2, #5
 800b428:	f002 fb96 	bl	800db58 <RegionVerify>
 800b42c:	2800      	cmp	r0, #0
 800b42e:	d100      	bne.n	800b432 <LoRaMacMibSetRequestConfirm+0x2ea>
 800b430:	e6d9      	b.n	800b1e6 <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800b432:	592b      	ldr	r3, [r5, r4]
 800b434:	7832      	ldrb	r2, [r6, #0]
 800b436:	3385      	adds	r3, #133	; 0x85
 800b438:	e6e3      	b.n	800b202 <LoRaMacMibSetRequestConfirm+0xba>
 800b43a:	46c0      	nop			; (mov r8, r8)
 800b43c:	200006cc 	.word	0x200006cc
 800b440:	00000484 	.word	0x00000484
 800b444:	080117e0 	.word	0x080117e0
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800b448:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 800b44a:	4c4f      	ldr	r4, [pc, #316]	; (800b588 <LoRaMacMibSetRequestConfirm+0x440>)
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800b44c:	aa02      	add	r2, sp, #8
 800b44e:	7113      	strb	r3, [r2, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 800b450:	592b      	ldr	r3, [r5, r4]
 800b452:	220a      	movs	r2, #10
 800b454:	7818      	ldrb	r0, [r3, #0]
 800b456:	a903      	add	r1, sp, #12
 800b458:	f002 fb7e 	bl	800db58 <RegionVerify>
 800b45c:	2800      	cmp	r0, #0
 800b45e:	d100      	bne.n	800b462 <LoRaMacMibSetRequestConfirm+0x31a>
 800b460:	e6c1      	b.n	800b1e6 <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 800b462:	aa02      	add	r2, sp, #8
 800b464:	592b      	ldr	r3, [r5, r4]
 800b466:	7912      	ldrb	r2, [r2, #4]
 800b468:	711a      	strb	r2, [r3, #4]
 800b46a:	e6b5      	b.n	800b1d8 <LoRaMacMibSetRequestConfirm+0x90>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800b46c:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 800b46e:	4c46      	ldr	r4, [pc, #280]	; (800b588 <LoRaMacMibSetRequestConfirm+0x440>)
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800b470:	aa02      	add	r2, sp, #8
 800b472:	7113      	strb	r3, [r2, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 800b474:	592b      	ldr	r3, [r5, r4]
 800b476:	2209      	movs	r2, #9
 800b478:	7818      	ldrb	r0, [r3, #0]
 800b47a:	a903      	add	r1, sp, #12
 800b47c:	f002 fb6c 	bl	800db58 <RegionVerify>
 800b480:	2800      	cmp	r0, #0
 800b482:	d100      	bne.n	800b486 <LoRaMacMibSetRequestConfirm+0x33e>
 800b484:	e6af      	b.n	800b1e6 <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 800b486:	592b      	ldr	r3, [r5, r4]
 800b488:	aa02      	add	r2, sp, #8
 800b48a:	7912      	ldrb	r2, [r2, #4]
 800b48c:	3384      	adds	r3, #132	; 0x84
 800b48e:	e6b8      	b.n	800b202 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800b490:	4b3d      	ldr	r3, [pc, #244]	; (800b588 <LoRaMacMibSetRequestConfirm+0x440>)
 800b492:	6862      	ldr	r2, [r4, #4]
 800b494:	58eb      	ldr	r3, [r5, r3]
 800b496:	609a      	str	r2, [r3, #8]
 800b498:	3388      	adds	r3, #136	; 0x88
 800b49a:	e795      	b.n	800b3c8 <LoRaMacMibSetRequestConfirm+0x280>
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800b49c:	4b3a      	ldr	r3, [pc, #232]	; (800b588 <LoRaMacMibSetRequestConfirm+0x440>)
 800b49e:	7922      	ldrb	r2, [r4, #4]
 800b4a0:	58eb      	ldr	r3, [r5, r3]
 800b4a2:	731a      	strb	r2, [r3, #12]
 800b4a4:	338c      	adds	r3, #140	; 0x8c
 800b4a6:	e6ac      	b.n	800b202 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800b4a8:	4b37      	ldr	r3, [pc, #220]	; (800b588 <LoRaMacMibSetRequestConfirm+0x440>)
 800b4aa:	6862      	ldr	r2, [r4, #4]
 800b4ac:	58eb      	ldr	r3, [r5, r3]
 800b4ae:	33c0      	adds	r3, #192	; 0xc0
 800b4b0:	601a      	str	r2, [r3, #0]
 800b4b2:	e691      	b.n	800b1d8 <LoRaMacMibSetRequestConfirm+0x90>
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800b4b4:	4b34      	ldr	r3, [pc, #208]	; (800b588 <LoRaMacMibSetRequestConfirm+0x440>)
 800b4b6:	6862      	ldr	r2, [r4, #4]
 800b4b8:	58eb      	ldr	r3, [r5, r3]
 800b4ba:	641a      	str	r2, [r3, #64]	; 0x40
 800b4bc:	e68c      	b.n	800b1d8 <LoRaMacMibSetRequestConfirm+0x90>
            if( mibSet->Param.Contexts != 0 )
 800b4be:	6864      	ldr	r4, [r4, #4]
 800b4c0:	2c00      	cmp	r4, #0
 800b4c2:	d100      	bne.n	800b4c6 <LoRaMacMibSetRequestConfirm+0x37e>
 800b4c4:	e68f      	b.n	800b1e6 <LoRaMacMibSetRequestConfirm+0x9e>
        return LORAMAC_STATUS_BUSY;
 800b4c6:	2601      	movs	r6, #1
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800b4c8:	42b3      	cmp	r3, r6
 800b4ca:	d000      	beq.n	800b4ce <LoRaMacMibSetRequestConfirm+0x386>
 800b4cc:	e68c      	b.n	800b1e8 <LoRaMacMibSetRequestConfirm+0xa0>
    if( contexts->MacNvmCtx != NULL )
 800b4ce:	6821      	ldr	r1, [r4, #0]
 800b4d0:	2900      	cmp	r1, #0
 800b4d2:	d004      	beq.n	800b4de <LoRaMacMibSetRequestConfirm+0x396>
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 800b4d4:	6863      	ldr	r3, [r4, #4]
 800b4d6:	482d      	ldr	r0, [pc, #180]	; (800b58c <LoRaMacMibSetRequestConfirm+0x444>)
 800b4d8:	b29a      	uxth	r2, r3
 800b4da:	f003 fc89 	bl	800edf0 <memcpy1>
    params.Type = INIT_TYPE_RESTORE_CTX;
 800b4de:	2303      	movs	r3, #3
 800b4e0:	a904      	add	r1, sp, #16
 800b4e2:	710b      	strb	r3, [r1, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 800b4e4:	68a3      	ldr	r3, [r4, #8]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800b4e6:	4e28      	ldr	r6, [pc, #160]	; (800b588 <LoRaMacMibSetRequestConfirm+0x440>)
    params.NvmCtx = contexts->RegionNvmCtx;
 800b4e8:	9304      	str	r3, [sp, #16]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800b4ea:	59ab      	ldr	r3, [r5, r6]
 800b4ec:	7818      	ldrb	r0, [r3, #0]
 800b4ee:	f002 fb22 	bl	800db36 <RegionInitDefaults>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800b4f2:	4b27      	ldr	r3, [pc, #156]	; (800b590 <LoRaMacMibSetRequestConfirm+0x448>)
 800b4f4:	5cea      	ldrb	r2, [r5, r3]
 800b4f6:	3b35      	subs	r3, #53	; 0x35
 800b4f8:	54ea      	strb	r2, [r5, r3]
    MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 800b4fa:	59ab      	ldr	r3, [r5, r6]
 800b4fc:	001a      	movs	r2, r3
 800b4fe:	32b0      	adds	r2, #176	; 0xb0
 800b500:	6811      	ldr	r1, [r2, #0]
 800b502:	22f9      	movs	r2, #249	; 0xf9
 800b504:	0092      	lsls	r2, r2, #2
 800b506:	50a9      	str	r1, [r5, r2]
    MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b508:	001a      	movs	r2, r3
 800b50a:	32b9      	adds	r2, #185	; 0xb9
 800b50c:	7811      	ldrb	r1, [r2, #0]
 800b50e:	22fc      	movs	r2, #252	; 0xfc
 800b510:	0092      	lsls	r2, r2, #2
 800b512:	54a9      	strb	r1, [r5, r2]
    MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800b514:	33ca      	adds	r3, #202	; 0xca
 800b516:	781a      	ldrb	r2, [r3, #0]
 800b518:	4b1e      	ldr	r3, [pc, #120]	; (800b594 <LoRaMacMibSetRequestConfirm+0x44c>)
 800b51a:	54ea      	strb	r2, [r5, r3]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800b51c:	4b1e      	ldr	r3, [pc, #120]	; (800b598 <LoRaMacMibSetRequestConfirm+0x450>)
 800b51e:	4a1f      	ldr	r2, [pc, #124]	; (800b59c <LoRaMacMibSetRequestConfirm+0x454>)
 800b520:	52ea      	strh	r2, [r5, r3]
    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 800b522:	69a0      	ldr	r0, [r4, #24]
 800b524:	f7fc fe02 	bl	800812c <SecureElementRestoreNvmCtx>
 800b528:	2800      	cmp	r0, #0
 800b52a:	d001      	beq.n	800b530 <LoRaMacMibSetRequestConfirm+0x3e8>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800b52c:	2611      	movs	r6, #17
 800b52e:	e65b      	b.n	800b1e8 <LoRaMacMibSetRequestConfirm+0xa0>
    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 800b530:	6920      	ldr	r0, [r4, #16]
 800b532:	f001 ffa1 	bl	800d478 <LoRaMacCryptoRestoreNvmCtx>
 800b536:	2800      	cmp	r0, #0
 800b538:	d1f8      	bne.n	800b52c <LoRaMacMibSetRequestConfirm+0x3e4>
    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 800b53a:	6a20      	ldr	r0, [r4, #32]
 800b53c:	f001 fc4a 	bl	800cdd4 <LoRaMacCommandsRestoreNvmCtx>
 800b540:	1e06      	subs	r6, r0, #0
 800b542:	d10c      	bne.n	800b55e <LoRaMacMibSetRequestConfirm+0x416>
    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 800b544:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800b546:	f000 fdbf 	bl	800c0c8 <LoRaMacClassBRestoreNvmCtx>
 800b54a:	2800      	cmp	r0, #0
 800b54c:	d009      	beq.n	800b562 <LoRaMacMibSetRequestConfirm+0x41a>
    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 800b54e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b550:	f001 fd8e 	bl	800d070 <LoRaMacConfirmQueueRestoreNvmCtx>
 800b554:	2800      	cmp	r0, #0
 800b556:	d000      	beq.n	800b55a <LoRaMacMibSetRequestConfirm+0x412>
 800b558:	e646      	b.n	800b1e8 <LoRaMacMibSetRequestConfirm+0xa0>
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 800b55a:	3615      	adds	r6, #21
 800b55c:	e644      	b.n	800b1e8 <LoRaMacMibSetRequestConfirm+0xa0>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b55e:	2613      	movs	r6, #19
 800b560:	e642      	b.n	800b1e8 <LoRaMacMibSetRequestConfirm+0xa0>
        return LORAMAC_STATUS_CLASS_B_ERROR;
 800b562:	2614      	movs	r6, #20
 800b564:	e640      	b.n	800b1e8 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800b566:	79a3      	ldrb	r3, [r4, #6]
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d900      	bls.n	800b56e <LoRaMacMibSetRequestConfirm+0x426>
 800b56c:	e63b      	b.n	800b1e6 <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 800b56e:	4b06      	ldr	r3, [pc, #24]	; (800b588 <LoRaMacMibSetRequestConfirm+0x440>)
 800b570:	6862      	ldr	r2, [r4, #4]
 800b572:	58eb      	ldr	r3, [r5, r3]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800b574:	6860      	ldr	r0, [r4, #4]
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 800b576:	33fc      	adds	r3, #252	; 0xfc
 800b578:	665a      	str	r2, [r3, #100]	; 0x64
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800b57a:	f001 ff75 	bl	800d468 <LoRaMacCryptoSetLrWanVersion>
 800b57e:	e652      	b.n	800b226 <LoRaMacMibSetRequestConfirm+0xde>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800b580:	0020      	movs	r0, r4
 800b582:	f000 ff4f 	bl	800c424 <LoRaMacMibClassBSetRequestConfirm>
 800b586:	e61d      	b.n	800b1c4 <LoRaMacMibSetRequestConfirm+0x7c>
 800b588:	00000484 	.word	0x00000484
 800b58c:	20000560 	.word	0x20000560
 800b590:	00000415 	.word	0x00000415
 800b594:	000003f1 	.word	0x000003f1
 800b598:	000003f2 	.word	0x000003f2
 800b59c:	00000201 	.word	0x00000201

0800b5a0 <LoRaMacMlmeRequest>:

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800b5a0:	2300      	movs	r3, #0
{
 800b5a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5a4:	b089      	sub	sp, #36	; 0x24
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800b5a6:	aa02      	add	r2, sp, #8
{
 800b5a8:	0005      	movs	r5, r0

    if( mlmeRequest == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b5aa:	2603      	movs	r6, #3
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800b5ac:	8013      	strh	r3, [r2, #0]
    if( mlmeRequest == NULL )
 800b5ae:	4298      	cmp	r0, r3
 800b5b0:	d004      	beq.n	800b5bc <LoRaMacMlmeRequest+0x1c>
    }
    if( LoRaMacIsBusy( ) == true )
 800b5b2:	f7fe fd33 	bl	800a01c <LoRaMacIsBusy>
 800b5b6:	2800      	cmp	r0, #0
 800b5b8:	d003      	beq.n	800b5c2 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800b5ba:	2601      	movs	r6, #1
    {
        LoRaMacConfirmQueueAdd( &queueElement );
        EventMacNvmCtxChanged( );
    }
    return status;
}
 800b5bc:	0030      	movs	r0, r6
 800b5be:	b009      	add	sp, #36	; 0x24
 800b5c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800b5c2:	f001 fe1f 	bl	800d204 <LoRaMacConfirmQueueIsFull>
 800b5c6:	2800      	cmp	r0, #0
 800b5c8:	d1f7      	bne.n	800b5ba <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800b5ca:	f001 fe15 	bl	800d1f8 <LoRaMacConfirmQueueGetCnt>
 800b5ce:	1e01      	subs	r1, r0, #0
 800b5d0:	d103      	bne.n	800b5da <LoRaMacMlmeRequest+0x3a>
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800b5d2:	2214      	movs	r2, #20
 800b5d4:	486b      	ldr	r0, [pc, #428]	; (800b784 <LoRaMacMlmeRequest+0x1e4>)
 800b5d6:	f003 fc21 	bl	800ee1c <memset1>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	4c6a      	ldr	r4, [pc, #424]	; (800b788 <LoRaMacMlmeRequest+0x1e8>)
 800b5de:	4a6b      	ldr	r2, [pc, #428]	; (800b78c <LoRaMacMlmeRequest+0x1ec>)
    queueElement.RestrictCommonReadyToHandle = false;
 800b5e0:	2600      	movs	r6, #0
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b5e2:	54a3      	strb	r3, [r4, r2]
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800b5e4:	2204      	movs	r2, #4
 800b5e6:	496a      	ldr	r1, [pc, #424]	; (800b790 <LoRaMacMlmeRequest+0x1f0>)
 800b5e8:	5c60      	ldrb	r0, [r4, r1]
 800b5ea:	9100      	str	r1, [sp, #0]
 800b5ec:	4302      	orrs	r2, r0
    queueElement.Request = mlmeRequest->Type;
 800b5ee:	7828      	ldrb	r0, [r5, #0]
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800b5f0:	5462      	strb	r2, [r4, r1]
    queueElement.Request = mlmeRequest->Type;
 800b5f2:	aa03      	add	r2, sp, #12
 800b5f4:	7010      	strb	r0, [r2, #0]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b5f6:	3801      	subs	r0, #1
 800b5f8:	7053      	strb	r3, [r2, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 800b5fa:	70d6      	strb	r6, [r2, #3]
    switch( mlmeRequest->Type )
 800b5fc:	280d      	cmp	r0, #13
 800b5fe:	d900      	bls.n	800b602 <LoRaMacMlmeRequest+0x62>
 800b600:	e0b8      	b.n	800b774 <LoRaMacMlmeRequest+0x1d4>
 800b602:	f7f4 fd93 	bl	800012c <__gnu_thumb1_case_uqi>
 800b606:	b707      	.short	0xb707
 800b608:	88665cb7 	.word	0x88665cb7
 800b60c:	91b7b7b7 	.word	0x91b7b7b7
 800b610:	a795abb7 	.word	0xa795abb7
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800b614:	23d0      	movs	r3, #208	; 0xd0
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	58e2      	ldr	r2, [r4, r3]
 800b61a:	2320      	movs	r3, #32
 800b61c:	0016      	movs	r6, r2
 800b61e:	401e      	ands	r6, r3
 800b620:	421a      	tst	r2, r3
 800b622:	d1ca      	bne.n	800b5ba <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( );
 800b624:	f7fd fdf4 	bl	8009210 <ResetMacParameters>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800b628:	2104      	movs	r1, #4
 800b62a:	4b5a      	ldr	r3, [pc, #360]	; (800b794 <LoRaMacMlmeRequest+0x1f4>)
 800b62c:	0032      	movs	r2, r6
 800b62e:	58e7      	ldr	r7, [r4, r3]
 800b630:	5669      	ldrsb	r1, [r5, r1]
 800b632:	7838      	ldrb	r0, [r7, #0]
 800b634:	f002 fb09 	bl	800dc4a <RegionAlternateDr>
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800b638:	2207      	movs	r2, #7
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800b63a:	3785      	adds	r7, #133	; 0x85
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800b63c:	ab03      	add	r3, sp, #12
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800b63e:	7038      	strb	r0, [r7, #0]
            SwitchClass( CLASS_A );
 800b640:	0030      	movs	r0, r6
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800b642:	705a      	strb	r2, [r3, #1]
            SwitchClass( CLASS_A );
 800b644:	f7fe f928 	bl	8009898 <SwitchClass>
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800b648:	0022      	movs	r2, r4
 800b64a:	4953      	ldr	r1, [pc, #332]	; (800b798 <LoRaMacMlmeRequest+0x1f8>)
 800b64c:	32fc      	adds	r2, #252	; 0xfc
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800b64e:	0023      	movs	r3, r4
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800b650:	60d1      	str	r1, [r2, #12]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b652:	22ff      	movs	r2, #255	; 0xff
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800b654:	33ff      	adds	r3, #255	; 0xff
 800b656:	715e      	strb	r6, [r3, #5]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b658:	735a      	strb	r2, [r3, #13]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800b65a:	739e      	strb	r6, [r3, #14]
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800b65c:	f7fc fea6 	bl	80083ac <SecureElementGetJoinEui>
 800b660:	2208      	movs	r2, #8
 800b662:	0001      	movs	r1, r0
 800b664:	484d      	ldr	r0, [pc, #308]	; (800b79c <LoRaMacMlmeRequest+0x1fc>)
 800b666:	f003 fbc3 	bl	800edf0 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800b66a:	f7fc fe89 	bl	8008380 <SecureElementGetDevEui>
 800b66e:	2208      	movs	r2, #8
 800b670:	0001      	movs	r1, r0
 800b672:	484b      	ldr	r0, [pc, #300]	; (800b7a0 <LoRaMacMlmeRequest+0x200>)
 800b674:	f003 fbbc 	bl	800edf0 <memcpy1>
    status = ScheduleTx( allowDelayedTx );
 800b678:	0030      	movs	r0, r6
 800b67a:	f7fd fecf 	bl	800941c <ScheduleTx>
 800b67e:	1e06      	subs	r6, r0, #0
            if( status != LORAMAC_STATUS_OK )
 800b680:	d009      	beq.n	800b696 <LoRaMacMlmeRequest+0xf6>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800b682:	2104      	movs	r1, #4
 800b684:	4b43      	ldr	r3, [pc, #268]	; (800b794 <LoRaMacMlmeRequest+0x1f4>)
 800b686:	2201      	movs	r2, #1
 800b688:	58e7      	ldr	r7, [r4, r3]
 800b68a:	5669      	ldrsb	r1, [r5, r1]
 800b68c:	7838      	ldrb	r0, [r7, #0]
 800b68e:	f002 fadc 	bl	800dc4a <RegionAlternateDr>
 800b692:	3785      	adds	r7, #133	; 0x85
 800b694:	7038      	strb	r0, [r7, #0]
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800b696:	2391      	movs	r3, #145	; 0x91
 800b698:	00db      	lsls	r3, r3, #3
 800b69a:	58e3      	ldr	r3, [r4, r3]
 800b69c:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800b69e:	2e00      	cmp	r6, #0
 800b6a0:	d06a      	beq.n	800b778 <LoRaMacMlmeRequest+0x1d8>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800b6a2:	f001 fda9 	bl	800d1f8 <LoRaMacConfirmQueueGetCnt>
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	d000      	beq.n	800b6ac <LoRaMacMlmeRequest+0x10c>
 800b6aa:	e787      	b.n	800b5bc <LoRaMacMlmeRequest+0x1c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800b6ac:	2204      	movs	r2, #4
            MacCtx.NodeAckRequested = false;
 800b6ae:	4b3d      	ldr	r3, [pc, #244]	; (800b7a4 <LoRaMacMlmeRequest+0x204>)
 800b6b0:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800b6b2:	9b00      	ldr	r3, [sp, #0]
 800b6b4:	5ce3      	ldrb	r3, [r4, r3]
 800b6b6:	4393      	bics	r3, r2
 800b6b8:	9a00      	ldr	r2, [sp, #0]
 800b6ba:	54a3      	strb	r3, [r4, r2]
 800b6bc:	e77e      	b.n	800b5bc <LoRaMacMlmeRequest+0x1c>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b6be:	2200      	movs	r2, #0
 800b6c0:	2002      	movs	r0, #2
 800b6c2:	a902      	add	r1, sp, #8
 800b6c4:	f001 fb9a 	bl	800cdfc <LoRaMacCommandsAddCmd>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b6c8:	2613      	movs	r6, #19
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b6ca:	2800      	cmp	r0, #0
 800b6cc:	d1e3      	bne.n	800b696 <LoRaMacMlmeRequest+0xf6>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800b6ce:	2600      	movs	r6, #0
            break;
 800b6d0:	e7e1      	b.n	800b696 <LoRaMacMlmeRequest+0xf6>
    continuousWave.Channel = MacCtx.Channel;
 800b6d2:	4b35      	ldr	r3, [pc, #212]	; (800b7a8 <LoRaMacMlmeRequest+0x208>)
 800b6d4:	a904      	add	r1, sp, #16
 800b6d6:	5ce3      	ldrb	r3, [r4, r3]
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800b6d8:	88aa      	ldrh	r2, [r5, #4]
    continuousWave.Channel = MacCtx.Channel;
 800b6da:	700b      	strb	r3, [r1, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800b6dc:	4b2d      	ldr	r3, [pc, #180]	; (800b794 <LoRaMacMlmeRequest+0x1f4>)
 800b6de:	58e3      	ldr	r3, [r4, r3]
 800b6e0:	0018      	movs	r0, r3
 800b6e2:	3085      	adds	r0, #133	; 0x85
 800b6e4:	7800      	ldrb	r0, [r0, #0]
 800b6e6:	7048      	strb	r0, [r1, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800b6e8:	0018      	movs	r0, r3
 800b6ea:	3084      	adds	r0, #132	; 0x84
 800b6ec:	7800      	ldrb	r0, [r0, #0]
    continuousWave.Timeout = timeout;
 800b6ee:	818a      	strh	r2, [r1, #12]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800b6f0:	7088      	strb	r0, [r1, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800b6f2:	0018      	movs	r0, r3
 800b6f4:	30bc      	adds	r0, #188	; 0xbc
 800b6f6:	6800      	ldr	r0, [r0, #0]
 800b6f8:	6048      	str	r0, [r1, #4]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800b6fa:	0018      	movs	r0, r3
 800b6fc:	30c0      	adds	r0, #192	; 0xc0
 800b6fe:	6800      	ldr	r0, [r0, #0]
 800b700:	6088      	str	r0, [r1, #8]
    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 800b702:	7818      	ldrb	r0, [r3, #0]
 800b704:	f002 fabb 	bl	800dc7e <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800b708:	22d0      	movs	r2, #208	; 0xd0
 800b70a:	2302      	movs	r3, #2
 800b70c:	0092      	lsls	r2, r2, #2
 800b70e:	58a1      	ldr	r1, [r4, r2]
 800b710:	430b      	orrs	r3, r1
 800b712:	50a3      	str	r3, [r4, r2]
 800b714:	e7db      	b.n	800b6ce <LoRaMacMlmeRequest+0x12e>
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800b716:	210c      	movs	r1, #12
 800b718:	4b24      	ldr	r3, [pc, #144]	; (800b7ac <LoRaMacMlmeRequest+0x20c>)
 800b71a:	88aa      	ldrh	r2, [r5, #4]
 800b71c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b71e:	5669      	ldrsb	r1, [r5, r1]
 800b720:	68a8      	ldr	r0, [r5, #8]
 800b722:	9301      	str	r3, [sp, #4]
 800b724:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800b726:	e7ef      	b.n	800b708 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b728:	2200      	movs	r2, #0
 800b72a:	200d      	movs	r0, #13
 800b72c:	a902      	add	r1, sp, #8
 800b72e:	e7c9      	b.n	800b6c4 <LoRaMacMlmeRequest+0x124>
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800b730:	4b18      	ldr	r3, [pc, #96]	; (800b794 <LoRaMacMlmeRequest+0x1f4>)
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b732:	2602      	movs	r6, #2
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800b734:	58e3      	ldr	r3, [r4, r3]
 800b736:	337c      	adds	r3, #124	; 0x7c
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1ab      	bne.n	800b696 <LoRaMacMlmeRequest+0xf6>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800b73e:	792e      	ldrb	r6, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800b740:	0770      	lsls	r0, r6, #29
 800b742:	0f40      	lsrs	r0, r0, #29
 800b744:	f000 fe32 	bl	800c3ac <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800b748:	ab02      	add	r3, sp, #8
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800b74a:	2201      	movs	r2, #1
 800b74c:	0019      	movs	r1, r3
 800b74e:	2010      	movs	r0, #16
                macCmdPayload[0] = value;
 800b750:	701e      	strb	r6, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800b752:	e7b7      	b.n	800b6c4 <LoRaMacMlmeRequest+0x124>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b754:	2200      	movs	r2, #0
 800b756:	2012      	movs	r0, #18
 800b758:	a902      	add	r1, sp, #8
 800b75a:	e7b3      	b.n	800b6c4 <LoRaMacMlmeRequest+0x124>
            queueElement.RestrictCommonReadyToHandle = true;
 800b75c:	70d3      	strb	r3, [r2, #3]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800b75e:	f000 fe09 	bl	800c374 <LoRaMacClassBIsAcquisitionInProgress>
                status = LORAMAC_STATUS_BUSY;
 800b762:	2601      	movs	r6, #1
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800b764:	1e07      	subs	r7, r0, #0
 800b766:	d196      	bne.n	800b696 <LoRaMacMlmeRequest+0xf6>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800b768:	f000 fde0 	bl	800c32c <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800b76c:	0038      	movs	r0, r7
 800b76e:	f000 faa9 	bl	800bcc4 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800b772:	e7ac      	b.n	800b6ce <LoRaMacMlmeRequest+0x12e>
    queueElement.RestrictCommonReadyToHandle = false;
 800b774:	2602      	movs	r6, #2
 800b776:	e78e      	b.n	800b696 <LoRaMacMlmeRequest+0xf6>
        LoRaMacConfirmQueueAdd( &queueElement );
 800b778:	a803      	add	r0, sp, #12
 800b77a:	f001 fc8f 	bl	800d09c <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 800b77e:	f7fd fc43 	bl	8009008 <EventMacNvmCtxChanged>
 800b782:	e71b      	b.n	800b5bc <LoRaMacMlmeRequest+0x1c>
 800b784:	20000b1c 	.word	0x20000b1c
 800b788:	200006cc 	.word	0x200006cc
 800b78c:	00000451 	.word	0x00000451
 800b790:	00000481 	.word	0x00000481
 800b794:	00000484 	.word	0x00000484
 800b798:	200006ce 	.word	0x200006ce
 800b79c:	200007da 	.word	0x200007da
 800b7a0:	200007e2 	.word	0x200007e2
 800b7a4:	00000414 	.word	0x00000414
 800b7a8:	00000415 	.word	0x00000415
 800b7ac:	080117e0 	.word	0x080117e0

0800b7b0 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7b4:	b097      	sub	sp, #92	; 0x5c
 800b7b6:	9000      	str	r0, [sp, #0]
 800b7b8:	9108      	str	r1, [sp, #32]
 800b7ba:	9302      	str	r3, [sp, #8]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	d103      	bne.n	800b7c8 <LoRaMacMcpsRequest+0x18>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b7c0:	2703      	movs	r7, #3

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800b7c2:	0038      	movs	r0, r7
 800b7c4:	b017      	add	sp, #92	; 0x5c
 800b7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacIsBusy( ) == true )
 800b7c8:	f7fe fc28 	bl	800a01c <LoRaMacIsBusy>
        return LORAMAC_STATUS_BUSY;
 800b7cc:	2701      	movs	r7, #1
    if( LoRaMacIsBusy( ) == true )
 800b7ce:	1e04      	subs	r4, r0, #0
 800b7d0:	d1f7      	bne.n	800b7c2 <LoRaMacMcpsRequest+0x12>
    macHdr.Value = 0;
 800b7d2:	466b      	mov	r3, sp
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800b7d4:	0001      	movs	r1, r0
    macHdr.Value = 0;
 800b7d6:	7418      	strb	r0, [r3, #16]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800b7d8:	2214      	movs	r2, #20
 800b7da:	48cb      	ldr	r0, [pc, #812]	; (800bb08 <LoRaMacMcpsRequest+0x358>)
 800b7dc:	f003 fb1e 	bl	800ee1c <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b7e0:	4dca      	ldr	r5, [pc, #808]	; (800bb0c <LoRaMacMcpsRequest+0x35c>)
 800b7e2:	4bcb      	ldr	r3, [pc, #812]	; (800bb10 <LoRaMacMcpsRequest+0x360>)
 800b7e4:	54ef      	strb	r7, [r5, r3]
    MacCtx.AckTimeoutRetriesCounter = 1;
 800b7e6:	4bcb      	ldr	r3, [pc, #812]	; (800bb14 <LoRaMacMcpsRequest+0x364>)
 800b7e8:	54ef      	strb	r7, [r5, r3]
    switch( mcpsRequest->Type )
 800b7ea:	9b00      	ldr	r3, [sp, #0]
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	42bb      	cmp	r3, r7
 800b7f0:	d100      	bne.n	800b7f4 <LoRaMacMcpsRequest+0x44>
 800b7f2:	e115      	b.n	800ba20 <LoRaMacMcpsRequest+0x270>
 800b7f4:	2b03      	cmp	r3, #3
 800b7f6:	d100      	bne.n	800b7fa <LoRaMacMcpsRequest+0x4a>
 800b7f8:	e11c      	b.n	800ba34 <LoRaMacMcpsRequest+0x284>
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d000      	beq.n	800b800 <LoRaMacMcpsRequest+0x50>
 800b7fe:	e12b      	b.n	800ba58 <LoRaMacMcpsRequest+0x2a8>
            MacCtx.AckTimeoutRetries = 1;
 800b800:	4bc5      	ldr	r3, [pc, #788]	; (800bb18 <LoRaMacMcpsRequest+0x368>)
 800b802:	54ef      	strb	r7, [r5, r3]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800b804:	2340      	movs	r3, #64	; 0x40
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800b806:	466a      	mov	r2, sp
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800b808:	260e      	movs	r6, #14
            readyToSend = true;
 800b80a:	2401      	movs	r4, #1
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800b80c:	7413      	strb	r3, [r2, #16]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800b80e:	9b00      	ldr	r3, [sp, #0]
 800b810:	791b      	ldrb	r3, [r3, #4]
 800b812:	9305      	str	r3, [sp, #20]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800b814:	9b00      	ldr	r3, [sp, #0]
 800b816:	689b      	ldr	r3, [r3, #8]
 800b818:	9303      	str	r3, [sp, #12]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800b81a:	9b00      	ldr	r3, [sp, #0]
 800b81c:	899b      	ldrh	r3, [r3, #12]
 800b81e:	9302      	str	r3, [sp, #8]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800b820:	9b00      	ldr	r3, [sp, #0]
 800b822:	579e      	ldrsb	r6, [r3, r6]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800b824:	2202      	movs	r2, #2
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b826:	4fbd      	ldr	r7, [pc, #756]	; (800bb1c <LoRaMacMcpsRequest+0x36c>)
    getPhy.Attribute = PHY_MIN_TX_DR;
 800b828:	ab0a      	add	r3, sp, #40	; 0x28
 800b82a:	751a      	strb	r2, [r3, #20]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b82c:	59eb      	ldr	r3, [r5, r7]
 800b82e:	a90a      	add	r1, sp, #40	; 0x28
 800b830:	001a      	movs	r2, r3
 800b832:	32b8      	adds	r2, #184	; 0xb8
 800b834:	7812      	ldrb	r2, [r2, #0]
 800b836:	758a      	strb	r2, [r1, #22]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b838:	7818      	ldrb	r0, [r3, #0]
 800b83a:	a90f      	add	r1, sp, #60	; 0x3c
 800b83c:	f002 f968 	bl	800db10 <RegionGetPhyParam>
 800b840:	9701      	str	r7, [sp, #4]
 800b842:	900a      	str	r0, [sp, #40]	; 0x28
    if( readyToSend == true )
 800b844:	2c00      	cmp	r4, #0
 800b846:	d100      	bne.n	800b84a <LoRaMacMcpsRequest+0x9a>
 800b848:	e150      	b.n	800baec <LoRaMacMcpsRequest+0x33c>
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 800b84a:	59eb      	ldr	r3, [r5, r7]
 800b84c:	001a      	movs	r2, r3
 800b84e:	327e      	adds	r2, #126	; 0x7e
 800b850:	7812      	ldrb	r2, [r2, #0]
 800b852:	2a00      	cmp	r2, #0
 800b854:	d117      	bne.n	800b886 <LoRaMacMcpsRequest+0xd6>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800b856:	1c02      	adds	r2, r0, #0
 800b858:	b240      	sxtb	r0, r0
            verify.DatarateParams.Datarate = datarate;
 800b85a:	ac0b      	add	r4, sp, #44	; 0x2c
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800b85c:	42b0      	cmp	r0, r6
 800b85e:	da00      	bge.n	800b862 <LoRaMacMcpsRequest+0xb2>
 800b860:	1c32      	adds	r2, r6, #0
            verify.DatarateParams.Datarate = datarate;
 800b862:	7022      	strb	r2, [r4, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b864:	001a      	movs	r2, r3
 800b866:	32b8      	adds	r2, #184	; 0xb8
 800b868:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800b86a:	0021      	movs	r1, r4
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b86c:	70a2      	strb	r2, [r4, #2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800b86e:	7818      	ldrb	r0, [r3, #0]
 800b870:	2205      	movs	r2, #5
 800b872:	f002 f971 	bl	800db58 <RegionVerify>
 800b876:	2800      	cmp	r0, #0
 800b878:	d0a2      	beq.n	800b7c0 <LoRaMacMcpsRequest+0x10>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800b87a:	9a01      	ldr	r2, [sp, #4]
 800b87c:	4ba3      	ldr	r3, [pc, #652]	; (800bb0c <LoRaMacMcpsRequest+0x35c>)
 800b87e:	589b      	ldr	r3, [r3, r2]
 800b880:	7822      	ldrb	r2, [r4, #0]
 800b882:	3385      	adds	r3, #133	; 0x85
 800b884:	701a      	strb	r2, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800b886:	4ba1      	ldr	r3, [pc, #644]	; (800bb0c <LoRaMacMcpsRequest+0x35c>)
 800b888:	9a01      	ldr	r2, [sp, #4]
 800b88a:	5899      	ldr	r1, [r3, r2]
 800b88c:	000a      	movs	r2, r1
 800b88e:	3284      	adds	r2, #132	; 0x84
 800b890:	8812      	ldrh	r2, [r2, #0]
 800b892:	1d0b      	adds	r3, r1, #4
 800b894:	9206      	str	r2, [sp, #24]
 800b896:	ba57      	rev16	r7, r2
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800b898:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800b89a:	23b2      	movs	r3, #178	; 0xb2
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800b89c:	920c      	str	r2, [sp, #48]	; 0x30
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800b89e:	005b      	lsls	r3, r3, #1
 800b8a0:	5ccb      	ldrb	r3, [r1, r3]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d100      	bne.n	800b8a8 <LoRaMacMcpsRequest+0xf8>
 800b8a6:	e11f      	b.n	800bae8 <LoRaMacMcpsRequest+0x338>
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 800b8a8:	000b      	movs	r3, r1
 800b8aa:	33c8      	adds	r3, #200	; 0xc8
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d102      	bne.n	800b8b8 <LoRaMacMcpsRequest+0x108>
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 800b8b2:	0008      	movs	r0, r1
 800b8b4:	30fc      	adds	r0, #252	; 0xfc
 800b8b6:	6583      	str	r3, [r0, #88]	; 0x58
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 800b8b8:	000b      	movs	r3, r1
 800b8ba:	337e      	adds	r3, #126	; 0x7e
 800b8bc:	781c      	ldrb	r4, [r3, #0]
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800b8be:	3b02      	subs	r3, #2
 800b8c0:	7818      	ldrb	r0, [r3, #0]
 800b8c2:	3801      	subs	r0, #1
 800b8c4:	4243      	negs	r3, r0
 800b8c6:	4143      	adcs	r3, r0
 800b8c8:	0118      	lsls	r0, r3, #4
 800b8ca:	01e3      	lsls	r3, r4, #7
 800b8cc:	4303      	orrs	r3, r0
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 800b8ce:	204c      	movs	r0, #76	; 0x4c
 800b8d0:	30ff      	adds	r0, #255	; 0xff
 800b8d2:	5c0e      	ldrb	r6, [r1, r0]
 800b8d4:	1c1d      	adds	r5, r3, #0
 800b8d6:	9009      	str	r0, [sp, #36]	; 0x24
 800b8d8:	2e00      	cmp	r6, #0
 800b8da:	d001      	beq.n	800b8e0 <LoRaMacMcpsRequest+0x130>
        fCtrl.Bits.Ack = 1;
 800b8dc:	2520      	movs	r5, #32
 800b8de:	431d      	orrs	r5, r3
    adrNext.Version = MacCtx.NvmCtx->Version;
 800b8e0:	000b      	movs	r3, r1
 800b8e2:	33fc      	adds	r3, #252	; 0xfc
 800b8e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8e6:	a811      	add	r0, sp, #68	; 0x44
 800b8e8:	9311      	str	r3, [sp, #68]	; 0x44
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800b8ea:	23fd      	movs	r3, #253	; 0xfd
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800b8ec:	7144      	strb	r4, [r0, #5]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800b8ee:	4c87      	ldr	r4, [pc, #540]	; (800bb0c <LoRaMacMcpsRequest+0x35c>)
 800b8f0:	009b      	lsls	r3, r3, #2
 800b8f2:	58e3      	ldr	r3, [r4, r3]
    adrNext.UpdateChanMask = true;
 800b8f4:	2601      	movs	r6, #1
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800b8f6:	9314      	str	r3, [sp, #80]	; 0x50
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b8f8:	000b      	movs	r3, r1
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800b8fa:	6082      	str	r2, [r0, #8]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800b8fc:	000a      	movs	r2, r1
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800b8fe:	8207      	strh	r7, [r0, #16]
    adrNext.UpdateChanMask = true;
 800b900:	7106      	strb	r6, [r0, #4]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b902:	33b8      	adds	r3, #184	; 0xb8
 800b904:	781b      	ldrb	r3, [r3, #0]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800b906:	3284      	adds	r2, #132	; 0x84
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b908:	7483      	strb	r3, [r0, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 800b90a:	780b      	ldrb	r3, [r1, #0]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800b90c:	3185      	adds	r1, #133	; 0x85
    adrNext.Region = MacCtx.NvmCtx->Region;
 800b90e:	74c3      	strb	r3, [r0, #19]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800b910:	ab0c      	add	r3, sp, #48	; 0x30
 800b912:	f000 f92b 	bl	800bb6c <LoRaMacAdrCalcNext>
    MacCtx.PktBufferLen = 0;
 800b916:	2300      	movs	r3, #0
    MacCtx.NodeAckRequested = false;
 800b918:	4a81      	ldr	r2, [pc, #516]	; (800bb20 <LoRaMacMcpsRequest+0x370>)
    MacCtx.PktBufferLen = 0;
 800b91a:	8023      	strh	r3, [r4, #0]
    MacCtx.NodeAckRequested = false;
 800b91c:	54a3      	strb	r3, [r4, r2]
    uint32_t fCntUp = 0;
 800b91e:	930d      	str	r3, [sp, #52]	; 0x34
    size_t macCmdsSize = 0;
 800b920:	930e      	str	r3, [sp, #56]	; 0x38
        fBufferSize = 0;
 800b922:	9b03      	ldr	r3, [sp, #12]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800b924:	4030      	ands	r0, r6
        fBufferSize = 0;
 800b926:	1e5a      	subs	r2, r3, #1
 800b928:	4193      	sbcs	r3, r2
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800b92a:	0180      	lsls	r0, r0, #6
        fBufferSize = 0;
 800b92c:	9a02      	ldr	r2, [sp, #8]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800b92e:	4328      	orrs	r0, r5
        fBufferSize = 0;
 800b930:	425b      	negs	r3, r3
 800b932:	401a      	ands	r2, r3
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800b934:	9903      	ldr	r1, [sp, #12]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800b936:	9007      	str	r0, [sp, #28]
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800b938:	487a      	ldr	r0, [pc, #488]	; (800bb24 <LoRaMacMcpsRequest+0x374>)
        fBufferSize = 0;
 800b93a:	9202      	str	r2, [sp, #8]
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800b93c:	f003 fa58 	bl	800edf0 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800b940:	466b      	mov	r3, sp
    MacCtx.PktBuffer[0] = macHdr->Value;
 800b942:	7c19      	ldrb	r1, [r3, #16]
    MacCtx.AppDataSize = fBufferSize;
 800b944:	7a1a      	ldrb	r2, [r3, #8]
 800b946:	4d78      	ldr	r5, [pc, #480]	; (800bb28 <LoRaMacMcpsRequest+0x378>)
    switch( macHdr->Bits.MType )
 800b948:	060b      	lsls	r3, r1, #24
    MacCtx.AppDataSize = fBufferSize;
 800b94a:	5562      	strb	r2, [r4, r5]
    MacCtx.PktBuffer[0] = macHdr->Value;
 800b94c:	70a1      	strb	r1, [r4, #2]
    switch( macHdr->Bits.MType )
 800b94e:	0f5b      	lsrs	r3, r3, #29
 800b950:	2b04      	cmp	r3, #4
 800b952:	d100      	bne.n	800b956 <LoRaMacMcpsRequest+0x1a6>
 800b954:	e083      	b.n	800ba5e <LoRaMacMcpsRequest+0x2ae>
 800b956:	2b07      	cmp	r3, #7
 800b958:	d100      	bne.n	800b95c <LoRaMacMcpsRequest+0x1ac>
 800b95a:	e0b4      	b.n	800bac6 <LoRaMacMcpsRequest+0x316>
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b95c:	2702      	movs	r7, #2
    switch( macHdr->Bits.MType )
 800b95e:	2b02      	cmp	r3, #2
 800b960:	d000      	beq.n	800b964 <LoRaMacMcpsRequest+0x1b4>
 800b962:	e088      	b.n	800ba76 <LoRaMacMcpsRequest+0x2c6>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800b964:	0025      	movs	r5, r4
 800b966:	2304      	movs	r3, #4
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800b968:	0026      	movs	r6, r4
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800b96a:	35ff      	adds	r5, #255	; 0xff
 800b96c:	716b      	strb	r3, [r5, #5]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800b96e:	4b6f      	ldr	r3, [pc, #444]	; (800bb2c <LoRaMacMcpsRequest+0x37c>)
 800b970:	36fc      	adds	r6, #252	; 0xfc
 800b972:	60f3      	str	r3, [r6, #12]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b974:	23ff      	movs	r3, #255	; 0xff
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800b976:	2798      	movs	r7, #152	; 0x98
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800b978:	73a9      	strb	r1, [r5, #14]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800b97a:	9905      	ldr	r1, [sp, #20]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b97c:	736b      	strb	r3, [r5, #13]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800b97e:	3329      	adds	r3, #41	; 0x29
 800b980:	54e1      	strb	r1, [r4, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800b982:	9b01      	ldr	r3, [sp, #4]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800b984:	007f      	lsls	r7, r7, #1
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800b986:	58e3      	ldr	r3, [r4, r3]
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800b988:	a80d      	add	r0, sp, #52	; 0x34
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800b98a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800b98c:	55e2      	strb	r2, [r4, r7]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800b98e:	6173      	str	r3, [r6, #20]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800b990:	9b07      	ldr	r3, [sp, #28]
 800b992:	756b      	strb	r3, [r5, #21]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800b994:	4b63      	ldr	r3, [pc, #396]	; (800bb24 <LoRaMacMcpsRequest+0x374>)
 800b996:	6333      	str	r3, [r6, #48]	; 0x30
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800b998:	f001 fd84 	bl	800d4a4 <LoRaMacCryptoGetFCntUp>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	d000      	beq.n	800b9a2 <LoRaMacMcpsRequest+0x1f2>
 800b9a0:	e0a0      	b.n	800bae4 <LoRaMacMcpsRequest+0x334>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800b9a2:	0022      	movs	r2, r4
 800b9a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9a6:	32fe      	adds	r2, #254	; 0xfe
 800b9a8:	8313      	strh	r3, [r2, #24]
            MacCtx.McpsConfirm.AckReceived = false;
 800b9aa:	2288      	movs	r2, #136	; 0x88
 800b9ac:	00d2      	lsls	r2, r2, #3
 800b9ae:	52a0      	strh	r0, [r4, r2]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800b9b0:	3208      	adds	r2, #8
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800b9b2:	a80e      	add	r0, sp, #56	; 0x38
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800b9b4:	50a3      	str	r3, [r4, r2]
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800b9b6:	f001 fac7 	bl	800cf48 <LoRaMacCommandsGetSizeSerializedCmds>
 800b9ba:	2800      	cmp	r0, #0
 800b9bc:	d15a      	bne.n	800ba74 <LoRaMacMcpsRequest+0x2c4>
            if( macCmdsSize > 0 )
 800b9be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d01a      	beq.n	800b9fa <LoRaMacMcpsRequest+0x24a>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 800b9c4:	2085      	movs	r0, #133	; 0x85
 800b9c6:	9b01      	ldr	r3, [sp, #4]
 800b9c8:	58e3      	ldr	r3, [r4, r3]
 800b9ca:	9302      	str	r3, [sp, #8]
 800b9cc:	5618      	ldrsb	r0, [r3, r0]
 800b9ce:	f7fd fb3f 	bl	8009050 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800b9d2:	4b55      	ldr	r3, [pc, #340]	; (800bb28 <LoRaMacMcpsRequest+0x378>)
 800b9d4:	5ce3      	ldrb	r3, [r4, r3]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d060      	beq.n	800ba9c <LoRaMacMcpsRequest+0x2ec>
 800b9da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9dc:	2b0f      	cmp	r3, #15
 800b9de:	d841      	bhi.n	800ba64 <LoRaMacMcpsRequest+0x2b4>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800b9e0:	200f      	movs	r0, #15
 800b9e2:	4a53      	ldr	r2, [pc, #332]	; (800bb30 <LoRaMacMcpsRequest+0x380>)
 800b9e4:	a90e      	add	r1, sp, #56	; 0x38
 800b9e6:	f001 fabb 	bl	800cf60 <LoRaMacCommandsSerializeCmds>
 800b9ea:	2800      	cmp	r0, #0
 800b9ec:	d142      	bne.n	800ba74 <LoRaMacMcpsRequest+0x2c4>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800b9ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9f0:	300f      	adds	r0, #15
 800b9f2:	4018      	ands	r0, r3
 800b9f4:	9b07      	ldr	r3, [sp, #28]
 800b9f6:	4303      	orrs	r3, r0
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800b9f8:	756b      	strb	r3, [r5, #21]
        status = ScheduleTx( allowDelayedTx );
 800b9fa:	9808      	ldr	r0, [sp, #32]
 800b9fc:	f7fd fd0e 	bl	800941c <ScheduleTx>
 800ba00:	1e07      	subs	r7, r0, #0
    if( status != LORAMAC_STATUS_OK )
 800ba02:	d138      	bne.n	800ba76 <LoRaMacMcpsRequest+0x2c6>
        MacCtx.NvmCtx->SrvAckRequested = false;
 800ba04:	4c41      	ldr	r4, [pc, #260]	; (800bb0c <LoRaMacMcpsRequest+0x35c>)
 800ba06:	9b01      	ldr	r3, [sp, #4]
 800ba08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba0a:	58e3      	ldr	r3, [r4, r3]
 800ba0c:	5498      	strb	r0, [r3, r2]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 800ba0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba10:	3304      	adds	r3, #4
 800ba12:	67da      	str	r2, [r3, #124]	; 0x7c
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800ba14:	f001 fa6c 	bl	800cef0 <LoRaMacCommandsRemoveNoneStickyCmds>
 800ba18:	1e07      	subs	r7, r0, #0
 800ba1a:	d069      	beq.n	800baf0 <LoRaMacMcpsRequest+0x340>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ba1c:	2713      	movs	r7, #19
 800ba1e:	e030      	b.n	800ba82 <LoRaMacMcpsRequest+0x2d2>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800ba20:	9b00      	ldr	r3, [sp, #0]
 800ba22:	7bda      	ldrb	r2, [r3, #15]
 800ba24:	1c13      	adds	r3, r2, #0
 800ba26:	2a08      	cmp	r2, #8
 800ba28:	d900      	bls.n	800ba2c <LoRaMacMcpsRequest+0x27c>
 800ba2a:	2308      	movs	r3, #8
 800ba2c:	4a3a      	ldr	r2, [pc, #232]	; (800bb18 <LoRaMacMcpsRequest+0x368>)
 800ba2e:	54ab      	strb	r3, [r5, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800ba30:	2380      	movs	r3, #128	; 0x80
 800ba32:	e6e8      	b.n	800b806 <LoRaMacMcpsRequest+0x56>
            MacCtx.AckTimeoutRetries = 1;
 800ba34:	4b38      	ldr	r3, [pc, #224]	; (800bb18 <LoRaMacMcpsRequest+0x368>)
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800ba36:	466a      	mov	r2, sp
            MacCtx.AckTimeoutRetries = 1;
 800ba38:	54ef      	strb	r7, [r5, r3]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800ba3a:	23e0      	movs	r3, #224	; 0xe0
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800ba3c:	260a      	movs	r6, #10
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800ba3e:	7413      	strb	r3, [r2, #16]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800ba40:	9b00      	ldr	r3, [sp, #0]
            readyToSend = true;
 800ba42:	003c      	movs	r4, r7
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	9303      	str	r3, [sp, #12]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800ba48:	9b00      	ldr	r3, [sp, #0]
 800ba4a:	891b      	ldrh	r3, [r3, #8]
 800ba4c:	9302      	str	r3, [sp, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800ba4e:	9b00      	ldr	r3, [sp, #0]
 800ba50:	579e      	ldrsb	r6, [r3, r6]
    uint8_t fPort = 0;
 800ba52:	2300      	movs	r3, #0
 800ba54:	9305      	str	r3, [sp, #20]
            break;
 800ba56:	e6e5      	b.n	800b824 <LoRaMacMcpsRequest+0x74>
    switch( mcpsRequest->Type )
 800ba58:	0026      	movs	r6, r4
 800ba5a:	9405      	str	r4, [sp, #20]
 800ba5c:	e6e2      	b.n	800b824 <LoRaMacMcpsRequest+0x74>
            MacCtx.NodeAckRequested = true;
 800ba5e:	4b30      	ldr	r3, [pc, #192]	; (800bb20 <LoRaMacMcpsRequest+0x370>)
 800ba60:	54e6      	strb	r6, [r4, r3]
 800ba62:	e77f      	b.n	800b964 <LoRaMacMcpsRequest+0x1b4>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800ba64:	9b01      	ldr	r3, [sp, #4]
 800ba66:	a90e      	add	r1, sp, #56	; 0x38
 800ba68:	58e2      	ldr	r2, [r4, r3]
 800ba6a:	32cb      	adds	r2, #203	; 0xcb
 800ba6c:	f001 fa78 	bl	800cf60 <LoRaMacCommandsSerializeCmds>
 800ba70:	2800      	cmp	r0, #0
 800ba72:	d0c2      	beq.n	800b9fa <LoRaMacMcpsRequest+0x24a>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ba74:	2713      	movs	r7, #19
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 800ba76:	9a01      	ldr	r2, [sp, #4]
 800ba78:	4b24      	ldr	r3, [pc, #144]	; (800bb0c <LoRaMacMcpsRequest+0x35c>)
 800ba7a:	589b      	ldr	r3, [r3, r2]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 800ba7c:	9a06      	ldr	r2, [sp, #24]
 800ba7e:	3384      	adds	r3, #132	; 0x84
 800ba80:	801a      	strh	r2, [r3, #0]
            MacCtx.NodeAckRequested = false;
 800ba82:	2200      	movs	r2, #0
 800ba84:	4b21      	ldr	r3, [pc, #132]	; (800bb0c <LoRaMacMcpsRequest+0x35c>)
 800ba86:	4926      	ldr	r1, [pc, #152]	; (800bb20 <LoRaMacMcpsRequest+0x370>)
 800ba88:	545a      	strb	r2, [r3, r1]
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800ba8a:	2391      	movs	r3, #145	; 0x91
 800ba8c:	4a1f      	ldr	r2, [pc, #124]	; (800bb0c <LoRaMacMcpsRequest+0x35c>)
 800ba8e:	00db      	lsls	r3, r3, #3
 800ba90:	58d3      	ldr	r3, [r2, r3]
 800ba92:	9301      	str	r3, [sp, #4]
 800ba94:	9a01      	ldr	r2, [sp, #4]
 800ba96:	9b00      	ldr	r3, [sp, #0]
 800ba98:	611a      	str	r2, [r3, #16]
    return status;
 800ba9a:	e692      	b.n	800b7c2 <LoRaMacMcpsRequest+0x12>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800ba9c:	9b01      	ldr	r3, [sp, #4]
 800ba9e:	a90e      	add	r1, sp, #56	; 0x38
 800baa0:	58e3      	ldr	r3, [r4, r3]
 800baa2:	001a      	movs	r2, r3
 800baa4:	32cb      	adds	r2, #203	; 0xcb
 800baa6:	9302      	str	r3, [sp, #8]
 800baa8:	f001 fa5a 	bl	800cf60 <LoRaMacCommandsSerializeCmds>
 800baac:	2800      	cmp	r0, #0
 800baae:	d1e1      	bne.n	800ba74 <LoRaMacMcpsRequest+0x2c4>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800bab0:	2394      	movs	r3, #148	; 0x94
 800bab2:	005b      	lsls	r3, r3, #1
 800bab4:	54e0      	strb	r0, [r4, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 800bab6:	9b01      	ldr	r3, [sp, #4]
 800bab8:	58e3      	ldr	r3, [r4, r3]
 800baba:	9302      	str	r3, [sp, #8]
 800babc:	33cb      	adds	r3, #203	; 0xcb
 800babe:	6333      	str	r3, [r6, #48]	; 0x30
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800bac0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bac2:	55e3      	strb	r3, [r4, r7]
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800bac4:	e799      	b.n	800b9fa <LoRaMacMcpsRequest+0x24a>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800bac6:	9b03      	ldr	r3, [sp, #12]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d096      	beq.n	800b9fa <LoRaMacMcpsRequest+0x24a>
 800bacc:	2a00      	cmp	r2, #0
 800bace:	d094      	beq.n	800b9fa <LoRaMacMcpsRequest+0x24a>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800bad0:	466b      	mov	r3, sp
 800bad2:	9903      	ldr	r1, [sp, #12]
 800bad4:	7a1a      	ldrb	r2, [r3, #8]
 800bad6:	4817      	ldr	r0, [pc, #92]	; (800bb34 <LoRaMacMcpsRequest+0x384>)
 800bad8:	f003 f98a 	bl	800edf0 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800badc:	5d63      	ldrb	r3, [r4, r5]
 800bade:	3301      	adds	r3, #1
 800bae0:	8023      	strh	r3, [r4, #0]
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800bae2:	e78a      	b.n	800b9fa <LoRaMacMcpsRequest+0x24a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800bae4:	2712      	movs	r7, #18
 800bae6:	e7c6      	b.n	800ba76 <LoRaMacMcpsRequest+0x2c6>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800bae8:	2707      	movs	r7, #7
 800baea:	e7ca      	b.n	800ba82 <LoRaMacMcpsRequest+0x2d2>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800baec:	2702      	movs	r7, #2
 800baee:	e7cc      	b.n	800ba8a <LoRaMacMcpsRequest+0x2da>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800baf0:	9b00      	ldr	r3, [sp, #0]
 800baf2:	781a      	ldrb	r2, [r3, #0]
 800baf4:	4b10      	ldr	r3, [pc, #64]	; (800bb38 <LoRaMacMcpsRequest+0x388>)
 800baf6:	54e2      	strb	r2, [r4, r3]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800baf8:	2301      	movs	r3, #1
 800bafa:	4a10      	ldr	r2, [pc, #64]	; (800bb3c <LoRaMacMcpsRequest+0x38c>)
 800bafc:	5ca1      	ldrb	r1, [r4, r2]
 800bafe:	430b      	orrs	r3, r1
 800bb00:	54a3      	strb	r3, [r4, r2]
            EventMacNvmCtxChanged( );
 800bb02:	f7fd fa81 	bl	8009008 <EventMacNvmCtxChanged>
 800bb06:	e7c0      	b.n	800ba8a <LoRaMacMcpsRequest+0x2da>
 800bb08:	20000b08 	.word	0x20000b08
 800bb0c:	200006cc 	.word	0x200006cc
 800bb10:	0000043d 	.word	0x0000043d
 800bb14:	00000412 	.word	0x00000412
 800bb18:	00000411 	.word	0x00000411
 800bb1c:	00000484 	.word	0x00000484
 800bb20:	00000414 	.word	0x00000414
 800bb24:	20000804 	.word	0x20000804
 800bb28:	00000237 	.word	0x00000237
 800bb2c:	200006ce 	.word	0x200006ce
 800bb30:	200007e4 	.word	0x200007e4
 800bb34:	200006cf 	.word	0x200006cf
 800bb38:	0000043c 	.word	0x0000043c
 800bb3c:	00000481 	.word	0x00000481

0800bb40 <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800bb40:	b573      	push	{r0, r1, r4, r5, r6, lr}
    VerifyParams_t verify;

    verify.DutyCycle = enable;

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 800bb42:	4e08      	ldr	r6, [pc, #32]	; (800bb64 <LoRaMacTestSetDutyCycleOn+0x24>)
 800bb44:	4d08      	ldr	r5, [pc, #32]	; (800bb68 <LoRaMacTestSetDutyCycleOn+0x28>)
    verify.DutyCycle = enable;
 800bb46:	a901      	add	r1, sp, #4
    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 800bb48:	5973      	ldr	r3, [r6, r5]
{
 800bb4a:	0004      	movs	r4, r0
    verify.DutyCycle = enable;
 800bb4c:	7008      	strb	r0, [r1, #0]
    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 800bb4e:	220f      	movs	r2, #15
 800bb50:	7818      	ldrb	r0, [r3, #0]
 800bb52:	f002 f801 	bl	800db58 <RegionVerify>
 800bb56:	2800      	cmp	r0, #0
 800bb58:	d002      	beq.n	800bb60 <LoRaMacTestSetDutyCycleOn+0x20>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
 800bb5a:	5973      	ldr	r3, [r6, r5]
 800bb5c:	33c9      	adds	r3, #201	; 0xc9
 800bb5e:	701c      	strb	r4, [r3, #0]
    }
}
 800bb60:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 800bb62:	46c0      	nop			; (mov r8, r8)
 800bb64:	200006cc 	.word	0x200006cc
 800bb68:	00000484 	.word	0x00000484

0800bb6c <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800bb6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( adrNext->Version.Fields.Minor == 0 )
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800bb6e:	2500      	movs	r5, #0
{
 800bb70:	b08d      	sub	sp, #52	; 0x34
 800bb72:	9104      	str	r1, [sp, #16]
 800bb74:	9205      	str	r2, [sp, #20]
 800bb76:	001e      	movs	r6, r3
    if( adrNext->Version.Fields.Minor == 0 )
 800bb78:	7883      	ldrb	r3, [r0, #2]
{
 800bb7a:	0004      	movs	r4, r0
    if( adrNext->Version.Fields.Minor == 0 )
 800bb7c:	42ab      	cmp	r3, r5
 800bb7e:	d12b      	bne.n	800bbd8 <LoRaMacAdrCalcNext+0x6c>
    int8_t datarate = adrNext->Datarate;
 800bb80:	2310      	movs	r3, #16
 800bb82:	56c3      	ldrsb	r3, [r0, r3]
 800bb84:	9301      	str	r3, [sp, #4]
    int8_t txPower = adrNext->TxPower;
 800bb86:	2311      	movs	r3, #17
 800bb88:	56c3      	ldrsb	r3, [r0, r3]
    int8_t datarate = adrNext->Datarate;
 800bb8a:	9f01      	ldr	r7, [sp, #4]
    int8_t txPower = adrNext->TxPower;
 800bb8c:	9303      	str	r3, [sp, #12]
    *adrAckCounter = adrNext->AdrAckCounter;
 800bb8e:	6883      	ldr	r3, [r0, #8]
 800bb90:	6033      	str	r3, [r6, #0]
    if( adrNext->AdrEnabled == true )
 800bb92:	7945      	ldrb	r5, [r0, #5]
 800bb94:	2d00      	cmp	r5, #0
 800bb96:	d01a      	beq.n	800bbce <LoRaMacAdrCalcNext+0x62>
        getPhy.Attribute = PHY_MIN_TX_DR;
 800bb98:	2302      	movs	r3, #2
 800bb9a:	aa06      	add	r2, sp, #24
 800bb9c:	7213      	strb	r3, [r2, #8]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800bb9e:	7c83      	ldrb	r3, [r0, #18]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800bba0:	a908      	add	r1, sp, #32
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800bba2:	7293      	strb	r3, [r2, #10]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800bba4:	7cc0      	ldrb	r0, [r0, #19]
 800bba6:	f001 ffb3 	bl	800db10 <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 800bbaa:	b243      	sxtb	r3, r0
 800bbac:	9302      	str	r3, [sp, #8]
        datarate = MAX( datarate, minTxDatarate );
 800bbae:	466b      	mov	r3, sp
 800bbb0:	9a02      	ldr	r2, [sp, #8]
 800bbb2:	791f      	ldrb	r7, [r3, #4]
 800bbb4:	9b01      	ldr	r3, [sp, #4]
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	da01      	bge.n	800bbbe <LoRaMacAdrCalcNext+0x52>
 800bbba:	466b      	mov	r3, sp
 800bbbc:	7a1f      	ldrb	r7, [r3, #8]
        if( datarate == minTxDatarate )
 800bbbe:	9b01      	ldr	r3, [sp, #4]
 800bbc0:	9a02      	ldr	r2, [sp, #8]
        datarate = MAX( datarate, minTxDatarate );
 800bbc2:	b27f      	sxtb	r7, r7
        if( datarate == minTxDatarate )
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	dc0a      	bgt.n	800bbde <LoRaMacAdrCalcNext+0x72>
            *adrAckCounter = 0;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	6033      	str	r3, [r6, #0]
                        adrAckReq = false;
 800bbcc:	2500      	movs	r5, #0
    *drOut = datarate;
 800bbce:	9b04      	ldr	r3, [sp, #16]
    *txPowOut = txPower;
 800bbd0:	9a03      	ldr	r2, [sp, #12]
    *drOut = datarate;
 800bbd2:	701f      	strb	r7, [r3, #0]
    *txPowOut = txPower;
 800bbd4:	9b05      	ldr	r3, [sp, #20]
 800bbd6:	701a      	strb	r2, [r3, #0]
}
 800bbd8:	0028      	movs	r0, r5
 800bbda:	b00d      	add	sp, #52	; 0x34
 800bbdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800bbde:	2500      	movs	r5, #0
 800bbe0:	89a1      	ldrh	r1, [r4, #12]
 800bbe2:	68a2      	ldr	r2, [r4, #8]
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800bbe4:	89e3      	ldrh	r3, [r4, #14]
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800bbe6:	428a      	cmp	r2, r1
 800bbe8:	416d      	adcs	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800bbea:	185b      	adds	r3, r3, r1
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800bbec:	b2ed      	uxtb	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d3ed      	bcc.n	800bbce <LoRaMacAdrCalcNext+0x62>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800bbf2:	2308      	movs	r3, #8
 800bbf4:	ae08      	add	r6, sp, #32
 800bbf6:	7033      	strb	r3, [r6, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800bbf8:	0031      	movs	r1, r6
 800bbfa:	7ce0      	ldrb	r0, [r4, #19]
 800bbfc:	f001 ff88 	bl	800db10 <RegionGetPhyParam>
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800bc00:	89e1      	ldrh	r1, [r4, #14]
                txPower = phyParam.Value;
 800bc02:	b243      	sxtb	r3, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800bc04:	68a0      	ldr	r0, [r4, #8]
                txPower = phyParam.Value;
 800bc06:	9303      	str	r3, [sp, #12]
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800bc08:	f7f4 fb34 	bl	8000274 <__aeabi_uidivmod>
 800bc0c:	2901      	cmp	r1, #1
 800bc0e:	d1de      	bne.n	800bbce <LoRaMacAdrCalcNext+0x62>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800bc10:	2322      	movs	r3, #34	; 0x22
                    getPhy.Datarate = datarate;
 800bc12:	7077      	strb	r7, [r6, #1]
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800bc14:	7033      	strb	r3, [r6, #0]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800bc16:	7ca3      	ldrb	r3, [r4, #18]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800bc18:	0031      	movs	r1, r6
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800bc1a:	70b3      	strb	r3, [r6, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800bc1c:	7ce0      	ldrb	r0, [r4, #19]
 800bc1e:	f001 ff77 	bl	800db10 <RegionGetPhyParam>
                    if( datarate == minTxDatarate )
 800bc22:	9b02      	ldr	r3, [sp, #8]
                    datarate = phyParam.Value;
 800bc24:	b247      	sxtb	r7, r0
                    if( datarate == minTxDatarate )
 800bc26:	42bb      	cmp	r3, r7
 800bc28:	d1d1      	bne.n	800bbce <LoRaMacAdrCalcNext+0x62>
                        if( adrNext->UpdateChanMask == true )
 800bc2a:	7925      	ldrb	r5, [r4, #4]
 800bc2c:	2d00      	cmp	r5, #0
 800bc2e:	d0ce      	beq.n	800bbce <LoRaMacAdrCalcNext+0x62>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800bc30:	2302      	movs	r3, #2
 800bc32:	a90a      	add	r1, sp, #40	; 0x28
 800bc34:	710b      	strb	r3, [r1, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 800bc36:	7ce0      	ldrb	r0, [r4, #19]
 800bc38:	f001 ff7d 	bl	800db36 <RegionInitDefaults>
 800bc3c:	e7c6      	b.n	800bbcc <LoRaMacAdrCalcNext+0x60>
	...

0800bc40 <NvmContextChange>:
/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void NvmContextChange( void )
{
    if( Ctx.LoRaMacClassBNvmEvent != NULL )
 800bc40:	4b03      	ldr	r3, [pc, #12]	; (800bc50 <NvmContextChange+0x10>)
{
 800bc42:	b510      	push	{r4, lr}
    if( Ctx.LoRaMacClassBNvmEvent != NULL )
 800bc44:	33b8      	adds	r3, #184	; 0xb8
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d000      	beq.n	800bc4e <NvmContextChange+0xe>
    {
        Ctx.LoRaMacClassBNvmEvent( );
 800bc4c:	4798      	blx	r3
    }
}
 800bc4e:	bd10      	pop	{r4, pc}
 800bc50:	20000b9c 	.word	0x20000b9c

0800bc54 <LoRaMacClassBPingSlotTimerEvent>:
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;
 800bc54:	2302      	movs	r3, #2
 800bc56:	4a06      	ldr	r2, [pc, #24]	; (800bc70 <LoRaMacClassBPingSlotTimerEvent+0x1c>)
{
 800bc58:	b510      	push	{r4, lr}
    LoRaMacClassBEvents.Events.PingSlot = 1;
 800bc5a:	7811      	ldrb	r1, [r2, #0]
 800bc5c:	430b      	orrs	r3, r1
 800bc5e:	7013      	strb	r3, [r2, #0]

    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
 800bc60:	4b04      	ldr	r3, [pc, #16]	; (800bc74 <LoRaMacClassBPingSlotTimerEvent+0x20>)
 800bc62:	3394      	adds	r3, #148	; 0x94
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d000      	beq.n	800bc6c <LoRaMacClassBPingSlotTimerEvent+0x18>
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
 800bc6a:	4798      	blx	r3
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800bc6c:	bd10      	pop	{r4, pc}
 800bc6e:	46c0      	nop			; (mov r8, r8)
 800bc70:	20000b58 	.word	0x20000b58
 800bc74:	20000b9c 	.word	0x20000b9c

0800bc78 <LoRaMacClassBMulticastSlotTimerEvent>:
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;
 800bc78:	2304      	movs	r3, #4
 800bc7a:	4a06      	ldr	r2, [pc, #24]	; (800bc94 <LoRaMacClassBMulticastSlotTimerEvent+0x1c>)
{
 800bc7c:	b510      	push	{r4, lr}
    LoRaMacClassBEvents.Events.MulticastSlot = 1;
 800bc7e:	7811      	ldrb	r1, [r2, #0]
 800bc80:	430b      	orrs	r3, r1
 800bc82:	7013      	strb	r3, [r2, #0]

    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
 800bc84:	4b04      	ldr	r3, [pc, #16]	; (800bc98 <LoRaMacClassBMulticastSlotTimerEvent+0x20>)
 800bc86:	3394      	adds	r3, #148	; 0x94
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d000      	beq.n	800bc90 <LoRaMacClassBMulticastSlotTimerEvent+0x18>
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
 800bc8e:	4798      	blx	r3
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800bc90:	bd10      	pop	{r4, pc}
 800bc92:	46c0      	nop			; (mov r8, r8)
 800bc94:	20000b58 	.word	0x20000b58
 800bc98:	20000b9c 	.word	0x20000b9c

0800bc9c <CalcDownlinkFrequency>:
{
 800bc9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    getPhy.Attribute = PHY_PING_SLOT_CHANNEL_FREQ;
 800bc9e:	2235      	movs	r2, #53	; 0x35
 800bca0:	ab02      	add	r3, sp, #8
    if( isBeacon == true )
 800bca2:	2900      	cmp	r1, #0
 800bca4:	d000      	beq.n	800bca8 <CalcDownlinkFrequency+0xc>
        getPhy.Attribute = PHY_BEACON_CHANNEL_FREQ;
 800bca6:	2230      	movs	r2, #48	; 0x30
 800bca8:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800bcaa:	4a05      	ldr	r2, [pc, #20]	; (800bcc0 <CalcDownlinkFrequency+0x24>)
    getPhy.Channel = channel;
 800bcac:	7118      	strb	r0, [r3, #4]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800bcae:	32ac      	adds	r2, #172	; 0xac
 800bcb0:	6812      	ldr	r2, [r2, #0]
 800bcb2:	0019      	movs	r1, r3
 800bcb4:	7810      	ldrb	r0, [r2, #0]
 800bcb6:	f001 ff2b 	bl	800db10 <RegionGetPhyParam>
}
 800bcba:	b005      	add	sp, #20
 800bcbc:	bd00      	pop	{pc}
 800bcbe:	46c0      	nop			; (mov r8, r8)
 800bcc0:	20000b9c 	.word	0x20000b9c

0800bcc4 <LoRaMacClassBBeaconTimerEvent>:
{
 800bcc4:	b510      	push	{r4, lr}
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
 800bcc6:	f004 ff27 	bl	8010b18 <UTIL_TIMER_GetCurrentTime>
 800bcca:	4c08      	ldr	r4, [pc, #32]	; (800bcec <LoRaMacClassBBeaconTimerEvent+0x28>)
 800bccc:	6420      	str	r0, [r4, #64]	; 0x40
    TimerStop( &Ctx.BeaconTimer );
 800bcce:	4808      	ldr	r0, [pc, #32]	; (800bcf0 <LoRaMacClassBBeaconTimerEvent+0x2c>)
 800bcd0:	f004 ff66 	bl	8010ba0 <UTIL_TIMER_Stop>
    LoRaMacClassBEvents.Events.Beacon = 1;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	4a07      	ldr	r2, [pc, #28]	; (800bcf4 <LoRaMacClassBBeaconTimerEvent+0x30>)
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
 800bcd8:	3494      	adds	r4, #148	; 0x94
    LoRaMacClassBEvents.Events.Beacon = 1;
 800bcda:	7811      	ldrb	r1, [r2, #0]
 800bcdc:	430b      	orrs	r3, r1
 800bcde:	7013      	strb	r3, [r2, #0]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
 800bce0:	6823      	ldr	r3, [r4, #0]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d000      	beq.n	800bce8 <LoRaMacClassBBeaconTimerEvent+0x24>
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
 800bce6:	4798      	blx	r3
}
 800bce8:	bd10      	pop	{r4, pc}
 800bcea:	46c0      	nop			; (mov r8, r8)
 800bcec:	20000b9c 	.word	0x20000b9c
 800bcf0:	20000be4 	.word	0x20000be4
 800bcf4:	20000b58 	.word	0x20000b58

0800bcf8 <TimerTempCompensation>:
{
 800bcf8:	b570      	push	{r4, r5, r6, lr}
 800bcfa:	0005      	movs	r5, r0
 800bcfc:	1c08      	adds	r0, r1, #0
  interim = (temperature - (t - tDev));
 800bcfe:	4915      	ldr	r1, [pc, #84]	; (800bd54 <TimerTempCompensation+0x5c>)
 800bd00:	f7f5 f9ea 	bl	80010d8 <__aeabi_fsub>
 800bd04:	1c04      	adds	r4, r0, #0
  interim = ((float) period * ppm) / 1000000.0f;
 800bd06:	0028      	movs	r0, r5
 800bd08:	f7f5 fbce 	bl	80014a8 <__aeabi_ui2f>
  ppm *=  interim * interim;
 800bd0c:	1c21      	adds	r1, r4, #0
  interim = ((float) period * ppm) / 1000000.0f;
 800bd0e:	1c05      	adds	r5, r0, #0
  ppm *=  interim * interim;
 800bd10:	1c20      	adds	r0, r4, #0
 800bd12:	f7f5 f8c7 	bl	8000ea4 <__aeabi_fmul>
 800bd16:	4910      	ldr	r1, [pc, #64]	; (800bd58 <TimerTempCompensation+0x60>)
 800bd18:	f7f5 f8c4 	bl	8000ea4 <__aeabi_fmul>
  interim = ((float) period * ppm) / 1000000.0f;
 800bd1c:	1c29      	adds	r1, r5, #0
 800bd1e:	f7f5 f8c1 	bl	8000ea4 <__aeabi_fmul>
 800bd22:	490e      	ldr	r1, [pc, #56]	; (800bd5c <TimerTempCompensation+0x64>)
 800bd24:	f7f4 fef4 	bl	8000b10 <__aeabi_fdiv>
 800bd28:	1c01      	adds	r1, r0, #0
  interim += period;
 800bd2a:	1c28      	adds	r0, r5, #0
 800bd2c:	f7f4 fd54 	bl	80007d8 <__aeabi_fadd>
  interim = floor(interim);
 800bd30:	f7f7 f9f0 	bl	8003114 <__aeabi_f2d>
 800bd34:	f005 f986 	bl	8011044 <floor>
 800bd38:	f7f7 fa34 	bl	80031a4 <__aeabi_d2f>
  if (interim < 0.0f)
 800bd3c:	2100      	movs	r1, #0
  interim = floor(interim);
 800bd3e:	1c04      	adds	r4, r0, #0
  if (interim < 0.0f)
 800bd40:	f7f4 fbd8 	bl	80004f4 <__aeabi_fcmplt>
 800bd44:	2800      	cmp	r0, #0
 800bd46:	d000      	beq.n	800bd4a <TimerTempCompensation+0x52>
    interim = (float)period;
 800bd48:	1c2c      	adds	r4, r5, #0
  return ( UTIL_TIMER_Time_t ) interim;
 800bd4a:	1c20      	adds	r0, r4, #0
 800bd4c:	f7f4 fc42 	bl	80005d4 <__aeabi_f2uiz>
}
 800bd50:	bd70      	pop	{r4, r5, r6, pc}
 800bd52:	46c0      	nop			; (mov r8, r8)
 800bd54:	41a00000 	.word	0x41a00000
 800bd58:	bd1db22d 	.word	0xbd1db22d
 800bd5c:	49742400 	.word	0x49742400

0800bd60 <CalcNextSlotTime>:
{
 800bd60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd62:	b085      	sub	sp, #20
 800bd64:	9303      	str	r3, [sp, #12]
 800bd66:	0004      	movs	r4, r0
 800bd68:	9202      	str	r2, [sp, #8]
 800bd6a:	9101      	str	r1, [sp, #4]
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800bd6c:	f004 fed4 	bl	8010b18 <UTIL_TIMER_GetCurrentTime>
    slotTime = ( ( currentTime - SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) ) % CLASSB_BEACON_INTERVAL );
 800bd70:	4e1d      	ldr	r6, [pc, #116]	; (800bde8 <CalcNextSlotTime+0x88>)
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800bd72:	0005      	movs	r5, r0
    slotTime = ( ( currentTime - SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) ) % CLASSB_BEACON_INTERVAL );
 800bd74:	6a31      	ldr	r1, [r6, #32]
 800bd76:	69f0      	ldr	r0, [r6, #28]
 800bd78:	f004 fe54 	bl	8010a24 <SysTimeToMs>
 800bd7c:	21fa      	movs	r1, #250	; 0xfa
 800bd7e:	1a28      	subs	r0, r5, r0
 800bd80:	0249      	lsls	r1, r1, #9
 800bd82:	f7f4 fa77 	bl	8000274 <__aeabi_uidivmod>
    slotTime += slotOffset * CLASSB_PING_SLOT_WINDOW;
 800bd86:	271e      	movs	r7, #30
 800bd88:	0020      	movs	r0, r4
 800bd8a:	4378      	muls	r0, r7
 800bd8c:	4b17      	ldr	r3, [pc, #92]	; (800bdec <CalcNextSlotTime+0x8c>)
 800bd8e:	18c0      	adds	r0, r0, r3
 800bd90:	1940      	adds	r0, r0, r5
    uint8_t currentPingSlot = 0;
 800bd92:	2300      	movs	r3, #0
    slotTime += slotOffset * CLASSB_PING_SLOT_WINDOW;
 800bd94:	1a44      	subs	r4, r0, r1
    if( slotTime < currentTime )
 800bd96:	42a5      	cmp	r5, r4
 800bd98:	d90b      	bls.n	800bdb2 <CalcNextSlotTime+0x52>
        currentPingSlot = ( ( currentTime - slotTime ) /
 800bd9a:	1a08      	subs	r0, r1, r0
                          ( pingPeriod * CLASSB_PING_SLOT_WINDOW ) ) + 1;
 800bd9c:	9901      	ldr	r1, [sp, #4]
        currentPingSlot = ( ( currentTime - slotTime ) /
 800bd9e:	1940      	adds	r0, r0, r5
                          ( pingPeriod * CLASSB_PING_SLOT_WINDOW ) ) + 1;
 800bda0:	4379      	muls	r1, r7
        currentPingSlot = ( ( currentTime - slotTime ) /
 800bda2:	f7f4 f9e1 	bl	8000168 <__udivsi3>
        slotTime += ( ( TimerTime_t )( currentPingSlot * pingPeriod ) *
 800bda6:	9901      	ldr	r1, [sp, #4]
        currentPingSlot = ( ( currentTime - slotTime ) /
 800bda8:	3001      	adds	r0, #1
 800bdaa:	b2c3      	uxtb	r3, r0
        slotTime += ( ( TimerTime_t )( currentPingSlot * pingPeriod ) *
 800bdac:	4359      	muls	r1, r3
 800bdae:	434f      	muls	r7, r1
 800bdb0:	19e4      	adds	r4, r4, r7
    if( currentPingSlot < pingNb )
 800bdb2:	9a02      	ldr	r2, [sp, #8]
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d302      	bcc.n	800bdbe <CalcNextSlotTime+0x5e>
    return false;
 800bdb8:	2000      	movs	r0, #0
}
 800bdba:	b005      	add	sp, #20
 800bdbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( slotTime <= ( SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - CLASSB_BEACON_GUARD - CLASSB_PING_SLOT_WINDOW ) )
 800bdbe:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800bdc0:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800bdc2:	f004 fe2f 	bl	8010a24 <SysTimeToMs>
 800bdc6:	4b0a      	ldr	r3, [pc, #40]	; (800bdf0 <CalcNextSlotTime+0x90>)
 800bdc8:	18c0      	adds	r0, r0, r3
 800bdca:	42a0      	cmp	r0, r4
 800bdcc:	d3f4      	bcc.n	800bdb8 <CalcNextSlotTime+0x58>
            slotTime -= Radio.GetWakeupTime( );
 800bdce:	4b09      	ldr	r3, [pc, #36]	; (800bdf4 <CalcNextSlotTime+0x94>)
            slotTime -= currentTime;
 800bdd0:	1b65      	subs	r5, r4, r5
            slotTime -= Radio.GetWakeupTime( );
 800bdd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdd4:	9301      	str	r3, [sp, #4]
 800bdd6:	4798      	blx	r3
            slotTime = TimerTempCompensation( slotTime, Ctx.BeaconCtx.Temperature );
 800bdd8:	6931      	ldr	r1, [r6, #16]
            slotTime -= Radio.GetWakeupTime( );
 800bdda:	1a28      	subs	r0, r5, r0
            slotTime = TimerTempCompensation( slotTime, Ctx.BeaconCtx.Temperature );
 800bddc:	f7ff ff8c 	bl	800bcf8 <TimerTempCompensation>
            *timeOffset = slotTime;
 800bde0:	9b03      	ldr	r3, [sp, #12]
 800bde2:	6018      	str	r0, [r3, #0]
            return true;
 800bde4:	2001      	movs	r0, #1
 800bde6:	e7e8      	b.n	800bdba <CalcNextSlotTime+0x5a>
 800bde8:	20000b9c 	.word	0x20000b9c
 800bdec:	00000848 	.word	0x00000848
 800bdf0:	fffff42a 	.word	0xfffff42a
 800bdf4:	080117e0 	.word	0x080117e0

0800bdf8 <ComputePingOffset>:
{
 800bdf8:	b570      	push	{r4, r5, r6, lr}
 800bdfa:	0006      	movs	r6, r0
 800bdfc:	0015      	movs	r5, r2
 800bdfe:	b088      	sub	sp, #32
    memset1( buffer, 0, 16 );
 800be00:	4668      	mov	r0, sp
 800be02:	2210      	movs	r2, #16
 800be04:	2100      	movs	r1, #0
{
 800be06:	001c      	movs	r4, r3
    memset1( buffer, 0, 16 );
 800be08:	f003 f808 	bl	800ee1c <memset1>
    memset1( cipher, 0, 16 );
 800be0c:	a804      	add	r0, sp, #16
 800be0e:	2210      	movs	r2, #16
 800be10:	2100      	movs	r1, #0
 800be12:	f003 f803 	bl	800ee1c <memset1>
    SecureElementAesEncrypt( buffer, 16, SLOT_RAND_ZERO_KEY, cipher );
 800be16:	2283      	movs	r2, #131	; 0x83
 800be18:	ab04      	add	r3, sp, #16
 800be1a:	2110      	movs	r1, #16
 800be1c:	4668      	mov	r0, sp
    buffer[0] = ( time ) & 0xFF;
 800be1e:	9600      	str	r6, [sp, #0]
    buffer[4] = ( address ) & 0xFF;
 800be20:	9501      	str	r5, [sp, #4]
    SecureElementAesEncrypt( buffer, 16, SLOT_RAND_ZERO_KEY, cipher );
 800be22:	f7fc f9ba 	bl	800819a <SecureElementAesEncrypt>
    result = ( ( ( uint32_t ) cipher[0] ) + ( ( ( uint32_t ) cipher[1] ) * 256 ) );
 800be26:	466b      	mov	r3, sp
 800be28:	7c58      	ldrb	r0, [r3, #17]
 800be2a:	7c1b      	ldrb	r3, [r3, #16]
 800be2c:	0200      	lsls	r0, r0, #8
    *pingOffset = ( uint16_t )( result % pingPeriod );
 800be2e:	0021      	movs	r1, r4
    result = ( ( ( uint32_t ) cipher[0] ) + ( ( ( uint32_t ) cipher[1] ) * 256 ) );
 800be30:	18c0      	adds	r0, r0, r3
    *pingOffset = ( uint16_t )( result % pingPeriod );
 800be32:	f7f4 fa1f 	bl	8000274 <__aeabi_uidivmod>
 800be36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be38:	8019      	strh	r1, [r3, #0]
}
 800be3a:	b008      	add	sp, #32
 800be3c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800be40 <BeaconCrc>:
{
 800be40:	0002      	movs	r2, r0
 800be42:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( buffer == NULL )
 800be44:	2800      	cmp	r0, #0
 800be46:	d018      	beq.n	800be7a <BeaconCrc+0x3a>
 800be48:	2300      	movs	r3, #0
        crc ^= ( uint16_t ) buffer[i] << 8;
 800be4a:	2708      	movs	r7, #8
    uint16_t crc = 0x0000;
 800be4c:	0018      	movs	r0, r3
        crc ^= ( uint16_t ) buffer[i] << 8;
 800be4e:	5cd4      	ldrb	r4, [r2, r3]
 800be50:	0224      	lsls	r4, r4, #8
 800be52:	4060      	eors	r0, r4
 800be54:	003c      	movs	r4, r7
            crc = ( crc & 0x8000 ) ? ( crc << 1 ) ^ polynom : ( crc << 1 );
 800be56:	b205      	sxth	r5, r0
 800be58:	46ac      	mov	ip, r5
 800be5a:	4666      	mov	r6, ip
 800be5c:	0045      	lsls	r5, r0, #1
 800be5e:	b2a8      	uxth	r0, r5
 800be60:	2e00      	cmp	r6, #0
 800be62:	da02      	bge.n	800be6a <BeaconCrc+0x2a>
 800be64:	4805      	ldr	r0, [pc, #20]	; (800be7c <BeaconCrc+0x3c>)
 800be66:	4045      	eors	r5, r0
 800be68:	b2a8      	uxth	r0, r5
        for( uint16_t j = 0; j < 8; ++j )
 800be6a:	3c01      	subs	r4, #1
 800be6c:	b2a4      	uxth	r4, r4
 800be6e:	2c00      	cmp	r4, #0
 800be70:	d1f1      	bne.n	800be56 <BeaconCrc+0x16>
    for( uint16_t i = 0; i < length; ++i )
 800be72:	3301      	adds	r3, #1
 800be74:	b29c      	uxth	r4, r3
 800be76:	42a1      	cmp	r1, r4
 800be78:	d8e9      	bhi.n	800be4e <BeaconCrc+0xe>
}
 800be7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be7c:	00001021 	.word	0x00001021

0800be80 <CalcDownlinkChannelAndFrequency.constprop.0>:
static uint32_t CalcDownlinkChannelAndFrequency( uint32_t devAddr, TimerTime_t beaconTime,
 800be80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800be82:	0006      	movs	r6, r0
 800be84:	000c      	movs	r4, r1
 800be86:	0015      	movs	r5, r2
    getPhy.Attribute = PHY_PING_SLOT_NB_CHANNELS;
 800be88:	2337      	movs	r3, #55	; 0x37
    if( isBeacon == true )
 800be8a:	2a00      	cmp	r2, #0
 800be8c:	d000      	beq.n	800be90 <CalcDownlinkChannelAndFrequency.constprop.0+0x10>
        getPhy.Attribute = PHY_BEACON_NB_CHANNELS;
 800be8e:	2334      	movs	r3, #52	; 0x34
 800be90:	466a      	mov	r2, sp
 800be92:	7213      	strb	r3, [r2, #8]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800be94:	4b0b      	ldr	r3, [pc, #44]	; (800bec4 <CalcDownlinkChannelAndFrequency.constprop.0+0x44>)
 800be96:	a902      	add	r1, sp, #8
 800be98:	33ac      	adds	r3, #172	; 0xac
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	7818      	ldrb	r0, [r3, #0]
 800be9e:	f001 fe37 	bl	800db10 <RegionGetPhyParam>
    if( nbChannels > 1 )
 800bea2:	b2c2      	uxtb	r2, r0
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800bea4:	0003      	movs	r3, r0
    uint32_t channel = 0;
 800bea6:	2100      	movs	r1, #0
    if( nbChannels > 1 )
 800bea8:	2a01      	cmp	r2, #1
 800beaa:	d904      	bls.n	800beb6 <CalcDownlinkChannelAndFrequency.constprop.0+0x36>
        channel = devAddr + ( beaconTime / ( beaconInterval / 1000 ) );
 800beac:	09e0      	lsrs	r0, r4, #7
 800beae:	1980      	adds	r0, r0, r6
        channel = channel % nbChannels;
 800beb0:	b2d9      	uxtb	r1, r3
 800beb2:	f7f4 f9df 	bl	8000274 <__aeabi_uidivmod>
    return CalcDownlinkFrequency( channel, isBeacon );
 800beb6:	b2c8      	uxtb	r0, r1
 800beb8:	0029      	movs	r1, r5
 800beba:	f7ff feef 	bl	800bc9c <CalcDownlinkFrequency>
}
 800bebe:	b004      	add	sp, #16
 800bec0:	bd70      	pop	{r4, r5, r6, pc}
 800bec2:	46c0      	nop			; (mov r8, r8)
 800bec4:	20000b9c 	.word	0x20000b9c

0800bec8 <RxBeaconSetup>:
{
 800bec8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t windowTimeout = Ctx.BeaconCtx.SymbolTimeout;
 800beca:	4c2c      	ldr	r4, [pc, #176]	; (800bf7c <RxBeaconSetup+0xb4>)
{
 800becc:	0007      	movs	r7, r0
    uint16_t windowTimeout = Ctx.BeaconCtx.SymbolTimeout;
 800bece:	8e26      	ldrh	r6, [r4, #48]	; 0x30
{
 800bed0:	0008      	movs	r0, r1
 800bed2:	b08f      	sub	sp, #60	; 0x3c
    if( activateDefaultChannel == true )
 800bed4:	2900      	cmp	r1, #0
 800bed6:	d04a      	beq.n	800bf6e <RxBeaconSetup+0xa6>
        frequency = CalcDownlinkFrequency( 0, true );
 800bed8:	2101      	movs	r1, #1
 800beda:	2000      	movs	r0, #0
 800bedc:	f7ff fede 	bl	800bc9c <CalcDownlinkFrequency>
    if( Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq == 1 )
 800bee0:	0023      	movs	r3, r4
 800bee2:	33bc      	adds	r3, #188	; 0xbc
 800bee4:	681b      	ldr	r3, [r3, #0]
        frequency = CalcDownlinkChannelAndFrequency( 0, Ctx.BeaconCtx.BeaconTime.Seconds + ( CLASSB_BEACON_INTERVAL / 1000 ),
 800bee6:	0005      	movs	r5, r0
    if( Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq == 1 )
 800bee8:	7b1a      	ldrb	r2, [r3, #12]
 800beea:	07d2      	lsls	r2, r2, #31
 800beec:	d500      	bpl.n	800bef0 <RxBeaconSetup+0x28>
        frequency = Ctx.NvmCtx->BeaconCtx.Frequency;
 800beee:	691d      	ldr	r5, [r3, #16]
    if( Ctx.BeaconCtx.Ctrl.BeaconChannelSet == 1 )
 800bef0:	2208      	movs	r2, #8
 800bef2:	7b23      	ldrb	r3, [r4, #12]
 800bef4:	4213      	tst	r3, r2
 800bef6:	d008      	beq.n	800bf0a <RxBeaconSetup+0x42>
        Ctx.BeaconCtx.Ctrl.BeaconChannelSet = 0;
 800bef8:	4393      	bics	r3, r2
 800befa:	7323      	strb	r3, [r4, #12]
        frequency = CalcDownlinkFrequency( Ctx.BeaconCtx.BeaconTimingChannel, true );
 800befc:	0023      	movs	r3, r4
 800befe:	3338      	adds	r3, #56	; 0x38
 800bf00:	2101      	movs	r1, #1
 800bf02:	7818      	ldrb	r0, [r3, #0]
 800bf04:	f7ff feca 	bl	800bc9c <CalcDownlinkFrequency>
 800bf08:	0005      	movs	r5, r0
    if( ( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 1 ) || ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) )
 800bf0a:	2312      	movs	r3, #18
 800bf0c:	7b22      	ldrb	r2, [r4, #12]
 800bf0e:	421a      	tst	r2, r3
 800bf10:	d017      	beq.n	800bf42 <RxBeaconSetup+0x7a>
        getPhy.Attribute = PHY_BEACON_CHANNEL_DR;
 800bf12:	0026      	movs	r6, r4
 800bf14:	a904      	add	r1, sp, #16
 800bf16:	36ac      	adds	r6, #172	; 0xac
 800bf18:	3320      	adds	r3, #32
 800bf1a:	700b      	strb	r3, [r1, #0]
        phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800bf1c:	6833      	ldr	r3, [r6, #0]
 800bf1e:	7818      	ldrb	r0, [r3, #0]
 800bf20:	f001 fdf6 	bl	800db10 <RegionGetPhyParam>
                                        Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 800bf24:	0023      	movs	r3, r4
 800bf26:	33b0      	adds	r3, #176	; 0xb0
 800bf28:	681b      	ldr	r3, [r3, #0]
        phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800bf2a:	9003      	str	r0, [sp, #12]
        RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 800bf2c:	b241      	sxtb	r1, r0
 800bf2e:	6830      	ldr	r0, [r6, #0]
 800bf30:	ae09      	add	r6, sp, #36	; 0x24
 800bf32:	7a1a      	ldrb	r2, [r3, #8]
 800bf34:	7800      	ldrb	r0, [r0, #0]
 800bf36:	9600      	str	r6, [sp, #0]
 800bf38:	685b      	ldr	r3, [r3, #4]
 800bf3a:	f001 fe2a 	bl	800db92 <RegionComputeRxWindowParameters>
        windowTimeout = beaconRxConfig.WindowTimeout;
 800bf3e:	68b6      	ldr	r6, [r6, #8]
 800bf40:	b2b6      	uxth	r6, r6
    rxBeaconSetup.SymbolTimeout = windowTimeout;
 800bf42:	a906      	add	r1, sp, #24
 800bf44:	800e      	strh	r6, [r1, #0]
    RegionRxBeaconSetup( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &rxBeaconSetup, &Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 800bf46:	0026      	movs	r6, r4
 800bf48:	369c      	adds	r6, #156	; 0x9c
 800bf4a:	6833      	ldr	r3, [r6, #0]
    rxBeaconSetup.RxTime = rxTime;
 800bf4c:	604f      	str	r7, [r1, #4]
    RegionRxBeaconSetup( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &rxBeaconSetup, &Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 800bf4e:	1d1a      	adds	r2, r3, #4
 800bf50:	0023      	movs	r3, r4
 800bf52:	33ac      	adds	r3, #172	; 0xac
 800bf54:	681b      	ldr	r3, [r3, #0]
    rxBeaconSetup.Frequency = frequency;
 800bf56:	608d      	str	r5, [r1, #8]
    RegionRxBeaconSetup( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &rxBeaconSetup, &Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 800bf58:	7818      	ldrb	r0, [r3, #0]
 800bf5a:	f001 fea4 	bl	800dca6 <RegionRxBeaconSetup>
    Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Frequency = frequency;
 800bf5e:	3498      	adds	r4, #152	; 0x98
 800bf60:	6823      	ldr	r3, [r4, #0]
    Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Datarate = Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate;
 800bf62:	6832      	ldr	r2, [r6, #0]
    Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Frequency = frequency;
 800bf64:	60dd      	str	r5, [r3, #12]
    Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Datarate = Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate;
 800bf66:	7912      	ldrb	r2, [r2, #4]
 800bf68:	741a      	strb	r2, [r3, #16]
}
 800bf6a:	b00f      	add	sp, #60	; 0x3c
 800bf6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        frequency = CalcDownlinkChannelAndFrequency( 0, Ctx.BeaconCtx.BeaconTime.Seconds + ( CLASSB_BEACON_INTERVAL / 1000 ),
 800bf6e:	6961      	ldr	r1, [r4, #20]
 800bf70:	2201      	movs	r2, #1
 800bf72:	3180      	adds	r1, #128	; 0x80
 800bf74:	f7ff ff84 	bl	800be80 <CalcDownlinkChannelAndFrequency.constprop.0>
 800bf78:	e7b2      	b.n	800bee0 <RxBeaconSetup+0x18>
 800bf7a:	46c0      	nop			; (mov r8, r8)
 800bf7c:	20000b9c 	.word	0x20000b9c

0800bf80 <InitClassB>:
{
 800bf80:	b530      	push	{r4, r5, lr}
    LoRaMacClassBEvents.Value = 0;
 800bf82:	2500      	movs	r5, #0
 800bf84:	4818      	ldr	r0, [pc, #96]	; (800bfe8 <InitClassB+0x68>)
{
 800bf86:	b085      	sub	sp, #20
    memset1( ( uint8_t* ) &NvmCtx, 0, sizeof( LoRaMacClassBNvmCtx_t ) );
 800bf88:	2218      	movs	r2, #24
 800bf8a:	0029      	movs	r1, r5
    LoRaMacClassBEvents.Value = 0;
 800bf8c:	c020      	stmia	r0!, {r5}
    memset1( ( uint8_t* ) &NvmCtx, 0, sizeof( LoRaMacClassBNvmCtx_t ) );
 800bf8e:	f002 ff45 	bl	800ee1c <memset1>
    memset1( ( uint8_t* ) &Ctx.PingSlotCtx, 0, sizeof( PingSlotContext_t ) );
 800bf92:	4c16      	ldr	r4, [pc, #88]	; (800bfec <InitClassB+0x6c>)
 800bf94:	220c      	movs	r2, #12
 800bf96:	0029      	movs	r1, r5
 800bf98:	0020      	movs	r0, r4
 800bf9a:	f002 ff3f 	bl	800ee1c <memset1>
    memset1( ( uint8_t* ) &Ctx.BeaconCtx, 0, sizeof( BeaconContext_t ) );
 800bf9e:	2238      	movs	r2, #56	; 0x38
 800bfa0:	0029      	movs	r1, r5
 800bfa2:	4813      	ldr	r0, [pc, #76]	; (800bff0 <InitClassB+0x70>)
 800bfa4:	f002 ff3a 	bl	800ee1c <memset1>
    Ctx.BeaconCtx.Temperature = 25.0;
 800bfa8:	4b12      	ldr	r3, [pc, #72]	; (800bff4 <InitClassB+0x74>)
 800bfaa:	6123      	str	r3, [r4, #16]
    if( ( callbacks != NULL ) && ( callbacks->GetTemperatureLevel != NULL ) )
 800bfac:	0023      	movs	r3, r4
 800bfae:	3390      	adds	r3, #144	; 0x90
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	42ab      	cmp	r3, r5
 800bfb4:	d003      	beq.n	800bfbe <InitClassB+0x3e>
        beaconCtx->Temperature = callbacks->GetTemperatureLevel( );
 800bfb6:	4798      	blx	r3
 800bfb8:	f7f5 fa76 	bl	80014a8 <__aeabi_ui2f>
 800bfbc:	6120      	str	r0, [r4, #16]
    getPhy.Attribute = PHY_PING_SLOT_CHANNEL_DR;
 800bfbe:	2336      	movs	r3, #54	; 0x36
 800bfc0:	a902      	add	r1, sp, #8
 800bfc2:	700b      	strb	r3, [r1, #0]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800bfc4:	0023      	movs	r3, r4
 800bfc6:	33ac      	adds	r3, #172	; 0xac
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	7818      	ldrb	r0, [r3, #0]
 800bfcc:	f001 fda0 	bl	800db10 <RegionGetPhyParam>
    Ctx.NvmCtx->PingSlotCtx.Datarate = (int8_t)( phyParam.Value );
 800bfd0:	0023      	movs	r3, r4
 800bfd2:	33bc      	adds	r3, #188	; 0xbc
 800bfd4:	681a      	ldr	r2, [r3, #0]
    Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	1da1      	adds	r1, r4, #6
    Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800bfda:	3446      	adds	r4, #70	; 0x46
    Ctx.NvmCtx->PingSlotCtx.Datarate = (int8_t)( phyParam.Value );
 800bfdc:	7210      	strb	r0, [r2, #8]
    Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 800bfde:	87cb      	strh	r3, [r1, #62]	; 0x3e
    Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800bfe0:	7023      	strb	r3, [r4, #0]
    Ctx.NvmCtx->BeaconCtx.BeaconState = BEACON_STATE_ACQUISITION;
 800bfe2:	7513      	strb	r3, [r2, #20]
}
 800bfe4:	b005      	add	sp, #20
 800bfe6:	bd30      	pop	{r4, r5, pc}
 800bfe8:	20000b58 	.word	0x20000b58
 800bfec:	20000b9c 	.word	0x20000b9c
 800bff0:	20000ba8 	.word	0x20000ba8
 800bff4:	41c80000 	.word	0x41c80000

0800bff8 <InitClassBDefaults>:
{
 800bff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    LoRaMacClassBBeaconNvmCtx_t beaconCtx = Ctx.NvmCtx->BeaconCtx;
 800bffa:	4e11      	ldr	r6, [pc, #68]	; (800c040 <InitClassBDefaults+0x48>)
 800bffc:	36bc      	adds	r6, #188	; 0xbc
 800bffe:	6833      	ldr	r3, [r6, #0]
 800c000:	691f      	ldr	r7, [r3, #16]
    LoRaMacClassBPingSlotNvmCtx_t pingSlotCtx = Ctx.NvmCtx->PingSlotCtx;
 800c002:	685a      	ldr	r2, [r3, #4]
    LoRaMacClassBBeaconNvmCtx_t beaconCtx = Ctx.NvmCtx->BeaconCtx;
 800c004:	7b1d      	ldrb	r5, [r3, #12]
    LoRaMacClassBPingSlotNvmCtx_t pingSlotCtx = Ctx.NvmCtx->PingSlotCtx;
 800c006:	781c      	ldrb	r4, [r3, #0]
 800c008:	7a1b      	ldrb	r3, [r3, #8]
 800c00a:	9200      	str	r2, [sp, #0]
 800c00c:	b25b      	sxtb	r3, r3
 800c00e:	9301      	str	r3, [sp, #4]
    InitClassB( );
 800c010:	f7ff ffb6 	bl	800bf80 <InitClassB>
    Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq = beaconCtx.Ctrl.CustomFreq;
 800c014:	2101      	movs	r1, #1
    Ctx.NvmCtx->BeaconCtx.Frequency = beaconCtx.Frequency;
 800c016:	6833      	ldr	r3, [r6, #0]
    LoRaMacClassBBeaconNvmCtx_t beaconCtx = Ctx.NvmCtx->BeaconCtx;
 800c018:	07ed      	lsls	r5, r5, #31
    Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq = beaconCtx.Ctrl.CustomFreq;
 800c01a:	7b1a      	ldrb	r2, [r3, #12]
    LoRaMacClassBPingSlotNvmCtx_t pingSlotCtx = Ctx.NvmCtx->PingSlotCtx;
 800c01c:	07a4      	lsls	r4, r4, #30
    Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq = beaconCtx.Ctrl.CustomFreq;
 800c01e:	438a      	bics	r2, r1
    LoRaMacClassBPingSlotNvmCtx_t pingSlotCtx = Ctx.NvmCtx->PingSlotCtx;
 800c020:	0fe4      	lsrs	r4, r4, #31
    LoRaMacClassBBeaconNvmCtx_t beaconCtx = Ctx.NvmCtx->BeaconCtx;
 800c022:	0fed      	lsrs	r5, r5, #31
    Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq = beaconCtx.Ctrl.CustomFreq;
 800c024:	4315      	orrs	r5, r2
    Ctx.NvmCtx->PingSlotCtx.Ctrl.CustomFreq = pingSlotCtx.Ctrl.CustomFreq;
 800c026:	0062      	lsls	r2, r4, #1
 800c028:	781c      	ldrb	r4, [r3, #0]
 800c02a:	1849      	adds	r1, r1, r1
 800c02c:	438c      	bics	r4, r1
 800c02e:	4314      	orrs	r4, r2
    Ctx.NvmCtx->PingSlotCtx.Frequency = pingSlotCtx.Frequency;
 800c030:	9a00      	ldr	r2, [sp, #0]
    Ctx.NvmCtx->BeaconCtx.Frequency = beaconCtx.Frequency;
 800c032:	611f      	str	r7, [r3, #16]
    Ctx.NvmCtx->PingSlotCtx.Frequency = pingSlotCtx.Frequency;
 800c034:	605a      	str	r2, [r3, #4]
    Ctx.NvmCtx->PingSlotCtx.Datarate = pingSlotCtx.Datarate;
 800c036:	9a01      	ldr	r2, [sp, #4]
    Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq = beaconCtx.Ctrl.CustomFreq;
 800c038:	731d      	strb	r5, [r3, #12]
    Ctx.NvmCtx->PingSlotCtx.Ctrl.CustomFreq = pingSlotCtx.Ctrl.CustomFreq;
 800c03a:	701c      	strb	r4, [r3, #0]
    Ctx.NvmCtx->PingSlotCtx.Datarate = pingSlotCtx.Datarate;
 800c03c:	721a      	strb	r2, [r3, #8]
}
 800c03e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c040:	20000b9c 	.word	0x20000b9c

0800c044 <LoRaMacClassBInit>:
{
 800c044:	b573      	push	{r0, r1, r4, r5, r6, lr}
    Ctx.LoRaMacClassBCallbacks = *callbacks;
 800c046:	4c18      	ldr	r4, [pc, #96]	; (800c0a8 <LoRaMacClassBInit+0x64>)
 800c048:	0023      	movs	r3, r4
 800c04a:	3390      	adds	r3, #144	; 0x90
 800c04c:	c960      	ldmia	r1!, {r5, r6}
 800c04e:	c360      	stmia	r3!, {r5, r6}
    Ctx.LoRaMacClassBParams = *classBParams;
 800c050:	0021      	movs	r1, r4
 800c052:	3198      	adds	r1, #152	; 0x98
 800c054:	000b      	movs	r3, r1
 800c056:	c862      	ldmia	r0!, {r1, r5, r6}
 800c058:	c362      	stmia	r3!, {r1, r5, r6}
 800c05a:	c862      	ldmia	r0!, {r1, r5, r6}
 800c05c:	c362      	stmia	r3!, {r1, r5, r6}
 800c05e:	c822      	ldmia	r0!, {r1, r5}
 800c060:	c322      	stmia	r3!, {r1, r5}
    Ctx.NvmCtx = &NvmCtx;
 800c062:	0021      	movs	r1, r4
    TimerInit( &Ctx.BeaconTimer, LoRaMacClassBBeaconTimerEvent );
 800c064:	2501      	movs	r5, #1
    Ctx.LoRaMacClassBNvmEvent = classBNvmCtxChanged;
 800c066:	34b8      	adds	r4, #184	; 0xb8
 800c068:	6022      	str	r2, [r4, #0]
    TimerInit( &Ctx.BeaconTimer, LoRaMacClassBBeaconTimerEvent );
 800c06a:	2400      	movs	r4, #0
    Ctx.NvmCtx = &NvmCtx;
 800c06c:	4b0f      	ldr	r3, [pc, #60]	; (800c0ac <LoRaMacClassBInit+0x68>)
    TimerInit( &Ctx.BeaconTimer, LoRaMacClassBBeaconTimerEvent );
 800c06e:	426d      	negs	r5, r5
    Ctx.NvmCtx = &NvmCtx;
 800c070:	31bc      	adds	r1, #188	; 0xbc
 800c072:	3304      	adds	r3, #4
 800c074:	600b      	str	r3, [r1, #0]
    TimerInit( &Ctx.BeaconTimer, LoRaMacClassBBeaconTimerEvent );
 800c076:	0022      	movs	r2, r4
 800c078:	0029      	movs	r1, r5
 800c07a:	4b0d      	ldr	r3, [pc, #52]	; (800c0b0 <LoRaMacClassBInit+0x6c>)
 800c07c:	9400      	str	r4, [sp, #0]
 800c07e:	480d      	ldr	r0, [pc, #52]	; (800c0b4 <LoRaMacClassBInit+0x70>)
 800c080:	f004 fd2e 	bl	8010ae0 <UTIL_TIMER_Create>
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
 800c084:	0029      	movs	r1, r5
 800c086:	0022      	movs	r2, r4
 800c088:	4b0b      	ldr	r3, [pc, #44]	; (800c0b8 <LoRaMacClassBInit+0x74>)
 800c08a:	9400      	str	r4, [sp, #0]
 800c08c:	480b      	ldr	r0, [pc, #44]	; (800c0bc <LoRaMacClassBInit+0x78>)
 800c08e:	f004 fd27 	bl	8010ae0 <UTIL_TIMER_Create>
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );
 800c092:	0029      	movs	r1, r5
 800c094:	0022      	movs	r2, r4
 800c096:	4b0a      	ldr	r3, [pc, #40]	; (800c0c0 <LoRaMacClassBInit+0x7c>)
 800c098:	9400      	str	r4, [sp, #0]
 800c09a:	480a      	ldr	r0, [pc, #40]	; (800c0c4 <LoRaMacClassBInit+0x80>)
 800c09c:	f004 fd20 	bl	8010ae0 <UTIL_TIMER_Create>
    InitClassB( );
 800c0a0:	f7ff ff6e 	bl	800bf80 <InitClassB>
}
 800c0a4:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 800c0a6:	46c0      	nop			; (mov r8, r8)
 800c0a8:	20000b9c 	.word	0x20000b9c
 800c0ac:	20000b58 	.word	0x20000b58
 800c0b0:	0800bcc5 	.word	0x0800bcc5
 800c0b4:	20000be4 	.word	0x20000be4
 800c0b8:	0800bc55 	.word	0x0800bc55
 800c0bc:	20000bfc 	.word	0x20000bfc
 800c0c0:	0800bc79 	.word	0x0800bc79
 800c0c4:	20000c14 	.word	0x20000c14

0800c0c8 <LoRaMacClassBRestoreNvmCtx>:
{
 800c0c8:	0001      	movs	r1, r0
        return false;
 800c0ca:	2000      	movs	r0, #0
{
 800c0cc:	b510      	push	{r4, lr}
    if( classBNvmCtx != NULL )
 800c0ce:	4281      	cmp	r1, r0
 800c0d0:	d005      	beq.n	800c0de <LoRaMacClassBRestoreNvmCtx+0x16>
        memcpy1( ( uint8_t* ) &NvmCtx, ( uint8_t* ) classBNvmCtx, sizeof( NvmCtx ) );
 800c0d2:	4803      	ldr	r0, [pc, #12]	; (800c0e0 <LoRaMacClassBRestoreNvmCtx+0x18>)
 800c0d4:	2218      	movs	r2, #24
 800c0d6:	3004      	adds	r0, #4
 800c0d8:	f002 fe8a 	bl	800edf0 <memcpy1>
        return true;
 800c0dc:	2001      	movs	r0, #1
}
 800c0de:	bd10      	pop	{r4, pc}
 800c0e0:	20000b58 	.word	0x20000b58

0800c0e4 <LoRaMacClassBGetNvmCtx>:
    *classBNvmCtxSize = sizeof( NvmCtx );
 800c0e4:	2318      	movs	r3, #24
 800c0e6:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
 800c0e8:	4801      	ldr	r0, [pc, #4]	; (800c0f0 <LoRaMacClassBGetNvmCtx+0xc>)
}
 800c0ea:	3004      	adds	r0, #4
 800c0ec:	4770      	bx	lr
 800c0ee:	46c0      	nop			; (mov r8, r8)
 800c0f0:	20000b58 	.word	0x20000b58

0800c0f4 <LoRaMacClassBSetPingSlotState>:
    Ctx.PingSlotState = pingSlotState;
 800c0f4:	4b01      	ldr	r3, [pc, #4]	; (800c0fc <LoRaMacClassBSetPingSlotState+0x8>)
 800c0f6:	3345      	adds	r3, #69	; 0x45
 800c0f8:	7018      	strb	r0, [r3, #0]
}
 800c0fa:	4770      	bx	lr
 800c0fc:	20000b9c 	.word	0x20000b9c

0800c100 <LoRaMacClassBSetMulticastSlotState>:
    Ctx.MulticastSlotState = multicastSlotState;
 800c100:	4b01      	ldr	r3, [pc, #4]	; (800c108 <LoRaMacClassBSetMulticastSlotState+0x8>)
 800c102:	3346      	adds	r3, #70	; 0x46
 800c104:	7018      	strb	r0, [r3, #0]
}
 800c106:	4770      	bx	lr
 800c108:	20000b9c 	.word	0x20000b9c

0800c10c <LoRaMacClassBRxBeacon>:
    uint16_t crc0 = 0;
    uint16_t crc1 = 0;
    uint16_t beaconCrc0 = 0;
    uint16_t beaconCrc1 = 0;

    getPhy.Attribute = PHY_BEACON_FORMAT;
 800c10c:	2331      	movs	r3, #49	; 0x31
{
 800c10e:	b5f0      	push	{r4, r5, r6, r7, lr}
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800c110:	4c6e      	ldr	r4, [pc, #440]	; (800c2cc <LoRaMacClassBRxBeacon+0x1c0>)
{
 800c112:	b091      	sub	sp, #68	; 0x44
    getPhy.Attribute = PHY_BEACON_FORMAT;
 800c114:	ae0a      	add	r6, sp, #40	; 0x28
 800c116:	7033      	strb	r3, [r6, #0]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800c118:	0023      	movs	r3, r4
 800c11a:	33ac      	adds	r3, #172	; 0xac
 800c11c:	681b      	ldr	r3, [r3, #0]
{
 800c11e:	9107      	str	r1, [sp, #28]
 800c120:	0005      	movs	r5, r0
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800c122:	0031      	movs	r1, r6
 800c124:	7818      	ldrb	r0, [r3, #0]
 800c126:	f001 fcf3 	bl	800db10 <RegionGetPhyParam>

    // Verify if we are in the state where we expect a beacon
    if( ( Ctx.BeaconState == BEACON_STATE_RX ) || ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) )
 800c12a:	0023      	movs	r3, r4
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800c12c:	9009      	str	r0, [sp, #36]	; 0x24
    if( ( Ctx.BeaconState == BEACON_STATE_RX ) || ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) )
 800c12e:	3344      	adds	r3, #68	; 0x44
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	2b09      	cmp	r3, #9
 800c134:	d004      	beq.n	800c140 <LoRaMacClassBRxBeacon+0x34>
 800c136:	7b23      	ldrb	r3, [r4, #12]
    bool beaconProcessed = false;
 800c138:	2700      	movs	r7, #0
    if( ( Ctx.BeaconState == BEACON_STATE_RX ) || ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) )
 800c13a:	06db      	lsls	r3, r3, #27
 800c13c:	d400      	bmi.n	800c140 <LoRaMacClassBRxBeacon+0x34>
 800c13e:	e0c1      	b.n	800c2c4 <LoRaMacClassBRxBeacon+0x1b8>
    {
        if( size == phyParam.BeaconFormat.BeaconSize )
 800c140:	ab09      	add	r3, sp, #36	; 0x24
 800c142:	781a      	ldrb	r2, [r3, #0]
 800c144:	9907      	ldr	r1, [sp, #28]
 800c146:	428a      	cmp	r2, r1
 800c148:	d000      	beq.n	800c14c <LoRaMacClassBRxBeacon+0x40>
 800c14a:	e0ac      	b.n	800c2a6 <LoRaMacClassBRxBeacon+0x19a>
            // Field: | RFU1 | Time | CRC1 | GwSpecific | RFU2 | CRC2 |
            //
            // Field RFU1 and RFU2 have variable sizes. It depends on the region specific implementation

            // Read CRC1 field from the frame
            beaconCrc0 = ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4] ) & 0x00FF;
 800c14c:	785f      	ldrb	r7, [r3, #1]
            beaconCrc0 |= ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4 + 1] << 8 ) & 0xFF00;
            crc0 = BeaconCrc( payload, phyParam.BeaconFormat.Rfu1Size + 4 );
 800c14e:	0028      	movs	r0, r5
 800c150:	1d39      	adds	r1, r7, #4
 800c152:	f7ff fe75 	bl	800be40 <BeaconCrc>
            beaconCrc0 |= ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4 + 1] << 8 ) & 0xFF00;
 800c156:	19e9      	adds	r1, r5, r7
 800c158:	794a      	ldrb	r2, [r1, #5]
 800c15a:	790b      	ldrb	r3, [r1, #4]
 800c15c:	0212      	lsls	r2, r2, #8

            // Validate the first crc of the beacon frame
            if( crc0 == beaconCrc0 )
 800c15e:	4313      	orrs	r3, r2
    bool beaconProcessed = false;
 800c160:	2200      	movs	r2, #0
 800c162:	9206      	str	r2, [sp, #24]
            if( crc0 == beaconCrc0 )
 800c164:	4283      	cmp	r3, r0
 800c166:	d119      	bne.n	800c19c <LoRaMacClassBRxBeacon+0x90>
            {
                // Read Time field from the frame
                Ctx.BeaconCtx.BeaconTime.Seconds  = ( ( uint32_t )payload[phyParam.BeaconFormat.Rfu1Size] ) & 0x000000FF;
 800c168:	5dea      	ldrb	r2, [r5, r7]
 800c16a:	6162      	str	r2, [r4, #20]
                Ctx.BeaconCtx.BeaconTime.Seconds |= ( ( uint32_t )( payload[phyParam.BeaconFormat.Rfu1Size + 1] << 8 ) ) & 0x0000FF00;
 800c16c:	784b      	ldrb	r3, [r1, #1]
 800c16e:	021b      	lsls	r3, r3, #8
 800c170:	431a      	orrs	r2, r3
 800c172:	6162      	str	r2, [r4, #20]
                Ctx.BeaconCtx.BeaconTime.Seconds |= ( ( uint32_t )( payload[phyParam.BeaconFormat.Rfu1Size + 2] << 16 ) ) & 0x00FF0000;
 800c174:	788b      	ldrb	r3, [r1, #2]
 800c176:	041b      	lsls	r3, r3, #16
 800c178:	4313      	orrs	r3, r2
 800c17a:	6163      	str	r3, [r4, #20]
                Ctx.BeaconCtx.BeaconTime.Seconds |= ( ( uint32_t )( payload[phyParam.BeaconFormat.Rfu1Size + 3] << 24 ) ) & 0xFF000000;
 800c17c:	78ca      	ldrb	r2, [r1, #3]
 800c17e:	0612      	lsls	r2, r2, #24
 800c180:	4313      	orrs	r3, r2
 800c182:	6163      	str	r3, [r4, #20]
                Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
 800c184:	2300      	movs	r3, #0
 800c186:	8323      	strh	r3, [r4, #24]
                Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Time = Ctx.BeaconCtx.BeaconTime;
 800c188:	0023      	movs	r3, r4
 800c18a:	0022      	movs	r2, r4
 800c18c:	3398      	adds	r3, #152	; 0x98
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	3214      	adds	r2, #20
 800c192:	3304      	adds	r3, #4
 800c194:	ca03      	ldmia	r2!, {r0, r1}
 800c196:	c303      	stmia	r3!, {r0, r1}
                beaconProcessed = true;
 800c198:	2301      	movs	r3, #1
 800c19a:	9306      	str	r3, [sp, #24]
            }

            // Read CRC2 field from the frame
            beaconCrc1 = ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2 + 7 + phyParam.BeaconFormat.Rfu2Size] ) & 0x00FF;
 800c19c:	ab09      	add	r3, sp, #36	; 0x24
 800c19e:	7899      	ldrb	r1, [r3, #2]
 800c1a0:	003b      	movs	r3, r7
 800c1a2:	330d      	adds	r3, #13
 800c1a4:	185b      	adds	r3, r3, r1
 800c1a6:	9304      	str	r3, [sp, #16]
            beaconCrc1 |= ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2 + 7 + phyParam.BeaconFormat.Rfu2Size + 1] << 8 ) & 0xFF00;
            crc1 = BeaconCrc( &payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2], 7 + phyParam.BeaconFormat.Rfu2Size );
 800c1a8:	1dbb      	adds	r3, r7, #6
 800c1aa:	18eb      	adds	r3, r5, r3
 800c1ac:	0018      	movs	r0, r3
 800c1ae:	3107      	adds	r1, #7
 800c1b0:	9305      	str	r3, [sp, #20]
 800c1b2:	f7ff fe45 	bl	800be40 <BeaconCrc>
            beaconCrc1 |= ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2 + 7 + phyParam.BeaconFormat.Rfu2Size + 1] << 8 ) & 0xFF00;
 800c1b6:	9b04      	ldr	r3, [sp, #16]
 800c1b8:	18eb      	adds	r3, r5, r3
 800c1ba:	785a      	ldrb	r2, [r3, #1]
 800c1bc:	9b04      	ldr	r3, [sp, #16]
 800c1be:	0212      	lsls	r2, r2, #8
 800c1c0:	5ceb      	ldrb	r3, [r5, r3]

            // Validate the second crc of the beacon frame
            if( crc1 == beaconCrc1 )
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	4283      	cmp	r3, r0
 800c1c6:	d10b      	bne.n	800c1e0 <LoRaMacClassBRxBeacon+0xd4>
            {
                // Read GwSpecific field from the frame
                // The GwSpecific field contains 1 byte InfoDesc and 6 bytes Info
                Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.InfoDesc = payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2];
 800c1c8:	4b40      	ldr	r3, [pc, #256]	; (800c2cc <LoRaMacClassBRxBeacon+0x1c0>)
                memcpy1( Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.Info, &payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2 + 1], 6 );
 800c1ca:	1df9      	adds	r1, r7, #7
                Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.InfoDesc = payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2];
 800c1cc:	3398      	adds	r3, #152	; 0x98
 800c1ce:	6818      	ldr	r0, [r3, #0]
 800c1d0:	9b05      	ldr	r3, [sp, #20]
                memcpy1( Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.Info, &payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2 + 1], 6 );
 800c1d2:	2206      	movs	r2, #6
                Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.InfoDesc = payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2];
 800c1d4:	781b      	ldrb	r3, [r3, #0]
                memcpy1( Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.Info, &payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2 + 1], 6 );
 800c1d6:	1869      	adds	r1, r5, r1
                Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.InfoDesc = payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2];
 800c1d8:	7543      	strb	r3, [r0, #21]
                memcpy1( Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.Info, &payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2 + 1], 6 );
 800c1da:	3016      	adds	r0, #22
 800c1dc:	f002 fe08 	bl	800edf0 <memcpy1>
            }

            // Reset beacon variables, if one of the crc is valid
            if( beaconProcessed == true )
 800c1e0:	9b06      	ldr	r3, [sp, #24]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d05f      	beq.n	800c2a6 <LoRaMacClassBRxBeacon+0x19a>
            {
                uint32_t spreadingFactor = 0;
                uint32_t bandwidth = 0;

                getPhy.Attribute = PHY_BEACON_CHANNEL_DR;
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800c1e6:	0027      	movs	r7, r4
                getPhy.Attribute = PHY_BEACON_CHANNEL_DR;
 800c1e8:	2332      	movs	r3, #50	; 0x32
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800c1ea:	37ac      	adds	r7, #172	; 0xac
                getPhy.Attribute = PHY_BEACON_CHANNEL_DR;
 800c1ec:	7033      	strb	r3, [r6, #0]
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	0031      	movs	r1, r6
 800c1f2:	7818      	ldrb	r0, [r3, #0]
 800c1f4:	f001 fc8c 	bl	800db10 <RegionGetPhyParam>

                getPhy.Attribute = PHY_SF_FROM_DR;
 800c1f8:	2338      	movs	r3, #56	; 0x38
 800c1fa:	7033      	strb	r3, [r6, #0]
                getPhy.Datarate = phyParam.Value;
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800c1fc:	683b      	ldr	r3, [r7, #0]
                getPhy.Datarate = phyParam.Value;
 800c1fe:	7070      	strb	r0, [r6, #1]
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800c200:	0031      	movs	r1, r6
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800c202:	9009      	str	r0, [sp, #36]	; 0x24
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800c204:	7818      	ldrb	r0, [r3, #0]
 800c206:	f001 fc83 	bl	800db10 <RegionGetPhyParam>
                spreadingFactor = phyParam.Value;

                getPhy.Attribute = PHY_BW_FROM_DR;
 800c20a:	2339      	movs	r3, #57	; 0x39
 800c20c:	7033      	strb	r3, [r6, #0]
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800c20e:	683b      	ldr	r3, [r7, #0]
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800c210:	0005      	movs	r5, r0
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800c212:	0031      	movs	r1, r6
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800c214:	9009      	str	r0, [sp, #36]	; 0x24
                bandwidth = phyParam.Value;

                TimerTime_t time = Radio.TimeOnAir( MODEM_LORA, bandwidth, spreadingFactor, 1, 10, true, size, false );
 800c216:	2600      	movs	r6, #0
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800c218:	7818      	ldrb	r0, [r3, #0]
 800c21a:	f001 fc79 	bl	800db10 <RegionGetPhyParam>
                TimerTime_t time = Radio.TimeOnAir( MODEM_LORA, bandwidth, spreadingFactor, 1, 10, true, size, false );
 800c21e:	466b      	mov	r3, sp
 800c220:	9603      	str	r6, [sp, #12]
 800c222:	7f1b      	ldrb	r3, [r3, #28]
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800c224:	0001      	movs	r1, r0
 800c226:	9009      	str	r0, [sp, #36]	; 0x24
                TimerTime_t time = Radio.TimeOnAir( MODEM_LORA, bandwidth, spreadingFactor, 1, 10, true, size, false );
 800c228:	9302      	str	r3, [sp, #8]
 800c22a:	2001      	movs	r0, #1
 800c22c:	230a      	movs	r3, #10
 800c22e:	4f28      	ldr	r7, [pc, #160]	; (800c2d0 <LoRaMacClassBRxBeacon+0x1c4>)
 800c230:	002a      	movs	r2, r5
 800c232:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800c234:	9300      	str	r3, [sp, #0]
 800c236:	9001      	str	r0, [sp, #4]
 800c238:	0003      	movs	r3, r0
 800c23a:	9504      	str	r5, [sp, #16]
 800c23c:	47a8      	blx	r5
                SysTime_t timeOnAir;
                timeOnAir.Seconds = time / 1000;
 800c23e:	21fa      	movs	r1, #250	; 0xfa
 800c240:	0089      	lsls	r1, r1, #2
                TimerTime_t time = Radio.TimeOnAir( MODEM_LORA, bandwidth, spreadingFactor, 1, 10, true, size, false );
 800c242:	0005      	movs	r5, r0
                timeOnAir.Seconds = time / 1000;
 800c244:	f7f3 ff90 	bl	8000168 <__udivsi3>
 800c248:	0003      	movs	r3, r0
                timeOnAir.SubSeconds = time - timeOnAir.Seconds * 1000;
 800c24a:	20fa      	movs	r0, #250	; 0xfa

                Ctx.BeaconCtx.LastBeaconRx = Ctx.BeaconCtx.BeaconTime;
 800c24c:	0022      	movs	r2, r4
 800c24e:	0021      	movs	r1, r4
                timeOnAir.SubSeconds = time - timeOnAir.Seconds * 1000;
 800c250:	0080      	lsls	r0, r0, #2
 800c252:	4358      	muls	r0, r3
 800c254:	af0c      	add	r7, sp, #48	; 0x30
 800c256:	1a2d      	subs	r5, r5, r0
 800c258:	80bd      	strh	r5, [r7, #4]
                Ctx.BeaconCtx.LastBeaconRx = Ctx.BeaconCtx.BeaconTime;
 800c25a:	321c      	adds	r2, #28
 800c25c:	3114      	adds	r1, #20
 800c25e:	c921      	ldmia	r1!, {r0, r5}
 800c260:	c221      	stmia	r2!, {r0, r5}
                Ctx.BeaconCtx.LastBeaconRx.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800c262:	491c      	ldr	r1, [pc, #112]	; (800c2d4 <LoRaMacClassBRxBeacon+0x1c8>)
 800c264:	69e2      	ldr	r2, [r4, #28]

                // Update system time.
                SysTimeSet( SysTimeAdd( Ctx.BeaconCtx.LastBeaconRx, timeOnAir ) );
 800c266:	a80e      	add	r0, sp, #56	; 0x38
                Ctx.BeaconCtx.LastBeaconRx.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800c268:	1851      	adds	r1, r2, r1
                SysTimeSet( SysTimeAdd( Ctx.BeaconCtx.LastBeaconRx, timeOnAir ) );
 800c26a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
                Ctx.BeaconCtx.LastBeaconRx.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800c26c:	61e1      	str	r1, [r4, #28]
                SysTimeSet( SysTimeAdd( Ctx.BeaconCtx.LastBeaconRx, timeOnAir ) );
 800c26e:	9200      	str	r2, [sp, #0]
 800c270:	6a22      	ldr	r2, [r4, #32]
 800c272:	f004 fb41 	bl	80108f8 <SysTimeAdd>
 800c276:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c278:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c27a:	f004 fb6d 	bl	8010958 <SysTimeSet>

                Ctx.BeaconCtx.Ctrl.BeaconAcquired = 1;
                Ctx.BeaconCtx.Ctrl.BeaconMode = 1;
 800c27e:	2303      	movs	r3, #3
 800c280:	7b22      	ldrb	r2, [r4, #12]
                ResetWindowTimeout( );
                Ctx.BeaconState = BEACON_STATE_LOCKED;
                Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
                LoRaMacClassBBeaconTimerEvent( NULL );
 800c282:	0030      	movs	r0, r6
                Ctx.BeaconCtx.Ctrl.BeaconMode = 1;
 800c284:	439a      	bics	r2, r3
 800c286:	4313      	orrs	r3, r2
 800c288:	7323      	strb	r3, [r4, #12]
    Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 800c28a:	2308      	movs	r3, #8
                Ctx.BeaconState = BEACON_STATE_LOCKED;
 800c28c:	0022      	movs	r2, r4
    Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 800c28e:	8623      	strh	r3, [r4, #48]	; 0x30
    Ctx.PingSlotCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 800c290:	80e3      	strh	r3, [r4, #6]
    Ctx.BeaconCtx.BeaconWindowMovement  = CLASSB_WINDOW_MOVE_DEFAULT;
 800c292:	3b06      	subs	r3, #6
 800c294:	6363      	str	r3, [r4, #52]	; 0x34
                Ctx.BeaconState = BEACON_STATE_LOCKED;
 800c296:	3244      	adds	r2, #68	; 0x44
 800c298:	3303      	adds	r3, #3
                Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
 800c29a:	34bc      	adds	r4, #188	; 0xbc
                Ctx.BeaconState = BEACON_STATE_LOCKED;
 800c29c:	7013      	strb	r3, [r2, #0]
                Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
 800c29e:	6822      	ldr	r2, [r4, #0]
 800c2a0:	7513      	strb	r3, [r2, #20]
                LoRaMacClassBBeaconTimerEvent( NULL );
 800c2a2:	f7ff fd0f 	bl	800bcc4 <LoRaMacClassBBeaconTimerEvent>
            }
        }

        if( Ctx.BeaconState == BEACON_STATE_RX )
 800c2a6:	4b09      	ldr	r3, [pc, #36]	; (800c2cc <LoRaMacClassBRxBeacon+0x1c0>)
        // If it receives a frame which is
        // 1. not a beacon or
        // 2. a beacon with a crc fail
        // the MAC shall ignore the frame completely. Thus, the function must always return true, even if no
        // valid beacon has been received.
        beaconProcessed = true;
 800c2a8:	2701      	movs	r7, #1
        if( Ctx.BeaconState == BEACON_STATE_RX )
 800c2aa:	0019      	movs	r1, r3
 800c2ac:	3144      	adds	r1, #68	; 0x44
 800c2ae:	780a      	ldrb	r2, [r1, #0]
 800c2b0:	2a09      	cmp	r2, #9
 800c2b2:	d107      	bne.n	800c2c4 <LoRaMacClassBRxBeacon+0x1b8>
            Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
 800c2b4:	33bc      	adds	r3, #188	; 0xbc
 800c2b6:	681b      	ldr	r3, [r3, #0]
            Ctx.BeaconState = BEACON_STATE_TIMEOUT;
 800c2b8:	3a07      	subs	r2, #7
 800c2ba:	700a      	strb	r2, [r1, #0]
            LoRaMacClassBBeaconTimerEvent( NULL );
 800c2bc:	2000      	movs	r0, #0
            Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
 800c2be:	751a      	strb	r2, [r3, #20]
            LoRaMacClassBBeaconTimerEvent( NULL );
 800c2c0:	f7ff fd00 	bl	800bcc4 <LoRaMacClassBBeaconTimerEvent>
    }
    return beaconProcessed;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800c2c4:	0038      	movs	r0, r7
 800c2c6:	b011      	add	sp, #68	; 0x44
 800c2c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2ca:	46c0      	nop			; (mov r8, r8)
 800c2cc:	20000b9c 	.word	0x20000b9c
 800c2d0:	080117e0 	.word	0x080117e0
 800c2d4:	12d53d80 	.word	0x12d53d80

0800c2d8 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) ||
 800c2d8:	4b05      	ldr	r3, [pc, #20]	; (800c2f0 <LoRaMacClassBIsBeaconExpected+0x18>)
        ( Ctx.BeaconState == BEACON_STATE_RX ) )
    {
        return true;
 800c2da:	2001      	movs	r0, #1
    if( ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) ||
 800c2dc:	7b1a      	ldrb	r2, [r3, #12]
 800c2de:	06d2      	lsls	r2, r2, #27
 800c2e0:	d405      	bmi.n	800c2ee <LoRaMacClassBIsBeaconExpected+0x16>
        ( Ctx.BeaconState == BEACON_STATE_RX ) )
 800c2e2:	3344      	adds	r3, #68	; 0x44
    if( ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) ||
 800c2e4:	7818      	ldrb	r0, [r3, #0]
 800c2e6:	3809      	subs	r0, #9
 800c2e8:	4243      	negs	r3, r0
 800c2ea:	4158      	adcs	r0, r3
 800c2ec:	b2c0      	uxtb	r0, r0
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800c2ee:	4770      	bx	lr
 800c2f0:	20000b9c 	.word	0x20000b9c

0800c2f4 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.PingSlotState == PINGSLOT_STATE_RX )
 800c2f4:	4b03      	ldr	r3, [pc, #12]	; (800c304 <LoRaMacClassBIsPingExpected+0x10>)
 800c2f6:	3345      	adds	r3, #69	; 0x45
 800c2f8:	7818      	ldrb	r0, [r3, #0]
 800c2fa:	3803      	subs	r0, #3
 800c2fc:	4243      	negs	r3, r0
 800c2fe:	4158      	adcs	r0, r3
 800c300:	b2c0      	uxtb	r0, r0
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800c302:	4770      	bx	lr
 800c304:	20000b9c 	.word	0x20000b9c

0800c308 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.MulticastSlotState == PINGSLOT_STATE_RX )
 800c308:	4b03      	ldr	r3, [pc, #12]	; (800c318 <LoRaMacClassBIsMulticastExpected+0x10>)
 800c30a:	3346      	adds	r3, #70	; 0x46
 800c30c:	7818      	ldrb	r0, [r3, #0]
 800c30e:	3803      	subs	r0, #3
 800c310:	4243      	negs	r3, r0
 800c312:	4158      	adcs	r0, r3
 800c314:	b2c0      	uxtb	r0, r0
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800c316:	4770      	bx	lr
 800c318:	20000b9c 	.word	0x20000b9c

0800c31c <LoRaMacClassBIsAcquisitionPending>:

bool LoRaMacClassBIsAcquisitionPending( void )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 )
 800c31c:	4b02      	ldr	r3, [pc, #8]	; (800c328 <LoRaMacClassBIsAcquisitionPending+0xc>)
 800c31e:	7b18      	ldrb	r0, [r3, #12]
 800c320:	06c0      	lsls	r0, r0, #27
 800c322:	0fc0      	lsrs	r0, r0, #31
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800c324:	4770      	bx	lr
 800c326:	46c0      	nop			; (mov r8, r8)
 800c328:	20000b9c 	.word	0x20000b9c

0800c32c <LoRaMacClassBSetBeaconState>:
{
 800c32c:	b510      	push	{r4, lr}
 800c32e:	4c10      	ldr	r4, [pc, #64]	; (800c370 <LoRaMacClassBSetBeaconState+0x44>)
    if( beaconState == BEACON_STATE_ACQUISITION )
 800c330:	2800      	cmp	r0, #0
 800c332:	d115      	bne.n	800c360 <LoRaMacClassBSetBeaconState+0x34>
        if( ( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 ) &&
 800c334:	7b23      	ldrb	r3, [r4, #12]
 800c336:	075b      	lsls	r3, r3, #29
 800c338:	d50e      	bpl.n	800c358 <LoRaMacClassBSetBeaconState+0x2c>
            ( LoRaMacClassBIsAcquisitionPending( ) == false ) )
 800c33a:	f7ff ffef 	bl	800c31c <LoRaMacClassBIsAcquisitionPending>
        if( ( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 ) &&
 800c33e:	2800      	cmp	r0, #0
 800c340:	d10a      	bne.n	800c358 <LoRaMacClassBSetBeaconState+0x2c>
            Ctx.BeaconState = BEACON_STATE_ACQUISITION_BY_TIME;
 800c342:	0023      	movs	r3, r4
 800c344:	2201      	movs	r2, #1
 800c346:	3344      	adds	r3, #68	; 0x44
           Ctx.BeaconState = beaconState;
 800c348:	701a      	strb	r2, [r3, #0]
    Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
 800c34a:	0023      	movs	r3, r4
 800c34c:	3444      	adds	r4, #68	; 0x44
 800c34e:	33bc      	adds	r3, #188	; 0xbc
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	7822      	ldrb	r2, [r4, #0]
 800c354:	751a      	strb	r2, [r3, #20]
}
 800c356:	bd10      	pop	{r4, pc}
           Ctx.BeaconState = beaconState;
 800c358:	0023      	movs	r3, r4
 800c35a:	2200      	movs	r2, #0
 800c35c:	3344      	adds	r3, #68	; 0x44
 800c35e:	e7f3      	b.n	800c348 <LoRaMacClassBSetBeaconState+0x1c>
        if( ( Ctx.BeaconState != BEACON_STATE_ACQUISITION ) &&
 800c360:	0023      	movs	r3, r4
 800c362:	3344      	adds	r3, #68	; 0x44
 800c364:	781a      	ldrb	r2, [r3, #0]
 800c366:	2a01      	cmp	r2, #1
 800c368:	d9ef      	bls.n	800c34a <LoRaMacClassBSetBeaconState+0x1e>
            Ctx.BeaconState = beaconState;
 800c36a:	7018      	strb	r0, [r3, #0]
 800c36c:	e7ed      	b.n	800c34a <LoRaMacClassBSetBeaconState+0x1e>
 800c36e:	46c0      	nop			; (mov r8, r8)
 800c370:	20000b9c 	.word	0x20000b9c

0800c374 <LoRaMacClassBIsAcquisitionInProgress>:
{
 800c374:	b510      	push	{r4, lr}
    if( Ctx.BeaconState == BEACON_STATE_ACQUISITION_BY_TIME )
 800c376:	4b04      	ldr	r3, [pc, #16]	; (800c388 <LoRaMacClassBIsAcquisitionInProgress+0x14>)
 800c378:	3344      	adds	r3, #68	; 0x44
 800c37a:	781b      	ldrb	r3, [r3, #0]
        return true;
 800c37c:	0018      	movs	r0, r3
    if( Ctx.BeaconState == BEACON_STATE_ACQUISITION_BY_TIME )
 800c37e:	2b01      	cmp	r3, #1
 800c380:	d001      	beq.n	800c386 <LoRaMacClassBIsAcquisitionInProgress+0x12>
    if( LoRaMacClassBIsAcquisitionPending( ) == true )
 800c382:	f7ff ffcb 	bl	800c31c <LoRaMacClassBIsAcquisitionPending>
}
 800c386:	bd10      	pop	{r4, pc}
 800c388:	20000b9c 	.word	0x20000b9c

0800c38c <LoRaMacClassBIsBeaconModeActive>:

bool LoRaMacClassBIsBeaconModeActive( void )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) ||
 800c38c:	2201      	movs	r2, #1
 800c38e:	4b06      	ldr	r3, [pc, #24]	; (800c3a8 <LoRaMacClassBIsBeaconModeActive+0x1c>)
        ( Ctx.BeaconState == BEACON_STATE_ACQUISITION_BY_TIME ) )
    {
        return true;
 800c390:	0010      	movs	r0, r2
    if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) ||
 800c392:	7b19      	ldrb	r1, [r3, #12]
 800c394:	4211      	tst	r1, r2
 800c396:	d105      	bne.n	800c3a4 <LoRaMacClassBIsBeaconModeActive+0x18>
        ( Ctx.BeaconState == BEACON_STATE_ACQUISITION_BY_TIME ) )
 800c398:	3344      	adds	r3, #68	; 0x44
    if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) ||
 800c39a:	7818      	ldrb	r0, [r3, #0]
 800c39c:	3801      	subs	r0, #1
 800c39e:	4243      	negs	r3, r0
 800c3a0:	4158      	adcs	r0, r3
 800c3a2:	b2c0      	uxtb	r0, r0
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800c3a4:	4770      	bx	lr
 800c3a6:	46c0      	nop			; (mov r8, r8)
 800c3a8:	20000b9c 	.word	0x20000b9c

0800c3ac <LoRaMacClassBSetPingSlotInfo>:
    return 128 / ( 1 << periodicity );
 800c3ac:	2180      	movs	r1, #128	; 0x80
 800c3ae:	4101      	asrs	r1, r0
    return CLASSB_BEACON_WINDOW_SLOTS / pingNb;
 800c3b0:	2080      	movs	r0, #128	; 0x80

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
 800c3b2:	4b06      	ldr	r3, [pc, #24]	; (800c3cc <LoRaMacClassBSetPingSlotInfo+0x20>)
{
 800c3b4:	b510      	push	{r4, lr}
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
 800c3b6:	33bc      	adds	r3, #188	; 0xbc
 800c3b8:	681c      	ldr	r4, [r3, #0]
    return CLASSB_BEACON_WINDOW_SLOTS / pingNb;
 800c3ba:	0140      	lsls	r0, r0, #5
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
 800c3bc:	7061      	strb	r1, [r4, #1]
    return CLASSB_BEACON_WINDOW_SLOTS / pingNb;
 800c3be:	b2c9      	uxtb	r1, r1
 800c3c0:	f7f3 ff5c 	bl	800027c <__divsi3>
    Ctx.NvmCtx->PingSlotCtx.PingPeriod = CalcPingPeriod( Ctx.NvmCtx->PingSlotCtx.PingNb );
 800c3c4:	8060      	strh	r0, [r4, #2]
    NvmContextChange( );
 800c3c6:	f7ff fc3b 	bl	800bc40 <NvmContextChange>
#endif // LORAMAC_CLASSB_ENABLED
}
 800c3ca:	bd10      	pop	{r4, pc}
 800c3cc:	20000b9c 	.word	0x20000b9c

0800c3d0 <LoRaMacClassBResumeBeaconing>:
}

void LoRaMacClassBResumeBeaconing( void )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.BeaconState == BEACON_STATE_HALT )
 800c3d0:	4b0d      	ldr	r3, [pc, #52]	; (800c408 <LoRaMacClassBResumeBeaconing+0x38>)
{
 800c3d2:	b510      	push	{r4, lr}
    if( Ctx.BeaconState == BEACON_STATE_HALT )
 800c3d4:	0019      	movs	r1, r3
 800c3d6:	3144      	adds	r1, #68	; 0x44
 800c3d8:	780a      	ldrb	r2, [r1, #0]
 800c3da:	2a06      	cmp	r2, #6
 800c3dc:	d112      	bne.n	800c404 <LoRaMacClassBResumeBeaconing+0x34>
    {
        Ctx.BeaconCtx.Ctrl.ResumeBeaconing = 1;
 800c3de:	7b18      	ldrb	r0, [r3, #12]
 800c3e0:	321a      	adds	r2, #26
 800c3e2:	4302      	orrs	r2, r0

        // Set default state
        Ctx.BeaconState = BEACON_STATE_LOCKED;
 800c3e4:	2005      	movs	r0, #5
        Ctx.BeaconCtx.Ctrl.ResumeBeaconing = 1;
 800c3e6:	731a      	strb	r2, [r3, #12]
        Ctx.BeaconState = BEACON_STATE_LOCKED;
 800c3e8:	7008      	strb	r0, [r1, #0]

        if( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 0 )
 800c3ea:	0792      	lsls	r2, r2, #30
 800c3ec:	d401      	bmi.n	800c3f2 <LoRaMacClassBResumeBeaconing+0x22>
        {
            // Set the default state for beacon less operation
            Ctx.BeaconState = BEACON_STATE_REACQUISITION;
 800c3ee:	2204      	movs	r2, #4
 800c3f0:	700a      	strb	r2, [r1, #0]
        }

        Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
 800c3f2:	001a      	movs	r2, r3
 800c3f4:	3344      	adds	r3, #68	; 0x44
 800c3f6:	32bc      	adds	r2, #188	; 0xbc
 800c3f8:	6812      	ldr	r2, [r2, #0]
 800c3fa:	781b      	ldrb	r3, [r3, #0]
        LoRaMacClassBBeaconTimerEvent( NULL );
 800c3fc:	2000      	movs	r0, #0
        Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
 800c3fe:	7513      	strb	r3, [r2, #20]
        LoRaMacClassBBeaconTimerEvent( NULL );
 800c400:	f7ff fc60 	bl	800bcc4 <LoRaMacClassBBeaconTimerEvent>
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800c404:	bd10      	pop	{r4, pc}
 800c406:	46c0      	nop			; (mov r8, r8)
 800c408:	20000b9c 	.word	0x20000b9c

0800c40c <LoRaMacClassBMibGetRequestConfirm>:
LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacStatus_t status;

    switch( mibGet->Type )
 800c40c:	7803      	ldrb	r3, [r0, #0]
 800c40e:	2b35      	cmp	r3, #53	; 0x35
 800c410:	d104      	bne.n	800c41c <LoRaMacClassBMibGetRequestConfirm+0x10>
    {
        case MIB_PING_SLOT_DATARATE:
        {
            mibGet->Param.PingSlotDatarate = Ctx.NvmCtx->PingSlotCtx.Datarate;
 800c412:	4b03      	ldr	r3, [pc, #12]	; (800c420 <LoRaMacClassBMibGetRequestConfirm+0x14>)
 800c414:	33bc      	adds	r3, #188	; 0xbc
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	7a1b      	ldrb	r3, [r3, #8]
 800c41a:	7103      	strb	r3, [r0, #4]
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 800c41c:	2002      	movs	r0, #2
 800c41e:	4770      	bx	lr
 800c420:	20000b9c 	.word	0x20000b9c

0800c424 <LoRaMacMibClassBSetRequestConfirm>:
LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacStatus_t status;

    switch( mibSet->Type )
 800c424:	7803      	ldrb	r3, [r0, #0]
{
 800c426:	b510      	push	{r4, lr}
    switch( mibSet->Type )
 800c428:	2b35      	cmp	r3, #53	; 0x35
 800c42a:	d106      	bne.n	800c43a <LoRaMacMibClassBSetRequestConfirm+0x16>
    {
        case MIB_PING_SLOT_DATARATE:
        {
            Ctx.NvmCtx->PingSlotCtx.Datarate = mibSet->Param.PingSlotDatarate;
 800c42c:	4b04      	ldr	r3, [pc, #16]	; (800c440 <LoRaMacMibClassBSetRequestConfirm+0x1c>)
 800c42e:	7902      	ldrb	r2, [r0, #4]
 800c430:	33bc      	adds	r3, #188	; 0xbc
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	721a      	strb	r2, [r3, #8]
            NvmContextChange( );
 800c436:	f7ff fc03 	bl	800bc40 <NvmContextChange>
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 800c43a:	2002      	movs	r0, #2
 800c43c:	bd10      	pop	{r4, pc}
 800c43e:	46c0      	nop			; (mov r8, r8)
 800c440:	20000b9c 	.word	0x20000b9c

0800c444 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 800c444:	b510      	push	{r4, lr}
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800c446:	200d      	movs	r0, #13
 800c448:	f000 fe9e 	bl	800d188 <LoRaMacConfirmQueueIsCmdActive>
 800c44c:	2800      	cmp	r0, #0
 800c44e:	d00c      	beq.n	800c46a <LoRaMacClassBPingSlotInfoAns+0x26>
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800c450:	210d      	movs	r1, #13
 800c452:	2000      	movs	r0, #0
 800c454:	f000 fe56 	bl	800d104 <LoRaMacConfirmQueueSetStatus>
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
 800c458:	4b04      	ldr	r3, [pc, #16]	; (800c46c <LoRaMacClassBPingSlotInfoAns+0x28>)
 800c45a:	33bc      	adds	r3, #188	; 0xbc
 800c45c:	681a      	ldr	r2, [r3, #0]
 800c45e:	2301      	movs	r3, #1
 800c460:	7811      	ldrb	r1, [r2, #0]
 800c462:	430b      	orrs	r3, r1
 800c464:	7013      	strb	r3, [r2, #0]
        NvmContextChange( );
 800c466:	f7ff fbeb 	bl	800bc40 <NvmContextChange>
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800c46a:	bd10      	pop	{r4, pc}
 800c46c:	20000b9c 	.word	0x20000b9c

0800c470 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 800c470:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c472:	b085      	sub	sp, #20
 800c474:	1e0e      	subs	r6, r1, #0
 800c476:	4f23      	ldr	r7, [pc, #140]	; (800c504 <LoRaMacClassBPingSlotChannelReq+0x94>)
 800c478:	9001      	str	r0, [sp, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    uint8_t status = 0x03;
    VerifyParams_t verify;
    bool isCustomFreq = false;

    if( frequency != 0 )
 800c47a:	d02a      	beq.n	800c4d2 <LoRaMacClassBPingSlotChannelReq+0x62>
 800c47c:	003b      	movs	r3, r7
 800c47e:	33ac      	adds	r3, #172	; 0xac
 800c480:	681b      	ldr	r3, [r3, #0]
    {
        isCustomFreq = true;
        verify.Frequency = frequency;
 800c482:	9103      	str	r1, [sp, #12]
        if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_FREQUENCY ) == false )
 800c484:	2200      	movs	r2, #0
 800c486:	7818      	ldrb	r0, [r3, #0]
 800c488:	a903      	add	r1, sp, #12
 800c48a:	f001 fb65 	bl	800db58 <RegionVerify>
    uint8_t status = 0x03;
 800c48e:	2403      	movs	r4, #3
        if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_FREQUENCY ) == false )
 800c490:	1e05      	subs	r5, r0, #0
 800c492:	d101      	bne.n	800c498 <LoRaMacClassBPingSlotChannelReq+0x28>
        isCustomFreq = true;
 800c494:	3501      	adds	r5, #1
        {
            status &= 0xFE; // Channel frequency KO
 800c496:	3c01      	subs	r4, #1
        }
    }

    verify.DatarateParams.Datarate = datarate;
 800c498:	466b      	mov	r3, sp
 800c49a:	791b      	ldrb	r3, [r3, #4]
    verify.DatarateParams.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;

    if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_RX_DR ) == false )
 800c49c:	a903      	add	r1, sp, #12
    verify.DatarateParams.Datarate = datarate;
 800c49e:	b25b      	sxtb	r3, r3
 800c4a0:	9301      	str	r3, [sp, #4]
 800c4a2:	9a01      	ldr	r2, [sp, #4]
 800c4a4:	ab02      	add	r3, sp, #8
 800c4a6:	711a      	strb	r2, [r3, #4]
    verify.DatarateParams.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 800c4a8:	003b      	movs	r3, r7
 800c4aa:	33b0      	adds	r3, #176	; 0xb0
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	aa02      	add	r2, sp, #8
 800c4b0:	3335      	adds	r3, #53	; 0x35
 800c4b2:	781b      	ldrb	r3, [r3, #0]
 800c4b4:	7153      	strb	r3, [r2, #5]
    if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_RX_DR ) == false )
 800c4b6:	003b      	movs	r3, r7
 800c4b8:	33ac      	adds	r3, #172	; 0xac
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	2207      	movs	r2, #7
 800c4be:	7818      	ldrb	r0, [r3, #0]
 800c4c0:	f001 fb4a 	bl	800db58 <RegionVerify>
 800c4c4:	2302      	movs	r3, #2
 800c4c6:	2800      	cmp	r0, #0
 800c4c8:	d106      	bne.n	800c4d8 <LoRaMacClassBPingSlotChannelReq+0x68>
    {
        status &= 0xFD; // Datarate range KO
 800c4ca:	439c      	bics	r4, r3

    return status;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 800c4cc:	0020      	movs	r0, r4
 800c4ce:	b005      	add	sp, #20
 800c4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bool isCustomFreq = false;
 800c4d2:	000d      	movs	r5, r1
    uint8_t status = 0x03;
 800c4d4:	2403      	movs	r4, #3
 800c4d6:	e7df      	b.n	800c498 <LoRaMacClassBPingSlotChannelReq+0x28>
    if( status == 0x03 )
 800c4d8:	2c03      	cmp	r4, #3
 800c4da:	d110      	bne.n	800c4fe <LoRaMacClassBPingSlotChannelReq+0x8e>
        if( isCustomFreq == true )
 800c4dc:	37bc      	adds	r7, #188	; 0xbc
 800c4de:	683a      	ldr	r2, [r7, #0]
 800c4e0:	7811      	ldrb	r1, [r2, #0]
 800c4e2:	2d00      	cmp	r5, #0
 800c4e4:	d007      	beq.n	800c4f6 <LoRaMacClassBPingSlotChannelReq+0x86>
            Ctx.NvmCtx->PingSlotCtx.Ctrl.CustomFreq = 1;
 800c4e6:	430b      	orrs	r3, r1
 800c4e8:	7013      	strb	r3, [r2, #0]
            Ctx.NvmCtx->PingSlotCtx.Frequency = frequency;
 800c4ea:	6056      	str	r6, [r2, #4]
        Ctx.NvmCtx->PingSlotCtx.Datarate = datarate;
 800c4ec:	9b01      	ldr	r3, [sp, #4]
 800c4ee:	7213      	strb	r3, [r2, #8]
        NvmContextChange( );
 800c4f0:	f7ff fba6 	bl	800bc40 <NvmContextChange>
 800c4f4:	e7ea      	b.n	800c4cc <LoRaMacClassBPingSlotChannelReq+0x5c>
            Ctx.NvmCtx->PingSlotCtx.Ctrl.CustomFreq = 0;
 800c4f6:	4399      	bics	r1, r3
 800c4f8:	7011      	strb	r1, [r2, #0]
            Ctx.NvmCtx->PingSlotCtx.Frequency = 0;
 800c4fa:	6055      	str	r5, [r2, #4]
 800c4fc:	e7f6      	b.n	800c4ec <LoRaMacClassBPingSlotChannelReq+0x7c>
 800c4fe:	001c      	movs	r4, r3
 800c500:	e7e4      	b.n	800c4cc <LoRaMacClassBPingSlotChannelReq+0x5c>
 800c502:	46c0      	nop			; (mov r8, r8)
 800c504:	20000b9c 	.word	0x20000b9c

0800c508 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.BeaconCtx.BeaconTimingDelay = ( CLASSB_BEACON_DELAY_BEACON_TIMING_ANS * beaconTimingDelay );
 800c508:	231e      	movs	r3, #30
{
 800c50a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    Ctx.BeaconCtx.BeaconTimingDelay = ( CLASSB_BEACON_DELAY_BEACON_TIMING_ANS * beaconTimingDelay );
 800c50c:	4c18      	ldr	r4, [pc, #96]	; (800c570 <LoRaMacClassBBeaconTimingAns+0x68>)
 800c50e:	4343      	muls	r3, r0
    Ctx.BeaconCtx.BeaconTimingChannel = beaconTimingChannel;
 800c510:	0025      	movs	r5, r4

    if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800c512:	200e      	movs	r0, #14
    Ctx.BeaconCtx.BeaconTimingChannel = beaconTimingChannel;
 800c514:	3538      	adds	r5, #56	; 0x38
{
 800c516:	0016      	movs	r6, r2
    Ctx.BeaconCtx.BeaconTimingDelay = ( CLASSB_BEACON_DELAY_BEACON_TIMING_ANS * beaconTimingDelay );
 800c518:	63e3      	str	r3, [r4, #60]	; 0x3c
    Ctx.BeaconCtx.BeaconTimingChannel = beaconTimingChannel;
 800c51a:	7029      	strb	r1, [r5, #0]
    if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800c51c:	f000 fe34 	bl	800d188 <LoRaMacConfirmQueueIsCmdActive>
 800c520:	2800      	cmp	r0, #0
 800c522:	d013      	beq.n	800c54c <LoRaMacClassBBeaconTimingAns+0x44>
    {
        if( Ctx.BeaconCtx.BeaconTimingDelay > CLASSB_BEACON_INTERVAL )
 800c524:	23fa      	movs	r3, #250	; 0xfa
 800c526:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c528:	025b      	lsls	r3, r3, #9
 800c52a:	4299      	cmp	r1, r3
 800c52c:	d90f      	bls.n	800c54e <LoRaMacClassBBeaconTimingAns+0x46>
        {
            // We missed the beacon already
            Ctx.BeaconCtx.BeaconTimingDelay = 0;
 800c52e:	2300      	movs	r3, #0
            Ctx.BeaconCtx.BeaconTimingChannel = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND, MLME_BEACON_TIMING );
 800c530:	210e      	movs	r1, #14
 800c532:	2010      	movs	r0, #16
            Ctx.BeaconCtx.BeaconTimingDelay = 0;
 800c534:	63e3      	str	r3, [r4, #60]	; 0x3c
            Ctx.BeaconCtx.BeaconTimingChannel = 0;
 800c536:	702b      	strb	r3, [r5, #0]
        else
        {
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
            Ctx.BeaconCtx.Ctrl.BeaconChannelSet = 1;
            Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( lastRxDone + Ctx.BeaconCtx.BeaconTimingDelay );
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800c538:	f000 fde4 	bl	800d104 <LoRaMacConfirmQueueSetStatus>
        }

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
 800c53c:	0023      	movs	r3, r4
 800c53e:	33a0      	adds	r3, #160	; 0xa0
 800c540:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c542:	681b      	ldr	r3, [r3, #0]
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
 800c544:	3438      	adds	r4, #56	; 0x38
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
 800c546:	60da      	str	r2, [r3, #12]
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
 800c548:	7822      	ldrb	r2, [r4, #0]
 800c54a:	741a      	strb	r2, [r3, #16]
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800c54c:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 800c54e:	230c      	movs	r3, #12
            Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( lastRxDone + Ctx.BeaconCtx.BeaconTimingDelay );
 800c550:	466d      	mov	r5, sp
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 800c552:	7b22      	ldrb	r2, [r4, #12]
            Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( lastRxDone + Ctx.BeaconCtx.BeaconTimingDelay );
 800c554:	0028      	movs	r0, r5
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 800c556:	439a      	bics	r2, r3
 800c558:	4313      	orrs	r3, r2
            Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( lastRxDone + Ctx.BeaconCtx.BeaconTimingDelay );
 800c55a:	1989      	adds	r1, r1, r6
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 800c55c:	7323      	strb	r3, [r4, #12]
            Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( lastRxDone + Ctx.BeaconCtx.BeaconTimingDelay );
 800c55e:	f004 fa83 	bl	8010a68 <SysTimeFromMs>
 800c562:	0023      	movs	r3, r4
 800c564:	3324      	adds	r3, #36	; 0x24
 800c566:	cd06      	ldmia	r5!, {r1, r2}
 800c568:	c306      	stmia	r3!, {r1, r2}
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800c56a:	2000      	movs	r0, #0
 800c56c:	210e      	movs	r1, #14
 800c56e:	e7e3      	b.n	800c538 <LoRaMacClassBBeaconTimingAns+0x30>
 800c570:	20000b9c 	.word	0x20000b9c

0800c574 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 800c574:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c576:	b08b      	sub	sp, #44	; 0x2c
#if ( LORAMAC_CLASSB_ENABLED == 1 )

    SysTime_t nextBeacon = SysTimeGet( );
 800c578:	ae06      	add	r6, sp, #24
 800c57a:	0030      	movs	r0, r6
 800c57c:	f004 fa14 	bl	80109a8 <SysTimeGet>
 800c580:	9c06      	ldr	r4, [sp, #24]
    uint32_t currentTimeMs = SysTimeToMs( nextBeacon );
 800c582:	6871      	ldr	r1, [r6, #4]
 800c584:	0020      	movs	r0, r4
 800c586:	f004 fa4d 	bl	8010a24 <SysTimeToMs>

    nextBeacon.Seconds = nextBeacon.Seconds + ( 128 - ( nextBeacon.Seconds % 128 ) );
 800c58a:	237f      	movs	r3, #127	; 0x7f
 800c58c:	439c      	bics	r4, r3
 800c58e:	0023      	movs	r3, r4
 800c590:	9403      	str	r4, [sp, #12]
    nextBeacon.SubSeconds = 0;

    Ctx.BeaconCtx.NextBeaconRx = nextBeacon;
 800c592:	4c20      	ldr	r4, [pc, #128]	; (800c614 <LoRaMacClassBDeviceTimeAns+0xa0>)
    nextBeacon.Seconds = nextBeacon.Seconds + ( 128 - ( nextBeacon.Seconds % 128 ) );
 800c594:	3380      	adds	r3, #128	; 0x80
    Ctx.BeaconCtx.NextBeaconRx = nextBeacon;
 800c596:	2500      	movs	r5, #0
 800c598:	9306      	str	r3, [sp, #24]
 800c59a:	0023      	movs	r3, r4
 800c59c:	80b5      	strh	r5, [r6, #4]
 800c59e:	3324      	adds	r3, #36	; 0x24
 800c5a0:	ce06      	ldmia	r6!, {r1, r2}
 800c5a2:	c306      	stmia	r3!, {r1, r2}
    Ctx.BeaconCtx.LastBeaconRx = SysTimeSub( Ctx.BeaconCtx.NextBeaconRx, ( SysTime_t ){ .Seconds = CLASSB_BEACON_INTERVAL / 1000, .SubSeconds = 0 } );
 800c5a4:	ab08      	add	r3, sp, #32
 800c5a6:	809d      	strh	r5, [r3, #4]
 800c5a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5aa:	ae04      	add	r6, sp, #16
 800c5ac:	9300      	str	r3, [sp, #0]
 800c5ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c5b0:	2380      	movs	r3, #128	; 0x80
 800c5b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    uint32_t currentTimeMs = SysTimeToMs( nextBeacon );
 800c5b4:	0007      	movs	r7, r0
    Ctx.BeaconCtx.LastBeaconRx = SysTimeSub( Ctx.BeaconCtx.NextBeaconRx, ( SysTime_t ){ .Seconds = CLASSB_BEACON_INTERVAL / 1000, .SubSeconds = 0 } );
 800c5b6:	0030      	movs	r0, r6
 800c5b8:	f004 f9b8 	bl	801092c <SysTimeSub>
 800c5bc:	0023      	movs	r3, r4
 800c5be:	331c      	adds	r3, #28

    if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800c5c0:	200a      	movs	r0, #10
    Ctx.BeaconCtx.LastBeaconRx = SysTimeSub( Ctx.BeaconCtx.NextBeaconRx, ( SysTime_t ){ .Seconds = CLASSB_BEACON_INTERVAL / 1000, .SubSeconds = 0 } );
 800c5c2:	ce06      	ldmia	r6!, {r1, r2}
 800c5c4:	c306      	stmia	r3!, {r1, r2}
    if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800c5c6:	f000 fddf 	bl	800d188 <LoRaMacConfirmQueueIsCmdActive>
 800c5ca:	42a8      	cmp	r0, r5
 800c5cc:	d00d      	beq.n	800c5ea <LoRaMacClassBDeviceTimeAns+0x76>
    {
        if( currentTimeMs > SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) )
 800c5ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c5d0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800c5d2:	f004 fa27 	bl	8010a24 <SysTimeToMs>
 800c5d6:	42b8      	cmp	r0, r7
 800c5d8:	d209      	bcs.n	800c5ee <LoRaMacClassBDeviceTimeAns+0x7a>
            // We missed the beacon already
            Ctx.BeaconCtx.LastBeaconRx.Seconds = 0;
            Ctx.BeaconCtx.LastBeaconRx.SubSeconds = 0;
            Ctx.BeaconCtx.NextBeaconRx.Seconds = 0;
            Ctx.BeaconCtx.NextBeaconRx.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND, MLME_DEVICE_TIME );
 800c5da:	210a      	movs	r1, #10
 800c5dc:	2010      	movs	r0, #16
            Ctx.BeaconCtx.LastBeaconRx.Seconds = 0;
 800c5de:	61e5      	str	r5, [r4, #28]
            Ctx.BeaconCtx.LastBeaconRx.SubSeconds = 0;
 800c5e0:	8425      	strh	r5, [r4, #32]
            Ctx.BeaconCtx.NextBeaconRx.Seconds = 0;
 800c5e2:	6265      	str	r5, [r4, #36]	; 0x24
            Ctx.BeaconCtx.NextBeaconRx.SubSeconds = 0;
 800c5e4:	8525      	strh	r5, [r4, #40]	; 0x28
        {
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
            Ctx.BeaconCtx.BeaconTimingDelay = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTimeMs;
            Ctx.BeaconCtx.BeaconTime.Seconds = nextBeacon.Seconds - UNIX_GPS_EPOCH_OFFSET - 128;
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800c5e6:	f000 fd8d 	bl	800d104 <LoRaMacConfirmQueueSetStatus>
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800c5ea:	b00b      	add	sp, #44	; 0x2c
 800c5ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 800c5ee:	2304      	movs	r3, #4
 800c5f0:	7b22      	ldrb	r2, [r4, #12]
            Ctx.BeaconCtx.BeaconTimingDelay = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTimeMs;
 800c5f2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 800c5f4:	4313      	orrs	r3, r2
            Ctx.BeaconCtx.BeaconTimingDelay = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTimeMs;
 800c5f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 800c5f8:	7323      	strb	r3, [r4, #12]
            Ctx.BeaconCtx.BeaconTimingDelay = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTimeMs;
 800c5fa:	f004 fa13 	bl	8010a24 <SysTimeToMs>
            Ctx.BeaconCtx.BeaconTime.Seconds = nextBeacon.Seconds - UNIX_GPS_EPOCH_OFFSET - 128;
 800c5fe:	4a06      	ldr	r2, [pc, #24]	; (800c618 <LoRaMacClassBDeviceTimeAns+0xa4>)
 800c600:	9b03      	ldr	r3, [sp, #12]
 800c602:	4694      	mov	ip, r2
            Ctx.BeaconCtx.BeaconTimingDelay = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTimeMs;
 800c604:	1bc7      	subs	r7, r0, r7
            Ctx.BeaconCtx.BeaconTime.Seconds = nextBeacon.Seconds - UNIX_GPS_EPOCH_OFFSET - 128;
 800c606:	4463      	add	r3, ip
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800c608:	210a      	movs	r1, #10
 800c60a:	0028      	movs	r0, r5
            Ctx.BeaconCtx.BeaconTimingDelay = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTimeMs;
 800c60c:	63e7      	str	r7, [r4, #60]	; 0x3c
            Ctx.BeaconCtx.BeaconTime.Seconds = nextBeacon.Seconds - UNIX_GPS_EPOCH_OFFSET - 128;
 800c60e:	6163      	str	r3, [r4, #20]
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
 800c610:	8325      	strh	r5, [r4, #24]
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800c612:	e7e8      	b.n	800c5e6 <LoRaMacClassBDeviceTimeAns+0x72>
 800c614:	20000b9c 	.word	0x20000b9c
 800c618:	ed2ac280 	.word	0xed2ac280

0800c61c <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 800c61c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c61e:	1e06      	subs	r6, r0, #0
 800c620:	4d0f      	ldr	r5, [pc, #60]	; (800c660 <LoRaMacClassBBeaconFreqReq+0x44>)
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    VerifyParams_t verify;

    if( frequency != 0 )
 800c622:	d015      	beq.n	800c650 <LoRaMacClassBBeaconFreqReq+0x34>
    {
        verify.Frequency = frequency;

        if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_FREQUENCY ) == true )
 800c624:	002b      	movs	r3, r5
 800c626:	33ac      	adds	r3, #172	; 0xac
 800c628:	681b      	ldr	r3, [r3, #0]
        verify.Frequency = frequency;
 800c62a:	9001      	str	r0, [sp, #4]
        if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_FREQUENCY ) == true )
 800c62c:	2200      	movs	r2, #0
 800c62e:	7818      	ldrb	r0, [r3, #0]
 800c630:	a901      	add	r1, sp, #4
 800c632:	f001 fa91 	bl	800db58 <RegionVerify>
 800c636:	1e04      	subs	r4, r0, #0
 800c638:	d008      	beq.n	800c64c <LoRaMacClassBBeaconFreqReq+0x30>
        {
            Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq = 1;
 800c63a:	2201      	movs	r2, #1
 800c63c:	35bc      	adds	r5, #188	; 0xbc
 800c63e:	682b      	ldr	r3, [r5, #0]
 800c640:	7b19      	ldrb	r1, [r3, #12]
            Ctx.NvmCtx->BeaconCtx.Frequency = frequency;
 800c642:	611e      	str	r6, [r3, #16]
            Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq = 1;
 800c644:	430a      	orrs	r2, r1
 800c646:	731a      	strb	r2, [r3, #12]
        }
    }
    else
    {
        Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq = 0;
        NvmContextChange( );
 800c648:	f7ff fafa 	bl	800bc40 <NvmContextChange>
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800c64c:	0020      	movs	r0, r4
 800c64e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq = 0;
 800c650:	2401      	movs	r4, #1
 800c652:	35bc      	adds	r5, #188	; 0xbc
 800c654:	682a      	ldr	r2, [r5, #0]
 800c656:	7b13      	ldrb	r3, [r2, #12]
 800c658:	43a3      	bics	r3, r4
 800c65a:	7313      	strb	r3, [r2, #12]
 800c65c:	e7f4      	b.n	800c648 <LoRaMacClassBBeaconFreqReq+0x2c>
 800c65e:	46c0      	nop			; (mov r8, r8)
 800c660:	20000b9c 	.word	0x20000b9c

0800c664 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 800c664:	b570      	push	{r4, r5, r6, lr}
 800c666:	0005      	movs	r5, r0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800c668:	f004 fa56 	bl	8010b18 <UTIL_TIMER_GetCurrentTime>
    TimerTime_t beaconReserved = 0;
    TimerTime_t nextBeacon = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx );
 800c66c:	4e0d      	ldr	r6, [pc, #52]	; (800c6a4 <LoRaMacClassBIsUplinkCollision+0x40>)
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800c66e:	0004      	movs	r4, r0
    TimerTime_t nextBeacon = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx );
 800c670:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800c672:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800c674:	f004 f9d6 	bl	8010a24 <SysTimeToMs>
 800c678:	0002      	movs	r2, r0

    beaconReserved = nextBeacon -
                     CLASSB_BEACON_GUARD -
                     Ctx.LoRaMacClassBParams.LoRaMacParams->ReceiveDelay1 -
 800c67a:	36b0      	adds	r6, #176	; 0xb0
 800c67c:	6831      	ldr	r1, [r6, #0]
    beaconReserved = nextBeacon -
 800c67e:	690b      	ldr	r3, [r1, #16]
 800c680:	6948      	ldr	r0, [r1, #20]
 800c682:	1818      	adds	r0, r3, r0
 800c684:	4b08      	ldr	r3, [pc, #32]	; (800c6a8 <LoRaMacClassBIsUplinkCollision+0x44>)
 800c686:	1a1b      	subs	r3, r3, r0
 800c688:	1b5b      	subs	r3, r3, r5
 800c68a:	189b      	adds	r3, r3, r2
    // Check if the next beacon will be received during the next uplink.
    if( ( currentTime >= beaconReserved ) && ( currentTime < ( nextBeacon + CLASSB_BEACON_RESERVED ) ) )
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
 800c68c:	2000      	movs	r0, #0
    if( ( currentTime >= beaconReserved ) && ( currentTime < ( nextBeacon + CLASSB_BEACON_RESERVED ) ) )
 800c68e:	429c      	cmp	r4, r3
 800c690:	d307      	bcc.n	800c6a2 <LoRaMacClassBIsUplinkCollision+0x3e>
 800c692:	4906      	ldr	r1, [pc, #24]	; (800c6ac <LoRaMacClassBIsUplinkCollision+0x48>)
        return CLASSB_BEACON_RESERVED;
 800c694:	4b06      	ldr	r3, [pc, #24]	; (800c6b0 <LoRaMacClassBIsUplinkCollision+0x4c>)
    if( ( currentTime >= beaconReserved ) && ( currentTime < ( nextBeacon + CLASSB_BEACON_RESERVED ) ) )
 800c696:	1852      	adds	r2, r2, r1
        return CLASSB_BEACON_RESERVED;
 800c698:	4294      	cmp	r4, r2
 800c69a:	4140      	adcs	r0, r0
 800c69c:	4240      	negs	r0, r0
 800c69e:	4018      	ands	r0, r3
 800c6a0:	1840      	adds	r0, r0, r1
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 800c6a2:	bd70      	pop	{r4, r5, r6, pc}
 800c6a4:	20000b9c 	.word	0x20000b9c
 800c6a8:	fffff448 	.word	0xfffff448
 800c6ac:	00000848 	.word	0x00000848
 800c6b0:	fffff7b8 	.word	0xfffff7b8

0800c6b4 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 800c6b4:	b510      	push	{r4, lr}
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    TimerStop( &Ctx.PingSlotTimer );
 800c6b6:	4808      	ldr	r0, [pc, #32]	; (800c6d8 <LoRaMacClassBStopRxSlots+0x24>)
 800c6b8:	f004 fa72 	bl	8010ba0 <UTIL_TIMER_Stop>
    TimerStop( &Ctx.MulticastSlotTimer );
 800c6bc:	4807      	ldr	r0, [pc, #28]	; (800c6dc <LoRaMacClassBStopRxSlots+0x28>)
 800c6be:	f004 fa6f 	bl	8010ba0 <UTIL_TIMER_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6c2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c6c6:	b672      	cpsid	i

    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
 800c6c8:	2006      	movs	r0, #6
 800c6ca:	4a05      	ldr	r2, [pc, #20]	; (800c6e0 <LoRaMacClassBStopRxSlots+0x2c>)
 800c6cc:	7813      	ldrb	r3, [r2, #0]
 800c6ce:	4383      	bics	r3, r0
 800c6d0:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6d2:	f381 8810 	msr	PRIMASK, r1
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800c6d6:	bd10      	pop	{r4, pc}
 800c6d8:	20000bfc 	.word	0x20000bfc
 800c6dc:	20000c14 	.word	0x20000c14
 800c6e0:	20000b58 	.word	0x20000b58

0800c6e4 <LoRaMacClassBHaltBeaconing>:
{
 800c6e4:	b510      	push	{r4, lr}
    if( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 )
 800c6e6:	4c12      	ldr	r4, [pc, #72]	; (800c730 <LoRaMacClassBHaltBeaconing+0x4c>)
 800c6e8:	7b23      	ldrb	r3, [r4, #12]
 800c6ea:	07db      	lsls	r3, r3, #31
 800c6ec:	d51f      	bpl.n	800c72e <LoRaMacClassBHaltBeaconing+0x4a>
        if( ( Ctx.BeaconState == BEACON_STATE_TIMEOUT ) ||
 800c6ee:	0023      	movs	r3, r4
 800c6f0:	2208      	movs	r2, #8
 800c6f2:	3344      	adds	r3, #68	; 0x44
 800c6f4:	781b      	ldrb	r3, [r3, #0]
 800c6f6:	4393      	bics	r3, r2
 800c6f8:	2b02      	cmp	r3, #2
 800c6fa:	d102      	bne.n	800c702 <LoRaMacClassBHaltBeaconing+0x1e>
            LoRaMacClassBBeaconTimerEvent( NULL );
 800c6fc:	2000      	movs	r0, #0
 800c6fe:	f7ff fae1 	bl	800bcc4 <LoRaMacClassBBeaconTimerEvent>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c702:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c706:	b672      	cpsid	i
        LoRaMacClassBEvents.Events.Beacon = 0;
 800c708:	2001      	movs	r0, #1
 800c70a:	4a0a      	ldr	r2, [pc, #40]	; (800c734 <LoRaMacClassBHaltBeaconing+0x50>)
 800c70c:	7813      	ldrb	r3, [r2, #0]
 800c70e:	4383      	bics	r3, r0
 800c710:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c712:	f381 8810 	msr	PRIMASK, r1
        TimerStop( &Ctx.BeaconTimer );
 800c716:	4808      	ldr	r0, [pc, #32]	; (800c738 <LoRaMacClassBHaltBeaconing+0x54>)
 800c718:	f004 fa42 	bl	8010ba0 <UTIL_TIMER_Stop>
        Ctx.BeaconState = BEACON_STATE_HALT;
 800c71c:	0022      	movs	r2, r4
 800c71e:	2306      	movs	r3, #6
 800c720:	3244      	adds	r2, #68	; 0x44
        Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
 800c722:	34bc      	adds	r4, #188	; 0xbc
        Ctx.BeaconState = BEACON_STATE_HALT;
 800c724:	7013      	strb	r3, [r2, #0]
        Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
 800c726:	6822      	ldr	r2, [r4, #0]
 800c728:	7513      	strb	r3, [r2, #20]
        LoRaMacClassBStopRxSlots( );
 800c72a:	f7ff ffc3 	bl	800c6b4 <LoRaMacClassBStopRxSlots>
}
 800c72e:	bd10      	pop	{r4, pc}
 800c730:	20000b9c 	.word	0x20000b9c
 800c734:	20000b58 	.word	0x20000b58
 800c738:	20000be4 	.word	0x20000be4

0800c73c <LoRaMacClassBSwitchClass>:
{
 800c73c:	b510      	push	{r4, lr}
 800c73e:	0004      	movs	r4, r0
    if( nextClass == CLASS_B )
 800c740:	2801      	cmp	r0, #1
 800c742:	d10c      	bne.n	800c75e <LoRaMacClassBSwitchClass+0x22>
        if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) && ( Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned == 1 ) )
 800c744:	4b0a      	ldr	r3, [pc, #40]	; (800c770 <LoRaMacClassBSwitchClass+0x34>)
 800c746:	7b1a      	ldrb	r2, [r3, #12]
 800c748:	4202      	tst	r2, r0
 800c74a:	d00f      	beq.n	800c76c <LoRaMacClassBSwitchClass+0x30>
 800c74c:	33bc      	adds	r3, #188	; 0xbc
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	7818      	ldrb	r0, [r3, #0]
 800c752:	4004      	ands	r4, r0
            return LORAMAC_STATUS_OK;
 800c754:	4260      	negs	r0, r4
 800c756:	4144      	adcs	r4, r0
 800c758:	0064      	lsls	r4, r4, #1
}
 800c75a:	0020      	movs	r0, r4
 800c75c:	bd10      	pop	{r4, pc}
    if( nextClass == CLASS_A )
 800c75e:	2800      	cmp	r0, #0
 800c760:	d104      	bne.n	800c76c <LoRaMacClassBSwitchClass+0x30>
        LoRaMacClassBHaltBeaconing( );
 800c762:	f7ff ffbf 	bl	800c6e4 <LoRaMacClassBHaltBeaconing>
        InitClassBDefaults( );
 800c766:	f7ff fc47 	bl	800bff8 <InitClassBDefaults>
        return LORAMAC_STATUS_OK;
 800c76a:	e7f6      	b.n	800c75a <LoRaMacClassBSwitchClass+0x1e>
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800c76c:	2402      	movs	r4, #2
 800c76e:	e7f4      	b.n	800c75a <LoRaMacClassBSwitchClass+0x1e>
 800c770:	20000b9c 	.word	0x20000b9c

0800c774 <LoRaMacClassBStartRxSlots>:

void LoRaMacClassBStartRxSlots( void )
{
 800c774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned == 1 )
 800c776:	4c0f      	ldr	r4, [pc, #60]	; (800c7b4 <LoRaMacClassBStartRxSlots+0x40>)
 800c778:	2501      	movs	r5, #1
 800c77a:	0023      	movs	r3, r4
 800c77c:	33bc      	adds	r3, #188	; 0xbc
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	422b      	tst	r3, r5
 800c784:	d015      	beq.n	800c7b2 <LoRaMacClassBStartRxSlots+0x3e>
    {
        Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800c786:	0023      	movs	r3, r4
 800c788:	2600      	movs	r6, #0
        TimerSetValue( &Ctx.PingSlotTimer, 1 );
 800c78a:	4f0b      	ldr	r7, [pc, #44]	; (800c7b8 <LoRaMacClassBStartRxSlots+0x44>)
        Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800c78c:	3345      	adds	r3, #69	; 0x45
        TimerSetValue( &Ctx.PingSlotTimer, 1 );
 800c78e:	0029      	movs	r1, r5
 800c790:	0038      	movs	r0, r7
        Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800c792:	701e      	strb	r6, [r3, #0]
        TimerStart( &Ctx.PingSlotTimer );

        Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800c794:	3446      	adds	r4, #70	; 0x46
        TimerSetValue( &Ctx.PingSlotTimer, 1 );
 800c796:	f004 fa99 	bl	8010ccc <UTIL_TIMER_SetPeriod>
        TimerStart( &Ctx.PingSlotTimer );
 800c79a:	0038      	movs	r0, r7
 800c79c:	f004 fa54 	bl	8010c48 <UTIL_TIMER_Start>
        Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800c7a0:	7026      	strb	r6, [r4, #0]
        TimerSetValue( &Ctx.MulticastSlotTimer, 1 );
 800c7a2:	4c06      	ldr	r4, [pc, #24]	; (800c7bc <LoRaMacClassBStartRxSlots+0x48>)
 800c7a4:	0029      	movs	r1, r5
 800c7a6:	0020      	movs	r0, r4
 800c7a8:	f004 fa90 	bl	8010ccc <UTIL_TIMER_SetPeriod>
        TimerStart( &Ctx.MulticastSlotTimer );
 800c7ac:	0020      	movs	r0, r4
 800c7ae:	f004 fa4b 	bl	8010c48 <UTIL_TIMER_Start>
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800c7b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7b4:	20000b9c 	.word	0x20000b9c
 800c7b8:	20000bfc 	.word	0x20000bfc
 800c7bc:	20000c14 	.word	0x20000c14

0800c7c0 <UpdateBeaconState>:
{
 800c7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    beaconEventTime = CalcDelayForNextBeacon( currentTime, SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) );
 800c7c2:	4c22      	ldr	r4, [pc, #136]	; (800c84c <UpdateBeaconState+0x8c>)
{
 800c7c4:	b085      	sub	sp, #20
 800c7c6:	9001      	str	r0, [sp, #4]
 800c7c8:	9100      	str	r1, [sp, #0]
    beaconEventTime = CalcDelayForNextBeacon( currentTime, SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) );
 800c7ca:	69e0      	ldr	r0, [r4, #28]
 800c7cc:	6a21      	ldr	r1, [r4, #32]
{
 800c7ce:	0015      	movs	r5, r2
    beaconEventTime = CalcDelayForNextBeacon( currentTime, SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) );
 800c7d0:	f004 f928 	bl	8010a24 <SysTimeToMs>
    nextBeaconRxTime = ( ( currentTime - lastBeaconRx ) % CLASSB_BEACON_INTERVAL );
 800c7d4:	21fa      	movs	r1, #250	; 0xfa
    return ( CLASSB_BEACON_INTERVAL - nextBeaconRxTime );
 800c7d6:	27fa      	movs	r7, #250	; 0xfa
    nextBeaconRxTime = ( ( currentTime - lastBeaconRx ) % CLASSB_BEACON_INTERVAL );
 800c7d8:	1a28      	subs	r0, r5, r0
 800c7da:	0249      	lsls	r1, r1, #9
 800c7dc:	f7f3 fd4a 	bl	8000274 <__aeabi_uidivmod>
    return ( CLASSB_BEACON_INTERVAL - nextBeaconRxTime );
 800c7e0:	027f      	lsls	r7, r7, #9
 800c7e2:	1a7f      	subs	r7, r7, r1
    Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( currentTime + beaconEventTime );
 800c7e4:	ae02      	add	r6, sp, #8
 800c7e6:	0030      	movs	r0, r6
 800c7e8:	19e9      	adds	r1, r5, r7
 800c7ea:	f004 f93d 	bl	8010a68 <SysTimeFromMs>
 800c7ee:	0023      	movs	r3, r4
 800c7f0:	3324      	adds	r3, #36	; 0x24
 800c7f2:	ce06      	ldmia	r6!, {r1, r2}
 800c7f4:	c306      	stmia	r3!, {r1, r2}
    beaconEventTime = TimerTempCompensation( beaconEventTime, Ctx.BeaconCtx.Temperature );
 800c7f6:	0038      	movs	r0, r7
 800c7f8:	6921      	ldr	r1, [r4, #16]
 800c7fa:	f7ff fa7d 	bl	800bcf8 <TimerTempCompensation>
    if( beaconEventTime > windowMovement )
 800c7fe:	9b00      	ldr	r3, [sp, #0]
    beaconEventTime = TimerTempCompensation( beaconEventTime, Ctx.BeaconCtx.Temperature );
 800c800:	0006      	movs	r6, r0
    if( beaconEventTime > windowMovement )
 800c802:	4298      	cmp	r0, r3
 800c804:	d900      	bls.n	800c808 <UpdateBeaconState+0x48>
        beaconEventTime -= windowMovement;
 800c806:	1ac6      	subs	r6, r0, r3
    Ctx.BeaconCtx.NextBeaconRxAdjusted = currentTime + beaconEventTime;
 800c808:	1975      	adds	r5, r6, r5
 800c80a:	62e5      	str	r5, [r4, #44]	; 0x2c
    LoRaMacClassBStartRxSlots( );
 800c80c:	f7ff ffb2 	bl	800c774 <LoRaMacClassBStartRxSlots>
    if( Ctx.BeaconCtx.Ctrl.ResumeBeaconing == 0 )
 800c810:	7b23      	ldrb	r3, [r4, #12]
 800c812:	069b      	lsls	r3, r3, #26
 800c814:	d40e      	bmi.n	800c834 <UpdateBeaconState+0x74>
        Ctx.LoRaMacClassBParams.MlmeIndication->MlmeIndication = MLME_BEACON;
 800c816:	0023      	movs	r3, r4
 800c818:	220b      	movs	r2, #11
 800c81a:	3398      	adds	r3, #152	; 0x98
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	701a      	strb	r2, [r3, #0]
        Ctx.LoRaMacClassBParams.MlmeIndication->Status = status;
 800c820:	9a01      	ldr	r2, [sp, #4]
 800c822:	705a      	strb	r2, [r3, #1]
        Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeInd = 1;
 800c824:	0023      	movs	r3, r4
 800c826:	33a4      	adds	r3, #164	; 0xa4
 800c828:	6819      	ldr	r1, [r3, #0]
 800c82a:	2328      	movs	r3, #40	; 0x28
 800c82c:	780a      	ldrb	r2, [r1, #0]
 800c82e:	439a      	bics	r2, r3
 800c830:	4313      	orrs	r3, r2
 800c832:	700b      	strb	r3, [r1, #0]
    Ctx.BeaconCtx.Ctrl.ResumeBeaconing = 0;
 800c834:	2220      	movs	r2, #32
 800c836:	7b23      	ldrb	r3, [r4, #12]
 800c838:	4393      	bics	r3, r2
 800c83a:	7323      	strb	r3, [r4, #12]
    if( timeGuard > CLASSB_BEACON_GUARD )
 800c83c:	4b04      	ldr	r3, [pc, #16]	; (800c850 <UpdateBeaconState+0x90>)
 800c83e:	429e      	cmp	r6, r3
 800c840:	d901      	bls.n	800c846 <UpdateBeaconState+0x86>
        timeGuard -= CLASSB_BEACON_GUARD;
 800c842:	4b04      	ldr	r3, [pc, #16]	; (800c854 <UpdateBeaconState+0x94>)
 800c844:	18f6      	adds	r6, r6, r3
}
 800c846:	0030      	movs	r0, r6
 800c848:	b005      	add	sp, #20
 800c84a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c84c:	20000b9c 	.word	0x20000b9c
 800c850:	00000bb8 	.word	0x00000bb8
 800c854:	fffff448 	.word	0xfffff448

0800c858 <LoRaMacClassBProcess>:
    }
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBProcess( void )
{
 800c858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c85a:	b087      	sub	sp, #28
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c85c:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c860:	b672      	cpsid	i
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents_t events;

    CRITICAL_SECTION_BEGIN( );
    events = LoRaMacClassBEvents;
    LoRaMacClassBEvents.Value = 0;
 800c862:	2100      	movs	r1, #0
    events = LoRaMacClassBEvents;
 800c864:	4dc2      	ldr	r5, [pc, #776]	; (800cb70 <LoRaMacClassBProcess+0x318>)
 800c866:	682b      	ldr	r3, [r5, #0]
    LoRaMacClassBEvents.Value = 0;
 800c868:	6029      	str	r1, [r5, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c86a:	f382 8810 	msr	PRIMASK, r2
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800c86e:	428b      	cmp	r3, r1
 800c870:	d100      	bne.n	800c874 <LoRaMacClassBProcess+0x1c>
 800c872:	e238      	b.n	800cce6 <LoRaMacClassBProcess+0x48e>
    {
        if( events.Events.Beacon == 1 )
 800c874:	b2da      	uxtb	r2, r3
 800c876:	9202      	str	r2, [sp, #8]
 800c878:	07db      	lsls	r3, r3, #31
 800c87a:	d55a      	bpl.n	800c932 <LoRaMacClassBProcess+0xda>
    TimerTime_t currentTime = Ctx.BeaconCtx.TimeStamp;
 800c87c:	4cbd      	ldr	r4, [pc, #756]	; (800cb74 <LoRaMacClassBProcess+0x31c>)
    switch( Ctx.BeaconState )
 800c87e:	0023      	movs	r3, r4
 800c880:	3344      	adds	r3, #68	; 0x44
 800c882:	7818      	ldrb	r0, [r3, #0]
    TimerTime_t currentTime = Ctx.BeaconCtx.TimeStamp;
 800c884:	6c26      	ldr	r6, [r4, #64]	; 0x40
    switch( Ctx.BeaconState )
 800c886:	280a      	cmp	r0, #10
 800c888:	d900      	bls.n	800c88c <LoRaMacClassBProcess+0x34>
 800c88a:	e16c      	b.n	800cb66 <LoRaMacClassBProcess+0x30e>
 800c88c:	f7f3 fc62 	bl	8000154 <__gnu_thumb1_case_uhi>
 800c890:	000b00ae 	.word	0x000b00ae
 800c894:	016b00c2 	.word	0x016b00c2
 800c898:	00fe00de 	.word	0x00fe00de
 800c89c:	0120016b 	.word	0x0120016b
 800c8a0:	016b0140 	.word	0x016b0140
 800c8a4:	0147      	.short	0x0147
            if( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 )
 800c8a6:	7b23      	ldrb	r3, [r4, #12]
 800c8a8:	2210      	movs	r2, #16
 800c8aa:	001f      	movs	r7, r3
 800c8ac:	4017      	ands	r7, r2
 800c8ae:	4213      	tst	r3, r2
 800c8b0:	d007      	beq.n	800c8c2 <LoRaMacClassBProcess+0x6a>
                Radio.Sleep();
 800c8b2:	4bb1      	ldr	r3, [pc, #708]	; (800cb78 <LoRaMacClassBProcess+0x320>)
                Ctx.BeaconState = BEACON_STATE_LOST;
 800c8b4:	3444      	adds	r4, #68	; 0x44
                Radio.Sleep();
 800c8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b8:	9303      	str	r3, [sp, #12]
 800c8ba:	4798      	blx	r3
                Ctx.BeaconState = BEACON_STATE_LOST;
 800c8bc:	230a      	movs	r3, #10
 800c8be:	7023      	strb	r3, [r4, #0]
    if( activateTimer == true )
 800c8c0:	e092      	b.n	800c9e8 <LoRaMacClassBProcess+0x190>
    Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 800c8c2:	2108      	movs	r1, #8
 800c8c4:	8621      	strh	r1, [r4, #48]	; 0x30
    Ctx.PingSlotCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 800c8c6:	80e1      	strh	r1, [r4, #6]
    Ctx.BeaconCtx.BeaconWindowMovement  = CLASSB_WINDOW_MOVE_DEFAULT;
 800c8c8:	3906      	subs	r1, #6
                if( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 )
 800c8ca:	2004      	movs	r0, #4
    Ctx.BeaconCtx.BeaconWindowMovement  = CLASSB_WINDOW_MOVE_DEFAULT;
 800c8cc:	6361      	str	r1, [r4, #52]	; 0x34
                if( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 )
 800c8ce:	0019      	movs	r1, r3
 800c8d0:	4001      	ands	r1, r0
 800c8d2:	4203      	tst	r3, r0
 800c8d4:	d100      	bne.n	800c8d8 <LoRaMacClassBProcess+0x80>
 800c8d6:	e082      	b.n	800c9de <LoRaMacClassBProcess+0x186>
                    if( Ctx.BeaconCtx.BeaconTimingDelay > 0 )
 800c8d8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c8da:	2900      	cmp	r1, #0
 800c8dc:	d022      	beq.n	800c924 <LoRaMacClassBProcess+0xcc>
                        if( SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) > currentTime )
 800c8de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c8e0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800c8e2:	f004 f89f 	bl	8010a24 <SysTimeToMs>
 800c8e6:	4286      	cmp	r6, r0
 800c8e8:	d213      	bcs.n	800c912 <LoRaMacClassBProcess+0xba>
                            beaconEventTime = TimerTempCompensation( SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTime, Ctx.BeaconCtx.Temperature );
 800c8ea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800c8ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c8ee:	f004 f899 	bl	8010a24 <SysTimeToMs>
 800c8f2:	6921      	ldr	r1, [r4, #16]
 800c8f4:	1b80      	subs	r0, r0, r6
 800c8f6:	f7ff f9ff 	bl	800bcf8 <TimerTempCompensation>
 800c8fa:	0006      	movs	r6, r0
                        Ctx.BeaconCtx.BeaconTimingDelay = 0;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	63e3      	str	r3, [r4, #60]	; 0x3c
        TimerSetValue( &Ctx.BeaconTimer, beaconEventTime );
 800c900:	4c9e      	ldr	r4, [pc, #632]	; (800cb7c <LoRaMacClassBProcess+0x324>)
 800c902:	0031      	movs	r1, r6
 800c904:	0020      	movs	r0, r4
 800c906:	f004 f9e1 	bl	8010ccc <UTIL_TIMER_SetPeriod>
        TimerStart( &Ctx.BeaconTimer );
 800c90a:	0020      	movs	r0, r4
 800c90c:	f004 f99c 	bl	8010c48 <UTIL_TIMER_Start>
 800c910:	e00f      	b.n	800c932 <LoRaMacClassBProcess+0xda>
                            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 0;
 800c912:	220c      	movs	r2, #12
 800c914:	7b23      	ldrb	r3, [r4, #12]
    TimerTime_t beaconEventTime = 1;
 800c916:	2601      	movs	r6, #1
                            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 0;
 800c918:	4393      	bics	r3, r2
 800c91a:	7323      	strb	r3, [r4, #12]
                            Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 800c91c:	0023      	movs	r3, r4
 800c91e:	3344      	adds	r3, #68	; 0x44
 800c920:	701f      	strb	r7, [r3, #0]
 800c922:	e7eb      	b.n	800c8fc <LoRaMacClassBProcess+0xa4>
                        Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 0;
 800c924:	2014      	movs	r0, #20
 800c926:	4383      	bics	r3, r0
 800c928:	4313      	orrs	r3, r2
 800c92a:	7323      	strb	r3, [r4, #12]
            RxBeaconSetup( CLASSB_BEACON_RESERVED, false );
 800c92c:	4894      	ldr	r0, [pc, #592]	; (800cb80 <LoRaMacClassBProcess+0x328>)
 800c92e:	f7ff facb 	bl	800bec8 <RxBeaconSetup>
        {
            LoRaMacClassBProcessBeacon( );
        }
        if( events.Events.PingSlot == 1 )
 800c932:	9b02      	ldr	r3, [sp, #8]
 800c934:	079b      	lsls	r3, r3, #30
 800c936:	d400      	bmi.n	800c93a <LoRaMacClassBProcess+0xe2>
 800c938:	e169      	b.n	800cc0e <LoRaMacClassBProcess+0x3b6>
    switch( Ctx.PingSlotState )
 800c93a:	4c8e      	ldr	r4, [pc, #568]	; (800cb74 <LoRaMacClassBProcess+0x31c>)
    TimerTime_t pingSlotTime = 0;
 800c93c:	2300      	movs	r3, #0
    switch( Ctx.PingSlotState )
 800c93e:	0026      	movs	r6, r4
    TimerTime_t pingSlotTime = 0;
 800c940:	9305      	str	r3, [sp, #20]
    switch( Ctx.PingSlotState )
 800c942:	3645      	adds	r6, #69	; 0x45
 800c944:	7831      	ldrb	r1, [r6, #0]
 800c946:	2901      	cmp	r1, #1
 800c948:	d014      	beq.n	800c974 <LoRaMacClassBProcess+0x11c>
 800c94a:	2902      	cmp	r1, #2
 800c94c:	d100      	bne.n	800c950 <LoRaMacClassBProcess+0xf8>
 800c94e:	e11f      	b.n	800cb90 <LoRaMacClassBProcess+0x338>
 800c950:	4299      	cmp	r1, r3
 800c952:	d000      	beq.n	800c956 <LoRaMacClassBProcess+0xfe>
 800c954:	e1c2      	b.n	800ccdc <LoRaMacClassBProcess+0x484>
            ComputePingOffset( Ctx.BeaconCtx.BeaconTime.Seconds,
 800c956:	0023      	movs	r3, r4
 800c958:	0022      	movs	r2, r4
 800c95a:	33bc      	adds	r3, #188	; 0xbc
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4889      	ldr	r0, [pc, #548]	; (800cb84 <LoRaMacClassBProcess+0x32c>)
 800c960:	32a8      	adds	r2, #168	; 0xa8
 800c962:	6812      	ldr	r2, [r2, #0]
 800c964:	885b      	ldrh	r3, [r3, #2]
 800c966:	9000      	str	r0, [sp, #0]
 800c968:	6812      	ldr	r2, [r2, #0]
 800c96a:	6960      	ldr	r0, [r4, #20]
 800c96c:	f7ff fa44 	bl	800bdf8 <ComputePingOffset>
            Ctx.PingSlotState = PINGSLOT_STATE_SET_TIMER;
 800c970:	2301      	movs	r3, #1
 800c972:	7033      	strb	r3, [r6, #0]
            if( CalcNextSlotTime( Ctx.PingSlotCtx.PingOffset, Ctx.NvmCtx->PingSlotCtx.PingPeriod, Ctx.NvmCtx->PingSlotCtx.PingNb, &pingSlotTime ) == true )
 800c974:	0026      	movs	r6, r4
 800c976:	36bc      	adds	r6, #188	; 0xbc
 800c978:	6833      	ldr	r3, [r6, #0]
 800c97a:	88a0      	ldrh	r0, [r4, #4]
 800c97c:	785a      	ldrb	r2, [r3, #1]
 800c97e:	8859      	ldrh	r1, [r3, #2]
 800c980:	ab05      	add	r3, sp, #20
 800c982:	f7ff f9ed 	bl	800bd60 <CalcNextSlotTime>
 800c986:	2800      	cmp	r0, #0
 800c988:	d100      	bne.n	800c98c <LoRaMacClassBProcess+0x134>
 800c98a:	e140      	b.n	800cc0e <LoRaMacClassBProcess+0x3b6>
                if( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 1 )
 800c98c:	7b23      	ldrb	r3, [r4, #12]
 800c98e:	079b      	lsls	r3, r3, #30
 800c990:	d518      	bpl.n	800c9c4 <LoRaMacClassBProcess+0x16c>
                                                     Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 800c992:	0023      	movs	r3, r4
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 800c994:	0020      	movs	r0, r4
 800c996:	6831      	ldr	r1, [r6, #0]
 800c998:	002e      	movs	r6, r5
                                                     Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 800c99a:	33b0      	adds	r3, #176	; 0xb0
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 800c99c:	30ac      	adds	r0, #172	; 0xac
                                                     Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 800c99e:	681b      	ldr	r3, [r3, #0]
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 800c9a0:	6800      	ldr	r0, [r0, #0]
 800c9a2:	7a09      	ldrb	r1, [r1, #8]
 800c9a4:	361c      	adds	r6, #28
 800c9a6:	7a1a      	ldrb	r2, [r3, #8]
 800c9a8:	7800      	ldrb	r0, [r0, #0]
 800c9aa:	9600      	str	r6, [sp, #0]
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	b249      	sxtb	r1, r1
 800c9b0:	f001 f8ef 	bl	800db92 <RegionComputeRxWindowParameters>
                    Ctx.PingSlotCtx.SymbolTimeout = pingSlotRxConfig.WindowTimeout;
 800c9b4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
                    if( ( int32_t )pingSlotTime > pingSlotRxConfig.WindowOffset )
 800c9b6:	9a05      	ldr	r2, [sp, #20]
                    Ctx.PingSlotCtx.SymbolTimeout = pingSlotRxConfig.WindowTimeout;
 800c9b8:	80e3      	strh	r3, [r4, #6]
                    if( ( int32_t )pingSlotTime > pingSlotRxConfig.WindowOffset )
 800c9ba:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	da01      	bge.n	800c9c4 <LoRaMacClassBProcess+0x16c>
                        pingSlotTime += pingSlotRxConfig.WindowOffset;
 800c9c0:	189b      	adds	r3, r3, r2
 800c9c2:	9305      	str	r3, [sp, #20]
                Ctx.PingSlotState = PINGSLOT_STATE_IDLE;
 800c9c4:	2202      	movs	r2, #2
 800c9c6:	4b6b      	ldr	r3, [pc, #428]	; (800cb74 <LoRaMacClassBProcess+0x31c>)
                TimerSetValue( &Ctx.PingSlotTimer, pingSlotTime );
 800c9c8:	4c6f      	ldr	r4, [pc, #444]	; (800cb88 <LoRaMacClassBProcess+0x330>)
                Ctx.PingSlotState = PINGSLOT_STATE_IDLE;
 800c9ca:	3345      	adds	r3, #69	; 0x45
                TimerSetValue( &Ctx.PingSlotTimer, pingSlotTime );
 800c9cc:	9905      	ldr	r1, [sp, #20]
                Ctx.PingSlotState = PINGSLOT_STATE_IDLE;
 800c9ce:	701a      	strb	r2, [r3, #0]
                TimerSetValue( &Ctx.PingSlotTimer, CLASSB_PING_SLOT_WINDOW );
 800c9d0:	0020      	movs	r0, r4
 800c9d2:	f004 f97b 	bl	8010ccc <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.PingSlotTimer );
 800c9d6:	0020      	movs	r0, r4
 800c9d8:	f004 f936 	bl	8010c48 <UTIL_TIMER_Start>
 800c9dc:	e117      	b.n	800cc0e <LoRaMacClassBProcess+0x3b6>
                    Ctx.BeaconCtx.NextBeaconRx.Seconds = 0;
 800c9de:	6261      	str	r1, [r4, #36]	; 0x24
                    Ctx.BeaconCtx.NextBeaconRx.SubSeconds = 0;
 800c9e0:	8521      	strh	r1, [r4, #40]	; 0x28
                    Ctx.BeaconCtx.BeaconTimingDelay = 0;
 800c9e2:	63e1      	str	r1, [r4, #60]	; 0x3c
                    Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 800c9e4:	3444      	adds	r4, #68	; 0x44
 800c9e6:	7021      	strb	r1, [r4, #0]
    TimerTime_t beaconEventTime = 1;
 800c9e8:	2601      	movs	r6, #1
 800c9ea:	e789      	b.n	800c900 <LoRaMacClassBProcess+0xa8>
            if( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 )
 800c9ec:	7b22      	ldrb	r2, [r4, #12]
 800c9ee:	2310      	movs	r3, #16
 800c9f0:	0010      	movs	r0, r2
 800c9f2:	4018      	ands	r0, r3
 800c9f4:	421a      	tst	r2, r3
 800c9f6:	d000      	beq.n	800c9fa <LoRaMacClassBProcess+0x1a2>
 800c9f8:	e75b      	b.n	800c8b2 <LoRaMacClassBProcess+0x5a>
    Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 800c9fa:	2108      	movs	r1, #8
                beaconEventTime = CLASSB_BEACON_INTERVAL;
 800c9fc:	26fa      	movs	r6, #250	; 0xfa
    Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 800c9fe:	8621      	strh	r1, [r4, #48]	; 0x30
    Ctx.PingSlotCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 800ca00:	80e1      	strh	r1, [r4, #6]
    Ctx.BeaconCtx.BeaconWindowMovement  = CLASSB_WINDOW_MOVE_DEFAULT;
 800ca02:	3906      	subs	r1, #6
 800ca04:	6361      	str	r1, [r4, #52]	; 0x34
                Ctx.BeaconCtx.Ctrl.AcquisitionPending = 1;
 800ca06:	4313      	orrs	r3, r2
                RxBeaconSetup( 0, true );
 800ca08:	3901      	subs	r1, #1
                Ctx.BeaconCtx.Ctrl.AcquisitionPending = 1;
 800ca0a:	7323      	strb	r3, [r4, #12]
                beaconEventTime = CLASSB_BEACON_INTERVAL;
 800ca0c:	0276      	lsls	r6, r6, #9
                RxBeaconSetup( 0, true );
 800ca0e:	f7ff fa5b 	bl	800bec8 <RxBeaconSetup>
    if( activateTimer == true )
 800ca12:	e775      	b.n	800c900 <LoRaMacClassBProcess+0xa8>
            Ctx.BeaconCtx.BeaconTime.Seconds += ( CLASSB_BEACON_INTERVAL / 1000 );
 800ca14:	6963      	ldr	r3, [r4, #20]
    if( Ctx.BeaconCtx.BeaconWindowMovement > CLASSB_WINDOW_MOVE_EXPANSION_MAX )
 800ca16:	2280      	movs	r2, #128	; 0x80
            Ctx.BeaconCtx.BeaconTime.Seconds += ( CLASSB_BEACON_INTERVAL / 1000 );
 800ca18:	3380      	adds	r3, #128	; 0x80
 800ca1a:	6163      	str	r3, [r4, #20]
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	8323      	strh	r3, [r4, #24]
    Ctx.BeaconCtx.BeaconWindowMovement *= CLASSB_WINDOW_MOVE_EXPANSION_FACTOR;
 800ca20:	6b63      	ldr	r3, [r4, #52]	; 0x34
    if( Ctx.BeaconCtx.BeaconWindowMovement > CLASSB_WINDOW_MOVE_EXPANSION_MAX )
 800ca22:	0052      	lsls	r2, r2, #1
    Ctx.BeaconCtx.BeaconWindowMovement *= CLASSB_WINDOW_MOVE_EXPANSION_FACTOR;
 800ca24:	005b      	lsls	r3, r3, #1
    if( Ctx.BeaconCtx.BeaconWindowMovement > CLASSB_WINDOW_MOVE_EXPANSION_MAX )
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d821      	bhi.n	800ca6e <LoRaMacClassBProcess+0x216>
    Ctx.BeaconCtx.BeaconWindowMovement *= CLASSB_WINDOW_MOVE_EXPANSION_FACTOR;
 800ca2a:	6363      	str	r3, [r4, #52]	; 0x34
    Ctx.BeaconCtx.SymbolTimeout *= CLASSB_BEACON_SYMBOL_TO_EXPANSION_FACTOR;
 800ca2c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800ca2e:	005b      	lsls	r3, r3, #1
 800ca30:	b29b      	uxth	r3, r3
    if( Ctx.BeaconCtx.SymbolTimeout > CLASSB_BEACON_SYMBOL_TO_EXPANSION_MAX )
 800ca32:	2bff      	cmp	r3, #255	; 0xff
 800ca34:	d81d      	bhi.n	800ca72 <LoRaMacClassBProcess+0x21a>
        Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_EXPANSION_MAX;
 800ca36:	8623      	strh	r3, [r4, #48]	; 0x30
    Ctx.PingSlotCtx.SymbolTimeout *= CLASSB_BEACON_SYMBOL_TO_EXPANSION_FACTOR;
 800ca38:	88e3      	ldrh	r3, [r4, #6]
 800ca3a:	005b      	lsls	r3, r3, #1
 800ca3c:	b29b      	uxth	r3, r3
    if( Ctx.PingSlotCtx.SymbolTimeout > CLASSB_PING_SLOT_SYMBOL_TO_EXPANSION_MAX )
 800ca3e:	2b1e      	cmp	r3, #30
 800ca40:	d819      	bhi.n	800ca76 <LoRaMacClassBProcess+0x21e>
        Ctx.PingSlotCtx.SymbolTimeout = CLASSB_PING_SLOT_SYMBOL_TO_EXPANSION_MAX;
 800ca42:	80e3      	strh	r3, [r4, #6]
            Ctx.BeaconState = BEACON_STATE_REACQUISITION;
 800ca44:	0023      	movs	r3, r4
 800ca46:	2204      	movs	r2, #4
 800ca48:	3344      	adds	r3, #68	; 0x44
 800ca4a:	701a      	strb	r2, [r3, #0]
            Ctx.BeaconCtx.Ctrl.BeaconAcquired = 0;
 800ca4c:	2202      	movs	r2, #2
 800ca4e:	7b23      	ldrb	r3, [r4, #12]
            if( ( currentTime - SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) ) > CLASSB_MAX_BEACON_LESS_PERIOD )
 800ca50:	69e0      	ldr	r0, [r4, #28]
            Ctx.BeaconCtx.Ctrl.BeaconAcquired = 0;
 800ca52:	4393      	bics	r3, r2
            if( ( currentTime - SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) ) > CLASSB_MAX_BEACON_LESS_PERIOD )
 800ca54:	6a21      	ldr	r1, [r4, #32]
            Ctx.BeaconCtx.Ctrl.BeaconAcquired = 0;
 800ca56:	7323      	strb	r3, [r4, #12]
            if( ( currentTime - SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) ) > CLASSB_MAX_BEACON_LESS_PERIOD )
 800ca58:	0027      	movs	r7, r4
 800ca5a:	f003 ffe3 	bl	8010a24 <SysTimeToMs>
 800ca5e:	4b4b      	ldr	r3, [pc, #300]	; (800cb8c <LoRaMacClassBProcess+0x334>)
 800ca60:	1a30      	subs	r0, r6, r0
 800ca62:	3744      	adds	r7, #68	; 0x44
 800ca64:	4298      	cmp	r0, r3
 800ca66:	d908      	bls.n	800ca7a <LoRaMacClassBProcess+0x222>
                Ctx.BeaconState = BEACON_STATE_LOST;
 800ca68:	230a      	movs	r3, #10
 800ca6a:	703b      	strb	r3, [r7, #0]
    if( activateTimer == true )
 800ca6c:	e7bc      	b.n	800c9e8 <LoRaMacClassBProcess+0x190>
        Ctx.BeaconCtx.BeaconWindowMovement = CLASSB_WINDOW_MOVE_EXPANSION_MAX;
 800ca6e:	6362      	str	r2, [r4, #52]	; 0x34
 800ca70:	e7dc      	b.n	800ca2c <LoRaMacClassBProcess+0x1d4>
        Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_EXPANSION_MAX;
 800ca72:	23ff      	movs	r3, #255	; 0xff
 800ca74:	e7df      	b.n	800ca36 <LoRaMacClassBProcess+0x1de>
        Ctx.PingSlotCtx.SymbolTimeout = CLASSB_PING_SLOT_SYMBOL_TO_EXPANSION_MAX;
 800ca76:	231e      	movs	r3, #30
 800ca78:	e7e3      	b.n	800ca42 <LoRaMacClassBProcess+0x1ea>
                beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_LOST,
 800ca7a:	0032      	movs	r2, r6
 800ca7c:	200f      	movs	r0, #15
 800ca7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca80:	f7ff fe9e 	bl	800c7c0 <UpdateBeaconState>
                Ctx.BeaconState = BEACON_STATE_IDLE;
 800ca84:	2307      	movs	r3, #7
                beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_LOST,
 800ca86:	0006      	movs	r6, r0
                Ctx.BeaconState = BEACON_STATE_IDLE;
 800ca88:	703b      	strb	r3, [r7, #0]
    if( activateTimer == true )
 800ca8a:	e739      	b.n	800c900 <LoRaMacClassBProcess+0xa8>
            Ctx.BeaconCtx.Ctrl.AcquisitionPending = 0;
 800ca8c:	2210      	movs	r2, #16
 800ca8e:	7b23      	ldrb	r3, [r4, #12]
            beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED,
 800ca90:	2100      	movs	r1, #0
            Ctx.BeaconCtx.Ctrl.AcquisitionPending = 0;
 800ca92:	4393      	bics	r3, r2
            beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED,
 800ca94:	200e      	movs	r0, #14
 800ca96:	0032      	movs	r2, r6
            Ctx.BeaconCtx.Ctrl.AcquisitionPending = 0;
 800ca98:	7323      	strb	r3, [r4, #12]
            beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED,
 800ca9a:	f7ff fe91 	bl	800c7c0 <UpdateBeaconState>
            if( Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeReq == 1 )
 800ca9e:	0023      	movs	r3, r4
 800caa0:	33a4      	adds	r3, #164	; 0xa4
 800caa2:	681b      	ldr	r3, [r3, #0]
            beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED,
 800caa4:	0006      	movs	r6, r0
            if( Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeReq == 1 )
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	075b      	lsls	r3, r3, #29
 800caaa:	d50d      	bpl.n	800cac8 <LoRaMacClassBProcess+0x270>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true )
 800caac:	200c      	movs	r0, #12
 800caae:	f000 fb6b 	bl	800d188 <LoRaMacConfirmQueueIsCmdActive>
 800cab2:	2800      	cmp	r0, #0
 800cab4:	d008      	beq.n	800cac8 <LoRaMacClassBProcess+0x270>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_ACQUISITION );
 800cab6:	210c      	movs	r1, #12
 800cab8:	2000      	movs	r0, #0
 800caba:	f000 fb23 	bl	800d104 <LoRaMacConfirmQueueSetStatus>
                    Ctx.LoRaMacClassBParams.MlmeConfirm->TxTimeOnAir = 0;
 800cabe:	0023      	movs	r3, r4
 800cac0:	2200      	movs	r2, #0
 800cac2:	33a0      	adds	r3, #160	; 0xa0
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	605a      	str	r2, [r3, #4]
            Ctx.BeaconState = BEACON_STATE_IDLE;
 800cac8:	2307      	movs	r3, #7
 800caca:	3444      	adds	r4, #68	; 0x44
 800cacc:	7023      	strb	r3, [r4, #0]
    if( activateTimer == true )
 800cace:	e717      	b.n	800c900 <LoRaMacClassBProcess+0xa8>
    if( ( callbacks != NULL ) && ( callbacks->GetTemperatureLevel != NULL ) )
 800cad0:	0023      	movs	r3, r4
 800cad2:	3390      	adds	r3, #144	; 0x90
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d003      	beq.n	800cae2 <LoRaMacClassBProcess+0x28a>
        beaconCtx->Temperature = callbacks->GetTemperatureLevel( );
 800cada:	4798      	blx	r3
 800cadc:	f7f4 fce4 	bl	80014a8 <__aeabi_ui2f>
 800cae0:	6120      	str	r0, [r4, #16]
            beaconEventTime = Ctx.BeaconCtx.NextBeaconRxAdjusted - Radio.GetWakeupTime( );
 800cae2:	4b25      	ldr	r3, [pc, #148]	; (800cb78 <LoRaMacClassBProcess+0x320>)
 800cae4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cae8:	9303      	str	r3, [sp, #12]
 800caea:	4798      	blx	r3
 800caec:	1a36      	subs	r6, r6, r0
            currentTime = TimerGetCurrentTime( );
 800caee:	f004 f813 	bl	8010b18 <UTIL_TIMER_GetCurrentTime>
            if( beaconEventTime > currentTime )
 800caf2:	0023      	movs	r3, r4
 800caf4:	3344      	adds	r3, #68	; 0x44
 800caf6:	4286      	cmp	r6, r0
 800caf8:	d907      	bls.n	800cb0a <LoRaMacClassBProcess+0x2b2>
                Ctx.BeaconState = BEACON_STATE_GUARD;
 800cafa:	2208      	movs	r2, #8
                beaconEventTime -= currentTime;
 800cafc:	1a30      	subs	r0, r6, r0
                beaconEventTime = TimerTempCompensation( beaconEventTime, Ctx.BeaconCtx.Temperature );
 800cafe:	6921      	ldr	r1, [r4, #16]
                Ctx.BeaconState = BEACON_STATE_GUARD;
 800cb00:	701a      	strb	r2, [r3, #0]
                beaconEventTime = TimerTempCompensation( beaconEventTime, Ctx.BeaconCtx.Temperature );
 800cb02:	f7ff f8f9 	bl	800bcf8 <TimerTempCompensation>
 800cb06:	0006      	movs	r6, r0
    if( activateTimer == true )
 800cb08:	e6fa      	b.n	800c900 <LoRaMacClassBProcess+0xa8>
                Ctx.BeaconState = BEACON_STATE_REACQUISITION;
 800cb0a:	2204      	movs	r2, #4
 800cb0c:	701a      	strb	r2, [r3, #0]
    if( activateTimer == true )
 800cb0e:	e76b      	b.n	800c9e8 <LoRaMacClassBProcess+0x190>
            Ctx.BeaconState = BEACON_STATE_RX;
 800cb10:	2309      	movs	r3, #9
 800cb12:	3444      	adds	r4, #68	; 0x44
 800cb14:	7023      	strb	r3, [r4, #0]
            LoRaMacClassBStopRxSlots( );
 800cb16:	f7ff fdcd 	bl	800c6b4 <LoRaMacClassBStopRxSlots>
            RxBeaconSetup( CLASSB_BEACON_RESERVED, false );
 800cb1a:	2100      	movs	r1, #0
 800cb1c:	e706      	b.n	800c92c <LoRaMacClassBProcess+0xd4>
            if( Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeReq == 1 )
 800cb1e:	0023      	movs	r3, r4
 800cb20:	33a4      	adds	r3, #164	; 0xa4
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	781a      	ldrb	r2, [r3, #0]
 800cb26:	0752      	lsls	r2, r2, #29
 800cb28:	d513      	bpl.n	800cb52 <LoRaMacClassBProcess+0x2fa>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true )
 800cb2a:	200c      	movs	r0, #12
 800cb2c:	f000 fb2c 	bl	800d188 <LoRaMacConfirmQueueIsCmdActive>
 800cb30:	2800      	cmp	r0, #0
 800cb32:	d003      	beq.n	800cb3c <LoRaMacClassBProcess+0x2e4>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND, MLME_BEACON_ACQUISITION );
 800cb34:	210c      	movs	r1, #12
 800cb36:	2010      	movs	r0, #16
 800cb38:	f000 fae4 	bl	800d104 <LoRaMacConfirmQueueSetStatus>
            LoRaMacClassBStopRxSlots( );
 800cb3c:	f7ff fdba 	bl	800c6b4 <LoRaMacClassBStopRxSlots>
            InitClassBDefaults( );
 800cb40:	f7ff fa5a 	bl	800bff8 <InitClassBDefaults>
            Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MacDone = 1;
 800cb44:	2320      	movs	r3, #32
 800cb46:	34a4      	adds	r4, #164	; 0xa4
 800cb48:	6822      	ldr	r2, [r4, #0]
 800cb4a:	7811      	ldrb	r1, [r2, #0]
 800cb4c:	430b      	orrs	r3, r1
 800cb4e:	7013      	strb	r3, [r2, #0]
    if( activateTimer == true )
 800cb50:	e6ef      	b.n	800c932 <LoRaMacClassBProcess+0xda>
                Ctx.LoRaMacClassBParams.MlmeIndication->MlmeIndication = MLME_BEACON_LOST;
 800cb52:	0022      	movs	r2, r4
 800cb54:	210f      	movs	r1, #15
 800cb56:	3298      	adds	r2, #152	; 0x98
 800cb58:	6812      	ldr	r2, [r2, #0]
 800cb5a:	8011      	strh	r1, [r2, #0]
                Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeInd = 1;
 800cb5c:	2208      	movs	r2, #8
 800cb5e:	7819      	ldrb	r1, [r3, #0]
 800cb60:	430a      	orrs	r2, r1
 800cb62:	701a      	strb	r2, [r3, #0]
 800cb64:	e7ea      	b.n	800cb3c <LoRaMacClassBProcess+0x2e4>
            Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 800cb66:	2300      	movs	r3, #0
 800cb68:	3444      	adds	r4, #68	; 0x44
 800cb6a:	7023      	strb	r3, [r4, #0]
    if( activateTimer == true )
 800cb6c:	e6e1      	b.n	800c932 <LoRaMacClassBProcess+0xda>
 800cb6e:	46c0      	nop			; (mov r8, r8)
 800cb70:	20000b58 	.word	0x20000b58
 800cb74:	20000b9c 	.word	0x20000b9c
 800cb78:	080117e0 	.word	0x080117e0
 800cb7c:	20000be4 	.word	0x20000be4
 800cb80:	00000848 	.word	0x00000848
 800cb84:	20000ba0 	.word	0x20000ba0
 800cb88:	20000bfc 	.word	0x20000bfc
 800cb8c:	006ddd00 	.word	0x006ddd00
            uint32_t frequency = Ctx.NvmCtx->PingSlotCtx.Frequency;
 800cb90:	0023      	movs	r3, r4
 800cb92:	33bc      	adds	r3, #188	; 0xbc
 800cb94:	681b      	ldr	r3, [r3, #0]
            if( Ctx.NvmCtx->PingSlotCtx.Ctrl.CustomFreq == 0 )
 800cb96:	7818      	ldrb	r0, [r3, #0]
 800cb98:	0002      	movs	r2, r0
 800cb9a:	400a      	ands	r2, r1
 800cb9c:	4208      	tst	r0, r1
 800cb9e:	d100      	bne.n	800cba2 <LoRaMacClassBProcess+0x34a>
 800cba0:	e08f      	b.n	800ccc2 <LoRaMacClassBProcess+0x46a>
            uint32_t frequency = Ctx.NvmCtx->PingSlotCtx.Frequency;
 800cba2:	6858      	ldr	r0, [r3, #4]
            if( Ctx.MulticastSlotState != PINGSLOT_STATE_RX )
 800cba4:	0023      	movs	r3, r4
 800cba6:	3346      	adds	r3, #70	; 0x46
 800cba8:	781a      	ldrb	r2, [r3, #0]
 800cbaa:	0023      	movs	r3, r4
 800cbac:	3345      	adds	r3, #69	; 0x45
 800cbae:	2a03      	cmp	r2, #3
 800cbb0:	d100      	bne.n	800cbb4 <LoRaMacClassBProcess+0x35c>
 800cbb2:	e08e      	b.n	800ccd2 <LoRaMacClassBProcess+0x47a>
                Ctx.PingSlotState = PINGSLOT_STATE_RX;
 800cbb4:	2203      	movs	r2, #3
 800cbb6:	701a      	strb	r2, [r3, #0]
                pingSlotRxConfig.Datarate = Ctx.NvmCtx->PingSlotCtx.Datarate;
 800cbb8:	0023      	movs	r3, r4
                pingSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 800cbba:	0026      	movs	r6, r4
                pingSlotRxConfig.Datarate = Ctx.NvmCtx->PingSlotCtx.Datarate;
 800cbbc:	33bc      	adds	r3, #188	; 0xbc
 800cbbe:	681b      	ldr	r3, [r3, #0]
                pingSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 800cbc0:	36b0      	adds	r6, #176	; 0xb0
                pingSlotRxConfig.Datarate = Ctx.NvmCtx->PingSlotCtx.Datarate;
 800cbc2:	7a1b      	ldrb	r3, [r3, #8]
                pingSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 800cbc4:	002f      	movs	r7, r5
                pingSlotRxConfig.Datarate = Ctx.NvmCtx->PingSlotCtx.Datarate;
 800cbc6:	776b      	strb	r3, [r5, #29]
                pingSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 800cbc8:	6833      	ldr	r3, [r6, #0]
 800cbca:	372c      	adds	r7, #44	; 0x2c
 800cbcc:	001a      	movs	r2, r3
 800cbce:	3235      	adds	r2, #53	; 0x35
 800cbd0:	7812      	ldrb	r2, [r2, #0]
                pingSlotRxConfig.RepeaterSupport = Ctx.LoRaMacClassBParams.LoRaMacParams->RepeaterSupport;
 800cbd2:	3340      	adds	r3, #64	; 0x40
                pingSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 800cbd4:	703a      	strb	r2, [r7, #0]
                pingSlotRxConfig.RepeaterSupport = Ctx.LoRaMacClassBParams.LoRaMacParams->RepeaterSupport;
 800cbd6:	002a      	movs	r2, r5
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	322d      	adds	r2, #45	; 0x2d
 800cbdc:	7013      	strb	r3, [r2, #0]
                pingSlotRxConfig.RxContinuous = false;
 800cbde:	2380      	movs	r3, #128	; 0x80
 800cbe0:	00db      	lsls	r3, r3, #3
 800cbe2:	85eb      	strh	r3, [r5, #46]	; 0x2e
                RegionRxConfig( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &pingSlotRxConfig, ( int8_t* )&Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 800cbe4:	0023      	movs	r3, r4
 800cbe6:	0029      	movs	r1, r5
 800cbe8:	339c      	adds	r3, #156	; 0x9c
 800cbea:	34ac      	adds	r4, #172	; 0xac
 800cbec:	681a      	ldr	r2, [r3, #0]
 800cbee:	6823      	ldr	r3, [r4, #0]
                pingSlotRxConfig.Frequency = frequency;
 800cbf0:	6228      	str	r0, [r5, #32]
                RegionRxConfig( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &pingSlotRxConfig, ( int8_t* )&Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 800cbf2:	7818      	ldrb	r0, [r3, #0]
 800cbf4:	3204      	adds	r2, #4
 800cbf6:	311c      	adds	r1, #28
 800cbf8:	f000 ffd6 	bl	800dba8 <RegionRxConfig>
                if( pingSlotRxConfig.RxContinuous == false )
 800cbfc:	4b63      	ldr	r3, [pc, #396]	; (800cd8c <LoRaMacClassBProcess+0x534>)
 800cbfe:	78ba      	ldrb	r2, [r7, #2]
                    Radio.Rx( 0 ); // Continuous mode
 800cc00:	2000      	movs	r0, #0
 800cc02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                if( pingSlotRxConfig.RxContinuous == false )
 800cc04:	2a00      	cmp	r2, #0
 800cc06:	d101      	bne.n	800cc0c <LoRaMacClassBProcess+0x3b4>
                    Radio.Rx( Ctx.LoRaMacClassBParams.LoRaMacParams->MaxRxWindow );
 800cc08:	6832      	ldr	r2, [r6, #0]
 800cc0a:	68d0      	ldr	r0, [r2, #12]
                    Radio.Rx( 0 ); // Continuous mode
 800cc0c:	4798      	blx	r3
        {
            LoRaMacClassBProcessPingSlot( );
        }
        if( events.Events.MulticastSlot == 1 )
 800cc0e:	9b02      	ldr	r3, [sp, #8]
 800cc10:	075b      	lsls	r3, r3, #29
 800cc12:	d568      	bpl.n	800cce6 <LoRaMacClassBProcess+0x48e>
    MulticastCtx_t *cur = Ctx.LoRaMacClassBParams.MulticastChannels;
 800cc14:	4c5e      	ldr	r4, [pc, #376]	; (800cd90 <LoRaMacClassBProcess+0x538>)
    TimerTime_t slotTime = 0;
 800cc16:	2300      	movs	r3, #0
    MulticastCtx_t *cur = Ctx.LoRaMacClassBParams.MulticastChannels;
 800cc18:	0022      	movs	r2, r4
 800cc1a:	32b4      	adds	r2, #180	; 0xb4
 800cc1c:	6812      	ldr	r2, [r2, #0]
    TimerTime_t slotTime = 0;
 800cc1e:	9305      	str	r3, [sp, #20]
    if( cur == NULL )
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d060      	beq.n	800cce6 <LoRaMacClassBProcess+0x48e>
    if( Ctx.MulticastSlotState == PINGSLOT_STATE_RX )
 800cc24:	0026      	movs	r6, r4
 800cc26:	3646      	adds	r6, #70	; 0x46
 800cc28:	7831      	ldrb	r1, [r6, #0]
 800cc2a:	2903      	cmp	r1, #3
 800cc2c:	d05b      	beq.n	800cce6 <LoRaMacClassBProcess+0x48e>
    switch( Ctx.MulticastSlotState )
 800cc2e:	2901      	cmp	r1, #1
 800cc30:	d00e      	beq.n	800cc50 <LoRaMacClassBProcess+0x3f8>
 800cc32:	2902      	cmp	r1, #2
 800cc34:	d059      	beq.n	800ccea <LoRaMacClassBProcess+0x492>
 800cc36:	4299      	cmp	r1, r3
 800cc38:	d000      	beq.n	800cc3c <LoRaMacClassBProcess+0x3e4>
 800cc3a:	e0a5      	b.n	800cd88 <LoRaMacClassBProcess+0x530>
                ComputePingOffset( Ctx.BeaconCtx.BeaconTime.Seconds,
 800cc3c:	0010      	movs	r0, r2
 800cc3e:	3028      	adds	r0, #40	; 0x28
 800cc40:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800cc42:	9000      	str	r0, [sp, #0]
 800cc44:	6852      	ldr	r2, [r2, #4]
 800cc46:	6960      	ldr	r0, [r4, #20]
 800cc48:	f7ff f8d6 	bl	800bdf8 <ComputePingOffset>
            Ctx.MulticastSlotState = PINGSLOT_STATE_SET_TIMER;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	7033      	strb	r3, [r6, #0]
            cur = Ctx.LoRaMacClassBParams.MulticastChannels;
 800cc50:	0023      	movs	r3, r4
 800cc52:	33b4      	adds	r3, #180	; 0xb4
 800cc54:	681f      	ldr	r7, [r3, #0]
            Ctx.PingSlotCtx.NextMulticastChannel = NULL;
 800cc56:	2300      	movs	r3, #0
 800cc58:	60a3      	str	r3, [r4, #8]
                if( CalcNextSlotTime( cur->PingOffset, cur->PingPeriod, cur->PingNb, &slotTime ) == true )
 800cc5a:	1d7b      	adds	r3, r7, #5
 800cc5c:	7fda      	ldrb	r2, [r3, #31]
 800cc5e:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800cc60:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 800cc62:	ab05      	add	r3, sp, #20
 800cc64:	f7ff f87c 	bl	800bd60 <CalcNextSlotTime>
 800cc68:	1e06      	subs	r6, r0, #0
 800cc6a:	d039      	beq.n	800cce0 <LoRaMacClassBProcess+0x488>
                        multicastSlotTime = slotTime;
 800cc6c:	9e05      	ldr	r6, [sp, #20]
                        Ctx.PingSlotCtx.NextMulticastChannel = cur;
 800cc6e:	60a7      	str	r7, [r4, #8]
                if( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 1 )
 800cc70:	7b23      	ldrb	r3, [r4, #12]
 800cc72:	079b      	lsls	r3, r3, #30
 800cc74:	d514      	bpl.n	800cca0 <LoRaMacClassBProcess+0x448>
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 800cc76:	0021      	movs	r1, r4
                                                    Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 800cc78:	0023      	movs	r3, r4
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 800cc7a:	0020      	movs	r0, r4
 800cc7c:	002f      	movs	r7, r5
 800cc7e:	31bc      	adds	r1, #188	; 0xbc
 800cc80:	6809      	ldr	r1, [r1, #0]
                                                    Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 800cc82:	33b0      	adds	r3, #176	; 0xb0
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 800cc84:	30ac      	adds	r0, #172	; 0xac
                                                    Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 800cc86:	681b      	ldr	r3, [r3, #0]
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 800cc88:	6800      	ldr	r0, [r0, #0]
 800cc8a:	7a09      	ldrb	r1, [r1, #8]
 800cc8c:	3730      	adds	r7, #48	; 0x30
 800cc8e:	7a1a      	ldrb	r2, [r3, #8]
 800cc90:	7800      	ldrb	r0, [r0, #0]
 800cc92:	9700      	str	r7, [sp, #0]
 800cc94:	685b      	ldr	r3, [r3, #4]
 800cc96:	b249      	sxtb	r1, r1
 800cc98:	f000 ff7b 	bl	800db92 <RegionComputeRxWindowParameters>
                    Ctx.PingSlotCtx.SymbolTimeout = multicastSlotRxConfig.WindowTimeout;
 800cc9c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800cc9e:	80e3      	strh	r3, [r4, #6]
                if( ( int32_t )multicastSlotTime > multicastSlotRxConfig.WindowOffset )
 800cca0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800cca2:	42b3      	cmp	r3, r6
 800cca4:	da00      	bge.n	800cca8 <LoRaMacClassBProcess+0x450>
                    multicastSlotTime += multicastSlotRxConfig.WindowOffset;
 800cca6:	18f6      	adds	r6, r6, r3
                Ctx.MulticastSlotState = PINGSLOT_STATE_IDLE;
 800cca8:	2202      	movs	r2, #2
                TimerSetValue( &Ctx.MulticastSlotTimer, multicastSlotTime );
 800ccaa:	0031      	movs	r1, r6
                Ctx.MulticastSlotState = PINGSLOT_STATE_IDLE;
 800ccac:	4b38      	ldr	r3, [pc, #224]	; (800cd90 <LoRaMacClassBProcess+0x538>)
                TimerSetValue( &Ctx.MulticastSlotTimer, multicastSlotTime );
 800ccae:	4c39      	ldr	r4, [pc, #228]	; (800cd94 <LoRaMacClassBProcess+0x53c>)
                Ctx.MulticastSlotState = PINGSLOT_STATE_IDLE;
 800ccb0:	3346      	adds	r3, #70	; 0x46
 800ccb2:	701a      	strb	r2, [r3, #0]
                TimerSetValue( &Ctx.MulticastSlotTimer, 1 );
 800ccb4:	0020      	movs	r0, r4
 800ccb6:	f004 f809 	bl	8010ccc <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.MulticastSlotTimer );
 800ccba:	0020      	movs	r0, r4
 800ccbc:	f003 ffc4 	bl	8010c48 <UTIL_TIMER_Start>
                break;
 800ccc0:	e011      	b.n	800cce6 <LoRaMacClassBProcess+0x48e>
                frequency = CalcDownlinkChannelAndFrequency( *Ctx.LoRaMacClassBParams.LoRaMacDevAddr, Ctx.BeaconCtx.BeaconTime.Seconds,
 800ccc2:	0023      	movs	r3, r4
 800ccc4:	33a8      	adds	r3, #168	; 0xa8
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	6961      	ldr	r1, [r4, #20]
 800ccca:	6818      	ldr	r0, [r3, #0]
 800cccc:	f7ff f8d8 	bl	800be80 <CalcDownlinkChannelAndFrequency.constprop.0>
 800ccd0:	e768      	b.n	800cba4 <LoRaMacClassBProcess+0x34c>
                Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800ccd2:	2200      	movs	r2, #0
                TimerSetValue( &Ctx.PingSlotTimer, CLASSB_PING_SLOT_WINDOW );
 800ccd4:	211e      	movs	r1, #30
 800ccd6:	4c30      	ldr	r4, [pc, #192]	; (800cd98 <LoRaMacClassBProcess+0x540>)
                Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800ccd8:	701a      	strb	r2, [r3, #0]
                TimerSetValue( &Ctx.PingSlotTimer, CLASSB_PING_SLOT_WINDOW );
 800ccda:	e679      	b.n	800c9d0 <LoRaMacClassBProcess+0x178>
            Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800ccdc:	7033      	strb	r3, [r6, #0]
}
 800ccde:	e796      	b.n	800cc0e <LoRaMacClassBProcess+0x3b6>
            if( Ctx.PingSlotCtx.NextMulticastChannel != NULL )
 800cce0:	68a3      	ldr	r3, [r4, #8]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d1c4      	bne.n	800cc70 <LoRaMacClassBProcess+0x418>
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800cce6:	b007      	add	sp, #28
 800cce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( Ctx.PingSlotCtx.NextMulticastChannel == NULL )
 800ccea:	68a3      	ldr	r3, [r4, #8]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d103      	bne.n	800ccf8 <LoRaMacClassBProcess+0x4a0>
                TimerSetValue( &Ctx.MulticastSlotTimer, 1 );
 800ccf0:	2101      	movs	r1, #1
 800ccf2:	4c28      	ldr	r4, [pc, #160]	; (800cd94 <LoRaMacClassBProcess+0x53c>)
                Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800ccf4:	7033      	strb	r3, [r6, #0]
                TimerSetValue( &Ctx.MulticastSlotTimer, 1 );
 800ccf6:	e7dd      	b.n	800ccb4 <LoRaMacClassBProcess+0x45c>
            frequency = Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.RxParams.ClassB.Frequency;
 800ccf8:	699a      	ldr	r2, [r3, #24]
            if( frequency == 0 )
 800ccfa:	2a00      	cmp	r2, #0
 800ccfc:	d104      	bne.n	800cd08 <LoRaMacClassBProcess+0x4b0>
                frequency = CalcDownlinkChannelAndFrequency( Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.Address,
 800ccfe:	6961      	ldr	r1, [r4, #20]
 800cd00:	6858      	ldr	r0, [r3, #4]
 800cd02:	f7ff f8bd 	bl	800be80 <CalcDownlinkChannelAndFrequency.constprop.0>
 800cd06:	0002      	movs	r2, r0
            Ctx.MulticastSlotState = PINGSLOT_STATE_RX;
 800cd08:	0023      	movs	r3, r4
 800cd0a:	2103      	movs	r1, #3
 800cd0c:	3346      	adds	r3, #70	; 0x46
 800cd0e:	7019      	strb	r1, [r3, #0]
            multicastSlotRxConfig.Datarate = Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.RxParams.ClassB.Datarate;
 800cd10:	0029      	movs	r1, r5
 800cd12:	68a3      	ldr	r3, [r4, #8]
 800cd14:	3130      	adds	r1, #48	; 0x30
 800cd16:	7f1b      	ldrb	r3, [r3, #28]
            if( Ctx.PingSlotState == PINGSLOT_STATE_RX )
 800cd18:	0027      	movs	r7, r4
            multicastSlotRxConfig.Datarate = Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.RxParams.ClassB.Datarate;
 800cd1a:	704b      	strb	r3, [r1, #1]
            multicastSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 800cd1c:	0023      	movs	r3, r4
 800cd1e:	33b0      	adds	r3, #176	; 0xb0
 800cd20:	681b      	ldr	r3, [r3, #0]
            if( Ctx.PingSlotState == PINGSLOT_STATE_RX )
 800cd22:	3745      	adds	r7, #69	; 0x45
            multicastSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 800cd24:	0018      	movs	r0, r3
 800cd26:	3035      	adds	r0, #53	; 0x35
 800cd28:	7800      	ldrb	r0, [r0, #0]
            multicastSlotRxConfig.RepeaterSupport = Ctx.LoRaMacClassBParams.LoRaMacParams->RepeaterSupport;
 800cd2a:	3340      	adds	r3, #64	; 0x40
            multicastSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 800cd2c:	7408      	strb	r0, [r1, #16]
            multicastSlotRxConfig.RepeaterSupport = Ctx.LoRaMacClassBParams.LoRaMacParams->RepeaterSupport;
 800cd2e:	781b      	ldrb	r3, [r3, #0]
            multicastSlotRxConfig.Frequency = frequency;
 800cd30:	636a      	str	r2, [r5, #52]	; 0x34
            multicastSlotRxConfig.RxContinuous = false;
 800cd32:	22a0      	movs	r2, #160	; 0xa0
            multicastSlotRxConfig.RepeaterSupport = Ctx.LoRaMacClassBParams.LoRaMacParams->RepeaterSupport;
 800cd34:	744b      	strb	r3, [r1, #17]
            multicastSlotRxConfig.RxContinuous = false;
 800cd36:	00d2      	lsls	r2, r2, #3
 800cd38:	1d2b      	adds	r3, r5, #4
 800cd3a:	87da      	strh	r2, [r3, #62]	; 0x3e
            RegionRxConfig( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &multicastSlotRxConfig, ( int8_t* )&Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 800cd3c:	0023      	movs	r3, r4
 800cd3e:	339c      	adds	r3, #156	; 0x9c
 800cd40:	681a      	ldr	r2, [r3, #0]
 800cd42:	0023      	movs	r3, r4
 800cd44:	33ac      	adds	r3, #172	; 0xac
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	3204      	adds	r2, #4
 800cd4a:	7818      	ldrb	r0, [r3, #0]
 800cd4c:	f000 ff2c 	bl	800dba8 <RegionRxConfig>
            if( Ctx.PingSlotState == PINGSLOT_STATE_RX )
 800cd50:	783b      	ldrb	r3, [r7, #0]
 800cd52:	4e0e      	ldr	r6, [pc, #56]	; (800cd8c <LoRaMacClassBProcess+0x534>)
 800cd54:	2b03      	cmp	r3, #3
 800cd56:	d10c      	bne.n	800cd72 <LoRaMacClassBProcess+0x51a>
                Radio.Standby( );
 800cd58:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800cd5a:	9302      	str	r3, [sp, #8]
 800cd5c:	4798      	blx	r3
                Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	703b      	strb	r3, [r7, #0]
                TimerSetValue( &Ctx.PingSlotTimer, CLASSB_PING_SLOT_WINDOW );
 800cd62:	4f0d      	ldr	r7, [pc, #52]	; (800cd98 <LoRaMacClassBProcess+0x540>)
 800cd64:	211e      	movs	r1, #30
 800cd66:	0038      	movs	r0, r7
 800cd68:	f003 ffb0 	bl	8010ccc <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.PingSlotTimer );
 800cd6c:	0038      	movs	r0, r7
 800cd6e:	f003 ff6b 	bl	8010c48 <UTIL_TIMER_Start>
            if( multicastSlotRxConfig.RxContinuous == false )
 800cd72:	3530      	adds	r5, #48	; 0x30
 800cd74:	7caa      	ldrb	r2, [r5, #18]
                Radio.Rx( 0 ); // Continuous mode
 800cd76:	2000      	movs	r0, #0
 800cd78:	6b73      	ldr	r3, [r6, #52]	; 0x34
            if( multicastSlotRxConfig.RxContinuous == false )
 800cd7a:	2a00      	cmp	r2, #0
 800cd7c:	d102      	bne.n	800cd84 <LoRaMacClassBProcess+0x52c>
                Radio.Rx( Ctx.LoRaMacClassBParams.LoRaMacParams->MaxRxWindow );
 800cd7e:	34b0      	adds	r4, #176	; 0xb0
 800cd80:	6822      	ldr	r2, [r4, #0]
 800cd82:	68d0      	ldr	r0, [r2, #12]
                Radio.Rx( 0 ); // Continuous mode
 800cd84:	4798      	blx	r3
 800cd86:	e7ae      	b.n	800cce6 <LoRaMacClassBProcess+0x48e>
            Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800cd88:	7033      	strb	r3, [r6, #0]
            break;
 800cd8a:	e7ac      	b.n	800cce6 <LoRaMacClassBProcess+0x48e>
 800cd8c:	080117e0 	.word	0x080117e0
 800cd90:	20000b9c 	.word	0x20000b9c
 800cd94:	20000c14 	.word	0x20000c14
 800cd98:	20000bfc 	.word	0x20000bfc

0800cd9c <NvmCtxCallback>:
/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
    if( CommandsNvmCtxChanged != NULL )
 800cd9c:	4b03      	ldr	r3, [pc, #12]	; (800cdac <NvmCtxCallback+0x10>)
{
 800cd9e:	b510      	push	{r4, lr}
    if( CommandsNvmCtxChanged != NULL )
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d000      	beq.n	800cda8 <NvmCtxCallback+0xc>
    {
        CommandsNvmCtxChanged( );
 800cda6:	4798      	blx	r3
    }
}
 800cda8:	bd10      	pop	{r4, pc}
 800cdaa:	46c0      	nop			; (mov r8, r8)
 800cdac:	20000c5c 	.word	0x20000c5c

0800cdb0 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 800cdb0:	b570      	push	{r4, r5, r6, lr}
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 800cdb2:	4d06      	ldr	r5, [pc, #24]	; (800cdcc <LoRaMacCommandsInit+0x1c>)
{
 800cdb4:	0004      	movs	r4, r0
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 800cdb6:	22fc      	movs	r2, #252	; 0xfc
 800cdb8:	0028      	movs	r0, r5
 800cdba:	2100      	movs	r1, #0
 800cdbc:	f002 f82e 	bl	800ee1c <memset1>
    list->First = NULL;
 800cdc0:	2000      	movs	r0, #0

    LinkedListInit( &NvmCtx.MacCommandList );

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 800cdc2:	4b03      	ldr	r3, [pc, #12]	; (800cdd0 <LoRaMacCommandsInit+0x20>)
    list->First = NULL;
 800cdc4:	6028      	str	r0, [r5, #0]
    list->Last = NULL;
 800cdc6:	6068      	str	r0, [r5, #4]
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 800cdc8:	601c      	str	r4, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
}
 800cdca:	bd70      	pop	{r4, r5, r6, pc}
 800cdcc:	20000c60 	.word	0x20000c60
 800cdd0:	20000c5c 	.word	0x20000c5c

0800cdd4 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 800cdd4:	0001      	movs	r1, r0
 800cdd6:	b510      	push	{r4, lr}
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
        return LORAMAC_COMMANDS_SUCCESS;
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800cdd8:	2001      	movs	r0, #1
    if( commandsNvmCtx != NULL )
 800cdda:	2900      	cmp	r1, #0
 800cddc:	d004      	beq.n	800cde8 <LoRaMacCommandsRestoreNvmCtx+0x14>
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 800cdde:	4803      	ldr	r0, [pc, #12]	; (800cdec <LoRaMacCommandsRestoreNvmCtx+0x18>)
 800cde0:	22fc      	movs	r2, #252	; 0xfc
 800cde2:	f002 f805 	bl	800edf0 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 800cde6:	2000      	movs	r0, #0
    }
}
 800cde8:	bd10      	pop	{r4, pc}
 800cdea:	46c0      	nop			; (mov r8, r8)
 800cdec:	20000c60 	.word	0x20000c60

0800cdf0 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
    *commandsNvmCtxSize = sizeof( NvmCtx );
 800cdf0:	23fc      	movs	r3, #252	; 0xfc
 800cdf2:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 800cdf4:	4800      	ldr	r0, [pc, #0]	; (800cdf8 <LoRaMacCommandsGetNvmCtx+0x8>)
 800cdf6:	4770      	bx	lr
 800cdf8:	20000c60 	.word	0x20000c60

0800cdfc <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 800cdfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdfe:	0015      	movs	r5, r2
    if( payload == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ce00:	2701      	movs	r7, #1
{
 800ce02:	9001      	str	r0, [sp, #4]
    if( payload == NULL )
 800ce04:	2900      	cmp	r1, #0
 800ce06:	d03b      	beq.n	800ce80 <LoRaMacCommandsAddCmd+0x84>
 800ce08:	2400      	movs	r4, #0
 800ce0a:	4b21      	ldr	r3, [pc, #132]	; (800ce90 <LoRaMacCommandsAddCmd+0x94>)
    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 800ce0c:	0122      	lsls	r2, r4, #4
 800ce0e:	0018      	movs	r0, r3
 800ce10:	4694      	mov	ip, r2
 800ce12:	001a      	movs	r2, r3
 800ce14:	3010      	adds	r0, #16
        if( mem[size] != 0x00 )
 800ce16:	7817      	ldrb	r7, [r2, #0]
 800ce18:	2f00      	cmp	r7, #0
 800ce1a:	d133      	bne.n	800ce84 <LoRaMacCommandsAddCmd+0x88>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800ce1c:	3201      	adds	r2, #1
 800ce1e:	4282      	cmp	r2, r0
 800ce20:	d1f9      	bne.n	800ce16 <LoRaMacCommandsAddCmd+0x1a>
    if( list->First == NULL )
 800ce22:	481c      	ldr	r0, [pc, #112]	; (800ce94 <LoRaMacCommandsAddCmd+0x98>)
 800ce24:	6802      	ldr	r2, [r0, #0]
 800ce26:	2a00      	cmp	r2, #0
 800ce28:	d100      	bne.n	800ce2c <LoRaMacCommandsAddCmd+0x30>
        list->First = element;
 800ce2a:	6003      	str	r3, [r0, #0]
    if( list->Last )
 800ce2c:	6842      	ldr	r2, [r0, #4]
 800ce2e:	2a00      	cmp	r2, #0
 800ce30:	d000      	beq.n	800ce34 <LoRaMacCommandsAddCmd+0x38>
        list->Last->Next = element;
 800ce32:	6013      	str	r3, [r2, #0]
    list->Last = element;
 800ce34:	6043      	str	r3, [r0, #4]
    element->Next = NULL;
 800ce36:	0122      	lsls	r2, r4, #4
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800ce38:	9b01      	ldr	r3, [sp, #4]
    element->Next = NULL;
 800ce3a:	1882      	adds	r2, r0, r2
    newCmd->PayloadSize = payloadSize;
 800ce3c:	3401      	adds	r4, #1
    newCmd->CID = cid;
 800ce3e:	7313      	strb	r3, [r2, #12]
    newCmd->PayloadSize = payloadSize;
 800ce40:	0123      	lsls	r3, r4, #4
 800ce42:	50c5      	str	r5, [r0, r3]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800ce44:	4663      	mov	r3, ip
    element->Next = NULL;
 800ce46:	2600      	movs	r6, #0
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800ce48:	330d      	adds	r3, #13
    element->Next = NULL;
 800ce4a:	6096      	str	r6, [r2, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800ce4c:	18c0      	adds	r0, r0, r3
 800ce4e:	b2aa      	uxth	r2, r5
 800ce50:	f001 ffce 	bl	800edf0 <memcpy1>
    switch( cid )
 800ce54:	9b01      	ldr	r3, [sp, #4]
            return true;
 800ce56:	2201      	movs	r2, #1
    switch( cid )
 800ce58:	2b05      	cmp	r3, #5
 800ce5a:	d006      	beq.n	800ce6a <LoRaMacCommandsAddCmd+0x6e>
 800ce5c:	0018      	movs	r0, r3
 800ce5e:	2302      	movs	r3, #2
 800ce60:	3808      	subs	r0, #8
 800ce62:	b2c0      	uxtb	r0, r0
 800ce64:	4283      	cmp	r3, r0
 800ce66:	4176      	adcs	r6, r6
 800ce68:	b2f2      	uxtb	r2, r6
    newCmd->IsSticky = IsSticky( cid );
 800ce6a:	4b0a      	ldr	r3, [pc, #40]	; (800ce94 <LoRaMacCommandsAddCmd+0x98>)
 800ce6c:	0124      	lsls	r4, r4, #4
 800ce6e:	191c      	adds	r4, r3, r4

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800ce70:	33f8      	adds	r3, #248	; 0xf8
    newCmd->IsSticky = IsSticky( cid );
 800ce72:	7122      	strb	r2, [r4, #4]
    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800ce74:	681a      	ldr	r2, [r3, #0]
 800ce76:	3201      	adds	r2, #1
 800ce78:	1955      	adds	r5, r2, r5
 800ce7a:	601d      	str	r5, [r3, #0]

    NvmCtxCallback( );
 800ce7c:	f7ff ff8e 	bl	800cd9c <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800ce80:	0038      	movs	r0, r7
 800ce82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( itr == NUM_OF_MAC_COMMANDS )
 800ce84:	3401      	adds	r4, #1
 800ce86:	0003      	movs	r3, r0
 800ce88:	2c0f      	cmp	r4, #15
 800ce8a:	d1bf      	bne.n	800ce0c <LoRaMacCommandsAddCmd+0x10>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800ce8c:	2702      	movs	r7, #2
 800ce8e:	e7f7      	b.n	800ce80 <LoRaMacCommandsAddCmd+0x84>
 800ce90:	20000c68 	.word	0x20000c68
 800ce94:	20000c60 	.word	0x20000c60

0800ce98 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 800ce98:	b510      	push	{r4, lr}
    if( macCmd == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ce9a:	2401      	movs	r4, #1
    if( macCmd == NULL )
 800ce9c:	2800      	cmp	r0, #0
 800ce9e:	d023      	beq.n	800cee8 <LoRaMacCommandsRemoveCmd+0x50>
    curElement = list->First;
 800cea0:	4b12      	ldr	r3, [pc, #72]	; (800ceec <LoRaMacCommandsRemoveCmd+0x54>)
 800cea2:	681a      	ldr	r2, [r3, #0]
    if( element != curElement )
 800cea4:	4290      	cmp	r0, r2
 800cea6:	d104      	bne.n	800ceb2 <LoRaMacCommandsRemoveCmd+0x1a>
        list->First = element->Next;
 800cea8:	6802      	ldr	r2, [r0, #0]
 800ceaa:	601a      	str	r2, [r3, #0]
 800ceac:	2200      	movs	r2, #0
 800ceae:	e005      	b.n	800cebc <LoRaMacCommandsRemoveCmd+0x24>
 800ceb0:	000a      	movs	r2, r1
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800ceb2:	2a00      	cmp	r2, #0
 800ceb4:	d002      	beq.n	800cebc <LoRaMacCommandsRemoveCmd+0x24>
 800ceb6:	6811      	ldr	r1, [r2, #0]
 800ceb8:	4288      	cmp	r0, r1
 800ceba:	d1f9      	bne.n	800ceb0 <LoRaMacCommandsRemoveCmd+0x18>
    if( list->Last == element )
 800cebc:	6859      	ldr	r1, [r3, #4]
 800cebe:	4288      	cmp	r0, r1
 800cec0:	d100      	bne.n	800cec4 <LoRaMacCommandsRemoveCmd+0x2c>
        list->Last = PrevElement;
 800cec2:	605a      	str	r2, [r3, #4]
    if( PrevElement != NULL )
 800cec4:	2a00      	cmp	r2, #0
 800cec6:	d001      	beq.n	800cecc <LoRaMacCommandsRemoveCmd+0x34>
        PrevElement->Next = element->Next;
 800cec8:	6801      	ldr	r1, [r0, #0]
 800ceca:	6011      	str	r1, [r2, #0]
    element->Next = NULL;
 800cecc:	2400      	movs	r4, #0
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800cece:	33f8      	adds	r3, #248	; 0xf8
 800ced0:	681a      	ldr	r2, [r3, #0]
 800ced2:	6881      	ldr	r1, [r0, #8]
 800ced4:	3a01      	subs	r2, #1
 800ced6:	1a52      	subs	r2, r2, r1
    element->Next = NULL;
 800ced8:	6004      	str	r4, [r0, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800ceda:	0021      	movs	r1, r4
    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800cedc:	601a      	str	r2, [r3, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800cede:	2210      	movs	r2, #16
 800cee0:	f001 ff9c 	bl	800ee1c <memset1>
    if( FreeMacCommandSlot( macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    NvmCtxCallback( );
 800cee4:	f7ff ff5a 	bl	800cd9c <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800cee8:	0020      	movs	r0, r4
 800ceea:	bd10      	pop	{r4, pc}
 800ceec:	20000c60 	.word	0x20000c60

0800cef0 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 800cef0:	4b08      	ldr	r3, [pc, #32]	; (800cf14 <LoRaMacCommandsRemoveNoneStickyCmds+0x24>)
{
 800cef2:	b570      	push	{r4, r5, r6, lr}
    curElement = NvmCtx.MacCommandList.First;
 800cef4:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800cef6:	2c00      	cmp	r4, #0
 800cef8:	d103      	bne.n	800cf02 <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
        {
            curElement = curElement->Next;
        }
    }

    NvmCtxCallback( );
 800cefa:	f7ff ff4f 	bl	800cd9c <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800cefe:	0020      	movs	r0, r4
 800cf00:	bd70      	pop	{r4, r5, r6, pc}
        if( curElement->IsSticky == false )
 800cf02:	7b23      	ldrb	r3, [r4, #12]
 800cf04:	6825      	ldr	r5, [r4, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d102      	bne.n	800cf10 <LoRaMacCommandsRemoveNoneStickyCmds+0x20>
            LoRaMacCommandsRemoveCmd( curElement );
 800cf0a:	0020      	movs	r0, r4
 800cf0c:	f7ff ffc4 	bl	800ce98 <LoRaMacCommandsRemoveCmd>
{
 800cf10:	002c      	movs	r4, r5
 800cf12:	e7f0      	b.n	800cef6 <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
 800cf14:	20000c60 	.word	0x20000c60

0800cf18 <LoRaMacCommandsRemoveStickyAnsCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 800cf18:	4b0a      	ldr	r3, [pc, #40]	; (800cf44 <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>)
{
 800cf1a:	b570      	push	{r4, r5, r6, lr}
    curElement = NvmCtx.MacCommandList.First;
 800cf1c:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800cf1e:	2c00      	cmp	r4, #0
 800cf20:	d103      	bne.n	800cf2a <LoRaMacCommandsRemoveStickyAnsCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
        }
        curElement = nexElement;
    }

    NvmCtxCallback( );
 800cf22:	f7ff ff3b 	bl	800cd9c <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800cf26:	0020      	movs	r0, r4
 800cf28:	bd70      	pop	{r4, r5, r6, pc}
        if( IsSticky( curElement->CID ) == true )
 800cf2a:	7923      	ldrb	r3, [r4, #4]
        nexElement = curElement->Next;
 800cf2c:	6825      	ldr	r5, [r4, #0]
    switch( cid )
 800cf2e:	2b05      	cmp	r3, #5
 800cf30:	d002      	beq.n	800cf38 <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
 800cf32:	3b08      	subs	r3, #8
 800cf34:	2b02      	cmp	r3, #2
 800cf36:	d802      	bhi.n	800cf3e <LoRaMacCommandsRemoveStickyAnsCmds+0x26>
            LoRaMacCommandsRemoveCmd( curElement );
 800cf38:	0020      	movs	r0, r4
 800cf3a:	f7ff ffad 	bl	800ce98 <LoRaMacCommandsRemoveCmd>
{
 800cf3e:	002c      	movs	r4, r5
 800cf40:	e7ed      	b.n	800cf1e <LoRaMacCommandsRemoveStickyAnsCmds+0x6>
 800cf42:	46c0      	nop			; (mov r8, r8)
 800cf44:	20000c60 	.word	0x20000c60

0800cf48 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 800cf48:	0003      	movs	r3, r0
    if( size == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800cf4a:	2001      	movs	r0, #1
    if( size == NULL )
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d004      	beq.n	800cf5a <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    }
    *size = NvmCtx.SerializedCmdsSize;
    return LORAMAC_COMMANDS_SUCCESS;
 800cf50:	2000      	movs	r0, #0
    *size = NvmCtx.SerializedCmdsSize;
 800cf52:	4a02      	ldr	r2, [pc, #8]	; (800cf5c <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800cf54:	32f8      	adds	r2, #248	; 0xf8
 800cf56:	6812      	ldr	r2, [r2, #0]
 800cf58:	601a      	str	r2, [r3, #0]
}
 800cf5a:	4770      	bx	lr
 800cf5c:	20000c60 	.word	0x20000c60

0800cf60 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800cf60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf62:	000f      	movs	r7, r1
 800cf64:	9001      	str	r0, [sp, #4]
 800cf66:	0016      	movs	r6, r2
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800cf68:	2001      	movs	r0, #1
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800cf6a:	2a00      	cmp	r2, #0
 800cf6c:	d00a      	beq.n	800cf84 <LoRaMacCommandsSerializeCmds+0x24>
 800cf6e:	2900      	cmp	r1, #0
 800cf70:	d008      	beq.n	800cf84 <LoRaMacCommandsSerializeCmds+0x24>
    MacCommand_t* curElement = NvmCtx.MacCommandList.First;
 800cf72:	4b13      	ldr	r3, [pc, #76]	; (800cfc0 <LoRaMacCommandsSerializeCmds+0x60>)
 800cf74:	681c      	ldr	r4, [r3, #0]
    uint8_t itr = 0;
 800cf76:	2300      	movs	r3, #0
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800cf78:	2c00      	cmp	r4, #0
 800cf7a:	d104      	bne.n	800cf86 <LoRaMacCommandsSerializeCmds+0x26>
        LoRaMacCommandsRemoveCmd( curElement );
        curElement = nextElement;
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800cf7c:	0038      	movs	r0, r7
 800cf7e:	f7ff ffe3 	bl	800cf48 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800cf82:	2000      	movs	r0, #0
}
 800cf84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800cf86:	9a01      	ldr	r2, [sp, #4]
 800cf88:	1ad1      	subs	r1, r2, r3
 800cf8a:	68a2      	ldr	r2, [r4, #8]
 800cf8c:	3201      	adds	r2, #1
 800cf8e:	4291      	cmp	r1, r2
 800cf90:	d30e      	bcc.n	800cfb0 <LoRaMacCommandsSerializeCmds+0x50>
            buffer[itr++] = curElement->CID;
 800cf92:	7922      	ldrb	r2, [r4, #4]
 800cf94:	1c5d      	adds	r5, r3, #1
 800cf96:	54f2      	strb	r2, [r6, r3]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800cf98:	68a3      	ldr	r3, [r4, #8]
            buffer[itr++] = curElement->CID;
 800cf9a:	b2ed      	uxtb	r5, r5
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800cf9c:	b29a      	uxth	r2, r3
 800cf9e:	1d61      	adds	r1, r4, #5
 800cfa0:	1970      	adds	r0, r6, r5
 800cfa2:	f001 ff25 	bl	800edf0 <memcpy1>
            itr += curElement->PayloadSize;
 800cfa6:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
 800cfa8:	6824      	ldr	r4, [r4, #0]
            itr += curElement->PayloadSize;
 800cfaa:	18ed      	adds	r5, r5, r3
 800cfac:	b2eb      	uxtb	r3, r5
        curElement = curElement->Next;
 800cfae:	e7e3      	b.n	800cf78 <LoRaMacCommandsSerializeCmds+0x18>
        nextElement = curElement->Next;
 800cfb0:	0020      	movs	r0, r4
 800cfb2:	6824      	ldr	r4, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800cfb4:	f7ff ff70 	bl	800ce98 <LoRaMacCommandsRemoveCmd>
    while( curElement != NULL )
 800cfb8:	2c00      	cmp	r4, #0
 800cfba:	d1f9      	bne.n	800cfb0 <LoRaMacCommandsSerializeCmds+0x50>
 800cfbc:	e7de      	b.n	800cf7c <LoRaMacCommandsSerializeCmds+0x1c>
 800cfbe:	46c0      	nop			; (mov r8, r8)
 800cfc0:	20000c60 	.word	0x20000c60

0800cfc4 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 800cfc4:	0003      	movs	r3, r0
    if( cmdsPending == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800cfc6:	2001      	movs	r0, #1
    if( cmdsPending == NULL )
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d00b      	beq.n	800cfe4 <LoRaMacCommandsStickyCmdsPending+0x20>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 800cfcc:	4a07      	ldr	r2, [pc, #28]	; (800cfec <LoRaMacCommandsStickyCmdsPending+0x28>)
 800cfce:	6810      	ldr	r0, [r2, #0]

    *cmdsPending = false;
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	d005      	beq.n	800cfe4 <LoRaMacCommandsStickyCmdsPending+0x20>
    {
        if( curElement->IsSticky == true )
 800cfd8:	7b02      	ldrb	r2, [r0, #12]
 800cfda:	2a00      	cmp	r2, #0
 800cfdc:	d003      	beq.n	800cfe6 <LoRaMacCommandsStickyCmdsPending+0x22>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 800cfde:	2201      	movs	r2, #1
            return LORAMAC_COMMANDS_SUCCESS;
 800cfe0:	2000      	movs	r0, #0
            *cmdsPending = true;
 800cfe2:	701a      	strb	r2, [r3, #0]
        }
        curElement = curElement->Next;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800cfe4:	4770      	bx	lr
        curElement = curElement->Next;
 800cfe6:	6800      	ldr	r0, [r0, #0]
 800cfe8:	e7f4      	b.n	800cfd4 <LoRaMacCommandsStickyCmdsPending+0x10>
 800cfea:	46c0      	nop			; (mov r8, r8)
 800cfec:	20000c60 	.word	0x20000c60

0800cff0 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800cff0:	3802      	subs	r0, #2
 800cff2:	b2c3      	uxtb	r3, r0
{
 800cff4:	2000      	movs	r0, #0
 800cff6:	2b11      	cmp	r3, #17
 800cff8:	d801      	bhi.n	800cffe <LoRaMacCommandsGetCmdSize+0xe>
 800cffa:	4a01      	ldr	r2, [pc, #4]	; (800d000 <LoRaMacCommandsGetCmdSize+0x10>)
 800cffc:	5cd0      	ldrb	r0, [r2, r3]
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800cffe:	4770      	bx	lr
 800d000:	08011666 	.word	0x08011666

0800d004 <GetElement.isra.0>:
        return true;
    }
    return false;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 800d004:	b570      	push	{r4, r5, r6, lr}
{
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800d006:	4b0d      	ldr	r3, [pc, #52]	; (800d03c <GetElement.isra.0+0x38>)
static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 800d008:	0004      	movs	r4, r0
 800d00a:	0008      	movs	r0, r1
    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800d00c:	6919      	ldr	r1, [r3, #16]
 800d00e:	7d0a      	ldrb	r2, [r1, #20]
    if( count == 0 )
 800d010:	2a00      	cmp	r2, #0
 800d012:	d010      	beq.n	800d036 <GetElement.isra.0+0x32>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800d014:	000d      	movs	r5, r1
 800d016:	2300      	movs	r3, #0
 800d018:	3510      	adds	r5, #16
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
    {
        if( element->Request == request )
 800d01a:	7806      	ldrb	r6, [r0, #0]
 800d01c:	42a6      	cmp	r6, r4
 800d01e:	d007      	beq.n	800d030 <GetElement.isra.0+0x2c>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800d020:	42a8      	cmp	r0, r5
 800d022:	d106      	bne.n	800d032 <GetElement.isra.0+0x2e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800d024:	0008      	movs	r0, r1
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 800d026:	3301      	adds	r3, #1
 800d028:	b2db      	uxtb	r3, r3
 800d02a:	429a      	cmp	r2, r3
 800d02c:	d1f5      	bne.n	800d01a <GetElement.isra.0+0x16>
        return NULL;
 800d02e:	2000      	movs	r0, #0
        }
        element = IncreaseBufferPointer( element );
    }

    return NULL;
}
 800d030:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer++;
 800d032:	3004      	adds	r0, #4
 800d034:	e7f7      	b.n	800d026 <GetElement.isra.0+0x22>
        return NULL;
 800d036:	0010      	movs	r0, r2
 800d038:	e7fa      	b.n	800d030 <GetElement.isra.0+0x2c>
 800d03a:	46c0      	nop			; (mov r8, r8)
 800d03c:	20000d5c 	.word	0x20000d5c

0800d040 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, LoRaMacConfirmQueueNvmEvent confirmQueueNvmCtxChanged )
{
 800d040:	b570      	push	{r4, r5, r6, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800d042:	4c0a      	ldr	r4, [pc, #40]	; (800d06c <LoRaMacConfirmQueueInit+0x2c>)

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 800d044:	2200      	movs	r2, #0
 800d046:	0023      	movs	r3, r4
    ConfirmQueueCtx.Primitives = primitives;
 800d048:	6020      	str	r0, [r4, #0]
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 800d04a:	0020      	movs	r0, r4
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 800d04c:	3328      	adds	r3, #40	; 0x28
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 800d04e:	3014      	adds	r0, #20
{
 800d050:	000d      	movs	r5, r1
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 800d052:	701a      	strb	r2, [r3, #0]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 800d054:	21ff      	movs	r1, #255	; 0xff
 800d056:	3214      	adds	r2, #20
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 800d058:	6120      	str	r0, [r4, #16]
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800d05a:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800d05c:	60a0      	str	r0, [r4, #8]
    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 800d05e:	f001 fedd 	bl	800ee1c <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d062:	2301      	movs	r3, #1
 800d064:	6922      	ldr	r2, [r4, #16]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 800d066:	60e5      	str	r5, [r4, #12]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d068:	7553      	strb	r3, [r2, #21]
}
 800d06a:	bd70      	pop	{r4, r5, r6, pc}
 800d06c:	20000d5c 	.word	0x20000d5c

0800d070 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 800d070:	0001      	movs	r1, r0
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
        return true;
    }
    else
    {
        return false;
 800d072:	2000      	movs	r0, #0
{
 800d074:	b510      	push	{r4, lr}
    if( confirmQueueNvmCtx != NULL )
 800d076:	4281      	cmp	r1, r0
 800d078:	d005      	beq.n	800d086 <LoRaMacConfirmQueueRestoreNvmCtx+0x16>
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 800d07a:	4803      	ldr	r0, [pc, #12]	; (800d088 <LoRaMacConfirmQueueRestoreNvmCtx+0x18>)
 800d07c:	2216      	movs	r2, #22
 800d07e:	3014      	adds	r0, #20
 800d080:	f001 feb6 	bl	800edf0 <memcpy1>
        return true;
 800d084:	2001      	movs	r0, #1
    }
}
 800d086:	bd10      	pop	{r4, pc}
 800d088:	20000d5c 	.word	0x20000d5c

0800d08c <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 800d08c:	2316      	movs	r3, #22
 800d08e:	6003      	str	r3, [r0, #0]
    return &ConfirmQueueNvmCtx;
 800d090:	4801      	ldr	r0, [pc, #4]	; (800d098 <LoRaMacConfirmQueueGetNvmCtx+0xc>)
}
 800d092:	3014      	adds	r0, #20
 800d094:	4770      	bx	lr
 800d096:	46c0      	nop			; (mov r8, r8)
 800d098:	20000d5c 	.word	0x20000d5c

0800d09c <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800d09c:	b510      	push	{r4, lr}
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800d09e:	4c0e      	ldr	r4, [pc, #56]	; (800d0d8 <LoRaMacConfirmQueueAdd+0x3c>)
{
 800d0a0:	0001      	movs	r1, r0
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800d0a2:	6922      	ldr	r2, [r4, #16]
    {
        // Protect the buffer against overwrites
        return false;
 800d0a4:	2000      	movs	r0, #0
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800d0a6:	7d13      	ldrb	r3, [r2, #20]
 800d0a8:	2b04      	cmp	r3, #4
 800d0aa:	d813      	bhi.n	800d0d4 <LoRaMacConfirmQueueAdd+0x38>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800d0ac:	7808      	ldrb	r0, [r1, #0]
 800d0ae:	68a3      	ldr	r3, [r4, #8]
 800d0b0:	7018      	strb	r0, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800d0b2:	7848      	ldrb	r0, [r1, #1]
 800d0b4:	7058      	strb	r0, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800d0b6:	78c9      	ldrb	r1, [r1, #3]
        bufferPointer++;
 800d0b8:	1d18      	adds	r0, r3, #4
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800d0ba:	70d9      	strb	r1, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800d0bc:	2100      	movs	r1, #0
 800d0be:	7099      	strb	r1, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 800d0c0:	7d11      	ldrb	r1, [r2, #20]
 800d0c2:	3101      	adds	r1, #1
 800d0c4:	7511      	strb	r1, [r2, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800d0c6:	0011      	movs	r1, r2
 800d0c8:	3110      	adds	r1, #16
 800d0ca:	428b      	cmp	r3, r1
 800d0cc:	d100      	bne.n	800d0d0 <LoRaMacConfirmQueueAdd+0x34>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800d0ce:	0010      	movs	r0, r2
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800d0d0:	60a0      	str	r0, [r4, #8]

    return true;
 800d0d2:	2001      	movs	r0, #1
}
 800d0d4:	bd10      	pop	{r4, pc}
 800d0d6:	46c0      	nop			; (mov r8, r8)
 800d0d8:	20000d5c 	.word	0x20000d5c

0800d0dc <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800d0dc:	b510      	push	{r4, lr}
    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800d0de:	4908      	ldr	r1, [pc, #32]	; (800d100 <LoRaMacConfirmQueueRemoveFirst+0x24>)
 800d0e0:	690a      	ldr	r2, [r1, #16]
 800d0e2:	7d13      	ldrb	r3, [r2, #20]
    {
        return false;
 800d0e4:	1e18      	subs	r0, r3, #0
    if( count == 0 )
 800d0e6:	d00a      	beq.n	800d0fe <LoRaMacConfirmQueueRemoveFirst+0x22>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 800d0e8:	3b01      	subs	r3, #1
 800d0ea:	7513      	strb	r3, [r2, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800d0ec:	0013      	movs	r3, r2
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800d0ee:	684c      	ldr	r4, [r1, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800d0f0:	3310      	adds	r3, #16
        bufferPointer++;
 800d0f2:	1d20      	adds	r0, r4, #4
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800d0f4:	429c      	cmp	r4, r3
 800d0f6:	d100      	bne.n	800d0fa <LoRaMacConfirmQueueRemoveFirst+0x1e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800d0f8:	0010      	movs	r0, r2
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800d0fa:	6048      	str	r0, [r1, #4]

    return true;
 800d0fc:	2001      	movs	r0, #1
}
 800d0fe:	bd10      	pop	{r4, pc}
 800d100:	20000d5c 	.word	0x20000d5c

0800d104 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800d104:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 800d106:	4b08      	ldr	r3, [pc, #32]	; (800d128 <LoRaMacConfirmQueueSetStatus+0x24>)
{
 800d108:	0004      	movs	r4, r0
    if( count == 0 )
 800d10a:	691a      	ldr	r2, [r3, #16]
{
 800d10c:	0008      	movs	r0, r1
    if( count == 0 )
 800d10e:	7d12      	ldrb	r2, [r2, #20]
 800d110:	2a00      	cmp	r2, #0
 800d112:	d007      	beq.n	800d124 <LoRaMacConfirmQueueSetStatus+0x20>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800d114:	6859      	ldr	r1, [r3, #4]
 800d116:	f7ff ff75 	bl	800d004 <GetElement.isra.0>
        if( element != NULL )
 800d11a:	2800      	cmp	r0, #0
 800d11c:	d002      	beq.n	800d124 <LoRaMacConfirmQueueSetStatus+0x20>
        {
            element->Status = status;
            element->ReadyToHandle = true;
 800d11e:	2301      	movs	r3, #1
            element->Status = status;
 800d120:	7044      	strb	r4, [r0, #1]
            element->ReadyToHandle = true;
 800d122:	7083      	strb	r3, [r0, #2]
        }
    }
}
 800d124:	bd10      	pop	{r4, pc}
 800d126:	46c0      	nop			; (mov r8, r8)
 800d128:	20000d5c 	.word	0x20000d5c

0800d12c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800d12c:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 800d12e:	4b07      	ldr	r3, [pc, #28]	; (800d14c <LoRaMacConfirmQueueGetStatus+0x20>)
    if( count == 0 )
 800d130:	691a      	ldr	r2, [r3, #16]
 800d132:	7d11      	ldrb	r1, [r2, #20]
        if( element != NULL )
        {
            return element->Status;
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d134:	2201      	movs	r2, #1
    if( count == 0 )
 800d136:	2900      	cmp	r1, #0
 800d138:	d006      	beq.n	800d148 <LoRaMacConfirmQueueGetStatus+0x1c>
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800d13a:	6859      	ldr	r1, [r3, #4]
 800d13c:	f7ff ff62 	bl	800d004 <GetElement.isra.0>
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d140:	2201      	movs	r2, #1
        if( element != NULL )
 800d142:	2800      	cmp	r0, #0
 800d144:	d000      	beq.n	800d148 <LoRaMacConfirmQueueGetStatus+0x1c>
            return element->Status;
 800d146:	7842      	ldrb	r2, [r0, #1]
}
 800d148:	0010      	movs	r0, r2
 800d14a:	bd10      	pop	{r4, pc}
 800d14c:	20000d5c 	.word	0x20000d5c

0800d150 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800d150:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800d152:	490c      	ldr	r1, [pc, #48]	; (800d184 <LoRaMacConfirmQueueSetStatusCmn+0x34>)

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 800d154:	690a      	ldr	r2, [r1, #16]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800d156:	684b      	ldr	r3, [r1, #4]
    if( count == 0 )
 800d158:	7d14      	ldrb	r4, [r2, #20]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 800d15a:	7550      	strb	r0, [r2, #21]
    if( count == 0 )
 800d15c:	2c00      	cmp	r4, #0
 800d15e:	d00d      	beq.n	800d17c <LoRaMacConfirmQueueSetStatusCmn+0x2c>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800d160:	0014      	movs	r4, r2
            element->Status = status;
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
 800d162:	2501      	movs	r5, #1
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 800d164:	6889      	ldr	r1, [r1, #8]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800d166:	3410      	adds	r4, #16
            if( element->RestrictCommonReadyToHandle == false )
 800d168:	78de      	ldrb	r6, [r3, #3]
            element->Status = status;
 800d16a:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800d16c:	2e00      	cmp	r6, #0
 800d16e:	d100      	bne.n	800d172 <LoRaMacConfirmQueueSetStatusCmn+0x22>
                element->ReadyToHandle = true;
 800d170:	709d      	strb	r5, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800d172:	42a3      	cmp	r3, r4
 800d174:	d103      	bne.n	800d17e <LoRaMacConfirmQueueSetStatusCmn+0x2e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800d176:	0013      	movs	r3, r2
        }while( element != ConfirmQueueCtx.BufferEnd );
 800d178:	4299      	cmp	r1, r3
 800d17a:	d1f5      	bne.n	800d168 <LoRaMacConfirmQueueSetStatusCmn+0x18>
    }
}
 800d17c:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer++;
 800d17e:	3304      	adds	r3, #4
 800d180:	e7fa      	b.n	800d178 <LoRaMacConfirmQueueSetStatusCmn+0x28>
 800d182:	46c0      	nop			; (mov r8, r8)
 800d184:	20000d5c 	.word	0x20000d5c

0800d188 <LoRaMacConfirmQueueIsCmdActive>:
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800d188:	4b04      	ldr	r3, [pc, #16]	; (800d19c <LoRaMacConfirmQueueIsCmdActive+0x14>)
{
 800d18a:	b510      	push	{r4, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800d18c:	6859      	ldr	r1, [r3, #4]
 800d18e:	f7ff ff39 	bl	800d004 <GetElement.isra.0>
 800d192:	1e43      	subs	r3, r0, #1
 800d194:	4198      	sbcs	r0, r3
    {
        return true;
    }
    return false;
}
 800d196:	b2c0      	uxtb	r0, r0
 800d198:	bd10      	pop	{r4, pc}
 800d19a:	46c0      	nop			; (mov r8, r8)
 800d19c:	20000d5c 	.word	0x20000d5c

0800d1a0 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800d1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1a2:	0005      	movs	r5, r0
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800d1a4:	2400      	movs	r4, #0
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800d1a6:	4e13      	ldr	r6, [pc, #76]	; (800d1f4 <LoRaMacConfirmQueueHandleCb+0x54>)
{
 800d1a8:	b085      	sub	sp, #20
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800d1aa:	6933      	ldr	r3, [r6, #16]
 800d1ac:	7d1b      	ldrb	r3, [r3, #20]
 800d1ae:	9301      	str	r3, [sp, #4]
    for( uint8_t i = 0; i < nbElements; i++ )
 800d1b0:	9b01      	ldr	r3, [sp, #4]
 800d1b2:	429c      	cmp	r4, r3
 800d1b4:	d101      	bne.n	800d1ba <LoRaMacConfirmQueueHandleCb+0x1a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 800d1b6:	b005      	add	sp, #20
 800d1b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800d1ba:	6873      	ldr	r3, [r6, #4]
 800d1bc:	7818      	ldrb	r0, [r3, #0]
 800d1be:	7028      	strb	r0, [r5, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800d1c0:	7859      	ldrb	r1, [r3, #1]
 800d1c2:	7069      	strb	r1, [r5, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800d1c4:	789f      	ldrb	r7, [r3, #2]
        if( readyToHandle == true )
 800d1c6:	2f00      	cmp	r7, #0
 800d1c8:	d00d      	beq.n	800d1e6 <LoRaMacConfirmQueueHandleCb+0x46>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800d1ca:	6833      	ldr	r3, [r6, #0]
 800d1cc:	0028      	movs	r0, r5
 800d1ce:	689b      	ldr	r3, [r3, #8]
 800d1d0:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 800d1d2:	f7ff ff83 	bl	800d0dc <LoRaMacConfirmQueueRemoveFirst>
        if( readyToHandle == false )
 800d1d6:	2f00      	cmp	r7, #0
 800d1d8:	d102      	bne.n	800d1e0 <LoRaMacConfirmQueueHandleCb+0x40>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800d1da:	a803      	add	r0, sp, #12
 800d1dc:	f7ff ff5e 	bl	800d09c <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 800d1e0:	3401      	adds	r4, #1
 800d1e2:	b2e4      	uxtb	r4, r4
 800d1e4:	e7e4      	b.n	800d1b0 <LoRaMacConfirmQueueHandleCb+0x10>
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800d1e6:	aa03      	add	r2, sp, #12
 800d1e8:	7010      	strb	r0, [r2, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800d1ea:	7051      	strb	r1, [r2, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800d1ec:	78db      	ldrb	r3, [r3, #3]
 800d1ee:	70d3      	strb	r3, [r2, #3]
 800d1f0:	e7ef      	b.n	800d1d2 <LoRaMacConfirmQueueHandleCb+0x32>
 800d1f2:	46c0      	nop			; (mov r8, r8)
 800d1f4:	20000d5c 	.word	0x20000d5c

0800d1f8 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800d1f8:	4b01      	ldr	r3, [pc, #4]	; (800d200 <LoRaMacConfirmQueueGetCnt+0x8>)
 800d1fa:	691b      	ldr	r3, [r3, #16]
 800d1fc:	7d18      	ldrb	r0, [r3, #20]
}
 800d1fe:	4770      	bx	lr
 800d200:	20000d5c 	.word	0x20000d5c

0800d204 <LoRaMacConfirmQueueIsFull>:
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800d204:	2004      	movs	r0, #4

bool LoRaMacConfirmQueueIsFull( void )
{
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800d206:	4b03      	ldr	r3, [pc, #12]	; (800d214 <LoRaMacConfirmQueueIsFull+0x10>)
 800d208:	691b      	ldr	r3, [r3, #16]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800d20a:	7d1b      	ldrb	r3, [r3, #20]
 800d20c:	4298      	cmp	r0, r3
 800d20e:	4180      	sbcs	r0, r0
 800d210:	4240      	negs	r0, r0
    }
    else
    {
        return false;
    }
}
 800d212:	4770      	bx	lr
 800d214:	20000d5c 	.word	0x20000d5c

0800d218 <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
    return;
}
 800d218:	4770      	bx	lr
	...

0800d21c <DeriveSessionKey10x>:
{
 800d21c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d21e:	000f      	movs	r7, r1
    uint8_t compBase[16] = { 0 };
 800d220:	2100      	movs	r1, #0
{
 800d222:	b085      	sub	sp, #20
 800d224:	0004      	movs	r4, r0
 800d226:	0016      	movs	r6, r2
    uint8_t compBase[16] = { 0 };
 800d228:	a801      	add	r0, sp, #4
 800d22a:	220c      	movs	r2, #12
{
 800d22c:	001d      	movs	r5, r3
    uint8_t compBase[16] = { 0 };
 800d22e:	9100      	str	r1, [sp, #0]
 800d230:	f003 ff00 	bl	8011034 <memset>
    switch( keyID )
 800d234:	466a      	mov	r2, sp
 800d236:	1e63      	subs	r3, r4, #1
 800d238:	7013      	strb	r3, [r2, #0]
    memcpy1( compBase + 1, joinNonce, 3 );
 800d23a:	466b      	mov	r3, sp
 800d23c:	2203      	movs	r2, #3
 800d23e:	1c58      	adds	r0, r3, #1
 800d240:	0039      	movs	r1, r7
 800d242:	f001 fdd5 	bl	800edf0 <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 800d246:	2203      	movs	r2, #3
 800d248:	0031      	movs	r1, r6
 800d24a:	a801      	add	r0, sp, #4
 800d24c:	f001 fdd0 	bl	800edf0 <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 800d250:	466b      	mov	r3, sp
 800d252:	2202      	movs	r2, #2
 800d254:	1dd8      	adds	r0, r3, #7
 800d256:	0029      	movs	r1, r5
 800d258:	f001 fdca 	bl	800edf0 <memcpy1>
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800d25c:	4b06      	ldr	r3, [pc, #24]	; (800d278 <DeriveSessionKey10x+0x5c>)
 800d25e:	2201      	movs	r2, #1
 800d260:	6818      	ldr	r0, [r3, #0]
 800d262:	4669      	mov	r1, sp
 800d264:	0023      	movs	r3, r4
 800d266:	6800      	ldr	r0, [r0, #0]
 800d268:	f7fb f809 	bl	800827e <SecureElementDeriveAndStoreKey>
 800d26c:	2800      	cmp	r0, #0
 800d26e:	d000      	beq.n	800d272 <DeriveSessionKey10x+0x56>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d270:	200f      	movs	r0, #15
}
 800d272:	b005      	add	sp, #20
 800d274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d276:	46c0      	nop			; (mov r8, r8)
 800d278:	20000d88 	.word	0x20000d88

0800d27c <PayloadEncrypt>:
{
 800d27c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d27e:	b08d      	sub	sp, #52	; 0x34
 800d280:	001d      	movs	r5, r3
 800d282:	ab12      	add	r3, sp, #72	; 0x48
 800d284:	781b      	ldrb	r3, [r3, #0]
 800d286:	9001      	str	r0, [sp, #4]
 800d288:	9302      	str	r3, [sp, #8]
    if( buffer == 0 )
 800d28a:	9b01      	ldr	r3, [sp, #4]
{
 800d28c:	000f      	movs	r7, r1
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d28e:	200a      	movs	r0, #10
{
 800d290:	9203      	str	r2, [sp, #12]
    if( buffer == 0 )
 800d292:	2b00      	cmp	r3, #0
 800d294:	d026      	beq.n	800d2e4 <PayloadEncrypt+0x68>
    uint8_t sBlock[16] = { 0 };
 800d296:	2600      	movs	r6, #0
 800d298:	220c      	movs	r2, #12
 800d29a:	0031      	movs	r1, r6
 800d29c:	a805      	add	r0, sp, #20
 800d29e:	9604      	str	r6, [sp, #16]
 800d2a0:	f003 fec8 	bl	8011034 <memset>
    uint8_t aBlock[16] = { 0 };
 800d2a4:	220c      	movs	r2, #12
 800d2a6:	0031      	movs	r1, r6
 800d2a8:	a809      	add	r0, sp, #36	; 0x24
 800d2aa:	9608      	str	r6, [sp, #32]
 800d2ac:	f003 fec2 	bl	8011034 <memset>
    aBlock[0] = 0x01;
 800d2b0:	2201      	movs	r2, #1
    aBlock[5] = dir;
 800d2b2:	9b02      	ldr	r3, [sp, #8]
    uint8_t aBlock[16] = { 0 };
 800d2b4:	ac08      	add	r4, sp, #32
    aBlock[5] = dir;
 800d2b6:	7163      	strb	r3, [r4, #5]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800d2b8:	0c2b      	lsrs	r3, r5, #16
 800d2ba:	7223      	strb	r3, [r4, #8]
    aBlock[10] = frameCounter & 0xFF;
 800d2bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[6] = address & 0xFF;
 800d2be:	80e5      	strh	r5, [r4, #6]
    aBlock[10] = frameCounter & 0xFF;
 800d2c0:	8163      	strh	r3, [r4, #10]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800d2c2:	0c1b      	lsrs	r3, r3, #16
 800d2c4:	7323      	strb	r3, [r4, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800d2c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800d2c8:	0e2d      	lsrs	r5, r5, #24
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800d2ca:	0e1b      	lsrs	r3, r3, #24
    aBlock[0] = 0x01;
 800d2cc:	7022      	strb	r2, [r4, #0]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800d2ce:	7265      	strb	r5, [r4, #9]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800d2d0:	7363      	strb	r3, [r4, #13]
    uint16_t ctr = 1;
 800d2d2:	0014      	movs	r4, r2
 800d2d4:	b2e2      	uxtb	r2, r4
 800d2d6:	0113      	lsls	r3, r2, #4
 800d2d8:	3b10      	subs	r3, #16
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	9302      	str	r3, [sp, #8]
    while( size > 0 )
 800d2de:	2f00      	cmp	r7, #0
 800d2e0:	dc02      	bgt.n	800d2e8 <PayloadEncrypt+0x6c>
    return LORAMAC_CRYPTO_SUCCESS;
 800d2e2:	2000      	movs	r0, #0
}
 800d2e4:	b00d      	add	sp, #52	; 0x34
 800d2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        aBlock[15] = ctr & 0xFF;
 800d2e8:	a808      	add	r0, sp, #32
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800d2ea:	ad04      	add	r5, sp, #16
        aBlock[15] = ctr & 0xFF;
 800d2ec:	73c2      	strb	r2, [r0, #15]
        ctr++;
 800d2ee:	3401      	adds	r4, #1
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800d2f0:	002b      	movs	r3, r5
 800d2f2:	2110      	movs	r1, #16
 800d2f4:	9a03      	ldr	r2, [sp, #12]
        ctr++;
 800d2f6:	b2a4      	uxth	r4, r4
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800d2f8:	f7fa ff4f 	bl	800819a <SecureElementAesEncrypt>
 800d2fc:	2800      	cmp	r0, #0
 800d2fe:	d115      	bne.n	800d32c <PayloadEncrypt+0xb0>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800d300:	1c39      	adds	r1, r7, #0
 800d302:	1c0b      	adds	r3, r1, #0
 800d304:	2f10      	cmp	r7, #16
 800d306:	dd00      	ble.n	800d30a <PayloadEncrypt+0x8e>
 800d308:	2310      	movs	r3, #16
 800d30a:	b21b      	sxth	r3, r3
 800d30c:	4298      	cmp	r0, r3
 800d30e:	db02      	blt.n	800d316 <PayloadEncrypt+0x9a>
        size -= 16;
 800d310:	3f10      	subs	r7, #16
 800d312:	b23f      	sxth	r7, r7
        bufferIndex += 16;
 800d314:	e7de      	b.n	800d2d4 <PayloadEncrypt+0x58>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800d316:	9b02      	ldr	r3, [sp, #8]
 800d318:	5c2e      	ldrb	r6, [r5, r0]
 800d31a:	181a      	adds	r2, r3, r0
 800d31c:	9b01      	ldr	r3, [sp, #4]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800d31e:	3001      	adds	r0, #1
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800d320:	5c9b      	ldrb	r3, [r3, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800d322:	b2c0      	uxtb	r0, r0
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800d324:	4073      	eors	r3, r6
 800d326:	9e01      	ldr	r6, [sp, #4]
 800d328:	54b3      	strb	r3, [r6, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800d32a:	e7ea      	b.n	800d302 <PayloadEncrypt+0x86>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d32c:	200f      	movs	r0, #15
 800d32e:	e7d9      	b.n	800d2e4 <PayloadEncrypt+0x68>

0800d330 <GetLastFcntDown>:
    switch( fCntID )
 800d330:	3801      	subs	r0, #1
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 800d332:	2305      	movs	r3, #5
{
 800d334:	b500      	push	{lr}
 800d336:	2803      	cmp	r0, #3
 800d338:	d80b      	bhi.n	800d352 <GetLastFcntDown+0x22>
 800d33a:	4b0d      	ldr	r3, [pc, #52]	; (800d370 <GetLastFcntDown+0x40>)
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f7f2 fef5 	bl	800012c <__gnu_thumb1_case_uqi>
 800d342:	0a02      	.short	0x0a02
 800d344:	140f      	.short	0x140f
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 800d346:	691a      	ldr	r2, [r3, #16]
 800d348:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 800d34a:	001a      	movs	r2, r3
 800d34c:	3210      	adds	r2, #16
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800d34e:	621a      	str	r2, [r3, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800d350:	2300      	movs	r3, #0
}
 800d352:	0018      	movs	r0, r3
 800d354:	bd00      	pop	{pc}
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 800d356:	695a      	ldr	r2, [r3, #20]
 800d358:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 800d35a:	001a      	movs	r2, r3
 800d35c:	3214      	adds	r2, #20
 800d35e:	e7f6      	b.n	800d34e <GetLastFcntDown+0x1e>
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 800d360:	699a      	ldr	r2, [r3, #24]
 800d362:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800d364:	001a      	movs	r2, r3
 800d366:	3218      	adds	r2, #24
 800d368:	e7f1      	b.n	800d34e <GetLastFcntDown+0x1e>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 800d36a:	69db      	ldr	r3, [r3, #28]
 800d36c:	600b      	str	r3, [r1, #0]
 800d36e:	e7ef      	b.n	800d350 <GetLastFcntDown+0x20>
 800d370:	20000d88 	.word	0x20000d88

0800d374 <LoRaMacCryptoDeriveMcKEKey.part.0>:
    }

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
 800d374:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800d376:	2100      	movs	r1, #0
 800d378:	220c      	movs	r2, #12
 800d37a:	a801      	add	r0, sp, #4
 800d37c:	9100      	str	r1, [sp, #0]
 800d37e:	f003 fe59 	bl	8011034 <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800d382:	4b06      	ldr	r3, [pc, #24]	; (800d39c <LoRaMacCryptoDeriveMcKEKey.part.0+0x28>)
 800d384:	2204      	movs	r2, #4
 800d386:	6818      	ldr	r0, [r3, #0]
 800d388:	4669      	mov	r1, sp
 800d38a:	237f      	movs	r3, #127	; 0x7f
 800d38c:	6800      	ldr	r0, [r0, #0]
 800d38e:	f7fa ff76 	bl	800827e <SecureElementDeriveAndStoreKey>
 800d392:	2800      	cmp	r0, #0
 800d394:	d000      	beq.n	800d398 <LoRaMacCryptoDeriveMcKEKey.part.0+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d396:	200f      	movs	r0, #15
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d398:	b005      	add	sp, #20
 800d39a:	bd00      	pop	{pc}
 800d39c:	20000d88 	.word	0x20000d88

0800d3a0 <VerifyCmacB0.isra.0.constprop.0>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800d3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3a2:	b0c7      	sub	sp, #284	; 0x11c
 800d3a4:	0007      	movs	r7, r0
 800d3a6:	000c      	movs	r4, r1
 800d3a8:	001d      	movs	r5, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d3aa:	200a      	movs	r0, #10
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800d3ac:	9201      	str	r2, [sp, #4]
    if( msg == 0 )
 800d3ae:	2f00      	cmp	r7, #0
 800d3b0:	d030      	beq.n	800d414 <VerifyCmacB0.isra.0.constprop.0+0x74>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800d3b2:	2680      	movs	r6, #128	; 0x80
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800d3b4:	3004      	adds	r0, #4
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800d3b6:	0076      	lsls	r6, r6, #1
 800d3b8:	42b1      	cmp	r1, r6
 800d3ba:	d82b      	bhi.n	800d414 <VerifyCmacB0.isra.0.constprop.0+0x74>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800d3bc:	2288      	movs	r2, #136	; 0x88
 800d3be:	2100      	movs	r1, #0
 800d3c0:	0052      	lsls	r2, r2, #1
 800d3c2:	a802      	add	r0, sp, #8
 800d3c4:	f001 fd2a 	bl	800ee1c <memset1>
    b0[0] = 0x49;
 800d3c8:	2349      	movs	r3, #73	; 0x49
 800d3ca:	9302      	str	r3, [sp, #8]
    b0[4] = 0x00;
 800d3cc:	ab02      	add	r3, sp, #8
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800d3ce:	aa02      	add	r2, sp, #8
    b0[4] = 0x00;
 800d3d0:	809e      	strh	r6, [r3, #4]
    b0[6] = devAddr & 0xFF;
 800d3d2:	80dd      	strh	r5, [r3, #6]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800d3d4:	0c2b      	lsrs	r3, r5, #16
 800d3d6:	7213      	strb	r3, [r2, #8]
    b0[10] = fCnt & 0xFF;
 800d3d8:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800d3da:	0e2d      	lsrs	r5, r5, #24
    b0[10] = fCnt & 0xFF;
 800d3dc:	8153      	strh	r3, [r2, #10]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800d3de:	0c1b      	lsrs	r3, r3, #16
 800d3e0:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800d3e2:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800d3e4:	0039      	movs	r1, r7
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800d3e6:	0e1e      	lsrs	r6, r3, #24
    b0[14] = 0x00;
 800d3e8:	2300      	movs	r3, #0
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800d3ea:	7255      	strb	r5, [r2, #9]
    b0[14] = 0x00;
 800d3ec:	7393      	strb	r3, [r2, #14]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800d3ee:	7356      	strb	r6, [r2, #13]
    b0[15] = msgLen & 0xFF;
 800d3f0:	73d4      	strb	r4, [r2, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800d3f2:	a806      	add	r0, sp, #24
 800d3f4:	0022      	movs	r2, r4
 800d3f6:	f001 fcfb 	bl	800edf0 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800d3fa:	0021      	movs	r1, r4
 800d3fc:	3110      	adds	r1, #16
 800d3fe:	9b01      	ldr	r3, [sp, #4]
 800d400:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 800d402:	b289      	uxth	r1, r1
 800d404:	a802      	add	r0, sp, #8
 800d406:	f7fa feb0 	bl	800816a <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800d40a:	2800      	cmp	r0, #0
 800d40c:	d002      	beq.n	800d414 <VerifyCmacB0.isra.0.constprop.0+0x74>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800d40e:	2801      	cmp	r0, #1
 800d410:	d000      	beq.n	800d414 <VerifyCmacB0.isra.0.constprop.0+0x74>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d412:	200f      	movs	r0, #15
}
 800d414:	b047      	add	sp, #284	; 0x11c
 800d416:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d418 <LoRaMacCryptoInit>:
{
 800d418:	b570      	push	{r4, r5, r6, lr}
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 800d41a:	4c10      	ldr	r4, [pc, #64]	; (800d45c <LoRaMacCryptoInit+0x44>)
 800d41c:	0023      	movs	r3, r4
 800d41e:	3308      	adds	r3, #8
 800d420:	6023      	str	r3, [r4, #0]
    if( cryptoNvmCtxChanged != 0 )
 800d422:	2800      	cmp	r0, #0
 800d424:	d100      	bne.n	800d428 <LoRaMacCryptoInit+0x10>
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 800d426:	480e      	ldr	r0, [pc, #56]	; (800d460 <LoRaMacCryptoInit+0x48>)
 800d428:	6060      	str	r0, [r4, #4]
    memset1( ( uint8_t* )CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 800d42a:	0020      	movs	r0, r4
 800d42c:	2224      	movs	r2, #36	; 0x24
 800d42e:	3008      	adds	r0, #8
 800d430:	2100      	movs	r1, #0
 800d432:	f001 fcf3 	bl	800ee1c <memset1>
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 800d436:	6823      	ldr	r3, [r4, #0]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 0;
 800d438:	4a0a      	ldr	r2, [pc, #40]	; (800d464 <LoRaMacCryptoInit+0x4c>)
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800d43a:	0019      	movs	r1, r3
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 0;
 800d43c:	601a      	str	r2, [r3, #0]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d43e:	2201      	movs	r2, #1
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 800d440:	2500      	movs	r5, #0
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d442:	4252      	negs	r2, r2
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800d444:	3118      	adds	r1, #24
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 800d446:	60dd      	str	r5, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d448:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d44a:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800d44c:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800d44e:	6219      	str	r1, [r3, #32]
    CryptoCtx.NvmCtx->FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 800d450:	61da      	str	r2, [r3, #28]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800d452:	6863      	ldr	r3, [r4, #4]
 800d454:	4798      	blx	r3
}
 800d456:	0028      	movs	r0, r5
 800d458:	bd70      	pop	{r4, r5, r6, pc}
 800d45a:	46c0      	nop			; (mov r8, r8)
 800d45c:	20000d88 	.word	0x20000d88
 800d460:	0800d219 	.word	0x0800d219
 800d464:	01010100 	.word	0x01010100

0800d468 <LoRaMacCryptoSetLrWanVersion>:
    CryptoCtx.NvmCtx->LrWanVersion = version;
 800d468:	4b02      	ldr	r3, [pc, #8]	; (800d474 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	6018      	str	r0, [r3, #0]
}
 800d46e:	2000      	movs	r0, #0
 800d470:	4770      	bx	lr
 800d472:	46c0      	nop			; (mov r8, r8)
 800d474:	20000d88 	.word	0x20000d88

0800d478 <LoRaMacCryptoRestoreNvmCtx>:
{
 800d478:	0001      	movs	r1, r0
 800d47a:	b510      	push	{r4, lr}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d47c:	200a      	movs	r0, #10
    if( cryptoNvmCtx != 0 )
 800d47e:	2900      	cmp	r1, #0
 800d480:	d005      	beq.n	800d48e <LoRaMacCryptoRestoreNvmCtx+0x16>
        memcpy1( ( uint8_t* )&NvmCryptoCtx, ( uint8_t* )cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 800d482:	4803      	ldr	r0, [pc, #12]	; (800d490 <LoRaMacCryptoRestoreNvmCtx+0x18>)
 800d484:	2224      	movs	r2, #36	; 0x24
 800d486:	3008      	adds	r0, #8
 800d488:	f001 fcb2 	bl	800edf0 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 800d48c:	2000      	movs	r0, #0
}
 800d48e:	bd10      	pop	{r4, pc}
 800d490:	20000d88 	.word	0x20000d88

0800d494 <LoRaMacCryptoGetNvmCtx>:
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 800d494:	2324      	movs	r3, #36	; 0x24
 800d496:	6003      	str	r3, [r0, #0]
    return &NvmCryptoCtx;
 800d498:	4801      	ldr	r0, [pc, #4]	; (800d4a0 <LoRaMacCryptoGetNvmCtx+0xc>)
}
 800d49a:	3008      	adds	r0, #8
 800d49c:	4770      	bx	lr
 800d49e:	46c0      	nop			; (mov r8, r8)
 800d4a0:	20000d88 	.word	0x20000d88

0800d4a4 <LoRaMacCryptoGetFCntUp>:
{
 800d4a4:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d4a6:	200a      	movs	r0, #10
    if( currentUp == NULL )
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d005      	beq.n	800d4b8 <LoRaMacCryptoGetFCntUp+0x14>
    return LORAMAC_CRYPTO_SUCCESS;
 800d4ac:	2000      	movs	r0, #0
    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 800d4ae:	4a03      	ldr	r2, [pc, #12]	; (800d4bc <LoRaMacCryptoGetFCntUp+0x18>)
 800d4b0:	6812      	ldr	r2, [r2, #0]
 800d4b2:	68d2      	ldr	r2, [r2, #12]
 800d4b4:	3201      	adds	r2, #1
 800d4b6:	601a      	str	r2, [r3, #0]
}
 800d4b8:	4770      	bx	lr
 800d4ba:	46c0      	nop			; (mov r8, r8)
 800d4bc:	20000d88 	.word	0x20000d88

0800d4c0 <LoRaMacCryptoGetFCntDown>:
{
 800d4c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4c2:	001c      	movs	r4, r3
    uint32_t lastDown = 0;
 800d4c4:	2300      	movs	r3, #0
{
 800d4c6:	0007      	movs	r7, r0
 800d4c8:	000d      	movs	r5, r1
 800d4ca:	0016      	movs	r6, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d4cc:	200a      	movs	r0, #10
    uint32_t lastDown = 0;
 800d4ce:	9301      	str	r3, [sp, #4]
    if( currentDown == NULL )
 800d4d0:	429c      	cmp	r4, r3
 800d4d2:	d026      	beq.n	800d522 <LoRaMacCryptoGetFCntDown+0x62>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800d4d4:	0038      	movs	r0, r7
 800d4d6:	a901      	add	r1, sp, #4
 800d4d8:	f7ff ff2a 	bl	800d330 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800d4dc:	2800      	cmp	r0, #0
 800d4de:	d120      	bne.n	800d522 <LoRaMacCryptoGetFCntDown+0x62>
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800d4e0:	9f01      	ldr	r7, [sp, #4]
 800d4e2:	1c7b      	adds	r3, r7, #1
 800d4e4:	d101      	bne.n	800d4ea <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800d4e6:	6026      	str	r6, [r4, #0]
 800d4e8:	e005      	b.n	800d4f6 <LoRaMacCryptoGetFCntDown+0x36>
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800d4ea:	b2bb      	uxth	r3, r7
 800d4ec:	1af3      	subs	r3, r6, r3
        if( fCntDiff > 0 )
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	dd13      	ble.n	800d51a <LoRaMacCryptoGetFCntDown+0x5a>
            *currentDown = lastDown + fCntDiff;
 800d4f2:	18fb      	adds	r3, r7, r3
 800d4f4:	6023      	str	r3, [r4, #0]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 800d4f6:	4b10      	ldr	r3, [pc, #64]	; (800d538 <LoRaMacCryptoGetFCntDown+0x78>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	789e      	ldrb	r6, [r3, #2]
 800d4fc:	2e00      	cmp	r6, #0
 800d4fe:	d110      	bne.n	800d522 <LoRaMacCryptoGetFCntDown+0x62>
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800d500:	0033      	movs	r3, r6
 800d502:	0038      	movs	r0, r7
 800d504:	0031      	movs	r1, r6
 800d506:	6822      	ldr	r2, [r4, #0]
 800d508:	1a12      	subs	r2, r2, r0
 800d50a:	418b      	sbcs	r3, r1
 800d50c:	429e      	cmp	r6, r3
 800d50e:	dc10      	bgt.n	800d532 <LoRaMacCryptoGetFCntDown+0x72>
 800d510:	d101      	bne.n	800d516 <LoRaMacCryptoGetFCntDown+0x56>
 800d512:	4295      	cmp	r5, r2
 800d514:	d80d      	bhi.n	800d532 <LoRaMacCryptoGetFCntDown+0x72>
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 800d516:	2008      	movs	r0, #8
 800d518:	e003      	b.n	800d522 <LoRaMacCryptoGetFCntDown+0x62>
        else if( fCntDiff == 0 )
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d102      	bne.n	800d524 <LoRaMacCryptoGetFCntDown+0x64>
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800d51e:	2007      	movs	r0, #7
            *currentDown = lastDown;
 800d520:	6027      	str	r7, [r4, #0]
}
 800d522:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800d524:	2380      	movs	r3, #128	; 0x80
 800d526:	0c3a      	lsrs	r2, r7, #16
 800d528:	0412      	lsls	r2, r2, #16
 800d52a:	025b      	lsls	r3, r3, #9
 800d52c:	18d2      	adds	r2, r2, r3
 800d52e:	1996      	adds	r6, r2, r6
 800d530:	e7d9      	b.n	800d4e6 <LoRaMacCryptoGetFCntDown+0x26>
    return LORAMAC_CRYPTO_SUCCESS;
 800d532:	2000      	movs	r0, #0
 800d534:	e7f5      	b.n	800d522 <LoRaMacCryptoGetFCntDown+0x62>
 800d536:	46c0      	nop			; (mov r8, r8)
 800d538:	20000d88 	.word	0x20000d88

0800d53c <LoRaMacCryptoSetMulticastReference>:
{
 800d53c:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d53e:	200a      	movs	r0, #10
    if( multicastList == NULL )
 800d540:	2b00      	cmp	r3, #0
 800d542:	d004      	beq.n	800d54e <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800d544:	2000      	movs	r0, #0
    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 800d546:	4a02      	ldr	r2, [pc, #8]	; (800d550 <LoRaMacCryptoSetMulticastReference+0x14>)
 800d548:	6812      	ldr	r2, [r2, #0]
 800d54a:	321c      	adds	r2, #28
 800d54c:	621a      	str	r2, [r3, #32]
}
 800d54e:	4770      	bx	lr
 800d550:	20000d88 	.word	0x20000d88

0800d554 <LoRaMacCryptoPrepareJoinRequest>:
{
 800d554:	b530      	push	{r4, r5, lr}
 800d556:	0004      	movs	r4, r0
 800d558:	b085      	sub	sp, #20
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d55a:	200a      	movs	r0, #10
    if( macMsg == 0 )
 800d55c:	2c00      	cmp	r4, #0
 800d55e:	d024      	beq.n	800d5aa <LoRaMacCryptoPrepareJoinRequest+0x56>
    uint32_t devNonce = 0;
 800d560:	2300      	movs	r3, #0
    SecureElementRandomNumber( &devNonce );
 800d562:	a803      	add	r0, sp, #12
    uint32_t devNonce = 0;
 800d564:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800d566:	f7fa feeb 	bl	8008340 <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 800d56a:	4d11      	ldr	r5, [pc, #68]	; (800d5b0 <LoRaMacCryptoPrepareJoinRequest+0x5c>)
 800d56c:	9b03      	ldr	r3, [sp, #12]
 800d56e:	682a      	ldr	r2, [r5, #0]
 800d570:	8093      	strh	r3, [r2, #4]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800d572:	686b      	ldr	r3, [r5, #4]
 800d574:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 800d576:	682b      	ldr	r3, [r5, #0]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d578:	0020      	movs	r0, r4
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 800d57a:	889b      	ldrh	r3, [r3, #4]
 800d57c:	82e3      	strh	r3, [r4, #22]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d57e:	f000 fa1e 	bl	800d9be <LoRaMacSerializerJoinRequest>
 800d582:	2800      	cmp	r0, #0
 800d584:	d110      	bne.n	800d5a8 <LoRaMacCryptoPrepareJoinRequest+0x54>
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800d586:	0023      	movs	r3, r4
 800d588:	3318      	adds	r3, #24
 800d58a:	9300      	str	r3, [sp, #0]
 800d58c:	2213      	movs	r2, #19
 800d58e:	2301      	movs	r3, #1
 800d590:	6821      	ldr	r1, [r4, #0]
 800d592:	f7fa fddf 	bl	8008154 <SecureElementComputeAesCmac>
 800d596:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d598:	200f      	movs	r0, #15
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d105      	bne.n	800d5aa <LoRaMacCryptoPrepareJoinRequest+0x56>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d59e:	0020      	movs	r0, r4
 800d5a0:	f000 fa0d 	bl	800d9be <LoRaMacSerializerJoinRequest>
 800d5a4:	2800      	cmp	r0, #0
 800d5a6:	d000      	beq.n	800d5aa <LoRaMacCryptoPrepareJoinRequest+0x56>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d5a8:	2011      	movs	r0, #17
}
 800d5aa:	b005      	add	sp, #20
 800d5ac:	bd30      	pop	{r4, r5, pc}
 800d5ae:	46c0      	nop			; (mov r8, r8)
 800d5b0:	20000d88 	.word	0x20000d88

0800d5b4 <LoRaMacCryptoSecureMessage>:
{
 800d5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5b6:	0006      	movs	r6, r0
 800d5b8:	001d      	movs	r5, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d5ba:	240a      	movs	r4, #10
{
 800d5bc:	b087      	sub	sp, #28
    if( macMsg == NULL )
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d01f      	beq.n	800d602 <LoRaMacCryptoSecureMessage+0x4e>
    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 800d5c2:	4b2b      	ldr	r3, [pc, #172]	; (800d670 <LoRaMacCryptoSecureMessage+0xbc>)
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800d5c4:	3c04      	subs	r4, #4
    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	68db      	ldr	r3, [r3, #12]
 800d5ca:	4283      	cmp	r3, r0
 800d5cc:	d819      	bhi.n	800d602 <LoRaMacCryptoSecureMessage+0x4e>
    if( macMsg->FPort == 0 )
 800d5ce:	1c6a      	adds	r2, r5, #1
 800d5d0:	7fd2      	ldrb	r2, [r2, #31]
        payloadDecryptionKeyID = NWK_S_KEY;
 800d5d2:	1e51      	subs	r1, r2, #1
 800d5d4:	418a      	sbcs	r2, r1
 800d5d6:	3202      	adds	r2, #2
    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 800d5d8:	4283      	cmp	r3, r0
 800d5da:	d306      	bcc.n	800d5ea <LoRaMacCryptoSecureMessage+0x36>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d5dc:	0028      	movs	r0, r5
 800d5de:	f000 fa23 	bl	800da28 <LoRaMacSerializerData>
 800d5e2:	1e03      	subs	r3, r0, #0
 800d5e4:	d010      	beq.n	800d608 <LoRaMacCryptoSecureMessage+0x54>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d5e6:	2411      	movs	r4, #17
 800d5e8:	e00b      	b.n	800d602 <LoRaMacCryptoSecureMessage+0x4e>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800d5ea:	002b      	movs	r3, r5
 800d5ec:	3328      	adds	r3, #40	; 0x28
 800d5ee:	7819      	ldrb	r1, [r3, #0]
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	9001      	str	r0, [sp, #4]
 800d5f4:	9300      	str	r3, [sp, #0]
 800d5f6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800d5f8:	68ab      	ldr	r3, [r5, #8]
 800d5fa:	f7ff fe3f 	bl	800d27c <PayloadEncrypt>
 800d5fe:	1e04      	subs	r4, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d600:	d0ec      	beq.n	800d5dc <LoRaMacCryptoSecureMessage+0x28>
}
 800d602:	0020      	movs	r0, r4
 800d604:	b007      	add	sp, #28
 800d606:	bdf0      	pop	{r4, r5, r6, r7, pc}
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800d608:	792f      	ldrb	r7, [r5, #4]
 800d60a:	6829      	ldr	r1, [r5, #0]
 800d60c:	3f04      	subs	r7, #4
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d60e:	240a      	movs	r4, #10
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800d610:	b2ba      	uxth	r2, r7
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800d612:	2900      	cmp	r1, #0
 800d614:	d0f5      	beq.n	800d602 <LoRaMacCryptoSecureMessage+0x4e>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800d616:	2080      	movs	r0, #128	; 0x80
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800d618:	240e      	movs	r4, #14
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800d61a:	0040      	lsls	r0, r0, #1
 800d61c:	4282      	cmp	r2, r0
 800d61e:	d8f0      	bhi.n	800d602 <LoRaMacCryptoSecureMessage+0x4e>
    b0[0] = 0x49;
 800d620:	38b7      	subs	r0, #183	; 0xb7
 800d622:	9002      	str	r0, [sp, #8]
    b0[4] = 0x00;
 800d624:	a802      	add	r0, sp, #8
 800d626:	8083      	strh	r3, [r0, #4]
    b0[14] = 0x00;
 800d628:	7383      	strb	r3, [r0, #14]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800d62a:	002b      	movs	r3, r5
 800d62c:	892c      	ldrh	r4, [r5, #8]
 800d62e:	332c      	adds	r3, #44	; 0x2c
    b0[6] = devAddr & 0xFF;
 800d630:	80c4      	strh	r4, [r0, #6]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800d632:	68ac      	ldr	r4, [r5, #8]
    b0[10] = fCnt & 0xFF;
 800d634:	8146      	strh	r6, [r0, #10]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800d636:	0c24      	lsrs	r4, r4, #16
 800d638:	7204      	strb	r4, [r0, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800d63a:	68ac      	ldr	r4, [r5, #8]
    b0[15] = msgLen & 0xFF;
 800d63c:	73c7      	strb	r7, [r0, #15]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800d63e:	0e24      	lsrs	r4, r4, #24
 800d640:	7244      	strb	r4, [r0, #9]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800d642:	0c34      	lsrs	r4, r6, #16
 800d644:	7304      	strb	r4, [r0, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800d646:	0e34      	lsrs	r4, r6, #24
 800d648:	7344      	strb	r4, [r0, #13]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800d64a:	9300      	str	r3, [sp, #0]
 800d64c:	2302      	movs	r3, #2
 800d64e:	f7fa fd81 	bl	8008154 <SecureElementComputeAesCmac>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d652:	240f      	movs	r4, #15
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800d654:	2800      	cmp	r0, #0
 800d656:	d1d4      	bne.n	800d602 <LoRaMacCryptoSecureMessage+0x4e>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d658:	0028      	movs	r0, r5
 800d65a:	f000 f9e5 	bl	800da28 <LoRaMacSerializerData>
 800d65e:	1e04      	subs	r4, r0, #0
 800d660:	d1c1      	bne.n	800d5e6 <LoRaMacCryptoSecureMessage+0x32>
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 800d662:	4b03      	ldr	r3, [pc, #12]	; (800d670 <LoRaMacCryptoSecureMessage+0xbc>)
 800d664:	681a      	ldr	r2, [r3, #0]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800d666:	685b      	ldr	r3, [r3, #4]
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 800d668:	60d6      	str	r6, [r2, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800d66a:	4798      	blx	r3
    return LORAMAC_CRYPTO_SUCCESS;
 800d66c:	e7c9      	b.n	800d602 <LoRaMacCryptoSecureMessage+0x4e>
 800d66e:	46c0      	nop			; (mov r8, r8)
 800d670:	20000d88 	.word	0x20000d88

0800d674 <LoRaMacCryptoUnsecureMessage>:
{
 800d674:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d676:	b087      	sub	sp, #28
 800d678:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d67a:	000f      	movs	r7, r1
 800d67c:	001d      	movs	r5, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d67e:	240a      	movs	r4, #10
{
 800d680:	9002      	str	r0, [sp, #8]
 800d682:	9203      	str	r2, [sp, #12]
    if( macMsg == 0 )
 800d684:	2e00      	cmp	r6, #0
 800d686:	d008      	beq.n	800d69a <LoRaMacCryptoUnsecureMessage+0x26>
    uint32_t lastDown = 0;
 800d688:	2300      	movs	r3, #0
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800d68a:	0010      	movs	r0, r2
 800d68c:	a905      	add	r1, sp, #20
    uint32_t lastDown = 0;
 800d68e:	9305      	str	r3, [sp, #20]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800d690:	f7ff fe4e 	bl	800d330 <GetLastFcntDown>
 800d694:	2800      	cmp	r0, #0
 800d696:	d003      	beq.n	800d6a0 <LoRaMacCryptoUnsecureMessage+0x2c>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800d698:	2406      	movs	r4, #6
}
 800d69a:	0020      	movs	r0, r4
 800d69c:	b007      	add	sp, #28
 800d69e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( currentDown > lastDown ) ||
 800d6a0:	9b05      	ldr	r3, [sp, #20]
 800d6a2:	429d      	cmp	r5, r3
 800d6a4:	d801      	bhi.n	800d6aa <LoRaMacCryptoUnsecureMessage+0x36>
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	d1f6      	bne.n	800d698 <LoRaMacCryptoUnsecureMessage+0x24>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800d6aa:	0030      	movs	r0, r6
 800d6ac:	f000 f92c 	bl	800d908 <LoRaMacParserData>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800d6b0:	2410      	movs	r4, #16
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800d6b2:	2800      	cmp	r0, #0
 800d6b4:	d1f1      	bne.n	800d69a <LoRaMacCryptoUnsecureMessage+0x26>
        if( KeyAddrList[i].AddrID == addrID )
 800d6b6:	4b23      	ldr	r3, [pc, #140]	; (800d744 <LoRaMacCryptoUnsecureMessage+0xd0>)
 800d6b8:	9902      	ldr	r1, [sp, #8]
 800d6ba:	781a      	ldrb	r2, [r3, #0]
 800d6bc:	428a      	cmp	r2, r1
 800d6be:	d004      	beq.n	800d6ca <LoRaMacCryptoUnsecureMessage+0x56>
 800d6c0:	791a      	ldrb	r2, [r3, #4]
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800d6c2:	3c04      	subs	r4, #4
        if( KeyAddrList[i].AddrID == addrID )
 800d6c4:	428a      	cmp	r2, r1
 800d6c6:	d1e8      	bne.n	800d69a <LoRaMacCryptoUnsecureMessage+0x26>
 800d6c8:	3001      	adds	r0, #1
    if( address != macMsg->FHDR.DevAddr )
 800d6ca:	68b2      	ldr	r2, [r6, #8]
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800d6cc:	2402      	movs	r4, #2
    if( address != macMsg->FHDR.DevAddr )
 800d6ce:	42ba      	cmp	r2, r7
 800d6d0:	d1e3      	bne.n	800d69a <LoRaMacCryptoUnsecureMessage+0x26>
    payloadDecryptionKeyID = curItem->AppSkey;
 800d6d2:	40a0      	lsls	r0, r4
 800d6d4:	1818      	adds	r0, r3, r0
 800d6d6:	7843      	ldrb	r3, [r0, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800d6d8:	7882      	ldrb	r2, [r0, #2]
    payloadDecryptionKeyID = curItem->AppSkey;
 800d6da:	9302      	str	r3, [sp, #8]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800d6dc:	7931      	ldrb	r1, [r6, #4]
 800d6de:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800d6e0:	3904      	subs	r1, #4
 800d6e2:	9301      	str	r3, [sp, #4]
 800d6e4:	9500      	str	r5, [sp, #0]
 800d6e6:	003b      	movs	r3, r7
 800d6e8:	6830      	ldr	r0, [r6, #0]
 800d6ea:	b289      	uxth	r1, r1
 800d6ec:	f7ff fe58 	bl	800d3a0 <VerifyCmacB0.isra.0.constprop.0>
 800d6f0:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d6f2:	d1d2      	bne.n	800d69a <LoRaMacCryptoUnsecureMessage+0x26>
    if( macMsg->FPort == 0 )
 800d6f4:	1c73      	adds	r3, r6, #1
 800d6f6:	7fdb      	ldrb	r3, [r3, #31]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d101      	bne.n	800d700 <LoRaMacCryptoUnsecureMessage+0x8c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800d6fc:	3302      	adds	r3, #2
 800d6fe:	9302      	str	r3, [sp, #8]
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800d700:	0033      	movs	r3, r6
 800d702:	3328      	adds	r3, #40	; 0x28
 800d704:	7819      	ldrb	r1, [r3, #0]
 800d706:	2301      	movs	r3, #1
 800d708:	9501      	str	r5, [sp, #4]
 800d70a:	9300      	str	r3, [sp, #0]
 800d70c:	9a02      	ldr	r2, [sp, #8]
 800d70e:	003b      	movs	r3, r7
 800d710:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800d712:	f7ff fdb3 	bl	800d27c <PayloadEncrypt>
 800d716:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d718:	d1bf      	bne.n	800d69a <LoRaMacCryptoUnsecureMessage+0x26>
    switch( fCntID )
 800d71a:	9803      	ldr	r0, [sp, #12]
 800d71c:	4b0a      	ldr	r3, [pc, #40]	; (800d748 <LoRaMacCryptoUnsecureMessage+0xd4>)
 800d71e:	3801      	subs	r0, #1
 800d720:	2803      	cmp	r0, #3
 800d722:	d805      	bhi.n	800d730 <LoRaMacCryptoUnsecureMessage+0xbc>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 800d724:	681a      	ldr	r2, [r3, #0]
 800d726:	f7f2 fd01 	bl	800012c <__gnu_thumb1_case_uqi>
 800d72a:	0602      	.short	0x0602
 800d72c:	0a08      	.short	0x0a08
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 800d72e:	6115      	str	r5, [r2, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800d730:	685b      	ldr	r3, [r3, #4]
 800d732:	4798      	blx	r3
}
 800d734:	e7b1      	b.n	800d69a <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 800d736:	6155      	str	r5, [r2, #20]
            break;
 800d738:	e7fa      	b.n	800d730 <LoRaMacCryptoUnsecureMessage+0xbc>
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 800d73a:	6195      	str	r5, [r2, #24]
            break;
 800d73c:	e7f8      	b.n	800d730 <LoRaMacCryptoUnsecureMessage+0xbc>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 800d73e:	61d5      	str	r5, [r2, #28]
            break;
 800d740:	e7f6      	b.n	800d730 <LoRaMacCryptoUnsecureMessage+0xbc>
 800d742:	46c0      	nop			; (mov r8, r8)
 800d744:	20000170 	.word	0x20000170
 800d748:	20000d88 	.word	0x20000d88

0800d74c <LoRaMacCryptoDeriveMcRootKey>:
{
 800d74c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d74e:	0001      	movs	r1, r0
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800d750:	200b      	movs	r0, #11
    if( keyID != APP_KEY )
 800d752:	2900      	cmp	r1, #0
 800d754:	d115      	bne.n	800d782 <LoRaMacCryptoDeriveMcRootKey+0x36>
    uint8_t compBase[16] = { 0 };
 800d756:	220c      	movs	r2, #12
 800d758:	a801      	add	r0, sp, #4
 800d75a:	9100      	str	r1, [sp, #0]
 800d75c:	f003 fc6a 	bl	8011034 <memset>
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 800d760:	4b09      	ldr	r3, [pc, #36]	; (800d788 <LoRaMacCryptoDeriveMcRootKey+0x3c>)
 800d762:	6818      	ldr	r0, [r3, #0]
 800d764:	7883      	ldrb	r3, [r0, #2]
 800d766:	2b01      	cmp	r3, #1
 800d768:	d102      	bne.n	800d770 <LoRaMacCryptoDeriveMcRootKey+0x24>
        compBase[0] = 0x20;
 800d76a:	466a      	mov	r2, sp
 800d76c:	331f      	adds	r3, #31
 800d76e:	7013      	strb	r3, [r2, #0]
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800d770:	2304      	movs	r3, #4
 800d772:	2200      	movs	r2, #0
 800d774:	4669      	mov	r1, sp
 800d776:	6800      	ldr	r0, [r0, #0]
 800d778:	f7fa fd81 	bl	800827e <SecureElementDeriveAndStoreKey>
 800d77c:	2800      	cmp	r0, #0
 800d77e:	d000      	beq.n	800d782 <LoRaMacCryptoDeriveMcRootKey+0x36>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d780:	200f      	movs	r0, #15
}
 800d782:	b005      	add	sp, #20
 800d784:	bd00      	pop	{pc}
 800d786:	46c0      	nop			; (mov r8, r8)
 800d788:	20000d88 	.word	0x20000d88

0800d78c <LoRaMacCryptoSetKey>:
{
 800d78c:	b570      	push	{r4, r5, r6, lr}
 800d78e:	0005      	movs	r5, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800d790:	f7fa fd6c 	bl	800826c <SecureElementSetKey>
 800d794:	1e04      	subs	r4, r0, #0
 800d796:	d109      	bne.n	800d7ac <LoRaMacCryptoSetKey+0x20>
    if( keyID == APP_KEY )
 800d798:	2d00      	cmp	r5, #0
 800d79a:	d108      	bne.n	800d7ae <LoRaMacCryptoSetKey+0x22>
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800d79c:	f7ff ffd6 	bl	800d74c <LoRaMacCryptoDeriveMcRootKey>
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	d103      	bne.n	800d7ac <LoRaMacCryptoSetKey+0x20>
    if( keyID != MC_ROOT_KEY )
 800d7a4:	f7ff fde6 	bl	800d374 <LoRaMacCryptoDeriveMcKEKey.part.0>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800d7a8:	2800      	cmp	r0, #0
 800d7aa:	d000      	beq.n	800d7ae <LoRaMacCryptoSetKey+0x22>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d7ac:	240f      	movs	r4, #15
}
 800d7ae:	0020      	movs	r0, r4
 800d7b0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d7b4 <LoRaMacCryptoHandleJoinAccept>:
{
 800d7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7b6:	b091      	sub	sp, #68	; 0x44
 800d7b8:	0015      	movs	r5, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d7ba:	240a      	movs	r4, #10
{
 800d7bc:	9005      	str	r0, [sp, #20]
 800d7be:	9104      	str	r1, [sp, #16]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800d7c0:	2a00      	cmp	r2, #0
 800d7c2:	d050      	beq.n	800d866 <LoRaMacCryptoHandleJoinAccept+0xb2>
 800d7c4:	2900      	cmp	r1, #0
 800d7c6:	d04e      	beq.n	800d866 <LoRaMacCryptoHandleJoinAccept+0xb2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800d7c8:	2400      	movs	r4, #0
 800d7ca:	221d      	movs	r2, #29
 800d7cc:	0021      	movs	r1, r4
 800d7ce:	a808      	add	r0, sp, #32
 800d7d0:	9407      	str	r4, [sp, #28]
 800d7d2:	f003 fc2f 	bl	8011034 <memset>
    uint8_t* nonce               = ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce;
 800d7d6:	4e25      	ldr	r6, [pc, #148]	; (800d86c <LoRaMacCryptoHandleJoinAccept+0xb8>)
    uint8_t versionMinor         = 0;
 800d7d8:	ab02      	add	r3, sp, #8
 800d7da:	74dc      	strb	r4, [r3, #19]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, ( int16_t )*nonce, macMsg->Buffer,
 800d7dc:	6833      	ldr	r3, [r6, #0]
 800d7de:	a902      	add	r1, sp, #8
 800d7e0:	791a      	ldrb	r2, [r3, #4]
 800d7e2:	2313      	movs	r3, #19
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800d7e4:	af07      	add	r7, sp, #28
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, ( int16_t )*nonce, macMsg->Buffer,
 800d7e6:	185b      	adds	r3, r3, r1
 800d7e8:	9302      	str	r3, [sp, #8]
 800d7ea:	9701      	str	r7, [sp, #4]
 800d7ec:	792b      	ldrb	r3, [r5, #4]
 800d7ee:	9904      	ldr	r1, [sp, #16]
 800d7f0:	9300      	str	r3, [sp, #0]
 800d7f2:	682b      	ldr	r3, [r5, #0]
 800d7f4:	9805      	ldr	r0, [sp, #20]
 800d7f6:	f7fa fd62 	bl	80082be <SecureElementProcessJoinAccept>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d7fa:	340f      	adds	r4, #15
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, ( int16_t )*nonce, macMsg->Buffer,
 800d7fc:	2800      	cmp	r0, #0
 800d7fe:	d132      	bne.n	800d866 <LoRaMacCryptoHandleJoinAccept+0xb2>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800d800:	0039      	movs	r1, r7
 800d802:	792a      	ldrb	r2, [r5, #4]
 800d804:	6828      	ldr	r0, [r5, #0]
 800d806:	f001 faf3 	bl	800edf0 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800d80a:	0028      	movs	r0, r5
 800d80c:	f000 f830 	bl	800d870 <LoRaMacParserJoinAccept>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800d810:	3401      	adds	r4, #1
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800d812:	2800      	cmp	r0, #0
 800d814:	d127      	bne.n	800d866 <LoRaMacCryptoHandleJoinAccept+0xb2>
    retval = LoRaMacCryptoDeriveMcRootKey( APP_KEY );
 800d816:	f7ff ff99 	bl	800d74c <LoRaMacCryptoDeriveMcRootKey>
 800d81a:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d81c:	d123      	bne.n	800d866 <LoRaMacCryptoHandleJoinAccept+0xb2>
    if( keyID != MC_ROOT_KEY )
 800d81e:	f7ff fda9 	bl	800d374 <LoRaMacCryptoDeriveMcKEKey.part.0>
 800d822:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d824:	d11f      	bne.n	800d866 <LoRaMacCryptoHandleJoinAccept+0xb2>
    retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 800d826:	6833      	ldr	r3, [r6, #0]
 800d828:	1daf      	adds	r7, r5, #6
 800d82a:	3509      	adds	r5, #9
 800d82c:	002a      	movs	r2, r5
 800d82e:	0039      	movs	r1, r7
 800d830:	2003      	movs	r0, #3
 800d832:	3304      	adds	r3, #4
 800d834:	f7ff fcf2 	bl	800d21c <DeriveSessionKey10x>
 800d838:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d83a:	d114      	bne.n	800d866 <LoRaMacCryptoHandleJoinAccept+0xb2>
    retval = DeriveSessionKey10x( NWK_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 800d83c:	6833      	ldr	r3, [r6, #0]
 800d83e:	002a      	movs	r2, r5
 800d840:	0039      	movs	r1, r7
 800d842:	2002      	movs	r0, #2
 800d844:	3304      	adds	r3, #4
 800d846:	f7ff fce9 	bl	800d21c <DeriveSessionKey10x>
 800d84a:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d84c:	d10b      	bne.n	800d866 <LoRaMacCryptoHandleJoinAccept+0xb2>
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = versionMinor;
 800d84e:	aa02      	add	r2, sp, #8
 800d850:	6833      	ldr	r3, [r6, #0]
 800d852:	7cd2      	ldrb	r2, [r2, #19]
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 800d854:	60d8      	str	r0, [r3, #12]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = versionMinor;
 800d856:	709a      	strb	r2, [r3, #2]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800d858:	2201      	movs	r2, #1
 800d85a:	4252      	negs	r2, r2
 800d85c:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d85e:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d860:	615a      	str	r2, [r3, #20]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800d862:	6873      	ldr	r3, [r6, #4]
 800d864:	4798      	blx	r3
}
 800d866:	0020      	movs	r0, r4
 800d868:	b011      	add	sp, #68	; 0x44
 800d86a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d86c:	20000d88 	.word	0x20000d88

0800d870 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 800d870:	b510      	push	{r4, lr}
 800d872:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800d874:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d876:	2c00      	cmp	r4, #0
 800d878:	d040      	beq.n	800d8fc <LoRaMacParserJoinAccept+0x8c>
 800d87a:	6821      	ldr	r1, [r4, #0]
 800d87c:	2900      	cmp	r1, #0
 800d87e:	d03d      	beq.n	800d8fc <LoRaMacParserJoinAccept+0x8c>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800d880:	780b      	ldrb	r3, [r1, #0]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800d882:	2203      	movs	r2, #3
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800d884:	7163      	strb	r3, [r4, #5]
    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800d886:	3101      	adds	r1, #1
 800d888:	1da0      	adds	r0, r4, #6
 800d88a:	f001 fab1 	bl	800edf0 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800d88e:	0020      	movs	r0, r4
 800d890:	6823      	ldr	r3, [r4, #0]
 800d892:	2203      	movs	r2, #3
 800d894:	1d19      	adds	r1, r3, #4
 800d896:	3009      	adds	r0, #9
 800d898:	f001 faaa 	bl	800edf0 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800d89c:	6821      	ldr	r1, [r4, #0]
 800d89e:	79ca      	ldrb	r2, [r1, #7]
 800d8a0:	60e2      	str	r2, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800d8a2:	7a0b      	ldrb	r3, [r1, #8]
 800d8a4:	021b      	lsls	r3, r3, #8
 800d8a6:	431a      	orrs	r2, r3
 800d8a8:	60e2      	str	r2, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800d8aa:	7a4b      	ldrb	r3, [r1, #9]
 800d8ac:	041b      	lsls	r3, r3, #16
 800d8ae:	4313      	orrs	r3, r2
 800d8b0:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800d8b2:	7a8a      	ldrb	r2, [r1, #10]
 800d8b4:	0612      	lsls	r2, r2, #24
 800d8b6:	4313      	orrs	r3, r2
 800d8b8:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800d8ba:	7acb      	ldrb	r3, [r1, #11]
 800d8bc:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800d8be:	7b0b      	ldrb	r3, [r1, #12]
 800d8c0:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800d8c2:	7923      	ldrb	r3, [r4, #4]
 800d8c4:	2b21      	cmp	r3, #33	; 0x21
 800d8c6:	d11a      	bne.n	800d8fe <LoRaMacParserJoinAccept+0x8e>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800d8c8:	0020      	movs	r0, r4
 800d8ca:	2210      	movs	r2, #16
 800d8cc:	310d      	adds	r1, #13
 800d8ce:	3012      	adds	r0, #18
 800d8d0:	f001 fa8e 	bl	800edf0 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800d8d4:	231d      	movs	r3, #29
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800d8d6:	6820      	ldr	r0, [r4, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800d8d8:	1c5a      	adds	r2, r3, #1
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800d8da:	5cc1      	ldrb	r1, [r0, r3]
 800d8dc:	6261      	str	r1, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800d8de:	5c82      	ldrb	r2, [r0, r2]
 800d8e0:	0212      	lsls	r2, r2, #8
 800d8e2:	4311      	orrs	r1, r2
 800d8e4:	6261      	str	r1, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800d8e6:	1c9a      	adds	r2, r3, #2
 800d8e8:	5c82      	ldrb	r2, [r0, r2]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800d8ea:	3303      	adds	r3, #3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800d8ec:	0412      	lsls	r2, r2, #16
 800d8ee:	430a      	orrs	r2, r1
 800d8f0:	6262      	str	r2, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800d8f2:	5cc3      	ldrb	r3, [r0, r3]

    return LORAMAC_PARSER_SUCCESS;
 800d8f4:	2000      	movs	r0, #0
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800d8f6:	061b      	lsls	r3, r3, #24
 800d8f8:	431a      	orrs	r2, r3
 800d8fa:	6262      	str	r2, [r4, #36]	; 0x24
}
 800d8fc:	bd10      	pop	{r4, pc}
        return LORAMAC_PARSER_FAIL;
 800d8fe:	2001      	movs	r0, #1
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800d900:	2b11      	cmp	r3, #17
 800d902:	dcfb      	bgt.n	800d8fc <LoRaMacParserJoinAccept+0x8c>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800d904:	230d      	movs	r3, #13
 800d906:	e7e6      	b.n	800d8d6 <LoRaMacParserJoinAccept+0x66>

0800d908 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 800d908:	b570      	push	{r4, r5, r6, lr}
 800d90a:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800d90c:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d90e:	2c00      	cmp	r4, #0
 800d910:	d054      	beq.n	800d9bc <LoRaMacParserData+0xb4>
 800d912:	6821      	ldr	r1, [r4, #0]
 800d914:	2900      	cmp	r1, #0
 800d916:	d051      	beq.n	800d9bc <LoRaMacParserData+0xb4>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800d918:	780b      	ldrb	r3, [r1, #0]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800d91a:	0020      	movs	r0, r4
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800d91c:	7163      	strb	r3, [r4, #5]
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800d91e:	784a      	ldrb	r2, [r1, #1]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800d920:	3010      	adds	r0, #16
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800d922:	60a2      	str	r2, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800d924:	788b      	ldrb	r3, [r1, #2]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800d926:	1c65      	adds	r5, r4, #1
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800d928:	021b      	lsls	r3, r3, #8
 800d92a:	431a      	orrs	r2, r3
 800d92c:	60a2      	str	r2, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800d92e:	78cb      	ldrb	r3, [r1, #3]
 800d930:	041b      	lsls	r3, r3, #16
 800d932:	4313      	orrs	r3, r2
 800d934:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800d936:	790a      	ldrb	r2, [r1, #4]
 800d938:	0612      	lsls	r2, r2, #24
 800d93a:	4313      	orrs	r3, r2
 800d93c:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800d93e:	794b      	ldrb	r3, [r1, #5]
 800d940:	7323      	strb	r3, [r4, #12]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800d942:	798b      	ldrb	r3, [r1, #6]
 800d944:	81e3      	strh	r3, [r4, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800d946:	79ca      	ldrb	r2, [r1, #7]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800d948:	3108      	adds	r1, #8
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800d94a:	0212      	lsls	r2, r2, #8
 800d94c:	4313      	orrs	r3, r2
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800d94e:	7b22      	ldrb	r2, [r4, #12]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800d950:	81e3      	strh	r3, [r4, #14]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800d952:	0712      	lsls	r2, r2, #28
 800d954:	0f12      	lsrs	r2, r2, #28
 800d956:	f001 fa4b 	bl	800edf0 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800d95a:	7b21      	ldrb	r1, [r4, #12]
    macMsg->FRMPayloadSize = 0;
 800d95c:	0020      	movs	r0, r4
    macMsg->FPort = 0;
 800d95e:	2300      	movs	r3, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800d960:	0709      	lsls	r1, r1, #28
 800d962:	0f09      	lsrs	r1, r1, #28
 800d964:	000e      	movs	r6, r1
    macMsg->FRMPayloadSize = 0;
 800d966:	3028      	adds	r0, #40	; 0x28
    macMsg->FPort = 0;
 800d968:	77eb      	strb	r3, [r5, #31]
    macMsg->FRMPayloadSize = 0;
 800d96a:	7003      	strb	r3, [r0, #0]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800d96c:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800d96e:	3608      	adds	r6, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800d970:	1b93      	subs	r3, r2, r6
 800d972:	2b04      	cmp	r3, #4
 800d974:	dd0c      	ble.n	800d990 <LoRaMacParserData+0x88>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800d976:	6823      	ldr	r3, [r4, #0]
 800d978:	3109      	adds	r1, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800d97a:	3a04      	subs	r2, #4
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800d97c:	5d9e      	ldrb	r6, [r3, r6]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800d97e:	1a52      	subs	r2, r2, r1
 800d980:	b2d2      	uxtb	r2, r2
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800d982:	77ee      	strb	r6, [r5, #31]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800d984:	7002      	strb	r2, [r0, #0]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800d986:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d988:	b292      	uxth	r2, r2
 800d98a:	1859      	adds	r1, r3, r1
 800d98c:	f001 fa30 	bl	800edf0 <memcpy1>
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );

    return LORAMAC_PARSER_SUCCESS;
 800d990:	2000      	movs	r0, #0
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800d992:	6822      	ldr	r2, [r4, #0]
 800d994:	7923      	ldrb	r3, [r4, #4]
 800d996:	18d3      	adds	r3, r2, r3
 800d998:	1f1a      	subs	r2, r3, #4
 800d99a:	7811      	ldrb	r1, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800d99c:	1eda      	subs	r2, r3, #3
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800d99e:	62e1      	str	r1, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800d9a0:	7812      	ldrb	r2, [r2, #0]
 800d9a2:	0212      	lsls	r2, r2, #8
 800d9a4:	4311      	orrs	r1, r2
 800d9a6:	62e1      	str	r1, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800d9a8:	1e9a      	subs	r2, r3, #2
 800d9aa:	7812      	ldrb	r2, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800d9ac:	3b01      	subs	r3, #1
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800d9ae:	0412      	lsls	r2, r2, #16
 800d9b0:	430a      	orrs	r2, r1
 800d9b2:	62e2      	str	r2, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800d9b4:	781b      	ldrb	r3, [r3, #0]
 800d9b6:	061b      	lsls	r3, r3, #24
 800d9b8:	431a      	orrs	r2, r3
 800d9ba:	62e2      	str	r2, [r4, #44]	; 0x2c
}
 800d9bc:	bd70      	pop	{r4, r5, r6, pc}

0800d9be <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800d9be:	b510      	push	{r4, lr}
 800d9c0:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800d9c2:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d9c4:	2c00      	cmp	r4, #0
 800d9c6:	d02e      	beq.n	800da26 <LoRaMacSerializerJoinRequest+0x68>
 800d9c8:	6823      	ldr	r3, [r4, #0]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d02b      	beq.n	800da26 <LoRaMacSerializerJoinRequest+0x68>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800d9ce:	7922      	ldrb	r2, [r4, #4]
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800d9d0:	1800      	adds	r0, r0, r0
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800d9d2:	2a16      	cmp	r2, #22
 800d9d4:	d927      	bls.n	800da26 <LoRaMacSerializerJoinRequest+0x68>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800d9d6:	7962      	ldrb	r2, [r4, #5]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800d9d8:	1da1      	adds	r1, r4, #6
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800d9da:	701a      	strb	r2, [r3, #0]
    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800d9dc:	6823      	ldr	r3, [r4, #0]
 800d9de:	2208      	movs	r2, #8
 800d9e0:	1c58      	adds	r0, r3, #1
 800d9e2:	f001 fa0e 	bl	800ee02 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800d9e6:	0021      	movs	r1, r4
 800d9e8:	6820      	ldr	r0, [r4, #0]
 800d9ea:	2208      	movs	r2, #8
 800d9ec:	3009      	adds	r0, #9
 800d9ee:	310e      	adds	r1, #14
 800d9f0:	f001 fa07 	bl	800ee02 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800d9f4:	8ae3      	ldrh	r3, [r4, #22]
 800d9f6:	6822      	ldr	r2, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 800d9f8:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800d9fa:	7453      	strb	r3, [r2, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800d9fc:	8ae3      	ldrh	r3, [r4, #22]
 800d9fe:	6822      	ldr	r2, [r4, #0]
 800da00:	0a1b      	lsrs	r3, r3, #8
 800da02:	7493      	strb	r3, [r2, #18]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800da04:	69a3      	ldr	r3, [r4, #24]
 800da06:	6822      	ldr	r2, [r4, #0]
 800da08:	74d3      	strb	r3, [r2, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800da0a:	69a3      	ldr	r3, [r4, #24]
 800da0c:	6822      	ldr	r2, [r4, #0]
 800da0e:	0a1b      	lsrs	r3, r3, #8
 800da10:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800da12:	69a3      	ldr	r3, [r4, #24]
 800da14:	6822      	ldr	r2, [r4, #0]
 800da16:	0c1b      	lsrs	r3, r3, #16
 800da18:	7553      	strb	r3, [r2, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800da1a:	69a3      	ldr	r3, [r4, #24]
 800da1c:	6822      	ldr	r2, [r4, #0]
 800da1e:	0e1b      	lsrs	r3, r3, #24
 800da20:	7593      	strb	r3, [r2, #22]
    macMsg->BufSize = bufItr;
 800da22:	2317      	movs	r3, #23
 800da24:	7123      	strb	r3, [r4, #4]
}
 800da26:	bd10      	pop	{r4, pc}

0800da28 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 800da28:	b570      	push	{r4, r5, r6, lr}
 800da2a:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800da2c:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800da2e:	2c00      	cmp	r4, #0
 800da30:	d068      	beq.n	800db04 <LoRaMacSerializerData+0xdc>
 800da32:	6821      	ldr	r1, [r4, #0]
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800da34:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800da36:	2900      	cmp	r1, #0
 800da38:	d064      	beq.n	800db04 <LoRaMacSerializerData+0xdc>
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;

    if( macMsg->FRMPayloadSize > 0 )
 800da3a:	0025      	movs	r5, r4
 800da3c:	3528      	adds	r5, #40	; 0x28
 800da3e:	7828      	ldrb	r0, [r5, #0]
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800da40:	7b22      	ldrb	r2, [r4, #12]
 800da42:	0003      	movs	r3, r0
 800da44:	1e5e      	subs	r6, r3, #1
 800da46:	41b3      	sbcs	r3, r6
 800da48:	0712      	lsls	r2, r2, #28
 800da4a:	0f12      	lsrs	r2, r2, #28
 800da4c:	189b      	adds	r3, r3, r2
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800da4e:	3004      	adds	r0, #4
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800da50:	3308      	adds	r3, #8
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800da52:	181b      	adds	r3, r3, r0

    if( macMsg->BufSize < computedBufSize )
 800da54:	7922      	ldrb	r2, [r4, #4]
 800da56:	b29b      	uxth	r3, r3
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800da58:	2002      	movs	r0, #2
    if( macMsg->BufSize < computedBufSize )
 800da5a:	429a      	cmp	r2, r3
 800da5c:	d352      	bcc.n	800db04 <LoRaMacSerializerData+0xdc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800da5e:	7963      	ldrb	r3, [r4, #5]
 800da60:	700b      	strb	r3, [r1, #0]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800da62:	0021      	movs	r1, r4
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800da64:	68a3      	ldr	r3, [r4, #8]
 800da66:	6822      	ldr	r2, [r4, #0]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800da68:	3110      	adds	r1, #16
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800da6a:	7053      	strb	r3, [r2, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800da6c:	68a3      	ldr	r3, [r4, #8]
 800da6e:	6822      	ldr	r2, [r4, #0]
 800da70:	0a1b      	lsrs	r3, r3, #8
 800da72:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800da74:	68a3      	ldr	r3, [r4, #8]
 800da76:	6822      	ldr	r2, [r4, #0]
 800da78:	0c1b      	lsrs	r3, r3, #16
 800da7a:	70d3      	strb	r3, [r2, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800da7c:	68a3      	ldr	r3, [r4, #8]
 800da7e:	6822      	ldr	r2, [r4, #0]
 800da80:	0e1b      	lsrs	r3, r3, #24
 800da82:	7113      	strb	r3, [r2, #4]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800da84:	7b23      	ldrb	r3, [r4, #12]
 800da86:	6822      	ldr	r2, [r4, #0]
 800da88:	7153      	strb	r3, [r2, #5]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800da8a:	89e3      	ldrh	r3, [r4, #14]
 800da8c:	6822      	ldr	r2, [r4, #0]
 800da8e:	7193      	strb	r3, [r2, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800da90:	89e3      	ldrh	r3, [r4, #14]
 800da92:	6822      	ldr	r2, [r4, #0]
 800da94:	0a1b      	lsrs	r3, r3, #8
 800da96:	71d3      	strb	r3, [r2, #7]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800da98:	7b22      	ldrb	r2, [r4, #12]
 800da9a:	6820      	ldr	r0, [r4, #0]
 800da9c:	0712      	lsls	r2, r2, #28
 800da9e:	0f12      	lsrs	r2, r2, #28
 800daa0:	3008      	adds	r0, #8
 800daa2:	f001 f9a5 	bl	800edf0 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800daa6:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 800daa8:	782a      	ldrb	r2, [r5, #0]
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800daaa:	071b      	lsls	r3, r3, #28
 800daac:	0f1b      	lsrs	r3, r3, #28
 800daae:	001e      	movs	r6, r3
 800dab0:	3608      	adds	r6, #8
    if( macMsg->FRMPayloadSize > 0 )
 800dab2:	2a00      	cmp	r2, #0
 800dab4:	d005      	beq.n	800dac2 <LoRaMacSerializerData+0x9a>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800dab6:	1c62      	adds	r2, r4, #1
 800dab8:	7fd2      	ldrb	r2, [r2, #31]
 800daba:	6821      	ldr	r1, [r4, #0]
 800dabc:	3309      	adds	r3, #9
 800dabe:	558a      	strb	r2, [r1, r6]
 800dac0:	001e      	movs	r6, r3
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800dac2:	6823      	ldr	r3, [r4, #0]
 800dac4:	782a      	ldrb	r2, [r5, #0]
 800dac6:	1998      	adds	r0, r3, r6
 800dac8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800daca:	f001 f991 	bl	800edf0 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800dace:	782b      	ldrb	r3, [r5, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800dad0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800dad2:	6821      	ldr	r1, [r4, #0]
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800dad4:	18f3      	adds	r3, r6, r3
 800dad6:	b29b      	uxth	r3, r3
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800dad8:	54ca      	strb	r2, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800dada:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800dadc:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800dade:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800dae0:	b292      	uxth	r2, r2
 800dae2:	0a09      	lsrs	r1, r1, #8
 800dae4:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800dae6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800dae8:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800daea:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800daec:	b292      	uxth	r2, r2
 800daee:	0c09      	lsrs	r1, r1, #16
 800daf0:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800daf2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800daf4:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800daf6:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800daf8:	b292      	uxth	r2, r2
 800dafa:	0e09      	lsrs	r1, r1, #24
 800dafc:	5481      	strb	r1, [r0, r2]

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 800dafe:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800db00:	3304      	adds	r3, #4
    macMsg->BufSize = bufItr;
 800db02:	7123      	strb	r3, [r4, #4]
}
 800db04:	bd70      	pop	{r4, r5, r6, pc}

0800db06 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800db06:	3805      	subs	r0, #5
 800db08:	4243      	negs	r3, r0
 800db0a:	4158      	adcs	r0, r3
        default:
        {
            return false;
        }
    }
}
 800db0c:	b2c0      	uxtb	r0, r0
 800db0e:	4770      	bx	lr

0800db10 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800db10:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
    switch( region )
 800db12:	2805      	cmp	r0, #5
 800db14:	d105      	bne.n	800db22 <RegionGetPhyParam+0x12>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 800db16:	0008      	movs	r0, r1
 800db18:	f000 fc54 	bl	800e3c4 <RegionEU868GetPhyParam>
 800db1c:	9001      	str	r0, [sp, #4]
        default:
        {
            return phyParam;
        }
    }
}
 800db1e:	9801      	ldr	r0, [sp, #4]
 800db20:	bd0e      	pop	{r1, r2, r3, pc}
            return phyParam;
 800db22:	2300      	movs	r3, #0
 800db24:	9301      	str	r3, [sp, #4]
 800db26:	e7fa      	b.n	800db1e <RegionGetPhyParam+0xe>

0800db28 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800db28:	b510      	push	{r4, lr}
    switch( region )
 800db2a:	2805      	cmp	r0, #5
 800db2c:	d102      	bne.n	800db34 <RegionSetBandTxDone+0xc>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 800db2e:	0008      	movs	r0, r1
 800db30:	f000 fcda 	bl	800e4e8 <RegionEU868SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800db34:	bd10      	pop	{r4, pc}

0800db36 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800db36:	b510      	push	{r4, lr}
    switch( region )
 800db38:	2805      	cmp	r0, #5
 800db3a:	d102      	bne.n	800db42 <RegionInitDefaults+0xc>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 800db3c:	0008      	movs	r0, r1
 800db3e:	f000 fce9 	bl	800e514 <RegionEU868InitDefaults>
        default:
        {
            break;
        }
    }
}
 800db42:	bd10      	pop	{r4, pc}

0800db44 <RegionGetNvmCtx>:
        IN865_GET_NVM_CTX( );
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
 800db44:	2300      	movs	r3, #0
{
 800db46:	b510      	push	{r4, lr}
    switch( region )
 800db48:	2805      	cmp	r0, #5
 800db4a:	d103      	bne.n	800db54 <RegionGetNvmCtx+0x10>
        EU868_GET_NVM_CTX( );
 800db4c:	0008      	movs	r0, r1
 800db4e:	f000 fd3f 	bl	800e5d0 <RegionEU868GetNvmCtx>
 800db52:	0003      	movs	r3, r0
        }
    }
}
 800db54:	0018      	movs	r0, r3
 800db56:	bd10      	pop	{r4, pc}

0800db58 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800db58:	b510      	push	{r4, lr}
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 800db5a:	2300      	movs	r3, #0
{
 800db5c:	0004      	movs	r4, r0
 800db5e:	0008      	movs	r0, r1
 800db60:	0011      	movs	r1, r2
    switch( region )
 800db62:	2c05      	cmp	r4, #5
 800db64:	d102      	bne.n	800db6c <RegionVerify+0x14>
        EU868_VERIFY( );
 800db66:	f000 fd3b 	bl	800e5e0 <RegionEU868Verify>
 800db6a:	0003      	movs	r3, r0
        }
    }
}
 800db6c:	0018      	movs	r0, r3
 800db6e:	bd10      	pop	{r4, pc}

0800db70 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800db70:	b510      	push	{r4, lr}
    switch( region )
 800db72:	2805      	cmp	r0, #5
 800db74:	d102      	bne.n	800db7c <RegionApplyCFList+0xc>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 800db76:	0008      	movs	r0, r1
 800db78:	f001 f872 	bl	800ec60 <RegionEU868ApplyCFList>
        default:
        {
            break;
        }
    }
}
 800db7c:	bd10      	pop	{r4, pc}

0800db7e <RegionChanMaskSet>:
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 800db7e:	2300      	movs	r3, #0
{
 800db80:	b510      	push	{r4, lr}
    switch( region )
 800db82:	2805      	cmp	r0, #5
 800db84:	d103      	bne.n	800db8e <RegionChanMaskSet+0x10>
        EU868_CHAN_MASK_SET( );
 800db86:	0008      	movs	r0, r1
 800db88:	f000 fd54 	bl	800e634 <RegionEU868ChanMaskSet>
 800db8c:	0003      	movs	r3, r0
        }
    }
}
 800db8e:	0018      	movs	r0, r3
 800db90:	bd10      	pop	{r4, pc}

0800db92 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800db92:	b510      	push	{r4, lr}
 800db94:	0004      	movs	r4, r0
 800db96:	0008      	movs	r0, r1
 800db98:	0011      	movs	r1, r2
 800db9a:	001a      	movs	r2, r3
    switch( region )
 800db9c:	2c05      	cmp	r4, #5
 800db9e:	d102      	bne.n	800dba6 <RegionComputeRxWindowParameters+0x14>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800dba0:	9b02      	ldr	r3, [sp, #8]
 800dba2:	f000 fd61 	bl	800e668 <RegionEU868ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800dba6:	bd10      	pop	{r4, pc}

0800dba8 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800dba8:	b510      	push	{r4, lr}
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 800dbaa:	2300      	movs	r3, #0
{
 800dbac:	0004      	movs	r4, r0
 800dbae:	0008      	movs	r0, r1
 800dbb0:	0011      	movs	r1, r2
    switch( region )
 800dbb2:	2c05      	cmp	r4, #5
 800dbb4:	d102      	bne.n	800dbbc <RegionRxConfig+0x14>
        EU868_RX_CONFIG( );
 800dbb6:	f000 fd8b 	bl	800e6d0 <RegionEU868RxConfig>
 800dbba:	0003      	movs	r3, r0
        }
    }
}
 800dbbc:	0018      	movs	r0, r3
 800dbbe:	bd10      	pop	{r4, pc}

0800dbc0 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800dbc0:	b570      	push	{r4, r5, r6, lr}
 800dbc2:	0005      	movs	r5, r0
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 800dbc4:	2400      	movs	r4, #0
{
 800dbc6:	0008      	movs	r0, r1
 800dbc8:	0011      	movs	r1, r2
 800dbca:	001a      	movs	r2, r3
    switch( region )
 800dbcc:	2d05      	cmp	r5, #5
 800dbce:	d102      	bne.n	800dbd6 <RegionTxConfig+0x16>
        EU868_TX_CONFIG( );
 800dbd0:	f000 fdfa 	bl	800e7c8 <RegionEU868TxConfig>
 800dbd4:	0004      	movs	r4, r0
        }
    }
}
 800dbd6:	0020      	movs	r0, r4
 800dbd8:	bd70      	pop	{r4, r5, r6, pc}

0800dbda <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800dbda:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dbdc:	0005      	movs	r5, r0
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 800dbde:	2400      	movs	r4, #0
{
 800dbe0:	0008      	movs	r0, r1
 800dbe2:	0011      	movs	r1, r2
 800dbe4:	001a      	movs	r2, r3
    switch( region )
 800dbe6:	2d05      	cmp	r5, #5
 800dbe8:	d105      	bne.n	800dbf6 <RegionLinkAdrReq+0x1c>
        EU868_LINK_ADR_REQ( );
 800dbea:	9b07      	ldr	r3, [sp, #28]
 800dbec:	9300      	str	r3, [sp, #0]
 800dbee:	9b06      	ldr	r3, [sp, #24]
 800dbf0:	f000 fe72 	bl	800e8d8 <RegionEU868LinkAdrReq>
 800dbf4:	0004      	movs	r4, r0
        }
    }
}
 800dbf6:	0020      	movs	r0, r4
 800dbf8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800dbfa <RegionRxParamSetupReq>:
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800dbfa:	2300      	movs	r3, #0
{
 800dbfc:	b510      	push	{r4, lr}
    switch( region )
 800dbfe:	2805      	cmp	r0, #5
 800dc00:	d103      	bne.n	800dc0a <RegionRxParamSetupReq+0x10>
        EU868_RX_PARAM_SETUP_REQ( );
 800dc02:	0008      	movs	r0, r1
 800dc04:	f000 ff08 	bl	800ea18 <RegionEU868RxParamSetupReq>
 800dc08:	0003      	movs	r3, r0
        }
    }
}
 800dc0a:	0018      	movs	r0, r3
 800dc0c:	bd10      	pop	{r4, pc}

0800dc0e <RegionNewChannelReq>:
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 800dc0e:	2300      	movs	r3, #0
{
 800dc10:	b510      	push	{r4, lr}
    switch( region )
 800dc12:	2805      	cmp	r0, #5
 800dc14:	d103      	bne.n	800dc1e <RegionNewChannelReq+0x10>
        EU868_NEW_CHANNEL_REQ( );
 800dc16:	0008      	movs	r0, r1
 800dc18:	f001 f85c 	bl	800ecd4 <RegionEU868NewChannelReq>
 800dc1c:	0003      	movs	r3, r0
        }
    }
}
 800dc1e:	0018      	movs	r0, r3
 800dc20:	bd10      	pop	{r4, pc}

0800dc22 <RegionTxParamSetupReq>:
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800dc22:	2300      	movs	r3, #0
{
 800dc24:	b510      	push	{r4, lr}
    switch( region )
 800dc26:	2805      	cmp	r0, #5
 800dc28:	d103      	bne.n	800dc32 <RegionTxParamSetupReq+0x10>
        EU868_TX_PARAM_SETUP_REQ( );
 800dc2a:	0008      	movs	r0, r1
 800dc2c:	f000 ff17 	bl	800ea5e <RegionEU868TxParamSetupReq>
 800dc30:	0003      	movs	r3, r0
        }
    }
}
 800dc32:	0018      	movs	r0, r3
 800dc34:	bd10      	pop	{r4, pc}

0800dc36 <RegionDlChannelReq>:
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 800dc36:	2300      	movs	r3, #0
{
 800dc38:	b510      	push	{r4, lr}
    switch( region )
 800dc3a:	2805      	cmp	r0, #5
 800dc3c:	d103      	bne.n	800dc46 <RegionDlChannelReq+0x10>
        EU868_DL_CHANNEL_REQ( );
 800dc3e:	0008      	movs	r0, r1
 800dc40:	f000 ff10 	bl	800ea64 <RegionEU868DlChannelReq>
 800dc44:	0003      	movs	r3, r0
        }
    }
}
 800dc46:	0018      	movs	r0, r3
 800dc48:	bd10      	pop	{r4, pc}

0800dc4a <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800dc4a:	b510      	push	{r4, lr}
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 800dc4c:	2300      	movs	r3, #0
{
 800dc4e:	0004      	movs	r4, r0
 800dc50:	0008      	movs	r0, r1
 800dc52:	0011      	movs	r1, r2
    switch( region )
 800dc54:	2c05      	cmp	r4, #5
 800dc56:	d102      	bne.n	800dc5e <RegionAlternateDr+0x14>
        EU868_ALTERNATE_DR( );
 800dc58:	f000 ff24 	bl	800eaa4 <RegionEU868AlternateDr>
 800dc5c:	0003      	movs	r3, r0
        }
    }
}
 800dc5e:	0018      	movs	r0, r3
 800dc60:	bd10      	pop	{r4, pc}

0800dc62 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800dc62:	b570      	push	{r4, r5, r6, lr}
 800dc64:	0005      	movs	r5, r0
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800dc66:	2409      	movs	r4, #9
{
 800dc68:	0008      	movs	r0, r1
 800dc6a:	0011      	movs	r1, r2
 800dc6c:	001a      	movs	r2, r3
    switch( region )
 800dc6e:	2d05      	cmp	r5, #5
 800dc70:	d103      	bne.n	800dc7a <RegionNextChannel+0x18>
        EU868_NEXT_CHANNEL( );
 800dc72:	9b04      	ldr	r3, [sp, #16]
 800dc74:	f000 ff18 	bl	800eaa8 <RegionEU868NextChannel>
 800dc78:	0004      	movs	r4, r0
        }
    }
}
 800dc7a:	0020      	movs	r0, r4
 800dc7c:	bd70      	pop	{r4, r5, r6, pc}

0800dc7e <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800dc7e:	b510      	push	{r4, lr}
    switch( region )
 800dc80:	2805      	cmp	r0, #5
 800dc82:	d102      	bne.n	800dc8a <RegionSetContinuousWave+0xc>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 800dc84:	0008      	movs	r0, r1
 800dc86:	f001 f845 	bl	800ed14 <RegionEU868SetContinuousWave>
        default:
        {
            break;
        }
    }
}
 800dc8a:	bd10      	pop	{r4, pc}

0800dc8c <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800dc8c:	b570      	push	{r4, r5, r6, lr}
 800dc8e:	0005      	movs	r5, r0
 800dc90:	0008      	movs	r0, r1
 800dc92:	0011      	movs	r1, r2
 800dc94:	001a      	movs	r2, r3
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800dc96:	b2cc      	uxtb	r4, r1
    switch( region )
 800dc98:	2d05      	cmp	r5, #5
 800dc9a:	d102      	bne.n	800dca2 <RegionApplyDrOffset+0x16>
        EU868_APPLY_DR_OFFSET( );
 800dc9c:	f001 f862 	bl	800ed64 <RegionEU868ApplyDrOffset>
 800dca0:	0004      	movs	r4, r0
        }
    }
}
 800dca2:	0020      	movs	r0, r4
 800dca4:	bd70      	pop	{r4, r5, r6, pc}

0800dca6 <RegionRxBeaconSetup>:

void RegionRxBeaconSetup( LoRaMacRegion_t region, RxBeaconSetup_t* rxBeaconSetup, uint8_t* outDr )
{
 800dca6:	0003      	movs	r3, r0
 800dca8:	b510      	push	{r4, lr}
 800dcaa:	0008      	movs	r0, r1
 800dcac:	0011      	movs	r1, r2
    switch( region )
 800dcae:	2b05      	cmp	r3, #5
 800dcb0:	d101      	bne.n	800dcb6 <RegionRxBeaconSetup+0x10>
        AS923_RX_BEACON_SETUP( );
        AU915_RX_BEACON_SETUP( );
        CN470_RX_BEACON_SETUP( );
        CN779_RX_BEACON_SETUP( );
        EU433_RX_BEACON_SETUP( );
        EU868_RX_BEACON_SETUP( );
 800dcb2:	f001 f85f 	bl	800ed74 <RegionEU868RxBeaconSetup>
        default:
        {
            break;
        }
    }
}
 800dcb6:	bd10      	pop	{r4, pc}

0800dcb8 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800dcb8:	4800      	ldr	r0, [pc, #0]	; (800dcbc <RegionGetVersion+0x4>)
 800dcba:	4770      	bx	lr
 800dcbc:	01000300 	.word	0x01000300

0800dcc0 <RegionCommonChanVerifyDr>:
    }
    return dutyCycle;
}

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 800dcc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcc2:	b085      	sub	sp, #20
 800dcc4:	9103      	str	r1, [sp, #12]
 800dcc6:	a90a      	add	r1, sp, #40	; 0x28
 800dcc8:	7809      	ldrb	r1, [r1, #0]
 800dcca:	9002      	str	r0, [sp, #8]
 800dccc:	b249      	sxtb	r1, r1
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
    {
        return false;
 800dcce:	2000      	movs	r0, #0
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	db2d      	blt.n	800dd30 <RegionCommonChanVerifyDr+0x70>
 800dcd4:	428a      	cmp	r2, r1
 800dcd6:	dc2b      	bgt.n	800dd30 <RegionCommonChanVerifyDr+0x70>
 800dcd8:	260c      	movs	r6, #12
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800dcda:	270f      	movs	r7, #15
 800dcdc:	e022      	b.n	800dd24 <RegionCommonChanVerifyDr+0x64>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800dcde:	9c03      	ldr	r4, [sp, #12]
 800dce0:	0041      	lsls	r1, r0, #1
 800dce2:	5b09      	ldrh	r1, [r1, r4]
 800dce4:	4373      	muls	r3, r6
 800dce6:	9101      	str	r1, [sp, #4]
 800dce8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dcea:	2400      	movs	r4, #0
 800dcec:	18cb      	adds	r3, r1, r3
 800dcee:	2101      	movs	r1, #1
 800dcf0:	468c      	mov	ip, r1
 800dcf2:	9901      	ldr	r1, [sp, #4]
 800dcf4:	4665      	mov	r5, ip
 800dcf6:	4121      	asrs	r1, r4
 800dcf8:	4229      	tst	r1, r5
 800dcfa:	d00e      	beq.n	800dd1a <RegionCommonChanVerifyDr+0x5a>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800dcfc:	0035      	movs	r5, r6
 800dcfe:	4365      	muls	r5, r4
 800dd00:	18ed      	adds	r5, r5, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800dd02:	7a29      	ldrb	r1, [r5, #8]
 800dd04:	7a2d      	ldrb	r5, [r5, #8]
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800dd06:	0709      	lsls	r1, r1, #28
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800dd08:	b26d      	sxtb	r5, r5
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800dd0a:	1709      	asrs	r1, r1, #28
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800dd0c:	112d      	asrs	r5, r5, #4
    if( ( value >= min ) && ( value <= max ) )
 800dd0e:	4039      	ands	r1, r7
 800dd10:	428a      	cmp	r2, r1
 800dd12:	db02      	blt.n	800dd1a <RegionCommonChanVerifyDr+0x5a>
 800dd14:	403d      	ands	r5, r7
 800dd16:	42aa      	cmp	r2, r5
 800dd18:	dd0c      	ble.n	800dd34 <RegionCommonChanVerifyDr+0x74>
        for( uint8_t j = 0; j < 16; j++ )
 800dd1a:	3401      	adds	r4, #1
 800dd1c:	2c10      	cmp	r4, #16
 800dd1e:	d1e8      	bne.n	800dcf2 <RegionCommonChanVerifyDr+0x32>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800dd20:	3001      	adds	r0, #1
 800dd22:	b2c0      	uxtb	r0, r0
 800dd24:	0103      	lsls	r3, r0, #4
 800dd26:	9902      	ldr	r1, [sp, #8]
 800dd28:	b2db      	uxtb	r3, r3
 800dd2a:	4299      	cmp	r1, r3
 800dd2c:	d8d7      	bhi.n	800dcde <RegionCommonChanVerifyDr+0x1e>
        return false;
 800dd2e:	2000      	movs	r0, #0
}
 800dd30:	b005      	add	sp, #20
 800dd32:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    return true;
 800dd34:	2001      	movs	r0, #1
 800dd36:	e7fb      	b.n	800dd30 <RegionCommonChanVerifyDr+0x70>

0800dd38 <RegionCommonValueInRange>:
{
 800dd38:	0003      	movs	r3, r0
    {
        return 1;
    }
    return 0;
 800dd3a:	2000      	movs	r0, #0
    if( ( value >= min ) && ( value <= max ) )
 800dd3c:	428b      	cmp	r3, r1
 800dd3e:	db04      	blt.n	800dd4a <RegionCommonValueInRange+0x12>
 800dd40:	0fd8      	lsrs	r0, r3, #31
 800dd42:	17d1      	asrs	r1, r2, #31
 800dd44:	429a      	cmp	r2, r3
 800dd46:	4148      	adcs	r0, r1
        return 1;
 800dd48:	b2c0      	uxtb	r0, r0
}
 800dd4a:	4770      	bx	lr

0800dd4c <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 800dd4c:	b530      	push	{r4, r5, lr}
    uint8_t index = id / 16;
 800dd4e:	090b      	lsrs	r3, r1, #4
{
 800dd50:	0004      	movs	r4, r0

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800dd52:	0915      	lsrs	r5, r2, #4
    {
        return false;
 800dd54:	2000      	movs	r0, #0
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800dd56:	429d      	cmp	r5, r3
 800dd58:	d30b      	bcc.n	800dd72 <RegionCommonChanDisable+0x26>
 800dd5a:	4291      	cmp	r1, r2
 800dd5c:	d209      	bcs.n	800dd72 <RegionCommonChanDisable+0x26>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800dd5e:	220f      	movs	r2, #15
 800dd60:	3001      	adds	r0, #1
 800dd62:	4011      	ands	r1, r2
 800dd64:	0002      	movs	r2, r0
 800dd66:	408a      	lsls	r2, r1
 800dd68:	0011      	movs	r1, r2
 800dd6a:	005b      	lsls	r3, r3, #1
 800dd6c:	5ae2      	ldrh	r2, [r4, r3]
 800dd6e:	438a      	bics	r2, r1
 800dd70:	52e2      	strh	r2, [r4, r3]

    return true;
}
 800dd72:	bd30      	pop	{r4, r5, pc}

0800dd74 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800dd74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd76:	1e03      	subs	r3, r0, #0
 800dd78:	9201      	str	r2, [sp, #4]
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800dd7a:	d005      	beq.n	800dd88 <RegionCommonCountChannels+0x14>
 800dd7c:	0048      	lsls	r0, r1, #1
 800dd7e:	181b      	adds	r3, r3, r0
    uint8_t nbChannels = 0;
 800dd80:	2000      	movs	r0, #0
    {
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800dd82:	9a01      	ldr	r2, [sp, #4]
 800dd84:	4291      	cmp	r1, r2
 800dd86:	d300      	bcc.n	800dd8a <RegionCommonCountChannels+0x16>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
    }

    return nbChannels;
}
 800dd88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 800dd8a:	2400      	movs	r4, #0
    uint8_t nbActiveBits = 0;
 800dd8c:	0022      	movs	r2, r4
        nbChannels += CountChannels( channelsMask[i], 16 );
 800dd8e:	881f      	ldrh	r7, [r3, #0]
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800dd90:	2501      	movs	r5, #1
 800dd92:	40a5      	lsls	r5, r4
 800dd94:	002e      	movs	r6, r5
 800dd96:	403e      	ands	r6, r7
 800dd98:	42b5      	cmp	r5, r6
 800dd9a:	d101      	bne.n	800dda0 <RegionCommonCountChannels+0x2c>
            nbActiveBits++;
 800dd9c:	3201      	adds	r2, #1
 800dd9e:	b2d2      	uxtb	r2, r2
    for( uint8_t j = 0; j < nbBits; j++ )
 800dda0:	3401      	adds	r4, #1
 800dda2:	2c10      	cmp	r4, #16
 800dda4:	d1f4      	bne.n	800dd90 <RegionCommonCountChannels+0x1c>
        nbChannels += CountChannels( channelsMask[i], 16 );
 800dda6:	1880      	adds	r0, r0, r2
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800dda8:	3101      	adds	r1, #1
        nbChannels += CountChannels( channelsMask[i], 16 );
 800ddaa:	b2c0      	uxtb	r0, r0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800ddac:	b2c9      	uxtb	r1, r1
 800ddae:	3302      	adds	r3, #2
 800ddb0:	e7e7      	b.n	800dd82 <RegionCommonCountChannels+0xe>

0800ddb2 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 800ddb2:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800ddb4:	2800      	cmp	r0, #0
 800ddb6:	d005      	beq.n	800ddc4 <RegionCommonChanMaskCopy+0x12>
 800ddb8:	2900      	cmp	r1, #0
 800ddba:	d003      	beq.n	800ddc4 <RegionCommonChanMaskCopy+0x12>
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	0052      	lsls	r2, r2, #1
    {
        for( uint8_t i = 0; i < len; i++ )
 800ddc0:	4293      	cmp	r3, r2
 800ddc2:	d100      	bne.n	800ddc6 <RegionCommonChanMaskCopy+0x14>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
        }
    }
}
 800ddc4:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 800ddc6:	5acc      	ldrh	r4, [r1, r3]
 800ddc8:	52c4      	strh	r4, [r0, r3]
        for( uint8_t i = 0; i < len; i++ )
 800ddca:	3302      	adds	r3, #2
 800ddcc:	e7f8      	b.n	800ddc0 <RegionCommonChanMaskCopy+0xe>
	...

0800ddd0 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800ddd0:	b082      	sub	sp, #8
 800ddd2:	b570      	push	{r4, r5, r6, lr}
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800ddd4:	8805      	ldrh	r5, [r0, #0]
{
 800ddd6:	9305      	str	r3, [sp, #20]
    if( joined == false )
 800ddd8:	2a00      	cmp	r2, #0
 800ddda:	d111      	bne.n	800de00 <RegionCommonSetBandTxDone+0x30>
    if( elapsedTime.Seconds < 3600 )
 800dddc:	26e1      	movs	r6, #225	; 0xe1
        dutyCycle = BACKOFF_DC_1_HOUR;
 800ddde:	2464      	movs	r4, #100	; 0x64
    if( elapsedTime.Seconds < 3600 )
 800dde0:	0136      	lsls	r6, r6, #4
 800dde2:	42b3      	cmp	r3, r6
 800dde4:	d307      	bcc.n	800ddf6 <RegionCommonSetBandTxDone+0x26>
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
 800dde6:	4c0e      	ldr	r4, [pc, #56]	; (800de20 <RegionCommonSetBandTxDone+0x50>)
        dutyCycle = BACKOFF_DC_24_HOURS;
 800dde8:	429c      	cmp	r4, r3
 800ddea:	4152      	adcs	r2, r2
 800ddec:	4254      	negs	r4, r2
 800ddee:	4a0d      	ldr	r2, [pc, #52]	; (800de24 <RegionCommonSetBandTxDone+0x54>)
 800ddf0:	4b0d      	ldr	r3, [pc, #52]	; (800de28 <RegionCommonSetBandTxDone+0x58>)
 800ddf2:	4014      	ands	r4, r2
 800ddf4:	18e4      	adds	r4, r4, r3
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800ddf6:	1c2b      	adds	r3, r5, #0
 800ddf8:	42a5      	cmp	r5, r4
 800ddfa:	d200      	bcs.n	800ddfe <RegionCommonSetBandTxDone+0x2e>
 800ddfc:	1c23      	adds	r3, r4, #0
 800ddfe:	b29d      	uxth	r5, r3

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800de00:	6882      	ldr	r2, [r0, #8]
 800de02:	1c2b      	adds	r3, r5, #0
 800de04:	2d00      	cmp	r5, #0
 800de06:	d100      	bne.n	800de0a <RegionCommonSetBandTxDone+0x3a>
 800de08:	2301      	movs	r3, #1
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	4359      	muls	r1, r3
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
    }
    else
    {
        band->TimeCredits = 0;
 800de0e:	2300      	movs	r3, #0
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800de10:	428a      	cmp	r2, r1
 800de12:	d900      	bls.n	800de16 <RegionCommonSetBandTxDone+0x46>
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800de14:	1a53      	subs	r3, r2, r1
    }
}
 800de16:	6083      	str	r3, [r0, #8]
 800de18:	bc70      	pop	{r4, r5, r6}
 800de1a:	bc08      	pop	{r3}
 800de1c:	b002      	add	sp, #8
 800de1e:	4718      	bx	r3
 800de20:	00009aaf 	.word	0x00009aaf
 800de24:	ffffdcd8 	.word	0xffffdcd8
 800de28:	00002710 	.word	0x00002710

0800de2c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800de2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de2e:	b087      	sub	sp, #28
 800de30:	9302      	str	r3, [sp, #8]
 800de32:	ab0c      	add	r3, sp, #48	; 0x30
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	0015      	movs	r5, r2
 800de38:	000c      	movs	r4, r1
 800de3a:	9305      	str	r3, [sp, #20]
 800de3c:	0007      	movs	r7, r0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800de3e:	f002 fe6b 	bl	8010b18 <UTIL_TIMER_GetCurrentTime>
 800de42:	2214      	movs	r2, #20
 800de44:	4355      	muls	r5, r2
 800de46:	1963      	adds	r3, r4, r5
 800de48:	9304      	str	r3, [sp, #16]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800de4a:	2301      	movs	r3, #1
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;
 800de4c:	2600      	movs	r6, #0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800de4e:	425b      	negs	r3, r3
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800de50:	9003      	str	r0, [sp, #12]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800de52:	9301      	str	r3, [sp, #4]

    for( uint8_t i = 0; i < nbBands; i++ )
 800de54:	9b04      	ldr	r3, [sp, #16]
 800de56:	42a3      	cmp	r3, r4
 800de58:	d107      	bne.n	800de6a <RegionCommonUpdateBandTimeOff+0x3e>
            }
        }
    }


    if( validBands == 0 )
 800de5a:	2e00      	cmp	r6, #0
 800de5c:	d102      	bne.n	800de64 <RegionCommonUpdateBandTimeOff+0x38>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 800de5e:	2301      	movs	r3, #1
 800de60:	425b      	negs	r3, r3
 800de62:	9301      	str	r3, [sp, #4]
    }
    return minTimeToWait;
}
 800de64:	9801      	ldr	r0, [sp, #4]
 800de66:	b007      	add	sp, #28
 800de68:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800de6a:	990d      	ldr	r1, [sp, #52]	; 0x34
    uint16_t dutyCycle = band->DCycle;
 800de6c:	8822      	ldrh	r2, [r4, #0]
    if( joined == false )
 800de6e:	2f00      	cmp	r7, #0
 800de70:	d112      	bne.n	800de98 <RegionCommonUpdateBandTimeOff+0x6c>
    if( elapsedTime.Seconds < 3600 )
 800de72:	20e1      	movs	r0, #225	; 0xe1
        dutyCycle = BACKOFF_DC_1_HOUR;
 800de74:	2364      	movs	r3, #100	; 0x64
    if( elapsedTime.Seconds < 3600 )
 800de76:	0100      	lsls	r0, r0, #4
 800de78:	4281      	cmp	r1, r0
 800de7a:	d308      	bcc.n	800de8e <RegionCommonUpdateBandTimeOff+0x62>
        dutyCycle = BACKOFF_DC_24_HOURS;
 800de7c:	0038      	movs	r0, r7
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
 800de7e:	4b27      	ldr	r3, [pc, #156]	; (800df1c <RegionCommonUpdateBandTimeOff+0xf0>)
        dutyCycle = BACKOFF_DC_24_HOURS;
 800de80:	428b      	cmp	r3, r1
 800de82:	4178      	adcs	r0, r7
 800de84:	4926      	ldr	r1, [pc, #152]	; (800df20 <RegionCommonUpdateBandTimeOff+0xf4>)
 800de86:	4243      	negs	r3, r0
 800de88:	400b      	ands	r3, r1
 800de8a:	4926      	ldr	r1, [pc, #152]	; (800df24 <RegionCommonUpdateBandTimeOff+0xf8>)
 800de8c:	185b      	adds	r3, r3, r1
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800de8e:	1c11      	adds	r1, r2, #0
 800de90:	429a      	cmp	r2, r3
 800de92:	d200      	bcs.n	800de96 <RegionCommonUpdateBandTimeOff+0x6a>
 800de94:	1c19      	adds	r1, r3, #0
 800de96:	b28a      	uxth	r2, r1
    if( dutyCycle == 0 )
 800de98:	1c15      	adds	r5, r2, #0
 800de9a:	2a00      	cmp	r2, #0
 800de9c:	d100      	bne.n	800dea0 <RegionCommonUpdateBandTimeOff+0x74>
 800de9e:	2501      	movs	r5, #1
    uint8_t timePeriodFactor = 1;
 800dea0:	2001      	movs	r0, #1
 800dea2:	b2ad      	uxth	r5, r5
    if( joined == false )
 800dea4:	2f00      	cmp	r7, #0
 800dea6:	d104      	bne.n	800deb2 <RegionCommonUpdateBandTimeOff+0x86>
        timePeriodFactor = dutyCycle / BACKOFF_DC_TIMER_PERIOD_FACTOR;
 800dea8:	2164      	movs	r1, #100	; 0x64
 800deaa:	0028      	movs	r0, r5
 800deac:	f7f2 f95c 	bl	8000168 <__udivsi3>
 800deb0:	b2c0      	uxtb	r0, r0
    band->MaxTimeCredits = DUTY_CYCLE_TIME_PERIOD * timePeriodFactor;
 800deb2:	4b1d      	ldr	r3, [pc, #116]	; (800df28 <RegionCommonUpdateBandTimeOff+0xfc>)
 800deb4:	4343      	muls	r3, r0
    if( band->LastBandUpdateTime == 0 )
 800deb6:	6860      	ldr	r0, [r4, #4]
    band->MaxTimeCredits = DUTY_CYCLE_TIME_PERIOD * timePeriodFactor;
 800deb8:	60e3      	str	r3, [r4, #12]
    if( band->LastBandUpdateTime == 0 )
 800deba:	2800      	cmp	r0, #0
 800debc:	d100      	bne.n	800dec0 <RegionCommonUpdateBandTimeOff+0x94>
        band->TimeCredits = band->MaxTimeCredits;
 800debe:	60a3      	str	r3, [r4, #8]
        if( ( dutyCycleEnabled == false ) &&
 800dec0:	9a02      	ldr	r2, [sp, #8]
    if( joined == false )
 800dec2:	2f00      	cmp	r7, #0
 800dec4:	d102      	bne.n	800decc <RegionCommonUpdateBandTimeOff+0xa0>
        if( ( dutyCycleEnabled == false ) &&
 800dec6:	2a00      	cmp	r2, #0
 800dec8:	d103      	bne.n	800ded2 <RegionCommonUpdateBandTimeOff+0xa6>
 800deca:	9a05      	ldr	r2, [sp, #20]
        if( dutyCycleEnabled == false )
 800decc:	2a00      	cmp	r2, #0
 800dece:	d100      	bne.n	800ded2 <RegionCommonUpdateBandTimeOff+0xa6>
            band->TimeCredits = band->MaxTimeCredits;
 800ded0:	60a3      	str	r3, [r4, #8]
    band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800ded2:	f002 fe2b 	bl	8010b2c <UTIL_TIMER_GetElapsedTime>
 800ded6:	68a3      	ldr	r3, [r4, #8]
 800ded8:	18c0      	adds	r0, r0, r3
    if( band->TimeCredits > band->MaxTimeCredits )
 800deda:	68e3      	ldr	r3, [r4, #12]
    band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800dedc:	60a0      	str	r0, [r4, #8]
    if( band->TimeCredits > band->MaxTimeCredits )
 800dede:	4298      	cmp	r0, r3
 800dee0:	d900      	bls.n	800dee4 <RegionCommonUpdateBandTimeOff+0xb8>
        band->TimeCredits = band->MaxTimeCredits;
 800dee2:	60a3      	str	r3, [r4, #8]
    band->LastBandUpdateTime = currentTime;
 800dee4:	9a03      	ldr	r2, [sp, #12]
 800dee6:	6062      	str	r2, [r4, #4]
        creditCosts = expectedTimeOnAir * dutyCycle;
 800dee8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800deea:	4355      	muls	r5, r2
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800deec:	68a2      	ldr	r2, [r4, #8]
 800deee:	42aa      	cmp	r2, r5
 800def0:	d802      	bhi.n	800def8 <RegionCommonUpdateBandTimeOff+0xcc>
 800def2:	9902      	ldr	r1, [sp, #8]
 800def4:	2900      	cmp	r1, #0
 800def6:	d105      	bne.n	800df04 <RegionCommonUpdateBandTimeOff+0xd8>
            bands[i].ReadyForTransmission = true;
 800def8:	2301      	movs	r3, #1
 800defa:	7423      	strb	r3, [r4, #16]
            validBands++;
 800defc:	18f6      	adds	r6, r6, r3
                validBands++;
 800defe:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800df00:	3414      	adds	r4, #20
 800df02:	e7a7      	b.n	800de54 <RegionCommonUpdateBandTimeOff+0x28>
            bands[i].ReadyForTransmission = false;
 800df04:	2100      	movs	r1, #0
 800df06:	7421      	strb	r1, [r4, #16]
            if( bands[i].MaxTimeCredits > creditCosts )
 800df08:	429d      	cmp	r5, r3
 800df0a:	d2f9      	bcs.n	800df00 <RegionCommonUpdateBandTimeOff+0xd4>
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800df0c:	9b01      	ldr	r3, [sp, #4]
 800df0e:	1aad      	subs	r5, r5, r2
 800df10:	42ab      	cmp	r3, r5
 800df12:	d900      	bls.n	800df16 <RegionCommonUpdateBandTimeOff+0xea>
 800df14:	9501      	str	r5, [sp, #4]
                validBands++;
 800df16:	3601      	adds	r6, #1
 800df18:	e7f1      	b.n	800defe <RegionCommonUpdateBandTimeOff+0xd2>
 800df1a:	46c0      	nop			; (mov r8, r8)
 800df1c:	00009aaf 	.word	0x00009aaf
 800df20:	ffffdcd8 	.word	0xffffdcd8
 800df24:	00002710 	.word	0x00002710
 800df28:	0036ee80 	.word	0x0036ee80

0800df2c <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 800df2c:	b510      	push	{r4, lr}
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800df2e:	7802      	ldrb	r2, [r0, #0]
{
 800df30:	0003      	movs	r3, r0
    uint8_t retIndex = 0;
 800df32:	2000      	movs	r0, #0
    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800df34:	2a03      	cmp	r2, #3
 800df36:	d113      	bne.n	800df60 <RegionCommonParseLinkAdrReq+0x34>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 800df38:	785a      	ldrb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800df3a:	300f      	adds	r0, #15
 800df3c:	0014      	movs	r4, r2
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800df3e:	0912      	lsrs	r2, r2, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800df40:	4004      	ands	r4, r0
 800df42:	708c      	strb	r4, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800df44:	704a      	strb	r2, [r1, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800df46:	789a      	ldrb	r2, [r3, #2]
 800df48:	808a      	strh	r2, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800df4a:	78dc      	ldrb	r4, [r3, #3]
 800df4c:	0224      	lsls	r4, r4, #8
 800df4e:	4322      	orrs	r2, r4
 800df50:	808a      	strh	r2, [r1, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 800df52:	791b      	ldrb	r3, [r3, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800df54:	065a      	lsls	r2, r3, #25
 800df56:	0f52      	lsrs	r2, r2, #29
        linkAdrParams->NbRep &= 0x0F;
 800df58:	4003      	ands	r3, r0
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800df5a:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800df5c:	700b      	strb	r3, [r1, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 800df5e:	380a      	subs	r0, #10
    }
    return retIndex;
}
 800df60:	bd10      	pop	{r4, pc}

0800df62 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800df62:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df64:	b087      	sub	sp, #28
 800df66:	9305      	str	r3, [sp, #20]
    uint8_t status = verifyParams->Status;
    int8_t datarate = verifyParams->Datarate;
 800df68:	2306      	movs	r3, #6
    int8_t txPower = verifyParams->TxPower;
 800df6a:	2707      	movs	r7, #7
{
 800df6c:	9103      	str	r1, [sp, #12]
 800df6e:	9204      	str	r2, [sp, #16]
    int8_t datarate = verifyParams->Datarate;
 800df70:	56c3      	ldrsb	r3, [r0, r3]
    uint8_t status = verifyParams->Status;
 800df72:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800df74:	9302      	str	r3, [sp, #8]
    int8_t nbRepetitions = verifyParams->NbRep;

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800df76:	7943      	ldrb	r3, [r0, #5]
{
 800df78:	0004      	movs	r4, r0
    int8_t txPower = verifyParams->TxPower;
 800df7a:	57c7      	ldrsb	r7, [r0, r7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800df7c:	7a06      	ldrb	r6, [r0, #8]
    if( verifyParams->AdrEnabled == false )
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d026      	beq.n	800dfd0 <RegionCommonLinkAdrReqVerifyParams+0x6e>
    int8_t nbRepetitions = verifyParams->NbRep;
 800df82:	b276      	sxtb	r6, r6
        nbRepetitions = verifyParams->CurrentNbRep;
        datarate =  verifyParams->CurrentDatarate;
        txPower =  verifyParams->CurrentTxPower;
    }

    if( status != 0 )
 800df84:	2d00      	cmp	r5, #0
 800df86:	d019      	beq.n	800dfbc <RegionCommonLinkAdrReqVerifyParams+0x5a>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800df88:	69a2      	ldr	r2, [r4, #24]
 800df8a:	2314      	movs	r3, #20
 800df8c:	9201      	str	r2, [sp, #4]
 800df8e:	2215      	movs	r2, #21
 800df90:	56a2      	ldrsb	r2, [r4, r2]
 800df92:	56e3      	ldrsb	r3, [r4, r3]
 800df94:	9200      	str	r2, [sp, #0]
 800df96:	7b20      	ldrb	r0, [r4, #12]
 800df98:	9a02      	ldr	r2, [sp, #8]
 800df9a:	6921      	ldr	r1, [r4, #16]
 800df9c:	f7ff fe90 	bl	800dcc0 <RegionCommonChanVerifyDr>
 800dfa0:	2800      	cmp	r0, #0
 800dfa2:	d101      	bne.n	800dfa8 <RegionCommonLinkAdrReqVerifyParams+0x46>
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
        {
            status &= 0xFD; // Datarate KO
 800dfa4:	2302      	movs	r3, #2
 800dfa6:	439d      	bics	r5, r3
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800dfa8:	231d      	movs	r3, #29
 800dfaa:	221c      	movs	r2, #28
 800dfac:	56e3      	ldrsb	r3, [r4, r3]
 800dfae:	56a2      	ldrsb	r2, [r4, r2]
    if( ( value >= min ) && ( value <= max ) )
 800dfb0:	42bb      	cmp	r3, r7
 800dfb2:	dc15      	bgt.n	800dfe0 <RegionCommonLinkAdrReqVerifyParams+0x7e>
 800dfb4:	42ba      	cmp	r2, r7
 800dfb6:	da14      	bge.n	800dfe2 <RegionCommonLinkAdrReqVerifyParams+0x80>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800dfb8:	2304      	movs	r3, #4
 800dfba:	439d      	bics	r5, r3
    *dr = datarate;
    *txPow = txPower;
    *nbRep = nbRepetitions;

    return status;
}
 800dfbc:	0028      	movs	r0, r5
    *dr = datarate;
 800dfbe:	9b03      	ldr	r3, [sp, #12]
 800dfc0:	9a02      	ldr	r2, [sp, #8]
 800dfc2:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 800dfc4:	9b04      	ldr	r3, [sp, #16]
 800dfc6:	701f      	strb	r7, [r3, #0]
    *nbRep = nbRepetitions;
 800dfc8:	9b05      	ldr	r3, [sp, #20]
 800dfca:	701e      	strb	r6, [r3, #0]
}
 800dfcc:	b007      	add	sp, #28
 800dfce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        datarate =  verifyParams->CurrentDatarate;
 800dfd0:	2309      	movs	r3, #9
        nbRepetitions = verifyParams->CurrentNbRep;
 800dfd2:	260b      	movs	r6, #11
        txPower =  verifyParams->CurrentTxPower;
 800dfd4:	270a      	movs	r7, #10
        datarate =  verifyParams->CurrentDatarate;
 800dfd6:	56c3      	ldrsb	r3, [r0, r3]
        nbRepetitions = verifyParams->CurrentNbRep;
 800dfd8:	5786      	ldrsb	r6, [r0, r6]
        datarate =  verifyParams->CurrentDatarate;
 800dfda:	9302      	str	r3, [sp, #8]
        txPower =  verifyParams->CurrentTxPower;
 800dfdc:	57c7      	ldrsb	r7, [r0, r7]
 800dfde:	e7d1      	b.n	800df84 <RegionCommonLinkAdrReqVerifyParams+0x22>
 800dfe0:	001f      	movs	r7, r3
    if( status == 0x07 )
 800dfe2:	2d07      	cmp	r5, #7
 800dfe4:	d1ea      	bne.n	800dfbc <RegionCommonLinkAdrReqVerifyParams+0x5a>
        if( nbRepetitions == 0 )
 800dfe6:	2e00      	cmp	r6, #0
 800dfe8:	d1e8      	bne.n	800dfbc <RegionCommonLinkAdrReqVerifyParams+0x5a>
            nbRepetitions = 1;
 800dfea:	3601      	adds	r6, #1
 800dfec:	e7e6      	b.n	800dfbc <RegionCommonLinkAdrReqVerifyParams+0x5a>
	...

0800dff0 <RegionCommonComputeSymbolTimeLoRa>:

/* ST_WORKAROUND_BEGIN: remove float/double */
uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 800dff0:	b510      	push	{r4, lr}
 800dff2:	0004      	movs	r4, r0
    return (1000000000UL/bandwidth) * (1 << phyDr);
 800dff4:	4802      	ldr	r0, [pc, #8]	; (800e000 <RegionCommonComputeSymbolTimeLoRa+0x10>)
 800dff6:	f7f2 f8b7 	bl	8000168 <__udivsi3>
 800dffa:	40a0      	lsls	r0, r4
}
 800dffc:	bd10      	pop	{r4, pc}
 800dffe:	46c0      	nop			; (mov r8, r8)
 800e000:	3b9aca00 	.word	0x3b9aca00

0800e004 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
    // ((8 * 1000000) / 50);
    return 160000UL;
}
 800e004:	4800      	ldr	r0, [pc, #0]	; (800e008 <RegionCommonComputeSymbolTimeFsk+0x4>)
 800e006:	4770      	bx	lr
 800e008:	00027100 	.word	0x00027100

0800e00c <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 800e00c:	b570      	push	{r4, r5, r6, lr}
 800e00e:	0004      	movs	r4, r0
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 800e010:	480f      	ldr	r0, [pc, #60]	; (800e050 <RegionCommonComputeRxWindowParameters+0x44>)
{
 800e012:	000e      	movs	r6, r1
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 800e014:	4350      	muls	r0, r2
 800e016:	1e62      	subs	r2, r4, #1
 800e018:	0021      	movs	r1, r4
 800e01a:	1880      	adds	r0, r0, r2
{
 800e01c:	001d      	movs	r5, r3
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 800e01e:	f7f2 f8a3 	bl	8000168 <__udivsi3>
 800e022:	4b0c      	ldr	r3, [pc, #48]	; (800e054 <RegionCommonComputeRxWindowParameters+0x48>)
 800e024:	18f3      	adds	r3, r6, r3
 800e026:	005b      	lsls	r3, r3, #1
 800e028:	18c0      	adds	r0, r0, r3
 800e02a:	42b0      	cmp	r0, r6
 800e02c:	d200      	bcs.n	800e030 <RegionCommonComputeRxWindowParameters+0x24>
 800e02e:	0030      	movs	r0, r6
 800e030:	9b04      	ldr	r3, [sp, #16]
  *windowOffset = DIVC((int32_t)(4 * tSymbol - ((*windowTimeout * tSymbol) >> 1)), 1000000L) - 1 - wakeUpTime;
 800e032:	4909      	ldr	r1, [pc, #36]	; (800e058 <RegionCommonComputeRxWindowParameters+0x4c>)
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 800e034:	6018      	str	r0, [r3, #0]
  *windowOffset = DIVC((int32_t)(4 * tSymbol - ((*windowTimeout * tSymbol) >> 1)), 1000000L) - 1 - wakeUpTime;
 800e036:	00a3      	lsls	r3, r4, #2
 800e038:	4344      	muls	r4, r0
 800e03a:	0864      	lsrs	r4, r4, #1
 800e03c:	1b18      	subs	r0, r3, r4
 800e03e:	4b07      	ldr	r3, [pc, #28]	; (800e05c <RegionCommonComputeRxWindowParameters+0x50>)
 800e040:	43ed      	mvns	r5, r5
 800e042:	18c0      	adds	r0, r0, r3
 800e044:	f7f2 f91a 	bl	800027c <__divsi3>
 800e048:	9b05      	ldr	r3, [sp, #20]
 800e04a:	1940      	adds	r0, r0, r5
 800e04c:	6018      	str	r0, [r3, #0]
}
 800e04e:	bd70      	pop	{r4, r5, r6, pc}
 800e050:	001e8480 	.word	0x001e8480
 800e054:	7ffffffc 	.word	0x7ffffffc
 800e058:	000f4240 	.word	0x000f4240
 800e05c:	000f423f 	.word	0x000f423f

0800e060 <RegionCommonComputeTxPower>:
/* ST_WORKAROUND_END */

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800e060:	b570      	push	{r4, r5, r6, lr}
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800e062:	0040      	lsls	r0, r0, #1
{
 800e064:	1c14      	adds	r4, r2, #0
 800e066:	1c0d      	adds	r5, r1, #0
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800e068:	f7f3 fa1e 	bl	80014a8 <__aeabi_ui2f>
 800e06c:	1c01      	adds	r1, r0, #0
 800e06e:	1c28      	adds	r0, r5, #0
 800e070:	f7f3 f832 	bl	80010d8 <__aeabi_fsub>
 800e074:	1c21      	adds	r1, r4, #0
 800e076:	f7f3 f82f 	bl	80010d8 <__aeabi_fsub>
 800e07a:	f7f5 f84b 	bl	8003114 <__aeabi_f2d>
 800e07e:	f002 ffe1 	bl	8011044 <floor>
 800e082:	f7f4 ffbb 	bl	8002ffc <__aeabi_d2iz>

    return phyTxPower;
 800e086:	b240      	sxtb	r0, r0
}
 800e088:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e08c <RegionCommonRxBeaconSetup>:

void RegionCommonRxBeaconSetup( RegionCommonRxBeaconSetupParams_t* rxBeaconSetupParams )
{
 800e08c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e08e:	0004      	movs	r4, r0
    bool rxContinuous = true;
    uint8_t datarate;

    // Set the radio into sleep mode
    Radio.Sleep( );
 800e090:	4e19      	ldr	r6, [pc, #100]	; (800e0f8 <RegionCommonRxBeaconSetup+0x6c>)
{
 800e092:	b08b      	sub	sp, #44	; 0x2c
    Radio.Sleep( );
 800e094:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800e096:	4798      	blx	r3

    // Setup frequency and payload length
    Radio.SetChannel( rxBeaconSetupParams->Frequency );
 800e098:	6860      	ldr	r0, [r4, #4]
 800e09a:	68f3      	ldr	r3, [r6, #12]
 800e09c:	4798      	blx	r3
    Radio.SetMaxPayloadLength( MODEM_LORA, rxBeaconSetupParams->BeaconSize );
 800e09e:	2001      	movs	r0, #1
 800e0a0:	7a21      	ldrb	r1, [r4, #8]
 800e0a2:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800e0a4:	4798      	blx	r3
    {
        rxContinuous = false;
    }

    // Get region specific datarate
    datarate = rxBeaconSetupParams->Datarates[rxBeaconSetupParams->BeaconDatarate];
 800e0a6:	7a63      	ldrb	r3, [r4, #9]

    // Setup radio
    Radio.SetRxConfig( MODEM_LORA, rxBeaconSetupParams->BeaconChannelBW, datarate,
 800e0a8:	6822      	ldr	r2, [r4, #0]
 800e0aa:	2500      	movs	r5, #0
 800e0ac:	5cd2      	ldrb	r2, [r2, r3]
    if( rxBeaconSetupParams->RxTime != 0 )
 800e0ae:	68e3      	ldr	r3, [r4, #12]
    Radio.SetRxConfig( MODEM_LORA, rxBeaconSetupParams->BeaconChannelBW, datarate,
 800e0b0:	7aa1      	ldrb	r1, [r4, #10]
    if( rxBeaconSetupParams->RxTime != 0 )
 800e0b2:	4258      	negs	r0, r3
 800e0b4:	4143      	adcs	r3, r0
    Radio.SetRxConfig( MODEM_LORA, rxBeaconSetupParams->BeaconChannelBW, datarate,
 800e0b6:	9309      	str	r3, [sp, #36]	; 0x24
 800e0b8:	7a23      	ldrb	r3, [r4, #8]
 800e0ba:	69b7      	ldr	r7, [r6, #24]
 800e0bc:	9304      	str	r3, [sp, #16]
 800e0be:	2301      	movs	r3, #1
 800e0c0:	9303      	str	r3, [sp, #12]
 800e0c2:	8a23      	ldrh	r3, [r4, #16]
 800e0c4:	9508      	str	r5, [sp, #32]
 800e0c6:	9302      	str	r3, [sp, #8]
 800e0c8:	230a      	movs	r3, #10
 800e0ca:	9301      	str	r3, [sp, #4]
 800e0cc:	3b09      	subs	r3, #9
 800e0ce:	0018      	movs	r0, r3
 800e0d0:	9507      	str	r5, [sp, #28]
 800e0d2:	9506      	str	r5, [sp, #24]
 800e0d4:	9505      	str	r5, [sp, #20]
 800e0d6:	9500      	str	r5, [sp, #0]
 800e0d8:	47b8      	blx	r7
                       1, 0, 10, rxBeaconSetupParams->SymbolTimeout, true, rxBeaconSetupParams->BeaconSize, false, 0, 0, false, rxContinuous );

    Radio.Rx( rxBeaconSetupParams->RxTime );
 800e0da:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800e0dc:	68e0      	ldr	r0, [r4, #12]
 800e0de:	4798      	blx	r3
    
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
 800e0e0:	7a63      	ldrb	r3, [r4, #9]
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	9301      	str	r3, [sp, #4]
 800e0e6:	6863      	ldr	r3, [r4, #4]
 800e0e8:	0029      	movs	r1, r5
 800e0ea:	9300      	str	r3, [sp, #0]
 800e0ec:	2002      	movs	r0, #2
 800e0ee:	4b03      	ldr	r3, [pc, #12]	; (800e0fc <RegionCommonRxBeaconSetup+0x70>)
 800e0f0:	f002 fa2e 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
}
 800e0f4:	b00b      	add	sp, #44	; 0x2c
 800e0f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0f8:	080117e0 	.word	0x080117e0
 800e0fc:	08011fb0 	.word	0x08011fb0

0800e100 <RegionCommonCountNbOfEnabledChannels>:

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800e100:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e102:	b087      	sub	sp, #28
 800e104:	9305      	str	r3, [sp, #20]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800e106:	2300      	movs	r3, #0
    uint8_t nbRestrictedChannelsCount = 0;
 800e108:	469c      	mov	ip, r3
    uint8_t nbChannelCount = 0;
 800e10a:	001e      	movs	r6, r3
{
 800e10c:	9103      	str	r1, [sp, #12]
 800e10e:	9204      	str	r2, [sp, #16]
 800e110:	011c      	lsls	r4, r3, #4
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800e112:	8a02      	ldrh	r2, [r0, #16]
 800e114:	b2e4      	uxtb	r4, r4
 800e116:	42a2      	cmp	r2, r4
 800e118:	d806      	bhi.n	800e128 <RegionCommonCountNbOfEnabledChannels+0x28>
                enabledChannels[nbChannelCount++] = i + j;
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800e11a:	4662      	mov	r2, ip
    *nbEnabledChannels = nbChannelCount;
 800e11c:	9b04      	ldr	r3, [sp, #16]
 800e11e:	701e      	strb	r6, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800e120:	9b05      	ldr	r3, [sp, #20]
 800e122:	701a      	strb	r2, [r3, #0]
}
 800e124:	b007      	add	sp, #28
 800e126:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800e128:	005a      	lsls	r2, r3, #1
 800e12a:	9202      	str	r2, [sp, #8]
 800e12c:	2200      	movs	r2, #0
 800e12e:	6841      	ldr	r1, [r0, #4]
 800e130:	9d02      	ldr	r5, [sp, #8]
 800e132:	2701      	movs	r7, #1
 800e134:	5b49      	ldrh	r1, [r1, r5]
 800e136:	4111      	asrs	r1, r2
 800e138:	4239      	tst	r1, r7
 800e13a:	d02c      	beq.n	800e196 <RegionCommonCountNbOfEnabledChannels+0x96>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800e13c:	210c      	movs	r1, #12
 800e13e:	1915      	adds	r5, r2, r4
 800e140:	434d      	muls	r5, r1
 800e142:	6881      	ldr	r1, [r0, #8]
 800e144:	194d      	adds	r5, r1, r5
 800e146:	6829      	ldr	r1, [r5, #0]
 800e148:	2900      	cmp	r1, #0
 800e14a:	d024      	beq.n	800e196 <RegionCommonCountNbOfEnabledChannels+0x96>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800e14c:	7801      	ldrb	r1, [r0, #0]
 800e14e:	2900      	cmp	r1, #0
 800e150:	d105      	bne.n	800e15e <RegionCommonCountNbOfEnabledChannels+0x5e>
                    ( countNbOfEnabledChannelsParams->JoinChannels > 0 ) )
 800e152:	8a41      	ldrh	r1, [r0, #18]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800e154:	2900      	cmp	r1, #0
 800e156:	d002      	beq.n	800e15e <RegionCommonCountNbOfEnabledChannels+0x5e>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels & ( 1 << j ) ) == 0 )
 800e158:	4111      	asrs	r1, r2
 800e15a:	4239      	tst	r1, r7
 800e15c:	d01b      	beq.n	800e196 <RegionCommonCountNbOfEnabledChannels+0x96>
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800e15e:	2101      	movs	r1, #1
 800e160:	5641      	ldrsb	r1, [r0, r1]
 800e162:	9100      	str	r1, [sp, #0]
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800e164:	7a29      	ldrb	r1, [r5, #8]
 800e166:	070f      	lsls	r7, r1, #28
 800e168:	9101      	str	r1, [sp, #4]
    if( ( value >= min ) && ( value <= max ) )
 800e16a:	1739      	asrs	r1, r7, #28
 800e16c:	9f00      	ldr	r7, [sp, #0]
 800e16e:	428f      	cmp	r7, r1
 800e170:	db11      	blt.n	800e196 <RegionCommonCountNbOfEnabledChannels+0x96>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800e172:	4669      	mov	r1, sp
 800e174:	7909      	ldrb	r1, [r1, #4]
 800e176:	b249      	sxtb	r1, r1
    if( ( value >= min ) && ( value <= max ) )
 800e178:	1109      	asrs	r1, r1, #4
 800e17a:	428f      	cmp	r7, r1
 800e17c:	dc0b      	bgt.n	800e196 <RegionCommonCountNbOfEnabledChannels+0x96>
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800e17e:	7a69      	ldrb	r1, [r5, #9]
 800e180:	2514      	movs	r5, #20
 800e182:	4369      	muls	r1, r5
 800e184:	68c5      	ldr	r5, [r0, #12]
 800e186:	1869      	adds	r1, r5, r1
 800e188:	7c09      	ldrb	r1, [r1, #16]
 800e18a:	2900      	cmp	r1, #0
 800e18c:	d109      	bne.n	800e1a2 <RegionCommonCountNbOfEnabledChannels+0xa2>
                    nbRestrictedChannelsCount++;
 800e18e:	4661      	mov	r1, ip
 800e190:	3101      	adds	r1, #1
 800e192:	b2c9      	uxtb	r1, r1
 800e194:	468c      	mov	ip, r1
        for( uint8_t j = 0; j < 16; j++ )
 800e196:	3201      	adds	r2, #1
 800e198:	2a10      	cmp	r2, #16
 800e19a:	d1c8      	bne.n	800e12e <RegionCommonCountNbOfEnabledChannels+0x2e>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800e19c:	3301      	adds	r3, #1
 800e19e:	b2db      	uxtb	r3, r3
 800e1a0:	e7b6      	b.n	800e110 <RegionCommonCountNbOfEnabledChannels+0x10>
                enabledChannels[nbChannelCount++] = i + j;
 800e1a2:	9f03      	ldr	r7, [sp, #12]
 800e1a4:	1c71      	adds	r1, r6, #1
 800e1a6:	18a5      	adds	r5, r4, r2
 800e1a8:	55bd      	strb	r5, [r7, r6]
 800e1aa:	b2ce      	uxtb	r6, r1
 800e1ac:	e7f3      	b.n	800e196 <RegionCommonCountNbOfEnabledChannels+0x96>

0800e1ae <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800e1ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1b0:	0004      	movs	r4, r0
 800e1b2:	b089      	sub	sp, #36	; 0x24
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800e1b4:	6840      	ldr	r0, [r0, #4]
{
 800e1b6:	001d      	movs	r5, r3
 800e1b8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800e1ba:	9206      	str	r2, [sp, #24]
 800e1bc:	000e      	movs	r6, r1
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800e1be:	f002 fcb5 	bl	8010b2c <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800e1c2:	6823      	ldr	r3, [r4, #0]
    *nbRestrictedChannels = 1;
 800e1c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800e1c6:	1a1b      	subs	r3, r3, r0
 800e1c8:	603b      	str	r3, [r7, #0]
    *nbRestrictedChannels = 1;
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	7013      	strb	r3, [r2, #0]
    *nbEnabledChannels = 0;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800e1d2:	9305      	str	r3, [sp, #20]
 800e1d4:	6863      	ldr	r3, [r4, #4]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d002      	beq.n	800e1e0 <RegionCommonIdentifyChannels+0x32>
 800e1da:	6823      	ldr	r3, [r4, #0]
 800e1dc:	4283      	cmp	r3, r0
 800e1de:	d825      	bhi.n	800e22c <RegionCommonIdentifyChannels+0x7e>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800e1e0:	9b05      	ldr	r3, [sp, #20]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800e1e2:	69e1      	ldr	r1, [r4, #28]
        *aggregatedTimeOff = 0;
 800e1e4:	6033      	str	r3, [r6, #0]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800e1e6:	7808      	ldrb	r0, [r1, #0]
 800e1e8:	69a1      	ldr	r1, [r4, #24]
 800e1ea:	7a23      	ldrb	r3, [r4, #8]
 800e1ec:	9103      	str	r1, [sp, #12]
 800e1ee:	0021      	movs	r1, r4
 800e1f0:	469c      	mov	ip, r3
 800e1f2:	7a63      	ldrb	r3, [r4, #9]
 800e1f4:	ae01      	add	r6, sp, #4
 800e1f6:	9307      	str	r3, [sp, #28]
 800e1f8:	310c      	adds	r1, #12
 800e1fa:	c90c      	ldmia	r1!, {r2, r3}
 800e1fc:	c60c      	stmia	r6!, {r2, r3}
 800e1fe:	7d21      	ldrb	r1, [r4, #20]
 800e200:	4663      	mov	r3, ip
 800e202:	9100      	str	r1, [sp, #0]
 800e204:	69e1      	ldr	r1, [r4, #28]
 800e206:	9a07      	ldr	r2, [sp, #28]
 800e208:	68c9      	ldr	r1, [r1, #12]
 800e20a:	f7ff fe0f 	bl	800de2c <RegionCommonUpdateBandTimeOff>
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800e20e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800e210:	6038      	str	r0, [r7, #0]
        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800e212:	002a      	movs	r2, r5
 800e214:	9906      	ldr	r1, [sp, #24]
 800e216:	69e0      	ldr	r0, [r4, #28]
 800e218:	f7ff ff72 	bl	800e100 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800e21c:	782b      	ldrb	r3, [r5, #0]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d004      	beq.n	800e22c <RegionCommonIdentifyChannels+0x7e>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
 800e222:	2000      	movs	r0, #0
        *nextTxDelay = 0;
 800e224:	9b05      	ldr	r3, [sp, #20]
 800e226:	603b      	str	r3, [r7, #0]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800e228:	b009      	add	sp, #36	; 0x24
 800e22a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if( *nbRestrictedChannels > 0 )
 800e22c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e22e:	7818      	ldrb	r0, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800e230:	4243      	negs	r3, r0
 800e232:	4158      	adcs	r0, r3
 800e234:	300b      	adds	r0, #11
 800e236:	e7f7      	b.n	800e228 <RegionCommonIdentifyChannels+0x7a>

0800e238 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800e238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e23a:	b08b      	sub	sp, #44	; 0x2c
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800e23c:	ac04      	add	r4, sp, #16
 800e23e:	0025      	movs	r5, r4
{
 800e240:	4694      	mov	ip, r2
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800e242:	4b0f      	ldr	r3, [pc, #60]	; (800e280 <RegionCommonRxConfigPrint+0x48>)
 800e244:	cbc4      	ldmia	r3!, {r2, r6, r7}
 800e246:	c5c4      	stmia	r5!, {r2, r6, r7}
 800e248:	cbc4      	ldmia	r3!, {r2, r6, r7}
 800e24a:	c5c4      	stmia	r5!, {r2, r6, r7}

    if ( rxSlot < RX_SLOT_NONE )
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 800e24c:	4663      	mov	r3, ip
    if ( rxSlot < RX_SLOT_NONE )
 800e24e:	2805      	cmp	r0, #5
 800e250:	d80c      	bhi.n	800e26c <RegionCommonRxConfigPrint+0x34>
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 800e252:	9101      	str	r1, [sp, #4]
 800e254:	0080      	lsls	r0, r0, #2
 800e256:	9302      	str	r3, [sp, #8]
 800e258:	5903      	ldr	r3, [r0, r4]
 800e25a:	2201      	movs	r2, #1
 800e25c:	9300      	str	r3, [sp, #0]
 800e25e:	2100      	movs	r1, #0
 800e260:	2002      	movs	r0, #2
 800e262:	4b08      	ldr	r3, [pc, #32]	; (800e284 <RegionCommonRxConfigPrint+0x4c>)
 800e264:	f002 f974 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800e268:	b00b      	add	sp, #44	; 0x2c
 800e26a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800e26c:	9301      	str	r3, [sp, #4]
 800e26e:	9100      	str	r1, [sp, #0]
 800e270:	2201      	movs	r2, #1
 800e272:	2100      	movs	r1, #0
 800e274:	4b04      	ldr	r3, [pc, #16]	; (800e288 <RegionCommonRxConfigPrint+0x50>)
 800e276:	2002      	movs	r0, #2
 800e278:	f002 f96a 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
}
 800e27c:	e7f4      	b.n	800e268 <RegionCommonRxConfigPrint+0x30>
 800e27e:	46c0      	nop			; (mov r8, r8)
 800e280:	08011678 	.word	0x08011678
 800e284:	08011fcf 	.word	0x08011fcf
 800e288:	08011fee 	.word	0x08011fee

0800e28c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800e28c:	b507      	push	{r0, r1, r2, lr}
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800e28e:	4b04      	ldr	r3, [pc, #16]	; (800e2a0 <RegionCommonTxConfigPrint+0x14>)
 800e290:	9101      	str	r1, [sp, #4]
 800e292:	9000      	str	r0, [sp, #0]
 800e294:	2201      	movs	r2, #1
 800e296:	2100      	movs	r1, #0
 800e298:	2002      	movs	r0, #2
 800e29a:	f002 f959 	bl	8010550 <UTIL_ADV_TRACE_COND_FSend>
}
 800e29e:	bd07      	pop	{r0, r1, r2, pc}
 800e2a0:	0801200a 	.word	0x0801200a

0800e2a4 <GetBandwidth>:
    return nextLowerDr;
}

static uint32_t GetBandwidth( uint32_t drIndex )
{
    switch( BandwidthsEU868[drIndex] )
 800e2a4:	4b06      	ldr	r3, [pc, #24]	; (800e2c0 <GetBandwidth+0x1c>)
 800e2a6:	0080      	lsls	r0, r0, #2
 800e2a8:	58c3      	ldr	r3, [r0, r3]
 800e2aa:	4a06      	ldr	r2, [pc, #24]	; (800e2c4 <GetBandwidth+0x20>)
 800e2ac:	2001      	movs	r0, #1
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	d004      	beq.n	800e2bc <GetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800e2b2:	4a05      	ldr	r2, [pc, #20]	; (800e2c8 <GetBandwidth+0x24>)
 800e2b4:	189b      	adds	r3, r3, r2
 800e2b6:	4258      	negs	r0, r3
 800e2b8:	4158      	adcs	r0, r3
 800e2ba:	0040      	lsls	r0, r0, #1
    }
}
 800e2bc:	4770      	bx	lr
 800e2be:	46c0      	nop			; (mov r8, r8)
 800e2c0:	08011690 	.word	0x08011690
 800e2c4:	0003d090 	.word	0x0003d090
 800e2c8:	fff85ee0 	.word	0xfff85ee0

0800e2cc <GetTimeOnAir>:
    }
    return true;
}

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800e2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    int8_t phyDr = DataratesEU868[datarate];
 800e2ce:	271f      	movs	r7, #31
 800e2d0:	4b12      	ldr	r3, [pc, #72]	; (800e31c <GetTimeOnAir+0x50>)
{
 800e2d2:	b085      	sub	sp, #20
    int8_t phyDr = DataratesEU868[datarate];
 800e2d4:	3301      	adds	r3, #1
 800e2d6:	181b      	adds	r3, r3, r0
{
 800e2d8:	000c      	movs	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800e2da:	57df      	ldrsb	r7, [r3, r7]
{
 800e2dc:	0005      	movs	r5, r0
    uint32_t bandwidth = GetBandwidth( datarate );
 800e2de:	f7ff ffe1 	bl	800e2a4 <GetBandwidth>
 800e2e2:	4b0f      	ldr	r3, [pc, #60]	; (800e320 <GetTimeOnAir+0x54>)
 800e2e4:	0001      	movs	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800e2e6:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800e2e8:	2001      	movs	r0, #1
 800e2ea:	b2e4      	uxtb	r4, r4
 800e2ec:	2d07      	cmp	r5, #7
 800e2ee:	d10c      	bne.n	800e30a <GetTimeOnAir+0x3e>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800e2f0:	2305      	movs	r3, #5
 800e2f2:	9003      	str	r0, [sp, #12]
 800e2f4:	2000      	movs	r0, #0
 800e2f6:	22fa      	movs	r2, #250	; 0xfa
 800e2f8:	9300      	str	r3, [sp, #0]
 800e2fa:	0003      	movs	r3, r0
 800e2fc:	0092      	lsls	r2, r2, #2
 800e2fe:	437a      	muls	r2, r7
 800e300:	9402      	str	r4, [sp, #8]
 800e302:	9001      	str	r0, [sp, #4]
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800e304:	47b0      	blx	r6
    }
    return timeOnAir;
}
 800e306:	b005      	add	sp, #20
 800e308:	bdf0      	pop	{r4, r5, r6, r7, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800e30a:	2300      	movs	r3, #0
 800e30c:	9301      	str	r3, [sp, #4]
 800e30e:	3308      	adds	r3, #8
 800e310:	9300      	str	r3, [sp, #0]
 800e312:	003a      	movs	r2, r7
 800e314:	0003      	movs	r3, r0
 800e316:	9003      	str	r0, [sp, #12]
 800e318:	9402      	str	r4, [sp, #8]
 800e31a:	e7f3      	b.n	800e304 <GetTimeOnAir+0x38>
 800e31c:	08011690 	.word	0x08011690
 800e320:	080117e0 	.word	0x080117e0

0800e324 <VerifyRfFreq>:
{
 800e324:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( Radio.CheckRfFrequency( freq ) == false )
 800e326:	4b1a      	ldr	r3, [pc, #104]	; (800e390 <VerifyRfFreq+0x6c>)
{
 800e328:	0004      	movs	r4, r0
    if( Radio.CheckRfFrequency( freq ) == false )
 800e32a:	6a1b      	ldr	r3, [r3, #32]
{
 800e32c:	000d      	movs	r5, r1
    if( Radio.CheckRfFrequency( freq ) == false )
 800e32e:	9301      	str	r3, [sp, #4]
 800e330:	4798      	blx	r3
 800e332:	2800      	cmp	r0, #0
 800e334:	d006      	beq.n	800e344 <VerifyRfFreq+0x20>
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800e336:	4b17      	ldr	r3, [pc, #92]	; (800e394 <VerifyRfFreq+0x70>)
 800e338:	4a17      	ldr	r2, [pc, #92]	; (800e398 <VerifyRfFreq+0x74>)
 800e33a:	18e3      	adds	r3, r4, r3
 800e33c:	4293      	cmp	r3, r2
 800e33e:	d802      	bhi.n	800e346 <VerifyRfFreq+0x22>
        *band = 2;
 800e340:	2302      	movs	r3, #2
        *band = 3;
 800e342:	702b      	strb	r3, [r5, #0]
}
 800e344:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800e346:	4b15      	ldr	r3, [pc, #84]	; (800e39c <VerifyRfFreq+0x78>)
 800e348:	4a15      	ldr	r2, [pc, #84]	; (800e3a0 <VerifyRfFreq+0x7c>)
 800e34a:	18e3      	adds	r3, r4, r3
 800e34c:	4293      	cmp	r3, r2
 800e34e:	d801      	bhi.n	800e354 <VerifyRfFreq+0x30>
        *band = 0;
 800e350:	2300      	movs	r3, #0
 800e352:	e7f6      	b.n	800e342 <VerifyRfFreq+0x1e>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800e354:	4b13      	ldr	r3, [pc, #76]	; (800e3a4 <VerifyRfFreq+0x80>)
 800e356:	4a14      	ldr	r2, [pc, #80]	; (800e3a8 <VerifyRfFreq+0x84>)
 800e358:	18e3      	adds	r3, r4, r3
 800e35a:	4293      	cmp	r3, r2
 800e35c:	d801      	bhi.n	800e362 <VerifyRfFreq+0x3e>
        *band = 1;
 800e35e:	2301      	movs	r3, #1
 800e360:	e7ef      	b.n	800e342 <VerifyRfFreq+0x1e>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800e362:	4b12      	ldr	r3, [pc, #72]	; (800e3ac <VerifyRfFreq+0x88>)
 800e364:	4a12      	ldr	r2, [pc, #72]	; (800e3b0 <VerifyRfFreq+0x8c>)
 800e366:	18e3      	adds	r3, r4, r3
 800e368:	4293      	cmp	r3, r2
 800e36a:	d801      	bhi.n	800e370 <VerifyRfFreq+0x4c>
        *band = 5;
 800e36c:	2305      	movs	r3, #5
 800e36e:	e7e8      	b.n	800e342 <VerifyRfFreq+0x1e>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800e370:	4b10      	ldr	r3, [pc, #64]	; (800e3b4 <VerifyRfFreq+0x90>)
 800e372:	4a11      	ldr	r2, [pc, #68]	; (800e3b8 <VerifyRfFreq+0x94>)
 800e374:	18e3      	adds	r3, r4, r3
 800e376:	4293      	cmp	r3, r2
 800e378:	d801      	bhi.n	800e37e <VerifyRfFreq+0x5a>
        *band = 3;
 800e37a:	2303      	movs	r3, #3
 800e37c:	e7e1      	b.n	800e342 <VerifyRfFreq+0x1e>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800e37e:	4b0f      	ldr	r3, [pc, #60]	; (800e3bc <VerifyRfFreq+0x98>)
 800e380:	18e4      	adds	r4, r4, r3
 800e382:	4b0f      	ldr	r3, [pc, #60]	; (800e3c0 <VerifyRfFreq+0x9c>)
 800e384:	429c      	cmp	r4, r3
 800e386:	d801      	bhi.n	800e38c <VerifyRfFreq+0x68>
        *band = 4;
 800e388:	2304      	movs	r3, #4
 800e38a:	e7da      	b.n	800e342 <VerifyRfFreq+0x1e>
        return false;
 800e38c:	2000      	movs	r0, #0
 800e38e:	e7d9      	b.n	800e344 <VerifyRfFreq+0x20>
 800e390:	080117e0 	.word	0x080117e0
 800e394:	cc8faa40 	.word	0xcc8faa40
 800e398:	001e847f 	.word	0x001e847f
 800e39c:	cc7125c0 	.word	0xcc7125c0
 800e3a0:	002dc6c0 	.word	0x002dc6c0
 800e3a4:	cc435eff 	.word	0xcc435eff
 800e3a8:	000927bf 	.word	0x000927bf
 800e3ac:	cc38b0a0 	.word	0xcc38b0a0
 800e3b0:	0007a120 	.word	0x0007a120
 800e3b4:	cc2e0240 	.word	0xcc2e0240
 800e3b8:	0003d090 	.word	0x0003d090
 800e3bc:	cc296e60 	.word	0xcc296e60
 800e3c0:	000493e0 	.word	0x000493e0

0800e3c4 <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800e3c4:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
 800e3c6:	2200      	movs	r2, #0
{
 800e3c8:	0003      	movs	r3, r0
 800e3ca:	7800      	ldrb	r0, [r0, #0]
    PhyParam_t phyParam = { 0 };
 800e3cc:	9200      	str	r2, [sp, #0]

    switch( getPhy->Attribute )
 800e3ce:	380b      	subs	r0, #11
 800e3d0:	282e      	cmp	r0, #46	; 0x2e
 800e3d2:	d821      	bhi.n	800e418 <RegionEU868GetPhyParam+0x54>
 800e3d4:	f7f1 feaa 	bl	800012c <__gnu_thumb1_case_uqi>
 800e3d8:	2d272522 	.word	0x2d272522
 800e3dc:	39363432 	.word	0x39363432
 800e3e0:	43403e3c 	.word	0x43403e3c
 800e3e4:	4f204d20 	.word	0x4f204d20
 800e3e8:	20555351 	.word	0x20555351
 800e3ec:	185b5720 	.word	0x185b5720
 800e3f0:	20202020 	.word	0x20202020
 800e3f4:	20202020 	.word	0x20202020
 800e3f8:	20202020 	.word	0x20202020
 800e3fc:	635d4d20 	.word	0x635d4d20
 800e400:	634d2020 	.word	0x634d2020
 800e404:	6520      	.short	0x6520
 800e406:	6c          	.byte	0x6c
 800e407:	00          	.byte	0x00
            phyParam.Value = EU868_DEFAULT_DATARATE;
            break;
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 800e408:	785b      	ldrb	r3, [r3, #1]
 800e40a:	b25b      	sxtb	r3, r3
        nextLowerDr = minDr;
 800e40c:	1e1a      	subs	r2, r3, #0
    if( dr == minDr )
 800e40e:	d001      	beq.n	800e414 <RegionEU868GetPhyParam+0x50>
        nextLowerDr = dr - 1;
 800e410:	3b01      	subs	r3, #1
 800e412:	b2da      	uxtb	r2, r3
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 800e414:	b252      	sxtb	r2, r2
 800e416:	9200      	str	r2, [sp, #0]
            break;
        }
    }

    return phyParam;
}
 800e418:	9800      	ldr	r0, [sp, #0]
 800e41a:	bd0e      	pop	{r1, r2, r3, pc}
            phyParam.Value = EU868_ADR_ACK_LIMIT;
 800e41c:	2340      	movs	r3, #64	; 0x40
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800e41e:	9300      	str	r3, [sp, #0]
            break;
 800e420:	e7fa      	b.n	800e418 <RegionEU868GetPhyParam+0x54>
            phyParam.Value = EU868_ADR_ACK_DELAY;
 800e422:	2320      	movs	r3, #32
 800e424:	e7fb      	b.n	800e41e <RegionEU868GetPhyParam+0x5a>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800e426:	2101      	movs	r1, #1
 800e428:	4a24      	ldr	r2, [pc, #144]	; (800e4bc <RegionEU868GetPhyParam+0xf8>)
 800e42a:	5659      	ldrsb	r1, [r3, r1]
 800e42c:	3228      	adds	r2, #40	; 0x28
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800e42e:	5c53      	ldrb	r3, [r2, r1]
 800e430:	e7f5      	b.n	800e41e <RegionEU868GetPhyParam+0x5a>
 800e432:	2101      	movs	r1, #1
 800e434:	4a21      	ldr	r2, [pc, #132]	; (800e4bc <RegionEU868GetPhyParam+0xf8>)
 800e436:	5659      	ldrsb	r1, [r3, r1]
 800e438:	3230      	adds	r2, #48	; 0x30
 800e43a:	e7f8      	b.n	800e42e <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800e43c:	2301      	movs	r3, #1
 800e43e:	e7ee      	b.n	800e41e <RegionEU868GetPhyParam+0x5a>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800e440:	4b1f      	ldr	r3, [pc, #124]	; (800e4c0 <RegionEU868GetPhyParam+0xfc>)
 800e442:	e7ec      	b.n	800e41e <RegionEU868GetPhyParam+0x5a>
            phyParam.Value = EU868_RECEIVE_DELAY1;
 800e444:	23fa      	movs	r3, #250	; 0xfa
 800e446:	009b      	lsls	r3, r3, #2
 800e448:	e7e9      	b.n	800e41e <RegionEU868GetPhyParam+0x5a>
            phyParam.Value = EU868_RECEIVE_DELAY2;
 800e44a:	23fa      	movs	r3, #250	; 0xfa
 800e44c:	00db      	lsls	r3, r3, #3
 800e44e:	e7e6      	b.n	800e41e <RegionEU868GetPhyParam+0x5a>
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
 800e450:	4b1c      	ldr	r3, [pc, #112]	; (800e4c4 <RegionEU868GetPhyParam+0x100>)
 800e452:	e7e4      	b.n	800e41e <RegionEU868GetPhyParam+0x5a>
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
 800e454:	4b1c      	ldr	r3, [pc, #112]	; (800e4c8 <RegionEU868GetPhyParam+0x104>)
 800e456:	e7e2      	b.n	800e41e <RegionEU868GetPhyParam+0x5a>
            phyParam.Value = EU868_MAX_FCNT_GAP;
 800e458:	2380      	movs	r3, #128	; 0x80
 800e45a:	01db      	lsls	r3, r3, #7
 800e45c:	e7df      	b.n	800e41e <RegionEU868GetPhyParam+0x5a>
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
 800e45e:	21fa      	movs	r1, #250	; 0xfa
 800e460:	481a      	ldr	r0, [pc, #104]	; (800e4cc <RegionEU868GetPhyParam+0x108>)
 800e462:	0089      	lsls	r1, r1, #2
 800e464:	f000 fca8 	bl	800edb8 <randr>
 800e468:	23fa      	movs	r3, #250	; 0xfa
 800e46a:	00db      	lsls	r3, r3, #3
 800e46c:	18c0      	adds	r0, r0, r3
            phyParam.Value = GetBandwidth( getPhy->Datarate );
 800e46e:	9000      	str	r0, [sp, #0]
            break;
 800e470:	e7d2      	b.n	800e418 <RegionEU868GetPhyParam+0x54>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800e472:	4b17      	ldr	r3, [pc, #92]	; (800e4d0 <RegionEU868GetPhyParam+0x10c>)
 800e474:	e7d3      	b.n	800e41e <RegionEU868GetPhyParam+0x5a>
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 800e476:	4b17      	ldr	r3, [pc, #92]	; (800e4d4 <RegionEU868GetPhyParam+0x110>)
 800e478:	e7d1      	b.n	800e41e <RegionEU868GetPhyParam+0x5a>
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 800e47a:	4b17      	ldr	r3, [pc, #92]	; (800e4d8 <RegionEU868GetPhyParam+0x114>)
 800e47c:	e7cf      	b.n	800e41e <RegionEU868GetPhyParam+0x5a>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800e47e:	2310      	movs	r3, #16
 800e480:	e7cd      	b.n	800e41e <RegionEU868GetPhyParam+0x5a>
            phyParam.Channels = NvmCtx.Channels;
 800e482:	4b16      	ldr	r3, [pc, #88]	; (800e4dc <RegionEU868GetPhyParam+0x118>)
 800e484:	e7cb      	b.n	800e41e <RegionEU868GetPhyParam+0x5a>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800e486:	2383      	movs	r3, #131	; 0x83
 800e488:	05db      	lsls	r3, r3, #23
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800e48a:	9300      	str	r3, [sp, #0]
            break;
 800e48c:	e7c4      	b.n	800e418 <RegionEU868GetPhyParam+0x54>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800e48e:	4b14      	ldr	r3, [pc, #80]	; (800e4e0 <RegionEU868GetPhyParam+0x11c>)
 800e490:	e7fb      	b.n	800e48a <RegionEU868GetPhyParam+0xc6>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800e492:	466a      	mov	r2, sp
 800e494:	4b13      	ldr	r3, [pc, #76]	; (800e4e4 <RegionEU868GetPhyParam+0x120>)
 800e496:	8013      	strh	r3, [r2, #0]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 800e498:	2300      	movs	r3, #0
 800e49a:	7093      	strb	r3, [r2, #2]
            break;
 800e49c:	e7bc      	b.n	800e418 <RegionEU868GetPhyParam+0x54>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800e49e:	2303      	movs	r3, #3
 800e4a0:	e7bd      	b.n	800e41e <RegionEU868GetPhyParam+0x5a>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800e4a2:	2101      	movs	r1, #1
 800e4a4:	4a05      	ldr	r2, [pc, #20]	; (800e4bc <RegionEU868GetPhyParam+0xf8>)
 800e4a6:	5659      	ldrsb	r1, [r3, r1]
 800e4a8:	1c53      	adds	r3, r2, #1
 800e4aa:	185b      	adds	r3, r3, r1
 800e4ac:	7fdb      	ldrb	r3, [r3, #31]
 800e4ae:	e7b6      	b.n	800e41e <RegionEU868GetPhyParam+0x5a>
            phyParam.Value = GetBandwidth( getPhy->Datarate );
 800e4b0:	2001      	movs	r0, #1
 800e4b2:	5618      	ldrsb	r0, [r3, r0]
 800e4b4:	f7ff fef6 	bl	800e2a4 <GetBandwidth>
 800e4b8:	e7d9      	b.n	800e46e <RegionEU868GetPhyParam+0xaa>
 800e4ba:	46c0      	nop			; (mov r8, r8)
 800e4bc:	08011690 	.word	0x08011690
 800e4c0:	00000bb8 	.word	0x00000bb8
 800e4c4:	00001388 	.word	0x00001388
 800e4c8:	00001770 	.word	0x00001770
 800e4cc:	fffffc18 	.word	0xfffffc18
 800e4d0:	33d3e608 	.word	0x33d3e608
 800e4d4:	20000eec 	.word	0x20000eec
 800e4d8:	20000eee 	.word	0x20000eee
 800e4dc:	20000db4 	.word	0x20000db4
 800e4e0:	4009999a 	.word	0x4009999a
 800e4e4:	00000211 	.word	0x00000211

0800e4e8 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
    RegionCommonSetBandTxDone( &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band],
 800e4e8:	230c      	movs	r3, #12
{
 800e4ea:	b513      	push	{r0, r1, r4, lr}
 800e4ec:	0001      	movs	r1, r0
    RegionCommonSetBandTxDone( &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band],
 800e4ee:	7842      	ldrb	r2, [r0, #1]
 800e4f0:	7800      	ldrb	r0, [r0, #0]
 800e4f2:	4c07      	ldr	r4, [pc, #28]	; (800e510 <RegionEU868SetBandTxDone+0x28>)
 800e4f4:	4343      	muls	r3, r0
 800e4f6:	2014      	movs	r0, #20
 800e4f8:	18e3      	adds	r3, r4, r3
 800e4fa:	7a5b      	ldrb	r3, [r3, #9]
 800e4fc:	4358      	muls	r0, r3
 800e4fe:	690b      	ldr	r3, [r1, #16]
 800e500:	30c0      	adds	r0, #192	; 0xc0
 800e502:	9300      	str	r3, [sp, #0]
 800e504:	68cb      	ldr	r3, [r1, #12]
 800e506:	1900      	adds	r0, r0, r4
 800e508:	6889      	ldr	r1, [r1, #8]
 800e50a:	f7ff fc61 	bl	800ddd0 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
 800e50e:	bd13      	pop	{r0, r1, r4, pc}
 800e510:	20000db4 	.word	0x20000db4

0800e514 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800e514:	b570      	push	{r4, r5, r6, lr}
 800e516:	b09e      	sub	sp, #120	; 0x78
 800e518:	0004      	movs	r4, r0
    Band_t bands[EU868_MAX_NB_BANDS] =
 800e51a:	2278      	movs	r2, #120	; 0x78
 800e51c:	2100      	movs	r1, #0
 800e51e:	4668      	mov	r0, sp
 800e520:	f002 fd88 	bl	8011034 <memset>
 800e524:	2364      	movs	r3, #100	; 0x64
 800e526:	466a      	mov	r2, sp
 800e528:	8013      	strh	r3, [r2, #0]
 800e52a:	8293      	strh	r3, [r2, #20]
 800e52c:	22fa      	movs	r2, #250	; 0xfa
 800e52e:	4669      	mov	r1, sp
 800e530:	0092      	lsls	r2, r2, #2
 800e532:	4668      	mov	r0, sp
 800e534:	850a      	strh	r2, [r1, #40]	; 0x28
 800e536:	210a      	movs	r1, #10
 800e538:	8781      	strh	r1, [r0, #60]	; 0x3c
 800e53a:	a914      	add	r1, sp, #80	; 0x50
 800e53c:	800b      	strh	r3, [r1, #0]
 800e53e:	ab19      	add	r3, sp, #100	; 0x64
 800e540:	801a      	strh	r2, [r3, #0]
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800e542:	7920      	ldrb	r0, [r4, #4]
 800e544:	2803      	cmp	r0, #3
 800e546:	d820      	bhi.n	800e58a <RegionEU868InitDefaults+0x76>
 800e548:	f7f1 fdf0 	bl	800012c <__gnu_thumb1_case_uqi>
 800e54c:	2f282102 	.word	0x2f282102
    {
        case INIT_TYPE_DEFAULTS:
        {
            // Default bands
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800e550:	2278      	movs	r2, #120	; 0x78
 800e552:	4669      	mov	r1, sp
 800e554:	4819      	ldr	r0, [pc, #100]	; (800e5bc <RegionEU868InitDefaults+0xa8>)
 800e556:	f000 fc4b 	bl	800edf0 <memcpy1>

            // Default channels
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800e55a:	4b19      	ldr	r3, [pc, #100]	; (800e5c0 <RegionEU868InitDefaults+0xac>)
 800e55c:	4a19      	ldr	r2, [pc, #100]	; (800e5c4 <RegionEU868InitDefaults+0xb0>)
 800e55e:	0019      	movs	r1, r3
 800e560:	0010      	movs	r0, r2
 800e562:	3138      	adds	r1, #56	; 0x38
 800e564:	c970      	ldmia	r1!, {r4, r5, r6}
 800e566:	c070      	stmia	r0!, {r4, r5, r6}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800e568:	0019      	movs	r1, r3
 800e56a:	3144      	adds	r1, #68	; 0x44
 800e56c:	c970      	ldmia	r1!, {r4, r5, r6}
 800e56e:	c070      	stmia	r0!, {r4, r5, r6}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800e570:	0011      	movs	r1, r2
 800e572:	3350      	adds	r3, #80	; 0x50
 800e574:	3118      	adds	r1, #24
 800e576:	cb31      	ldmia	r3!, {r0, r4, r5}
 800e578:	c131      	stmia	r1!, {r0, r4, r5}

            // Default ChannelsMask
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800e57a:	2307      	movs	r3, #7
 800e57c:	32fe      	adds	r2, #254	; 0xfe
 800e57e:	8793      	strh	r3, [r2, #60]	; 0x3c

            // Update the channels mask
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800e580:	2201      	movs	r2, #1
            // Reset Channels Rx1Frequency to default 0
            NvmCtx.Channels[0].Rx1Frequency = 0;
            NvmCtx.Channels[1].Rx1Frequency = 0;
            NvmCtx.Channels[2].Rx1Frequency = 0;
            // Update the channels mask
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800e582:	4911      	ldr	r1, [pc, #68]	; (800e5c8 <RegionEU868InitDefaults+0xb4>)
 800e584:	4811      	ldr	r0, [pc, #68]	; (800e5cc <RegionEU868InitDefaults+0xb8>)
 800e586:	f7ff fc14 	bl	800ddb2 <RegionCommonChanMaskCopy>
        default:
        {
            break;
        }
    }
}
 800e58a:	b01e      	add	sp, #120	; 0x78
 800e58c:	bd70      	pop	{r4, r5, r6, pc}
            NvmCtx.Channels[0].Rx1Frequency = 0;
 800e58e:	2200      	movs	r2, #0
 800e590:	4b0c      	ldr	r3, [pc, #48]	; (800e5c4 <RegionEU868InitDefaults+0xb0>)
 800e592:	605a      	str	r2, [r3, #4]
            NvmCtx.Channels[1].Rx1Frequency = 0;
 800e594:	611a      	str	r2, [r3, #16]
            NvmCtx.Channels[2].Rx1Frequency = 0;
 800e596:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800e598:	3201      	adds	r2, #1
 800e59a:	e7f2      	b.n	800e582 <RegionEU868InitDefaults+0x6e>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 800e59c:	4b09      	ldr	r3, [pc, #36]	; (800e5c4 <RegionEU868InitDefaults+0xb0>)
 800e59e:	33fe      	adds	r3, #254	; 0xfe
 800e5a0:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800e5a2:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 800e5a4:	430a      	orrs	r2, r1
 800e5a6:	875a      	strh	r2, [r3, #58]	; 0x3a
            break;
 800e5a8:	e7ef      	b.n	800e58a <RegionEU868InitDefaults+0x76>
            if( params->NvmCtx != 0 )
 800e5aa:	6821      	ldr	r1, [r4, #0]
 800e5ac:	2900      	cmp	r1, #0
 800e5ae:	d0ec      	beq.n	800e58a <RegionEU868InitDefaults+0x76>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 800e5b0:	229e      	movs	r2, #158	; 0x9e
 800e5b2:	4804      	ldr	r0, [pc, #16]	; (800e5c4 <RegionEU868InitDefaults+0xb0>)
 800e5b4:	0052      	lsls	r2, r2, #1
 800e5b6:	f000 fc1b 	bl	800edf0 <memcpy1>
}
 800e5ba:	e7e6      	b.n	800e58a <RegionEU868InitDefaults+0x76>
 800e5bc:	20000e74 	.word	0x20000e74
 800e5c0:	08011690 	.word	0x08011690
 800e5c4:	20000db4 	.word	0x20000db4
 800e5c8:	20000eee 	.word	0x20000eee
 800e5cc:	20000eec 	.word	0x20000eec

0800e5d0 <RegionEU868GetNvmCtx>:

void* RegionEU868GetNvmCtx( GetNvmCtxParams_t* params )
{
    params->nvmCtxSize = sizeof( RegionEU868NvmCtx_t );
 800e5d0:	239e      	movs	r3, #158	; 0x9e
 800e5d2:	005b      	lsls	r3, r3, #1
 800e5d4:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 800e5d6:	4801      	ldr	r0, [pc, #4]	; (800e5dc <RegionEU868GetNvmCtx+0xc>)
 800e5d8:	4770      	bx	lr
 800e5da:	46c0      	nop			; (mov r8, r8)
 800e5dc:	20000db4 	.word	0x20000db4

0800e5e0 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800e5e0:	0003      	movs	r3, r0
 800e5e2:	b507      	push	{r0, r1, r2, lr}
 800e5e4:	0008      	movs	r0, r1
 800e5e6:	290f      	cmp	r1, #15
 800e5e8:	d809      	bhi.n	800e5fe <RegionEU868Verify+0x1e>
 800e5ea:	f7f1 fd9f 	bl	800012c <__gnu_thumb1_case_uqi>
 800e5ee:	080a      	.short	0x080a
 800e5f0:	1c080808 	.word	0x1c080808
 800e5f4:	1c081c12 	.word	0x1c081c12
 800e5f8:	0808081c 	.word	0x0808081c
 800e5fc:	2008      	.short	0x2008
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 800e5fe:	2000      	movs	r0, #0
        }
        default:
            return false;
    }
}
 800e600:	bd0e      	pop	{r1, r2, r3, pc}
            uint8_t band = 0;
 800e602:	466a      	mov	r2, sp
 800e604:	1dd1      	adds	r1, r2, #7
 800e606:	2200      	movs	r2, #0
            return VerifyRfFreq( verify->Frequency, &band );
 800e608:	6818      	ldr	r0, [r3, #0]
            uint8_t band = 0;
 800e60a:	700a      	strb	r2, [r1, #0]
            return VerifyRfFreq( verify->Frequency, &band );
 800e60c:	f7ff fe8a 	bl	800e324 <VerifyRfFreq>
 800e610:	e7f6      	b.n	800e600 <RegionEU868Verify+0x20>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800e612:	2000      	movs	r0, #0
 800e614:	2205      	movs	r2, #5
 800e616:	5618      	ldrsb	r0, [r3, r0]
 800e618:	2100      	movs	r1, #0
 800e61a:	f7ff fb8d 	bl	800dd38 <RegionCommonValueInRange>
 800e61e:	1e43      	subs	r3, r0, #1
 800e620:	4198      	sbcs	r0, r3
 800e622:	b2c0      	uxtb	r0, r0
 800e624:	e7ec      	b.n	800e600 <RegionEU868Verify+0x20>
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800e626:	2000      	movs	r0, #0
 800e628:	2207      	movs	r2, #7
 800e62a:	5618      	ldrsb	r0, [r3, r0]
 800e62c:	e7f4      	b.n	800e618 <RegionEU868Verify+0x38>
            return EU868_DUTY_CYCLE_ENABLED;
 800e62e:	2001      	movs	r0, #1
 800e630:	e7e6      	b.n	800e600 <RegionEU868Verify+0x20>
	...

0800e634 <RegionEU868ChanMaskSet>:
        }
    }
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800e634:	b510      	push	{r4, lr}
    switch( chanMaskSet->ChannelsMaskType )
 800e636:	7904      	ldrb	r4, [r0, #4]
 800e638:	2c00      	cmp	r4, #0
 800e63a:	d003      	beq.n	800e644 <RegionEU868ChanMaskSet+0x10>
 800e63c:	2c01      	cmp	r4, #1
 800e63e:	d008      	beq.n	800e652 <RegionEU868ChanMaskSet+0x1e>
 800e640:	2000      	movs	r0, #0
        }
        default:
            return false;
    }
    return true;
}
 800e642:	bd10      	pop	{r4, pc}
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 800e644:	6801      	ldr	r1, [r0, #0]
 800e646:	2201      	movs	r2, #1
 800e648:	4805      	ldr	r0, [pc, #20]	; (800e660 <RegionEU868ChanMaskSet+0x2c>)
 800e64a:	f7ff fbb2 	bl	800ddb2 <RegionCommonChanMaskCopy>
    return true;
 800e64e:	2001      	movs	r0, #1
            break;
 800e650:	e7f7      	b.n	800e642 <RegionEU868ChanMaskSet+0xe>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 800e652:	6801      	ldr	r1, [r0, #0]
 800e654:	0022      	movs	r2, r4
 800e656:	4803      	ldr	r0, [pc, #12]	; (800e664 <RegionEU868ChanMaskSet+0x30>)
 800e658:	f7ff fbab 	bl	800ddb2 <RegionCommonChanMaskCopy>
    return true;
 800e65c:	0020      	movs	r0, r4
            break;
 800e65e:	e7f0      	b.n	800e642 <RegionEU868ChanMaskSet+0xe>
 800e660:	20000eec 	.word	0x20000eec
 800e664:	20000eee 	.word	0x20000eee

0800e668 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800e668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e66a:	b085      	sub	sp, #20
 800e66c:	001c      	movs	r4, r3
 800e66e:	0005      	movs	r5, r0
 800e670:	000e      	movs	r6, r1
 800e672:	9202      	str	r2, [sp, #8]
    /* ST_WORKAROUND_BEGIN: remove float/double */
    uint32_t tSymbol = 0;
    /* ST_WORKAROUND_END */

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800e674:	1c03      	adds	r3, r0, #0
 800e676:	2807      	cmp	r0, #7
 800e678:	dd00      	ble.n	800e67c <RegionEU868ComputeRxWindowParameters+0x14>
 800e67a:	2307      	movs	r3, #7
 800e67c:	b25f      	sxtb	r7, r3
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 800e67e:	0038      	movs	r0, r7
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800e680:	7063      	strb	r3, [r4, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 800e682:	f7ff fe0f 	bl	800e2a4 <GetBandwidth>
 800e686:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800e688:	2d06      	cmp	r5, #6
 800e68a:	dd14      	ble.n	800e6b6 <RegionEU868ComputeRxWindowParameters+0x4e>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800e68c:	2032      	movs	r0, #50	; 0x32
 800e68e:	f7ff fcb9 	bl	800e004 <RegionCommonComputeSymbolTimeFsk>
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800e692:	4b0d      	ldr	r3, [pc, #52]	; (800e6c8 <RegionEU868ComputeRxWindowParameters+0x60>)
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800e694:	0005      	movs	r5, r0
    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800e696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e698:	9303      	str	r3, [sp, #12]
 800e69a:	4798      	blx	r3
 800e69c:	0022      	movs	r2, r4
 800e69e:	3408      	adds	r4, #8
 800e6a0:	320c      	adds	r2, #12
 800e6a2:	0003      	movs	r3, r0
 800e6a4:	9201      	str	r2, [sp, #4]
 800e6a6:	0031      	movs	r1, r6
 800e6a8:	0028      	movs	r0, r5
 800e6aa:	9a02      	ldr	r2, [sp, #8]
 800e6ac:	9400      	str	r4, [sp, #0]
 800e6ae:	f7ff fcad 	bl	800e00c <RegionCommonComputeRxWindowParameters>
}
 800e6b2:	b005      	add	sp, #20
 800e6b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800e6b6:	4a05      	ldr	r2, [pc, #20]	; (800e6cc <RegionEU868ComputeRxWindowParameters+0x64>)
 800e6b8:	00b9      	lsls	r1, r7, #2
 800e6ba:	1c53      	adds	r3, r2, #1
 800e6bc:	19df      	adds	r7, r3, r7
 800e6be:	7ff8      	ldrb	r0, [r7, #31]
 800e6c0:	5889      	ldr	r1, [r1, r2]
 800e6c2:	f7ff fc95 	bl	800dff0 <RegionCommonComputeSymbolTimeLoRa>
 800e6c6:	e7e4      	b.n	800e692 <RegionEU868ComputeRxWindowParameters+0x2a>
 800e6c8:	080117e0 	.word	0x080117e0
 800e6cc:	08011690 	.word	0x08011690

0800e6d0 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800e6d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800e6d2:	2701      	movs	r7, #1
{
 800e6d4:	b08f      	sub	sp, #60	; 0x3c
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800e6d6:	6843      	ldr	r3, [r0, #4]
{
 800e6d8:	910c      	str	r1, [sp, #48]	; 0x30
    int8_t dr = rxConfig->Datarate;
 800e6da:	57c7      	ldrsb	r7, [r0, r7]
    uint32_t frequency = rxConfig->Frequency;
 800e6dc:	930a      	str	r3, [sp, #40]	; 0x28

    if( Radio.GetStatus( ) != RF_IDLE )
 800e6de:	4b35      	ldr	r3, [pc, #212]	; (800e7b4 <RegionEU868RxConfig+0xe4>)
{
 800e6e0:	0004      	movs	r4, r0
    if( Radio.GetStatus( ) != RF_IDLE )
 800e6e2:	685b      	ldr	r3, [r3, #4]
 800e6e4:	930b      	str	r3, [sp, #44]	; 0x2c
 800e6e6:	4798      	blx	r3
 800e6e8:	0005      	movs	r5, r0
    {
        return false;
 800e6ea:	2000      	movs	r0, #0
    if( Radio.GetStatus( ) != RF_IDLE )
 800e6ec:	4285      	cmp	r5, r0
 800e6ee:	d148      	bne.n	800e782 <RegionEU868RxConfig+0xb2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800e6f0:	7ce3      	ldrb	r3, [r4, #19]
 800e6f2:	4283      	cmp	r3, r0
 800e6f4:	d10a      	bne.n	800e70c <RegionEU868RxConfig+0x3c>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 800e6f6:	220c      	movs	r2, #12
 800e6f8:	7821      	ldrb	r1, [r4, #0]
 800e6fa:	4b2f      	ldr	r3, [pc, #188]	; (800e7b8 <RegionEU868RxConfig+0xe8>)
 800e6fc:	434a      	muls	r2, r1
 800e6fe:	58d1      	ldr	r1, [r2, r3]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800e700:	189b      	adds	r3, r3, r2
 800e702:	685b      	ldr	r3, [r3, #4]
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 800e704:	910a      	str	r1, [sp, #40]	; 0x28
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800e706:	4283      	cmp	r3, r0
 800e708:	d000      	beq.n	800e70c <RegionEU868RxConfig+0x3c>
 800e70a:	930a      	str	r3, [sp, #40]	; 0x28
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800e70c:	4b2b      	ldr	r3, [pc, #172]	; (800e7bc <RegionEU868RxConfig+0xec>)

    Radio.SetChannel( frequency );
 800e70e:	4e29      	ldr	r6, [pc, #164]	; (800e7b4 <RegionEU868RxConfig+0xe4>)
    phyDr = DataratesEU868[dr];
 800e710:	3301      	adds	r3, #1
 800e712:	19db      	adds	r3, r3, r7
 800e714:	7fdb      	ldrb	r3, [r3, #31]
    Radio.SetChannel( frequency );
 800e716:	980a      	ldr	r0, [sp, #40]	; 0x28
    phyDr = DataratesEU868[dr];
 800e718:	b25b      	sxtb	r3, r3
 800e71a:	930b      	str	r3, [sp, #44]	; 0x2c
    Radio.SetChannel( frequency );
 800e71c:	68f3      	ldr	r3, [r6, #12]
 800e71e:	930d      	str	r3, [sp, #52]	; 0x34
 800e720:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800e722:	69b6      	ldr	r6, [r6, #24]
 800e724:	7ca3      	ldrb	r3, [r4, #18]
 800e726:	2f07      	cmp	r7, #7
 800e728:	d12d      	bne.n	800e786 <RegionEU868RxConfig+0xb6>
    {
        modem = MODEM_FSK;
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800e72a:	9309      	str	r3, [sp, #36]	; 0x24
 800e72c:	2301      	movs	r3, #1
 800e72e:	9305      	str	r3, [sp, #20]
 800e730:	68a3      	ldr	r3, [r4, #8]
 800e732:	2000      	movs	r0, #0
 800e734:	b29b      	uxth	r3, r3
 800e736:	9302      	str	r3, [sp, #8]
 800e738:	2305      	movs	r3, #5
 800e73a:	22fa      	movs	r2, #250	; 0xfa
 800e73c:	9301      	str	r3, [sp, #4]
 800e73e:	4b20      	ldr	r3, [pc, #128]	; (800e7c0 <RegionEU868RxConfig+0xf0>)
 800e740:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e742:	9300      	str	r3, [sp, #0]
 800e744:	0003      	movs	r3, r0
 800e746:	0092      	lsls	r2, r2, #2
 800e748:	434a      	muls	r2, r1
 800e74a:	491e      	ldr	r1, [pc, #120]	; (800e7c4 <RegionEU868RxConfig+0xf4>)
 800e74c:	9008      	str	r0, [sp, #32]
 800e74e:	9007      	str	r0, [sp, #28]
 800e750:	9006      	str	r0, [sp, #24]
 800e752:	9004      	str	r0, [sp, #16]
 800e754:	9003      	str	r0, [sp, #12]
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800e756:	47b0      	blx	r6
    }

    if( rxConfig->RepeaterSupport == true )
 800e758:	7c62      	ldrb	r2, [r4, #17]
 800e75a:	4b18      	ldr	r3, [pc, #96]	; (800e7bc <RegionEU868RxConfig+0xec>)
 800e75c:	2a00      	cmp	r2, #0
 800e75e:	d026      	beq.n	800e7ae <RegionEU868RxConfig+0xde>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800e760:	3330      	adds	r3, #48	; 0x30
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800e762:	5dd9      	ldrb	r1, [r3, r7]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800e764:	4b13      	ldr	r3, [pc, #76]	; (800e7b4 <RegionEU868RxConfig+0xe4>)
 800e766:	310d      	adds	r1, #13
 800e768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e76a:	0028      	movs	r0, r5
 800e76c:	b2c9      	uxtb	r1, r1
 800e76e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e770:	4798      	blx	r3
    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800e772:	7ce0      	ldrb	r0, [r4, #19]
 800e774:	003a      	movs	r2, r7
 800e776:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e778:	f7ff fd5e 	bl	800e238 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
    return true;
 800e77c:	2001      	movs	r0, #1
    *datarate = (uint8_t) dr;
 800e77e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e780:	701f      	strb	r7, [r3, #0]
}
 800e782:	b00f      	add	sp, #60	; 0x3c
 800e784:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800e786:	68a2      	ldr	r2, [r4, #8]
 800e788:	2501      	movs	r5, #1
 800e78a:	b292      	uxth	r2, r2
 800e78c:	9309      	str	r3, [sp, #36]	; 0x24
 800e78e:	9202      	str	r2, [sp, #8]
 800e790:	2300      	movs	r3, #0
 800e792:	2208      	movs	r2, #8
 800e794:	9307      	str	r3, [sp, #28]
 800e796:	9306      	str	r3, [sp, #24]
 800e798:	9305      	str	r3, [sp, #20]
 800e79a:	9304      	str	r3, [sp, #16]
 800e79c:	9303      	str	r3, [sp, #12]
 800e79e:	9201      	str	r2, [sp, #4]
 800e7a0:	9300      	str	r3, [sp, #0]
 800e7a2:	0028      	movs	r0, r5
 800e7a4:	002b      	movs	r3, r5
 800e7a6:	78a1      	ldrb	r1, [r4, #2]
 800e7a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e7aa:	9508      	str	r5, [sp, #32]
 800e7ac:	e7d3      	b.n	800e756 <RegionEU868RxConfig+0x86>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800e7ae:	3328      	adds	r3, #40	; 0x28
 800e7b0:	e7d7      	b.n	800e762 <RegionEU868RxConfig+0x92>
 800e7b2:	46c0      	nop			; (mov r8, r8)
 800e7b4:	080117e0 	.word	0x080117e0
 800e7b8:	20000db4 	.word	0x20000db4
 800e7bc:	08011690 	.word	0x08011690
 800e7c0:	00014585 	.word	0x00014585
 800e7c4:	0000c350 	.word	0x0000c350

0800e7c8 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800e7c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7ca:	0004      	movs	r4, r0
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800e7cc:	2001      	movs	r0, #1
{
 800e7ce:	b091      	sub	sp, #68	; 0x44
 800e7d0:	920f      	str	r2, [sp, #60]	; 0x3c
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800e7d2:	220c      	movs	r2, #12
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800e7d4:	4b3c      	ldr	r3, [pc, #240]	; (800e8c8 <RegionEU868TxConfig+0x100>)
 800e7d6:	5620      	ldrsb	r0, [r4, r0]
 800e7d8:	3301      	adds	r3, #1
{
 800e7da:	910e      	str	r1, [sp, #56]	; 0x38
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800e7dc:	181b      	adds	r3, r3, r0
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800e7de:	7821      	ldrb	r1, [r4, #0]
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800e7e0:	7fdb      	ldrb	r3, [r3, #31]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800e7e2:	434a      	muls	r2, r1
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800e7e4:	b25b      	sxtb	r3, r3
 800e7e6:	930a      	str	r3, [sp, #40]	; 0x28
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800e7e8:	4b38      	ldr	r3, [pc, #224]	; (800e8cc <RegionEU868TxConfig+0x104>)
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800e7ea:	2502      	movs	r5, #2
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800e7ec:	189a      	adds	r2, r3, r2
 800e7ee:	7a51      	ldrb	r1, [r2, #9]
 800e7f0:	2214      	movs	r2, #20
 800e7f2:	434a      	muls	r2, r1
 800e7f4:	189b      	adds	r3, r3, r2
 800e7f6:	33c2      	adds	r3, #194	; 0xc2
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800e7f8:	781b      	ldrb	r3, [r3, #0]
 800e7fa:	5765      	ldrsb	r5, [r4, r5]
 800e7fc:	1c19      	adds	r1, r3, #0
 800e7fe:	b25b      	sxtb	r3, r3
 800e800:	78a2      	ldrb	r2, [r4, #2]
 800e802:	42ab      	cmp	r3, r5
 800e804:	da00      	bge.n	800e808 <RegionEU868TxConfig+0x40>
 800e806:	1c11      	adds	r1, r2, #0
 800e808:	b24b      	sxtb	r3, r1
 800e80a:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 800e80c:	f7ff fd4a 	bl	800e2a4 <GetBandwidth>
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800e810:	68a2      	ldr	r2, [r4, #8]
 800e812:	6861      	ldr	r1, [r4, #4]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 800e814:	900c      	str	r0, [sp, #48]	; 0x30
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800e816:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e818:	f7ff fc22 	bl	800e060 <RegionCommonComputeTxPower>

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 800e81c:	230c      	movs	r3, #12
 800e81e:	4d2c      	ldr	r5, [pc, #176]	; (800e8d0 <RegionEU868TxConfig+0x108>)
 800e820:	7822      	ldrb	r2, [r4, #0]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800e822:	0007      	movs	r7, r0
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 800e824:	4353      	muls	r3, r2
 800e826:	68ea      	ldr	r2, [r5, #12]
 800e828:	920d      	str	r2, [sp, #52]	; 0x34
 800e82a:	4a28      	ldr	r2, [pc, #160]	; (800e8cc <RegionEU868TxConfig+0x104>)
 800e82c:	5898      	ldr	r0, [r3, r2]
 800e82e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e830:	4798      	blx	r3

    if( txConfig->Datarate == DR_7 )
 800e832:	69eb      	ldr	r3, [r5, #28]
 800e834:	2201      	movs	r2, #1
 800e836:	930d      	str	r3, [sp, #52]	; 0x34
 800e838:	23fa      	movs	r3, #250	; 0xfa
 800e83a:	2500      	movs	r5, #0
 800e83c:	56a2      	ldrsb	r2, [r4, r2]
 800e83e:	011b      	lsls	r3, r3, #4
    { // High Speed FSK channel
        modem = MODEM_FSK;
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800e840:	9308      	str	r3, [sp, #32]
 800e842:	9507      	str	r5, [sp, #28]
 800e844:	9506      	str	r5, [sp, #24]
 800e846:	9505      	str	r5, [sp, #20]
    if( txConfig->Datarate == DR_7 )
 800e848:	2a07      	cmp	r2, #7
 800e84a:	d12c      	bne.n	800e8a6 <RegionEU868TxConfig+0xde>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800e84c:	2301      	movs	r3, #1
 800e84e:	9304      	str	r3, [sp, #16]
 800e850:	3304      	adds	r3, #4
 800e852:	9302      	str	r3, [sp, #8]
 800e854:	23fa      	movs	r3, #250	; 0xfa
 800e856:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e858:	009b      	lsls	r3, r3, #2
 800e85a:	4353      	muls	r3, r2
 800e85c:	0039      	movs	r1, r7
 800e85e:	9300      	str	r3, [sp, #0]
 800e860:	0028      	movs	r0, r5
 800e862:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e864:	4a1b      	ldr	r2, [pc, #108]	; (800e8d4 <RegionEU868TxConfig+0x10c>)
 800e866:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800e868:	9503      	str	r5, [sp, #12]
 800e86a:	9501      	str	r5, [sp, #4]
 800e86c:	47b0      	blx	r6
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800e86e:	230c      	movs	r3, #12
 800e870:	2101      	movs	r1, #1
 800e872:	7822      	ldrb	r2, [r4, #0]
 800e874:	5661      	ldrsb	r1, [r4, r1]
 800e876:	4353      	muls	r3, r2
 800e878:	4a14      	ldr	r2, [pc, #80]	; (800e8cc <RegionEU868TxConfig+0x104>)
 800e87a:	5898      	ldr	r0, [r3, r2]
 800e87c:	f7ff fd06 	bl	800e28c <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800e880:	2001      	movs	r0, #1
 800e882:	89a1      	ldrh	r1, [r4, #12]
 800e884:	5620      	ldrsb	r0, [r4, r0]
 800e886:	f7ff fd21 	bl	800e2cc <GetTimeOnAir>
 800e88a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e88c:	6018      	str	r0, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800e88e:	4b10      	ldr	r3, [pc, #64]	; (800e8d0 <RegionEU868TxConfig+0x108>)
 800e890:	0028      	movs	r0, r5
 800e892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e894:	7b21      	ldrb	r1, [r4, #12]
 800e896:	930a      	str	r3, [sp, #40]	; 0x28
 800e898:	4798      	blx	r3

    *txPower = txPowerLimited;
    return true;
}
 800e89a:	2001      	movs	r0, #1
    *txPower = txPowerLimited;
 800e89c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e89e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e8a0:	701a      	strb	r2, [r3, #0]
}
 800e8a2:	b011      	add	sp, #68	; 0x44
 800e8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800e8a6:	2308      	movs	r3, #8
 800e8a8:	2601      	movs	r6, #1
 800e8aa:	9302      	str	r3, [sp, #8]
 800e8ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8ae:	002a      	movs	r2, r5
 800e8b0:	9503      	str	r5, [sp, #12]
 800e8b2:	9300      	str	r3, [sp, #0]
 800e8b4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e8b6:	0039      	movs	r1, r7
 800e8b8:	0030      	movs	r0, r6
 800e8ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e8bc:	9604      	str	r6, [sp, #16]
 800e8be:	9601      	str	r6, [sp, #4]
 800e8c0:	47a8      	blx	r5
        modem = MODEM_LORA;
 800e8c2:	0035      	movs	r5, r6
 800e8c4:	e7d3      	b.n	800e86e <RegionEU868TxConfig+0xa6>
 800e8c6:	46c0      	nop			; (mov r8, r8)
 800e8c8:	08011690 	.word	0x08011690
 800e8cc:	20000db4 	.word	0x20000db4
 800e8d0:	080117e0 	.word	0x080117e0
 800e8d4:	000061a8 	.word	0x000061a8

0800e8d8 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800e8d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t status = 0x07;
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800e8da:	2700      	movs	r7, #0
    uint8_t status = 0x07;
 800e8dc:	2507      	movs	r5, #7
{
 800e8de:	b093      	sub	sp, #76	; 0x4c
 800e8e0:	9103      	str	r1, [sp, #12]
 800e8e2:	9204      	str	r2, [sp, #16]
 800e8e4:	0004      	movs	r4, r0
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800e8e6:	2206      	movs	r2, #6
 800e8e8:	2100      	movs	r1, #0
 800e8ea:	a808      	add	r0, sp, #32
{
 800e8ec:	9305      	str	r3, [sp, #20]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800e8ee:	f002 fba1 	bl	8011034 <memset>
    uint16_t chMask = 0;
 800e8f2:	ab06      	add	r3, sp, #24
 800e8f4:	80df      	strh	r7, [r3, #6]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800e8f6:	7a23      	ldrb	r3, [r4, #8]
 800e8f8:	42bb      	cmp	r3, r7
 800e8fa:	d906      	bls.n	800e90a <RegionEU868LinkAdrReq+0x32>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800e8fc:	6863      	ldr	r3, [r4, #4]
 800e8fe:	a908      	add	r1, sp, #32
 800e900:	19d8      	adds	r0, r3, r7
 800e902:	f7ff fb13 	bl	800df2c <RegionCommonParseLinkAdrReq>

        if( nextIndex == 0 )
 800e906:	2800      	cmp	r0, #0
 800e908:	d141      	bne.n	800e98e <RegionEU868LinkAdrReq+0xb6>
    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionEU868GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
 800e90a:	a80a      	add	r0, sp, #40	; 0x28
 800e90c:	7105      	strb	r5, [r0, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800e90e:	7aa3      	ldrb	r3, [r4, #10]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800e910:	ad08      	add	r5, sp, #32
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800e912:	7143      	strb	r3, [r0, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800e914:	786b      	ldrb	r3, [r5, #1]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800e916:	220a      	movs	r2, #10
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800e918:	7183      	strb	r3, [r0, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800e91a:	78ab      	ldrb	r3, [r5, #2]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800e91c:	a906      	add	r1, sp, #24
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800e91e:	71c3      	strb	r3, [r0, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800e920:	782b      	ldrb	r3, [r5, #0]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800e922:	1852      	adds	r2, r2, r1
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800e924:	7203      	strb	r3, [r0, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800e926:	7ae3      	ldrb	r3, [r4, #11]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800e928:	2109      	movs	r1, #9
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800e92a:	7243      	strb	r3, [r0, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800e92c:	7b23      	ldrb	r3, [r4, #12]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 800e92e:	4e38      	ldr	r6, [pc, #224]	; (800ea10 <RegionEU868LinkAdrReq+0x138>)
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800e930:	7283      	strb	r3, [r0, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800e932:	7b63      	ldrb	r3, [r4, #13]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 800e934:	6186      	str	r6, [r0, #24]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800e936:	72c3      	strb	r3, [r0, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800e938:	2310      	movs	r3, #16
 800e93a:	7303      	strb	r3, [r0, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800e93c:	ab06      	add	r3, sp, #24
 800e93e:	3306      	adds	r3, #6
 800e940:	6103      	str	r3, [r0, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800e942:	23e0      	movs	r3, #224	; 0xe0
 800e944:	00db      	lsls	r3, r3, #3
 800e946:	8283      	strh	r3, [r0, #20]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800e948:	2307      	movs	r3, #7
 800e94a:	8383      	strh	r3, [r0, #28]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800e94c:	6823      	ldr	r3, [r4, #0]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800e94e:	ac06      	add	r4, sp, #24
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800e950:	930a      	str	r3, [sp, #40]	; 0x28
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800e952:	1909      	adds	r1, r1, r4
 800e954:	002b      	movs	r3, r5
 800e956:	f7ff fb04 	bl	800df62 <RegionCommonLinkAdrReqVerifyParams>
 800e95a:	0004      	movs	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800e95c:	2807      	cmp	r0, #7
 800e95e:	d108      	bne.n	800e972 <RegionEU868LinkAdrReq+0x9a>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 800e960:	2202      	movs	r2, #2
 800e962:	2100      	movs	r1, #0
 800e964:	482b      	ldr	r0, [pc, #172]	; (800ea14 <RegionEU868LinkAdrReq+0x13c>)
 800e966:	f000 fa59 	bl	800ee1c <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 800e96a:	ab06      	add	r3, sp, #24
 800e96c:	88db      	ldrh	r3, [r3, #6]
 800e96e:	36fe      	adds	r6, #254	; 0xfe
 800e970:	8773      	strh	r3, [r6, #58]	; 0x3a
    *txPowOut = linkAdrParams.TxPower;
    *nbRepOut = linkAdrParams.NbRep;
    *nbBytesParsed = bytesProcessed;

    return status;
}
 800e972:	0020      	movs	r0, r4
    *drOut = linkAdrParams.Datarate;
 800e974:	786b      	ldrb	r3, [r5, #1]
 800e976:	9a03      	ldr	r2, [sp, #12]
 800e978:	7013      	strb	r3, [r2, #0]
    *txPowOut = linkAdrParams.TxPower;
 800e97a:	78ab      	ldrb	r3, [r5, #2]
 800e97c:	9a04      	ldr	r2, [sp, #16]
 800e97e:	7013      	strb	r3, [r2, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800e980:	782b      	ldrb	r3, [r5, #0]
 800e982:	9a05      	ldr	r2, [sp, #20]
 800e984:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 800e986:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e988:	701f      	strb	r7, [r3, #0]
}
 800e98a:	b013      	add	sp, #76	; 0x4c
 800e98c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        chMask = linkAdrParams.ChMask;
 800e98e:	ab06      	add	r3, sp, #24
 800e990:	899b      	ldrh	r3, [r3, #12]
 800e992:	aa06      	add	r2, sp, #24
 800e994:	80d3      	strh	r3, [r2, #6]
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800e996:	aa06      	add	r2, sp, #24
        bytesProcessed += nextIndex;
 800e998:	183f      	adds	r7, r7, r0
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800e99a:	7ad0      	ldrb	r0, [r2, #11]
        bytesProcessed += nextIndex;
 800e99c:	b2ff      	uxtb	r7, r7
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800e99e:	2800      	cmp	r0, #0
 800e9a0:	d122      	bne.n	800e9e8 <RegionEU868LinkAdrReq+0x110>
            status &= 0xFE; // Channel mask KO
 800e9a2:	2506      	movs	r5, #6
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d0a6      	beq.n	800e8f6 <RegionEU868LinkAdrReq+0x1e>
                        status &= 0xFE; // Channel mask KO
 800e9a8:	2606      	movs	r6, #6
 800e9aa:	4a19      	ldr	r2, [pc, #100]	; (800ea10 <RegionEU868LinkAdrReq+0x138>)
{
 800e9ac:	2507      	movs	r5, #7
 800e9ae:	9201      	str	r2, [sp, #4]
 800e9b0:	2200      	movs	r2, #0
                        status &= 0xFE; // Channel mask KO
 800e9b2:	46b4      	mov	ip, r6
{
 800e9b4:	9202      	str	r2, [sp, #8]
                if( linkAdrParams.ChMaskCtrl == 6 )
 800e9b6:	2806      	cmp	r0, #6
 800e9b8:	d11f      	bne.n	800e9fa <RegionEU868LinkAdrReq+0x122>
                    if( NvmCtx.Channels[i].Frequency != 0 )
 800e9ba:	9901      	ldr	r1, [sp, #4]
 800e9bc:	680e      	ldr	r6, [r1, #0]
 800e9be:	2e00      	cmp	r6, #0
 800e9c0:	d005      	beq.n	800e9ce <RegionEU868LinkAdrReq+0xf6>
                        chMask |= 1 << i;
 800e9c2:	2601      	movs	r6, #1
 800e9c4:	4096      	lsls	r6, r2
 800e9c6:	2101      	movs	r1, #1
 800e9c8:	4333      	orrs	r3, r6
 800e9ca:	b29b      	uxth	r3, r3
 800e9cc:	9102      	str	r1, [sp, #8]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800e9ce:	9901      	ldr	r1, [sp, #4]
 800e9d0:	3201      	adds	r2, #1
 800e9d2:	310c      	adds	r1, #12
 800e9d4:	9101      	str	r1, [sp, #4]
 800e9d6:	2a10      	cmp	r2, #16
 800e9d8:	d1ed      	bne.n	800e9b6 <RegionEU868LinkAdrReq+0xde>
 800e9da:	9a02      	ldr	r2, [sp, #8]
 800e9dc:	2a00      	cmp	r2, #0
 800e9de:	d100      	bne.n	800e9e2 <RegionEU868LinkAdrReq+0x10a>
 800e9e0:	e789      	b.n	800e8f6 <RegionEU868LinkAdrReq+0x1e>
 800e9e2:	aa06      	add	r2, sp, #24
 800e9e4:	80d3      	strh	r3, [r2, #6]
 800e9e6:	e786      	b.n	800e8f6 <RegionEU868LinkAdrReq+0x1e>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800e9e8:	1e42      	subs	r2, r0, #1
            status &= 0xFE; // Channel mask KO
 800e9ea:	2506      	movs	r5, #6
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800e9ec:	2a04      	cmp	r2, #4
 800e9ee:	d800      	bhi.n	800e9f2 <RegionEU868LinkAdrReq+0x11a>
 800e9f0:	e781      	b.n	800e8f6 <RegionEU868LinkAdrReq+0x1e>
 800e9f2:	42a8      	cmp	r0, r5
 800e9f4:	d000      	beq.n	800e9f8 <RegionEU868LinkAdrReq+0x120>
 800e9f6:	e77e      	b.n	800e8f6 <RegionEU868LinkAdrReq+0x1e>
 800e9f8:	e7d6      	b.n	800e9a8 <RegionEU868LinkAdrReq+0xd0>
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800e9fa:	001e      	movs	r6, r3
 800e9fc:	2101      	movs	r1, #1
 800e9fe:	4116      	asrs	r6, r2
 800ea00:	420e      	tst	r6, r1
 800ea02:	d0e4      	beq.n	800e9ce <RegionEU868LinkAdrReq+0xf6>
 800ea04:	9901      	ldr	r1, [sp, #4]
 800ea06:	6809      	ldr	r1, [r1, #0]
 800ea08:	2900      	cmp	r1, #0
 800ea0a:	d1e0      	bne.n	800e9ce <RegionEU868LinkAdrReq+0xf6>
                        status &= 0xFE; // Channel mask KO
 800ea0c:	4665      	mov	r5, ip
 800ea0e:	e7de      	b.n	800e9ce <RegionEU868LinkAdrReq+0xf6>
 800ea10:	20000db4 	.word	0x20000db4
 800ea14:	20000eec 	.word	0x20000eec

0800ea18 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800ea18:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t status = 0x07;
    uint8_t band = 0;
 800ea1a:	466b      	mov	r3, sp
 800ea1c:	2600      	movs	r6, #0
 800ea1e:	1dd9      	adds	r1, r3, #7
{
 800ea20:	0005      	movs	r5, r0

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800ea22:	6840      	ldr	r0, [r0, #4]
    uint8_t band = 0;
 800ea24:	700e      	strb	r6, [r1, #0]
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800ea26:	f7ff fc7d 	bl	800e324 <VerifyRfFreq>
    {
        status &= 0xFE; // Channel frequency KO
 800ea2a:	0004      	movs	r4, r0
 800ea2c:	1e60      	subs	r0, r4, #1
 800ea2e:	4184      	sbcs	r4, r0
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800ea30:	2000      	movs	r0, #0
 800ea32:	2207      	movs	r2, #7
 800ea34:	0031      	movs	r1, r6
 800ea36:	5628      	ldrsb	r0, [r5, r0]
        status &= 0xFE; // Channel frequency KO
 800ea38:	3406      	adds	r4, #6
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800ea3a:	f7ff f97d 	bl	800dd38 <RegionCommonValueInRange>
 800ea3e:	42b0      	cmp	r0, r6
 800ea40:	d101      	bne.n	800ea46 <RegionEU868RxParamSetupReq+0x2e>
    {
        status &= 0xFD; // Datarate KO
 800ea42:	2302      	movs	r3, #2
 800ea44:	439c      	bics	r4, r3
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800ea46:	2001      	movs	r0, #1
 800ea48:	2205      	movs	r2, #5
 800ea4a:	2100      	movs	r1, #0
 800ea4c:	5628      	ldrsb	r0, [r5, r0]
 800ea4e:	f7ff f973 	bl	800dd38 <RegionCommonValueInRange>
 800ea52:	2800      	cmp	r0, #0
 800ea54:	d101      	bne.n	800ea5a <RegionEU868RxParamSetupReq+0x42>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800ea56:	2304      	movs	r3, #4
 800ea58:	439c      	bics	r4, r3
    }

    return status;
}
 800ea5a:	0020      	movs	r0, r4
 800ea5c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

0800ea5e <RegionEU868TxParamSetupReq>:
    return status;
}

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    return -1;
 800ea5e:	2001      	movs	r0, #1
}
 800ea60:	4240      	negs	r0, r0
 800ea62:	4770      	bx	lr

0800ea64 <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800ea64:	b513      	push	{r0, r1, r4, lr}
    uint8_t status = 0x03;
    uint8_t band = 0;
 800ea66:	466b      	mov	r3, sp
 800ea68:	1dd9      	adds	r1, r3, #7
 800ea6a:	2300      	movs	r3, #0
{
 800ea6c:	0004      	movs	r4, r0

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800ea6e:	6840      	ldr	r0, [r0, #4]
    uint8_t band = 0;
 800ea70:	700b      	strb	r3, [r1, #0]
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800ea72:	f7ff fc57 	bl	800e324 <VerifyRfFreq>
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800ea76:	220c      	movs	r2, #12
        status &= 0xFE;
 800ea78:	1e43      	subs	r3, r0, #1
 800ea7a:	4198      	sbcs	r0, r3
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800ea7c:	7821      	ldrb	r1, [r4, #0]
 800ea7e:	4b08      	ldr	r3, [pc, #32]	; (800eaa0 <RegionEU868DlChannelReq+0x3c>)
 800ea80:	434a      	muls	r2, r1
 800ea82:	58d1      	ldr	r1, [r2, r3]
        status &= 0xFE;
 800ea84:	3002      	adds	r0, #2
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800ea86:	2900      	cmp	r1, #0
 800ea88:	d102      	bne.n	800ea90 <RegionEU868DlChannelReq+0x2c>
    {
        status &= 0xFD;
 800ea8a:	2302      	movs	r3, #2
 800ea8c:	4398      	bics	r0, r3
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

    return status;
}
 800ea8e:	bd16      	pop	{r1, r2, r4, pc}
    if( status == 0x03 )
 800ea90:	2803      	cmp	r0, #3
 800ea92:	d103      	bne.n	800ea9c <RegionEU868DlChannelReq+0x38>
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800ea94:	189b      	adds	r3, r3, r2
 800ea96:	6862      	ldr	r2, [r4, #4]
 800ea98:	605a      	str	r2, [r3, #4]
 800ea9a:	e7f8      	b.n	800ea8e <RegionEU868DlChannelReq+0x2a>
 800ea9c:	2002      	movs	r0, #2
 800ea9e:	e7f6      	b.n	800ea8e <RegionEU868DlChannelReq+0x2a>
 800eaa0:	20000db4 	.word	0x20000db4

0800eaa4 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
    return currentDr;
}
 800eaa4:	4770      	bx	lr
	...

0800eaa8 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800eaa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eaaa:	b099      	sub	sp, #100	; 0x64
 800eaac:	9305      	str	r3, [sp, #20]
    uint8_t nbEnabledChannels = 0;
 800eaae:	230a      	movs	r3, #10
 800eab0:	2500      	movs	r5, #0
{
 800eab2:	9204      	str	r2, [sp, #16]
    uint8_t nbEnabledChannels = 0;
 800eab4:	aa04      	add	r2, sp, #16
 800eab6:	189b      	adds	r3, r3, r2
 800eab8:	701d      	strb	r5, [r3, #0]
    uint8_t nbRestrictedChannels = 0;
 800eaba:	230b      	movs	r3, #11
{
 800eabc:	9103      	str	r1, [sp, #12]
    uint8_t nbRestrictedChannels = 0;
 800eabe:	189b      	adds	r3, r3, r2
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800eac0:	0029      	movs	r1, r5
 800eac2:	220c      	movs	r2, #12
{
 800eac4:	0004      	movs	r4, r0
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800eac6:	a808      	add	r0, sp, #32
    uint8_t nbRestrictedChannels = 0;
 800eac8:	701d      	strb	r5, [r3, #0]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800eaca:	9507      	str	r5, [sp, #28]
 800eacc:	f002 fab2 	bl	8011034 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 800ead0:	2201      	movs	r2, #1
 800ead2:	0029      	movs	r1, r5
 800ead4:	4829      	ldr	r0, [pc, #164]	; (800eb7c <RegionEU868NextChannel+0xd4>)
 800ead6:	f7ff f94d 	bl	800dd74 <RegionCommonCountChannels>
 800eada:	42a8      	cmp	r0, r5
 800eadc:	d105      	bne.n	800eaea <RegionEU868NextChannel+0x42>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800eade:	2207      	movs	r2, #7
 800eae0:	4b27      	ldr	r3, [pc, #156]	; (800eb80 <RegionEU868NextChannel+0xd8>)
 800eae2:	33fe      	adds	r3, #254	; 0xfe
 800eae4:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 800eae6:	430a      	orrs	r2, r1
 800eae8:	875a      	strh	r2, [r3, #58]	; 0x3a
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800eaea:	2008      	movs	r0, #8
    countChannelsParams.Joined = nextChanParams->Joined;
 800eaec:	7a63      	ldrb	r3, [r4, #9]
 800eaee:	ae0b      	add	r6, sp, #44	; 0x2c
 800eaf0:	7033      	strb	r3, [r6, #0]
    countChannelsParams.ChannelsMask = NvmCtx.ChannelsMask;
 800eaf2:	4b22      	ldr	r3, [pc, #136]	; (800eb7c <RegionEU868NextChannel+0xd4>)
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800eaf4:	5620      	ldrsb	r0, [r4, r0]
    countChannelsParams.ChannelsMask = NvmCtx.ChannelsMask;
 800eaf6:	930c      	str	r3, [sp, #48]	; 0x30
    countChannelsParams.Channels = NvmCtx.Channels;
 800eaf8:	4b21      	ldr	r3, [pc, #132]	; (800eb80 <RegionEU868NextChannel+0xd8>)
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800eafa:	7070      	strb	r0, [r6, #1]
    countChannelsParams.Channels = NvmCtx.Channels;
 800eafc:	930d      	str	r3, [sp, #52]	; 0x34
    countChannelsParams.Bands = NvmCtx.Bands;
 800eafe:	4b21      	ldr	r3, [pc, #132]	; (800eb84 <RegionEU868NextChannel+0xdc>)
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
    countChannelsParams.JoinChannels = EU868_JOIN_CHANNELS;

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800eb00:	ad10      	add	r5, sp, #64	; 0x40
    countChannelsParams.Bands = NvmCtx.Bands;
 800eb02:	930e      	str	r3, [sp, #56]	; 0x38
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800eb04:	4b20      	ldr	r3, [pc, #128]	; (800eb88 <RegionEU868NextChannel+0xe0>)
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800eb06:	0022      	movs	r2, r4
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800eb08:	930f      	str	r3, [sp, #60]	; 0x3c
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800eb0a:	6823      	ldr	r3, [r4, #0]
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800eb0c:	320c      	adds	r2, #12
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800eb0e:	9310      	str	r3, [sp, #64]	; 0x40
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800eb10:	6863      	ldr	r3, [r4, #4]
 800eb12:	9311      	str	r3, [sp, #68]	; 0x44
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800eb14:	7aa3      	ldrb	r3, [r4, #10]
 800eb16:	722b      	strb	r3, [r5, #8]
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800eb18:	2306      	movs	r3, #6
 800eb1a:	726b      	strb	r3, [r5, #9]
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800eb1c:	ab13      	add	r3, sp, #76	; 0x4c
 800eb1e:	ca82      	ldmia	r2!, {r1, r7}
 800eb20:	c382      	stmia	r3!, {r1, r7}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800eb22:	7d23      	ldrb	r3, [r4, #20]
 800eb24:	752b      	strb	r3, [r5, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800eb26:	8ae1      	ldrh	r1, [r4, #22]
 800eb28:	f7ff fbd0 	bl	800e2cc <GetTimeOnAir>

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800eb2c:	61ee      	str	r6, [r5, #28]

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800eb2e:	260a      	movs	r6, #10
 800eb30:	ab04      	add	r3, sp, #16
 800eb32:	18f6      	adds	r6, r6, r3
 800eb34:	9b04      	ldr	r3, [sp, #16]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800eb36:	61a8      	str	r0, [r5, #24]
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800eb38:	9301      	str	r3, [sp, #4]
 800eb3a:	230b      	movs	r3, #11
 800eb3c:	aa04      	add	r2, sp, #16
 800eb3e:	189b      	adds	r3, r3, r2
 800eb40:	ac07      	add	r4, sp, #28
 800eb42:	0028      	movs	r0, r5
 800eb44:	9300      	str	r3, [sp, #0]
 800eb46:	0022      	movs	r2, r4
 800eb48:	0033      	movs	r3, r6
 800eb4a:	9905      	ldr	r1, [sp, #20]
 800eb4c:	f7ff fb2f 	bl	800e1ae <RegionCommonIdentifyChannels>
 800eb50:	1e05      	subs	r5, r0, #0
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800eb52:	d109      	bne.n	800eb68 <RegionEU868NextChannel+0xc0>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800eb54:	7831      	ldrb	r1, [r6, #0]
 800eb56:	3901      	subs	r1, #1
 800eb58:	f000 f92e 	bl	800edb8 <randr>
 800eb5c:	9a03      	ldr	r2, [sp, #12]
 800eb5e:	5c23      	ldrb	r3, [r4, r0]
 800eb60:	7013      	strb	r3, [r2, #0]
    {
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
    }
    return status;
}
 800eb62:	0028      	movs	r0, r5
 800eb64:	b019      	add	sp, #100	; 0x64
 800eb66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800eb68:	280c      	cmp	r0, #12
 800eb6a:	d1fa      	bne.n	800eb62 <RegionEU868NextChannel+0xba>
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800eb6c:	2207      	movs	r2, #7
 800eb6e:	4b04      	ldr	r3, [pc, #16]	; (800eb80 <RegionEU868NextChannel+0xd8>)
 800eb70:	33fe      	adds	r3, #254	; 0xfe
 800eb72:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 800eb74:	430a      	orrs	r2, r1
 800eb76:	875a      	strh	r2, [r3, #58]	; 0x3a
 800eb78:	e7f3      	b.n	800eb62 <RegionEU868NextChannel+0xba>
 800eb7a:	46c0      	nop			; (mov r8, r8)
 800eb7c:	20000eec 	.word	0x20000eec
 800eb80:	20000db4 	.word	0x20000db4
 800eb84:	20000e74 	.word	0x20000e74
 800eb88:	00070010 	.word	0x00070010

0800eb8c <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800eb8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t band = 0;
 800eb8e:	2500      	movs	r5, #0
 800eb90:	466b      	mov	r3, sp
 800eb92:	71dd      	strb	r5, [r3, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800eb94:	7906      	ldrb	r6, [r0, #4]
{
 800eb96:	0004      	movs	r4, r0

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800eb98:	2e02      	cmp	r6, #2
 800eb9a:	d801      	bhi.n	800eba0 <RegionEU868ChannelAdd+0x14>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800eb9c:	2006      	movs	r0, #6

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
    NvmCtx.Channels[id].Band = band;
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
    return LORAMAC_STATUS_OK;
}
 800eb9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800eba0:	2003      	movs	r0, #3
    if( id >= EU868_MAX_NB_CHANNELS )
 800eba2:	2e0f      	cmp	r6, #15
 800eba4:	d8fb      	bhi.n	800eb9e <RegionEU868ChannelAdd+0x12>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800eba6:	6823      	ldr	r3, [r4, #0]
 800eba8:	0029      	movs	r1, r5
 800ebaa:	7a18      	ldrb	r0, [r3, #8]
 800ebac:	2207      	movs	r2, #7
 800ebae:	0700      	lsls	r0, r0, #28
 800ebb0:	1700      	asrs	r0, r0, #28
 800ebb2:	f7ff f8c1 	bl	800dd38 <RegionCommonValueInRange>
 800ebb6:	0007      	movs	r7, r0
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800ebb8:	2008      	movs	r0, #8
 800ebba:	6823      	ldr	r3, [r4, #0]
 800ebbc:	0029      	movs	r1, r5
 800ebbe:	5618      	ldrsb	r0, [r3, r0]
 800ebc0:	2207      	movs	r2, #7
 800ebc2:	1100      	asrs	r0, r0, #4
 800ebc4:	f7ff f8b8 	bl	800dd38 <RegionCommonValueInRange>
        drInvalid = true;
 800ebc8:	2501      	movs	r5, #1
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800ebca:	2800      	cmp	r0, #0
 800ebcc:	d002      	beq.n	800ebd4 <RegionEU868ChannelAdd+0x48>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800ebce:	427d      	negs	r5, r7
 800ebd0:	417d      	adcs	r5, r7
 800ebd2:	b2ed      	uxtb	r5, r5
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800ebd4:	6820      	ldr	r0, [r4, #0]
 800ebd6:	7a03      	ldrb	r3, [r0, #8]
 800ebd8:	071a      	lsls	r2, r3, #28
 800ebda:	b25b      	sxtb	r3, r3
 800ebdc:	1712      	asrs	r2, r2, #28
 800ebde:	111b      	asrs	r3, r3, #4
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	dd00      	ble.n	800ebe6 <RegionEU868ChannelAdd+0x5a>
        drInvalid = true;
 800ebe4:	2501      	movs	r5, #1
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800ebe6:	466b      	mov	r3, sp
 800ebe8:	6800      	ldr	r0, [r0, #0]
 800ebea:	1dd9      	adds	r1, r3, #7
 800ebec:	f7ff fb9a 	bl	800e324 <VerifyRfFreq>
 800ebf0:	2800      	cmp	r0, #0
 800ebf2:	d103      	bne.n	800ebfc <RegionEU868ChannelAdd+0x70>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800ebf4:	2004      	movs	r0, #4
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800ebf6:	2d00      	cmp	r5, #0
 800ebf8:	d0d1      	beq.n	800eb9e <RegionEU868ChannelAdd+0x12>
 800ebfa:	e7cf      	b.n	800eb9c <RegionEU868ChannelAdd+0x10>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800ebfc:	2005      	movs	r0, #5
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800ebfe:	2d00      	cmp	r5, #0
 800ec00:	d1cd      	bne.n	800eb9e <RegionEU868ChannelAdd+0x12>
    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 800ec02:	220c      	movs	r2, #12
 800ec04:	0017      	movs	r7, r2
 800ec06:	4377      	muls	r7, r6
 800ec08:	4b08      	ldr	r3, [pc, #32]	; (800ec2c <RegionEU868ChannelAdd+0xa0>)
 800ec0a:	6821      	ldr	r1, [r4, #0]
 800ec0c:	18ff      	adds	r7, r7, r3
 800ec0e:	0038      	movs	r0, r7
 800ec10:	f000 f8ee 	bl	800edf0 <memcpy1>
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 800ec14:	2101      	movs	r1, #1
    NvmCtx.Channels[id].Band = band;
 800ec16:	466b      	mov	r3, sp
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 800ec18:	40b1      	lsls	r1, r6
    NvmCtx.Channels[id].Band = band;
 800ec1a:	79db      	ldrb	r3, [r3, #7]
    return LORAMAC_STATUS_OK;
 800ec1c:	0028      	movs	r0, r5
    NvmCtx.Channels[id].Band = band;
 800ec1e:	727b      	strb	r3, [r7, #9]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 800ec20:	4b02      	ldr	r3, [pc, #8]	; (800ec2c <RegionEU868ChannelAdd+0xa0>)
 800ec22:	33fe      	adds	r3, #254	; 0xfe
 800ec24:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800ec26:	430a      	orrs	r2, r1
 800ec28:	875a      	strh	r2, [r3, #58]	; 0x3a
    return LORAMAC_STATUS_OK;
 800ec2a:	e7b8      	b.n	800eb9e <RegionEU868ChannelAdd+0x12>
 800ec2c:	20000db4 	.word	0x20000db4

0800ec30 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 800ec30:	b510      	push	{r4, lr}
    uint8_t id = channelRemove->ChannelId;
 800ec32:	7804      	ldrb	r4, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
    {
        return false;
 800ec34:	2100      	movs	r1, #0
    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800ec36:	2c02      	cmp	r4, #2
 800ec38:	d90c      	bls.n	800ec54 <RegionEU868ChannelsRemove+0x24>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800ec3a:	220c      	movs	r2, #12
 800ec3c:	0013      	movs	r3, r2
 800ec3e:	4363      	muls	r3, r4
 800ec40:	4805      	ldr	r0, [pc, #20]	; (800ec58 <RegionEU868ChannelsRemove+0x28>)
 800ec42:	18c0      	adds	r0, r0, r3
 800ec44:	f002 f9f6 	bl	8011034 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800ec48:	0021      	movs	r1, r4
 800ec4a:	2210      	movs	r2, #16
 800ec4c:	4803      	ldr	r0, [pc, #12]	; (800ec5c <RegionEU868ChannelsRemove+0x2c>)
 800ec4e:	f7ff f87d 	bl	800dd4c <RegionCommonChanDisable>
 800ec52:	0001      	movs	r1, r0
}
 800ec54:	0008      	movs	r0, r1
 800ec56:	bd10      	pop	{r4, pc}
 800ec58:	20000db4 	.word	0x20000db4
 800ec5c:	20000eec 	.word	0x20000eec

0800ec60 <RegionEU868ApplyCFList>:
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800ec60:	2350      	movs	r3, #80	; 0x50
{
 800ec62:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec64:	b087      	sub	sp, #28
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800ec66:	ac03      	add	r4, sp, #12
 800ec68:	7223      	strb	r3, [r4, #8]
    if( applyCFList->Size != 16 )
 800ec6a:	7903      	ldrb	r3, [r0, #4]
{
 800ec6c:	0006      	movs	r6, r0
    if( applyCFList->Size != 16 )
 800ec6e:	2b10      	cmp	r3, #16
 800ec70:	d12e      	bne.n	800ecd0 <RegionEU868ApplyCFList+0x70>
    if( applyCFList->Payload[15] != 0 )
 800ec72:	6803      	ldr	r3, [r0, #0]
 800ec74:	7bdd      	ldrb	r5, [r3, #15]
 800ec76:	2d00      	cmp	r5, #0
 800ec78:	d12a      	bne.n	800ecd0 <RegionEU868ApplyCFList+0x70>
            newChannel.Frequency *= 100;
 800ec7a:	2764      	movs	r7, #100	; 0x64
 800ec7c:	1cea      	adds	r2, r5, #3
 800ec7e:	b2d2      	uxtb	r2, r2
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800ec80:	2a07      	cmp	r2, #7
 800ec82:	d818      	bhi.n	800ecb6 <RegionEU868ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800ec84:	2003      	movs	r0, #3
 800ec86:	4368      	muls	r0, r5
 800ec88:	6833      	ldr	r3, [r6, #0]
 800ec8a:	5c19      	ldrb	r1, [r3, r0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800ec8c:	1818      	adds	r0, r3, r0
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800ec8e:	6021      	str	r1, [r4, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800ec90:	7843      	ldrb	r3, [r0, #1]
 800ec92:	021b      	lsls	r3, r3, #8
 800ec94:	4319      	orrs	r1, r3
 800ec96:	6021      	str	r1, [r4, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800ec98:	7883      	ldrb	r3, [r0, #2]
 800ec9a:	041b      	lsls	r3, r3, #16
 800ec9c:	430b      	orrs	r3, r1
            newChannel.Rx1Frequency = 0;
 800ec9e:	2100      	movs	r1, #0
            newChannel.Frequency *= 100;
 800eca0:	437b      	muls	r3, r7
            newChannel.Rx1Frequency = 0;
 800eca2:	6061      	str	r1, [r4, #4]
            newChannel.Frequency *= 100;
 800eca4:	6023      	str	r3, [r4, #0]
        if( newChannel.Frequency != 0 )
 800eca6:	428b      	cmp	r3, r1
 800eca8:	d10a      	bne.n	800ecc0 <RegionEU868ApplyCFList+0x60>
            channelRemove.ChannelId = chanIdx;
 800ecaa:	466b      	mov	r3, sp
            RegionEU868ChannelsRemove( &channelRemove );
 800ecac:	4668      	mov	r0, sp
            channelRemove.ChannelId = chanIdx;
 800ecae:	701a      	strb	r2, [r3, #0]
            RegionEU868ChannelsRemove( &channelRemove );
 800ecb0:	f7ff ffbe 	bl	800ec30 <RegionEU868ChannelsRemove>
 800ecb4:	e009      	b.n	800ecca <RegionEU868ApplyCFList+0x6a>
            newChannel.Frequency = 0;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	6023      	str	r3, [r4, #0]
            newChannel.DrRange.Value = 0;
 800ecba:	7223      	strb	r3, [r4, #8]
            newChannel.Rx1Frequency = 0;
 800ecbc:	6063      	str	r3, [r4, #4]
        if( newChannel.Frequency != 0 )
 800ecbe:	e7f4      	b.n	800ecaa <RegionEU868ApplyCFList+0x4a>
            channelAdd.NewChannel = &newChannel;
 800ecc0:	a801      	add	r0, sp, #4
 800ecc2:	9401      	str	r4, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800ecc4:	7102      	strb	r2, [r0, #4]
            RegionEU868ChannelAdd( &channelAdd );
 800ecc6:	f7ff ff61 	bl	800eb8c <RegionEU868ChannelAdd>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800ecca:	3501      	adds	r5, #1
 800eccc:	2d0d      	cmp	r5, #13
 800ecce:	d1d5      	bne.n	800ec7c <RegionEU868ApplyCFList+0x1c>
}
 800ecd0:	b007      	add	sp, #28
 800ecd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ecd4 <RegionEU868NewChannelReq>:
{
 800ecd4:	b507      	push	{r0, r1, r2, lr}
    if( newChannelReq->NewChannel->Frequency == 0 )
 800ecd6:	6802      	ldr	r2, [r0, #0]
 800ecd8:	7903      	ldrb	r3, [r0, #4]
 800ecda:	6811      	ldr	r1, [r2, #0]
 800ecdc:	2900      	cmp	r1, #0
 800ecde:	d10a      	bne.n	800ecf6 <RegionEU868NewChannelReq+0x22>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800ece0:	466a      	mov	r2, sp
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800ece2:	4668      	mov	r0, sp
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800ece4:	7013      	strb	r3, [r2, #0]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800ece6:	f7ff ffa3 	bl	800ec30 <RegionEU868ChannelsRemove>
    uint8_t status = 0x03;
 800ecea:	2303      	movs	r3, #3
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800ecec:	2800      	cmp	r0, #0
 800ecee:	d100      	bne.n	800ecf2 <RegionEU868NewChannelReq+0x1e>
            status &= 0xFC;
 800ecf0:	2300      	movs	r3, #0
}
 800ecf2:	0018      	movs	r0, r3
 800ecf4:	bd0e      	pop	{r1, r2, r3, pc}
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800ecf6:	9200      	str	r2, [sp, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800ecf8:	466a      	mov	r2, sp
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800ecfa:	4668      	mov	r0, sp
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800ecfc:	7113      	strb	r3, [r2, #4]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800ecfe:	f7ff ff45 	bl	800eb8c <RegionEU868ChannelAdd>
 800ed02:	2806      	cmp	r0, #6
 800ed04:	d8f4      	bhi.n	800ecf0 <RegionEU868NewChannelReq+0x1c>
 800ed06:	4b02      	ldr	r3, [pc, #8]	; (800ed10 <RegionEU868NewChannelReq+0x3c>)
 800ed08:	335c      	adds	r3, #92	; 0x5c
 800ed0a:	5c1b      	ldrb	r3, [r3, r0]
 800ed0c:	e7f1      	b.n	800ecf2 <RegionEU868NewChannelReq+0x1e>
 800ed0e:	46c0      	nop			; (mov r8, r8)
 800ed10:	08011690 	.word	0x08011690

0800ed14 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800ed14:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
    int8_t phyTxPower = 0;
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 800ed16:	220c      	movs	r2, #12
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800ed18:	7801      	ldrb	r1, [r0, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 800ed1a:	4b10      	ldr	r3, [pc, #64]	; (800ed5c <RegionEU868SetContinuousWave+0x48>)
 800ed1c:	434a      	muls	r2, r1
 800ed1e:	58d5      	ldr	r5, [r2, r3]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800ed20:	189a      	adds	r2, r3, r2
 800ed22:	7a51      	ldrb	r1, [r2, #9]
 800ed24:	2214      	movs	r2, #20
{
 800ed26:	0004      	movs	r4, r0
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800ed28:	434a      	muls	r2, r1
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800ed2a:	2102      	movs	r1, #2
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800ed2c:	189b      	adds	r3, r3, r2
 800ed2e:	33c2      	adds	r3, #194	; 0xc2
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800ed30:	781b      	ldrb	r3, [r3, #0]
 800ed32:	5661      	ldrsb	r1, [r4, r1]
 800ed34:	7882      	ldrb	r2, [r0, #2]
 800ed36:	1c18      	adds	r0, r3, #0
 800ed38:	b25b      	sxtb	r3, r3
 800ed3a:	428b      	cmp	r3, r1
 800ed3c:	da00      	bge.n	800ed40 <RegionEU868SetContinuousWave+0x2c>
 800ed3e:	1c10      	adds	r0, r2, #0

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800ed40:	68a2      	ldr	r2, [r4, #8]
 800ed42:	6861      	ldr	r1, [r4, #4]
 800ed44:	b240      	sxtb	r0, r0
 800ed46:	f7ff f98b 	bl	800e060 <RegionCommonComputeTxPower>

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800ed4a:	4b05      	ldr	r3, [pc, #20]	; (800ed60 <RegionEU868SetContinuousWave+0x4c>)
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800ed4c:	0001      	movs	r1, r0
    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800ed4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed50:	0028      	movs	r0, r5
 800ed52:	89a2      	ldrh	r2, [r4, #12]
 800ed54:	9301      	str	r3, [sp, #4]
 800ed56:	4798      	blx	r3
}
 800ed58:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800ed5a:	46c0      	nop			; (mov r8, r8)
 800ed5c:	20000db4 	.word	0x20000db4
 800ed60:	080117e0 	.word	0x080117e0

0800ed64 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    int8_t datarate = dr - drOffset;
 800ed64:	1a8a      	subs	r2, r1, r2
 800ed66:	b252      	sxtb	r2, r2

    if( datarate < 0 )
    {
        datarate = DR_0;
    }
    return datarate;
 800ed68:	1c10      	adds	r0, r2, #0
 800ed6a:	2a00      	cmp	r2, #0
 800ed6c:	da00      	bge.n	800ed70 <RegionEU868ApplyDrOffset+0xc>
 800ed6e:	2000      	movs	r0, #0
 800ed70:	b2c0      	uxtb	r0, r0
}
 800ed72:	4770      	bx	lr

0800ed74 <RegionEU868RxBeaconSetup>:

void RegionEU868RxBeaconSetup( RxBeaconSetup_t* rxBeaconSetup, uint8_t* outDr )
{
 800ed74:	0003      	movs	r3, r0
 800ed76:	b510      	push	{r4, lr}
    RegionCommonRxBeaconSetupParams_t regionCommonRxBeaconSetup;

    regionCommonRxBeaconSetup.Datarates = DataratesEU868;
 800ed78:	4a0a      	ldr	r2, [pc, #40]	; (800eda4 <RegionEU868RxBeaconSetup+0x30>)
{
 800ed7a:	b086      	sub	sp, #24
    regionCommonRxBeaconSetup.Datarates = DataratesEU868;
 800ed7c:	3220      	adds	r2, #32
 800ed7e:	9201      	str	r2, [sp, #4]
    regionCommonRxBeaconSetup.Frequency = rxBeaconSetup->Frequency;
 800ed80:	689a      	ldr	r2, [r3, #8]
    regionCommonRxBeaconSetup.Datarates = DataratesEU868;
 800ed82:	a801      	add	r0, sp, #4
    regionCommonRxBeaconSetup.Frequency = rxBeaconSetup->Frequency;
 800ed84:	6042      	str	r2, [r0, #4]
    regionCommonRxBeaconSetup.BeaconSize = EU868_BEACON_SIZE;
 800ed86:	4a08      	ldr	r2, [pc, #32]	; (800eda8 <RegionEU868RxBeaconSetup+0x34>)
{
 800ed88:	000c      	movs	r4, r1
    regionCommonRxBeaconSetup.BeaconSize = EU868_BEACON_SIZE;
 800ed8a:	8102      	strh	r2, [r0, #8]
    regionCommonRxBeaconSetup.BeaconDatarate = EU868_BEACON_CHANNEL_DR;
    regionCommonRxBeaconSetup.BeaconChannelBW = EU868_BEACON_CHANNEL_BW;
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	7282      	strb	r2, [r0, #10]
    regionCommonRxBeaconSetup.RxTime = rxBeaconSetup->RxTime;
 800ed90:	685a      	ldr	r2, [r3, #4]
    regionCommonRxBeaconSetup.SymbolTimeout = rxBeaconSetup->SymbolTimeout;
 800ed92:	881b      	ldrh	r3, [r3, #0]
    regionCommonRxBeaconSetup.RxTime = rxBeaconSetup->RxTime;
 800ed94:	60c2      	str	r2, [r0, #12]
    regionCommonRxBeaconSetup.SymbolTimeout = rxBeaconSetup->SymbolTimeout;
 800ed96:	8203      	strh	r3, [r0, #16]

    RegionCommonRxBeaconSetup( &regionCommonRxBeaconSetup );
 800ed98:	f7ff f978 	bl	800e08c <RegionCommonRxBeaconSetup>

    // Store downlink datarate
    *outDr = EU868_BEACON_CHANNEL_DR;
 800ed9c:	2303      	movs	r3, #3
 800ed9e:	7023      	strb	r3, [r4, #0]
}
 800eda0:	b006      	add	sp, #24
 800eda2:	bd10      	pop	{r4, pc}
 800eda4:	08011690 	.word	0x08011690
 800eda8:	00000311 	.word	0x00000311

0800edac <srand1>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
}

void srand1( uint32_t seed )
{
    next = seed;
 800edac:	4b01      	ldr	r3, [pc, #4]	; (800edb4 <srand1+0x8>)
 800edae:	6018      	str	r0, [r3, #0]
}
 800edb0:	4770      	bx	lr
 800edb2:	46c0      	nop			; (mov r8, r8)
 800edb4:	20000178 	.word	0x20000178

0800edb8 <randr>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800edb8:	4b09      	ldr	r3, [pc, #36]	; (800ede0 <randr+0x28>)
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800edba:	b570      	push	{r4, r5, r6, lr}
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800edbc:	681a      	ldr	r2, [r3, #0]
{
 800edbe:	0005      	movs	r5, r0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800edc0:	4808      	ldr	r0, [pc, #32]	; (800ede4 <randr+0x2c>)
{
 800edc2:	000c      	movs	r4, r1
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800edc4:	4350      	muls	r0, r2
 800edc6:	4a08      	ldr	r2, [pc, #32]	; (800ede8 <randr+0x30>)
 800edc8:	4908      	ldr	r1, [pc, #32]	; (800edec <randr+0x34>)
 800edca:	1880      	adds	r0, r0, r2
 800edcc:	6018      	str	r0, [r3, #0]
 800edce:	f7f1 fa51 	bl	8000274 <__aeabi_uidivmod>
 800edd2:	0008      	movs	r0, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800edd4:	1b61      	subs	r1, r4, r5
 800edd6:	3101      	adds	r1, #1
 800edd8:	f7f1 fb36 	bl	8000448 <__aeabi_idivmod>
 800eddc:	1948      	adds	r0, r1, r5
}
 800edde:	bd70      	pop	{r4, r5, r6, pc}
 800ede0:	20000178 	.word	0x20000178
 800ede4:	41c64e6d 	.word	0x41c64e6d
 800ede8:	00003039 	.word	0x00003039
 800edec:	7fffffff 	.word	0x7fffffff

0800edf0 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800edf0:	2300      	movs	r3, #0
{
 800edf2:	b510      	push	{r4, lr}
    while( size-- )
 800edf4:	4293      	cmp	r3, r2
 800edf6:	d100      	bne.n	800edfa <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 800edf8:	bd10      	pop	{r4, pc}
        *dst++ = *src++;
 800edfa:	5ccc      	ldrb	r4, [r1, r3]
 800edfc:	54c4      	strb	r4, [r0, r3]
 800edfe:	3301      	adds	r3, #1
 800ee00:	e7f8      	b.n	800edf4 <memcpy1+0x4>

0800ee02 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800ee02:	1e53      	subs	r3, r2, #1
 800ee04:	18c0      	adds	r0, r0, r3
    while( size-- )
 800ee06:	2300      	movs	r3, #0
{
 800ee08:	b530      	push	{r4, r5, lr}
    while( size-- )
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d100      	bne.n	800ee10 <memcpyr+0xe>
    {
        *dst-- = *src++;
    }
}
 800ee0e:	bd30      	pop	{r4, r5, pc}
        *dst-- = *src++;
 800ee10:	5ccd      	ldrb	r5, [r1, r3]
 800ee12:	425c      	negs	r4, r3
 800ee14:	5505      	strb	r5, [r0, r4]
 800ee16:	3301      	adds	r3, #1
 800ee18:	e7f7      	b.n	800ee0a <memcpyr+0x8>
	...

0800ee1c <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 800ee1c:	4b04      	ldr	r3, [pc, #16]	; (800ee30 <memset1+0x14>)
 800ee1e:	3a01      	subs	r2, #1
 800ee20:	b292      	uxth	r2, r2
 800ee22:	429a      	cmp	r2, r3
 800ee24:	d100      	bne.n	800ee28 <memset1+0xc>
    {
        *dst++ = value;
    }
}
 800ee26:	4770      	bx	lr
        *dst++ = value;
 800ee28:	7001      	strb	r1, [r0, #0]
 800ee2a:	3001      	adds	r0, #1
 800ee2c:	e7f7      	b.n	800ee1e <memset1+0x2>
 800ee2e:	46c0      	nop			; (mov r8, r8)
 800ee30:	0000ffff 	.word	0x0000ffff

0800ee34 <SX1276GetStatus>:
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
}

RadioState_t SX1276GetStatus( void )
{
    return SX1276.Settings.State;
 800ee34:	4b01      	ldr	r3, [pc, #4]	; (800ee3c <SX1276GetStatus+0x8>)
 800ee36:	7918      	ldrb	r0, [r3, #4]
}
 800ee38:	4770      	bx	lr
 800ee3a:	46c0      	nop			; (mov r8, r8)
 800ee3c:	2000165c 	.word	0x2000165c

0800ee40 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800ee40:	4a09      	ldr	r2, [pc, #36]	; (800ee68 <GetFskBandwidthRegValue+0x28>)
{
 800ee42:	2300      	movs	r3, #0
 800ee44:	0011      	movs	r1, r2
 800ee46:	b510      	push	{r4, lr}
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 800ee48:	6814      	ldr	r4, [r2, #0]
 800ee4a:	4284      	cmp	r4, r0
 800ee4c:	d806      	bhi.n	800ee5c <GetFskBandwidthRegValue+0x1c>
 800ee4e:	6894      	ldr	r4, [r2, #8]
 800ee50:	4284      	cmp	r4, r0
 800ee52:	d903      	bls.n	800ee5c <GetFskBandwidthRegValue+0x1c>
        {
            return FskBandwidths[i].RegValue;
 800ee54:	00db      	lsls	r3, r3, #3
 800ee56:	18cb      	adds	r3, r1, r3
 800ee58:	7918      	ldrb	r0, [r3, #4]
        }
    }
    // ERROR: Value not found
    while( 1 );
}
 800ee5a:	bd10      	pop	{r4, pc}
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800ee5c:	3301      	adds	r3, #1
 800ee5e:	3208      	adds	r2, #8
 800ee60:	2b15      	cmp	r3, #21
 800ee62:	d1f1      	bne.n	800ee48 <GetFskBandwidthRegValue+0x8>
    while( 1 );
 800ee64:	e7fe      	b.n	800ee64 <GetFskBandwidthRegValue+0x24>
 800ee66:	46c0      	nop			; (mov r8, r8)
 800ee68:	08011730 	.word	0x08011730

0800ee6c <SX1276GetTimeOnAir>:
{
 800ee6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee6e:	0014      	movs	r4, r2
 800ee70:	aa08      	add	r2, sp, #32
 800ee72:	8816      	ldrh	r6, [r2, #0]
 800ee74:	aa09      	add	r2, sp, #36	; 0x24
 800ee76:	7817      	ldrb	r7, [r2, #0]
 800ee78:	aa0a      	add	r2, sp, #40	; 0x28
 800ee7a:	7812      	ldrb	r2, [r2, #0]
 800ee7c:	000d      	movs	r5, r1
 800ee7e:	a90b      	add	r1, sp, #44	; 0x2c
 800ee80:	4694      	mov	ip, r2
 800ee82:	7809      	ldrb	r1, [r1, #0]
    switch( modem )
 800ee84:	2800      	cmp	r0, #0
 800ee86:	d009      	beq.n	800ee9c <SX1276GetTimeOnAir+0x30>
 800ee88:	2801      	cmp	r0, #1
 800ee8a:	d017      	beq.n	800eebc <SX1276GetTimeOnAir+0x50>
 800ee8c:	2401      	movs	r4, #1
 800ee8e:	2000      	movs	r0, #0
    return ( numerator + denominator - 1 ) / denominator;
 800ee90:	1900      	adds	r0, r0, r4
 800ee92:	0021      	movs	r1, r4
 800ee94:	3801      	subs	r0, #1
 800ee96:	f7f1 f967 	bl	8000168 <__udivsi3>
}
 800ee9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    return ( preambleLen << 3 ) +
           ( ( fixLen == false ) ? 8 : 0 ) +
             ( syncWordLength << 3 ) +
             ( ( payloadLen +
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 800ee9c:	1e4b      	subs	r3, r1, #1
 800ee9e:	4199      	sbcs	r1, r3
           ( ( fixLen == false ) ? 8 : 0 ) +
 800eea0:	4278      	negs	r0, r7
 800eea2:	4178      	adcs	r0, r7
               ( ( crcOn == true ) ? 2 : 0 ) 
 800eea4:	0049      	lsls	r1, r1, #1
               ( 0 ) + // Address filter size
 800eea6:	000a      	movs	r2, r1
           ( ( fixLen == false ) ? 8 : 0 ) +
 800eea8:	1986      	adds	r6, r0, r6
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 800eeaa:	20fa      	movs	r0, #250	; 0xfa
    return ( preambleLen << 3 ) +
 800eeac:	00f6      	lsls	r6, r6, #3
               ( 0 ) + // Address filter size
 800eeae:	4462      	add	r2, ip
           ( ( fixLen == false ) ? 8 : 0 ) +
 800eeb0:	3618      	adds	r6, #24
               ) << 3 
 800eeb2:	00d2      	lsls	r2, r2, #3
             ( syncWordLength << 3 ) +
 800eeb4:	1992      	adds	r2, r2, r6
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 800eeb6:	0080      	lsls	r0, r0, #2
 800eeb8:	4350      	muls	r0, r2
        break;
 800eeba:	e7e9      	b.n	800ee90 <SX1276GetTimeOnAir+0x24>
static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
    int32_t crDenom           = coderate + 4;
 800eebc:	3304      	adds	r3, #4
 800eebe:	9301      	str	r3, [sp, #4]
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800eec0:	1f63      	subs	r3, r4, #5
 800eec2:	2b01      	cmp	r3, #1
 800eec4:	d804      	bhi.n	800eed0 <SX1276GetTimeOnAir+0x64>
    {
        if( preambleLen < 12 )
 800eec6:	1c33      	adds	r3, r6, #0
 800eec8:	2e0c      	cmp	r6, #12
 800eeca:	d200      	bcs.n	800eece <SX1276GetTimeOnAir+0x62>
 800eecc:	230c      	movs	r3, #12
 800eece:	b29e      	uxth	r6, r3
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800eed0:	2d00      	cmp	r5, #0
 800eed2:	d136      	bne.n	800ef42 <SX1276GetTimeOnAir+0xd6>
 800eed4:	0023      	movs	r3, r4
 800eed6:	2001      	movs	r0, #1
 800eed8:	002a      	movs	r2, r5
 800eeda:	3b0b      	subs	r3, #11
 800eedc:	4298      	cmp	r0, r3
 800eede:	416a      	adcs	r2, r5
 800eee0:	0013      	movs	r3, r2
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800eee2:	b2db      	uxtb	r3, r3
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
                            ( crcOn ? 16 : 0 ) -
 800eee4:	1e48      	subs	r0, r1, #1
 800eee6:	4181      	sbcs	r1, r0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800eee8:	4662      	mov	r2, ip
                            ( crcOn ? 16 : 0 ) -
 800eeea:	0108      	lsls	r0, r1, #4
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800eeec:	00d2      	lsls	r2, r2, #3
 800eeee:	1810      	adds	r0, r2, r0
                            ( 4 * datarate ) +
                            ( fixLen ? 0 : 20 );
 800eef0:	2200      	movs	r2, #0
                            ( 4 * datarate ) +
 800eef2:	00a1      	lsls	r1, r4, #2
                            ( crcOn ? 16 : 0 ) -
 800eef4:	1a40      	subs	r0, r0, r1
                            ( fixLen ? 0 : 20 );
 800eef6:	4297      	cmp	r7, r2
 800eef8:	d100      	bne.n	800eefc <SX1276GetTimeOnAir+0x90>
 800eefa:	3214      	adds	r2, #20
                            ( 4 * datarate ) +
 800eefc:	1880      	adds	r0, r0, r2

    if( datarate <= 6 )
 800eefe:	1ea7      	subs	r7, r4, #2
 800ef00:	2c06      	cmp	r4, #6
 800ef02:	d903      	bls.n	800ef0c <SX1276GetTimeOnAir+0xa0>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 800ef04:	3008      	adds	r0, #8

        if( lowDatareOptimize == true )
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d000      	beq.n	800ef0c <SX1276GetTimeOnAir+0xa0>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800ef0a:	00b9      	lsls	r1, r7, #2
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800ef0c:	43c3      	mvns	r3, r0
 800ef0e:	17db      	asrs	r3, r3, #31
 800ef10:	4018      	ands	r0, r3
 800ef12:	1840      	adds	r0, r0, r1
 800ef14:	3801      	subs	r0, #1
 800ef16:	f7f1 f9b1 	bl	800027c <__divsi3>
 800ef1a:	9b01      	ldr	r3, [sp, #4]
 800ef1c:	4343      	muls	r3, r0
 800ef1e:	199e      	adds	r6, r3, r6

    if( datarate <= 6 )
    {
        intermediate += 2;
 800ef20:	0032      	movs	r2, r6
 800ef22:	320e      	adds	r2, #14
    if( datarate <= 6 )
 800ef24:	2c06      	cmp	r4, #6
 800ef26:	d900      	bls.n	800ef2a <SX1276GetTimeOnAir+0xbe>
    int32_t intermediate =
 800ef28:	3a02      	subs	r2, #2
    switch( bw )
 800ef2a:	2d02      	cmp	r5, #2
 800ef2c:	d811      	bhi.n	800ef52 <SX1276GetTimeOnAir+0xe6>
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800ef2e:	0092      	lsls	r2, r2, #2
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 800ef30:	20fa      	movs	r0, #250	; 0xfa
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800ef32:	3201      	adds	r2, #1
 800ef34:	40ba      	lsls	r2, r7
 800ef36:	4b07      	ldr	r3, [pc, #28]	; (800ef54 <SX1276GetTimeOnAir+0xe8>)
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 800ef38:	0080      	lsls	r0, r0, #2
 800ef3a:	00ad      	lsls	r5, r5, #2
 800ef3c:	4350      	muls	r0, r2
 800ef3e:	58ec      	ldr	r4, [r5, r3]
 800ef40:	e7a6      	b.n	800ee90 <SX1276GetTimeOnAir+0x24>
    bool    lowDatareOptimize = false;
 800ef42:	2300      	movs	r3, #0
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800ef44:	2d01      	cmp	r5, #1
 800ef46:	d1cd      	bne.n	800eee4 <SX1276GetTimeOnAir+0x78>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800ef48:	0023      	movs	r3, r4
 800ef4a:	3b0c      	subs	r3, #12
 800ef4c:	4258      	negs	r0, r3
 800ef4e:	4143      	adcs	r3, r0
 800ef50:	e7c7      	b.n	800eee2 <SX1276GetTimeOnAir+0x76>
    return ( numerator + denominator - 1 ) / denominator;
 800ef52:	deff      	udf	#255	; 0xff
 800ef54:	080116f4 	.word	0x080116f4

0800ef58 <SX1276GetWakeupTime>:
{
 800ef58:	b510      	push	{r4, lr}
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 800ef5a:	f7f5 fbb1 	bl	80046c0 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 800ef5e:	3002      	adds	r0, #2
}
 800ef60:	bd10      	pop	{r4, pc}

0800ef62 <SX1276WriteBuffer>:
{
 800ef62:	b570      	push	{r4, r5, r6, lr}
 800ef64:	0006      	movs	r6, r0
    Sx_Board_ChipSelect( 0 );
 800ef66:	2000      	movs	r0, #0
{
 800ef68:	000c      	movs	r4, r1
 800ef6a:	0015      	movs	r5, r2
    Sx_Board_ChipSelect( 0 );
 800ef6c:	f7f5 fd80 	bl	8004a70 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr | 0x80 );
 800ef70:	2080      	movs	r0, #128	; 0x80
 800ef72:	4330      	orrs	r0, r6
 800ef74:	b280      	uxth	r0, r0
 800ef76:	f7f5 fd6d 	bl	8004a54 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 800ef7a:	1965      	adds	r5, r4, r5
 800ef7c:	42ac      	cmp	r4, r5
 800ef7e:	d103      	bne.n	800ef88 <SX1276WriteBuffer+0x26>
    Sx_Board_ChipSelect( 1 );
 800ef80:	2001      	movs	r0, #1
 800ef82:	f7f5 fd75 	bl	8004a70 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 800ef86:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv( buffer[i] );
 800ef88:	7820      	ldrb	r0, [r4, #0]
 800ef8a:	f7f5 fd63 	bl	8004a54 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 800ef8e:	3401      	adds	r4, #1
 800ef90:	e7f4      	b.n	800ef7c <SX1276WriteBuffer+0x1a>

0800ef92 <SX1276Write>:
{
 800ef92:	b507      	push	{r0, r1, r2, lr}
 800ef94:	466b      	mov	r3, sp
 800ef96:	71d9      	strb	r1, [r3, #7]
 800ef98:	3307      	adds	r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 800ef9a:	2201      	movs	r2, #1
 800ef9c:	0019      	movs	r1, r3
 800ef9e:	f7ff ffe0 	bl	800ef62 <SX1276WriteBuffer>
}
 800efa2:	bd07      	pop	{r0, r1, r2, pc}

0800efa4 <SX1276SetChannel>:
    SX1276.Settings.Channel = freq;
 800efa4:	4b11      	ldr	r3, [pc, #68]	; (800efec <SX1276SetChannel+0x48>)
{
 800efa6:	b570      	push	{r4, r5, r6, lr}
    SX_FREQ_TO_CHANNEL( channel, freq );
 800efa8:	4911      	ldr	r1, [pc, #68]	; (800eff0 <SX1276SetChannel+0x4c>)
    SX1276.Settings.Channel = freq;
 800efaa:	6098      	str	r0, [r3, #8]
{
 800efac:	0005      	movs	r5, r0
    SX_FREQ_TO_CHANNEL( channel, freq );
 800efae:	f7f1 f961 	bl	8000274 <__aeabi_uidivmod>
 800efb2:	4b10      	ldr	r3, [pc, #64]	; (800eff4 <SX1276SetChannel+0x50>)
 800efb4:	0208      	lsls	r0, r1, #8
 800efb6:	18c0      	adds	r0, r0, r3
 800efb8:	490d      	ldr	r1, [pc, #52]	; (800eff0 <SX1276SetChannel+0x4c>)
 800efba:	f7f1 f8d5 	bl	8000168 <__udivsi3>
 800efbe:	490c      	ldr	r1, [pc, #48]	; (800eff0 <SX1276SetChannel+0x4c>)
 800efc0:	0004      	movs	r4, r0
 800efc2:	0028      	movs	r0, r5
 800efc4:	f7f1 f8d0 	bl	8000168 <__udivsi3>
 800efc8:	0200      	lsls	r0, r0, #8
 800efca:	1824      	adds	r4, r4, r0
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 800efcc:	0c21      	lsrs	r1, r4, #16
 800efce:	2006      	movs	r0, #6
 800efd0:	b2c9      	uxtb	r1, r1
 800efd2:	f7ff ffde 	bl	800ef92 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 800efd6:	0a21      	lsrs	r1, r4, #8
 800efd8:	2007      	movs	r0, #7
 800efda:	b2c9      	uxtb	r1, r1
 800efdc:	f7ff ffd9 	bl	800ef92 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 800efe0:	2008      	movs	r0, #8
 800efe2:	b2e1      	uxtb	r1, r4
 800efe4:	f7ff ffd5 	bl	800ef92 <SX1276Write>
}
 800efe8:	bd70      	pop	{r4, r5, r6, pc}
 800efea:	46c0      	nop			; (mov r8, r8)
 800efec:	2000165c 	.word	0x2000165c
 800eff0:	00003d09 	.word	0x00003d09
 800eff4:	00001e84 	.word	0x00001e84

0800eff8 <SX1276ReadBuffer>:
{
 800eff8:	b570      	push	{r4, r5, r6, lr}
 800effa:	0005      	movs	r5, r0
    Sx_Board_ChipSelect( 0 );
 800effc:	2000      	movs	r0, #0
{
 800effe:	000c      	movs	r4, r1
 800f000:	0016      	movs	r6, r2
    Sx_Board_ChipSelect( 0 );
 800f002:	f7f5 fd35 	bl	8004a70 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr & 0x7F );
 800f006:	207f      	movs	r0, #127	; 0x7f
 800f008:	4028      	ands	r0, r5
 800f00a:	f7f5 fd23 	bl	8004a54 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 800f00e:	19a6      	adds	r6, r4, r6
 800f010:	42b4      	cmp	r4, r6
 800f012:	d103      	bne.n	800f01c <SX1276ReadBuffer+0x24>
    Sx_Board_ChipSelect( 1 );
 800f014:	2001      	movs	r0, #1
 800f016:	f7f5 fd2b 	bl	8004a70 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 800f01a:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv( 0 );
 800f01c:	2000      	movs	r0, #0
 800f01e:	f7f5 fd19 	bl	8004a54 <CMWX1ZZABZ0XX_RADIO_SendRecv>
 800f022:	7020      	strb	r0, [r4, #0]
    for( i = 0; i < size; i++ )
 800f024:	3401      	adds	r4, #1
 800f026:	e7f3      	b.n	800f010 <SX1276ReadBuffer+0x18>

0800f028 <SX1276Read>:
{
 800f028:	b513      	push	{r0, r1, r4, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 800f02a:	466b      	mov	r3, sp
 800f02c:	1ddc      	adds	r4, r3, #7
 800f02e:	2201      	movs	r2, #1
 800f030:	0021      	movs	r1, r4
 800f032:	f7ff ffe1 	bl	800eff8 <SX1276ReadBuffer>
    return data;
 800f036:	7820      	ldrb	r0, [r4, #0]
}
 800f038:	bd16      	pop	{r1, r2, r4, pc}
	...

0800f03c <RxChainCalibration>:
{
 800f03c:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800f03e:	2009      	movs	r0, #9
 800f040:	f7ff fff2 	bl	800f028 <SX1276Read>
 800f044:	0005      	movs	r5, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800f046:	2006      	movs	r0, #6
 800f048:	f7ff ffee 	bl	800f028 <SX1276Read>
 800f04c:	0004      	movs	r4, r0
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800f04e:	2007      	movs	r0, #7
 800f050:	f7ff ffea 	bl	800f028 <SX1276Read>
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800f054:	0424      	lsls	r4, r4, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800f056:	0200      	lsls	r0, r0, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800f058:	4304      	orrs	r4, r0
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 800f05a:	2008      	movs	r0, #8
 800f05c:	f7ff ffe4 	bl	800f028 <SX1276Read>
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 800f060:	4b1a      	ldr	r3, [pc, #104]	; (800f0cc <RxChainCalibration+0x90>)
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800f062:	4304      	orrs	r4, r0
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 800f064:	b2c0      	uxtb	r0, r0
 800f066:	4358      	muls	r0, r3
 800f068:	0a24      	lsrs	r4, r4, #8
 800f06a:	435c      	muls	r4, r3
 800f06c:	3080      	adds	r0, #128	; 0x80
 800f06e:	0a00      	lsrs	r0, r0, #8
    SX1276Write( REG_PACONFIG, 0x00 );
 800f070:	2100      	movs	r1, #0
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 800f072:	1904      	adds	r4, r0, r4
    SX1276Write( REG_PACONFIG, 0x00 );
 800f074:	2009      	movs	r0, #9
 800f076:	f7ff ff8c 	bl	800ef92 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800f07a:	203b      	movs	r0, #59	; 0x3b
 800f07c:	f7ff ffd4 	bl	800f028 <SX1276Read>
 800f080:	2140      	movs	r1, #64	; 0x40
 800f082:	4301      	orrs	r1, r0
 800f084:	b2c9      	uxtb	r1, r1
 800f086:	203b      	movs	r0, #59	; 0x3b
 800f088:	f7ff ff83 	bl	800ef92 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800f08c:	2620      	movs	r6, #32
 800f08e:	203b      	movs	r0, #59	; 0x3b
 800f090:	f7ff ffca 	bl	800f028 <SX1276Read>
 800f094:	4230      	tst	r0, r6
 800f096:	d1fa      	bne.n	800f08e <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
 800f098:	480d      	ldr	r0, [pc, #52]	; (800f0d0 <RxChainCalibration+0x94>)
 800f09a:	f7ff ff83 	bl	800efa4 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800f09e:	203b      	movs	r0, #59	; 0x3b
 800f0a0:	f7ff ffc2 	bl	800f028 <SX1276Read>
 800f0a4:	2140      	movs	r1, #64	; 0x40
 800f0a6:	4301      	orrs	r1, r0
 800f0a8:	b2c9      	uxtb	r1, r1
 800f0aa:	203b      	movs	r0, #59	; 0x3b
 800f0ac:	f7ff ff71 	bl	800ef92 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800f0b0:	2620      	movs	r6, #32
 800f0b2:	203b      	movs	r0, #59	; 0x3b
 800f0b4:	f7ff ffb8 	bl	800f028 <SX1276Read>
 800f0b8:	4230      	tst	r0, r6
 800f0ba:	d1fa      	bne.n	800f0b2 <RxChainCalibration+0x76>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 800f0bc:	0029      	movs	r1, r5
 800f0be:	2009      	movs	r0, #9
 800f0c0:	f7ff ff67 	bl	800ef92 <SX1276Write>
    SX1276SetChannel( initialFreq );
 800f0c4:	0020      	movs	r0, r4
 800f0c6:	f7ff ff6d 	bl	800efa4 <SX1276SetChannel>
}
 800f0ca:	bd70      	pop	{r4, r5, r6, pc}
 800f0cc:	00003d09 	.word	0x00003d09
 800f0d0:	33bca100 	.word	0x33bca100

0800f0d4 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void )
{
    switch( SX1276.Settings.Modem )
 800f0d4:	4b05      	ldr	r3, [pc, #20]	; (800f0ec <SX1276OnDio4Irq+0x18>)
 800f0d6:	795a      	ldrb	r2, [r3, #5]
 800f0d8:	2a00      	cmp	r2, #0
 800f0da:	d105      	bne.n	800f0e8 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 800f0dc:	3330      	adds	r3, #48	; 0x30
 800f0de:	781a      	ldrb	r2, [r3, #0]
 800f0e0:	2a00      	cmp	r2, #0
 800f0e2:	d101      	bne.n	800f0e8 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800f0e4:	3201      	adds	r2, #1
 800f0e6:	701a      	strb	r2, [r3, #0]
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 800f0e8:	4770      	bx	lr
 800f0ea:	46c0      	nop			; (mov r8, r8)
 800f0ec:	2000165c 	.word	0x2000165c

0800f0f0 <SX1276OnDio3Irq>:
{
 800f0f0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 800f0f2:	4b12      	ldr	r3, [pc, #72]	; (800f13c <SX1276OnDio3Irq+0x4c>)
 800f0f4:	795c      	ldrb	r4, [r3, #5]
 800f0f6:	2c01      	cmp	r4, #1
 800f0f8:	d112      	bne.n	800f120 <SX1276OnDio3Irq+0x30>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 800f0fa:	2012      	movs	r0, #18
 800f0fc:	f7ff ff94 	bl	800f028 <SX1276Read>
 800f100:	0005      	movs	r5, r0
 800f102:	4e0f      	ldr	r6, [pc, #60]	; (800f140 <SX1276OnDio3Irq+0x50>)
 800f104:	4025      	ands	r5, r4
 800f106:	4220      	tst	r0, r4
 800f108:	d00b      	beq.n	800f122 <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 800f10a:	2105      	movs	r1, #5
 800f10c:	2012      	movs	r0, #18
 800f10e:	f7ff ff40 	bl	800ef92 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800f112:	6833      	ldr	r3, [r6, #0]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d003      	beq.n	800f120 <SX1276OnDio3Irq+0x30>
 800f118:	699b      	ldr	r3, [r3, #24]
                RadioEvents->CadDone( true );
 800f11a:	0020      	movs	r0, r4
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d10b      	bne.n	800f138 <SX1276OnDio3Irq+0x48>
}
 800f120:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 800f122:	2104      	movs	r1, #4
 800f124:	2012      	movs	r0, #18
 800f126:	f7ff ff34 	bl	800ef92 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800f12a:	6833      	ldr	r3, [r6, #0]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d0f7      	beq.n	800f120 <SX1276OnDio3Irq+0x30>
 800f130:	699b      	ldr	r3, [r3, #24]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d0f4      	beq.n	800f120 <SX1276OnDio3Irq+0x30>
                RadioEvents->CadDone( false );
 800f136:	0028      	movs	r0, r5
 800f138:	4798      	blx	r3
}
 800f13a:	e7f1      	b.n	800f120 <SX1276OnDio3Irq+0x30>
 800f13c:	2000165c 	.word	0x2000165c
 800f140:	20000ef0 	.word	0x20000ef0

0800f144 <SX1276OnDio2Irq>:
{
 800f144:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 800f146:	4c2c      	ldr	r4, [pc, #176]	; (800f1f8 <SX1276OnDio2Irq+0xb4>)
 800f148:	7925      	ldrb	r5, [r4, #4]
 800f14a:	2d01      	cmp	r5, #1
 800f14c:	d002      	beq.n	800f154 <SX1276OnDio2Irq+0x10>
 800f14e:	2d02      	cmp	r5, #2
 800f150:	d048      	beq.n	800f1e4 <SX1276OnDio2Irq+0xa0>
}
 800f152:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 800f154:	7963      	ldrb	r3, [r4, #5]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d017      	beq.n	800f18a <SX1276OnDio2Irq+0x46>
 800f15a:	2b01      	cmp	r3, #1
 800f15c:	d1f9      	bne.n	800f152 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800f15e:	3453      	adds	r4, #83	; 0x53
 800f160:	7823      	ldrb	r3, [r4, #0]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800f162:	2102      	movs	r1, #2
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800f164:	2b00      	cmp	r3, #0
 800f166:	d0f4      	beq.n	800f152 <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800f168:	2012      	movs	r0, #18
 800f16a:	f7ff ff12 	bl	800ef92 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800f16e:	4b23      	ldr	r3, [pc, #140]	; (800f1fc <SX1276OnDio2Irq+0xb8>)
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d0ed      	beq.n	800f152 <SX1276OnDio2Irq+0xe>
 800f176:	695c      	ldr	r4, [r3, #20]
 800f178:	2c00      	cmp	r4, #0
 800f17a:	d0ea      	beq.n	800f152 <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800f17c:	201c      	movs	r0, #28
 800f17e:	f7ff ff53 	bl	800f028 <SX1276Read>
 800f182:	233f      	movs	r3, #63	; 0x3f
 800f184:	4018      	ands	r0, r3
 800f186:	47a0      	blx	r4
}
 800f188:	e7e3      	b.n	800f152 <SX1276OnDio2Irq+0xe>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800f18a:	0023      	movs	r3, r4
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 800f18c:	0026      	movs	r6, r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800f18e:	3330      	adds	r3, #48	; 0x30
 800f190:	701d      	strb	r5, [r3, #0]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 800f192:	3631      	adds	r6, #49	; 0x31
 800f194:	7833      	ldrb	r3, [r6, #0]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d1db      	bne.n	800f152 <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 800f19a:	4819      	ldr	r0, [pc, #100]	; (800f200 <SX1276OnDio2Irq+0xbc>)
 800f19c:	f001 fd00 	bl	8010ba0 <UTIL_TIMER_Stop>
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800f1a0:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 800f1a2:	7035      	strb	r5, [r6, #0]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800f1a4:	f7ff ff40 	bl	800f028 <SX1276Read>
 800f1a8:	0023      	movs	r3, r4
 800f1aa:	0840      	lsrs	r0, r0, #1
 800f1ac:	3332      	adds	r3, #50	; 0x32
 800f1ae:	4240      	negs	r0, r0
 800f1b0:	7018      	strb	r0, [r3, #0]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800f1b2:	201b      	movs	r0, #27
 800f1b4:	f7ff ff38 	bl	800f028 <SX1276Read>
 800f1b8:	0005      	movs	r5, r0
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 800f1ba:	201c      	movs	r0, #28
 800f1bc:	f7ff ff34 	bl	800f028 <SX1276Read>
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800f1c0:	022d      	lsls	r5, r5, #8
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 800f1c2:	4b10      	ldr	r3, [pc, #64]	; (800f204 <SX1276OnDio2Irq+0xc0>)
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800f1c4:	4305      	orrs	r5, r0
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 800f1c6:	b2c0      	uxtb	r0, r0
 800f1c8:	4358      	muls	r0, r3
 800f1ca:	0a2d      	lsrs	r5, r5, #8
 800f1cc:	435d      	muls	r5, r3
 800f1ce:	3080      	adds	r0, #128	; 0x80
 800f1d0:	0a00      	lsrs	r0, r0, #8
 800f1d2:	1940      	adds	r0, r0, r5
 800f1d4:	6360      	str	r0, [r4, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 800f1d6:	200c      	movs	r0, #12
 800f1d8:	f7ff ff26 	bl	800f028 <SX1276Read>
 800f1dc:	3438      	adds	r4, #56	; 0x38
 800f1de:	0940      	lsrs	r0, r0, #5
 800f1e0:	7020      	strb	r0, [r4, #0]
 800f1e2:	e7b6      	b.n	800f152 <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 800f1e4:	7963      	ldrb	r3, [r4, #5]
 800f1e6:	2b01      	cmp	r3, #1
 800f1e8:	d1b3      	bne.n	800f152 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800f1ea:	3453      	adds	r4, #83	; 0x53
 800f1ec:	7823      	ldrb	r3, [r4, #0]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d0af      	beq.n	800f152 <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800f1f2:	0029      	movs	r1, r5
 800f1f4:	e7b8      	b.n	800f168 <SX1276OnDio2Irq+0x24>
 800f1f6:	46c0      	nop			; (mov r8, r8)
 800f1f8:	2000165c 	.word	0x2000165c
 800f1fc:	20000ef0 	.word	0x20000ef0
 800f200:	20001644 	.word	0x20001644
 800f204:	00003d09 	.word	0x00003d09

0800f208 <SX1276SetOpMode.part.0>:
static void SX1276SetOpMode( uint8_t opMode )
 800f208:	b510      	push	{r4, lr}
      Sx_Board_SetXO( SET ); 
 800f20a:	2001      	movs	r0, #1
 800f20c:	f7f5 fa5a 	bl	80046c4 <CMWX1ZZABZ0XX_RADIO_SetXO>
      Sx_Board_SetAntSw( RFSW_RX );
 800f210:	2001      	movs	r0, #1
 800f212:	f7f5 fbcf 	bl	80049b4 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800f216:	2001      	movs	r0, #1
 800f218:	f7ff ff06 	bl	800f028 <SX1276Read>
 800f21c:	2307      	movs	r3, #7
 800f21e:	2105      	movs	r1, #5
 800f220:	4398      	bics	r0, r3
 800f222:	4301      	orrs	r1, r0
 800f224:	b2c9      	uxtb	r1, r1
 800f226:	2001      	movs	r0, #1
 800f228:	f7ff feb3 	bl	800ef92 <SX1276Write>
}
 800f22c:	bd10      	pop	{r4, pc}

0800f22e <SX1276SetOpMode>:
{
 800f22e:	b570      	push	{r4, r5, r6, lr}
 800f230:	1e04      	subs	r4, r0, #0
    if( opMode == RF_OPMODE_SLEEP )
 800f232:	d10e      	bne.n	800f252 <SX1276SetOpMode+0x24>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800f234:	2001      	movs	r0, #1
 800f236:	f7ff fef7 	bl	800f028 <SX1276Read>
 800f23a:	21f8      	movs	r1, #248	; 0xf8
 800f23c:	4001      	ands	r1, r0
 800f23e:	2001      	movs	r0, #1
 800f240:	f7ff fea7 	bl	800ef92 <SX1276Write>
      Sx_Board_SetAntSw( RFSW_OFF );
 800f244:	0020      	movs	r0, r4
 800f246:	f7f5 fbb5 	bl	80049b4 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      Sx_Board_SetXO( RESET ); 
 800f24a:	0020      	movs	r0, r4
 800f24c:	f7f5 fa3a 	bl	80046c4 <CMWX1ZZABZ0XX_RADIO_SetXO>
}
 800f250:	bd70      	pop	{r4, r5, r6, pc}
    else if ( opMode == RF_OPMODE_RECEIVER )
 800f252:	2805      	cmp	r0, #5
 800f254:	d102      	bne.n	800f25c <SX1276SetOpMode+0x2e>
 800f256:	f7ff ffd7 	bl	800f208 <SX1276SetOpMode.part.0>
 800f25a:	e7f9      	b.n	800f250 <SX1276SetOpMode+0x22>
      uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 800f25c:	2009      	movs	r0, #9
 800f25e:	f7ff fee3 	bl	800f028 <SX1276Read>
 800f262:	0005      	movs	r5, r0
      Sx_Board_SetXO( SET ); 
 800f264:	2001      	movs	r0, #1
 800f266:	f7f5 fa2d 	bl	80046c4 <CMWX1ZZABZ0XX_RADIO_SetXO>
        Sx_Board_SetAntSw( RFSW_RFO_HP );
 800f26a:	2003      	movs	r0, #3
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800f26c:	062b      	lsls	r3, r5, #24
 800f26e:	d400      	bmi.n	800f272 <SX1276SetOpMode+0x44>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 800f270:	2002      	movs	r0, #2
 800f272:	f7f5 fb9f 	bl	80049b4 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800f276:	2001      	movs	r0, #1
 800f278:	f7ff fed6 	bl	800f028 <SX1276Read>
 800f27c:	2307      	movs	r3, #7
 800f27e:	0001      	movs	r1, r0
 800f280:	4399      	bics	r1, r3
 800f282:	4321      	orrs	r1, r4
 800f284:	2001      	movs	r0, #1
 800f286:	b2c9      	uxtb	r1, r1
 800f288:	f7ff fe83 	bl	800ef92 <SX1276Write>
}
 800f28c:	e7e0      	b.n	800f250 <SX1276SetOpMode+0x22>
	...

0800f290 <SX1276SetSleep>:
{
 800f290:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 800f292:	4809      	ldr	r0, [pc, #36]	; (800f2b8 <SX1276SetSleep+0x28>)
 800f294:	f001 fc84 	bl	8010ba0 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 800f298:	4808      	ldr	r0, [pc, #32]	; (800f2bc <SX1276SetSleep+0x2c>)
 800f29a:	f001 fc81 	bl	8010ba0 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 800f29e:	4808      	ldr	r0, [pc, #32]	; (800f2c0 <SX1276SetSleep+0x30>)
 800f2a0:	f001 fc7e 	bl	8010ba0 <UTIL_TIMER_Stop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800f2a4:	2000      	movs	r0, #0
 800f2a6:	f7ff ffc2 	bl	800f22e <SX1276SetOpMode>
    Sx_Board_SetXO( RESET );
 800f2aa:	2000      	movs	r0, #0
 800f2ac:	f7f5 fa0a 	bl	80046c4 <CMWX1ZZABZ0XX_RADIO_SetXO>
    SX1276.Settings.State = RF_IDLE;
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	4b04      	ldr	r3, [pc, #16]	; (800f2c4 <SX1276SetSleep+0x34>)
 800f2b4:	711a      	strb	r2, [r3, #4]
}
 800f2b6:	bd10      	pop	{r4, pc}
 800f2b8:	200016c4 	.word	0x200016c4
 800f2bc:	2000162c 	.word	0x2000162c
 800f2c0:	20001644 	.word	0x20001644
 800f2c4:	2000165c 	.word	0x2000165c

0800f2c8 <SX1276SetStby>:
{
 800f2c8:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 800f2ca:	4808      	ldr	r0, [pc, #32]	; (800f2ec <SX1276SetStby+0x24>)
 800f2cc:	f001 fc68 	bl	8010ba0 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 800f2d0:	4807      	ldr	r0, [pc, #28]	; (800f2f0 <SX1276SetStby+0x28>)
 800f2d2:	f001 fc65 	bl	8010ba0 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 800f2d6:	4807      	ldr	r0, [pc, #28]	; (800f2f4 <SX1276SetStby+0x2c>)
 800f2d8:	f001 fc62 	bl	8010ba0 <UTIL_TIMER_Stop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 800f2dc:	2001      	movs	r0, #1
 800f2de:	f7ff ffa6 	bl	800f22e <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	4b04      	ldr	r3, [pc, #16]	; (800f2f8 <SX1276SetStby+0x30>)
 800f2e6:	711a      	strb	r2, [r3, #4]
}
 800f2e8:	bd10      	pop	{r4, pc}
 800f2ea:	46c0      	nop			; (mov r8, r8)
 800f2ec:	200016c4 	.word	0x200016c4
 800f2f0:	2000162c 	.word	0x2000162c
 800f2f4:	20001644 	.word	0x20001644
 800f2f8:	2000165c 	.word	0x2000165c

0800f2fc <SX1276SetRx>:
{
 800f2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2fe:	0006      	movs	r6, r0
    TimerStop( &TxTimeoutTimer );
 800f300:	4878      	ldr	r0, [pc, #480]	; (800f4e4 <SX1276SetRx+0x1e8>)
 800f302:	f001 fc4d 	bl	8010ba0 <UTIL_TIMER_Stop>
    switch( SX1276.Settings.Modem )
 800f306:	4c78      	ldr	r4, [pc, #480]	; (800f4e8 <SX1276SetRx+0x1ec>)
 800f308:	7965      	ldrb	r5, [r4, #5]
 800f30a:	2d00      	cmp	r5, #0
 800f30c:	d02f      	beq.n	800f36e <SX1276SetRx+0x72>
 800f30e:	2700      	movs	r7, #0
 800f310:	2d01      	cmp	r5, #1
 800f312:	d151      	bne.n	800f3b8 <SX1276SetRx+0xbc>
            if( SX1276.Settings.LoRa.IqInverted == true )
 800f314:	0023      	movs	r3, r4
 800f316:	3355      	adds	r3, #85	; 0x55
 800f318:	781b      	ldrb	r3, [r3, #0]
 800f31a:	2741      	movs	r7, #65	; 0x41
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800f31c:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d100      	bne.n	800f324 <SX1276SetRx+0x28>
 800f322:	e06c      	b.n	800f3fe <SX1276SetRx+0x102>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800f324:	f7ff fe80 	bl	800f028 <SX1276Read>
 800f328:	4338      	orrs	r0, r7
 800f32a:	b2c1      	uxtb	r1, r0
 800f32c:	2033      	movs	r0, #51	; 0x33
 800f32e:	f7ff fe30 	bl	800ef92 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800f332:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800f334:	203b      	movs	r0, #59	; 0x3b
 800f336:	f7ff fe2c 	bl	800ef92 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 800f33a:	6c63      	ldr	r3, [r4, #68]	; 0x44
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 800f33c:	2031      	movs	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 800f33e:	2b08      	cmp	r3, #8
 800f340:	d900      	bls.n	800f344 <SX1276SetRx+0x48>
 800f342:	e0b5      	b.n	800f4b0 <SX1276SetRx+0x1b4>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 800f344:	f7ff fe70 	bl	800f028 <SX1276Read>
 800f348:	217f      	movs	r1, #127	; 0x7f
 800f34a:	4001      	ands	r1, r0
 800f34c:	2031      	movs	r0, #49	; 0x31
 800f34e:	f7ff fe20 	bl	800ef92 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 800f352:	2030      	movs	r0, #48	; 0x30
 800f354:	2100      	movs	r1, #0
 800f356:	f7ff fe1c 	bl	800ef92 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 800f35a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800f35c:	2808      	cmp	r0, #8
 800f35e:	d862      	bhi.n	800f426 <SX1276SetRx+0x12a>
 800f360:	f7f0 fee4 	bl	800012c <__gnu_thumb1_case_uqi>
 800f364:	8c857e58 	.word	0x8c857e58
 800f368:	a1a19a93 	.word	0xa1a19a93
 800f36c:	a1          	.byte	0xa1
 800f36d:	00          	.byte	0x00
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800f36e:	1de3      	adds	r3, r4, #7
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800f370:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800f372:	7fdf      	ldrb	r7, [r3, #31]
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800f374:	f7ff fe58 	bl	800f028 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 800f378:	2103      	movs	r1, #3
 800f37a:	4008      	ands	r0, r1
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800f37c:	3109      	adds	r1, #9
 800f37e:	4301      	orrs	r1, r0
 800f380:	2040      	movs	r0, #64	; 0x40
 800f382:	f7ff fe06 	bl	800ef92 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800f386:	2041      	movs	r0, #65	; 0x41
 800f388:	f7ff fe4e 	bl	800f028 <SX1276Read>
 800f38c:	213f      	movs	r1, #63	; 0x3f
 800f38e:	4249      	negs	r1, r1
 800f390:	4301      	orrs	r1, r0
 800f392:	b2c9      	uxtb	r1, r1
 800f394:	2041      	movs	r0, #65	; 0x41
 800f396:	f7ff fdfc 	bl	800ef92 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800f39a:	2035      	movs	r0, #53	; 0x35
 800f39c:	f7ff fe44 	bl	800f028 <SX1276Read>
 800f3a0:	233f      	movs	r3, #63	; 0x3f
 800f3a2:	4018      	ands	r0, r3
 800f3a4:	0023      	movs	r3, r4
 800f3a6:	333e      	adds	r3, #62	; 0x3e
 800f3a8:	7018      	strb	r0, [r3, #0]
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 800f3aa:	211e      	movs	r1, #30
 800f3ac:	200d      	movs	r0, #13
 800f3ae:	f7ff fdf0 	bl	800ef92 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800f3b2:	8625      	strh	r5, [r4, #48]	; 0x30
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800f3b4:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 800f3b6:	8765      	strh	r5, [r4, #58]	; 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 800f3b8:	2280      	movs	r2, #128	; 0x80
 800f3ba:	2100      	movs	r1, #0
 800f3bc:	484b      	ldr	r0, [pc, #300]	; (800f4ec <SX1276SetRx+0x1f0>)
 800f3be:	0052      	lsls	r2, r2, #1
 800f3c0:	f001 fe38 	bl	8011034 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 800f3c4:	2301      	movs	r3, #1
 800f3c6:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 800f3c8:	2e00      	cmp	r6, #0
 800f3ca:	d007      	beq.n	800f3dc <SX1276SetRx+0xe0>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800f3cc:	4d48      	ldr	r5, [pc, #288]	; (800f4f0 <SX1276SetRx+0x1f4>)
 800f3ce:	0031      	movs	r1, r6
 800f3d0:	0028      	movs	r0, r5
 800f3d2:	f001 fc7b 	bl	8010ccc <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800f3d6:	0028      	movs	r0, r5
 800f3d8:	f001 fc36 	bl	8010c48 <UTIL_TIMER_Start>
    if( SX1276.Settings.Modem == MODEM_FSK )
 800f3dc:	7963      	ldrb	r3, [r4, #5]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d000      	beq.n	800f3e4 <SX1276SetRx+0xe8>
 800f3e2:	e076      	b.n	800f4d2 <SX1276SetRx+0x1d6>
    else if ( opMode == RF_OPMODE_RECEIVER )
 800f3e4:	f7ff ff10 	bl	800f208 <SX1276SetOpMode.part.0>
        if( rxContinuous == false )
 800f3e8:	2f00      	cmp	r7, #0
 800f3ea:	d107      	bne.n	800f3fc <SX1276SetRx+0x100>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 800f3ec:	4d41      	ldr	r5, [pc, #260]	; (800f4f4 <SX1276SetRx+0x1f8>)
 800f3ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f3f0:	0028      	movs	r0, r5
 800f3f2:	f001 fc6b 	bl	8010ccc <UTIL_TIMER_SetPeriod>
            TimerStart( &RxTimeoutSyncWord );
 800f3f6:	0028      	movs	r0, r5
 800f3f8:	f001 fc26 	bl	8010c48 <UTIL_TIMER_Start>
}
 800f3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800f3fe:	f7ff fe13 	bl	800f028 <SX1276Read>
 800f402:	0001      	movs	r1, r0
 800f404:	43b9      	bics	r1, r7
 800f406:	4329      	orrs	r1, r5
 800f408:	b2c9      	uxtb	r1, r1
 800f40a:	2033      	movs	r0, #51	; 0x33
 800f40c:	f7ff fdc1 	bl	800ef92 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800f410:	211d      	movs	r1, #29
 800f412:	e78f      	b.n	800f334 <SX1276SetRx+0x38>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 800f414:	2148      	movs	r1, #72	; 0x48
 800f416:	202f      	movs	r0, #47	; 0x2f
 800f418:	f7ff fdbb 	bl	800ef92 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 800f41c:	68a3      	ldr	r3, [r4, #8]
 800f41e:	4a36      	ldr	r2, [pc, #216]	; (800f4f8 <SX1276SetRx+0x1fc>)
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 800f420:	1898      	adds	r0, r3, r2
 800f422:	f7ff fdbf 	bl	800efa4 <SX1276SetChannel>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 800f426:	0023      	movs	r3, r4
 800f428:	3356      	adds	r3, #86	; 0x56
 800f42a:	781f      	ldrb	r7, [r3, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800f42c:	0023      	movs	r3, r4
 800f42e:	3353      	adds	r3, #83	; 0x53
 800f430:	781b      	ldrb	r3, [r3, #0]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d044      	beq.n	800f4c0 <SX1276SetRx+0x1c4>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800f436:	211d      	movs	r1, #29
 800f438:	2011      	movs	r0, #17
 800f43a:	f7ff fdaa 	bl	800ef92 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 800f43e:	2040      	movs	r0, #64	; 0x40
 800f440:	f7ff fdf2 	bl	800f028 <SX1276Read>
 800f444:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800f446:	4001      	ands	r1, r0
 800f448:	2040      	movs	r0, #64	; 0x40
 800f44a:	f7ff fda2 	bl	800ef92 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 800f44e:	2100      	movs	r1, #0
 800f450:	200f      	movs	r0, #15
 800f452:	f7ff fd9e 	bl	800ef92 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800f456:	2100      	movs	r1, #0
 800f458:	200d      	movs	r0, #13
 800f45a:	f7ff fd9a 	bl	800ef92 <SX1276Write>
        break;
 800f45e:	e7ab      	b.n	800f3b8 <SX1276SetRx+0xbc>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800f460:	2144      	movs	r1, #68	; 0x44
 800f462:	202f      	movs	r0, #47	; 0x2f
 800f464:	f7ff fd95 	bl	800ef92 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 800f468:	68a3      	ldr	r3, [r4, #8]
 800f46a:	4a24      	ldr	r2, [pc, #144]	; (800f4fc <SX1276SetRx+0x200>)
 800f46c:	e7d8      	b.n	800f420 <SX1276SetRx+0x124>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800f46e:	2144      	movs	r1, #68	; 0x44
 800f470:	202f      	movs	r0, #47	; 0x2f
 800f472:	f7ff fd8e 	bl	800ef92 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 800f476:	68a3      	ldr	r3, [r4, #8]
 800f478:	4a21      	ldr	r2, [pc, #132]	; (800f500 <SX1276SetRx+0x204>)
 800f47a:	e7d1      	b.n	800f420 <SX1276SetRx+0x124>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800f47c:	2144      	movs	r1, #68	; 0x44
 800f47e:	202f      	movs	r0, #47	; 0x2f
 800f480:	f7ff fd87 	bl	800ef92 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 800f484:	68a3      	ldr	r3, [r4, #8]
 800f486:	4a1f      	ldr	r2, [pc, #124]	; (800f504 <SX1276SetRx+0x208>)
 800f488:	e7ca      	b.n	800f420 <SX1276SetRx+0x124>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800f48a:	2144      	movs	r1, #68	; 0x44
 800f48c:	202f      	movs	r0, #47	; 0x2f
 800f48e:	f7ff fd80 	bl	800ef92 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 800f492:	68a3      	ldr	r3, [r4, #8]
 800f494:	4a1c      	ldr	r2, [pc, #112]	; (800f508 <SX1276SetRx+0x20c>)
 800f496:	e7c3      	b.n	800f420 <SX1276SetRx+0x124>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800f498:	2144      	movs	r1, #68	; 0x44
 800f49a:	202f      	movs	r0, #47	; 0x2f
 800f49c:	f7ff fd79 	bl	800ef92 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 800f4a0:	68a3      	ldr	r3, [r4, #8]
 800f4a2:	4a1a      	ldr	r2, [pc, #104]	; (800f50c <SX1276SetRx+0x210>)
 800f4a4:	e7bc      	b.n	800f420 <SX1276SetRx+0x124>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 800f4a6:	2140      	movs	r1, #64	; 0x40
 800f4a8:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 800f4aa:	f7ff fd72 	bl	800ef92 <SX1276Write>
 800f4ae:	e7ba      	b.n	800f426 <SX1276SetRx+0x12a>
 800f4b0:	f7ff fdba 	bl	800f028 <SX1276Read>
 800f4b4:	2180      	movs	r1, #128	; 0x80
 800f4b6:	4249      	negs	r1, r1
 800f4b8:	4301      	orrs	r1, r0
 800f4ba:	b2c9      	uxtb	r1, r1
 800f4bc:	2031      	movs	r0, #49	; 0x31
 800f4be:	e7f4      	b.n	800f4aa <SX1276SetRx+0x1ae>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800f4c0:	211f      	movs	r1, #31
 800f4c2:	2011      	movs	r0, #17
 800f4c4:	f7ff fd65 	bl	800ef92 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800f4c8:	2040      	movs	r0, #64	; 0x40
 800f4ca:	f7ff fdad 	bl	800f028 <SX1276Read>
 800f4ce:	213f      	movs	r1, #63	; 0x3f
 800f4d0:	e7b9      	b.n	800f446 <SX1276SetRx+0x14a>
        if( rxContinuous == true )
 800f4d2:	2f00      	cmp	r7, #0
 800f4d4:	d002      	beq.n	800f4dc <SX1276SetRx+0x1e0>
    else if ( opMode == RF_OPMODE_RECEIVER )
 800f4d6:	f7ff fe97 	bl	800f208 <SX1276SetOpMode.part.0>
}
 800f4da:	e78f      	b.n	800f3fc <SX1276SetRx+0x100>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 800f4dc:	2006      	movs	r0, #6
 800f4de:	f7ff fea6 	bl	800f22e <SX1276SetOpMode>
}
 800f4e2:	e78b      	b.n	800f3fc <SX1276SetRx+0x100>
 800f4e4:	2000162c 	.word	0x2000162c
 800f4e8:	2000165c 	.word	0x2000165c
 800f4ec:	20000ef4 	.word	0x20000ef4
 800f4f0:	200016c4 	.word	0x200016c4
 800f4f4:	20001644 	.word	0x20001644
 800f4f8:	00001e82 	.word	0x00001e82
 800f4fc:	000028b4 	.word	0x000028b4
 800f500:	00003d04 	.word	0x00003d04
 800f504:	0000515e 	.word	0x0000515e
 800f508:	00007a12 	.word	0x00007a12
 800f50c:	0000a2c6 	.word	0x0000a2c6

0800f510 <SX1276StartCad>:
{
 800f510:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 800f512:	4c0b      	ldr	r4, [pc, #44]	; (800f540 <SX1276StartCad+0x30>)
 800f514:	7963      	ldrb	r3, [r4, #5]
 800f516:	2b01      	cmp	r3, #1
 800f518:	d110      	bne.n	800f53c <SX1276StartCad+0x2c>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800f51a:	21fa      	movs	r1, #250	; 0xfa
 800f51c:	2011      	movs	r0, #17
 800f51e:	f7ff fd38 	bl	800ef92 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 800f522:	2040      	movs	r0, #64	; 0x40
 800f524:	f7ff fd80 	bl	800f028 <SX1276Read>
 800f528:	2503      	movs	r5, #3
 800f52a:	43a8      	bics	r0, r5
 800f52c:	b2c1      	uxtb	r1, r0
 800f52e:	2040      	movs	r0, #64	; 0x40
 800f530:	f7ff fd2f 	bl	800ef92 <SX1276Write>
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 800f534:	2007      	movs	r0, #7
            SX1276.Settings.State = RF_CAD;
 800f536:	7125      	strb	r5, [r4, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 800f538:	f7ff fe79 	bl	800f22e <SX1276SetOpMode>
}
 800f53c:	bd70      	pop	{r4, r5, r6, pc}
 800f53e:	46c0      	nop			; (mov r8, r8)
 800f540:	2000165c 	.word	0x2000165c

0800f544 <SX1276ReadRssi>:
{
 800f544:	b510      	push	{r4, lr}
    switch( modem )
 800f546:	2800      	cmp	r0, #0
 800f548:	d004      	beq.n	800f554 <SX1276ReadRssi+0x10>
 800f54a:	2801      	cmp	r0, #1
 800f54c:	d00a      	beq.n	800f564 <SX1276ReadRssi+0x20>
 800f54e:	2001      	movs	r0, #1
 800f550:	4240      	negs	r0, r0
}
 800f552:	bd10      	pop	{r4, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800f554:	2011      	movs	r0, #17
 800f556:	f7ff fd67 	bl	800f028 <SX1276Read>
 800f55a:	0840      	lsrs	r0, r0, #1
 800f55c:	b2c0      	uxtb	r0, r0
 800f55e:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800f560:	b200      	sxth	r0, r0
 800f562:	e7f6      	b.n	800f552 <SX1276ReadRssi+0xe>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800f564:	4a06      	ldr	r2, [pc, #24]	; (800f580 <SX1276ReadRssi+0x3c>)
 800f566:	4b07      	ldr	r3, [pc, #28]	; (800f584 <SX1276ReadRssi+0x40>)
 800f568:	6892      	ldr	r2, [r2, #8]
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800f56a:	201b      	movs	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800f56c:	429a      	cmp	r2, r3
 800f56e:	d903      	bls.n	800f578 <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800f570:	f7ff fd5a 	bl	800f028 <SX1276Read>
 800f574:	389d      	subs	r0, #157	; 0x9d
 800f576:	e7f3      	b.n	800f560 <SX1276ReadRssi+0x1c>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800f578:	f7ff fd56 	bl	800f028 <SX1276Read>
 800f57c:	38a4      	subs	r0, #164	; 0xa4
 800f57e:	e7ef      	b.n	800f560 <SX1276ReadRssi+0x1c>
 800f580:	2000165c 	.word	0x2000165c
 800f584:	1f4add40 	.word	0x1f4add40

0800f588 <SX1276SetModem>:
{
 800f588:	b510      	push	{r4, lr}
 800f58a:	0004      	movs	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 800f58c:	2001      	movs	r0, #1
 800f58e:	f7ff fd4b 	bl	800f028 <SX1276Read>
 800f592:	b2c0      	uxtb	r0, r0
 800f594:	4b17      	ldr	r3, [pc, #92]	; (800f5f4 <SX1276SetModem+0x6c>)
        SX1276.Settings.Modem = MODEM_LORA;
 800f596:	09c0      	lsrs	r0, r0, #7
    if( SX1276.Settings.Modem == modem )
 800f598:	42a0      	cmp	r0, r4
 800f59a:	d101      	bne.n	800f5a0 <SX1276SetModem+0x18>
 800f59c:	7158      	strb	r0, [r3, #5]
}
 800f59e:	bd10      	pop	{r4, pc}
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800f5a0:	2000      	movs	r0, #0
    SX1276.Settings.Modem = modem;
 800f5a2:	715c      	strb	r4, [r3, #5]
    switch( SX1276.Settings.Modem )
 800f5a4:	2c01      	cmp	r4, #1
 800f5a6:	d012      	beq.n	800f5ce <SX1276SetModem+0x46>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800f5a8:	f7ff fe41 	bl	800f22e <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 800f5ac:	2001      	movs	r0, #1
 800f5ae:	f7ff fd3b 	bl	800f028 <SX1276Read>
 800f5b2:	217f      	movs	r1, #127	; 0x7f
 800f5b4:	4001      	ands	r1, r0
 800f5b6:	2001      	movs	r0, #1
 800f5b8:	f7ff fceb 	bl	800ef92 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800f5bc:	2100      	movs	r1, #0
 800f5be:	2040      	movs	r0, #64	; 0x40
 800f5c0:	f7ff fce7 	bl	800ef92 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 800f5c4:	2130      	movs	r1, #48	; 0x30
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 800f5c6:	2041      	movs	r0, #65	; 0x41
 800f5c8:	f7ff fce3 	bl	800ef92 <SX1276Write>
        break;
 800f5cc:	e7e7      	b.n	800f59e <SX1276SetModem+0x16>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800f5ce:	f7ff fe2e 	bl	800f22e <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 800f5d2:	0020      	movs	r0, r4
 800f5d4:	f7ff fd28 	bl	800f028 <SX1276Read>
 800f5d8:	2180      	movs	r1, #128	; 0x80
 800f5da:	4249      	negs	r1, r1
 800f5dc:	4301      	orrs	r1, r0
 800f5de:	b2c9      	uxtb	r1, r1
 800f5e0:	0020      	movs	r0, r4
 800f5e2:	f7ff fcd6 	bl	800ef92 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800f5e6:	2100      	movs	r1, #0
 800f5e8:	2040      	movs	r0, #64	; 0x40
 800f5ea:	f7ff fcd2 	bl	800ef92 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 800f5ee:	2100      	movs	r1, #0
 800f5f0:	e7e9      	b.n	800f5c6 <SX1276SetModem+0x3e>
 800f5f2:	46c0      	nop			; (mov r8, r8)
 800f5f4:	2000165c 	.word	0x2000165c

0800f5f8 <SX1276Init>:
{
 800f5f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800f5fa:	2400      	movs	r4, #0
 800f5fc:	2101      	movs	r1, #1
 800f5fe:	4d1f      	ldr	r5, [pc, #124]	; (800f67c <SX1276Init+0x84>)
    RadioEvents = events;
 800f600:	4b1f      	ldr	r3, [pc, #124]	; (800f680 <SX1276Init+0x88>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800f602:	0022      	movs	r2, r4
    RadioEvents = events;
 800f604:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800f606:	4249      	negs	r1, r1
 800f608:	002b      	movs	r3, r5
 800f60a:	9400      	str	r4, [sp, #0]
 800f60c:	481d      	ldr	r0, [pc, #116]	; (800f684 <SX1276Init+0x8c>)
 800f60e:	f001 fa67 	bl	8010ae0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 800f612:	2101      	movs	r1, #1
 800f614:	002b      	movs	r3, r5
 800f616:	0022      	movs	r2, r4
 800f618:	9400      	str	r4, [sp, #0]
 800f61a:	4249      	negs	r1, r1
 800f61c:	481a      	ldr	r0, [pc, #104]	; (800f688 <SX1276Init+0x90>)
 800f61e:	f001 fa5f 	bl	8010ae0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 800f622:	2101      	movs	r1, #1
 800f624:	002b      	movs	r3, r5
 800f626:	0022      	movs	r2, r4
 800f628:	4249      	negs	r1, r1
 800f62a:	9400      	str	r4, [sp, #0]
 800f62c:	4817      	ldr	r0, [pc, #92]	; (800f68c <SX1276Init+0x94>)
 800f62e:	f001 fa57 	bl	8010ae0 <UTIL_TIMER_Create>
    Sx_Board_SetXO( SET );
 800f632:	2001      	movs	r0, #1
 800f634:	f7f5 f846 	bl	80046c4 <CMWX1ZZABZ0XX_RADIO_SetXO>
    Sx_Board_Reset();
 800f638:	f7f5 f9e4 	bl	8004a04 <CMWX1ZZABZ0XX_RADIO_Reset>
    RxChainCalibration( );
 800f63c:	f7ff fcfe 	bl	800f03c <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800f640:	0020      	movs	r0, r4
 800f642:	f7ff fdf4 	bl	800f22e <SX1276SetOpMode>
    Sx_Board_IoIrqInit( DioIrq );
 800f646:	4812      	ldr	r0, [pc, #72]	; (800f690 <SX1276Init+0x98>)
 800f648:	f7f5 f984 	bl	8004954 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800f64c:	4d11      	ldr	r5, [pc, #68]	; (800f694 <SX1276Init+0x9c>)
 800f64e:	002c      	movs	r4, r5
 800f650:	353c      	adds	r5, #60	; 0x3c
 800f652:	340c      	adds	r4, #12
        SX1276SetModem( RadioRegsInit[i].Modem );
 800f654:	7820      	ldrb	r0, [r4, #0]
 800f656:	f7ff ff97 	bl	800f588 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800f65a:	78a1      	ldrb	r1, [r4, #2]
 800f65c:	7860      	ldrb	r0, [r4, #1]
 800f65e:	3403      	adds	r4, #3
 800f660:	f7ff fc97 	bl	800ef92 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800f664:	42ac      	cmp	r4, r5
 800f666:	d1f5      	bne.n	800f654 <SX1276Init+0x5c>
    SX1276SetModem( MODEM_FSK );
 800f668:	2000      	movs	r0, #0
 800f66a:	f7ff ff8d 	bl	800f588 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 800f66e:	2200      	movs	r2, #0
 800f670:	4b09      	ldr	r3, [pc, #36]	; (800f698 <SX1276Init+0xa0>)
 800f672:	711a      	strb	r2, [r3, #4]
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 800f674:	f7f5 f824 	bl	80046c0 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 800f678:	3002      	adds	r0, #2
}
 800f67a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800f67c:	0800fe45 	.word	0x0800fe45
 800f680:	20000ef0 	.word	0x20000ef0
 800f684:	2000162c 	.word	0x2000162c
 800f688:	200016c4 	.word	0x200016c4
 800f68c:	20001644 	.word	0x20001644
 800f690:	2000017c 	.word	0x2000017c
 800f694:	080116f4 	.word	0x080116f4
 800f698:	2000165c 	.word	0x2000165c

0800f69c <SX1276IsChannelFree>:
{
 800f69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f69e:	0007      	movs	r7, r0
 800f6a0:	000c      	movs	r4, r1
 800f6a2:	0016      	movs	r6, r2
 800f6a4:	001d      	movs	r5, r3
    SX1276SetSleep( );
 800f6a6:	f7ff fdf3 	bl	800f290 <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
 800f6aa:	2000      	movs	r0, #0
 800f6ac:	f7ff ff6c 	bl	800f588 <SX1276SetModem>
    SX1276SetChannel( freq );
 800f6b0:	0038      	movs	r0, r7
 800f6b2:	f7ff fc77 	bl	800efa4 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800f6b6:	0020      	movs	r0, r4
 800f6b8:	f7ff fbc2 	bl	800ee40 <GetFskBandwidthRegValue>
 800f6bc:	0004      	movs	r4, r0
 800f6be:	0001      	movs	r1, r0
 800f6c0:	2012      	movs	r0, #18
 800f6c2:	f7ff fc66 	bl	800ef92 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800f6c6:	0021      	movs	r1, r4
 800f6c8:	2013      	movs	r0, #19
 800f6ca:	f7ff fc62 	bl	800ef92 <SX1276Write>
    else if ( opMode == RF_OPMODE_RECEIVER )
 800f6ce:	f7ff fd9b 	bl	800f208 <SX1276SetOpMode.part.0>
    RADIO_DELAY_MS( 1 );
 800f6d2:	2001      	movs	r0, #1
 800f6d4:	f7f4 fd64 	bl	80041a0 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800f6d8:	f001 fa1e 	bl	8010b18 <UTIL_TIMER_GetCurrentTime>
 800f6dc:	0004      	movs	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800f6de:	0020      	movs	r0, r4
 800f6e0:	f001 fa24 	bl	8010b2c <UTIL_TIMER_GetElapsedTime>
 800f6e4:	42a8      	cmp	r0, r5
 800f6e6:	d304      	bcc.n	800f6f2 <SX1276IsChannelFree+0x56>
    bool status = true;
 800f6e8:	2401      	movs	r4, #1
    SX1276SetSleep( );
 800f6ea:	f7ff fdd1 	bl	800f290 <SX1276SetSleep>
}
 800f6ee:	0020      	movs	r0, r4
 800f6f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( MODEM_FSK );
 800f6f2:	2000      	movs	r0, #0
 800f6f4:	f7ff ff26 	bl	800f544 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 800f6f8:	42b0      	cmp	r0, r6
 800f6fa:	ddf0      	ble.n	800f6de <SX1276IsChannelFree+0x42>
            status = false;
 800f6fc:	2400      	movs	r4, #0
 800f6fe:	e7f4      	b.n	800f6ea <SX1276IsChannelFree+0x4e>

0800f700 <SX1276Random>:
{
 800f700:	b570      	push	{r4, r5, r6, lr}
 800f702:	2400      	movs	r4, #0
    SX1276SetModem( MODEM_LORA );
 800f704:	2001      	movs	r0, #1
 800f706:	f7ff ff3f 	bl	800f588 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800f70a:	21ff      	movs	r1, #255	; 0xff
 800f70c:	2011      	movs	r0, #17
 800f70e:	f7ff fc40 	bl	800ef92 <SX1276Write>
    uint32_t rnd = 0;
 800f712:	0025      	movs	r5, r4
 800f714:	f7ff fd78 	bl	800f208 <SX1276SetOpMode.part.0>
        RADIO_DELAY_MS( 1 );
 800f718:	2601      	movs	r6, #1
 800f71a:	0030      	movs	r0, r6
 800f71c:	f7f4 fd40 	bl	80041a0 <HAL_Delay>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800f720:	202c      	movs	r0, #44	; 0x2c
 800f722:	f7ff fc81 	bl	800f028 <SX1276Read>
 800f726:	4030      	ands	r0, r6
 800f728:	40a0      	lsls	r0, r4
 800f72a:	3401      	adds	r4, #1
 800f72c:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 800f72e:	2c20      	cmp	r4, #32
 800f730:	d1f3      	bne.n	800f71a <SX1276Random+0x1a>
    SX1276SetSleep( );
 800f732:	f7ff fdad 	bl	800f290 <SX1276SetSleep>
}
 800f736:	0028      	movs	r0, r5
 800f738:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f73c <SX1276SetRxConfig>:
{
 800f73c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f73e:	b08d      	sub	sp, #52	; 0x34
 800f740:	9306      	str	r3, [sp, #24]
 800f742:	ab12      	add	r3, sp, #72	; 0x48
 800f744:	0016      	movs	r6, r2
 800f746:	cb04      	ldmia	r3!, {r2}
 800f748:	0004      	movs	r4, r0
 800f74a:	881b      	ldrh	r3, [r3, #0]
 800f74c:	9208      	str	r2, [sp, #32]
 800f74e:	9301      	str	r3, [sp, #4]
 800f750:	ab14      	add	r3, sp, #80	; 0x50
 800f752:	881b      	ldrh	r3, [r3, #0]
 800f754:	aa0c      	add	r2, sp, #48	; 0x30
 800f756:	9305      	str	r3, [sp, #20]
 800f758:	ab15      	add	r3, sp, #84	; 0x54
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	000d      	movs	r5, r1
 800f75e:	9302      	str	r3, [sp, #8]
 800f760:	ab16      	add	r3, sp, #88	; 0x58
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	9303      	str	r3, [sp, #12]
 800f766:	ab17      	add	r3, sp, #92	; 0x5c
 800f768:	781b      	ldrb	r3, [r3, #0]
 800f76a:	9304      	str	r3, [sp, #16]
 800f76c:	ab18      	add	r3, sp, #96	; 0x60
 800f76e:	781b      	ldrb	r3, [r3, #0]
 800f770:	930a      	str	r3, [sp, #40]	; 0x28
 800f772:	ab19      	add	r3, sp, #100	; 0x64
 800f774:	781b      	ldrb	r3, [r3, #0]
 800f776:	930b      	str	r3, [sp, #44]	; 0x2c
 800f778:	2319      	movs	r3, #25
 800f77a:	189b      	adds	r3, r3, r2
 800f77c:	7fdf      	ldrb	r7, [r3, #31]
 800f77e:	231d      	movs	r3, #29
 800f780:	189b      	adds	r3, r3, r2
 800f782:	7fdb      	ldrb	r3, [r3, #31]
 800f784:	9309      	str	r3, [sp, #36]	; 0x24
    SX1276SetModem( modem );
 800f786:	f7ff feff 	bl	800f588 <SX1276SetModem>
    switch( modem )
 800f78a:	2c00      	cmp	r4, #0
 800f78c:	d004      	beq.n	800f798 <SX1276SetRxConfig+0x5c>
 800f78e:	2c01      	cmp	r4, #1
 800f790:	d100      	bne.n	800f794 <SX1276SetRxConfig+0x58>
 800f792:	e084      	b.n	800f89e <SX1276SetRxConfig+0x162>
}
 800f794:	b00d      	add	sp, #52	; 0x34
 800f796:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800f798:	4ca6      	ldr	r4, [pc, #664]	; (800fa34 <SX1276SetRxConfig+0x2f8>)
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800f79a:	9b08      	ldr	r3, [sp, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800f79c:	9a02      	ldr	r2, [sp, #8]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800f79e:	61a3      	str	r3, [r4, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800f7a0:	1ce3      	adds	r3, r4, #3
 800f7a2:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 800f7a4:	9a03      	ldr	r2, [sp, #12]
 800f7a6:	1d23      	adds	r3, r4, #4
 800f7a8:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800f7aa:	9a04      	ldr	r2, [sp, #16]
 800f7ac:	1d63      	adds	r3, r4, #5
 800f7ae:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 800f7b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800f7b2:	1da3      	adds	r3, r4, #6
 800f7b4:	77df      	strb	r7, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 800f7b6:	1de3      	adds	r3, r4, #7
 800f7b8:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800f7ba:	9b01      	ldr	r3, [sp, #4]
            SX1276.Settings.Fsk.Datarate = datarate;
 800f7bc:	61e6      	str	r6, [r4, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800f7be:	8423      	strh	r3, [r4, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 800f7c0:	0030      	movs	r0, r6
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800f7c2:	6165      	str	r5, [r4, #20]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 800f7c4:	f7f3 fc80 	bl	80030c8 <__aeabi_ui2d>
 800f7c8:	0002      	movs	r2, r0
 800f7ca:	000b      	movs	r3, r1
 800f7cc:	0006      	movs	r6, r0
 800f7ce:	000f      	movs	r7, r1
 800f7d0:	2000      	movs	r0, #0
 800f7d2:	4999      	ldr	r1, [pc, #612]	; (800fa38 <SX1276SetRxConfig+0x2fc>)
 800f7d4:	f7f2 fa0e 	bl	8001bf4 <__aeabi_ddiv>
 800f7d8:	2200      	movs	r2, #0
 800f7da:	4b98      	ldr	r3, [pc, #608]	; (800fa3c <SX1276SetRxConfig+0x300>)
 800f7dc:	f7f2 fe10 	bl	8002400 <__aeabi_dmul>
 800f7e0:	9006      	str	r0, [sp, #24]
 800f7e2:	9107      	str	r1, [sp, #28]
 800f7e4:	9805      	ldr	r0, [sp, #20]
 800f7e6:	f7f3 fc3f 	bl	8003068 <__aeabi_i2d>
 800f7ea:	0002      	movs	r2, r0
 800f7ec:	000b      	movs	r3, r1
 800f7ee:	9806      	ldr	r0, [sp, #24]
 800f7f0:	9907      	ldr	r1, [sp, #28]
 800f7f2:	f7f2 fe05 	bl	8002400 <__aeabi_dmul>
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	4b91      	ldr	r3, [pc, #580]	; (800fa40 <SX1276SetRxConfig+0x304>)
 800f7fa:	f7f2 fe01 	bl	8002400 <__aeabi_dmul>
 800f7fe:	f7f0 ff01 	bl	8000604 <__aeabi_d2uiz>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800f802:	0032      	movs	r2, r6
 800f804:	003b      	movs	r3, r7
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 800f806:	62e0      	str	r0, [r4, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800f808:	498e      	ldr	r1, [pc, #568]	; (800fa44 <SX1276SetRxConfig+0x308>)
 800f80a:	2000      	movs	r0, #0
 800f80c:	f7f2 f9f2 	bl	8001bf4 <__aeabi_ddiv>
 800f810:	f7f0 fef8 	bl	8000604 <__aeabi_d2uiz>
 800f814:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 800f816:	0a21      	lsrs	r1, r4, #8
 800f818:	2002      	movs	r0, #2
 800f81a:	f7ff fbba 	bl	800ef92 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 800f81e:	b2e1      	uxtb	r1, r4
 800f820:	2003      	movs	r0, #3
 800f822:	f7ff fbb6 	bl	800ef92 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 800f826:	0028      	movs	r0, r5
 800f828:	f7ff fb0a 	bl	800ee40 <GetFskBandwidthRegValue>
 800f82c:	0001      	movs	r1, r0
 800f82e:	2012      	movs	r0, #18
 800f830:	f7ff fbaf 	bl	800ef92 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 800f834:	9808      	ldr	r0, [sp, #32]
 800f836:	f7ff fb03 	bl	800ee40 <GetFskBandwidthRegValue>
 800f83a:	0001      	movs	r1, r0
 800f83c:	2013      	movs	r0, #19
 800f83e:	f7ff fba8 	bl	800ef92 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800f842:	9b01      	ldr	r3, [sp, #4]
 800f844:	2025      	movs	r0, #37	; 0x25
 800f846:	0a19      	lsrs	r1, r3, #8
 800f848:	f7ff fba3 	bl	800ef92 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800f84c:	466b      	mov	r3, sp
 800f84e:	2026      	movs	r0, #38	; 0x26
 800f850:	7919      	ldrb	r1, [r3, #4]
 800f852:	f7ff fb9e 	bl	800ef92 <SX1276Write>
            if( fixLen == 1 )
 800f856:	9b02      	ldr	r3, [sp, #8]
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 800f858:	9903      	ldr	r1, [sp, #12]
            if( fixLen == 1 )
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d100      	bne.n	800f860 <SX1276SetRxConfig+0x124>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 800f85e:	21ff      	movs	r1, #255	; 0xff
 800f860:	2032      	movs	r0, #50	; 0x32
 800f862:	f7ff fb96 	bl	800ef92 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800f866:	2030      	movs	r0, #48	; 0x30
 800f868:	f7ff fbde 	bl	800f028 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 800f86c:	216f      	movs	r1, #111	; 0x6f
 800f86e:	4008      	ands	r0, r1
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800f870:	2100      	movs	r1, #0
 800f872:	9b02      	ldr	r3, [sp, #8]
 800f874:	428b      	cmp	r3, r1
 800f876:	d100      	bne.n	800f87a <SX1276SetRxConfig+0x13e>
 800f878:	3980      	subs	r1, #128	; 0x80
                           ( crcOn << 4 ) );
 800f87a:	9b04      	ldr	r3, [sp, #16]
 800f87c:	011c      	lsls	r4, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800f87e:	4320      	orrs	r0, r4
 800f880:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 800f882:	b2c9      	uxtb	r1, r1
 800f884:	2030      	movs	r0, #48	; 0x30
 800f886:	f7ff fb84 	bl	800ef92 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800f88a:	2031      	movs	r0, #49	; 0x31
 800f88c:	f7ff fbcc 	bl	800f028 <SX1276Read>
 800f890:	2140      	movs	r1, #64	; 0x40
 800f892:	4301      	orrs	r1, r0
 800f894:	2031      	movs	r0, #49	; 0x31
 800f896:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800f898:	f7ff fb7b 	bl	800ef92 <SX1276Write>
}
 800f89c:	e77a      	b.n	800f794 <SX1276SetRxConfig+0x58>
            if( bandwidth > 2 )
 800f89e:	2d02      	cmp	r5, #2
 800f8a0:	d900      	bls.n	800f8a4 <SX1276SetRxConfig+0x168>
                while( 1 );
 800f8a2:	e7fe      	b.n	800f8a2 <SX1276SetRxConfig+0x166>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800f8a4:	4b63      	ldr	r3, [pc, #396]	; (800fa34 <SX1276SetRxConfig+0x2f8>)
            SX1276.Settings.LoRa.Coderate = coderate;
 800f8a6:	9906      	ldr	r1, [sp, #24]
 800f8a8:	001a      	movs	r2, r3
 800f8aa:	324d      	adds	r2, #77	; 0x4d
 800f8ac:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800f8ae:	001a      	movs	r2, r3
 800f8b0:	9901      	ldr	r1, [sp, #4]
 800f8b2:	324e      	adds	r2, #78	; 0x4e
 800f8b4:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 800f8b6:	001a      	movs	r2, r3
 800f8b8:	9902      	ldr	r1, [sp, #8]
 800f8ba:	3250      	adds	r2, #80	; 0x50
 800f8bc:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 800f8be:	001a      	movs	r2, r3
 800f8c0:	9903      	ldr	r1, [sp, #12]
 800f8c2:	3251      	adds	r2, #81	; 0x51
 800f8c4:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800f8c6:	001a      	movs	r2, r3
 800f8c8:	9904      	ldr	r1, [sp, #16]
 800f8ca:	3252      	adds	r2, #82	; 0x52
 800f8cc:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800f8ce:	001a      	movs	r2, r3
 800f8d0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f8d2:	3253      	adds	r2, #83	; 0x53
 800f8d4:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800f8d6:	001a      	movs	r2, r3
 800f8d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f8da:	3254      	adds	r2, #84	; 0x54
 800f8dc:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800f8de:	001a      	movs	r2, r3
 800f8e0:	3255      	adds	r2, #85	; 0x55
            bandwidth += 7;
 800f8e2:	3507      	adds	r5, #7
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800f8e4:	7017      	strb	r7, [r2, #0]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800f8e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800f8e8:	645d      	str	r5, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 800f8ea:	649e      	str	r6, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800f8ec:	3356      	adds	r3, #86	; 0x56
 800f8ee:	2406      	movs	r4, #6
 800f8f0:	701a      	strb	r2, [r3, #0]
            if( datarate > 12 )
 800f8f2:	2e06      	cmp	r6, #6
 800f8f4:	d303      	bcc.n	800f8fe <SX1276SetRxConfig+0x1c2>
 800f8f6:	0034      	movs	r4, r6
 800f8f8:	2e0c      	cmp	r6, #12
 800f8fa:	d900      	bls.n	800f8fe <SX1276SetRxConfig+0x1c2>
 800f8fc:	240c      	movs	r4, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800f8fe:	2d07      	cmp	r5, #7
 800f900:	d17d      	bne.n	800f9fe <SX1276SetRxConfig+0x2c2>
 800f902:	0022      	movs	r2, r4
 800f904:	2300      	movs	r3, #0
 800f906:	2101      	movs	r1, #1
 800f908:	3a0b      	subs	r2, #11
 800f90a:	4291      	cmp	r1, r2
 800f90c:	415b      	adcs	r3, r3
 800f90e:	b2db      	uxtb	r3, r3
 800f910:	4f48      	ldr	r7, [pc, #288]	; (800fa34 <SX1276SetRxConfig+0x2f8>)
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800f912:	201d      	movs	r0, #29
 800f914:	374c      	adds	r7, #76	; 0x4c
 800f916:	703b      	strb	r3, [r7, #0]
 800f918:	f7ff fb86 	bl	800f028 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800f91c:	9b06      	ldr	r3, [sp, #24]
            SX1276Write( REG_LR_MODEMCONFIG1,
 800f91e:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800f920:	0059      	lsls	r1, r3, #1
 800f922:	9b02      	ldr	r3, [sp, #8]
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800f924:	0124      	lsls	r4, r4, #4
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800f926:	4319      	orrs	r1, r3
 800f928:	012b      	lsls	r3, r5, #4
 800f92a:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800f92c:	b2c9      	uxtb	r1, r1
 800f92e:	f7ff fb30 	bl	800ef92 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800f932:	201e      	movs	r0, #30
 800f934:	f7ff fb78 	bl	800f028 <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800f938:	9b05      	ldr	r3, [sp, #20]
 800f93a:	0599      	lsls	r1, r3, #22
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800f93c:	9b04      	ldr	r3, [sp, #16]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800f93e:	0f89      	lsrs	r1, r1, #30
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800f940:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 800f942:	4319      	orrs	r1, r3
 800f944:	4321      	orrs	r1, r4
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 800f946:	2408      	movs	r4, #8
 800f948:	4020      	ands	r0, r4
            SX1276Write( REG_LR_MODEMCONFIG2,
 800f94a:	4301      	orrs	r1, r0
 800f94c:	b2c9      	uxtb	r1, r1
 800f94e:	201e      	movs	r0, #30
 800f950:	f7ff fb1f 	bl	800ef92 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800f954:	2026      	movs	r0, #38	; 0x26
 800f956:	f7ff fb67 	bl	800f028 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800f95a:	7839      	ldrb	r1, [r7, #0]
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800f95c:	43a0      	bics	r0, r4
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800f95e:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800f960:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 800f962:	b2c9      	uxtb	r1, r1
 800f964:	2026      	movs	r0, #38	; 0x26
 800f966:	f7ff fb14 	bl	800ef92 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 800f96a:	466b      	mov	r3, sp
 800f96c:	201f      	movs	r0, #31
 800f96e:	7d19      	ldrb	r1, [r3, #20]
 800f970:	f7ff fb0f 	bl	800ef92 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800f974:	9b01      	ldr	r3, [sp, #4]
 800f976:	2020      	movs	r0, #32
 800f978:	0a19      	lsrs	r1, r3, #8
 800f97a:	f7ff fb0a 	bl	800ef92 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800f97e:	466b      	mov	r3, sp
 800f980:	2021      	movs	r0, #33	; 0x21
 800f982:	7919      	ldrb	r1, [r3, #4]
 800f984:	f7ff fb05 	bl	800ef92 <SX1276Write>
            if( fixLen == 1 )
 800f988:	9b02      	ldr	r3, [sp, #8]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d003      	beq.n	800f996 <SX1276SetRxConfig+0x25a>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 800f98e:	2022      	movs	r0, #34	; 0x22
 800f990:	9903      	ldr	r1, [sp, #12]
 800f992:	f7ff fafe 	bl	800ef92 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800f996:	4b27      	ldr	r3, [pc, #156]	; (800fa34 <SX1276SetRxConfig+0x2f8>)
 800f998:	3353      	adds	r3, #83	; 0x53
 800f99a:	781b      	ldrb	r3, [r3, #0]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d00f      	beq.n	800f9c0 <SX1276SetRxConfig+0x284>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800f9a0:	2044      	movs	r0, #68	; 0x44
 800f9a2:	f7ff fb41 	bl	800f028 <SX1276Read>
 800f9a6:	2180      	movs	r1, #128	; 0x80
 800f9a8:	4249      	negs	r1, r1
 800f9aa:	4301      	orrs	r1, r0
 800f9ac:	b2c9      	uxtb	r1, r1
 800f9ae:	2044      	movs	r0, #68	; 0x44
 800f9b0:	f7ff faef 	bl	800ef92 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800f9b4:	4b1f      	ldr	r3, [pc, #124]	; (800fa34 <SX1276SetRxConfig+0x2f8>)
 800f9b6:	2024      	movs	r0, #36	; 0x24
 800f9b8:	3354      	adds	r3, #84	; 0x54
 800f9ba:	7819      	ldrb	r1, [r3, #0]
 800f9bc:	f7ff fae9 	bl	800ef92 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800f9c0:	2d09      	cmp	r5, #9
 800f9c2:	d128      	bne.n	800fa16 <SX1276SetRxConfig+0x2da>
 800f9c4:	4a1b      	ldr	r2, [pc, #108]	; (800fa34 <SX1276SetRxConfig+0x2f8>)
 800f9c6:	4b20      	ldr	r3, [pc, #128]	; (800fa48 <SX1276SetRxConfig+0x30c>)
 800f9c8:	6892      	ldr	r2, [r2, #8]
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800f9ca:	2102      	movs	r1, #2
 800f9cc:	2036      	movs	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	d91d      	bls.n	800fa0e <SX1276SetRxConfig+0x2d2>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800f9d2:	f7ff fade 	bl	800ef92 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 800f9d6:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 800f9d8:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 800f9da:	f7ff fada 	bl	800ef92 <SX1276Write>
            if( datarate == 6 )
 800f9de:	2407      	movs	r4, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800f9e0:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 800f9e2:	2e06      	cmp	r6, #6
 800f9e4:	d81a      	bhi.n	800fa1c <SX1276SetRxConfig+0x2e0>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800f9e6:	f7ff fb1f 	bl	800f028 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800f9ea:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800f9ec:	43a0      	bics	r0, r4
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800f9ee:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800f9f0:	b2c9      	uxtb	r1, r1
 800f9f2:	2031      	movs	r0, #49	; 0x31
 800f9f4:	f7ff facd 	bl	800ef92 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800f9f8:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800f9fa:	2037      	movs	r0, #55	; 0x37
 800f9fc:	e74c      	b.n	800f898 <SX1276SetRxConfig+0x15c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800f9fe:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800fa00:	2d08      	cmp	r5, #8
 800fa02:	d185      	bne.n	800f910 <SX1276SetRxConfig+0x1d4>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800fa04:	330b      	adds	r3, #11
 800fa06:	42b3      	cmp	r3, r6
 800fa08:	419b      	sbcs	r3, r3
 800fa0a:	425b      	negs	r3, r3
 800fa0c:	e780      	b.n	800f910 <SX1276SetRxConfig+0x1d4>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800fa0e:	f7ff fac0 	bl	800ef92 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 800fa12:	217f      	movs	r1, #127	; 0x7f
 800fa14:	e7e0      	b.n	800f9d8 <SX1276SetRxConfig+0x29c>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 800fa16:	2103      	movs	r1, #3
 800fa18:	2036      	movs	r0, #54	; 0x36
 800fa1a:	e7de      	b.n	800f9da <SX1276SetRxConfig+0x29e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800fa1c:	f7ff fb04 	bl	800f028 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800fa20:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800fa22:	43a0      	bics	r0, r4
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800fa24:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800fa26:	b2c9      	uxtb	r1, r1
 800fa28:	2031      	movs	r0, #49	; 0x31
 800fa2a:	f7ff fab2 	bl	800ef92 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800fa2e:	210a      	movs	r1, #10
 800fa30:	e7e3      	b.n	800f9fa <SX1276SetRxConfig+0x2be>
 800fa32:	46c0      	nop			; (mov r8, r8)
 800fa34:	2000165c 	.word	0x2000165c
 800fa38:	3ff00000 	.word	0x3ff00000
 800fa3c:	40200000 	.word	0x40200000
 800fa40:	408f4000 	.word	0x408f4000
 800fa44:	417e8480 	.word	0x417e8480
 800fa48:	1f4add40 	.word	0x1f4add40

0800fa4c <SX1276SetTxConfig>:
{
 800fa4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa4e:	b08d      	sub	sp, #52	; 0x34
 800fa50:	9304      	str	r3, [sp, #16]
 800fa52:	ab12      	add	r3, sp, #72	; 0x48
 800fa54:	cb80      	ldmia	r3!, {r7}
 800fa56:	9206      	str	r2, [sp, #24]
 800fa58:	781b      	ldrb	r3, [r3, #0]
 800fa5a:	0006      	movs	r6, r0
 800fa5c:	9307      	str	r3, [sp, #28]
 800fa5e:	ab14      	add	r3, sp, #80	; 0x50
 800fa60:	881b      	ldrh	r3, [r3, #0]
 800fa62:	000c      	movs	r4, r1
 800fa64:	9301      	str	r3, [sp, #4]
 800fa66:	ab15      	add	r3, sp, #84	; 0x54
 800fa68:	781b      	ldrb	r3, [r3, #0]
 800fa6a:	9302      	str	r3, [sp, #8]
 800fa6c:	ab16      	add	r3, sp, #88	; 0x58
 800fa6e:	781b      	ldrb	r3, [r3, #0]
 800fa70:	9303      	str	r3, [sp, #12]
 800fa72:	ab17      	add	r3, sp, #92	; 0x5c
 800fa74:	781b      	ldrb	r3, [r3, #0]
 800fa76:	9308      	str	r3, [sp, #32]
 800fa78:	ab18      	add	r3, sp, #96	; 0x60
 800fa7a:	781b      	ldrb	r3, [r3, #0]
 800fa7c:	930a      	str	r3, [sp, #40]	; 0x28
 800fa7e:	ab19      	add	r3, sp, #100	; 0x64
 800fa80:	781b      	ldrb	r3, [r3, #0]
 800fa82:	9309      	str	r3, [sp, #36]	; 0x24
    if( ( SX1276.Settings.State == RF_RX_RUNNING ) && ( modem == MODEM_FSK ) )
 800fa84:	4bb5      	ldr	r3, [pc, #724]	; (800fd5c <SX1276SetTxConfig+0x310>)
 800fa86:	791d      	ldrb	r5, [r3, #4]
 800fa88:	2d01      	cmp	r5, #1
 800fa8a:	d106      	bne.n	800fa9a <SX1276SetTxConfig+0x4e>
 800fa8c:	2800      	cmp	r0, #0
 800fa8e:	d104      	bne.n	800fa9a <SX1276SetTxConfig+0x4e>
        SX1276SetSleep( );
 800fa90:	f7ff fbfe 	bl	800f290 <SX1276SetSleep>
        RADIO_DELAY_MS( 1 );
 800fa94:	0028      	movs	r0, r5
 800fa96:	f7f4 fb83 	bl	80041a0 <HAL_Delay>
    SX1276SetModem( modem );
 800fa9a:	0030      	movs	r0, r6
 800fa9c:	f7ff fd74 	bl	800f588 <SX1276SetModem>
    paConfig = SX1276Read( REG_PACONFIG );
 800faa0:	2009      	movs	r0, #9
 800faa2:	f7ff fac1 	bl	800f028 <SX1276Read>
 800faa6:	900b      	str	r0, [sp, #44]	; 0x2c
    paDac = SX1276Read( REG_PADAC );
 800faa8:	204d      	movs	r0, #77	; 0x4d
 800faaa:	f7ff fabd 	bl	800f028 <SX1276Read>
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 800faae:	4bab      	ldr	r3, [pc, #684]	; (800fd5c <SX1276SetTxConfig+0x310>)
    paDac = SX1276Read( REG_PADAC );
 800fab0:	0005      	movs	r5, r0
 800fab2:	9005      	str	r0, [sp, #20]
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 800fab4:	6898      	ldr	r0, [r3, #8]
 800fab6:	f7f4 ff7b 	bl	80049b0 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>
 800faba:	2800      	cmp	r0, #0
 800fabc:	d029      	beq.n	800fb12 <SX1276SetTxConfig+0xc6>
 800fabe:	3802      	subs	r0, #2
 800fac0:	b2c3      	uxtb	r3, r0
 800fac2:	2080      	movs	r0, #128	; 0x80
 800fac4:	2b01      	cmp	r3, #1
 800fac6:	d900      	bls.n	800faca <SX1276SetTxConfig+0x7e>
    uint8_t board_config = 0;
 800fac8:	2000      	movs	r0, #0
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 800faca:	237f      	movs	r3, #127	; 0x7f
 800facc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800face:	401a      	ands	r2, r3
 800fad0:	4310      	orrs	r0, r2
 800fad2:	b241      	sxtb	r1, r0
    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800fad4:	0603      	lsls	r3, r0, #24
 800fad6:	d52a      	bpl.n	800fb2e <SX1276SetTxConfig+0xe2>
        if( power > 17 )
 800fad8:	230f      	movs	r3, #15
 800fada:	2507      	movs	r5, #7
 800fadc:	4399      	bics	r1, r3
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 800fade:	9b05      	ldr	r3, [sp, #20]
        if( power > 17 )
 800fae0:	2c11      	cmp	r4, #17
 800fae2:	dd1a      	ble.n	800fb1a <SX1276SetTxConfig+0xce>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 800fae4:	431d      	orrs	r5, r3
 800fae6:	b2ed      	uxtb	r5, r5
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800fae8:	1c23      	adds	r3, r4, #0
 800faea:	2c14      	cmp	r4, #20
 800faec:	dd00      	ble.n	800faf0 <SX1276SetTxConfig+0xa4>
 800faee:	2314      	movs	r3, #20
 800faf0:	3b05      	subs	r3, #5
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 800faf2:	4319      	orrs	r1, r3
    SX1276Write( REG_PACONFIG, paConfig );
 800faf4:	2009      	movs	r0, #9
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 800faf6:	b2c9      	uxtb	r1, r1
    SX1276Write( REG_PACONFIG, paConfig );
 800faf8:	f7ff fa4b 	bl	800ef92 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 800fafc:	0029      	movs	r1, r5
 800fafe:	204d      	movs	r0, #77	; 0x4d
 800fb00:	f7ff fa47 	bl	800ef92 <SX1276Write>
    switch( modem )
 800fb04:	2e00      	cmp	r6, #0
 800fb06:	d021      	beq.n	800fb4c <SX1276SetTxConfig+0x100>
 800fb08:	2e01      	cmp	r6, #1
 800fb0a:	d100      	bne.n	800fb0e <SX1276SetTxConfig+0xc2>
 800fb0c:	e07f      	b.n	800fc0e <SX1276SetTxConfig+0x1c2>
}
 800fb0e:	b00d      	add	sp, #52	; 0x34
 800fb10:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (power > 14)
 800fb12:	2c0e      	cmp	r4, #14
 800fb14:	ddd9      	ble.n	800faca <SX1276SetTxConfig+0x7e>
          board_config = RF_PACONFIG_PASELECT_PABOOST;
 800fb16:	2080      	movs	r0, #128	; 0x80
 800fb18:	e7d7      	b.n	800faca <SX1276SetTxConfig+0x7e>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 800fb1a:	43ab      	bics	r3, r5
 800fb1c:	2504      	movs	r5, #4
 800fb1e:	432b      	orrs	r3, r5
 800fb20:	b2dd      	uxtb	r5, r3
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 800fb22:	1c23      	adds	r3, r4, #0
 800fb24:	2c02      	cmp	r4, #2
 800fb26:	da00      	bge.n	800fb2a <SX1276SetTxConfig+0xde>
 800fb28:	2302      	movs	r3, #2
 800fb2a:	3b02      	subs	r3, #2
 800fb2c:	e7e1      	b.n	800faf2 <SX1276SetTxConfig+0xa6>
        if( power > 0 )
 800fb2e:	2c00      	cmp	r4, #0
 800fb30:	dd05      	ble.n	800fb3e <SX1276SetTxConfig+0xf2>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 800fb32:	1c23      	adds	r3, r4, #0
 800fb34:	2c0f      	cmp	r4, #15
 800fb36:	dd00      	ble.n	800fb3a <SX1276SetTxConfig+0xee>
 800fb38:	230f      	movs	r3, #15
 800fb3a:	2170      	movs	r1, #112	; 0x70
 800fb3c:	e7d9      	b.n	800faf2 <SX1276SetTxConfig+0xa6>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 800fb3e:	1c21      	adds	r1, r4, #0
 800fb40:	1d23      	adds	r3, r4, #4
 800fb42:	da01      	bge.n	800fb48 <SX1276SetTxConfig+0xfc>
 800fb44:	4b86      	ldr	r3, [pc, #536]	; (800fd60 <SX1276SetTxConfig+0x314>)
 800fb46:	7819      	ldrb	r1, [r3, #0]
 800fb48:	3104      	adds	r1, #4
 800fb4a:	e7d3      	b.n	800faf4 <SX1276SetTxConfig+0xa8>
            SX1276.Settings.Fsk.Power = power;
 800fb4c:	4b83      	ldr	r3, [pc, #524]	; (800fd5c <SX1276SetTxConfig+0x310>)
            SX1276.Settings.Fsk.Fdev = fdev;
 800fb4e:	9a06      	ldr	r2, [sp, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800fb50:	9902      	ldr	r1, [sp, #8]
            SX1276.Settings.Fsk.Fdev = fdev;
 800fb52:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800fb54:	9a04      	ldr	r2, [sp, #16]
            SX1276.Settings.Fsk.Power = power;
 800fb56:	731c      	strb	r4, [r3, #12]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800fb58:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800fb5a:	9a01      	ldr	r2, [sp, #4]
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 800fb5c:	9806      	ldr	r0, [sp, #24]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800fb5e:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800fb60:	1cda      	adds	r2, r3, #3
 800fb62:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800fb64:	9903      	ldr	r1, [sp, #12]
 800fb66:	1d5a      	adds	r2, r3, #5
 800fb68:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800fb6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fb6c:	1d9a      	adds	r2, r3, #6
 800fb6e:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 800fb70:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            SX1276.Settings.Fsk.Datarate = datarate;
 800fb72:	61df      	str	r7, [r3, #28]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 800fb74:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 800fb76:	f7f3 faa7 	bl	80030c8 <__aeabi_ui2d>
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	4b79      	ldr	r3, [pc, #484]	; (800fd64 <SX1276SetTxConfig+0x318>)
 800fb7e:	f7f2 f839 	bl	8001bf4 <__aeabi_ddiv>
 800fb82:	f7f0 fd3f 	bl	8000604 <__aeabi_d2uiz>
 800fb86:	b284      	uxth	r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 800fb88:	0a21      	lsrs	r1, r4, #8
 800fb8a:	2004      	movs	r0, #4
 800fb8c:	f7ff fa01 	bl	800ef92 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 800fb90:	b2e1      	uxtb	r1, r4
 800fb92:	2005      	movs	r0, #5
 800fb94:	f7ff f9fd 	bl	800ef92 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800fb98:	0038      	movs	r0, r7
 800fb9a:	f7f3 fa95 	bl	80030c8 <__aeabi_ui2d>
 800fb9e:	0002      	movs	r2, r0
 800fba0:	000b      	movs	r3, r1
 800fba2:	2000      	movs	r0, #0
 800fba4:	4970      	ldr	r1, [pc, #448]	; (800fd68 <SX1276SetTxConfig+0x31c>)
 800fba6:	f7f2 f825 	bl	8001bf4 <__aeabi_ddiv>
 800fbaa:	f7f0 fd2b 	bl	8000604 <__aeabi_d2uiz>
 800fbae:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 800fbb0:	0a21      	lsrs	r1, r4, #8
 800fbb2:	2002      	movs	r0, #2
 800fbb4:	f7ff f9ed 	bl	800ef92 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 800fbb8:	2003      	movs	r0, #3
 800fbba:	b2e1      	uxtb	r1, r4
 800fbbc:	f7ff f9e9 	bl	800ef92 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800fbc0:	9b01      	ldr	r3, [sp, #4]
 800fbc2:	2025      	movs	r0, #37	; 0x25
 800fbc4:	0a19      	lsrs	r1, r3, #8
 800fbc6:	f7ff f9e4 	bl	800ef92 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 800fbca:	466b      	mov	r3, sp
 800fbcc:	2026      	movs	r0, #38	; 0x26
 800fbce:	7919      	ldrb	r1, [r3, #4]
 800fbd0:	f7ff f9df 	bl	800ef92 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800fbd4:	2030      	movs	r0, #48	; 0x30
 800fbd6:	f7ff fa27 	bl	800f028 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 800fbda:	216f      	movs	r1, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800fbdc:	9b02      	ldr	r3, [sp, #8]
                           RF_PACKETCONFIG1_CRC_MASK &
 800fbde:	4008      	ands	r0, r1
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800fbe0:	0031      	movs	r1, r6
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d101      	bne.n	800fbea <SX1276SetTxConfig+0x19e>
 800fbe6:	2180      	movs	r1, #128	; 0x80
 800fbe8:	4249      	negs	r1, r1
                           ( crcOn << 4 ) );
 800fbea:	9b03      	ldr	r3, [sp, #12]
 800fbec:	011c      	lsls	r4, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800fbee:	4320      	orrs	r0, r4
 800fbf0:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 800fbf2:	b2c9      	uxtb	r1, r1
 800fbf4:	2030      	movs	r0, #48	; 0x30
 800fbf6:	f7ff f9cc 	bl	800ef92 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800fbfa:	2031      	movs	r0, #49	; 0x31
 800fbfc:	f7ff fa14 	bl	800f028 <SX1276Read>
 800fc00:	2140      	movs	r1, #64	; 0x40
 800fc02:	4301      	orrs	r1, r0
 800fc04:	2031      	movs	r0, #49	; 0x31
 800fc06:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800fc08:	f7ff f9c3 	bl	800ef92 <SX1276Write>
}
 800fc0c:	e77f      	b.n	800fb0e <SX1276SetTxConfig+0xc2>
            SX1276.Settings.LoRa.Power = power;
 800fc0e:	4b53      	ldr	r3, [pc, #332]	; (800fd5c <SX1276SetTxConfig+0x310>)
 800fc10:	001a      	movs	r2, r3
 800fc12:	3240      	adds	r2, #64	; 0x40
 800fc14:	7014      	strb	r4, [r2, #0]
            if( bandwidth > 2 )
 800fc16:	9a04      	ldr	r2, [sp, #16]
 800fc18:	2a02      	cmp	r2, #2
 800fc1a:	d900      	bls.n	800fc1e <SX1276SetTxConfig+0x1d2>
                while( 1 );
 800fc1c:	e7fe      	b.n	800fc1c <SX1276SetTxConfig+0x1d0>
            SX1276.Settings.LoRa.Coderate = coderate;
 800fc1e:	001a      	movs	r2, r3
 800fc20:	9907      	ldr	r1, [sp, #28]
 800fc22:	324d      	adds	r2, #77	; 0x4d
 800fc24:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800fc26:	001a      	movs	r2, r3
 800fc28:	9901      	ldr	r1, [sp, #4]
 800fc2a:	324e      	adds	r2, #78	; 0x4e
 800fc2c:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 800fc2e:	001a      	movs	r2, r3
 800fc30:	9902      	ldr	r1, [sp, #8]
 800fc32:	3250      	adds	r2, #80	; 0x50
 800fc34:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800fc36:	001a      	movs	r2, r3
 800fc38:	9908      	ldr	r1, [sp, #32]
 800fc3a:	3253      	adds	r2, #83	; 0x53
 800fc3c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800fc3e:	001a      	movs	r2, r3
 800fc40:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fc42:	3254      	adds	r2, #84	; 0x54
 800fc44:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800fc46:	001a      	movs	r2, r3
 800fc48:	9903      	ldr	r1, [sp, #12]
 800fc4a:	3252      	adds	r2, #82	; 0x52
 800fc4c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800fc4e:	001a      	movs	r2, r3
 800fc50:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fc52:	3255      	adds	r2, #85	; 0x55
            bandwidth += 7;
 800fc54:	9d04      	ldr	r5, [sp, #16]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800fc56:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800fc58:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            bandwidth += 7;
 800fc5a:	3507      	adds	r5, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800fc5c:	2406      	movs	r4, #6
 800fc5e:	645d      	str	r5, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 800fc60:	649f      	str	r7, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800fc62:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 800fc64:	2f06      	cmp	r7, #6
 800fc66:	d303      	bcc.n	800fc70 <SX1276SetTxConfig+0x224>
 800fc68:	003c      	movs	r4, r7
 800fc6a:	2f0c      	cmp	r7, #12
 800fc6c:	d900      	bls.n	800fc70 <SX1276SetTxConfig+0x224>
 800fc6e:	240c      	movs	r4, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800fc70:	2d07      	cmp	r5, #7
 800fc72:	d160      	bne.n	800fd36 <SX1276SetTxConfig+0x2ea>
 800fc74:	0022      	movs	r2, r4
 800fc76:	2300      	movs	r3, #0
 800fc78:	2101      	movs	r1, #1
 800fc7a:	3a0b      	subs	r2, #11
 800fc7c:	4291      	cmp	r1, r2
 800fc7e:	415b      	adcs	r3, r3
 800fc80:	b2db      	uxtb	r3, r3
 800fc82:	4e36      	ldr	r6, [pc, #216]	; (800fd5c <SX1276SetTxConfig+0x310>)
 800fc84:	0032      	movs	r2, r6
 800fc86:	324c      	adds	r2, #76	; 0x4c
 800fc88:	7013      	strb	r3, [r2, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800fc8a:	9b08      	ldr	r3, [sp, #32]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d00f      	beq.n	800fcb0 <SX1276SetTxConfig+0x264>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800fc90:	2044      	movs	r0, #68	; 0x44
 800fc92:	f7ff f9c9 	bl	800f028 <SX1276Read>
 800fc96:	2180      	movs	r1, #128	; 0x80
 800fc98:	4249      	negs	r1, r1
 800fc9a:	4301      	orrs	r1, r0
 800fc9c:	b2c9      	uxtb	r1, r1
 800fc9e:	2044      	movs	r0, #68	; 0x44
 800fca0:	f7ff f977 	bl	800ef92 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800fca4:	0033      	movs	r3, r6
 800fca6:	3354      	adds	r3, #84	; 0x54
 800fca8:	2024      	movs	r0, #36	; 0x24
 800fcaa:	7819      	ldrb	r1, [r3, #0]
 800fcac:	f7ff f971 	bl	800ef92 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800fcb0:	201d      	movs	r0, #29
 800fcb2:	f7ff f9b9 	bl	800f028 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800fcb6:	9b07      	ldr	r3, [sp, #28]
 800fcb8:	012d      	lsls	r5, r5, #4
 800fcba:	0059      	lsls	r1, r3, #1
 800fcbc:	9b02      	ldr	r3, [sp, #8]
            SX1276Write( REG_LR_MODEMCONFIG1,
 800fcbe:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800fcc0:	430b      	orrs	r3, r1
 800fcc2:	0019      	movs	r1, r3
 800fcc4:	4329      	orrs	r1, r5
            SX1276Write( REG_LR_MODEMCONFIG1,
 800fcc6:	b2c9      	uxtb	r1, r1
 800fcc8:	f7ff f963 	bl	800ef92 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800fccc:	201e      	movs	r0, #30
 800fcce:	f7ff f9ab 	bl	800f028 <SX1276Read>
                           RFLR_MODEMCONFIG2_SF_MASK &
 800fcd2:	210b      	movs	r1, #11
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800fcd4:	9b03      	ldr	r3, [sp, #12]
 800fcd6:	0124      	lsls	r4, r4, #4
 800fcd8:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 800fcda:	431c      	orrs	r4, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 800fcdc:	4001      	ands	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG2,
 800fcde:	4321      	orrs	r1, r4
 800fce0:	b2c9      	uxtb	r1, r1
 800fce2:	201e      	movs	r0, #30
 800fce4:	f7ff f955 	bl	800ef92 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800fce8:	2026      	movs	r0, #38	; 0x26
 800fcea:	f7ff f99d 	bl	800f028 <SX1276Read>
 800fcee:	2308      	movs	r3, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800fcf0:	364c      	adds	r6, #76	; 0x4c
 800fcf2:	7831      	ldrb	r1, [r6, #0]
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800fcf4:	4398      	bics	r0, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800fcf6:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800fcf8:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 800fcfa:	b2c9      	uxtb	r1, r1
 800fcfc:	2026      	movs	r0, #38	; 0x26
 800fcfe:	f7ff f948 	bl	800ef92 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800fd02:	9b01      	ldr	r3, [sp, #4]
 800fd04:	2020      	movs	r0, #32
 800fd06:	0a19      	lsrs	r1, r3, #8
 800fd08:	f7ff f943 	bl	800ef92 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 800fd0c:	466b      	mov	r3, sp
 800fd0e:	2021      	movs	r0, #33	; 0x21
 800fd10:	7919      	ldrb	r1, [r3, #4]
 800fd12:	f7ff f93e 	bl	800ef92 <SX1276Write>
            if( datarate == 6 )
 800fd16:	2407      	movs	r4, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800fd18:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 800fd1a:	2f06      	cmp	r7, #6
 800fd1c:	d813      	bhi.n	800fd46 <SX1276SetTxConfig+0x2fa>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800fd1e:	f7ff f983 	bl	800f028 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800fd22:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800fd24:	43a0      	bics	r0, r4
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800fd26:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800fd28:	b2c9      	uxtb	r1, r1
 800fd2a:	2031      	movs	r0, #49	; 0x31
 800fd2c:	f7ff f931 	bl	800ef92 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800fd30:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800fd32:	2037      	movs	r0, #55	; 0x37
 800fd34:	e768      	b.n	800fc08 <SX1276SetTxConfig+0x1bc>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800fd36:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800fd38:	2d08      	cmp	r5, #8
 800fd3a:	d1a2      	bne.n	800fc82 <SX1276SetTxConfig+0x236>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800fd3c:	330b      	adds	r3, #11
 800fd3e:	42bb      	cmp	r3, r7
 800fd40:	419b      	sbcs	r3, r3
 800fd42:	425b      	negs	r3, r3
 800fd44:	e79d      	b.n	800fc82 <SX1276SetTxConfig+0x236>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800fd46:	f7ff f96f 	bl	800f028 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800fd4a:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800fd4c:	43a0      	bics	r0, r4
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800fd4e:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800fd50:	b2c9      	uxtb	r1, r1
 800fd52:	2031      	movs	r0, #49	; 0x31
 800fd54:	f7ff f91d 	bl	800ef92 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800fd58:	210a      	movs	r1, #10
 800fd5a:	e7ea      	b.n	800fd32 <SX1276SetTxConfig+0x2e6>
 800fd5c:	2000165c 	.word	0x2000165c
 800fd60:	08012026 	.word	0x08012026
 800fd64:	404e8480 	.word	0x404e8480
 800fd68:	417e8480 	.word	0x417e8480

0800fd6c <SX1276SetTxContinuousWave>:
{
 800fd6c:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )time * 1000;
 800fd6e:	24fa      	movs	r4, #250	; 0xfa
{
 800fd70:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )time * 1000;
 800fd72:	00a4      	lsls	r4, r4, #2
 800fd74:	4354      	muls	r4, r2
{
 800fd76:	000d      	movs	r5, r1
    SX1276SetChannel( freq );
 800fd78:	f7ff f914 	bl	800efa4 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 800fd7c:	2305      	movs	r3, #5
 800fd7e:	9302      	str	r3, [sp, #8]
 800fd80:	2396      	movs	r3, #150	; 0x96
 800fd82:	2000      	movs	r0, #0
 800fd84:	015b      	lsls	r3, r3, #5
 800fd86:	0002      	movs	r2, r0
 800fd88:	0029      	movs	r1, r5
 800fd8a:	9007      	str	r0, [sp, #28]
 800fd8c:	9006      	str	r0, [sp, #24]
 800fd8e:	9005      	str	r0, [sp, #20]
 800fd90:	9004      	str	r0, [sp, #16]
 800fd92:	9003      	str	r0, [sp, #12]
 800fd94:	9001      	str	r0, [sp, #4]
 800fd96:	9300      	str	r3, [sp, #0]
 800fd98:	9408      	str	r4, [sp, #32]
 800fd9a:	0003      	movs	r3, r0
 800fd9c:	f7ff fe56 	bl	800fa4c <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 800fda0:	2031      	movs	r0, #49	; 0x31
 800fda2:	f7ff f941 	bl	800f028 <SX1276Read>
 800fda6:	2540      	movs	r5, #64	; 0x40
 800fda8:	43a8      	bics	r0, r5
 800fdaa:	b2c1      	uxtb	r1, r0
 800fdac:	2031      	movs	r0, #49	; 0x31
 800fdae:	f7ff f8f0 	bl	800ef92 <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 800fdb2:	0028      	movs	r0, r5
 800fdb4:	21f0      	movs	r1, #240	; 0xf0
 800fdb6:	f7ff f8ec 	bl	800ef92 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 800fdba:	21a0      	movs	r1, #160	; 0xa0
 800fdbc:	2041      	movs	r0, #65	; 0x41
 800fdbe:	f7ff f8e8 	bl	800ef92 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800fdc2:	4d08      	ldr	r5, [pc, #32]	; (800fde4 <SX1276SetTxContinuousWave+0x78>)
 800fdc4:	0021      	movs	r1, r4
 800fdc6:	0028      	movs	r0, r5
 800fdc8:	f000 ff80 	bl	8010ccc <UTIL_TIMER_SetPeriod>
    SX1276.Settings.State = RF_TX_RUNNING;
 800fdcc:	2202      	movs	r2, #2
 800fdce:	4b06      	ldr	r3, [pc, #24]	; (800fde8 <SX1276SetTxContinuousWave+0x7c>)
    TimerStart( &TxTimeoutTimer );
 800fdd0:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 800fdd2:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 800fdd4:	f000 ff38 	bl	8010c48 <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800fdd8:	2003      	movs	r0, #3
 800fdda:	f7ff fa28 	bl	800f22e <SX1276SetOpMode>
}
 800fdde:	b00b      	add	sp, #44	; 0x2c
 800fde0:	bd30      	pop	{r4, r5, pc}
 800fde2:	46c0      	nop			; (mov r8, r8)
 800fde4:	2000162c 	.word	0x2000162c
 800fde8:	2000165c 	.word	0x2000165c

0800fdec <SX1276SetMaxPayloadLength>:
{
 800fdec:	b570      	push	{r4, r5, r6, lr}
 800fdee:	0004      	movs	r4, r0
 800fdf0:	000d      	movs	r5, r1
    SX1276SetModem( modem );
 800fdf2:	f7ff fbc9 	bl	800f588 <SX1276SetModem>
    switch( modem )
 800fdf6:	2c00      	cmp	r4, #0
 800fdf8:	d002      	beq.n	800fe00 <SX1276SetMaxPayloadLength+0x14>
 800fdfa:	2c01      	cmp	r4, #1
 800fdfc:	d00a      	beq.n	800fe14 <SX1276SetMaxPayloadLength+0x28>
}
 800fdfe:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 800fe00:	4b06      	ldr	r3, [pc, #24]	; (800fe1c <SX1276SetMaxPayloadLength+0x30>)
 800fe02:	3303      	adds	r3, #3
 800fe04:	7fdb      	ldrb	r3, [r3, #31]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d1f9      	bne.n	800fdfe <SX1276SetMaxPayloadLength+0x12>
            SX1276Write( REG_PAYLOADLENGTH, max );
 800fe0a:	0029      	movs	r1, r5
 800fe0c:	2032      	movs	r0, #50	; 0x32
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 800fe0e:	f7ff f8c0 	bl	800ef92 <SX1276Write>
}
 800fe12:	e7f4      	b.n	800fdfe <SX1276SetMaxPayloadLength+0x12>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 800fe14:	0029      	movs	r1, r5
 800fe16:	2023      	movs	r0, #35	; 0x23
 800fe18:	e7f9      	b.n	800fe0e <SX1276SetMaxPayloadLength+0x22>
 800fe1a:	46c0      	nop			; (mov r8, r8)
 800fe1c:	2000165c 	.word	0x2000165c

0800fe20 <SX1276SetPublicNetwork>:
{
 800fe20:	b510      	push	{r4, lr}
 800fe22:	0004      	movs	r4, r0
    SX1276SetModem( MODEM_LORA );
 800fe24:	2001      	movs	r0, #1
 800fe26:	f7ff fbaf 	bl	800f588 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 800fe2a:	4b05      	ldr	r3, [pc, #20]	; (800fe40 <SX1276SetPublicNetwork+0x20>)
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 800fe2c:	2134      	movs	r1, #52	; 0x34
    SX1276.Settings.LoRa.PublicNetwork = enable;
 800fe2e:	335c      	adds	r3, #92	; 0x5c
 800fe30:	701c      	strb	r4, [r3, #0]
    if( enable == true )
 800fe32:	2c00      	cmp	r4, #0
 800fe34:	d100      	bne.n	800fe38 <SX1276SetPublicNetwork+0x18>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 800fe36:	2112      	movs	r1, #18
 800fe38:	2039      	movs	r0, #57	; 0x39
 800fe3a:	f7ff f8aa 	bl	800ef92 <SX1276Write>
}
 800fe3e:	bd10      	pop	{r4, pc}
 800fe40:	2000165c 	.word	0x2000165c

0800fe44 <SX1276OnTimeoutIrq>:
{
 800fe44:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 800fe46:	4c2a      	ldr	r4, [pc, #168]	; (800fef0 <SX1276OnTimeoutIrq+0xac>)
 800fe48:	7923      	ldrb	r3, [r4, #4]
 800fe4a:	2b01      	cmp	r3, #1
 800fe4c:	d002      	beq.n	800fe54 <SX1276OnTimeoutIrq+0x10>
 800fe4e:	2b02      	cmp	r3, #2
 800fe50:	d029      	beq.n	800fea6 <SX1276OnTimeoutIrq+0x62>
}
 800fe52:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 800fe54:	7963      	ldrb	r3, [r4, #5]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d117      	bne.n	800fe8a <SX1276OnTimeoutIrq+0x46>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800fe5a:	8623      	strh	r3, [r4, #48]	; 0x30
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800fe5c:	210b      	movs	r1, #11
 800fe5e:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800fe60:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 800fe62:	8763      	strh	r3, [r4, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800fe64:	f7ff f895 	bl	800ef92 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800fe68:	2110      	movs	r1, #16
 800fe6a:	203f      	movs	r0, #63	; 0x3f
 800fe6c:	f7ff f891 	bl	800ef92 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800fe70:	1de3      	adds	r3, r4, #7
 800fe72:	7fdb      	ldrb	r3, [r3, #31]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d011      	beq.n	800fe9c <SX1276OnTimeoutIrq+0x58>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800fe78:	200d      	movs	r0, #13
 800fe7a:	f7ff f8d5 	bl	800f028 <SX1276Read>
 800fe7e:	2140      	movs	r1, #64	; 0x40
 800fe80:	4301      	orrs	r1, r0
 800fe82:	b2c9      	uxtb	r1, r1
 800fe84:	200d      	movs	r0, #13
 800fe86:	f7ff f884 	bl	800ef92 <SX1276Write>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800fe8a:	4b1a      	ldr	r3, [pc, #104]	; (800fef4 <SX1276OnTimeoutIrq+0xb0>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d0df      	beq.n	800fe52 <SX1276OnTimeoutIrq+0xe>
 800fe92:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d0dc      	beq.n	800fe52 <SX1276OnTimeoutIrq+0xe>
            RadioEvents->TxTimeout( );
 800fe98:	4798      	blx	r3
}
 800fe9a:	e7da      	b.n	800fe52 <SX1276OnTimeoutIrq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 800fe9c:	4816      	ldr	r0, [pc, #88]	; (800fef8 <SX1276OnTimeoutIrq+0xb4>)
                SX1276.Settings.State = RF_IDLE;
 800fe9e:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 800fea0:	f000 fe7e 	bl	8010ba0 <UTIL_TIMER_Stop>
 800fea4:	e7f1      	b.n	800fe8a <SX1276OnTimeoutIrq+0x46>
    Sx_Board_Reset();
 800fea6:	f7f4 fdad 	bl	8004a04 <CMWX1ZZABZ0XX_RADIO_Reset>
        RxChainCalibration( );
 800feaa:	f7ff f8c7 	bl	800f03c <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800feae:	2000      	movs	r0, #0
 800feb0:	f7ff f9bd 	bl	800f22e <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800feb4:	4e11      	ldr	r6, [pc, #68]	; (800fefc <SX1276OnTimeoutIrq+0xb8>)
 800feb6:	0035      	movs	r5, r6
 800feb8:	363c      	adds	r6, #60	; 0x3c
 800feba:	350c      	adds	r5, #12
            SX1276SetModem( RadioRegsInit[i].Modem );
 800febc:	7828      	ldrb	r0, [r5, #0]
 800febe:	f7ff fb63 	bl	800f588 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800fec2:	78a9      	ldrb	r1, [r5, #2]
 800fec4:	7868      	ldrb	r0, [r5, #1]
 800fec6:	3503      	adds	r5, #3
 800fec8:	f7ff f863 	bl	800ef92 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800fecc:	42b5      	cmp	r5, r6
 800fece:	d1f5      	bne.n	800febc <SX1276OnTimeoutIrq+0x78>
        SX1276SetModem( MODEM_FSK );
 800fed0:	2000      	movs	r0, #0
 800fed2:	f7ff fb59 	bl	800f588 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 800fed6:	0023      	movs	r3, r4
 800fed8:	335c      	adds	r3, #92	; 0x5c
 800feda:	7818      	ldrb	r0, [r3, #0]
 800fedc:	f7ff ffa0 	bl	800fe20 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 800fee0:	2300      	movs	r3, #0
 800fee2:	7123      	strb	r3, [r4, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800fee4:	4b03      	ldr	r3, [pc, #12]	; (800fef4 <SX1276OnTimeoutIrq+0xb0>)
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d0b2      	beq.n	800fe52 <SX1276OnTimeoutIrq+0xe>
 800feec:	685b      	ldr	r3, [r3, #4]
 800feee:	e7d1      	b.n	800fe94 <SX1276OnTimeoutIrq+0x50>
 800fef0:	2000165c 	.word	0x2000165c
 800fef4:	20000ef0 	.word	0x20000ef0
 800fef8:	20001644 	.word	0x20001644
 800fefc:	080116f4 	.word	0x080116f4

0800ff00 <SX1276Send>:
{
 800ff00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff02:	466b      	mov	r3, sp
    switch( SX1276.Settings.Modem )
 800ff04:	4c60      	ldr	r4, [pc, #384]	; (8010088 <SX1276Send+0x188>)
{
 800ff06:	71d9      	strb	r1, [r3, #7]
    switch( SX1276.Settings.Modem )
 800ff08:	7965      	ldrb	r5, [r4, #5]
{
 800ff0a:	1dde      	adds	r6, r3, #7
 800ff0c:	0007      	movs	r7, r0
    switch( SX1276.Settings.Modem )
 800ff0e:	2d00      	cmp	r5, #0
 800ff10:	d01a      	beq.n	800ff48 <SX1276Send+0x48>
 800ff12:	2d01      	cmp	r5, #1
 800ff14:	d044      	beq.n	800ffa0 <SX1276Send+0xa0>
 800ff16:	2600      	movs	r6, #0
    TimerStop( &RxTimeoutTimer );
 800ff18:	485c      	ldr	r0, [pc, #368]	; (801008c <SX1276Send+0x18c>)
 800ff1a:	f000 fe41 	bl	8010ba0 <UTIL_TIMER_Stop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800ff1e:	4d5c      	ldr	r5, [pc, #368]	; (8010090 <SX1276Send+0x190>)
 800ff20:	0031      	movs	r1, r6
 800ff22:	0028      	movs	r0, r5
 800ff24:	f000 fed2 	bl	8010ccc <UTIL_TIMER_SetPeriod>
    switch( SX1276.Settings.Modem )
 800ff28:	7963      	ldrb	r3, [r4, #5]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d100      	bne.n	800ff30 <SX1276Send+0x30>
 800ff2e:	e076      	b.n	801001e <SX1276Send+0x11e>
 800ff30:	2b01      	cmp	r3, #1
 800ff32:	d100      	bne.n	800ff36 <SX1276Send+0x36>
 800ff34:	e08c      	b.n	8010050 <SX1276Send+0x150>
    SX1276.Settings.State = RF_TX_RUNNING;
 800ff36:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 800ff38:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 800ff3a:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 800ff3c:	f000 fe84 	bl	8010c48 <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800ff40:	2003      	movs	r0, #3
 800ff42:	f7ff f974 	bl	800f22e <SX1276SetOpMode>
}
 800ff46:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            SX1276.Settings.FskPacketHandler.Size = size;
 800ff48:	7831      	ldrb	r1, [r6, #0]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800ff4a:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 800ff4c:	8761      	strh	r1, [r4, #58]	; 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 800ff4e:	1ce3      	adds	r3, r4, #3
 800ff50:	7fd8      	ldrb	r0, [r3, #31]
 800ff52:	2800      	cmp	r0, #0
 800ff54:	d117      	bne.n	800ff86 <SX1276Send+0x86>
    SX1276WriteBuffer( 0, buffer, size );
 800ff56:	2201      	movs	r2, #1
 800ff58:	0031      	movs	r1, r6
 800ff5a:	f7ff f802 	bl	800ef62 <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
 800ff5e:	7832      	ldrb	r2, [r6, #0]
 800ff60:	1e53      	subs	r3, r2, #1
 800ff62:	2b3f      	cmp	r3, #63	; 0x3f
 800ff64:	d813      	bhi.n	800ff8e <SX1276Send+0x8e>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 800ff66:	0023      	movs	r3, r4
 800ff68:	333f      	adds	r3, #63	; 0x3f
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 800ff6a:	0025      	movs	r5, r4
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 800ff6c:	701a      	strb	r2, [r3, #0]
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 800ff6e:	353f      	adds	r5, #63	; 0x3f
    SX1276WriteBuffer( 0, buffer, size );
 800ff70:	782a      	ldrb	r2, [r5, #0]
 800ff72:	0039      	movs	r1, r7
 800ff74:	2000      	movs	r0, #0
 800ff76:	f7fe fff4 	bl	800ef62 <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800ff7a:	782b      	ldrb	r3, [r5, #0]
 800ff7c:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 800ff7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800ff80:	189b      	adds	r3, r3, r2
 800ff82:	87a3      	strh	r3, [r4, #60]	; 0x3c
        break;
 800ff84:	e7c8      	b.n	800ff18 <SX1276Send+0x18>
                SX1276Write( REG_PAYLOADLENGTH, size );
 800ff86:	2032      	movs	r0, #50	; 0x32
 800ff88:	f7ff f803 	bl	800ef92 <SX1276Write>
 800ff8c:	e7e7      	b.n	800ff5e <SX1276Send+0x5e>
                RADIO_MEMCPY8( RxTxBuffer, buffer, size );
 800ff8e:	b292      	uxth	r2, r2
 800ff90:	0039      	movs	r1, r7
 800ff92:	4840      	ldr	r0, [pc, #256]	; (8010094 <SX1276Send+0x194>)
 800ff94:	f000 fbf6 	bl	8010784 <UTIL_MEM_cpy_8>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 800ff98:	0023      	movs	r3, r4
 800ff9a:	2220      	movs	r2, #32
 800ff9c:	333f      	adds	r3, #63	; 0x3f
 800ff9e:	e7e4      	b.n	800ff6a <SX1276Send+0x6a>
            if( SX1276.Settings.LoRa.IqInverted == true )
 800ffa0:	0023      	movs	r3, r4
 800ffa2:	3355      	adds	r3, #85	; 0x55
 800ffa4:	781b      	ldrb	r3, [r3, #0]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800ffa6:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d02c      	beq.n	8010006 <SX1276Send+0x106>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800ffac:	f7ff f83c 	bl	800f028 <SX1276Read>
 800ffb0:	2341      	movs	r3, #65	; 0x41
 800ffb2:	4398      	bics	r0, r3
 800ffb4:	b2c1      	uxtb	r1, r0
 800ffb6:	2033      	movs	r0, #51	; 0x33
 800ffb8:	f7fe ffeb 	bl	800ef92 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800ffbc:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800ffbe:	203b      	movs	r0, #59	; 0x3b
 800ffc0:	f7fe ffe7 	bl	800ef92 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 800ffc4:	0023      	movs	r3, r4
 800ffc6:	7831      	ldrb	r1, [r6, #0]
 800ffc8:	3364      	adds	r3, #100	; 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800ffca:	2022      	movs	r0, #34	; 0x22
            SX1276.Settings.LoRaPacketHandler.Size = size;
 800ffcc:	7019      	strb	r1, [r3, #0]
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800ffce:	f7fe ffe0 	bl	800ef92 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 800ffd2:	2100      	movs	r1, #0
 800ffd4:	200e      	movs	r0, #14
 800ffd6:	f7fe ffdc 	bl	800ef92 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800ffda:	2100      	movs	r1, #0
 800ffdc:	200d      	movs	r0, #13
 800ffde:	f7fe ffd8 	bl	800ef92 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 800ffe2:	2001      	movs	r0, #1
 800ffe4:	f7ff f820 	bl	800f028 <SX1276Read>
 800ffe8:	23f8      	movs	r3, #248	; 0xf8
 800ffea:	4398      	bics	r0, r3
 800ffec:	d104      	bne.n	800fff8 <SX1276Send+0xf8>
                SX1276SetStby( );
 800ffee:	f7ff f96b 	bl	800f2c8 <SX1276SetStby>
                RADIO_DELAY_MS( 1 );
 800fff2:	2001      	movs	r0, #1
 800fff4:	f7f4 f8d4 	bl	80041a0 <HAL_Delay>
    SX1276WriteBuffer( 0, buffer, size );
 800fff8:	7832      	ldrb	r2, [r6, #0]
 800fffa:	0039      	movs	r1, r7
 800fffc:	2000      	movs	r0, #0
 800fffe:	f7fe ffb0 	bl	800ef62 <SX1276WriteBuffer>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8010002:	6da6      	ldr	r6, [r4, #88]	; 0x58
        break;
 8010004:	e788      	b.n	800ff18 <SX1276Send+0x18>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8010006:	f7ff f80f 	bl	800f028 <SX1276Read>
 801000a:	2341      	movs	r3, #65	; 0x41
 801000c:	0001      	movs	r1, r0
 801000e:	4399      	bics	r1, r3
 8010010:	4329      	orrs	r1, r5
 8010012:	b2c9      	uxtb	r1, r1
 8010014:	2033      	movs	r0, #51	; 0x33
 8010016:	f7fe ffbc 	bl	800ef92 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 801001a:	211d      	movs	r1, #29
 801001c:	e7cf      	b.n	800ffbe <SX1276Send+0xbe>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801001e:	2040      	movs	r0, #64	; 0x40
 8010020:	f7ff f802 	bl	800f028 <SX1276Read>
 8010024:	2103      	movs	r1, #3
 8010026:	4001      	ands	r1, r0
 8010028:	2040      	movs	r0, #64	; 0x40
 801002a:	f7fe ffb2 	bl	800ef92 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 801002e:	2041      	movs	r0, #65	; 0x41
 8010030:	f7fe fffa 	bl	800f028 <SX1276Read>
 8010034:	213e      	movs	r1, #62	; 0x3e
 8010036:	4001      	ands	r1, r0
 8010038:	2041      	movs	r0, #65	; 0x41
 801003a:	f7fe ffaa 	bl	800ef92 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 801003e:	2035      	movs	r0, #53	; 0x35
 8010040:	f7fe fff2 	bl	800f028 <SX1276Read>
 8010044:	233f      	movs	r3, #63	; 0x3f
 8010046:	4018      	ands	r0, r3
 8010048:	0023      	movs	r3, r4
 801004a:	333e      	adds	r3, #62	; 0x3e
 801004c:	7018      	strb	r0, [r3, #0]
        break;
 801004e:	e772      	b.n	800ff36 <SX1276Send+0x36>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8010050:	0023      	movs	r3, r4
 8010052:	3353      	adds	r3, #83	; 0x53
 8010054:	781b      	ldrb	r3, [r3, #0]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d00d      	beq.n	8010076 <SX1276Send+0x176>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801005a:	21f5      	movs	r1, #245	; 0xf5
 801005c:	2011      	movs	r0, #17
 801005e:	f7fe ff98 	bl	800ef92 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8010062:	2040      	movs	r0, #64	; 0x40
 8010064:	f7fe ffe0 	bl	800f028 <SX1276Read>
 8010068:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 801006a:	4001      	ands	r1, r0
 801006c:	2040      	movs	r0, #64	; 0x40
 801006e:	4301      	orrs	r1, r0
 8010070:	f7fe ff8f 	bl	800ef92 <SX1276Write>
 8010074:	e75f      	b.n	800ff36 <SX1276Send+0x36>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8010076:	21f7      	movs	r1, #247	; 0xf7
 8010078:	2011      	movs	r0, #17
 801007a:	f7fe ff8a 	bl	800ef92 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 801007e:	2040      	movs	r0, #64	; 0x40
 8010080:	f7fe ffd2 	bl	800f028 <SX1276Read>
 8010084:	213f      	movs	r1, #63	; 0x3f
 8010086:	e7f0      	b.n	801006a <SX1276Send+0x16a>
 8010088:	2000165c 	.word	0x2000165c
 801008c:	200016c4 	.word	0x200016c4
 8010090:	2000162c 	.word	0x2000162c
 8010094:	20000ef4 	.word	0x20000ef4

08010098 <SX1276OnDio1Irq>:
{
 8010098:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 801009a:	4c38      	ldr	r4, [pc, #224]	; (801017c <SX1276OnDio1Irq+0xe4>)
 801009c:	7925      	ldrb	r5, [r4, #4]
 801009e:	2d01      	cmp	r5, #1
 80100a0:	d002      	beq.n	80100a8 <SX1276OnDio1Irq+0x10>
 80100a2:	2d02      	cmp	r5, #2
 80100a4:	d04e      	beq.n	8010144 <SX1276OnDio1Irq+0xac>
}
 80100a6:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 80100a8:	7963      	ldrb	r3, [r4, #5]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d017      	beq.n	80100de <SX1276OnDio1Irq+0x46>
 80100ae:	2b01      	cmp	r3, #1
 80100b0:	d1f9      	bne.n	80100a6 <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 80100b2:	f7f4 fceb 	bl	8004a8c <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 80100b6:	2800      	cmp	r0, #0
 80100b8:	d0f5      	beq.n	80100a6 <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutTimer );
 80100ba:	4831      	ldr	r0, [pc, #196]	; (8010180 <SX1276OnDio1Irq+0xe8>)
 80100bc:	f000 fd70 	bl	8010ba0 <UTIL_TIMER_Stop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 80100c0:	2180      	movs	r1, #128	; 0x80
 80100c2:	2012      	movs	r0, #18
 80100c4:	f7fe ff65 	bl	800ef92 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 80100c8:	2300      	movs	r3, #0
 80100ca:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80100cc:	4b2d      	ldr	r3, [pc, #180]	; (8010184 <SX1276OnDio1Irq+0xec>)
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d0e8      	beq.n	80100a6 <SX1276OnDio1Irq+0xe>
 80100d4:	68db      	ldr	r3, [r3, #12]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d0e5      	beq.n	80100a6 <SX1276OnDio1Irq+0xe>
                    RadioEvents->RxTimeout( );
 80100da:	4798      	blx	r3
 80100dc:	e7e3      	b.n	80100a6 <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 80100de:	f7f4 fcd5 	bl	8004a8c <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 80100e2:	2800      	cmp	r0, #0
 80100e4:	d0df      	beq.n	80100a6 <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 80100e6:	4828      	ldr	r0, [pc, #160]	; (8010188 <SX1276OnDio1Irq+0xf0>)
 80100e8:	f000 fd5a 	bl	8010ba0 <UTIL_TIMER_Stop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80100ec:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80100ee:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 80100f0:	4313      	orrs	r3, r2
 80100f2:	d107      	bne.n	8010104 <SX1276OnDio1Irq+0x6c>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80100f4:	1ce3      	adds	r3, r4, #3
 80100f6:	7fd8      	ldrb	r0, [r3, #31]
 80100f8:	2800      	cmp	r0, #0
 80100fa:	d118      	bne.n	801012e <SX1276OnDio1Irq+0x96>
    SX1276ReadBuffer( 0, buffer, size );
 80100fc:	002a      	movs	r2, r5
 80100fe:	4923      	ldr	r1, [pc, #140]	; (801018c <SX1276OnDio1Irq+0xf4>)
 8010100:	f7fe ff7a 	bl	800eff8 <SX1276ReadBuffer>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8010104:	0025      	movs	r5, r4
 8010106:	353e      	adds	r5, #62	; 0x3e
 8010108:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 801010a:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 801010c:	4920      	ldr	r1, [pc, #128]	; (8010190 <SX1276OnDio1Irq+0xf8>)
 801010e:	782b      	ldrb	r3, [r5, #0]
 8010110:	1841      	adds	r1, r0, r1
 8010112:	1a12      	subs	r2, r2, r0
 8010114:	429a      	cmp	r2, r3
 8010116:	db0f      	blt.n	8010138 <SX1276OnDio1Irq+0xa0>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8010118:	3b01      	subs	r3, #1
    SX1276ReadBuffer( 0, buffer, size );
 801011a:	b2da      	uxtb	r2, r3
 801011c:	2000      	movs	r0, #0
 801011e:	f7fe ff6b 	bl	800eff8 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8010122:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8010124:	782b      	ldrb	r3, [r5, #0]
 8010126:	3a01      	subs	r2, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8010128:	189b      	adds	r3, r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 801012a:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 801012c:	e7bb      	b.n	80100a6 <SX1276OnDio1Irq+0xe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801012e:	2032      	movs	r0, #50	; 0x32
 8010130:	f7fe ff7a 	bl	800f028 <SX1276Read>
 8010134:	8760      	strh	r0, [r4, #58]	; 0x3a
 8010136:	e7e5      	b.n	8010104 <SX1276OnDio1Irq+0x6c>
    SX1276ReadBuffer( 0, buffer, size );
 8010138:	2000      	movs	r0, #0
 801013a:	b2d2      	uxtb	r2, r2
 801013c:	f7fe ff5c 	bl	800eff8 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8010140:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8010142:	e7f2      	b.n	801012a <SX1276OnDio1Irq+0x92>
            switch( SX1276.Settings.Modem )
 8010144:	7965      	ldrb	r5, [r4, #5]
 8010146:	2d00      	cmp	r5, #0
 8010148:	d1ad      	bne.n	80100a6 <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 1 )
 801014a:	f7f4 fc9f 	bl	8004a8c <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801014e:	2801      	cmp	r0, #1
 8010150:	d0a9      	beq.n	80100a6 <SX1276OnDio1Irq+0xe>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8010152:	0026      	movs	r6, r4
 8010154:	363f      	adds	r6, #63	; 0x3f
 8010156:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8010158:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 801015a:	490d      	ldr	r1, [pc, #52]	; (8010190 <SX1276OnDio1Irq+0xf8>)
 801015c:	7832      	ldrb	r2, [r6, #0]
 801015e:	1841      	adds	r1, r0, r1
 8010160:	1a1b      	subs	r3, r3, r0
 8010162:	4293      	cmp	r3, r2
 8010164:	dd05      	ble.n	8010172 <SX1276OnDio1Irq+0xda>
    SX1276WriteBuffer( 0, buffer, size );
 8010166:	0028      	movs	r0, r5
 8010168:	f7fe fefb 	bl	800ef62 <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 801016c:	7833      	ldrb	r3, [r6, #0]
 801016e:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8010170:	e7da      	b.n	8010128 <SX1276OnDio1Irq+0x90>
    SX1276WriteBuffer( 0, buffer, size );
 8010172:	0028      	movs	r0, r5
 8010174:	b2da      	uxtb	r2, r3
 8010176:	f7fe fef4 	bl	800ef62 <SX1276WriteBuffer>
 801017a:	e7e1      	b.n	8010140 <SX1276OnDio1Irq+0xa8>
 801017c:	2000165c 	.word	0x2000165c
 8010180:	200016c4 	.word	0x200016c4
 8010184:	20000ef0 	.word	0x20000ef0
 8010188:	20001644 	.word	0x20001644
 801018c:	20001696 	.word	0x20001696
 8010190:	20000ef4 	.word	0x20000ef4

08010194 <SX1276OnDio0Irq>:
{
 8010194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    volatile uint8_t irqFlags = 0;
 8010196:	466b      	mov	r3, sp
 8010198:	1ddd      	adds	r5, r3, #7
 801019a:	2300      	movs	r3, #0
    switch( SX1276.Settings.State )
 801019c:	4c8a      	ldr	r4, [pc, #552]	; (80103c8 <SX1276OnDio0Irq+0x234>)
    volatile uint8_t irqFlags = 0;
 801019e:	702b      	strb	r3, [r5, #0]
    switch( SX1276.Settings.State )
 80101a0:	7923      	ldrb	r3, [r4, #4]
 80101a2:	2b01      	cmp	r3, #1
 80101a4:	d003      	beq.n	80101ae <SX1276OnDio0Irq+0x1a>
 80101a6:	2b02      	cmp	r3, #2
 80101a8:	d100      	bne.n	80101ac <SX1276OnDio0Irq+0x18>
 80101aa:	e0f9      	b.n	80103a0 <SX1276OnDio0Irq+0x20c>
}
 80101ac:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            switch( SX1276.Settings.Modem )
 80101ae:	7963      	ldrb	r3, [r4, #5]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d024      	beq.n	80101fe <SX1276OnDio0Irq+0x6a>
 80101b4:	2b01      	cmp	r3, #1
 80101b6:	d1f9      	bne.n	80101ac <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 80101b8:	2140      	movs	r1, #64	; 0x40
 80101ba:	2012      	movs	r0, #18
 80101bc:	f7fe fee9 	bl	800ef92 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 80101c0:	2012      	movs	r0, #18
 80101c2:	f7fe ff31 	bl	800f028 <SX1276Read>
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 80101c6:	2120      	movs	r1, #32
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 80101c8:	7028      	strb	r0, [r5, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 80101ca:	782b      	ldrb	r3, [r5, #0]
 80101cc:	4e7f      	ldr	r6, [pc, #508]	; (80103cc <SX1276OnDio0Irq+0x238>)
 80101ce:	4d80      	ldr	r5, [pc, #512]	; (80103d0 <SX1276OnDio0Irq+0x23c>)
 80101d0:	420b      	tst	r3, r1
 80101d2:	d100      	bne.n	80101d6 <SX1276OnDio0Irq+0x42>
 80101d4:	e088      	b.n	80102e8 <SX1276OnDio0Irq+0x154>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 80101d6:	2012      	movs	r0, #18
 80101d8:	f7fe fedb 	bl	800ef92 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 80101dc:	0023      	movs	r3, r4
 80101de:	3356      	adds	r3, #86	; 0x56
 80101e0:	781b      	ldrb	r3, [r3, #0]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d100      	bne.n	80101e8 <SX1276OnDio0Irq+0x54>
                            SX1276.Settings.State = RF_IDLE;
 80101e6:	7123      	strb	r3, [r4, #4]
                        TimerStop( &RxTimeoutTimer );
 80101e8:	0030      	movs	r0, r6
 80101ea:	f000 fcd9 	bl	8010ba0 <UTIL_TIMER_Stop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80101ee:	682b      	ldr	r3, [r5, #0]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d0db      	beq.n	80101ac <SX1276OnDio0Irq+0x18>
 80101f4:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d0d8      	beq.n	80101ac <SX1276OnDio0Irq+0x18>
                    RadioEvents->TxDone( );
 80101fa:	4798      	blx	r3
}
 80101fc:	e7d6      	b.n	80101ac <SX1276OnDio0Irq+0x18>
                if( SX1276.Settings.Fsk.CrcOn == true )
 80101fe:	1d63      	adds	r3, r4, #5
 8010200:	7fdb      	ldrb	r3, [r3, #31]
 8010202:	4f72      	ldr	r7, [pc, #456]	; (80103cc <SX1276OnDio0Irq+0x238>)
 8010204:	4e72      	ldr	r6, [pc, #456]	; (80103d0 <SX1276OnDio0Irq+0x23c>)
 8010206:	2b00      	cmp	r3, #0
 8010208:	d02f      	beq.n	801026a <SX1276OnDio0Irq+0xd6>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 801020a:	203f      	movs	r0, #63	; 0x3f
 801020c:	f7fe ff0c 	bl	800f028 <SX1276Read>
 8010210:	7028      	strb	r0, [r5, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8010212:	782b      	ldrb	r3, [r5, #0]
 8010214:	079b      	lsls	r3, r3, #30
 8010216:	d428      	bmi.n	801026a <SX1276OnDio0Irq+0xd6>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8010218:	210b      	movs	r1, #11
 801021a:	203e      	movs	r0, #62	; 0x3e
 801021c:	f7fe feb9 	bl	800ef92 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8010220:	2110      	movs	r1, #16
 8010222:	203f      	movs	r0, #63	; 0x3f
 8010224:	f7fe feb5 	bl	800ef92 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8010228:	0038      	movs	r0, r7
 801022a:	f000 fcb9 	bl	8010ba0 <UTIL_TIMER_Stop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 801022e:	1de3      	adds	r3, r4, #7
 8010230:	7fdd      	ldrb	r5, [r3, #31]
 8010232:	2d00      	cmp	r5, #0
 8010234:	d10f      	bne.n	8010256 <SX1276OnDio0Irq+0xc2>
                            TimerStop( &RxTimeoutSyncWord );
 8010236:	4867      	ldr	r0, [pc, #412]	; (80103d4 <SX1276OnDio0Irq+0x240>)
 8010238:	f000 fcb2 	bl	8010ba0 <UTIL_TIMER_Stop>
                            SX1276.Settings.State = RF_IDLE;
 801023c:	7125      	strb	r5, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801023e:	6833      	ldr	r3, [r6, #0]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d003      	beq.n	801024c <SX1276OnDio0Irq+0xb8>
 8010244:	691b      	ldr	r3, [r3, #16]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d000      	beq.n	801024c <SX1276OnDio0Irq+0xb8>
                            RadioEvents->RxError( );
 801024a:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801024c:	2300      	movs	r3, #0
 801024e:	8623      	strh	r3, [r4, #48]	; 0x30
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8010250:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8010252:	8763      	strh	r3, [r4, #58]	; 0x3a
                        break;
 8010254:	e7aa      	b.n	80101ac <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8010256:	200d      	movs	r0, #13
 8010258:	f7fe fee6 	bl	800f028 <SX1276Read>
 801025c:	2140      	movs	r1, #64	; 0x40
 801025e:	4301      	orrs	r1, r0
 8010260:	b2c9      	uxtb	r1, r1
 8010262:	200d      	movs	r0, #13
 8010264:	f7fe fe95 	bl	800ef92 <SX1276Write>
 8010268:	e7e9      	b.n	801023e <SX1276OnDio0Irq+0xaa>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 801026a:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 801026c:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 801026e:	0013      	movs	r3, r2
 8010270:	4d59      	ldr	r5, [pc, #356]	; (80103d8 <SX1276OnDio0Irq+0x244>)
 8010272:	430b      	orrs	r3, r1
 8010274:	d109      	bne.n	801028a <SX1276OnDio0Irq+0xf6>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8010276:	1ce3      	adds	r3, r4, #3
 8010278:	7fd8      	ldrb	r0, [r3, #31]
 801027a:	2800      	cmp	r0, #0
 801027c:	d125      	bne.n	80102ca <SX1276OnDio0Irq+0x136>
    SX1276ReadBuffer( 0, buffer, size );
 801027e:	2201      	movs	r2, #1
 8010280:	4956      	ldr	r1, [pc, #344]	; (80103dc <SX1276OnDio0Irq+0x248>)
 8010282:	f7fe feb9 	bl	800eff8 <SX1276ReadBuffer>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8010286:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8010288:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801028a:	1a52      	subs	r2, r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 801028c:	2000      	movs	r0, #0
 801028e:	b2d2      	uxtb	r2, r2
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8010290:	1869      	adds	r1, r5, r1
    SX1276ReadBuffer( 0, buffer, size );
 8010292:	f7fe feb1 	bl	800eff8 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8010296:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                TimerStop( &RxTimeoutTimer );
 8010298:	0038      	movs	r0, r7
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801029a:	87a3      	strh	r3, [r4, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 801029c:	f000 fc80 	bl	8010ba0 <UTIL_TIMER_Stop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 80102a0:	1de3      	adds	r3, r4, #7
 80102a2:	7fdb      	ldrb	r3, [r3, #31]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d115      	bne.n	80102d4 <SX1276OnDio0Irq+0x140>
                    TimerStop( &RxTimeoutSyncWord );
 80102a8:	484a      	ldr	r0, [pc, #296]	; (80103d4 <SX1276OnDio0Irq+0x240>)
                    SX1276.Settings.State = RF_IDLE;
 80102aa:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 80102ac:	f000 fc78 	bl	8010ba0 <UTIL_TIMER_Stop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80102b0:	6833      	ldr	r3, [r6, #0]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d0ca      	beq.n	801024c <SX1276OnDio0Irq+0xb8>
 80102b6:	689e      	ldr	r6, [r3, #8]
 80102b8:	2e00      	cmp	r6, #0
 80102ba:	d0c7      	beq.n	801024c <SX1276OnDio0Irq+0xb8>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 80102bc:	2232      	movs	r2, #50	; 0x32
 80102be:	2300      	movs	r3, #0
 80102c0:	0028      	movs	r0, r5
 80102c2:	56a2      	ldrsb	r2, [r4, r2]
 80102c4:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 80102c6:	47b0      	blx	r6
 80102c8:	e7c0      	b.n	801024c <SX1276OnDio0Irq+0xb8>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 80102ca:	2032      	movs	r0, #50	; 0x32
 80102cc:	f7fe feac 	bl	800f028 <SX1276Read>
 80102d0:	8760      	strh	r0, [r4, #58]	; 0x3a
 80102d2:	e7d8      	b.n	8010286 <SX1276OnDio0Irq+0xf2>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80102d4:	200d      	movs	r0, #13
 80102d6:	f7fe fea7 	bl	800f028 <SX1276Read>
 80102da:	2140      	movs	r1, #64	; 0x40
 80102dc:	4301      	orrs	r1, r0
 80102de:	b2c9      	uxtb	r1, r1
 80102e0:	200d      	movs	r0, #13
 80102e2:	f7fe fe56 	bl	800ef92 <SX1276Write>
 80102e6:	e7e3      	b.n	80102b0 <SX1276OnDio0Irq+0x11c>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 80102e8:	2019      	movs	r0, #25
 80102ea:	f7fe fe9d 	bl	800f028 <SX1276Read>
 80102ee:	0027      	movs	r7, r4
 80102f0:	b240      	sxtb	r0, r0
 80102f2:	3002      	adds	r0, #2
 80102f4:	3760      	adds	r7, #96	; 0x60
 80102f6:	1080      	asrs	r0, r0, #2
 80102f8:	7038      	strb	r0, [r7, #0]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 80102fa:	201a      	movs	r0, #26
 80102fc:	f7fe fe94 	bl	800f028 <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8010300:	2200      	movs	r2, #0
 8010302:	0021      	movs	r1, r4
 8010304:	b203      	sxth	r3, r0
 8010306:	111b      	asrs	r3, r3, #4
 8010308:	56ba      	ldrsb	r2, [r7, r2]
 801030a:	b29f      	uxth	r7, r3
 801030c:	4b34      	ldr	r3, [pc, #208]	; (80103e0 <SX1276OnDio0Irq+0x24c>)
 801030e:	b280      	uxth	r0, r0
 8010310:	469c      	mov	ip, r3
 8010312:	3162      	adds	r1, #98	; 0x62
 8010314:	2a00      	cmp	r2, #0
 8010316:	da3a      	bge.n	801038e <SX1276OnDio0Irq+0x1fa>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8010318:	b293      	uxth	r3, r2
 801031a:	68a2      	ldr	r2, [r4, #8]
 801031c:	4562      	cmp	r2, ip
 801031e:	d934      	bls.n	801038a <SX1276OnDio0Irq+0x1f6>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8010320:	3b9d      	subs	r3, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8010322:	18c3      	adds	r3, r0, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8010324:	18fb      	adds	r3, r7, r3
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8010326:	2013      	movs	r0, #19
 8010328:	0027      	movs	r7, r4
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 801032a:	800b      	strh	r3, [r1, #0]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 801032c:	f7fe fe7c 	bl	800f028 <SX1276Read>
 8010330:	3764      	adds	r7, #100	; 0x64
 8010332:	7038      	strb	r0, [r7, #0]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 8010334:	2010      	movs	r0, #16
 8010336:	f7fe fe77 	bl	800f028 <SX1276Read>
 801033a:	0001      	movs	r1, r0
 801033c:	200d      	movs	r0, #13
 801033e:	f7fe fe28 	bl	800ef92 <SX1276Write>
    SX1276ReadBuffer( 0, buffer, size );
 8010342:	783a      	ldrb	r2, [r7, #0]
 8010344:	4f24      	ldr	r7, [pc, #144]	; (80103d8 <SX1276OnDio0Irq+0x244>)
 8010346:	2000      	movs	r0, #0
 8010348:	0039      	movs	r1, r7
 801034a:	f7fe fe55 	bl	800eff8 <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 801034e:	0023      	movs	r3, r4
 8010350:	3356      	adds	r3, #86	; 0x56
 8010352:	781b      	ldrb	r3, [r3, #0]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d100      	bne.n	801035a <SX1276OnDio0Irq+0x1c6>
                        SX1276.Settings.State = RF_IDLE;
 8010358:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 801035a:	0030      	movs	r0, r6
 801035c:	f000 fc20 	bl	8010ba0 <UTIL_TIMER_Stop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8010360:	682b      	ldr	r3, [r5, #0]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d100      	bne.n	8010368 <SX1276OnDio0Irq+0x1d4>
 8010366:	e721      	b.n	80101ac <SX1276OnDio0Irq+0x18>
 8010368:	689d      	ldr	r5, [r3, #8]
 801036a:	2d00      	cmp	r5, #0
 801036c:	d100      	bne.n	8010370 <SX1276OnDio0Irq+0x1dc>
 801036e:	e71d      	b.n	80101ac <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8010370:	0023      	movs	r3, r4
 8010372:	0022      	movs	r2, r4
 8010374:	3360      	adds	r3, #96	; 0x60
 8010376:	781b      	ldrb	r3, [r3, #0]
 8010378:	3464      	adds	r4, #100	; 0x64
 801037a:	3262      	adds	r2, #98	; 0x62
 801037c:	2100      	movs	r1, #0
 801037e:	5e52      	ldrsh	r2, [r2, r1]
 8010380:	0038      	movs	r0, r7
 8010382:	7821      	ldrb	r1, [r4, #0]
 8010384:	b25b      	sxtb	r3, r3
 8010386:	47a8      	blx	r5
 8010388:	e710      	b.n	80101ac <SX1276OnDio0Irq+0x18>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 801038a:	3ba4      	subs	r3, #164	; 0xa4
 801038c:	e7c9      	b.n	8010322 <SX1276OnDio0Irq+0x18e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801038e:	68a3      	ldr	r3, [r4, #8]
 8010390:	4563      	cmp	r3, ip
 8010392:	d902      	bls.n	801039a <SX1276OnDio0Irq+0x206>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8010394:	0003      	movs	r3, r0
 8010396:	3b9d      	subs	r3, #157	; 0x9d
 8010398:	e7c4      	b.n	8010324 <SX1276OnDio0Irq+0x190>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 801039a:	0003      	movs	r3, r0
 801039c:	3ba4      	subs	r3, #164	; 0xa4
 801039e:	e7c1      	b.n	8010324 <SX1276OnDio0Irq+0x190>
            TimerStop( &TxTimeoutTimer );
 80103a0:	4810      	ldr	r0, [pc, #64]	; (80103e4 <SX1276OnDio0Irq+0x250>)
 80103a2:	f000 fbfd 	bl	8010ba0 <UTIL_TIMER_Stop>
            switch( SX1276.Settings.Modem )
 80103a6:	7963      	ldrb	r3, [r4, #5]
 80103a8:	2b01      	cmp	r3, #1
 80103aa:	d103      	bne.n	80103b4 <SX1276OnDio0Irq+0x220>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 80103ac:	2108      	movs	r1, #8
 80103ae:	2012      	movs	r0, #18
 80103b0:	f7fe fdef 	bl	800ef92 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 80103b4:	2300      	movs	r3, #0
 80103b6:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80103b8:	4b05      	ldr	r3, [pc, #20]	; (80103d0 <SX1276OnDio0Irq+0x23c>)
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d100      	bne.n	80103c2 <SX1276OnDio0Irq+0x22e>
 80103c0:	e6f4      	b.n	80101ac <SX1276OnDio0Irq+0x18>
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	e717      	b.n	80101f6 <SX1276OnDio0Irq+0x62>
 80103c6:	46c0      	nop			; (mov r8, r8)
 80103c8:	2000165c 	.word	0x2000165c
 80103cc:	200016c4 	.word	0x200016c4
 80103d0:	20000ef0 	.word	0x20000ef0
 80103d4:	20001644 	.word	0x20001644
 80103d8:	20000ef4 	.word	0x20000ef4
 80103dc:	20001696 	.word	0x20001696
 80103e0:	1f4add40 	.word	0x1f4add40
 80103e4:	2000162c 	.word	0x2000162c

080103e8 <TRACE_AllocateBufer>:
  * @param  Size to allocate within fifo
  * @param  Pos position within the fifo
  * @retval write position inside the buffer is -1 no space available.
  */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 80103e8:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80103ea:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80103ee:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if (ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 80103f0:	4b16      	ldr	r3, [pc, #88]	; (801044c <TRACE_AllocateBufer+0x64>)
 80103f2:	8a5d      	ldrh	r5, [r3, #18]
 80103f4:	8a1a      	ldrh	r2, [r3, #16]
 80103f6:	4295      	cmp	r5, r2
 80103f8:	d114      	bne.n	8010424 <TRACE_AllocateBufer+0x3c>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 80103fa:	2280      	movs	r2, #128	; 0x80
 80103fc:	0092      	lsls	r2, r2, #2
 80103fe:	1b52      	subs	r2, r2, r5
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8010400:	b292      	uxth	r2, r2
 8010402:	4290      	cmp	r0, r2
 8010404:	d306      	bcc.n	8010414 <TRACE_AllocateBufer+0x2c>
 8010406:	4285      	cmp	r5, r0
 8010408:	d916      	bls.n	8010438 <TRACE_AllocateBufer+0x50>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801040a:	2201      	movs	r2, #1
 801040c:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801040e:	2200      	movs	r2, #0
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8010410:	801d      	strh	r5, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8010412:	825a      	strh	r2, [r3, #18]
#endif
  }
  
  if (freesize > Size)
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8010414:	8a5a      	ldrh	r2, [r3, #18]
 8010416:	800a      	strh	r2, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8010418:	1812      	adds	r2, r2, r0
 801041a:	05d2      	lsls	r2, r2, #23
 801041c:	0dd2      	lsrs	r2, r2, #23
    ret = 0;
 801041e:	2000      	movs	r0, #0
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8010420:	825a      	strh	r2, [r3, #18]
    ret = 0;
 8010422:	e00b      	b.n	801043c <TRACE_AllocateBufer+0x54>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8010424:	4295      	cmp	r5, r2
 8010426:	d90c      	bls.n	8010442 <TRACE_AllocateBufer+0x5a>
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8010428:	2680      	movs	r6, #128	; 0x80
 801042a:	00b6      	lsls	r6, r6, #2
 801042c:	1b76      	subs	r6, r6, r5
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801042e:	b2b6      	uxth	r6, r6
 8010430:	4286      	cmp	r6, r0
 8010432:	d8ef      	bhi.n	8010414 <TRACE_AllocateBufer+0x2c>
 8010434:	4282      	cmp	r2, r0
 8010436:	d8e8      	bhi.n	801040a <TRACE_AllocateBufer+0x22>
  int16_t ret = -1;
 8010438:	2001      	movs	r0, #1
 801043a:	4240      	negs	r0, r0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801043c:	f384 8810 	msr	PRIMASK, r4
#endif
  }

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  return ret;
}
 8010440:	bd70      	pop	{r4, r5, r6, pc}
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8010442:	1b52      	subs	r2, r2, r5
  if (freesize > Size)
 8010444:	b292      	uxth	r2, r2
 8010446:	4282      	cmp	r2, r0
 8010448:	d8e4      	bhi.n	8010414 <TRACE_AllocateBufer+0x2c>
 801044a:	e7f5      	b.n	8010438 <TRACE_AllocateBufer+0x50>
 801044c:	20000ff4 	.word	0x20000ff4

08010450 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010450:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010454:	b672      	cpsid	i
  * @retval None.
  */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8010456:	4a03      	ldr	r2, [pc, #12]	; (8010464 <TRACE_Lock+0x14>)
 8010458:	8ad3      	ldrh	r3, [r2, #22]
 801045a:	3301      	adds	r3, #1
 801045c:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801045e:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8010462:	4770      	bx	lr
 8010464:	20000ff4 	.word	0x20000ff4

08010468 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010468:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801046c:	b672      	cpsid	i
  * @retval None.
  */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 801046e:	4a03      	ldr	r2, [pc, #12]	; (801047c <TRACE_UnLock+0x14>)
 8010470:	8ad3      	ldrh	r3, [r2, #22]
 8010472:	3b01      	subs	r3, #1
 8010474:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010476:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801047a:	4770      	bx	lr
 801047c:	20000ff4 	.word	0x20000ff4

08010480 <UTIL_ADV_TRACE_Init>:
{
 8010480:	b510      	push	{r4, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8010482:	2218      	movs	r2, #24
 8010484:	2100      	movs	r1, #0
 8010486:	4807      	ldr	r0, [pc, #28]	; (80104a4 <UTIL_ADV_TRACE_Init+0x24>)
 8010488:	f000 f986 	bl	8010798 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801048c:	2280      	movs	r2, #128	; 0x80
 801048e:	2100      	movs	r1, #0
 8010490:	4805      	ldr	r0, [pc, #20]	; (80104a8 <UTIL_ADV_TRACE_Init+0x28>)
 8010492:	0092      	lsls	r2, r2, #2
 8010494:	f000 f980 	bl	8010798 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8010498:	4b04      	ldr	r3, [pc, #16]	; (80104ac <UTIL_ADV_TRACE_Init+0x2c>)
 801049a:	4805      	ldr	r0, [pc, #20]	; (80104b0 <UTIL_ADV_TRACE_Init+0x30>)
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	4798      	blx	r3
}
 80104a0:	bd10      	pop	{r4, pc}
 80104a2:	46c0      	nop			; (mov r8, r8)
 80104a4:	20000ff4 	.word	0x20000ff4
 80104a8:	2000110c 	.word	0x2000110c
 80104ac:	080111f8 	.word	0x080111f8
 80104b0:	0801061d 	.word	0x0801061d

080104b4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
	ADV_TRACE_Ctx.timestamp_func = *cb;
 80104b4:	4b01      	ldr	r3, [pc, #4]	; (80104bc <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 80104b6:	6058      	str	r0, [r3, #4]
}
 80104b8:	4770      	bx	lr
 80104ba:	46c0      	nop			; (mov r8, r8)
 80104bc:	20000ff4 	.word	0x20000ff4

080104c0 <UTIL_ADV_TRACE_SetVerboseLevel>:
	ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 80104c0:	4b01      	ldr	r3, [pc, #4]	; (80104c8 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 80104c2:	7218      	strb	r0, [r3, #8]
}
 80104c4:	4770      	bx	lr
 80104c6:	46c0      	nop			; (mov r8, r8)
 80104c8:	20000ff4 	.word	0x20000ff4

080104cc <TRACE_Send>:
{
 80104cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104ce:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80104d2:	b672      	cpsid	i
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 80104d4:	4c1b      	ldr	r4, [pc, #108]	; (8010544 <TRACE_Send+0x78>)
  if(TRACE_IsLocked() == 0u)
 80104d6:	8ae5      	ldrh	r5, [r4, #22]
 80104d8:	2d00      	cmp	r5, #0
 80104da:	d12e      	bne.n	801053a <TRACE_Send+0x6e>
    TRACE_Lock();
 80104dc:	f7ff ffb8 	bl	8010450 <TRACE_Lock>
    if (ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 80104e0:	8a20      	ldrh	r0, [r4, #16]
 80104e2:	8a62      	ldrh	r2, [r4, #18]
 80104e4:	4290      	cmp	r0, r2
 80104e6:	d026      	beq.n	8010536 <TRACE_Send+0x6a>
   	  if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80104e8:	78a1      	ldrb	r1, [r4, #2]
 80104ea:	2901      	cmp	r1, #1
 80104ec:	d110      	bne.n	8010510 <TRACE_Send+0x44>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 80104ee:	8823      	ldrh	r3, [r4, #0]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80104f0:	3101      	adds	r1, #1
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 80104f2:	1a1b      	subs	r3, r3, r0
 80104f4:	b29b      	uxth	r3, r3
 80104f6:	82a3      	strh	r3, [r4, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80104f8:	70a1      	strb	r1, [r4, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 80104fa:	8025      	strh	r5, [r4, #0]
        if (0u == ADV_TRACE_Ctx.TraceSentSize)
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d109      	bne.n	8010514 <TRACE_Send+0x48>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8010500:	70a3      	strb	r3, [r4, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8010502:	8223      	strh	r3, [r4, #16]
   	    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8010504:	8a23      	ldrh	r3, [r4, #16]
 8010506:	429a      	cmp	r2, r3
 8010508:	d912      	bls.n	8010530 <TRACE_Send+0x64>
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801050a:	1ad2      	subs	r2, r2, r3
 801050c:	82a2      	strh	r2, [r4, #20]
 801050e:	e001      	b.n	8010514 <TRACE_Send+0x48>
   	  if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8010510:	2900      	cmp	r1, #0
 8010512:	d0f7      	beq.n	8010504 <TRACE_Send+0x38>
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8010514:	8a25      	ldrh	r5, [r4, #16]
 8010516:	4b0c      	ldr	r3, [pc, #48]	; (8010548 <TRACE_Send+0x7c>)
 8010518:	18ed      	adds	r5, r5, r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801051a:	f386 8810 	msr	PRIMASK, r6
      UTIL_ADV_TRACE_PreSendHook(); 
 801051e:	f7f3 fe2d 	bl	800417c <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8010522:	4b0a      	ldr	r3, [pc, #40]	; (801054c <TRACE_Send+0x80>)
 8010524:	8aa1      	ldrh	r1, [r4, #20]
 8010526:	68db      	ldr	r3, [r3, #12]
 8010528:	0028      	movs	r0, r5
 801052a:	9301      	str	r3, [sp, #4]
 801052c:	4798      	blx	r3
}
 801052e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8010530:	2280      	movs	r2, #128	; 0x80
 8010532:	0092      	lsls	r2, r2, #2
 8010534:	e7e9      	b.n	801050a <TRACE_Send+0x3e>
      TRACE_UnLock();
 8010536:	f7ff ff97 	bl	8010468 <TRACE_UnLock>
 801053a:	f386 8810 	msr	PRIMASK, r6
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;  
 801053e:	2000      	movs	r0, #0
}
 8010540:	e7f5      	b.n	801052e <TRACE_Send+0x62>
 8010542:	46c0      	nop			; (mov r8, r8)
 8010544:	20000ff4 	.word	0x20000ff4
 8010548:	2000110c 	.word	0x2000110c
 801054c:	080111f8 	.word	0x080111f8

08010550 <UTIL_ADV_TRACE_COND_FSend>:
{
 8010550:	b408      	push	{r3}
 8010552:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010554:	b086      	sub	sp, #24
  uint16_t timestamp_size = 0u;
 8010556:	2300      	movs	r3, #0
 8010558:	466c      	mov	r4, sp
 801055a:	8023      	strh	r3, [r4, #0]
  if (!( ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801055c:	4b2c      	ldr	r3, [pc, #176]	; (8010610 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 801055e:	7a1c      	ldrb	r4, [r3, #8]
 8010560:	4284      	cmp	r4, r0
 8010562:	d350      	bcc.n	8010606 <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if(( Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8010564:	68d8      	ldr	r0, [r3, #12]
 8010566:	4008      	ands	r0, r1
 8010568:	4288      	cmp	r0, r1
 801056a:	d14e      	bne.n	801060a <UTIL_ADV_TRACE_COND_FSend+0xba>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801056c:	685b      	ldr	r3, [r3, #4]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d004      	beq.n	801057c <UTIL_ADV_TRACE_COND_FSend+0x2c>
 8010572:	2a00      	cmp	r2, #0
 8010574:	d002      	beq.n	801057c <UTIL_ADV_TRACE_COND_FSend+0x2c>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8010576:	4669      	mov	r1, sp
 8010578:	a802      	add	r0, sp, #8
 801057a:	4798      	blx	r3
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801057c:	2180      	movs	r1, #128	; 0x80
  va_start( vaArgs, strFormat);
 801057e:	ab0c      	add	r3, sp, #48	; 0x30
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8010580:	0049      	lsls	r1, r1, #1
 8010582:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010584:	4823      	ldr	r0, [pc, #140]	; (8010614 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
  va_start( vaArgs, strFormat);
 8010586:	9301      	str	r3, [sp, #4]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8010588:	f000 fc02 	bl	8010d90 <tiny_vsnprintf_like>
 801058c:	0005      	movs	r5, r0
  TRACE_Lock();
 801058e:	f7ff ff5f 	bl	8010450 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8010592:	466b      	mov	r3, sp
 8010594:	8818      	ldrh	r0, [r3, #0]
 8010596:	1c9c      	adds	r4, r3, #2
 8010598:	1940      	adds	r0, r0, r5
 801059a:	0021      	movs	r1, r4
 801059c:	b280      	uxth	r0, r0
 801059e:	f7ff ff23 	bl	80103e8 <TRACE_AllocateBufer>
 80105a2:	1c43      	adds	r3, r0, #1
 80105a4:	d02a      	beq.n	80105fc <UTIL_ADV_TRACE_COND_FSend+0xac>
    for (idx = 0u; idx < timestamp_size; idx++)
 80105a6:	2200      	movs	r2, #0
      ADV_TRACE_Buffer[writepos] = buf[idx];
 80105a8:	2101      	movs	r1, #1
    for (idx = 0u; idx < timestamp_size; idx++)
 80105aa:	466b      	mov	r3, sp
 80105ac:	0015      	movs	r5, r2
      ADV_TRACE_Buffer[writepos] = buf[idx];
 80105ae:	468c      	mov	ip, r1
    for (idx = 0u; idx < timestamp_size; idx++)
 80105b0:	881b      	ldrh	r3, [r3, #0]
 80105b2:	8826      	ldrh	r6, [r4, #0]
 80105b4:	4818      	ldr	r0, [pc, #96]	; (8010618 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 80105b6:	b297      	uxth	r7, r2
 80105b8:	19f1      	adds	r1, r6, r7
 80105ba:	b289      	uxth	r1, r1
 80105bc:	42bb      	cmp	r3, r7
 80105be:	d815      	bhi.n	80105ec <UTIL_ADV_TRACE_COND_FSend+0x9c>
 80105c0:	199b      	adds	r3, r3, r6
 80105c2:	b29b      	uxth	r3, r3
 80105c4:	2d00      	cmp	r5, #0
 80105c6:	d000      	beq.n	80105ca <UTIL_ADV_TRACE_COND_FSend+0x7a>
 80105c8:	8023      	strh	r3, [r4, #0]
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80105ca:	2180      	movs	r1, #128	; 0x80
 80105cc:	8823      	ldrh	r3, [r4, #0]
 80105ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80105d0:	0049      	lsls	r1, r1, #1
 80105d2:	18c0      	adds	r0, r0, r3
 80105d4:	9b01      	ldr	r3, [sp, #4]
 80105d6:	f000 fbdb 	bl	8010d90 <tiny_vsnprintf_like>
    TRACE_UnLock();
 80105da:	f7ff ff45 	bl	8010468 <TRACE_UnLock>
    return TRACE_Send();
 80105de:	f7ff ff75 	bl	80104cc <TRACE_Send>
}
 80105e2:	b006      	add	sp, #24
 80105e4:	bcf0      	pop	{r4, r5, r6, r7}
 80105e6:	bc08      	pop	{r3}
 80105e8:	b001      	add	sp, #4
 80105ea:	4718      	bx	r3
      ADV_TRACE_Buffer[writepos] = buf[idx];
 80105ec:	466d      	mov	r5, sp
 80105ee:	2708      	movs	r7, #8
 80105f0:	19ed      	adds	r5, r5, r7
 80105f2:	5cad      	ldrb	r5, [r5, r2]
 80105f4:	3201      	adds	r2, #1
 80105f6:	5445      	strb	r5, [r0, r1]
 80105f8:	4665      	mov	r5, ip
 80105fa:	e7dc      	b.n	80105b6 <UTIL_ADV_TRACE_COND_FSend+0x66>
  TRACE_UnLock();
 80105fc:	f7ff ff34 	bl	8010468 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8010600:	2003      	movs	r0, #3
    return UTIL_ADV_TRACE_REGIONMASKED;
 8010602:	4240      	negs	r0, r0
 8010604:	e7ed      	b.n	80105e2 <UTIL_ADV_TRACE_COND_FSend+0x92>
    return UTIL_ADV_TRACE_GIVEUP;
 8010606:	2005      	movs	r0, #5
 8010608:	e7fb      	b.n	8010602 <UTIL_ADV_TRACE_COND_FSend+0xb2>
    return UTIL_ADV_TRACE_REGIONMASKED;
 801060a:	2006      	movs	r0, #6
 801060c:	e7f9      	b.n	8010602 <UTIL_ADV_TRACE_COND_FSend+0xb2>
 801060e:	46c0      	nop			; (mov r8, r8)
 8010610:	20000ff4 	.word	0x20000ff4
 8010614:	2000100c 	.word	0x2000100c
 8010618:	2000110c 	.word	0x2000110c

0801061c <TRACE_TxCpltCallback>:
{ 
 801061c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801061e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010622:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8010624:	4b1f      	ldr	r3, [pc, #124]	; (80106a4 <TRACE_TxCpltCallback+0x88>)
 8010626:	789a      	ldrb	r2, [r3, #2]
 8010628:	2a02      	cmp	r2, #2
 801062a:	d11e      	bne.n	801066a <TRACE_TxCpltCallback+0x4e>
	  ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801062c:	2200      	movs	r2, #0
 801062e:	709a      	strb	r2, [r3, #2]
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8010630:	821a      	strh	r2, [r3, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8010632:	8a1d      	ldrh	r5, [r3, #16]
 8010634:	8a59      	ldrh	r1, [r3, #18]
 8010636:	428d      	cmp	r5, r1
 8010638:	d02d      	beq.n	8010696 <TRACE_TxCpltCallback+0x7a>
 801063a:	8ada      	ldrh	r2, [r3, #22]
 801063c:	2a01      	cmp	r2, #1
 801063e:	d12a      	bne.n	8010696 <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8010640:	7898      	ldrb	r0, [r3, #2]
 8010642:	2801      	cmp	r0, #1
 8010644:	d117      	bne.n	8010676 <TRACE_TxCpltCallback+0x5a>
   		ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8010646:	3001      	adds	r0, #1
 8010648:	7098      	strb	r0, [r3, #2]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 801064a:	2000      	movs	r0, #0
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801064c:	881a      	ldrh	r2, [r3, #0]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 801064e:	8018      	strh	r0, [r3, #0]
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8010650:	1b52      	subs	r2, r2, r5
 8010652:	b292      	uxth	r2, r2
 8010654:	829a      	strh	r2, [r3, #20]
    	if (0u == ADV_TRACE_Ctx.TraceSentSize)
 8010656:	4282      	cmp	r2, r0
 8010658:	d10f      	bne.n	801067a <TRACE_TxCpltCallback+0x5e>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801065a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801065c:	821a      	strh	r2, [r3, #16]
      if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801065e:	8a1a      	ldrh	r2, [r3, #16]
 8010660:	4291      	cmp	r1, r2
 8010662:	d915      	bls.n	8010690 <TRACE_TxCpltCallback+0x74>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8010664:	1a89      	subs	r1, r1, r2
 8010666:	8299      	strh	r1, [r3, #20]
 8010668:	e007      	b.n	801067a <TRACE_TxCpltCallback+0x5e>
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801066a:	8a1a      	ldrh	r2, [r3, #16]
 801066c:	8a99      	ldrh	r1, [r3, #20]
 801066e:	1852      	adds	r2, r2, r1
 8010670:	05d2      	lsls	r2, r2, #23
 8010672:	0dd2      	lsrs	r2, r2, #23
 8010674:	e7dc      	b.n	8010630 <TRACE_TxCpltCallback+0x14>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8010676:	2800      	cmp	r0, #0
 8010678:	d0f1      	beq.n	801065e <TRACE_TxCpltCallback+0x42>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801067a:	f384 8810 	msr	PRIMASK, r4
    UTIL_TraceDriver.Send(&ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr], ADV_TRACE_Ctx.TraceSentSize);
 801067e:	8a18      	ldrh	r0, [r3, #16]
 8010680:	8a99      	ldrh	r1, [r3, #20]
 8010682:	4b09      	ldr	r3, [pc, #36]	; (80106a8 <TRACE_TxCpltCallback+0x8c>)
 8010684:	18c0      	adds	r0, r0, r3
 8010686:	4b09      	ldr	r3, [pc, #36]	; (80106ac <TRACE_TxCpltCallback+0x90>)
 8010688:	68db      	ldr	r3, [r3, #12]
 801068a:	9301      	str	r3, [sp, #4]
 801068c:	4798      	blx	r3
}
 801068e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8010690:	2180      	movs	r1, #128	; 0x80
 8010692:	0089      	lsls	r1, r1, #2
 8010694:	e7e6      	b.n	8010664 <TRACE_TxCpltCallback+0x48>
    UTIL_ADV_TRACE_PostSendHook();      
 8010696:	f7f3 fd77 	bl	8004188 <UTIL_ADV_TRACE_PostSendHook>
 801069a:	f384 8810 	msr	PRIMASK, r4
    TRACE_UnLock();
 801069e:	f7ff fee3 	bl	8010468 <TRACE_UnLock>
}
 80106a2:	e7f4      	b.n	801068e <TRACE_TxCpltCallback+0x72>
 80106a4:	20000ff4 	.word	0x20000ff4
 80106a8:	2000110c 	.word	0x2000110c
 80106ac:	080111f8 	.word	0x080111f8

080106b0 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80106b0:	2200      	movs	r2, #0
 80106b2:	4b02      	ldr	r3, [pc, #8]	; (80106bc <UTIL_LPM_Init+0xc>)
 80106b4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80106b6:	605a      	str	r2, [r3, #4]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80106b8:	4770      	bx	lr
 80106ba:	46c0      	nop			; (mov r8, r8)
 80106bc:	2000130c 	.word	0x2000130c

080106c0 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80106c0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106c2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80106c6:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 80106c8:	2900      	cmp	r1, #0
 80106ca:	d008      	beq.n	80106de <UTIL_LPM_SetStopMode+0x1e>
 80106cc:	2901      	cmp	r1, #1
 80106ce:	d103      	bne.n	80106d8 <UTIL_LPM_SetStopMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80106d0:	4b05      	ldr	r3, [pc, #20]	; (80106e8 <UTIL_LPM_SetStopMode+0x28>)
 80106d2:	681a      	ldr	r2, [r3, #0]
 80106d4:	4310      	orrs	r0, r2
 80106d6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106d8:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80106dc:	bd10      	pop	{r4, pc}
      StopModeDisable &= ( ~lpm_id_bm );
 80106de:	4a02      	ldr	r2, [pc, #8]	; (80106e8 <UTIL_LPM_SetStopMode+0x28>)
 80106e0:	6813      	ldr	r3, [r2, #0]
 80106e2:	4383      	bics	r3, r0
 80106e4:	6013      	str	r3, [r2, #0]
      break;
 80106e6:	e7f7      	b.n	80106d8 <UTIL_LPM_SetStopMode+0x18>
 80106e8:	2000130c 	.word	0x2000130c

080106ec <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80106ec:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106ee:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80106f2:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 80106f4:	2900      	cmp	r1, #0
 80106f6:	d008      	beq.n	801070a <UTIL_LPM_SetOffMode+0x1e>
 80106f8:	2901      	cmp	r1, #1
 80106fa:	d103      	bne.n	8010704 <UTIL_LPM_SetOffMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80106fc:	4b05      	ldr	r3, [pc, #20]	; (8010714 <UTIL_LPM_SetOffMode+0x28>)
 80106fe:	685a      	ldr	r2, [r3, #4]
 8010700:	4310      	orrs	r0, r2
 8010702:	6058      	str	r0, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010704:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8010708:	bd10      	pop	{r4, pc}
      OffModeDisable &= ( ~lpm_id_bm );
 801070a:	4a02      	ldr	r2, [pc, #8]	; (8010714 <UTIL_LPM_SetOffMode+0x28>)
 801070c:	6853      	ldr	r3, [r2, #4]
 801070e:	4383      	bics	r3, r0
 8010710:	6053      	str	r3, [r2, #4]
      break;
 8010712:	e7f7      	b.n	8010704 <UTIL_LPM_SetOffMode+0x18>
 8010714:	2000130c 	.word	0x2000130c

08010718 <UTIL_LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010718:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801071c:	b672      	cpsid	i
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
  {
    /**
     * At least one user disallows Stop Mode
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
 801071e:	2000      	movs	r0, #0
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8010720:	4b05      	ldr	r3, [pc, #20]	; (8010738 <UTIL_LPM_GetMode+0x20>)
 8010722:	6819      	ldr	r1, [r3, #0]
 8010724:	4281      	cmp	r1, r0
 8010726:	d103      	bne.n	8010730 <UTIL_LPM_GetMode+0x18>
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8010728:	6858      	ldr	r0, [r3, #4]
       */
      mode_selected = UTIL_LPM_STOPMODE;
    }
    else
    {
      mode_selected = UTIL_LPM_OFFMODE;
 801072a:	4243      	negs	r3, r0
 801072c:	4158      	adcs	r0, r3
 801072e:	3001      	adds	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010730:	f382 8810 	msr	PRIMASK, r2
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
}
 8010734:	4770      	bx	lr
 8010736:	46c0      	nop			; (mov r8, r8)
 8010738:	2000130c 	.word	0x2000130c

0801073c <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 801073c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801073e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010742:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8010744:	4b0d      	ldr	r3, [pc, #52]	; (801077c <UTIL_LPM_EnterLowPower+0x40>)
 8010746:	4c0e      	ldr	r4, [pc, #56]	; (8010780 <UTIL_LPM_EnterLowPower+0x44>)
 8010748:	681a      	ldr	r2, [r3, #0]
 801074a:	2a00      	cmp	r2, #0
 801074c:	d008      	beq.n	8010760 <UTIL_LPM_EnterLowPower+0x24>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801074e:	6823      	ldr	r3, [r4, #0]
 8010750:	9301      	str	r3, [sp, #4]
 8010752:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8010754:	6863      	ldr	r3, [r4, #4]
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
      UTIL_PowerDriver.ExitOffMode( );
 8010756:	9301      	str	r3, [sp, #4]
 8010758:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801075a:	f385 8810 	msr	PRIMASK, r5
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801075e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8010760:	685b      	ldr	r3, [r3, #4]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d004      	beq.n	8010770 <UTIL_LPM_EnterLowPower+0x34>
        UTIL_PowerDriver.EnterStopMode( );
 8010766:	68a3      	ldr	r3, [r4, #8]
 8010768:	9301      	str	r3, [sp, #4]
 801076a:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801076c:	68e3      	ldr	r3, [r4, #12]
 801076e:	e7f2      	b.n	8010756 <UTIL_LPM_EnterLowPower+0x1a>
      UTIL_PowerDriver.EnterOffMode( );
 8010770:	6923      	ldr	r3, [r4, #16]
 8010772:	9301      	str	r3, [sp, #4]
 8010774:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8010776:	6963      	ldr	r3, [r4, #20]
 8010778:	e7ed      	b.n	8010756 <UTIL_LPM_EnterLowPower+0x1a>
 801077a:	46c0      	nop			; (mov r8, r8)
 801077c:	2000130c 	.word	0x2000130c
 8010780:	080111e0 	.word	0x080111e0

08010784 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8010784:	2300      	movs	r3, #0
{
 8010786:	b510      	push	{r4, lr}
  while( size-- )
 8010788:	4293      	cmp	r3, r2
 801078a:	d100      	bne.n	801078e <UTIL_MEM_cpy_8+0xa>
    {
        *dst8++ = *src8++;
    }
}
 801078c:	bd10      	pop	{r4, pc}
        *dst8++ = *src8++;
 801078e:	5ccc      	ldrb	r4, [r1, r3]
 8010790:	54c4      	strb	r4, [r0, r3]
 8010792:	3301      	adds	r3, #1
 8010794:	e7f8      	b.n	8010788 <UTIL_MEM_cpy_8+0x4>
	...

08010798 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8010798:	4b04      	ldr	r3, [pc, #16]	; (80107ac <UTIL_MEM_set_8+0x14>)
 801079a:	3a01      	subs	r2, #1
 801079c:	b292      	uxth	r2, r2
 801079e:	429a      	cmp	r2, r3
 80107a0:	d100      	bne.n	80107a4 <UTIL_MEM_set_8+0xc>
  {
    *dst8++ = value;
  }
}
 80107a2:	4770      	bx	lr
    *dst8++ = value;
 80107a4:	7001      	strb	r1, [r0, #0]
 80107a6:	3001      	adds	r0, #1
 80107a8:	e7f7      	b.n	801079a <UTIL_MEM_set_8+0x2>
 80107aa:	46c0      	nop			; (mov r8, r8)
 80107ac:	0000ffff 	.word	0x0000ffff

080107b0 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80107b0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107b2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80107b6:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 80107b8:	4b05      	ldr	r3, [pc, #20]	; (80107d0 <UTIL_SEQ_SetTask+0x20>)
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80107ba:	00c9      	lsls	r1, r1, #3
  TaskSet |= TaskId_bm;
 80107bc:	681a      	ldr	r2, [r3, #0]
 80107be:	4302      	orrs	r2, r0
 80107c0:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80107c2:	185b      	adds	r3, r3, r1
 80107c4:	691a      	ldr	r2, [r3, #16]
 80107c6:	4310      	orrs	r0, r2
 80107c8:	6118      	str	r0, [r3, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80107ca:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 80107ce:	bd10      	pop	{r4, pc}
 80107d0:	20001314 	.word	0x20001314

080107d4 <UTIL_SEQ_PreIdle>:
 80107d4:	4770      	bx	lr

080107d6 <UTIL_SEQ_PostIdle>:
 80107d6:	4770      	bx	lr

080107d8 <SEQ_BitPosition>:
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;
 80107d8:	2300      	movs	r3, #0

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 80107da:	0c02      	lsrs	r2, r0, #16
 80107dc:	429a      	cmp	r2, r3
 80107de:	d101      	bne.n	80107e4 <SEQ_BitPosition+0xc>
 80107e0:	0400      	lsls	r0, r0, #16
 80107e2:	3310      	adds	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 80107e4:	0e02      	lsrs	r2, r0, #24
 80107e6:	d102      	bne.n	80107ee <SEQ_BitPosition+0x16>
 80107e8:	3308      	adds	r3, #8
 80107ea:	b2db      	uxtb	r3, r3
 80107ec:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 80107ee:	0f02      	lsrs	r2, r0, #28
 80107f0:	d102      	bne.n	80107f8 <SEQ_BitPosition+0x20>
 80107f2:	3304      	adds	r3, #4
 80107f4:	b2db      	uxtb	r3, r3
 80107f6:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];

  return (uint8_t)(31U-n);
 80107f8:	221f      	movs	r2, #31
 80107fa:	1ad3      	subs	r3, r2, r3
 80107fc:	4a02      	ldr	r2, [pc, #8]	; (8010808 <SEQ_BitPosition+0x30>)
  n += SEQ_clz_table_4bit[Value >> (32-4)];
 80107fe:	0f00      	lsrs	r0, r0, #28
  return (uint8_t)(31U-n);
 8010800:	5c10      	ldrb	r0, [r2, r0]
 8010802:	1a18      	subs	r0, r3, r0
 8010804:	b2c0      	uxtb	r0, r0
}
 8010806:	4770      	bx	lr
 8010808:	0801184c 	.word	0x0801184c

0801080c <UTIL_SEQ_Run>:
{
 801080c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  super_mask_backup = SuperMask;
 801080e:	4e2f      	ldr	r6, [pc, #188]	; (80108cc <UTIL_SEQ_Run+0xc0>)
 8010810:	6873      	ldr	r3, [r6, #4]
  SuperMask &= Mask_bm;
 8010812:	4018      	ands	r0, r3
  super_mask_backup = SuperMask;
 8010814:	9301      	str	r3, [sp, #4]
  SuperMask &= Mask_bm;
 8010816:	6070      	str	r0, [r6, #4]
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8010818:	4c2d      	ldr	r4, [pc, #180]	; (80108d0 <UTIL_SEQ_Run+0xc4>)
 801081a:	6830      	ldr	r0, [r6, #0]
 801081c:	6822      	ldr	r2, [r4, #0]
 801081e:	6873      	ldr	r3, [r6, #4]
 8010820:	4002      	ands	r2, r0
 8010822:	4213      	tst	r3, r2
 8010824:	d037      	beq.n	8010896 <UTIL_SEQ_Run+0x8a>
 8010826:	68a1      	ldr	r1, [r4, #8]
 8010828:	6862      	ldr	r2, [r4, #4]
 801082a:	000d      	movs	r5, r1
 801082c:	4015      	ands	r5, r2
 801082e:	4211      	tst	r1, r2
 8010830:	d131      	bne.n	8010896 <UTIL_SEQ_Run+0x8a>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8010832:	6922      	ldr	r2, [r4, #16]
 8010834:	4003      	ands	r3, r0
 8010836:	0010      	movs	r0, r2
 8010838:	4018      	ands	r0, r3
 801083a:	421a      	tst	r2, r3
 801083c:	d102      	bne.n	8010844 <UTIL_SEQ_Run+0x38>
      counter++;
 801083e:	2501      	movs	r5, #1
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8010840:	69a0      	ldr	r0, [r4, #24]
 8010842:	4018      	ands	r0, r3
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8010844:	00ed      	lsls	r5, r5, #3
 8010846:	1963      	adds	r3, r4, r5
 8010848:	695a      	ldr	r2, [r3, #20]
 801084a:	4202      	tst	r2, r0
 801084c:	d102      	bne.n	8010854 <UTIL_SEQ_Run+0x48>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801084e:	2201      	movs	r2, #1
 8010850:	4252      	negs	r2, r2
 8010852:	615a      	str	r2, [r3, #20]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8010854:	1965      	adds	r5, r4, r5
 8010856:	696f      	ldr	r7, [r5, #20]
 8010858:	4038      	ands	r0, r7
 801085a:	f7ff ffbd 	bl	80107d8 <SEQ_BitPosition>
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801085e:	2301      	movs	r3, #1
 8010860:	4083      	lsls	r3, r0
 8010862:	439f      	bics	r7, r3
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8010864:	60e0      	str	r0, [r4, #12]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8010866:	616f      	str	r7, [r5, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010868:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801086c:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 801086e:	2301      	movs	r3, #1
 8010870:	68e2      	ldr	r2, [r4, #12]
 8010872:	4093      	lsls	r3, r2
 8010874:	6822      	ldr	r2, [r4, #0]
 8010876:	439a      	bics	r2, r3
 8010878:	6022      	str	r2, [r4, #0]
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801087a:	69a2      	ldr	r2, [r4, #24]
 801087c:	439a      	bics	r2, r3
 801087e:	61a2      	str	r2, [r4, #24]
 8010880:	6922      	ldr	r2, [r4, #16]
 8010882:	439a      	bics	r2, r3
 8010884:	6122      	str	r2, [r4, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010886:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 801088a:	68e3      	ldr	r3, [r4, #12]
 801088c:	4a11      	ldr	r2, [pc, #68]	; (80108d4 <UTIL_SEQ_Run+0xc8>)
 801088e:	009b      	lsls	r3, r3, #2
 8010890:	589b      	ldr	r3, [r3, r2]
 8010892:	4798      	blx	r3
 8010894:	e7c0      	b.n	8010818 <UTIL_SEQ_Run+0xc>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8010896:	2301      	movs	r3, #1
 8010898:	425b      	negs	r3, r3
 801089a:	60e3      	str	r3, [r4, #12]
  UTIL_SEQ_PreIdle( );
 801089c:	f7ff ff9a 	bl	80107d4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80108a0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80108a4:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 80108a6:	6822      	ldr	r2, [r4, #0]
 80108a8:	6833      	ldr	r3, [r6, #0]
 80108aa:	6861      	ldr	r1, [r4, #4]
 80108ac:	4013      	ands	r3, r2
 80108ae:	6872      	ldr	r2, [r6, #4]
 80108b0:	4013      	ands	r3, r2
 80108b2:	68a2      	ldr	r2, [r4, #8]
 80108b4:	400a      	ands	r2, r1
 80108b6:	4313      	orrs	r3, r2
 80108b8:	d101      	bne.n	80108be <UTIL_SEQ_Run+0xb2>
	UTIL_SEQ_Idle( );
 80108ba:	f7f3 fc09 	bl	80040d0 <UTIL_SEQ_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80108be:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 80108c2:	f7ff ff88 	bl	80107d6 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 80108c6:	9b01      	ldr	r3, [sp, #4]
 80108c8:	6073      	str	r3, [r6, #4]
}
 80108ca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80108cc:	20000194 	.word	0x20000194
 80108d0:	20001314 	.word	0x20001314
 80108d4:	20001334 	.word	0x20001334

080108d8 <UTIL_SEQ_RegTask>:
{
 80108d8:	b570      	push	{r4, r5, r6, lr}
 80108da:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80108dc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80108e0:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80108e2:	f7ff ff79 	bl	80107d8 <SEQ_BitPosition>
 80108e6:	4b03      	ldr	r3, [pc, #12]	; (80108f4 <UTIL_SEQ_RegTask+0x1c>)
 80108e8:	0080      	lsls	r0, r0, #2
 80108ea:	50c4      	str	r4, [r0, r3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80108ec:	f385 8810 	msr	PRIMASK, r5
}
 80108f0:	bd70      	pop	{r4, r5, r6, pc}
 80108f2:	46c0      	nop			; (mov r8, r8)
 80108f4:	20001334 	.word	0x20001334

080108f8 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 80108f8:	b082      	sub	sp, #8
 80108fa:	b513      	push	{r0, r1, r4, lr}
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds + b.Seconds;
 80108fc:	18c9      	adds	r1, r1, r3
{
 80108fe:	9305      	str	r3, [sp, #20]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8010900:	ab05      	add	r3, sp, #20
 8010902:	889c      	ldrh	r4, [r3, #4]
 8010904:	18a2      	adds	r2, r4, r2
  if( c.SubSeconds >= 1000 )
 8010906:	24fa      	movs	r4, #250	; 0xfa
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8010908:	b293      	uxth	r3, r2
 801090a:	b212      	sxth	r2, r2
  if( c.SubSeconds >= 1000 )
 801090c:	00a4      	lsls	r4, r4, #2
 801090e:	42a2      	cmp	r2, r4
 8010910:	db03      	blt.n	801091a <SysTimeAdd+0x22>
  {
    c.Seconds++;
    c.SubSeconds -= 1000;
 8010912:	4a05      	ldr	r2, [pc, #20]	; (8010928 <SysTimeAdd+0x30>)
    c.Seconds++;
 8010914:	3101      	adds	r1, #1
    c.SubSeconds -= 1000;
 8010916:	189b      	adds	r3, r3, r2
 8010918:	b21a      	sxth	r2, r3
  }
  return c;
 801091a:	6001      	str	r1, [r0, #0]
 801091c:	8082      	strh	r2, [r0, #4]
}
 801091e:	bc16      	pop	{r1, r2, r4}
 8010920:	bc08      	pop	{r3}
 8010922:	b002      	add	sp, #8
 8010924:	4718      	bx	r3
 8010926:	46c0      	nop			; (mov r8, r8)
 8010928:	fffffc18 	.word	0xfffffc18

0801092c <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801092c:	b082      	sub	sp, #8
 801092e:	b513      	push	{r0, r1, r4, lr}
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds - b.Seconds;
 8010930:	1ac9      	subs	r1, r1, r3
{
 8010932:	9305      	str	r3, [sp, #20]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8010934:	ab05      	add	r3, sp, #20
 8010936:	889b      	ldrh	r3, [r3, #4]
 8010938:	1ad2      	subs	r2, r2, r3
 801093a:	b293      	uxth	r3, r2
 801093c:	b214      	sxth	r4, r2
  if( c.SubSeconds < 0 )
 801093e:	0412      	lsls	r2, r2, #16
 8010940:	d504      	bpl.n	801094c <SysTimeSub+0x20>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
 8010942:	22fa      	movs	r2, #250	; 0xfa
 8010944:	0092      	lsls	r2, r2, #2
 8010946:	189b      	adds	r3, r3, r2
    c.Seconds--;
 8010948:	3901      	subs	r1, #1
    c.SubSeconds += 1000;
 801094a:	b21c      	sxth	r4, r3
  }
  return c;
 801094c:	6001      	str	r1, [r0, #0]
 801094e:	8084      	strh	r4, [r0, #4]
}
 8010950:	bc16      	pop	{r1, r2, r4}
 8010952:	bc08      	pop	{r3}
 8010954:	b002      	add	sp, #8
 8010956:	4718      	bx	r3

08010958 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8010958:	2300      	movs	r3, #0
{
 801095a:	b530      	push	{r4, r5, lr}

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801095c:	4c11      	ldr	r4, [pc, #68]	; (80109a4 <SysTimeSet+0x4c>)
{
 801095e:	b087      	sub	sp, #28
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8010960:	ad04      	add	r5, sp, #16
 8010962:	80ab      	strh	r3, [r5, #4]
 8010964:	9304      	str	r3, [sp, #16]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8010966:	6923      	ldr	r3, [r4, #16]
{
 8010968:	9002      	str	r0, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801096a:	a805      	add	r0, sp, #20
 801096c:	9301      	str	r3, [sp, #4]
{
 801096e:	9103      	str	r1, [sp, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8010970:	4798      	blx	r3
  c.Seconds = a.Seconds - b.Seconds;
 8010972:	9b02      	ldr	r3, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8010974:	9004      	str	r0, [sp, #16]
  c.Seconds = a.Seconds - b.Seconds;
 8010976:	1a18      	subs	r0, r3, r0
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8010978:	ab02      	add	r3, sp, #8
 801097a:	88aa      	ldrh	r2, [r5, #4]
 801097c:	889b      	ldrh	r3, [r3, #4]
 801097e:	1a9b      	subs	r3, r3, r2
 8010980:	b29a      	uxth	r2, r3
 8010982:	b21d      	sxth	r5, r3
  if( c.SubSeconds < 0 )
 8010984:	041b      	lsls	r3, r3, #16
 8010986:	d504      	bpl.n	8010992 <SysTimeSet+0x3a>
    c.SubSeconds += 1000;
 8010988:	23fa      	movs	r3, #250	; 0xfa
 801098a:	009b      	lsls	r3, r3, #2
 801098c:	18d2      	adds	r2, r2, r3
    c.Seconds--;
 801098e:	3801      	subs	r0, #1
    c.SubSeconds += 1000;
 8010990:	b215      	sxth	r5, r2

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8010992:	6823      	ldr	r3, [r4, #0]
 8010994:	9301      	str	r3, [sp, #4]
 8010996:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8010998:	68a3      	ldr	r3, [r4, #8]
 801099a:	0028      	movs	r0, r5
 801099c:	9301      	str	r3, [sp, #4]
 801099e:	4798      	blx	r3
}
 80109a0:	b007      	add	sp, #28
 80109a2:	bd30      	pop	{r4, r5, pc}
 80109a4:	080111a0 	.word	0x080111a0

080109a8 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 80109a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80109aa:	2300      	movs	r3, #0
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80109ac:	4e12      	ldr	r6, [pc, #72]	; (80109f8 <SysTimeGet+0x50>)
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80109ae:	aa02      	add	r2, sp, #8
 80109b0:	8093      	strh	r3, [r2, #4]
 80109b2:	9302      	str	r3, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80109b4:	6933      	ldr	r3, [r6, #16]
{
 80109b6:	0004      	movs	r4, r0
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80109b8:	a803      	add	r0, sp, #12
 80109ba:	9301      	str	r3, [sp, #4]
 80109bc:	4798      	blx	r3

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80109be:	68f3      	ldr	r3, [r6, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80109c0:	9002      	str	r0, [sp, #8]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80109c2:	9301      	str	r3, [sp, #4]
 80109c4:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80109c6:	6873      	ldr	r3, [r6, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80109c8:	0005      	movs	r5, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80109ca:	9301      	str	r3, [sp, #4]
 80109cc:	4798      	blx	r3
  if( c.SubSeconds >= 1000 )
 80109ce:	22fa      	movs	r2, #250	; 0xfa
  c.Seconds = a.Seconds + b.Seconds;
 80109d0:	9b02      	ldr	r3, [sp, #8]
  if( c.SubSeconds >= 1000 )
 80109d2:	0092      	lsls	r2, r2, #2
  c.Seconds = a.Seconds + b.Seconds;
 80109d4:	18c0      	adds	r0, r0, r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80109d6:	ab02      	add	r3, sp, #8
 80109d8:	889b      	ldrh	r3, [r3, #4]
 80109da:	195b      	adds	r3, r3, r5
 80109dc:	b299      	uxth	r1, r3
 80109de:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 80109e0:	4293      	cmp	r3, r2
 80109e2:	db03      	blt.n	80109ec <SysTimeGet+0x44>
    c.SubSeconds -= 1000;
 80109e4:	4b05      	ldr	r3, [pc, #20]	; (80109fc <SysTimeGet+0x54>)
    c.Seconds++;
 80109e6:	3001      	adds	r0, #1
    c.SubSeconds -= 1000;
 80109e8:	18c9      	adds	r1, r1, r3
 80109ea:	b20b      	sxth	r3, r1

  sysTime = SysTimeAdd( DeltaTime, calendarTime );

  return sysTime;
 80109ec:	6020      	str	r0, [r4, #0]
}
 80109ee:	0020      	movs	r0, r4
  return sysTime;
 80109f0:	80a3      	strh	r3, [r4, #4]
}
 80109f2:	b004      	add	sp, #16
 80109f4:	bd70      	pop	{r4, r5, r6, pc}
 80109f6:	46c0      	nop			; (mov r8, r8)
 80109f8:	080111a0 	.word	0x080111a0
 80109fc:	fffffc18 	.word	0xfffffc18

08010a00 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8010a00:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8010a02:	2300      	movs	r3, #0
 8010a04:	466d      	mov	r5, sp
{
 8010a06:	0004      	movs	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8010a08:	9300      	str	r3, [sp, #0]
 8010a0a:	80ab      	strh	r3, [r5, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8010a0c:	4b04      	ldr	r3, [pc, #16]	; (8010a20 <SysTimeGetMcuTime+0x20>)
 8010a0e:	a801      	add	r0, sp, #4
 8010a10:	691b      	ldr	r3, [r3, #16]
 8010a12:	4798      	blx	r3
  
  return calendarTime;
 8010a14:	0023      	movs	r3, r4
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8010a16:	9000      	str	r0, [sp, #0]
  return calendarTime;
 8010a18:	cd06      	ldmia	r5!, {r1, r2}
 8010a1a:	c306      	stmia	r3!, {r1, r2}
}
 8010a1c:	0020      	movs	r0, r4
 8010a1e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8010a20:	080111a0 	.word	0x080111a0

08010a24 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8010a24:	b530      	push	{r4, r5, lr}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8010a26:	4d0f      	ldr	r5, [pc, #60]	; (8010a64 <SysTimeToMs+0x40>)
{
 8010a28:	b085      	sub	sp, #20
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8010a2a:	68eb      	ldr	r3, [r5, #12]
{
 8010a2c:	9103      	str	r1, [sp, #12]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8010a2e:	9301      	str	r3, [sp, #4]
{
 8010a30:	9002      	str	r0, [sp, #8]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8010a32:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8010a34:	686b      	ldr	r3, [r5, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8010a36:	0004      	movs	r4, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8010a38:	9301      	str	r3, [sp, #4]
 8010a3a:	4798      	blx	r3
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8010a3c:	aa02      	add	r2, sp, #8
 8010a3e:	8892      	ldrh	r2, [r2, #4]
  c.Seconds = a.Seconds - b.Seconds;
 8010a40:	9b02      	ldr	r3, [sp, #8]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8010a42:	1b12      	subs	r2, r2, r4
  c.Seconds = a.Seconds - b.Seconds;
 8010a44:	1a1b      	subs	r3, r3, r0
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8010a46:	b291      	uxth	r1, r2
 8010a48:	b214      	sxth	r4, r2
  if( c.SubSeconds < 0 )
 8010a4a:	0412      	lsls	r2, r2, #16
 8010a4c:	d504      	bpl.n	8010a58 <SysTimeToMs+0x34>
    c.SubSeconds += 1000;
 8010a4e:	22fa      	movs	r2, #250	; 0xfa
 8010a50:	0092      	lsls	r2, r2, #2
 8010a52:	1889      	adds	r1, r1, r2
    c.Seconds--;
 8010a54:	3b01      	subs	r3, #1
    c.SubSeconds += 1000;
 8010a56:	b20c      	sxth	r4, r1
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8010a58:	20fa      	movs	r0, #250	; 0xfa
 8010a5a:	0080      	lsls	r0, r0, #2
 8010a5c:	4358      	muls	r0, r3
 8010a5e:	1900      	adds	r0, r0, r4
}
 8010a60:	b005      	add	sp, #20
 8010a62:	bd30      	pop	{r4, r5, pc}
 8010a64:	080111a0 	.word	0x080111a0

08010a68 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8010a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a6a:	000f      	movs	r7, r1
  uint32_t seconds = timeMs / 1000;
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8010a6c:	26fa      	movs	r6, #250	; 0xfa
  uint32_t seconds = timeMs / 1000;
 8010a6e:	21fa      	movs	r1, #250	; 0xfa
{
 8010a70:	b085      	sub	sp, #20
  uint32_t seconds = timeMs / 1000;
 8010a72:	0089      	lsls	r1, r1, #2
{
 8010a74:	0004      	movs	r4, r0
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8010a76:	00b6      	lsls	r6, r6, #2
  uint32_t seconds = timeMs / 1000;
 8010a78:	0038      	movs	r0, r7
 8010a7a:	f7ef fb75 	bl	8000168 <__udivsi3>
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8010a7e:	0031      	movs	r1, r6
 8010a80:	4341      	muls	r1, r0
 8010a82:	1a7f      	subs	r7, r7, r1
 8010a84:	b2bb      	uxth	r3, r7
  SysTime_t DeltaTime = { 0 };

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8010a86:	4f0e      	ldr	r7, [pc, #56]	; (8010ac0 <SysTimeFromMs+0x58>)
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8010a88:	9301      	str	r3, [sp, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8010a8a:	68fb      	ldr	r3, [r7, #12]
  uint32_t seconds = timeMs / 1000;
 8010a8c:	0005      	movs	r5, r0
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8010a8e:	9302      	str	r3, [sp, #8]
 8010a90:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8010a92:	687b      	ldr	r3, [r7, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8010a94:	9002      	str	r0, [sp, #8]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8010a96:	9303      	str	r3, [sp, #12]
 8010a98:	4798      	blx	r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8010a9a:	9a01      	ldr	r2, [sp, #4]
 8010a9c:	9b02      	ldr	r3, [sp, #8]
 8010a9e:	4694      	mov	ip, r2
 8010aa0:	4463      	add	r3, ip
 8010aa2:	b219      	sxth	r1, r3
  c.Seconds = a.Seconds + b.Seconds;
 8010aa4:	1945      	adds	r5, r0, r5
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8010aa6:	b298      	uxth	r0, r3
  if( c.SubSeconds >= 1000 )
 8010aa8:	42b1      	cmp	r1, r6
 8010aaa:	db03      	blt.n	8010ab4 <SysTimeFromMs+0x4c>
    c.SubSeconds -= 1000;
 8010aac:	4b05      	ldr	r3, [pc, #20]	; (8010ac4 <SysTimeFromMs+0x5c>)
    c.Seconds++;
 8010aae:	3501      	adds	r5, #1
    c.SubSeconds -= 1000;
 8010ab0:	18c0      	adds	r0, r0, r3
 8010ab2:	b201      	sxth	r1, r0
  return SysTimeAdd( sysTime, DeltaTime );
}
 8010ab4:	0020      	movs	r0, r4
  return c;
 8010ab6:	6025      	str	r5, [r4, #0]
 8010ab8:	80a1      	strh	r1, [r4, #4]
}
 8010aba:	b005      	add	sp, #20
 8010abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010abe:	46c0      	nop			; (mov r8, r8)
 8010ac0:	080111a0 	.word	0x080111a0
 8010ac4:	fffffc18 	.word	0xfffffc18

08010ac8 <UTIL_TIMER_Init>:
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8010ac8:	2200      	movs	r2, #0
{
 8010aca:	b510      	push	{r4, lr}
  TimerListHead = NULL;
 8010acc:	4b02      	ldr	r3, [pc, #8]	; (8010ad8 <UTIL_TIMER_Init+0x10>)
 8010ace:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8010ad0:	4b02      	ldr	r3, [pc, #8]	; (8010adc <UTIL_TIMER_Init+0x14>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	4798      	blx	r3
}
 8010ad6:	bd10      	pop	{r4, pc}
 8010ad8:	200013b4 	.word	0x200013b4
 8010adc:	080111b4 	.word	0x080111b4

08010ae0 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 8010ae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ae2:	0004      	movs	r4, r0
 8010ae4:	0017      	movs	r7, r2
 8010ae6:	0008      	movs	r0, r1
 8010ae8:	001e      	movs	r6, r3
    TimerObject->Next = NULL;
    return UTIL_TIMER_OK;
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 8010aea:	2501      	movs	r5, #1
  if((TimerObject != NULL) && (Callback != NULL))
 8010aec:	2c00      	cmp	r4, #0
 8010aee:	d00f      	beq.n	8010b10 <UTIL_TIMER_Create+0x30>
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d00d      	beq.n	8010b10 <UTIL_TIMER_Create+0x30>
    TimerObject->Timestamp = 0U;
 8010af4:	2500      	movs	r5, #0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8010af6:	4b07      	ldr	r3, [pc, #28]	; (8010b14 <UTIL_TIMER_Create+0x34>)
    TimerObject->Timestamp = 0U;
 8010af8:	6025      	str	r5, [r4, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8010afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010afc:	9301      	str	r3, [sp, #4]
 8010afe:	4798      	blx	r3
    TimerObject->argument = Argument;
 8010b00:	9b08      	ldr	r3, [sp, #32]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8010b02:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8010b04:	8125      	strh	r5, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 8010b06:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8010b08:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8010b0a:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8010b0c:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8010b0e:	6165      	str	r5, [r4, #20]
  }
}
 8010b10:	0028      	movs	r0, r5
 8010b12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010b14:	080111b4 	.word	0x080111b4

08010b18 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8010b18:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8010b1a:	4c03      	ldr	r4, [pc, #12]	; (8010b28 <UTIL_TIMER_GetCurrentTime+0x10>)
 8010b1c:	69e3      	ldr	r3, [r4, #28]
 8010b1e:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8010b20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010b22:	4798      	blx	r3
}
 8010b24:	bd10      	pop	{r4, pc}
 8010b26:	46c0      	nop			; (mov r8, r8)
 8010b28:	080111b4 	.word	0x080111b4

08010b2c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8010b2c:	b570      	push	{r4, r5, r6, lr}
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8010b2e:	4d06      	ldr	r5, [pc, #24]	; (8010b48 <UTIL_TIMER_GetElapsedTime+0x1c>)
{
 8010b30:	0006      	movs	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8010b32:	69eb      	ldr	r3, [r5, #28]
 8010b34:	4798      	blx	r3
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8010b36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8010b38:	0004      	movs	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8010b3a:	0030      	movs	r0, r6
 8010b3c:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8010b3e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8010b40:	1a20      	subs	r0, r4, r0
 8010b42:	4798      	blx	r3
}
 8010b44:	bd70      	pop	{r4, r5, r6, pc}
 8010b46:	46c0      	nop			; (mov r8, r8)
 8010b48:	080111b4 	.word	0x080111b4

08010b4c <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8010b4c:	4a05      	ldr	r2, [pc, #20]	; (8010b64 <TimerExists+0x18>)
{
 8010b4e:	0003      	movs	r3, r0
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8010b50:	6810      	ldr	r0, [r2, #0]

  while( cur != NULL )
 8010b52:	2800      	cmp	r0, #0
 8010b54:	d100      	bne.n	8010b58 <TimerExists+0xc>
      return true;
    }
    cur = cur->Next;
  }
  return false;
}
 8010b56:	4770      	bx	lr
    if( cur == TimerObject )
 8010b58:	4298      	cmp	r0, r3
 8010b5a:	d001      	beq.n	8010b60 <TimerExists+0x14>
    cur = cur->Next;
 8010b5c:	6940      	ldr	r0, [r0, #20]
 8010b5e:	e7f8      	b.n	8010b52 <TimerExists+0x6>
      return true;
 8010b60:	2001      	movs	r0, #1
 8010b62:	e7f8      	b.n	8010b56 <TimerExists+0xa>
 8010b64:	200013b4 	.word	0x200013b4

08010b68 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8010b68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8010b6a:	4e0c      	ldr	r6, [pc, #48]	; (8010b9c <TimerSetTimeout+0x34>)
{
 8010b6c:	0004      	movs	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8010b6e:	6a33      	ldr	r3, [r6, #32]
 8010b70:	9301      	str	r3, [sp, #4]
 8010b72:	4798      	blx	r3
  TimerObject->IsPending = 1;
 8010b74:	2301      	movs	r3, #1
 8010b76:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8010b78:	69b3      	ldr	r3, [r6, #24]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8010b7a:	0005      	movs	r5, r0
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8010b7c:	6827      	ldr	r7, [r4, #0]
 8010b7e:	9301      	str	r3, [sp, #4]
 8010b80:	4798      	blx	r3
 8010b82:	1940      	adds	r0, r0, r5
 8010b84:	4287      	cmp	r7, r0
 8010b86:	d203      	bcs.n	8010b90 <TimerSetTimeout+0x28>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8010b88:	9b01      	ldr	r3, [sp, #4]
 8010b8a:	4798      	blx	r3
 8010b8c:	1945      	adds	r5, r0, r5
 8010b8e:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8010b90:	68b3      	ldr	r3, [r6, #8]
 8010b92:	6820      	ldr	r0, [r4, #0]
 8010b94:	9301      	str	r3, [sp, #4]
 8010b96:	4798      	blx	r3
}
 8010b98:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8010b9a:	46c0      	nop			; (mov r8, r8)
 8010b9c:	080111b4 	.word	0x080111b4

08010ba0 <UTIL_TIMER_Stop>:
{
 8010ba0:	0003      	movs	r3, r0
 8010ba2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ret = UTIL_TIMER_INVALID_PARAM;
 8010ba4:	2001      	movs	r0, #1
  if (NULL != TimerObject)
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d016      	beq.n	8010bd8 <UTIL_TIMER_Stop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010baa:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010bae:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8010bb0:	4c11      	ldr	r4, [pc, #68]	; (8010bf8 <UTIL_TIMER_Stop+0x58>)
    TimerObject->IsReloadStopped = 1U;
 8010bb2:	7298      	strb	r0, [r3, #10]
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8010bb4:	6822      	ldr	r2, [r4, #0]
    if(NULL != TimerListHead)
 8010bb6:	2a00      	cmp	r2, #0
 8010bb8:	d00b      	beq.n	8010bd2 <UTIL_TIMER_Stop+0x32>
      TimerObject->IsRunning = 0U;
 8010bba:	2100      	movs	r1, #0
 8010bbc:	7259      	strb	r1, [r3, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8010bbe:	4293      	cmp	r3, r2
 8010bc0:	d111      	bne.n	8010be6 <UTIL_TIMER_Stop+0x46>
 8010bc2:	695e      	ldr	r6, [r3, #20]
          TimerListHead->IsPending = 0;
 8010bc4:	7219      	strb	r1, [r3, #8]
          if( TimerListHead->Next != NULL )
 8010bc6:	428e      	cmp	r6, r1
 8010bc8:	d007      	beq.n	8010bda <UTIL_TIMER_Stop+0x3a>
            TimerSetTimeout( TimerListHead );
 8010bca:	0030      	movs	r0, r6
            TimerListHead = TimerListHead->Next;
 8010bcc:	6026      	str	r6, [r4, #0]
            TimerSetTimeout( TimerListHead );
 8010bce:	f7ff ffcb 	bl	8010b68 <TimerSetTimeout>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010bd2:	f385 8810 	msr	PRIMASK, r5
}
 8010bd6:	2000      	movs	r0, #0
}
 8010bd8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
            UTIL_TimerDriver.StopTimerEvt( );
 8010bda:	4b08      	ldr	r3, [pc, #32]	; (8010bfc <UTIL_TIMER_Stop+0x5c>)
 8010bdc:	68db      	ldr	r3, [r3, #12]
 8010bde:	9301      	str	r3, [sp, #4]
 8010be0:	4798      	blx	r3
            TimerListHead = NULL;
 8010be2:	6026      	str	r6, [r4, #0]
 8010be4:	e7f5      	b.n	8010bd2 <UTIL_TIMER_Stop+0x32>
            cur = cur->Next;
 8010be6:	0011      	movs	r1, r2
 8010be8:	6952      	ldr	r2, [r2, #20]
        while( cur != NULL )
 8010bea:	2a00      	cmp	r2, #0
 8010bec:	d0f1      	beq.n	8010bd2 <UTIL_TIMER_Stop+0x32>
          if( cur == TimerObject )
 8010bee:	4293      	cmp	r3, r2
 8010bf0:	d1f9      	bne.n	8010be6 <UTIL_TIMER_Stop+0x46>
            if( cur->Next != NULL )
 8010bf2:	695b      	ldr	r3, [r3, #20]
 8010bf4:	614b      	str	r3, [r1, #20]
 8010bf6:	e7ec      	b.n	8010bd2 <UTIL_TIMER_Stop+0x32>
 8010bf8:	200013b4 	.word	0x200013b4
 8010bfc:	080111b4 	.word	0x080111b4

08010c00 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8010c00:	4b09      	ldr	r3, [pc, #36]	; (8010c28 <TimerInsertTimer+0x28>)
 8010c02:	681b      	ldr	r3, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8010c04:	695a      	ldr	r2, [r3, #20]

  while (cur->Next != NULL )
 8010c06:	6959      	ldr	r1, [r3, #20]
 8010c08:	2900      	cmp	r1, #0
 8010c0a:	d102      	bne.n	8010c12 <TimerInsertTimer+0x12>
        TimerObject->Next = next;
        return;

    }
  }
  cur->Next = TimerObject;
 8010c0c:	6158      	str	r0, [r3, #20]
  TimerObject->Next = NULL;
 8010c0e:	6141      	str	r1, [r0, #20]
 8010c10:	e009      	b.n	8010c26 <TimerInsertTimer+0x26>
    if( TimerObject->Timestamp  > next->Timestamp )
 8010c12:	6801      	ldr	r1, [r0, #0]
 8010c14:	468c      	mov	ip, r1
 8010c16:	6811      	ldr	r1, [r2, #0]
 8010c18:	458c      	cmp	ip, r1
 8010c1a:	d902      	bls.n	8010c22 <TimerInsertTimer+0x22>
        next = next->Next;
 8010c1c:	0013      	movs	r3, r2
 8010c1e:	6952      	ldr	r2, [r2, #20]
 8010c20:	e7f1      	b.n	8010c06 <TimerInsertTimer+0x6>
        cur->Next = TimerObject;
 8010c22:	6158      	str	r0, [r3, #20]
        TimerObject->Next = next;
 8010c24:	6142      	str	r2, [r0, #20]
}
 8010c26:	4770      	bx	lr
 8010c28:	200013b4 	.word	0x200013b4

08010c2c <TimerInsertNewHeadTimer>:
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8010c2c:	4a05      	ldr	r2, [pc, #20]	; (8010c44 <TimerInsertNewHeadTimer+0x18>)
{
 8010c2e:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8010c30:	6813      	ldr	r3, [r2, #0]

  if( cur != NULL )
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d001      	beq.n	8010c3a <TimerInsertNewHeadTimer+0xe>
  {
    cur->IsPending = 0;
 8010c36:	2100      	movs	r1, #0
 8010c38:	7219      	strb	r1, [r3, #8]
  }

  TimerObject->Next = cur;
 8010c3a:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8010c3c:	6010      	str	r0, [r2, #0]
  TimerSetTimeout( TimerListHead );
 8010c3e:	f7ff ff93 	bl	8010b68 <TimerSetTimeout>
}
 8010c42:	bd10      	pop	{r4, pc}
 8010c44:	200013b4 	.word	0x200013b4

08010c48 <UTIL_TIMER_Start>:
{
 8010c48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c4a:	0004      	movs	r4, r0
    ret =  UTIL_TIMER_INVALID_PARAM;
 8010c4c:	2501      	movs	r5, #1
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8010c4e:	2800      	cmp	r0, #0
 8010c50:	d025      	beq.n	8010c9e <UTIL_TIMER_Start+0x56>
 8010c52:	f7ff ff7b 	bl	8010b4c <TimerExists>
 8010c56:	2800      	cmp	r0, #0
 8010c58:	d121      	bne.n	8010c9e <UTIL_TIMER_Start+0x56>
 8010c5a:	7a65      	ldrb	r5, [r4, #9]
 8010c5c:	2d00      	cmp	r5, #0
 8010c5e:	d12e      	bne.n	8010cbe <UTIL_TIMER_Start+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c60:	f3ef 8310 	mrs	r3, PRIMASK
 8010c64:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8010c66:	b672      	cpsid	i
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8010c68:	4e16      	ldr	r6, [pc, #88]	; (8010cc4 <UTIL_TIMER_Start+0x7c>)
    ticks = TimerObject->ReloadValue;
 8010c6a:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8010c6c:	6a33      	ldr	r3, [r6, #32]
 8010c6e:	9301      	str	r3, [sp, #4]
 8010c70:	4798      	blx	r3
    TimerObject->Timestamp = ticks;
 8010c72:	4287      	cmp	r7, r0
 8010c74:	d200      	bcs.n	8010c78 <UTIL_TIMER_Start+0x30>
 8010c76:	0007      	movs	r7, r0
    TimerObject->IsPending = 0U;
 8010c78:	2380      	movs	r3, #128	; 0x80
 8010c7a:	005b      	lsls	r3, r3, #1
 8010c7c:	8123      	strh	r3, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 8010c7e:	2300      	movs	r3, #0
    TimerObject->Timestamp = ticks;
 8010c80:	6027      	str	r7, [r4, #0]
    if( TimerListHead == NULL )
 8010c82:	4f11      	ldr	r7, [pc, #68]	; (8010cc8 <UTIL_TIMER_Start+0x80>)
    TimerObject->IsReloadStopped = 0U;
 8010c84:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d10a      	bne.n	8010ca2 <UTIL_TIMER_Start+0x5a>
      UTIL_TimerDriver.SetTimerContext();
 8010c8c:	6933      	ldr	r3, [r6, #16]
 8010c8e:	9301      	str	r3, [sp, #4]
 8010c90:	4798      	blx	r3
        TimerInsertNewHeadTimer( TimerObject);
 8010c92:	0020      	movs	r0, r4
 8010c94:	f7ff ffca 	bl	8010c2c <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010c98:	9b00      	ldr	r3, [sp, #0]
 8010c9a:	f383 8810 	msr	PRIMASK, r3
}
 8010c9e:	0028      	movs	r0, r5
 8010ca0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8010ca2:	69b3      	ldr	r3, [r6, #24]
 8010ca4:	9301      	str	r3, [sp, #4]
 8010ca6:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8010ca8:	6823      	ldr	r3, [r4, #0]
 8010caa:	18c0      	adds	r0, r0, r3
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8010cac:	683b      	ldr	r3, [r7, #0]
      TimerObject->Timestamp += elapsedTime;
 8010cae:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	4298      	cmp	r0, r3
 8010cb4:	d3ed      	bcc.n	8010c92 <UTIL_TIMER_Start+0x4a>
        TimerInsertTimer( TimerObject);
 8010cb6:	0020      	movs	r0, r4
 8010cb8:	f7ff ffa2 	bl	8010c00 <TimerInsertTimer>
 8010cbc:	e7ec      	b.n	8010c98 <UTIL_TIMER_Start+0x50>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8010cbe:	2501      	movs	r5, #1
 8010cc0:	e7ed      	b.n	8010c9e <UTIL_TIMER_Start+0x56>
 8010cc2:	46c0      	nop			; (mov r8, r8)
 8010cc4:	080111b4 	.word	0x080111b4
 8010cc8:	200013b4 	.word	0x200013b4

08010ccc <UTIL_TIMER_SetPeriod>:
{
 8010ccc:	b513      	push	{r0, r1, r4, lr}
	  ret = UTIL_TIMER_INVALID_PARAM;
 8010cce:	2301      	movs	r3, #1
{
 8010cd0:	0004      	movs	r4, r0
 8010cd2:	0008      	movs	r0, r1
  if(NULL == TimerObject)
 8010cd4:	2c00      	cmp	r4, #0
 8010cd6:	d011      	beq.n	8010cfc <UTIL_TIMER_SetPeriod+0x30>
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8010cd8:	4b09      	ldr	r3, [pc, #36]	; (8010d00 <UTIL_TIMER_SetPeriod+0x34>)
 8010cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cdc:	9301      	str	r3, [sp, #4]
 8010cde:	4798      	blx	r3
 8010ce0:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8010ce2:	0020      	movs	r0, r4
 8010ce4:	f7ff ff32 	bl	8010b4c <TimerExists>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8010ce8:	2300      	movs	r3, #0
    if(TimerExists(TimerObject))
 8010cea:	4298      	cmp	r0, r3
 8010cec:	d006      	beq.n	8010cfc <UTIL_TIMER_SetPeriod+0x30>
      (void)UTIL_TIMER_Stop(TimerObject);
 8010cee:	0020      	movs	r0, r4
 8010cf0:	f7ff ff56 	bl	8010ba0 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8010cf4:	0020      	movs	r0, r4
 8010cf6:	f7ff ffa7 	bl	8010c48 <UTIL_TIMER_Start>
 8010cfa:	0003      	movs	r3, r0
}
 8010cfc:	0018      	movs	r0, r3
 8010cfe:	bd16      	pop	{r1, r2, r4, pc}
 8010d00:	080111b4 	.word	0x080111b4

08010d04 <UTIL_TIMER_IRQ_Handler>:
{
 8010d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d06:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010d0a:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8010d0c:	4e1e      	ldr	r6, [pc, #120]	; (8010d88 <UTIL_TIMER_IRQ_Handler+0x84>)
 8010d0e:	6973      	ldr	r3, [r6, #20]
 8010d10:	9301      	str	r3, [sp, #4]
 8010d12:	4798      	blx	r3
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8010d14:	6933      	ldr	r3, [r6, #16]
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8010d16:	0004      	movs	r4, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8010d18:	9301      	str	r3, [sp, #4]
 8010d1a:	4798      	blx	r3
  if ( TimerListHead != NULL )
 8010d1c:	4d1b      	ldr	r5, [pc, #108]	; (8010d8c <UTIL_TIMER_IRQ_Handler+0x88>)
  DeltaContext = now  - old; /*intentional wrap around */
 8010d1e:	1b01      	subs	r1, r0, r4
  if ( TimerListHead != NULL )
 8010d20:	682b      	ldr	r3, [r5, #0]
        cur->Timestamp -= DeltaContext;
 8010d22:	1a24      	subs	r4, r4, r0
  if ( TimerListHead != NULL )
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d01f      	beq.n	8010d68 <UTIL_TIMER_IRQ_Handler+0x64>
      if (cur->Timestamp > DeltaContext)
 8010d28:	6818      	ldr	r0, [r3, #0]
        cur->Timestamp = 0;
 8010d2a:	2200      	movs	r2, #0
      if (cur->Timestamp > DeltaContext)
 8010d2c:	4288      	cmp	r0, r1
 8010d2e:	d900      	bls.n	8010d32 <UTIL_TIMER_IRQ_Handler+0x2e>
        cur->Timestamp -= DeltaContext;
 8010d30:	1822      	adds	r2, r4, r0
 8010d32:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8010d34:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8010d36:	e7f5      	b.n	8010d24 <UTIL_TIMER_IRQ_Handler+0x20>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8010d38:	681c      	ldr	r4, [r3, #0]
 8010d3a:	2c00      	cmp	r4, #0
 8010d3c:	d004      	beq.n	8010d48 <UTIL_TIMER_IRQ_Handler+0x44>
 8010d3e:	69b3      	ldr	r3, [r6, #24]
 8010d40:	9301      	str	r3, [sp, #4]
 8010d42:	4798      	blx	r3
 8010d44:	4284      	cmp	r4, r0
 8010d46:	d212      	bcs.n	8010d6e <UTIL_TIMER_IRQ_Handler+0x6a>
      cur = TimerListHead;
 8010d48:	682c      	ldr	r4, [r5, #0]
      TimerListHead = TimerListHead->Next;
 8010d4a:	6963      	ldr	r3, [r4, #20]
      cur->Callback(cur->argument);
 8010d4c:	6920      	ldr	r0, [r4, #16]
      TimerListHead = TimerListHead->Next;
 8010d4e:	602b      	str	r3, [r5, #0]
      cur->IsPending = 0;
 8010d50:	2300      	movs	r3, #0
 8010d52:	8123      	strh	r3, [r4, #8]
      cur->Callback(cur->argument);
 8010d54:	68e3      	ldr	r3, [r4, #12]
 8010d56:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8010d58:	2280      	movs	r2, #128	; 0x80
 8010d5a:	8963      	ldrh	r3, [r4, #10]
 8010d5c:	0052      	lsls	r2, r2, #1
 8010d5e:	4293      	cmp	r3, r2
 8010d60:	d102      	bne.n	8010d68 <UTIL_TIMER_IRQ_Handler+0x64>
        (void)UTIL_TIMER_Start(cur);
 8010d62:	0020      	movs	r0, r4
 8010d64:	f7ff ff70 	bl	8010c48 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8010d68:	682b      	ldr	r3, [r5, #0]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d1e4      	bne.n	8010d38 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8010d6e:	6828      	ldr	r0, [r5, #0]
 8010d70:	2800      	cmp	r0, #0
 8010d72:	d102      	bne.n	8010d7a <UTIL_TIMER_IRQ_Handler+0x76>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010d74:	f387 8810 	msr	PRIMASK, r7
}
 8010d78:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8010d7a:	7a03      	ldrb	r3, [r0, #8]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d1f9      	bne.n	8010d74 <UTIL_TIMER_IRQ_Handler+0x70>
    TimerSetTimeout( TimerListHead );
 8010d80:	f7ff fef2 	bl	8010b68 <TimerSetTimeout>
 8010d84:	e7f6      	b.n	8010d74 <UTIL_TIMER_IRQ_Handler+0x70>
 8010d86:	46c0      	nop			; (mov r8, r8)
 8010d88:	080111b4 	.word	0x080111b4
 8010d8c:	200013b4 	.word	0x200013b4

08010d90 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8010d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d92:	b09f      	sub	sp, #124	; 0x7c
 8010d94:	9002      	str	r0, [sp, #8]
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
  {
    return 0;
 8010d96:	2000      	movs	r0, #0
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8010d98:	9c02      	ldr	r4, [sp, #8]
{
 8010d9a:	910a      	str	r1, [sp, #40]	; 0x28
  if (size <= 0)
 8010d9c:	4281      	cmp	r1, r0
 8010d9e:	dc0a      	bgt.n	8010db6 <tiny_vsnprintf_like+0x26>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
  }

  *str = '\0';
  return str - buf;
}
 8010da0:	b01f      	add	sp, #124	; 0x7c
 8010da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CHECK_STR_SIZE(buf, str, size);
 8010da4:	4288      	cmp	r0, r1
 8010da6:	da0d      	bge.n	8010dc4 <tiny_vsnprintf_like+0x34>
    if (*fmt != '%')
 8010da8:	2d25      	cmp	r5, #37	; 0x25
 8010daa:	d00e      	beq.n	8010dca <tiny_vsnprintf_like+0x3a>
      *str++ = *fmt;
 8010dac:	7025      	strb	r5, [r4, #0]
      continue;
 8010dae:	9201      	str	r2, [sp, #4]
      *str++ = *fmt;
 8010db0:	3401      	adds	r4, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8010db2:	9a01      	ldr	r2, [sp, #4]
 8010db4:	3201      	adds	r2, #1
 8010db6:	9902      	ldr	r1, [sp, #8]
 8010db8:	7815      	ldrb	r5, [r2, #0]
 8010dba:	1a60      	subs	r0, r4, r1
 8010dbc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010dbe:	3901      	subs	r1, #1
 8010dc0:	2d00      	cmp	r5, #0
 8010dc2:	d1ef      	bne.n	8010da4 <tiny_vsnprintf_like+0x14>
  *str = '\0';
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8010dc8:	e7ea      	b.n	8010da0 <tiny_vsnprintf_like+0x10>
 8010dca:	1c50      	adds	r0, r2, #1
    if (*fmt == '0')
 8010dcc:	7852      	ldrb	r2, [r2, #1]
 8010dce:	9001      	str	r0, [sp, #4]
 8010dd0:	0015      	movs	r5, r2
 8010dd2:	3d30      	subs	r5, #48	; 0x30
 8010dd4:	9205      	str	r2, [sp, #20]
 8010dd6:	4268      	negs	r0, r5
 8010dd8:	4168      	adcs	r0, r5
    if (is_digit(*fmt))
 8010dda:	b2ed      	uxtb	r5, r5
      flags |= ZEROPAD;
 8010ddc:	0002      	movs	r2, r0
    if (is_digit(*fmt))
 8010dde:	2d09      	cmp	r5, #9
 8010de0:	d92d      	bls.n	8010e3e <tiny_vsnprintf_like+0xae>
    field_width = -1;
 8010de2:	2701      	movs	r7, #1
 8010de4:	427f      	negs	r7, r7
    switch (*fmt)
 8010de6:	9d01      	ldr	r5, [sp, #4]
 8010de8:	782e      	ldrb	r6, [r5, #0]
 8010dea:	2e69      	cmp	r6, #105	; 0x69
 8010dec:	d100      	bne.n	8010df0 <tiny_vsnprintf_like+0x60>
 8010dee:	e0ab      	b.n	8010f48 <tiny_vsnprintf_like+0x1b8>
 8010df0:	d827      	bhi.n	8010e42 <tiny_vsnprintf_like+0xb2>
 8010df2:	2e63      	cmp	r6, #99	; 0x63
 8010df4:	d036      	beq.n	8010e64 <tiny_vsnprintf_like+0xd4>
 8010df6:	2e64      	cmp	r6, #100	; 0x64
 8010df8:	d100      	bne.n	8010dfc <tiny_vsnprintf_like+0x6c>
 8010dfa:	e0a5      	b.n	8010f48 <tiny_vsnprintf_like+0x1b8>
 8010dfc:	2e58      	cmp	r6, #88	; 0x58
 8010dfe:	d068      	beq.n	8010ed2 <tiny_vsnprintf_like+0x142>
        if (*fmt != '%') *str++ = '%';
 8010e00:	0020      	movs	r0, r4
 8010e02:	2e25      	cmp	r6, #37	; 0x25
 8010e04:	d125      	bne.n	8010e52 <tiny_vsnprintf_like+0xc2>
        if (*fmt)
 8010e06:	9c01      	ldr	r4, [sp, #4]
 8010e08:	7825      	ldrb	r5, [r4, #0]
 8010e0a:	2d00      	cmp	r5, #0
 8010e0c:	d100      	bne.n	8010e10 <tiny_vsnprintf_like+0x80>
 8010e0e:	e09f      	b.n	8010f50 <tiny_vsnprintf_like+0x1c0>
          *str++ = *fmt;
 8010e10:	1c44      	adds	r4, r0, #1
 8010e12:	7005      	strb	r5, [r0, #0]
        CHECK_STR_SIZE(buf, str, size);
 8010e14:	9802      	ldr	r0, [sp, #8]
    base = 10;
 8010e16:	250a      	movs	r5, #10
        CHECK_STR_SIZE(buf, str, size);
 8010e18:	1a20      	subs	r0, r4, r0
 8010e1a:	4288      	cmp	r0, r1
 8010e1c:	da5c      	bge.n	8010ed8 <tiny_vsnprintf_like+0x148>
 8010e1e:	e7c8      	b.n	8010db2 <tiny_vsnprintf_like+0x22>
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8010e20:	9e01      	ldr	r6, [sp, #4]
 8010e22:	3601      	adds	r6, #1
 8010e24:	9601      	str	r6, [sp, #4]
 8010e26:	260a      	movs	r6, #10
 8010e28:	4377      	muls	r7, r6
 8010e2a:	197d      	adds	r5, r7, r5
 8010e2c:	3d30      	subs	r5, #48	; 0x30
 8010e2e:	002f      	movs	r7, r5
 8010e30:	9d01      	ldr	r5, [sp, #4]
 8010e32:	782d      	ldrb	r5, [r5, #0]
 8010e34:	002e      	movs	r6, r5
 8010e36:	3e30      	subs	r6, #48	; 0x30
 8010e38:	2e09      	cmp	r6, #9
 8010e3a:	d9f1      	bls.n	8010e20 <tiny_vsnprintf_like+0x90>
 8010e3c:	e7d3      	b.n	8010de6 <tiny_vsnprintf_like+0x56>
  int i = 0;
 8010e3e:	2700      	movs	r7, #0
 8010e40:	e7f6      	b.n	8010e30 <tiny_vsnprintf_like+0xa0>
    switch (*fmt)
 8010e42:	2e75      	cmp	r6, #117	; 0x75
 8010e44:	d100      	bne.n	8010e48 <tiny_vsnprintf_like+0xb8>
 8010e46:	e081      	b.n	8010f4c <tiny_vsnprintf_like+0x1bc>
 8010e48:	2510      	movs	r5, #16
 8010e4a:	2e78      	cmp	r6, #120	; 0x78
 8010e4c:	d044      	beq.n	8010ed8 <tiny_vsnprintf_like+0x148>
 8010e4e:	2e73      	cmp	r6, #115	; 0x73
 8010e50:	d020      	beq.n	8010e94 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 8010e52:	2525      	movs	r5, #37	; 0x25
 8010e54:	1c60      	adds	r0, r4, #1
 8010e56:	7025      	strb	r5, [r4, #0]
        CHECK_STR_SIZE(buf, str, size);
 8010e58:	9c02      	ldr	r4, [sp, #8]
 8010e5a:	1b04      	subs	r4, r0, r4
 8010e5c:	428c      	cmp	r4, r1
 8010e5e:	dbd2      	blt.n	8010e06 <tiny_vsnprintf_like+0x76>
        if (*fmt != '%') *str++ = '%';
 8010e60:	0004      	movs	r4, r0
 8010e62:	e073      	b.n	8010f4c <tiny_vsnprintf_like+0x1bc>
 8010e64:	0021      	movs	r1, r4
    switch (*fmt)
 8010e66:	003a      	movs	r2, r7
          while (--field_width > 0) *str++ = ' ';
 8010e68:	3a01      	subs	r2, #1
 8010e6a:	2a00      	cmp	r2, #0
 8010e6c:	dc0e      	bgt.n	8010e8c <tiny_vsnprintf_like+0xfc>
 8010e6e:	2200      	movs	r2, #0
 8010e70:	4297      	cmp	r7, r2
 8010e72:	dd00      	ble.n	8010e76 <tiny_vsnprintf_like+0xe6>
 8010e74:	1e7a      	subs	r2, r7, #1
 8010e76:	2101      	movs	r1, #1
 8010e78:	18a2      	adds	r2, r4, r2
 8010e7a:	2f00      	cmp	r7, #0
 8010e7c:	dd00      	ble.n	8010e80 <tiny_vsnprintf_like+0xf0>
 8010e7e:	0039      	movs	r1, r7
        *str++ = (unsigned char) va_arg(args, int);
 8010e80:	001d      	movs	r5, r3
 8010e82:	cd08      	ldmia	r5!, {r3}
 8010e84:	1864      	adds	r4, r4, r1
 8010e86:	7013      	strb	r3, [r2, #0]
        s = va_arg(args, char *);
 8010e88:	002b      	movs	r3, r5
 8010e8a:	e792      	b.n	8010db2 <tiny_vsnprintf_like+0x22>
          while (--field_width > 0) *str++ = ' ';
 8010e8c:	2020      	movs	r0, #32
 8010e8e:	7008      	strb	r0, [r1, #0]
 8010e90:	3101      	adds	r1, #1
 8010e92:	e7e9      	b.n	8010e68 <tiny_vsnprintf_like+0xd8>
        s = va_arg(args, char *);
 8010e94:	001d      	movs	r5, r3
 8010e96:	cd40      	ldmia	r5!, {r6}
        if (!s) s = "<NULL>";
 8010e98:	2e00      	cmp	r6, #0
 8010e9a:	d100      	bne.n	8010e9e <tiny_vsnprintf_like+0x10e>
 8010e9c:	4e50      	ldr	r6, [pc, #320]	; (8010fe0 <tiny_vsnprintf_like+0x250>)
        len = strlen(s);
 8010e9e:	0030      	movs	r0, r6
 8010ea0:	f7ef f932 	bl	8000108 <strlen>
          while (len < field_width--) *str++ = ' ';
 8010ea4:	0023      	movs	r3, r4
 8010ea6:	19e1      	adds	r1, r4, r7
 8010ea8:	1aca      	subs	r2, r1, r3
 8010eaa:	4290      	cmp	r0, r2
 8010eac:	db09      	blt.n	8010ec2 <tiny_vsnprintf_like+0x132>
 8010eae:	2300      	movs	r3, #0
 8010eb0:	4287      	cmp	r7, r0
 8010eb2:	db00      	blt.n	8010eb6 <tiny_vsnprintf_like+0x126>
 8010eb4:	1a3b      	subs	r3, r7, r0
 8010eb6:	18e4      	adds	r4, r4, r3
        for (i = 0; i < len; ++i) *str++ = *s++;
 8010eb8:	2300      	movs	r3, #0
 8010eba:	4283      	cmp	r3, r0
 8010ebc:	db05      	blt.n	8010eca <tiny_vsnprintf_like+0x13a>
 8010ebe:	1824      	adds	r4, r4, r0
 8010ec0:	e7e2      	b.n	8010e88 <tiny_vsnprintf_like+0xf8>
          while (len < field_width--) *str++ = ' ';
 8010ec2:	2220      	movs	r2, #32
 8010ec4:	701a      	strb	r2, [r3, #0]
 8010ec6:	3301      	adds	r3, #1
 8010ec8:	e7ee      	b.n	8010ea8 <tiny_vsnprintf_like+0x118>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8010eca:	5cf2      	ldrb	r2, [r6, r3]
 8010ecc:	54e2      	strb	r2, [r4, r3]
 8010ece:	3301      	adds	r3, #1
 8010ed0:	e7f3      	b.n	8010eba <tiny_vsnprintf_like+0x12a>
        flags |= UPPERCASE;
 8010ed2:	2240      	movs	r2, #64	; 0x40
        base = 16;
 8010ed4:	2510      	movs	r5, #16
        flags |= UPPERCASE;
 8010ed6:	4302      	orrs	r2, r0
    else if (flags & SIGN)
 8010ed8:	2602      	movs	r6, #2
 8010eda:	9306      	str	r3, [sp, #24]
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8010edc:	9b02      	ldr	r3, [sp, #8]
    else if (flags & SIGN)
 8010ede:	4016      	ands	r6, r2
 8010ee0:	46b4      	mov	ip, r6
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8010ee2:	1ae6      	subs	r6, r4, r3
 8010ee4:	9b06      	ldr	r3, [sp, #24]
 8010ee6:	1b8e      	subs	r6, r1, r6
 8010ee8:	cb01      	ldmia	r3!, {r0}
  if (type & UPPERCASE)  dig = upper_digits;
 8010eea:	493e      	ldr	r1, [pc, #248]	; (8010fe4 <tiny_vsnprintf_like+0x254>)
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8010eec:	9306      	str	r3, [sp, #24]
  if (type & UPPERCASE)  dig = upper_digits;
 8010eee:	2340      	movs	r3, #64	; 0x40
 8010ef0:	9108      	str	r1, [sp, #32]
 8010ef2:	421a      	tst	r2, r3
 8010ef4:	d101      	bne.n	8010efa <tiny_vsnprintf_like+0x16a>
  char *dig = lower_digits;
 8010ef6:	4b3c      	ldr	r3, [pc, #240]	; (8010fe8 <tiny_vsnprintf_like+0x258>)
 8010ef8:	9308      	str	r3, [sp, #32]
  c = (type & ZEROPAD) ? '0' : ' ';
 8010efa:	2330      	movs	r3, #48	; 0x30
 8010efc:	9309      	str	r3, [sp, #36]	; 0x24
 8010efe:	9b05      	ldr	r3, [sp, #20]
 8010f00:	2b30      	cmp	r3, #48	; 0x30
 8010f02:	d001      	beq.n	8010f08 <tiny_vsnprintf_like+0x178>
 8010f04:	2320      	movs	r3, #32
 8010f06:	9309      	str	r3, [sp, #36]	; 0x24
  if (type & SIGN)
 8010f08:	4663      	mov	r3, ip
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d025      	beq.n	8010f5a <tiny_vsnprintf_like+0x1ca>
    if (num < 0)
 8010f0e:	2800      	cmp	r0, #0
 8010f10:	da23      	bge.n	8010f5a <tiny_vsnprintf_like+0x1ca>
      sign = '-';
 8010f12:	232d      	movs	r3, #45	; 0x2d
      num = -num;
 8010f14:	4240      	negs	r0, r0
      size--;
 8010f16:	3f01      	subs	r7, #1
  if (num == 0)
 8010f18:	9304      	str	r3, [sp, #16]
  if (base < 2 || base > 36) return 0;
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	9303      	str	r3, [sp, #12]
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8010f1e:	0029      	movs	r1, r5
 8010f20:	9007      	str	r0, [sp, #28]
 8010f22:	f7ef f9a7 	bl	8000274 <__aeabi_uidivmod>
 8010f26:	9b03      	ldr	r3, [sp, #12]
 8010f28:	000a      	movs	r2, r1
 8010f2a:	469c      	mov	ip, r3
 8010f2c:	900b      	str	r0, [sp, #44]	; 0x2c
 8010f2e:	4660      	mov	r0, ip
 8010f30:	0019      	movs	r1, r3
 8010f32:	9b08      	ldr	r3, [sp, #32]
 8010f34:	3101      	adds	r1, #1
 8010f36:	5c9a      	ldrb	r2, [r3, r2]
 8010f38:	ab0d      	add	r3, sp, #52	; 0x34
 8010f3a:	541a      	strb	r2, [r3, r0]
    while (num != 0)
 8010f3c:	9b07      	ldr	r3, [sp, #28]
      num = ((unsigned long) num) / (unsigned) base;
 8010f3e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010f40:	9103      	str	r1, [sp, #12]
    while (num != 0)
 8010f42:	429d      	cmp	r5, r3
 8010f44:	d9eb      	bls.n	8010f1e <tiny_vsnprintf_like+0x18e>
 8010f46:	e011      	b.n	8010f6c <tiny_vsnprintf_like+0x1dc>
        flags |= SIGN;
 8010f48:	2202      	movs	r2, #2
 8010f4a:	4302      	orrs	r2, r0
    base = 10;
 8010f4c:	250a      	movs	r5, #10
 8010f4e:	e7c3      	b.n	8010ed8 <tiny_vsnprintf_like+0x148>
          --fmt;
 8010f50:	9a01      	ldr	r2, [sp, #4]
 8010f52:	0004      	movs	r4, r0
 8010f54:	3a01      	subs	r2, #1
 8010f56:	9201      	str	r2, [sp, #4]
        CHECK_STR_SIZE(buf, str, size);
 8010f58:	e72b      	b.n	8010db2 <tiny_vsnprintf_like+0x22>
  if (num == 0)
 8010f5a:	2800      	cmp	r0, #0
 8010f5c:	d001      	beq.n	8010f62 <tiny_vsnprintf_like+0x1d2>
 8010f5e:	2300      	movs	r3, #0
 8010f60:	e7da      	b.n	8010f18 <tiny_vsnprintf_like+0x188>
    tmp[i++] = '0';
 8010f62:	2230      	movs	r2, #48	; 0x30
 8010f64:	2101      	movs	r1, #1
 8010f66:	ab0d      	add	r3, sp, #52	; 0x34
 8010f68:	701a      	strb	r2, [r3, #0]
 8010f6a:	9004      	str	r0, [sp, #16]
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8010f6c:	9b05      	ldr	r3, [sp, #20]
  size -= precision;
 8010f6e:	1a78      	subs	r0, r7, r1
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8010f70:	2b30      	cmp	r3, #48	; 0x30
 8010f72:	d005      	beq.n	8010f80 <tiny_vsnprintf_like+0x1f0>
 8010f74:	0023      	movs	r3, r4
 8010f76:	0002      	movs	r2, r0
 8010f78:	001c      	movs	r4, r3
 8010f7a:	3801      	subs	r0, #1
 8010f7c:	2a00      	cmp	r2, #0
 8010f7e:	dc0b      	bgt.n	8010f98 <tiny_vsnprintf_like+0x208>
  if (sign) ASSIGN_STR(sign);
 8010f80:	9b04      	ldr	r3, [sp, #16]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d005      	beq.n	8010f92 <tiny_vsnprintf_like+0x202>
 8010f86:	1c62      	adds	r2, r4, #1
 8010f88:	3e01      	subs	r6, #1
 8010f8a:	7023      	strb	r3, [r4, #0]
 8010f8c:	0014      	movs	r4, r2
 8010f8e:	2e00      	cmp	r6, #0
 8010f90:	d009      	beq.n	8010fa6 <tiny_vsnprintf_like+0x216>
 8010f92:	0033      	movs	r3, r6
 8010f94:	1b80      	subs	r0, r0, r6
 8010f96:	e010      	b.n	8010fba <tiny_vsnprintf_like+0x22a>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8010f98:	2520      	movs	r5, #32
 8010f9a:	3301      	adds	r3, #1
 8010f9c:	3e01      	subs	r6, #1
 8010f9e:	001a      	movs	r2, r3
 8010fa0:	7025      	strb	r5, [r4, #0]
 8010fa2:	2e00      	cmp	r6, #0
 8010fa4:	d1e7      	bne.n	8010f76 <tiny_vsnprintf_like+0x1e6>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8010fa6:	0014      	movs	r4, r2
 8010fa8:	9b06      	ldr	r3, [sp, #24]
 8010faa:	e702      	b.n	8010db2 <tiny_vsnprintf_like+0x22>
  while (size-- > 0) ASSIGN_STR(c);
 8010fac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8010fae:	3401      	adds	r4, #1
 8010fb0:	3b01      	subs	r3, #1
 8010fb2:	0022      	movs	r2, r4
 8010fb4:	702e      	strb	r6, [r5, #0]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d0f5      	beq.n	8010fa6 <tiny_vsnprintf_like+0x216>
 8010fba:	18c2      	adds	r2, r0, r3
 8010fbc:	0025      	movs	r5, r4
 8010fbe:	2a00      	cmp	r2, #0
 8010fc0:	dcf4      	bgt.n	8010fac <tiny_vsnprintf_like+0x21c>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8010fc2:	ad0d      	add	r5, sp, #52	; 0x34
 8010fc4:	191b      	adds	r3, r3, r4
 8010fc6:	0020      	movs	r0, r4
 8010fc8:	3901      	subs	r1, #1
 8010fca:	d201      	bcs.n	8010fd0 <tiny_vsnprintf_like+0x240>
 8010fcc:	0022      	movs	r2, r4
 8010fce:	e7ea      	b.n	8010fa6 <tiny_vsnprintf_like+0x216>
 8010fd0:	5d4e      	ldrb	r6, [r1, r5]
 8010fd2:	3401      	adds	r4, #1
 8010fd4:	0022      	movs	r2, r4
 8010fd6:	7006      	strb	r6, [r0, #0]
 8010fd8:	429c      	cmp	r4, r3
 8010fda:	d1f4      	bne.n	8010fc6 <tiny_vsnprintf_like+0x236>
 8010fdc:	e7e3      	b.n	8010fa6 <tiny_vsnprintf_like+0x216>
 8010fde:	46c0      	nop			; (mov r8, r8)
 8010fe0:	08012027 	.word	0x08012027
 8010fe4:	0801202e 	.word	0x0801202e
 8010fe8:	08012053 	.word	0x08012053

08010fec <__libc_init_array>:
 8010fec:	b570      	push	{r4, r5, r6, lr}
 8010fee:	2600      	movs	r6, #0
 8010ff0:	4d0c      	ldr	r5, [pc, #48]	; (8011024 <__libc_init_array+0x38>)
 8010ff2:	4c0d      	ldr	r4, [pc, #52]	; (8011028 <__libc_init_array+0x3c>)
 8010ff4:	1b64      	subs	r4, r4, r5
 8010ff6:	10a4      	asrs	r4, r4, #2
 8010ff8:	42a6      	cmp	r6, r4
 8010ffa:	d109      	bne.n	8011010 <__libc_init_array+0x24>
 8010ffc:	2600      	movs	r6, #0
 8010ffe:	f000 f8ab 	bl	8011158 <_init>
 8011002:	4d0a      	ldr	r5, [pc, #40]	; (801102c <__libc_init_array+0x40>)
 8011004:	4c0a      	ldr	r4, [pc, #40]	; (8011030 <__libc_init_array+0x44>)
 8011006:	1b64      	subs	r4, r4, r5
 8011008:	10a4      	asrs	r4, r4, #2
 801100a:	42a6      	cmp	r6, r4
 801100c:	d105      	bne.n	801101a <__libc_init_array+0x2e>
 801100e:	bd70      	pop	{r4, r5, r6, pc}
 8011010:	00b3      	lsls	r3, r6, #2
 8011012:	58eb      	ldr	r3, [r5, r3]
 8011014:	4798      	blx	r3
 8011016:	3601      	adds	r6, #1
 8011018:	e7ee      	b.n	8010ff8 <__libc_init_array+0xc>
 801101a:	00b3      	lsls	r3, r6, #2
 801101c:	58eb      	ldr	r3, [r5, r3]
 801101e:	4798      	blx	r3
 8011020:	3601      	adds	r6, #1
 8011022:	e7f2      	b.n	801100a <__libc_init_array+0x1e>
 8011024:	08012080 	.word	0x08012080
 8011028:	08012080 	.word	0x08012080
 801102c:	08012080 	.word	0x08012080
 8011030:	08012084 	.word	0x08012084

08011034 <memset>:
 8011034:	0003      	movs	r3, r0
 8011036:	1882      	adds	r2, r0, r2
 8011038:	4293      	cmp	r3, r2
 801103a:	d100      	bne.n	801103e <memset+0xa>
 801103c:	4770      	bx	lr
 801103e:	7019      	strb	r1, [r3, #0]
 8011040:	3301      	adds	r3, #1
 8011042:	e7f9      	b.n	8011038 <memset+0x4>

08011044 <floor>:
 8011044:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011046:	004b      	lsls	r3, r1, #1
 8011048:	4a3d      	ldr	r2, [pc, #244]	; (8011140 <floor+0xfc>)
 801104a:	0d5b      	lsrs	r3, r3, #21
 801104c:	189f      	adds	r7, r3, r2
 801104e:	4684      	mov	ip, r0
 8011050:	000e      	movs	r6, r1
 8011052:	000d      	movs	r5, r1
 8011054:	0004      	movs	r4, r0
 8011056:	9001      	str	r0, [sp, #4]
 8011058:	2f13      	cmp	r7, #19
 801105a:	dc34      	bgt.n	80110c6 <floor+0x82>
 801105c:	2f00      	cmp	r7, #0
 801105e:	da16      	bge.n	801108e <floor+0x4a>
 8011060:	4a38      	ldr	r2, [pc, #224]	; (8011144 <floor+0x100>)
 8011062:	4b39      	ldr	r3, [pc, #228]	; (8011148 <floor+0x104>)
 8011064:	4660      	mov	r0, ip
 8011066:	0031      	movs	r1, r6
 8011068:	f7f0 fa5a 	bl	8001520 <__aeabi_dadd>
 801106c:	2200      	movs	r2, #0
 801106e:	2300      	movs	r3, #0
 8011070:	f7ef fa1a 	bl	80004a8 <__aeabi_dcmpgt>
 8011074:	2800      	cmp	r0, #0
 8011076:	d007      	beq.n	8011088 <floor+0x44>
 8011078:	2e00      	cmp	r6, #0
 801107a:	da5d      	bge.n	8011138 <floor+0xf4>
 801107c:	0073      	lsls	r3, r6, #1
 801107e:	085b      	lsrs	r3, r3, #1
 8011080:	431c      	orrs	r4, r3
 8011082:	d001      	beq.n	8011088 <floor+0x44>
 8011084:	2400      	movs	r4, #0
 8011086:	4d31      	ldr	r5, [pc, #196]	; (801114c <floor+0x108>)
 8011088:	46a4      	mov	ip, r4
 801108a:	002e      	movs	r6, r5
 801108c:	e029      	b.n	80110e2 <floor+0x9e>
 801108e:	4b30      	ldr	r3, [pc, #192]	; (8011150 <floor+0x10c>)
 8011090:	413b      	asrs	r3, r7
 8011092:	9300      	str	r3, [sp, #0]
 8011094:	400b      	ands	r3, r1
 8011096:	4303      	orrs	r3, r0
 8011098:	d023      	beq.n	80110e2 <floor+0x9e>
 801109a:	4a2a      	ldr	r2, [pc, #168]	; (8011144 <floor+0x100>)
 801109c:	4b2a      	ldr	r3, [pc, #168]	; (8011148 <floor+0x104>)
 801109e:	4660      	mov	r0, ip
 80110a0:	0031      	movs	r1, r6
 80110a2:	f7f0 fa3d 	bl	8001520 <__aeabi_dadd>
 80110a6:	2200      	movs	r2, #0
 80110a8:	2300      	movs	r3, #0
 80110aa:	f7ef f9fd 	bl	80004a8 <__aeabi_dcmpgt>
 80110ae:	2800      	cmp	r0, #0
 80110b0:	d0ea      	beq.n	8011088 <floor+0x44>
 80110b2:	2e00      	cmp	r6, #0
 80110b4:	da03      	bge.n	80110be <floor+0x7a>
 80110b6:	2380      	movs	r3, #128	; 0x80
 80110b8:	035b      	lsls	r3, r3, #13
 80110ba:	413b      	asrs	r3, r7
 80110bc:	18f5      	adds	r5, r6, r3
 80110be:	9b00      	ldr	r3, [sp, #0]
 80110c0:	2400      	movs	r4, #0
 80110c2:	439d      	bics	r5, r3
 80110c4:	e7e0      	b.n	8011088 <floor+0x44>
 80110c6:	2f33      	cmp	r7, #51	; 0x33
 80110c8:	dd0f      	ble.n	80110ea <floor+0xa6>
 80110ca:	2380      	movs	r3, #128	; 0x80
 80110cc:	00db      	lsls	r3, r3, #3
 80110ce:	429f      	cmp	r7, r3
 80110d0:	d107      	bne.n	80110e2 <floor+0x9e>
 80110d2:	0002      	movs	r2, r0
 80110d4:	000b      	movs	r3, r1
 80110d6:	4660      	mov	r0, ip
 80110d8:	0031      	movs	r1, r6
 80110da:	f7f0 fa21 	bl	8001520 <__aeabi_dadd>
 80110de:	4684      	mov	ip, r0
 80110e0:	000e      	movs	r6, r1
 80110e2:	4660      	mov	r0, ip
 80110e4:	0031      	movs	r1, r6
 80110e6:	b003      	add	sp, #12
 80110e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110ea:	4a1a      	ldr	r2, [pc, #104]	; (8011154 <floor+0x110>)
 80110ec:	189b      	adds	r3, r3, r2
 80110ee:	2201      	movs	r2, #1
 80110f0:	4252      	negs	r2, r2
 80110f2:	40da      	lsrs	r2, r3
 80110f4:	9200      	str	r2, [sp, #0]
 80110f6:	4210      	tst	r0, r2
 80110f8:	d0f3      	beq.n	80110e2 <floor+0x9e>
 80110fa:	4a12      	ldr	r2, [pc, #72]	; (8011144 <floor+0x100>)
 80110fc:	4b12      	ldr	r3, [pc, #72]	; (8011148 <floor+0x104>)
 80110fe:	4660      	mov	r0, ip
 8011100:	0031      	movs	r1, r6
 8011102:	f7f0 fa0d 	bl	8001520 <__aeabi_dadd>
 8011106:	2200      	movs	r2, #0
 8011108:	2300      	movs	r3, #0
 801110a:	f7ef f9cd 	bl	80004a8 <__aeabi_dcmpgt>
 801110e:	2800      	cmp	r0, #0
 8011110:	d0ba      	beq.n	8011088 <floor+0x44>
 8011112:	2e00      	cmp	r6, #0
 8011114:	da02      	bge.n	801111c <floor+0xd8>
 8011116:	2f14      	cmp	r7, #20
 8011118:	d103      	bne.n	8011122 <floor+0xde>
 801111a:	3501      	adds	r5, #1
 801111c:	9b00      	ldr	r3, [sp, #0]
 801111e:	439c      	bics	r4, r3
 8011120:	e7b2      	b.n	8011088 <floor+0x44>
 8011122:	2334      	movs	r3, #52	; 0x34
 8011124:	1bdf      	subs	r7, r3, r7
 8011126:	3b33      	subs	r3, #51	; 0x33
 8011128:	40bb      	lsls	r3, r7
 801112a:	18e4      	adds	r4, r4, r3
 801112c:	9b01      	ldr	r3, [sp, #4]
 801112e:	429c      	cmp	r4, r3
 8011130:	419b      	sbcs	r3, r3
 8011132:	425b      	negs	r3, r3
 8011134:	18f5      	adds	r5, r6, r3
 8011136:	e7f1      	b.n	801111c <floor+0xd8>
 8011138:	2400      	movs	r4, #0
 801113a:	0025      	movs	r5, r4
 801113c:	e7a4      	b.n	8011088 <floor+0x44>
 801113e:	46c0      	nop			; (mov r8, r8)
 8011140:	fffffc01 	.word	0xfffffc01
 8011144:	8800759c 	.word	0x8800759c
 8011148:	7e37e43c 	.word	0x7e37e43c
 801114c:	bff00000 	.word	0xbff00000
 8011150:	000fffff 	.word	0x000fffff
 8011154:	fffffbed 	.word	0xfffffbed

08011158 <_init>:
 8011158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801115a:	46c0      	nop			; (mov r8, r8)
 801115c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801115e:	bc08      	pop	{r3}
 8011160:	469e      	mov	lr, r3
 8011162:	4770      	bx	lr

08011164 <_fini>:
 8011164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011166:	46c0      	nop			; (mov r8, r8)
 8011168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801116a:	bc08      	pop	{r3}
 801116c:	469e      	mov	lr, r3
 801116e:	4770      	bx	lr
