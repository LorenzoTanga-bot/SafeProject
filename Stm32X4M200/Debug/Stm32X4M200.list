
Stm32X4M200.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bfc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002cbc  08002cbc  00012cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d34  08002d34  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002d34  08002d34  00012d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d3c  08002d3c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d3c  08002d3c  00012d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d40  08002d40  00012d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  2000000c  08002d50  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08002d50  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000069f7  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000132e  00000000  00000000  00026a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006e8  00000000  00000000  00027d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000688  00000000  00000000  00028448  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000149f4  00000000  00000000  00028ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000621b  00000000  00000000  0003d4c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007af5a  00000000  00000000  000436df  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000be639  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001814  00000000  00000000  000be6b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002ca4 	.word	0x08002ca4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002ca4 	.word	0x08002ca4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f830 	bl	80002b4 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4343      	muls	r3, r0
 8000298:	4351      	muls	r1, r2
 800029a:	0c25      	lsrs	r5, r4, #16
 800029c:	0436      	lsls	r6, r6, #16
 800029e:	4465      	add	r5, ip
 80002a0:	0c36      	lsrs	r6, r6, #16
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	195b      	adds	r3, r3, r5
 80002a8:	1859      	adds	r1, r3, r1
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__udivmoddi4>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	464f      	mov	r7, r9
 80002b8:	4646      	mov	r6, r8
 80002ba:	46d6      	mov	lr, sl
 80002bc:	b5c0      	push	{r6, r7, lr}
 80002be:	0004      	movs	r4, r0
 80002c0:	b082      	sub	sp, #8
 80002c2:	000d      	movs	r5, r1
 80002c4:	4691      	mov	r9, r2
 80002c6:	4698      	mov	r8, r3
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d82f      	bhi.n	800032c <__udivmoddi4+0x78>
 80002cc:	d02c      	beq.n	8000328 <__udivmoddi4+0x74>
 80002ce:	4641      	mov	r1, r8
 80002d0:	4648      	mov	r0, r9
 80002d2:	f000 f8b1 	bl	8000438 <__clzdi2>
 80002d6:	0029      	movs	r1, r5
 80002d8:	0006      	movs	r6, r0
 80002da:	0020      	movs	r0, r4
 80002dc:	f000 f8ac 	bl	8000438 <__clzdi2>
 80002e0:	1a33      	subs	r3, r6, r0
 80002e2:	469c      	mov	ip, r3
 80002e4:	3b20      	subs	r3, #32
 80002e6:	469a      	mov	sl, r3
 80002e8:	d500      	bpl.n	80002ec <__udivmoddi4+0x38>
 80002ea:	e076      	b.n	80003da <__udivmoddi4+0x126>
 80002ec:	464b      	mov	r3, r9
 80002ee:	4652      	mov	r2, sl
 80002f0:	4093      	lsls	r3, r2
 80002f2:	001f      	movs	r7, r3
 80002f4:	464b      	mov	r3, r9
 80002f6:	4662      	mov	r2, ip
 80002f8:	4093      	lsls	r3, r2
 80002fa:	001e      	movs	r6, r3
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d828      	bhi.n	8000352 <__udivmoddi4+0x9e>
 8000300:	d025      	beq.n	800034e <__udivmoddi4+0x9a>
 8000302:	4653      	mov	r3, sl
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5a>
 800030c:	e07b      	b.n	8000406 <__udivmoddi4+0x152>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	4652      	mov	r2, sl
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4662      	mov	r2, ip
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e018      	b.n	800035a <__udivmoddi4+0xa6>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9d0      	bls.n	80002ce <__udivmoddi4+0x1a>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8a>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b002      	add	sp, #8
 8000344:	bc1c      	pop	{r2, r3, r4}
 8000346:	4690      	mov	r8, r2
 8000348:	4699      	mov	r9, r3
 800034a:	46a2      	mov	sl, r4
 800034c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034e:	42a3      	cmp	r3, r4
 8000350:	d9d7      	bls.n	8000302 <__udivmoddi4+0x4e>
 8000352:	2200      	movs	r2, #0
 8000354:	2300      	movs	r3, #0
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	4663      	mov	r3, ip
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0e9      	beq.n	8000334 <__udivmoddi4+0x80>
 8000360:	07fb      	lsls	r3, r7, #31
 8000362:	4698      	mov	r8, r3
 8000364:	4641      	mov	r1, r8
 8000366:	0872      	lsrs	r2, r6, #1
 8000368:	430a      	orrs	r2, r1
 800036a:	087b      	lsrs	r3, r7, #1
 800036c:	4666      	mov	r6, ip
 800036e:	e00e      	b.n	800038e <__udivmoddi4+0xda>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d101      	bne.n	8000378 <__udivmoddi4+0xc4>
 8000374:	42a2      	cmp	r2, r4
 8000376:	d80c      	bhi.n	8000392 <__udivmoddi4+0xde>
 8000378:	1aa4      	subs	r4, r4, r2
 800037a:	419d      	sbcs	r5, r3
 800037c:	2001      	movs	r0, #1
 800037e:	1924      	adds	r4, r4, r4
 8000380:	416d      	adcs	r5, r5
 8000382:	2100      	movs	r1, #0
 8000384:	3e01      	subs	r6, #1
 8000386:	1824      	adds	r4, r4, r0
 8000388:	414d      	adcs	r5, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d006      	beq.n	800039c <__udivmoddi4+0xe8>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d9ee      	bls.n	8000370 <__udivmoddi4+0xbc>
 8000392:	3e01      	subs	r6, #1
 8000394:	1924      	adds	r4, r4, r4
 8000396:	416d      	adcs	r5, r5
 8000398:	2e00      	cmp	r6, #0
 800039a:	d1f8      	bne.n	800038e <__udivmoddi4+0xda>
 800039c:	9800      	ldr	r0, [sp, #0]
 800039e:	9901      	ldr	r1, [sp, #4]
 80003a0:	4653      	mov	r3, sl
 80003a2:	1900      	adds	r0, r0, r4
 80003a4:	4169      	adcs	r1, r5
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db23      	blt.n	80003f2 <__udivmoddi4+0x13e>
 80003aa:	002b      	movs	r3, r5
 80003ac:	4652      	mov	r2, sl
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	4664      	mov	r4, ip
 80003b4:	40e2      	lsrs	r2, r4
 80003b6:	001c      	movs	r4, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	0015      	movs	r5, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db2d      	blt.n	800041c <__udivmoddi4+0x168>
 80003c0:	0026      	movs	r6, r4
 80003c2:	4657      	mov	r7, sl
 80003c4:	40be      	lsls	r6, r7
 80003c6:	0033      	movs	r3, r6
 80003c8:	0026      	movs	r6, r4
 80003ca:	4667      	mov	r7, ip
 80003cc:	40be      	lsls	r6, r7
 80003ce:	0032      	movs	r2, r6
 80003d0:	1a80      	subs	r0, r0, r2
 80003d2:	4199      	sbcs	r1, r3
 80003d4:	9000      	str	r0, [sp, #0]
 80003d6:	9101      	str	r1, [sp, #4]
 80003d8:	e7ac      	b.n	8000334 <__udivmoddi4+0x80>
 80003da:	4662      	mov	r2, ip
 80003dc:	2320      	movs	r3, #32
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	464a      	mov	r2, r9
 80003e2:	40da      	lsrs	r2, r3
 80003e4:	4661      	mov	r1, ip
 80003e6:	0013      	movs	r3, r2
 80003e8:	4642      	mov	r2, r8
 80003ea:	408a      	lsls	r2, r1
 80003ec:	0017      	movs	r7, r2
 80003ee:	431f      	orrs	r7, r3
 80003f0:	e780      	b.n	80002f4 <__udivmoddi4+0x40>
 80003f2:	4662      	mov	r2, ip
 80003f4:	2320      	movs	r3, #32
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	002a      	movs	r2, r5
 80003fa:	4666      	mov	r6, ip
 80003fc:	409a      	lsls	r2, r3
 80003fe:	0023      	movs	r3, r4
 8000400:	40f3      	lsrs	r3, r6
 8000402:	4313      	orrs	r3, r2
 8000404:	e7d4      	b.n	80003b0 <__udivmoddi4+0xfc>
 8000406:	4662      	mov	r2, ip
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e780      	b.n	800031e <__udivmoddi4+0x6a>
 800041c:	2320      	movs	r3, #32
 800041e:	4662      	mov	r2, ip
 8000420:	0026      	movs	r6, r4
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	40de      	lsrs	r6, r3
 8000426:	002f      	movs	r7, r5
 8000428:	46b0      	mov	r8, r6
 800042a:	4666      	mov	r6, ip
 800042c:	40b7      	lsls	r7, r6
 800042e:	4646      	mov	r6, r8
 8000430:	003b      	movs	r3, r7
 8000432:	4333      	orrs	r3, r6
 8000434:	e7c8      	b.n	80003c8 <__udivmoddi4+0x114>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__clzdi2>:
 8000438:	b510      	push	{r4, lr}
 800043a:	2900      	cmp	r1, #0
 800043c:	d103      	bne.n	8000446 <__clzdi2+0xe>
 800043e:	f000 f807 	bl	8000450 <__clzsi2>
 8000442:	3020      	adds	r0, #32
 8000444:	e002      	b.n	800044c <__clzdi2+0x14>
 8000446:	1c08      	adds	r0, r1, #0
 8000448:	f000 f802 	bl	8000450 <__clzsi2>
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__clzsi2>:
 8000450:	211c      	movs	r1, #28
 8000452:	2301      	movs	r3, #1
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	4298      	cmp	r0, r3
 8000458:	d301      	bcc.n	800045e <__clzsi2+0xe>
 800045a:	0c00      	lsrs	r0, r0, #16
 800045c:	3910      	subs	r1, #16
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	4298      	cmp	r0, r3
 8000462:	d301      	bcc.n	8000468 <__clzsi2+0x18>
 8000464:	0a00      	lsrs	r0, r0, #8
 8000466:	3908      	subs	r1, #8
 8000468:	091b      	lsrs	r3, r3, #4
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__clzsi2+0x22>
 800046e:	0900      	lsrs	r0, r0, #4
 8000470:	3904      	subs	r1, #4
 8000472:	a202      	add	r2, pc, #8	; (adr r2, 800047c <__clzsi2+0x2c>)
 8000474:	5c10      	ldrb	r0, [r2, r0]
 8000476:	1840      	adds	r0, r0, r1
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	02020304 	.word	0x02020304
 8000480:	01010101 	.word	0x01010101
	...

0800048c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800048c:	b590      	push	{r4, r7, lr}
 800048e:	b089      	sub	sp, #36	; 0x24
 8000490:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000492:	f000 fbbf 	bl	8000c14 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000496:	f000 f825 	bl	80004e4 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800049a:	f000 f8d5 	bl	8000648 <_ZL12MX_GPIO_Initv>
	MX_USART2_UART_Init();
 800049e:	f000 f89f 	bl	80005e0 <_ZL19MX_USART2_UART_Initv>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */
	resetModule();
 80004a2:	f000 fa1b 	bl	80008dc <_Z11resetModulev>
	loadRespirationApp();
 80004a6:	f000 fa2b 	bl	8000900 <_Z18loadRespirationAppv>
	configureNoiseMap();
 80004aa:	f000 fa45 	bl	8000938 <_Z17configureNoiseMapv>
	setSensity(5);
 80004ae:	2005      	movs	r0, #5
 80004b0:	f000 fa62 	bl	8000978 <_Z10setSensityi>
	setDetectionZone(0.40, 2.00);
 80004b4:	2280      	movs	r2, #128	; 0x80
 80004b6:	05d2      	lsls	r2, r2, #23
 80004b8:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <main+0x54>)
 80004ba:	1c11      	adds	r1, r2, #0
 80004bc:	1c18      	adds	r0, r3, #0
 80004be:	f000 fa85 	bl	80009cc <_Z16setDetectionZoneff>
	executeApp();
 80004c2:	f000 fab5 	bl	8000a30 <_Z10executeAppv>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		data = getRespirationData();
 80004c6:	2310      	movs	r3, #16
 80004c8:	18fc      	adds	r4, r7, r3
 80004ca:	003b      	movs	r3, r7
 80004cc:	0018      	movs	r0, r3
 80004ce:	f000 fac1 	bl	8000a54 <_Z18getRespirationDatav>
 80004d2:	003a      	movs	r2, r7
 80004d4:	0023      	movs	r3, r4
 80004d6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80004d8:	c313      	stmia	r3!, {r0, r1, r4}
 80004da:	6812      	ldr	r2, [r2, #0]
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	e7f2      	b.n	80004c6 <main+0x3a>
 80004e0:	3ecccccd 	.word	0x3ecccccd

080004e4 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80004e4:	b590      	push	{r4, r7, lr}
 80004e6:	b09d      	sub	sp, #116	; 0x74
 80004e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80004ea:	2438      	movs	r4, #56	; 0x38
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	0018      	movs	r0, r3
 80004f0:	2338      	movs	r3, #56	; 0x38
 80004f2:	001a      	movs	r2, r3
 80004f4:	2100      	movs	r1, #0
 80004f6:	f002 fbcc 	bl	8002c92 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80004fa:	2324      	movs	r3, #36	; 0x24
 80004fc:	18fb      	adds	r3, r7, r3
 80004fe:	0018      	movs	r0, r3
 8000500:	2314      	movs	r3, #20
 8000502:	001a      	movs	r2, r3
 8000504:	2100      	movs	r1, #0
 8000506:	f002 fbc4 	bl	8002c92 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800050a:	003b      	movs	r3, r7
 800050c:	0018      	movs	r0, r3
 800050e:	2324      	movs	r3, #36	; 0x24
 8000510:	001a      	movs	r2, r3
 8000512:	2100      	movs	r1, #0
 8000514:	f002 fbbd 	bl	8002c92 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000518:	4b2f      	ldr	r3, [pc, #188]	; (80005d8 <_Z18SystemClock_Configv+0xf4>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a2f      	ldr	r2, [pc, #188]	; (80005dc <_Z18SystemClock_Configv+0xf8>)
 800051e:	401a      	ands	r2, r3
 8000520:	4b2d      	ldr	r3, [pc, #180]	; (80005d8 <_Z18SystemClock_Configv+0xf4>)
 8000522:	2180      	movs	r1, #128	; 0x80
 8000524:	0109      	lsls	r1, r1, #4
 8000526:	430a      	orrs	r2, r1
 8000528:	601a      	str	r2, [r3, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800052a:	0021      	movs	r1, r4
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2202      	movs	r2, #2
 8000530:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2201      	movs	r2, #1
 8000536:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2210      	movs	r2, #16
 800053c:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2202      	movs	r2, #2
 8000542:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2200      	movs	r2, #0
 8000548:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2200      	movs	r2, #0
 800054e:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2280      	movs	r2, #128	; 0x80
 8000554:	03d2      	lsls	r2, r2, #15
 8000556:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000558:	187b      	adds	r3, r7, r1
 800055a:	0018      	movs	r0, r3
 800055c:	f000 fdfc 	bl	8001158 <HAL_RCC_OscConfig>
 8000560:	0003      	movs	r3, r0
 8000562:	1e5a      	subs	r2, r3, #1
 8000564:	4193      	sbcs	r3, r2
 8000566:	b2db      	uxtb	r3, r3
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <_Z18SystemClock_Configv+0x8c>
		Error_Handler();
 800056c:	f000 fab0 	bl	8000ad0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000570:	2124      	movs	r1, #36	; 0x24
 8000572:	187b      	adds	r3, r7, r1
 8000574:	220f      	movs	r2, #15
 8000576:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2203      	movs	r2, #3
 800057c:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2101      	movs	r1, #1
 8000594:	0018      	movs	r0, r3
 8000596:	f001 f9b5 	bl	8001904 <HAL_RCC_ClockConfig>
 800059a:	0003      	movs	r3, r0
 800059c:	1e5a      	subs	r2, r3, #1
 800059e:	4193      	sbcs	r3, r2
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <_Z18SystemClock_Configv+0xc6>
		Error_Handler();
 80005a6:	f000 fa93 	bl	8000ad0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005aa:	003b      	movs	r3, r7
 80005ac:	2202      	movs	r2, #2
 80005ae:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005b0:	003b      	movs	r3, r7
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80005b6:	003b      	movs	r3, r7
 80005b8:	0018      	movs	r0, r3
 80005ba:	f001 fbc3 	bl	8001d44 <HAL_RCCEx_PeriphCLKConfig>
 80005be:	0003      	movs	r3, r0
 80005c0:	1e5a      	subs	r2, r3, #1
 80005c2:	4193      	sbcs	r3, r2
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <_Z18SystemClock_Configv+0xea>
		Error_Handler();
 80005ca:	f000 fa81 	bl	8000ad0 <Error_Handler>
	}
}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	b01d      	add	sp, #116	; 0x74
 80005d4:	bd90      	pop	{r4, r7, pc}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	40007000 	.word	0x40007000
 80005dc:	ffffe7ff 	.word	0xffffe7ff

080005e0 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80005e4:	4b16      	ldr	r3, [pc, #88]	; (8000640 <_ZL19MX_USART2_UART_Initv+0x60>)
 80005e6:	4a17      	ldr	r2, [pc, #92]	; (8000644 <_ZL19MX_USART2_UART_Initv+0x64>)
 80005e8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <_ZL19MX_USART2_UART_Initv+0x60>)
 80005ec:	22e1      	movs	r2, #225	; 0xe1
 80005ee:	0252      	lsls	r2, r2, #9
 80005f0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <_ZL19MX_USART2_UART_Initv+0x60>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <_ZL19MX_USART2_UART_Initv+0x60>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000604:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000606:	220c      	movs	r2, #12
 8000608:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <_ZL19MX_USART2_UART_Initv+0x60>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000610:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000616:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800061c:	4b08      	ldr	r3, [pc, #32]	; (8000640 <_ZL19MX_USART2_UART_Initv+0x60>)
 800061e:	2200      	movs	r2, #0
 8000620:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000622:	4b07      	ldr	r3, [pc, #28]	; (8000640 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000624:	0018      	movs	r0, r3
 8000626:	f001 fce5 	bl	8001ff4 <HAL_UART_Init>
 800062a:	0003      	movs	r3, r0
 800062c:	1e5a      	subs	r2, r3, #1
 800062e:	4193      	sbcs	r3, r2
 8000630:	b2db      	uxtb	r3, r3
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <_ZL19MX_USART2_UART_Initv+0x5a>
		Error_Handler();
 8000636:	f000 fa4b 	bl	8000ad0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000028 	.word	0x20000028
 8000644:	40004400 	.word	0x40004400

08000648 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <_ZL12MX_GPIO_Initv+0x28>)
 8000650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000652:	4b07      	ldr	r3, [pc, #28]	; (8000670 <_ZL12MX_GPIO_Initv+0x28>)
 8000654:	2101      	movs	r1, #1
 8000656:	430a      	orrs	r2, r1
 8000658:	62da      	str	r2, [r3, #44]	; 0x2c
 800065a:	4b05      	ldr	r3, [pc, #20]	; (8000670 <_ZL12MX_GPIO_Initv+0x28>)
 800065c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800065e:	2201      	movs	r2, #1
 8000660:	4013      	ands	r3, r2
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	46bd      	mov	sp, r7
 800066a:	b002      	add	sp, #8
 800066c:	bd80      	pop	{r7, pc}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	40021000 	.word	0x40021000

08000674 <_Z11sendCommandPhi>:

/* USER CODE BEGIN 4 */
void sendCommand(unsigned char *cmd, int len) {
 8000674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000676:	46c6      	mov	lr, r8
 8000678:	b500      	push	{lr}
 800067a:	b08c      	sub	sp, #48	; 0x30
 800067c:	af00      	add	r7, sp, #0
 800067e:	61f8      	str	r0, [r7, #28]
 8000680:	61b9      	str	r1, [r7, #24]
	tx[0] = _xt_start;
	memcpy(tx + 1, cmd, len);
	tx[len + 1] = crc;
	tx[len + 2] = _xt_stop;

	HAL_UART_Transmit(&huart2, (uint8_t*) tx, len + 3, HAL_MAX_DELAY);
 8000682:	466a      	mov	r2, sp
 8000684:	607a      	str	r2, [r7, #4]
	char crc = _xt_start;
 8000686:	2213      	movs	r2, #19
 8000688:	2118      	movs	r1, #24
 800068a:	468c      	mov	ip, r1
 800068c:	44bc      	add	ip, r7
 800068e:	4462      	add	r2, ip
 8000690:	217d      	movs	r1, #125	; 0x7d
 8000692:	7011      	strb	r1, [r2, #0]
	for (int i = 0; i < len; i++)
 8000694:	2200      	movs	r2, #0
 8000696:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000698:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800069a:	69ba      	ldr	r2, [r7, #24]
 800069c:	4291      	cmp	r1, r2
 800069e:	da14      	bge.n	80006ca <_Z11sendCommandPhi+0x56>
		crc ^= cmd[i];
 80006a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006a2:	69f9      	ldr	r1, [r7, #28]
 80006a4:	188a      	adds	r2, r1, r2
 80006a6:	7810      	ldrb	r0, [r2, #0]
 80006a8:	2113      	movs	r1, #19
 80006aa:	2218      	movs	r2, #24
 80006ac:	18ba      	adds	r2, r7, r2
 80006ae:	4690      	mov	r8, r2
 80006b0:	4488      	add	r8, r1
 80006b2:	2218      	movs	r2, #24
 80006b4:	4694      	mov	ip, r2
 80006b6:	44bc      	add	ip, r7
 80006b8:	4461      	add	r1, ip
 80006ba:	7809      	ldrb	r1, [r1, #0]
 80006bc:	4041      	eors	r1, r0
 80006be:	4642      	mov	r2, r8
 80006c0:	7011      	strb	r1, [r2, #0]
	for (int i = 0; i < len; i++)
 80006c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006c4:	3201      	adds	r2, #1
 80006c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80006c8:	e7e6      	b.n	8000698 <_Z11sendCommandPhi+0x24>
	unsigned char tx[len + 3];
 80006ca:	69ba      	ldr	r2, [r7, #24]
 80006cc:	3202      	adds	r2, #2
 80006ce:	627a      	str	r2, [r7, #36]	; 0x24
 80006d0:	0011      	movs	r1, r2
 80006d2:	3101      	adds	r1, #1
 80006d4:	6139      	str	r1, [r7, #16]
 80006d6:	2100      	movs	r1, #0
 80006d8:	6179      	str	r1, [r7, #20]
 80006da:	6939      	ldr	r1, [r7, #16]
 80006dc:	0f49      	lsrs	r1, r1, #29
 80006de:	6978      	ldr	r0, [r7, #20]
 80006e0:	00c6      	lsls	r6, r0, #3
 80006e2:	430e      	orrs	r6, r1
 80006e4:	6939      	ldr	r1, [r7, #16]
 80006e6:	00cd      	lsls	r5, r1, #3
 80006e8:	0011      	movs	r1, r2
 80006ea:	3101      	adds	r1, #1
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	2100      	movs	r1, #0
 80006f0:	60f9      	str	r1, [r7, #12]
 80006f2:	68bd      	ldr	r5, [r7, #8]
 80006f4:	68fe      	ldr	r6, [r7, #12]
 80006f6:	0029      	movs	r1, r5
 80006f8:	0f49      	lsrs	r1, r1, #29
 80006fa:	0030      	movs	r0, r6
 80006fc:	00c4      	lsls	r4, r0, #3
 80006fe:	430c      	orrs	r4, r1
 8000700:	0029      	movs	r1, r5
 8000702:	00cb      	lsls	r3, r1, #3
 8000704:	0013      	movs	r3, r2
 8000706:	3301      	adds	r3, #1
 8000708:	3307      	adds	r3, #7
 800070a:	08db      	lsrs	r3, r3, #3
 800070c:	00db      	lsls	r3, r3, #3
 800070e:	466a      	mov	r2, sp
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	469d      	mov	sp, r3
 8000714:	466b      	mov	r3, sp
 8000716:	3300      	adds	r3, #0
 8000718:	623b      	str	r3, [r7, #32]
	tx[0] = _xt_start;
 800071a:	6a3b      	ldr	r3, [r7, #32]
 800071c:	227d      	movs	r2, #125	; 0x7d
 800071e:	701a      	strb	r2, [r3, #0]
	memcpy(tx + 1, cmd, len);
 8000720:	6a3b      	ldr	r3, [r7, #32]
 8000722:	3301      	adds	r3, #1
 8000724:	69ba      	ldr	r2, [r7, #24]
 8000726:	69f9      	ldr	r1, [r7, #28]
 8000728:	0018      	movs	r0, r3
 800072a:	f002 faa9 	bl	8002c80 <memcpy>
	tx[len + 1] = crc;
 800072e:	69bb      	ldr	r3, [r7, #24]
 8000730:	3301      	adds	r3, #1
 8000732:	6a3a      	ldr	r2, [r7, #32]
 8000734:	2113      	movs	r1, #19
 8000736:	2018      	movs	r0, #24
 8000738:	4684      	mov	ip, r0
 800073a:	44bc      	add	ip, r7
 800073c:	4461      	add	r1, ip
 800073e:	7809      	ldrb	r1, [r1, #0]
 8000740:	54d1      	strb	r1, [r2, r3]
	tx[len + 2] = _xt_stop;
 8000742:	69bb      	ldr	r3, [r7, #24]
 8000744:	3302      	adds	r3, #2
 8000746:	6a3a      	ldr	r2, [r7, #32]
 8000748:	217e      	movs	r1, #126	; 0x7e
 800074a:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit(&huart2, (uint8_t*) tx, len + 3, HAL_MAX_DELAY);
 800074c:	6a39      	ldr	r1, [r7, #32]
 800074e:	69bb      	ldr	r3, [r7, #24]
 8000750:	b29b      	uxth	r3, r3
 8000752:	3303      	adds	r3, #3
 8000754:	b29a      	uxth	r2, r3
 8000756:	2301      	movs	r3, #1
 8000758:	425b      	negs	r3, r3
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <_Z11sendCommandPhi+0xfc>)
 800075c:	f001 fc9e 	bl	800209c <HAL_UART_Transmit>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	469d      	mov	sp, r3

}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b00c      	add	sp, #48	; 0x30
 800076a:	bc04      	pop	{r2}
 800076c:	4690      	mov	r8, r2
 800076e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000770:	20000028 	.word	0x20000028

08000774 <_Z11receiveDatav>:

int receiveData() {
 8000774:	b580      	push	{r7, lr}
 8000776:	b094      	sub	sp, #80	; 0x50
 8000778:	af00      	add	r7, sp, #0
	int rxBuflen = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	64fb      	str	r3, [r7, #76]	; 0x4c
	int rxlen = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	64bb      	str	r3, [r7, #72]	; 0x48
	unsigned char rx[RX_BUF_LENGTH];
	HAL_UART_Receive(&huart2, (uint8_t*) rx, RX_BUF_LENGTH, HAL_MAX_DELAY);
 8000782:	2301      	movs	r3, #1
 8000784:	425b      	negs	r3, r3
 8000786:	0039      	movs	r1, r7
 8000788:	4849      	ldr	r0, [pc, #292]	; (80008b0 <_Z11receiveDatav+0x13c>)
 800078a:	2240      	movs	r2, #64	; 0x40
 800078c:	f001 fd2e 	bl	80021ec <HAL_UART_Receive>
	while (true) {
		if (rx[rxlen] == _xt_escape) {
 8000790:	003a      	movs	r2, r7
 8000792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000794:	18d3      	adds	r3, r2, r3
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b7f      	cmp	r3, #127	; 0x7f
 800079a:	d108      	bne.n	80007ae <_Z11receiveDatav+0x3a>
			if (rxlen >= RX_BUF_LENGTH)
 800079c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800079e:	2b3f      	cmp	r3, #63	; 0x3f
 80007a0:	dd02      	ble.n	80007a8 <_Z11receiveDatav+0x34>
				return -1;
 80007a2:	2301      	movs	r3, #1
 80007a4:	425b      	negs	r3, r3
 80007a6:	e07e      	b.n	80008a6 <_Z11receiveDatav+0x132>
			else
				rxlen++;
 80007a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007aa:	3301      	adds	r3, #1
 80007ac:	64bb      	str	r3, [r7, #72]	; 0x48
		}
		if (rx[rxlen] == _xt_start) {
 80007ae:	003a      	movs	r2, r7
 80007b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007b2:	18d3      	adds	r3, r2, r3
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b7d      	cmp	r3, #125	; 0x7d
 80007b8:	d1ea      	bne.n	8000790 <_Z11receiveDatav+0x1c>
			rxBuf[rxBuflen++] = rx[rxlen++];
 80007ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80007bc:	1c53      	adds	r3, r2, #1
 80007be:	64bb      	str	r3, [r7, #72]	; 0x48
 80007c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007c2:	1c59      	adds	r1, r3, #1
 80007c4:	64f9      	str	r1, [r7, #76]	; 0x4c
 80007c6:	0039      	movs	r1, r7
 80007c8:	5c89      	ldrb	r1, [r1, r2]
 80007ca:	4a3a      	ldr	r2, [pc, #232]	; (80008b4 <_Z11receiveDatav+0x140>)
 80007cc:	54d1      	strb	r1, [r2, r3]
			break;
		}
	}
	while (true) {
		if (rxBuflen >= RX_BUF_LENGTH || rxlen >= RX_BUF_LENGTH)
 80007ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007d0:	2b3f      	cmp	r3, #63	; 0x3f
 80007d2:	dc02      	bgt.n	80007da <_Z11receiveDatav+0x66>
 80007d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007d6:	2b3f      	cmp	r3, #63	; 0x3f
 80007d8:	dd02      	ble.n	80007e0 <_Z11receiveDatav+0x6c>
			return -1;
 80007da:	2301      	movs	r3, #1
 80007dc:	425b      	negs	r3, r3
 80007de:	e062      	b.n	80008a6 <_Z11receiveDatav+0x132>
		if (rx[rxlen] == _xt_escape) {
 80007e0:	003a      	movs	r2, r7
 80007e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007e4:	18d3      	adds	r3, r2, r3
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b7f      	cmp	r3, #127	; 0x7f
 80007ea:	d108      	bne.n	80007fe <_Z11receiveDatav+0x8a>
			if (rxlen >= RX_BUF_LENGTH)
 80007ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007ee:	2b3f      	cmp	r3, #63	; 0x3f
 80007f0:	dd02      	ble.n	80007f8 <_Z11receiveDatav+0x84>
				return -1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	425b      	negs	r3, r3
 80007f6:	e056      	b.n	80008a6 <_Z11receiveDatav+0x132>
			else
				rxlen++;
 80007f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007fa:	3301      	adds	r3, #1
 80007fc:	64bb      	str	r3, [r7, #72]	; 0x48
		}
		if (rx[rxlen] == _xt_start) {
 80007fe:	003a      	movs	r2, r7
 8000800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000802:	18d3      	adds	r3, r2, r3
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b7d      	cmp	r3, #125	; 0x7d
 8000808:	d10b      	bne.n	8000822 <_Z11receiveDatav+0xae>
			rxBuflen = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	64fb      	str	r3, [r7, #76]	; 0x4c
			rxBuf[rxBuflen++] = rx[rxlen++];
 800080e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000810:	1c53      	adds	r3, r2, #1
 8000812:	64bb      	str	r3, [r7, #72]	; 0x48
 8000814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000816:	1c59      	adds	r1, r3, #1
 8000818:	64f9      	str	r1, [r7, #76]	; 0x4c
 800081a:	0039      	movs	r1, r7
 800081c:	5c89      	ldrb	r1, [r1, r2]
 800081e:	4a25      	ldr	r2, [pc, #148]	; (80008b4 <_Z11receiveDatav+0x140>)
 8000820:	54d1      	strb	r1, [r2, r3]
		}
		if (rx[rxlen] == _xt_stop) {
 8000822:	003a      	movs	r2, r7
 8000824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000826:	18d3      	adds	r3, r2, r3
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b7e      	cmp	r3, #126	; 0x7e
 800082c:	d110      	bne.n	8000850 <_Z11receiveDatav+0xdc>
			rxBuf[rxBuflen++] = rx[rxlen];
 800082e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000830:	1c5a      	adds	r2, r3, #1
 8000832:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000834:	0039      	movs	r1, r7
 8000836:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000838:	188a      	adds	r2, r1, r2
 800083a:	7811      	ldrb	r1, [r2, #0]
 800083c:	4a1d      	ldr	r2, [pc, #116]	; (80008b4 <_Z11receiveDatav+0x140>)
 800083e:	54d1      	strb	r1, [r2, r3]
			break;
 8000840:	46c0      	nop			; (mov r8, r8)
		}
		rxBuf[rxBuflen++] = rx[rxlen++];
	}

	char crc = 0;
 8000842:	2347      	movs	r3, #71	; 0x47
 8000844:	18fb      	adds	r3, r7, r3
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < rxBuflen - 2; i++)
 800084a:	2300      	movs	r3, #0
 800084c:	643b      	str	r3, [r7, #64]	; 0x40
 800084e:	e00a      	b.n	8000866 <_Z11receiveDatav+0xf2>
		rxBuf[rxBuflen++] = rx[rxlen++];
 8000850:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000852:	1c53      	adds	r3, r2, #1
 8000854:	64bb      	str	r3, [r7, #72]	; 0x48
 8000856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000858:	1c59      	adds	r1, r3, #1
 800085a:	64f9      	str	r1, [r7, #76]	; 0x4c
 800085c:	0039      	movs	r1, r7
 800085e:	5c89      	ldrb	r1, [r1, r2]
 8000860:	4a14      	ldr	r2, [pc, #80]	; (80008b4 <_Z11receiveDatav+0x140>)
 8000862:	54d1      	strb	r1, [r2, r3]
		if (rxBuflen >= RX_BUF_LENGTH || rxlen >= RX_BUF_LENGTH)
 8000864:	e7b3      	b.n	80007ce <_Z11receiveDatav+0x5a>
	for (int i = 0; i < rxBuflen - 2; i++)
 8000866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000868:	3b02      	subs	r3, #2
 800086a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800086c:	429a      	cmp	r2, r3
 800086e:	da0d      	bge.n	800088c <_Z11receiveDatav+0x118>
		crc ^= rxBuf[i];
 8000870:	4a10      	ldr	r2, [pc, #64]	; (80008b4 <_Z11receiveDatav+0x140>)
 8000872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000874:	18d3      	adds	r3, r2, r3
 8000876:	7819      	ldrb	r1, [r3, #0]
 8000878:	2247      	movs	r2, #71	; 0x47
 800087a:	18bb      	adds	r3, r7, r2
 800087c:	18ba      	adds	r2, r7, r2
 800087e:	7812      	ldrb	r2, [r2, #0]
 8000880:	404a      	eors	r2, r1
 8000882:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < rxBuflen - 2; i++)
 8000884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000886:	3301      	adds	r3, #1
 8000888:	643b      	str	r3, [r7, #64]	; 0x40
 800088a:	e7ec      	b.n	8000866 <_Z11receiveDatav+0xf2>

	if (crc == rxBuf[rxBuflen - 2]) {
 800088c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800088e:	3b02      	subs	r3, #2
 8000890:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <_Z11receiveDatav+0x140>)
 8000892:	5cd3      	ldrb	r3, [r2, r3]
 8000894:	2247      	movs	r2, #71	; 0x47
 8000896:	18ba      	adds	r2, r7, r2
 8000898:	7812      	ldrb	r2, [r2, #0]
 800089a:	429a      	cmp	r2, r3
 800089c:	d101      	bne.n	80008a2 <_Z11receiveDatav+0x12e>
		return rxBuflen;
 800089e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008a0:	e001      	b.n	80008a6 <_Z11receiveDatav+0x132>
	} else {

		return -1;
 80008a2:	2301      	movs	r3, #1
 80008a4:	425b      	negs	r3, r3
	}
}
 80008a6:	0018      	movs	r0, r3
 80008a8:	46bd      	mov	sp, r7
 80008aa:	b014      	add	sp, #80	; 0x50
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	20000028 	.word	0x20000028
 80008b4:	200000ac 	.word	0x200000ac

080008b8 <_Z10receiveAckv>:

void receiveAck() {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	while (true) {
		receiveData();
 80008bc:	f7ff ff5a 	bl	8000774 <_Z11receiveDatav>
		if (rxBuf[1] == _xts_spr_ack || rxBuf[2] == _xts_spr_ack)
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <_Z10receiveAckv+0x20>)
 80008c2:	785b      	ldrb	r3, [r3, #1]
 80008c4:	2b10      	cmp	r3, #16
 80008c6:	d004      	beq.n	80008d2 <_Z10receiveAckv+0x1a>
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <_Z10receiveAckv+0x20>)
 80008ca:	789b      	ldrb	r3, [r3, #2]
 80008cc:	2b10      	cmp	r3, #16
 80008ce:	d000      	beq.n	80008d2 <_Z10receiveAckv+0x1a>
		receiveData();
 80008d0:	e7f4      	b.n	80008bc <_Z10receiveAckv+0x4>
			return;
 80008d2:	46c0      	nop			; (mov r8, r8)
	}
}
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200000ac 	.word	0x200000ac

080008dc <_Z11resetModulev>:

void resetModule() {
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	txBuf[0] = _xts_spc_mod_reset;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <_Z11resetModulev+0x20>)
 80008e2:	2222      	movs	r2, #34	; 0x22
 80008e4:	701a      	strb	r2, [r3, #0]
	sendCommand(txBuf, 1);
 80008e6:	4b05      	ldr	r3, [pc, #20]	; (80008fc <_Z11resetModulev+0x20>)
 80008e8:	2101      	movs	r1, #1
 80008ea:	0018      	movs	r0, r3
 80008ec:	f7ff fec2 	bl	8000674 <_Z11sendCommandPhi>
	receiveAck();
 80008f0:	f7ff ffe2 	bl	80008b8 <_Z10receiveAckv>
}
 80008f4:	46c0      	nop			; (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	200000ec 	.word	0x200000ec

08000900 <_Z18loadRespirationAppv>:

void loadRespirationApp() {
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	txBuf[0] = _xts_spc_mod_loadapp;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <_Z18loadRespirationAppv+0x2c>)
 8000906:	2221      	movs	r2, #33	; 0x21
 8000908:	701a      	strb	r2, [r3, #0]
	memcpy(txBuf + 1, &_xts_id_app_resp_adult, 4);
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <_Z18loadRespirationAppv+0x30>)
 800090c:	4909      	ldr	r1, [pc, #36]	; (8000934 <_Z18loadRespirationAppv+0x34>)
 800090e:	2204      	movs	r2, #4
 8000910:	0018      	movs	r0, r3
 8000912:	f002 f9b5 	bl	8002c80 <memcpy>
	sendCommand(txBuf, 5);
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <_Z18loadRespirationAppv+0x2c>)
 8000918:	2105      	movs	r1, #5
 800091a:	0018      	movs	r0, r3
 800091c:	f7ff feaa 	bl	8000674 <_Z11sendCommandPhi>
	receiveAck();
 8000920:	f7ff ffca 	bl	80008b8 <_Z10receiveAckv>
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	200000ec 	.word	0x200000ec
 8000930:	200000ed 	.word	0x200000ed
 8000934:	08002cbc 	.word	0x08002cbc

08000938 <_Z17configureNoiseMapv>:

void configureNoiseMap() {
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	txBuf[0] = _xts_spc_mod_noisemap;
 800093c:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <_Z17configureNoiseMapv+0x3c>)
 800093e:	2225      	movs	r2, #37	; 0x25
 8000940:	701a      	strb	r2, [r3, #0]
	txBuf[1] = _xts_spcn_setcontrol;
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <_Z17configureNoiseMapv+0x3c>)
 8000944:	2210      	movs	r2, #16
 8000946:	705a      	strb	r2, [r3, #1]
	txBuf[2] = 0x06; // 0x06: Use default noisemap and adaptive noisemap
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <_Z17configureNoiseMapv+0x3c>)
 800094a:	2206      	movs	r2, #6
 800094c:	709a      	strb	r2, [r3, #2]
	txBuf[3] = 0x00;
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <_Z17configureNoiseMapv+0x3c>)
 8000950:	2200      	movs	r2, #0
 8000952:	70da      	strb	r2, [r3, #3]
	txBuf[4] = 0x00;
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <_Z17configureNoiseMapv+0x3c>)
 8000956:	2200      	movs	r2, #0
 8000958:	711a      	strb	r2, [r3, #4]
	txBuf[5] = 0x00;
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <_Z17configureNoiseMapv+0x3c>)
 800095c:	2200      	movs	r2, #0
 800095e:	715a      	strb	r2, [r3, #5]
	sendCommand(txBuf, 6);
 8000960:	4b04      	ldr	r3, [pc, #16]	; (8000974 <_Z17configureNoiseMapv+0x3c>)
 8000962:	2106      	movs	r1, #6
 8000964:	0018      	movs	r0, r3
 8000966:	f7ff fe85 	bl	8000674 <_Z11sendCommandPhi>
	receiveAck();
 800096a:	f7ff ffa5 	bl	80008b8 <_Z10receiveAckv>
}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	200000ec 	.word	0x200000ec

08000978 <_Z10setSensityi>:

void setSensity(int sensitivity) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	txBuf[0] = _xts_spc_appcommand;
 8000980:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <_Z10setSensityi+0x44>)
 8000982:	2210      	movs	r2, #16
 8000984:	701a      	strb	r2, [r3, #0]
	txBuf[1] = _xts_spca_set;
 8000986:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <_Z10setSensityi+0x44>)
 8000988:	2210      	movs	r2, #16
 800098a:	705a      	strb	r2, [r3, #1]
	memcpy(txBuf + 2, &_xts_id_sensitivity, 4);
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <_Z10setSensityi+0x48>)
 800098e:	490d      	ldr	r1, [pc, #52]	; (80009c4 <_Z10setSensityi+0x4c>)
 8000990:	2204      	movs	r2, #4
 8000992:	0018      	movs	r0, r3
 8000994:	f002 f974 	bl	8002c80 <memcpy>
	memcpy(txBuf + 6, &sensitivity, 4);
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <_Z10setSensityi+0x50>)
 800099a:	1d39      	adds	r1, r7, #4
 800099c:	2204      	movs	r2, #4
 800099e:	0018      	movs	r0, r3
 80009a0:	f002 f96e 	bl	8002c80 <memcpy>
	sendCommand(txBuf, 10);
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <_Z10setSensityi+0x44>)
 80009a6:	210a      	movs	r1, #10
 80009a8:	0018      	movs	r0, r3
 80009aa:	f7ff fe63 	bl	8000674 <_Z11sendCommandPhi>
	receiveAck();
 80009ae:	f7ff ff83 	bl	80008b8 <_Z10receiveAckv>
}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b002      	add	sp, #8
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	200000ec 	.word	0x200000ec
 80009c0:	200000ee 	.word	0x200000ee
 80009c4:	08002cc4 	.word	0x08002cc4
 80009c8:	200000f2 	.word	0x200000f2

080009cc <_Z16setDetectionZoneff>:

void setDetectionZone(float start_zone, float end_zone) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
	txBuf[0] = _xts_spc_appcommand;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <_Z16setDetectionZoneff+0x50>)
 80009d8:	2210      	movs	r2, #16
 80009da:	701a      	strb	r2, [r3, #0]
	txBuf[1] = _xts_spca_set;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <_Z16setDetectionZoneff+0x50>)
 80009de:	2210      	movs	r2, #16
 80009e0:	705a      	strb	r2, [r3, #1]

	memcpy(txBuf + 2, &_xts_id_detection_zone, 4);
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <_Z16setDetectionZoneff+0x54>)
 80009e4:	490f      	ldr	r1, [pc, #60]	; (8000a24 <_Z16setDetectionZoneff+0x58>)
 80009e6:	2204      	movs	r2, #4
 80009e8:	0018      	movs	r0, r3
 80009ea:	f002 f949 	bl	8002c80 <memcpy>
	memcpy(txBuf + 6, &start_zone, 4);
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <_Z16setDetectionZoneff+0x5c>)
 80009f0:	1d39      	adds	r1, r7, #4
 80009f2:	2204      	movs	r2, #4
 80009f4:	0018      	movs	r0, r3
 80009f6:	f002 f943 	bl	8002c80 <memcpy>
	memcpy(txBuf + 10, &end_zone, 4);
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <_Z16setDetectionZoneff+0x60>)
 80009fc:	0039      	movs	r1, r7
 80009fe:	2204      	movs	r2, #4
 8000a00:	0018      	movs	r0, r3
 8000a02:	f002 f93d 	bl	8002c80 <memcpy>

	sendCommand(txBuf, 14);
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <_Z16setDetectionZoneff+0x50>)
 8000a08:	210e      	movs	r1, #14
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f7ff fe32 	bl	8000674 <_Z11sendCommandPhi>
	receiveAck();
 8000a10:	f7ff ff52 	bl	80008b8 <_Z10receiveAckv>
}
 8000a14:	46c0      	nop			; (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b002      	add	sp, #8
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200000ec 	.word	0x200000ec
 8000a20:	200000ee 	.word	0x200000ee
 8000a24:	08002cc0 	.word	0x08002cc0
 8000a28:	200000f2 	.word	0x200000f2
 8000a2c:	200000f6 	.word	0x200000f6

08000a30 <_Z10executeAppv>:

void executeApp() {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	txBuf[0] = _xts_spc_mod_setmode;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <_Z10executeAppv+0x20>)
 8000a36:	2220      	movs	r2, #32
 8000a38:	701a      	strb	r2, [r3, #0]
	txBuf[1] = _xts_sm_run;
 8000a3a:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <_Z10executeAppv+0x20>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	705a      	strb	r2, [r3, #1]

	sendCommand(txBuf, 2);
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <_Z10executeAppv+0x20>)
 8000a42:	2102      	movs	r1, #2
 8000a44:	0018      	movs	r0, r3
 8000a46:	f7ff fe15 	bl	8000674 <_Z11sendCommandPhi>
}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	200000ec 	.word	0x200000ec

08000a54 <_Z18getRespirationDatav>:

RespirationData getRespirationData() {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	RespirationData data;

	if (receiveData() < 0 || rxBuf[1] != _xts_spr_appdata) {
 8000a5c:	f7ff fe8a 	bl	8000774 <_Z11receiveDatav>
 8000a60:	1e03      	subs	r3, r0, #0
 8000a62:	db03      	blt.n	8000a6c <_Z18getRespirationDatav+0x18>
 8000a64:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <_Z18getRespirationDatav+0x6c>)
 8000a66:	785b      	ldrb	r3, [r3, #1]
 8000a68:	2b50      	cmp	r3, #80	; 0x50
 8000a6a:	d001      	beq.n	8000a70 <_Z18getRespirationDatav+0x1c>
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	e000      	b.n	8000a72 <_Z18getRespirationDatav+0x1e>
 8000a70:	2300      	movs	r3, #0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d003      	beq.n	8000a7e <_Z18getRespirationDatav+0x2a>
		data.valid = false;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
		return data;
 8000a7c:	e01c      	b.n	8000ab8 <_Z18getRespirationDatav+0x64>
	}
	memcpy(&data.code, &rxBuf[10], 4);
 8000a7e:	4911      	ldr	r1, [pc, #68]	; (8000ac4 <_Z18getRespirationDatav+0x70>)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	330c      	adds	r3, #12
 8000a84:	2204      	movs	r2, #4
 8000a86:	0018      	movs	r0, r3
 8000a88:	f002 f8fa 	bl	8002c80 <memcpy>
	if (data.code == _xts_val_resp_state_breathing) {
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	7b1b      	ldrb	r3, [r3, #12]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d10d      	bne.n	8000ab0 <_Z18getRespirationDatav+0x5c>
		memcpy(&data.rpm, &rxBuf[14], 4);
 8000a94:	490c      	ldr	r1, [pc, #48]	; (8000ac8 <_Z18getRespirationDatav+0x74>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	3308      	adds	r3, #8
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f002 f8ef 	bl	8002c80 <memcpy>
		memcpy(&data.movement, &rxBuf[22], 4);
 8000aa2:	490a      	ldr	r1, [pc, #40]	; (8000acc <_Z18getRespirationDatav+0x78>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3304      	adds	r3, #4
 8000aa8:	2204      	movs	r2, #4
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f002 f8e8 	bl	8002c80 <memcpy>
	}

	data.valid = true;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	701a      	strb	r2, [r3, #0]
	return data;
 8000ab6:	46c0      	nop			; (mov r8, r8)

}
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b002      	add	sp, #8
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200000ac 	.word	0x200000ac
 8000ac4:	200000b6 	.word	0x200000b6
 8000ac8:	200000ba 	.word	0x200000ba
 8000acc:	200000c2 	.word	0x200000c2

08000ad0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ad6:	e7fe      	b.n	8000ad6 <Error_Handler+0x6>

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000adc:	4b07      	ldr	r3, [pc, #28]	; (8000afc <HAL_MspInit+0x24>)
 8000ade:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_MspInit+0x24>)
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <HAL_MspInit+0x24>)
 8000aea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <HAL_MspInit+0x24>)
 8000aee:	2180      	movs	r1, #128	; 0x80
 8000af0:	0549      	lsls	r1, r1, #21
 8000af2:	430a      	orrs	r2, r1
 8000af4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40021000 	.word	0x40021000

08000b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	230c      	movs	r3, #12
 8000b0a:	18fb      	adds	r3, r7, r3
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	2314      	movs	r3, #20
 8000b10:	001a      	movs	r2, r3
 8000b12:	2100      	movs	r1, #0
 8000b14:	f002 f8bd 	bl	8002c92 <memset>
  if(huart->Instance==USART2)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a18      	ldr	r2, [pc, #96]	; (8000b80 <HAL_UART_MspInit+0x80>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d129      	bne.n	8000b76 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b22:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <HAL_UART_MspInit+0x84>)
 8000b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <HAL_UART_MspInit+0x84>)
 8000b28:	2180      	movs	r1, #128	; 0x80
 8000b2a:	0289      	lsls	r1, r1, #10
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_UART_MspInit+0x84>)
 8000b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <HAL_UART_MspInit+0x84>)
 8000b36:	2101      	movs	r1, #1
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <HAL_UART_MspInit+0x84>)
 8000b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b40:	2201      	movs	r2, #1
 8000b42:	4013      	ands	r3, r2
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b48:	210c      	movs	r1, #12
 8000b4a:	187b      	adds	r3, r7, r1
 8000b4c:	220c      	movs	r2, #12
 8000b4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	187b      	adds	r3, r7, r1
 8000b52:	2202      	movs	r2, #2
 8000b54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	2203      	movs	r2, #3
 8000b60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	2204      	movs	r2, #4
 8000b66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	187a      	adds	r2, r7, r1
 8000b6a:	23a0      	movs	r3, #160	; 0xa0
 8000b6c:	05db      	lsls	r3, r3, #23
 8000b6e:	0011      	movs	r1, r2
 8000b70:	0018      	movs	r0, r3
 8000b72:	f000 f973 	bl	8000e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b008      	add	sp, #32
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	40004400 	.word	0x40004400
 8000b84:	40021000 	.word	0x40021000

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <NMI_Handler+0x4>

08000b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <HardFault_Handler+0x4>

08000b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b98:	46c0      	nop			; (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bac:	f000 f886 	bl	8000cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000bc2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc4:	480d      	ldr	r0, [pc, #52]	; (8000bfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000bc6:	490e      	ldr	r1, [pc, #56]	; (8000c00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bc8:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <LoopForever+0xe>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bcc:	e002      	b.n	8000bd4 <LoopCopyDataInit>

08000bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd2:	3304      	adds	r3, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd8:	d3f9      	bcc.n	8000bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bda:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bdc:	4c0b      	ldr	r4, [pc, #44]	; (8000c0c <LoopForever+0x16>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be0:	e001      	b.n	8000be6 <LoopFillZerobss>

08000be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be4:	3204      	adds	r2, #4

08000be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be8:	d3fb      	bcc.n	8000be2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bea:	f7ff ffe4 	bl	8000bb6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bee:	f002 f823 	bl	8002c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bf2:	f7ff fc4b 	bl	800048c <main>

08000bf6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf6:	e7fe      	b.n	8000bf6 <LoopForever>
   ldr   r0, =_estack
 8000bf8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c04:	08002d44 	.word	0x08002d44
  ldr r2, =_sbss
 8000c08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c0c:	20000130 	.word	0x20000130

08000c10 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC1_COMP_IRQHandler>
	...

08000c14 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c20:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <HAL_Init+0x3c>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <HAL_Init+0x3c>)
 8000c26:	2140      	movs	r1, #64	; 0x40
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f000 f811 	bl	8000c54 <HAL_InitTick>
 8000c32:	1e03      	subs	r3, r0, #0
 8000c34:	d003      	beq.n	8000c3e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
 8000c3c:	e001      	b.n	8000c42 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c3e:	f7ff ff4b 	bl	8000ad8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	781b      	ldrb	r3, [r3, #0]
}
 8000c46:	0018      	movs	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b002      	add	sp, #8
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	40022000 	.word	0x40022000

08000c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <HAL_InitTick+0x5c>)
 8000c5e:	681c      	ldr	r4, [r3, #0]
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <HAL_InitTick+0x60>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	0019      	movs	r1, r3
 8000c66:	23fa      	movs	r3, #250	; 0xfa
 8000c68:	0098      	lsls	r0, r3, #2
 8000c6a:	f7ff fa4d 	bl	8000108 <__udivsi3>
 8000c6e:	0003      	movs	r3, r0
 8000c70:	0019      	movs	r1, r3
 8000c72:	0020      	movs	r0, r4
 8000c74:	f7ff fa48 	bl	8000108 <__udivsi3>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f000 f8e1 	bl	8000e42 <HAL_SYSTICK_Config>
 8000c80:	1e03      	subs	r3, r0, #0
 8000c82:	d001      	beq.n	8000c88 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	e00f      	b.n	8000ca8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b03      	cmp	r3, #3
 8000c8c:	d80b      	bhi.n	8000ca6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	2301      	movs	r3, #1
 8000c92:	425b      	negs	r3, r3
 8000c94:	2200      	movs	r2, #0
 8000c96:	0018      	movs	r0, r3
 8000c98:	f000 f8be 	bl	8000e18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_InitTick+0x64>)
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e000      	b.n	8000ca8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	0018      	movs	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b003      	add	sp, #12
 8000cae:	bd90      	pop	{r4, r7, pc}
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	20000004 	.word	0x20000004

08000cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <HAL_IncTick+0x1c>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <HAL_IncTick+0x20>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	18d2      	adds	r2, r2, r3
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <HAL_IncTick+0x20>)
 8000cce:	601a      	str	r2, [r3, #0]
}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	2000012c 	.word	0x2000012c

08000ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce4:	4b02      	ldr	r3, [pc, #8]	; (8000cf0 <HAL_GetTick+0x10>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	0018      	movs	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	2000012c 	.word	0x2000012c

08000cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	0002      	movs	r2, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d02:	1dfb      	adds	r3, r7, #7
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b7f      	cmp	r3, #127	; 0x7f
 8000d08:	d828      	bhi.n	8000d5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d0a:	4a2f      	ldr	r2, [pc, #188]	; (8000dc8 <__NVIC_SetPriority+0xd4>)
 8000d0c:	1dfb      	adds	r3, r7, #7
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b25b      	sxtb	r3, r3
 8000d12:	089b      	lsrs	r3, r3, #2
 8000d14:	33c0      	adds	r3, #192	; 0xc0
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	589b      	ldr	r3, [r3, r2]
 8000d1a:	1dfa      	adds	r2, r7, #7
 8000d1c:	7812      	ldrb	r2, [r2, #0]
 8000d1e:	0011      	movs	r1, r2
 8000d20:	2203      	movs	r2, #3
 8000d22:	400a      	ands	r2, r1
 8000d24:	00d2      	lsls	r2, r2, #3
 8000d26:	21ff      	movs	r1, #255	; 0xff
 8000d28:	4091      	lsls	r1, r2
 8000d2a:	000a      	movs	r2, r1
 8000d2c:	43d2      	mvns	r2, r2
 8000d2e:	401a      	ands	r2, r3
 8000d30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	019b      	lsls	r3, r3, #6
 8000d36:	22ff      	movs	r2, #255	; 0xff
 8000d38:	401a      	ands	r2, r3
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	0018      	movs	r0, r3
 8000d40:	2303      	movs	r3, #3
 8000d42:	4003      	ands	r3, r0
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d48:	481f      	ldr	r0, [pc, #124]	; (8000dc8 <__NVIC_SetPriority+0xd4>)
 8000d4a:	1dfb      	adds	r3, r7, #7
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	b25b      	sxtb	r3, r3
 8000d50:	089b      	lsrs	r3, r3, #2
 8000d52:	430a      	orrs	r2, r1
 8000d54:	33c0      	adds	r3, #192	; 0xc0
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d5a:	e031      	b.n	8000dc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d5c:	4a1b      	ldr	r2, [pc, #108]	; (8000dcc <__NVIC_SetPriority+0xd8>)
 8000d5e:	1dfb      	adds	r3, r7, #7
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	0019      	movs	r1, r3
 8000d64:	230f      	movs	r3, #15
 8000d66:	400b      	ands	r3, r1
 8000d68:	3b08      	subs	r3, #8
 8000d6a:	089b      	lsrs	r3, r3, #2
 8000d6c:	3306      	adds	r3, #6
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	18d3      	adds	r3, r2, r3
 8000d72:	3304      	adds	r3, #4
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	1dfa      	adds	r2, r7, #7
 8000d78:	7812      	ldrb	r2, [r2, #0]
 8000d7a:	0011      	movs	r1, r2
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	400a      	ands	r2, r1
 8000d80:	00d2      	lsls	r2, r2, #3
 8000d82:	21ff      	movs	r1, #255	; 0xff
 8000d84:	4091      	lsls	r1, r2
 8000d86:	000a      	movs	r2, r1
 8000d88:	43d2      	mvns	r2, r2
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	019b      	lsls	r3, r3, #6
 8000d92:	22ff      	movs	r2, #255	; 0xff
 8000d94:	401a      	ands	r2, r3
 8000d96:	1dfb      	adds	r3, r7, #7
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	4003      	ands	r3, r0
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da4:	4809      	ldr	r0, [pc, #36]	; (8000dcc <__NVIC_SetPriority+0xd8>)
 8000da6:	1dfb      	adds	r3, r7, #7
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	001c      	movs	r4, r3
 8000dac:	230f      	movs	r3, #15
 8000dae:	4023      	ands	r3, r4
 8000db0:	3b08      	subs	r3, #8
 8000db2:	089b      	lsrs	r3, r3, #2
 8000db4:	430a      	orrs	r2, r1
 8000db6:	3306      	adds	r3, #6
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	18c3      	adds	r3, r0, r3
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	601a      	str	r2, [r3, #0]
}
 8000dc0:	46c0      	nop			; (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b003      	add	sp, #12
 8000dc6:	bd90      	pop	{r4, r7, pc}
 8000dc8:	e000e100 	.word	0xe000e100
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	4a0c      	ldr	r2, [pc, #48]	; (8000e10 <SysTick_Config+0x40>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d901      	bls.n	8000de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de2:	2301      	movs	r3, #1
 8000de4:	e010      	b.n	8000e08 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <SysTick_Config+0x44>)
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	3a01      	subs	r2, #1
 8000dec:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dee:	2301      	movs	r3, #1
 8000df0:	425b      	negs	r3, r3
 8000df2:	2103      	movs	r1, #3
 8000df4:	0018      	movs	r0, r3
 8000df6:	f7ff ff7d 	bl	8000cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <SysTick_Config+0x44>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <SysTick_Config+0x44>)
 8000e02:	2207      	movs	r2, #7
 8000e04:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	0018      	movs	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b002      	add	sp, #8
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	00ffffff 	.word	0x00ffffff
 8000e14:	e000e010 	.word	0xe000e010

08000e18 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
 8000e22:	210f      	movs	r1, #15
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	1c02      	adds	r2, r0, #0
 8000e28:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b25b      	sxtb	r3, r3
 8000e32:	0011      	movs	r1, r2
 8000e34:	0018      	movs	r0, r3
 8000e36:	f7ff ff5d 	bl	8000cf4 <__NVIC_SetPriority>
}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b004      	add	sp, #16
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f7ff ffbf 	bl	8000dd0 <SysTick_Config>
 8000e52:	0003      	movs	r3, r0
}
 8000e54:	0018      	movs	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	b002      	add	sp, #8
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e72:	e155      	b.n	8001120 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2101      	movs	r1, #1
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	4091      	lsls	r1, r2
 8000e7e:	000a      	movs	r2, r1
 8000e80:	4013      	ands	r3, r2
 8000e82:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d100      	bne.n	8000e8c <HAL_GPIO_Init+0x30>
 8000e8a:	e146      	b.n	800111a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d00b      	beq.n	8000eac <HAL_GPIO_Init+0x50>
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d007      	beq.n	8000eac <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ea0:	2b11      	cmp	r3, #17
 8000ea2:	d003      	beq.n	8000eac <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	2b12      	cmp	r3, #18
 8000eaa:	d130      	bne.n	8000f0e <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	409a      	lsls	r2, r3
 8000eba:	0013      	movs	r3, r2
 8000ebc:	43da      	mvns	r2, r3
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	68da      	ldr	r2, [r3, #12]
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	409a      	lsls	r2, r3
 8000ece:	0013      	movs	r3, r2
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	409a      	lsls	r2, r3
 8000ee8:	0013      	movs	r3, r2
 8000eea:	43da      	mvns	r2, r3
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	091b      	lsrs	r3, r3, #4
 8000ef8:	2201      	movs	r2, #1
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
 8000f00:	0013      	movs	r3, r2
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	2203      	movs	r2, #3
 8000f1a:	409a      	lsls	r2, r3
 8000f1c:	0013      	movs	r3, r2
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	689a      	ldr	r2, [r3, #8]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	409a      	lsls	r2, r3
 8000f30:	0013      	movs	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_Init+0xf2>
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b12      	cmp	r3, #18
 8000f4c:	d123      	bne.n	8000f96 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	08da      	lsrs	r2, r3, #3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3208      	adds	r2, #8
 8000f56:	0092      	lsls	r2, r2, #2
 8000f58:	58d3      	ldr	r3, [r2, r3]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	2207      	movs	r2, #7
 8000f60:	4013      	ands	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	220f      	movs	r2, #15
 8000f66:	409a      	lsls	r2, r3
 8000f68:	0013      	movs	r3, r2
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	691a      	ldr	r2, [r3, #16]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	2107      	movs	r1, #7
 8000f7a:	400b      	ands	r3, r1
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	0013      	movs	r3, r2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	08da      	lsrs	r2, r3, #3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3208      	adds	r2, #8
 8000f90:	0092      	lsls	r2, r2, #2
 8000f92:	6939      	ldr	r1, [r7, #16]
 8000f94:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	0013      	movs	r3, r2
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	401a      	ands	r2, r3
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	409a      	lsls	r2, r3
 8000fbc:	0013      	movs	r3, r2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	2380      	movs	r3, #128	; 0x80
 8000fd0:	055b      	lsls	r3, r3, #21
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	d100      	bne.n	8000fd8 <HAL_GPIO_Init+0x17c>
 8000fd6:	e0a0      	b.n	800111a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd8:	4b57      	ldr	r3, [pc, #348]	; (8001138 <HAL_GPIO_Init+0x2dc>)
 8000fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fdc:	4b56      	ldr	r3, [pc, #344]	; (8001138 <HAL_GPIO_Init+0x2dc>)
 8000fde:	2101      	movs	r1, #1
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fe4:	4a55      	ldr	r2, [pc, #340]	; (800113c <HAL_GPIO_Init+0x2e0>)
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	089b      	lsrs	r3, r3, #2
 8000fea:	3302      	adds	r3, #2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	589b      	ldr	r3, [r3, r2]
 8000ff0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	409a      	lsls	r2, r3
 8000ffe:	0013      	movs	r3, r2
 8001000:	43da      	mvns	r2, r3
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	23a0      	movs	r3, #160	; 0xa0
 800100c:	05db      	lsls	r3, r3, #23
 800100e:	429a      	cmp	r2, r3
 8001010:	d01f      	beq.n	8001052 <HAL_GPIO_Init+0x1f6>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4a      	ldr	r2, [pc, #296]	; (8001140 <HAL_GPIO_Init+0x2e4>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d019      	beq.n	800104e <HAL_GPIO_Init+0x1f2>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a49      	ldr	r2, [pc, #292]	; (8001144 <HAL_GPIO_Init+0x2e8>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d013      	beq.n	800104a <HAL_GPIO_Init+0x1ee>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a48      	ldr	r2, [pc, #288]	; (8001148 <HAL_GPIO_Init+0x2ec>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d00d      	beq.n	8001046 <HAL_GPIO_Init+0x1ea>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a47      	ldr	r2, [pc, #284]	; (800114c <HAL_GPIO_Init+0x2f0>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d007      	beq.n	8001042 <HAL_GPIO_Init+0x1e6>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a46      	ldr	r2, [pc, #280]	; (8001150 <HAL_GPIO_Init+0x2f4>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d101      	bne.n	800103e <HAL_GPIO_Init+0x1e2>
 800103a:	2305      	movs	r3, #5
 800103c:	e00a      	b.n	8001054 <HAL_GPIO_Init+0x1f8>
 800103e:	2306      	movs	r3, #6
 8001040:	e008      	b.n	8001054 <HAL_GPIO_Init+0x1f8>
 8001042:	2304      	movs	r3, #4
 8001044:	e006      	b.n	8001054 <HAL_GPIO_Init+0x1f8>
 8001046:	2303      	movs	r3, #3
 8001048:	e004      	b.n	8001054 <HAL_GPIO_Init+0x1f8>
 800104a:	2302      	movs	r3, #2
 800104c:	e002      	b.n	8001054 <HAL_GPIO_Init+0x1f8>
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <HAL_GPIO_Init+0x1f8>
 8001052:	2300      	movs	r3, #0
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	2103      	movs	r1, #3
 8001058:	400a      	ands	r2, r1
 800105a:	0092      	lsls	r2, r2, #2
 800105c:	4093      	lsls	r3, r2
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001064:	4935      	ldr	r1, [pc, #212]	; (800113c <HAL_GPIO_Init+0x2e0>)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	3302      	adds	r3, #2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001072:	4b38      	ldr	r3, [pc, #224]	; (8001154 <HAL_GPIO_Init+0x2f8>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	43da      	mvns	r2, r3
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	2380      	movs	r3, #128	; 0x80
 8001088:	025b      	lsls	r3, r3, #9
 800108a:	4013      	ands	r3, r2
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4313      	orrs	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001096:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <HAL_GPIO_Init+0x2f8>)
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800109c:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <HAL_GPIO_Init+0x2f8>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	43da      	mvns	r2, r3
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	029b      	lsls	r3, r3, #10
 80010b4:	4013      	ands	r3, r2
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010c0:	4b24      	ldr	r3, [pc, #144]	; (8001154 <HAL_GPIO_Init+0x2f8>)
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c6:	4b23      	ldr	r3, [pc, #140]	; (8001154 <HAL_GPIO_Init+0x2f8>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	43da      	mvns	r2, r3
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	2380      	movs	r3, #128	; 0x80
 80010dc:	035b      	lsls	r3, r3, #13
 80010de:	4013      	ands	r3, r2
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010ea:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <HAL_GPIO_Init+0x2f8>)
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80010f0:	4b18      	ldr	r3, [pc, #96]	; (8001154 <HAL_GPIO_Init+0x2f8>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	43da      	mvns	r2, r3
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	2380      	movs	r3, #128	; 0x80
 8001106:	039b      	lsls	r3, r3, #14
 8001108:	4013      	ands	r3, r2
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <HAL_GPIO_Init+0x2f8>)
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	3301      	adds	r3, #1
 800111e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	40da      	lsrs	r2, r3
 8001128:	1e13      	subs	r3, r2, #0
 800112a:	d000      	beq.n	800112e <HAL_GPIO_Init+0x2d2>
 800112c:	e6a2      	b.n	8000e74 <HAL_GPIO_Init+0x18>
  }
}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	b006      	add	sp, #24
 8001134:	bd80      	pop	{r7, pc}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	40021000 	.word	0x40021000
 800113c:	40010000 	.word	0x40010000
 8001140:	50000400 	.word	0x50000400
 8001144:	50000800 	.word	0x50000800
 8001148:	50000c00 	.word	0x50000c00
 800114c:	50001000 	.word	0x50001000
 8001150:	50001c00 	.word	0x50001c00
 8001154:	40010400 	.word	0x40010400

08001158 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001158:	b5b0      	push	{r4, r5, r7, lr}
 800115a:	b08a      	sub	sp, #40	; 0x28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d102      	bne.n	800116c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	f000 fbc2 	bl	80018f0 <HAL_RCC_OscConfig+0x798>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800116c:	4bca      	ldr	r3, [pc, #808]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	220c      	movs	r2, #12
 8001172:	4013      	ands	r3, r2
 8001174:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001176:	4bc8      	ldr	r3, [pc, #800]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 8001178:	68da      	ldr	r2, [r3, #12]
 800117a:	2380      	movs	r3, #128	; 0x80
 800117c:	025b      	lsls	r3, r3, #9
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2201      	movs	r2, #1
 8001188:	4013      	ands	r3, r2
 800118a:	d100      	bne.n	800118e <HAL_RCC_OscConfig+0x36>
 800118c:	e07e      	b.n	800128c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	2b08      	cmp	r3, #8
 8001192:	d007      	beq.n	80011a4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	2b0c      	cmp	r3, #12
 8001198:	d112      	bne.n	80011c0 <HAL_RCC_OscConfig+0x68>
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	025b      	lsls	r3, r3, #9
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d10d      	bne.n	80011c0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a4:	4bbc      	ldr	r3, [pc, #752]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	029b      	lsls	r3, r3, #10
 80011ac:	4013      	ands	r3, r2
 80011ae:	d100      	bne.n	80011b2 <HAL_RCC_OscConfig+0x5a>
 80011b0:	e06b      	b.n	800128a <HAL_RCC_OscConfig+0x132>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d167      	bne.n	800128a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	f000 fb98 	bl	80018f0 <HAL_RCC_OscConfig+0x798>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	025b      	lsls	r3, r3, #9
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d107      	bne.n	80011dc <HAL_RCC_OscConfig+0x84>
 80011cc:	4bb2      	ldr	r3, [pc, #712]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4bb1      	ldr	r3, [pc, #708]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 80011d2:	2180      	movs	r1, #128	; 0x80
 80011d4:	0249      	lsls	r1, r1, #9
 80011d6:	430a      	orrs	r2, r1
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	e027      	b.n	800122c <HAL_RCC_OscConfig+0xd4>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	23a0      	movs	r3, #160	; 0xa0
 80011e2:	02db      	lsls	r3, r3, #11
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d10e      	bne.n	8001206 <HAL_RCC_OscConfig+0xae>
 80011e8:	4bab      	ldr	r3, [pc, #684]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4baa      	ldr	r3, [pc, #680]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 80011ee:	2180      	movs	r1, #128	; 0x80
 80011f0:	02c9      	lsls	r1, r1, #11
 80011f2:	430a      	orrs	r2, r1
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	4ba8      	ldr	r3, [pc, #672]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	4ba7      	ldr	r3, [pc, #668]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 80011fc:	2180      	movs	r1, #128	; 0x80
 80011fe:	0249      	lsls	r1, r1, #9
 8001200:	430a      	orrs	r2, r1
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	e012      	b.n	800122c <HAL_RCC_OscConfig+0xd4>
 8001206:	4ba4      	ldr	r3, [pc, #656]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	4ba3      	ldr	r3, [pc, #652]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 800120c:	49a3      	ldr	r1, [pc, #652]	; (800149c <HAL_RCC_OscConfig+0x344>)
 800120e:	400a      	ands	r2, r1
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	4ba1      	ldr	r3, [pc, #644]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	2380      	movs	r3, #128	; 0x80
 8001218:	025b      	lsls	r3, r3, #9
 800121a:	4013      	ands	r3, r2
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4b9d      	ldr	r3, [pc, #628]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b9c      	ldr	r3, [pc, #624]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 8001226:	499e      	ldr	r1, [pc, #632]	; (80014a0 <HAL_RCC_OscConfig+0x348>)
 8001228:	400a      	ands	r2, r1
 800122a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d015      	beq.n	8001260 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001234:	f7ff fd54 	bl	8000ce0 <HAL_GetTick>
 8001238:	0003      	movs	r3, r0
 800123a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800123c:	e009      	b.n	8001252 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800123e:	f7ff fd4f 	bl	8000ce0 <HAL_GetTick>
 8001242:	0002      	movs	r2, r0
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b64      	cmp	r3, #100	; 0x64
 800124a:	d902      	bls.n	8001252 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	f000 fb4f 	bl	80018f0 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001252:	4b91      	ldr	r3, [pc, #580]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	2380      	movs	r3, #128	; 0x80
 8001258:	029b      	lsls	r3, r3, #10
 800125a:	4013      	ands	r3, r2
 800125c:	d0ef      	beq.n	800123e <HAL_RCC_OscConfig+0xe6>
 800125e:	e015      	b.n	800128c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001260:	f7ff fd3e 	bl	8000ce0 <HAL_GetTick>
 8001264:	0003      	movs	r3, r0
 8001266:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800126a:	f7ff fd39 	bl	8000ce0 <HAL_GetTick>
 800126e:	0002      	movs	r2, r0
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b64      	cmp	r3, #100	; 0x64
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e339      	b.n	80018f0 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800127c:	4b86      	ldr	r3, [pc, #536]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	029b      	lsls	r3, r3, #10
 8001284:	4013      	ands	r3, r2
 8001286:	d1f0      	bne.n	800126a <HAL_RCC_OscConfig+0x112>
 8001288:	e000      	b.n	800128c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2202      	movs	r2, #2
 8001292:	4013      	ands	r3, r2
 8001294:	d100      	bne.n	8001298 <HAL_RCC_OscConfig+0x140>
 8001296:	e09a      	b.n	80013ce <HAL_RCC_OscConfig+0x276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	2220      	movs	r2, #32
 80012a2:	4013      	ands	r3, r2
 80012a4:	d009      	beq.n	80012ba <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80012a6:	4b7c      	ldr	r3, [pc, #496]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	4b7b      	ldr	r3, [pc, #492]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 80012ac:	2120      	movs	r1, #32
 80012ae:	430a      	orrs	r2, r1
 80012b0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	2220      	movs	r2, #32
 80012b6:	4393      	bics	r3, r2
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	2b04      	cmp	r3, #4
 80012be:	d005      	beq.n	80012cc <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	2b0c      	cmp	r3, #12
 80012c4:	d13f      	bne.n	8001346 <HAL_RCC_OscConfig+0x1ee>
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d13c      	bne.n	8001346 <HAL_RCC_OscConfig+0x1ee>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80012cc:	4b72      	ldr	r3, [pc, #456]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2204      	movs	r2, #4
 80012d2:	4013      	ands	r3, r2
 80012d4:	d004      	beq.n	80012e0 <HAL_RCC_OscConfig+0x188>
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e307      	b.n	80018f0 <HAL_RCC_OscConfig+0x798>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e0:	4b6d      	ldr	r3, [pc, #436]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	4a6f      	ldr	r2, [pc, #444]	; (80014a4 <HAL_RCC_OscConfig+0x34c>)
 80012e6:	4013      	ands	r3, r2
 80012e8:	0019      	movs	r1, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	021a      	lsls	r2, r3, #8
 80012f0:	4b69      	ldr	r3, [pc, #420]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 80012f2:	430a      	orrs	r2, r1
 80012f4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80012f6:	4b68      	ldr	r3, [pc, #416]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2209      	movs	r2, #9
 80012fc:	4393      	bics	r3, r2
 80012fe:	0019      	movs	r1, r3
 8001300:	4b65      	ldr	r3, [pc, #404]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 8001302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001304:	430a      	orrs	r2, r1
 8001306:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001308:	f000 fc44 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 800130c:	0001      	movs	r1, r0
 800130e:	4b62      	ldr	r3, [pc, #392]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	091b      	lsrs	r3, r3, #4
 8001314:	220f      	movs	r2, #15
 8001316:	4013      	ands	r3, r2
 8001318:	4a63      	ldr	r2, [pc, #396]	; (80014a8 <HAL_RCC_OscConfig+0x350>)
 800131a:	5cd3      	ldrb	r3, [r2, r3]
 800131c:	000a      	movs	r2, r1
 800131e:	40da      	lsrs	r2, r3
 8001320:	4b62      	ldr	r3, [pc, #392]	; (80014ac <HAL_RCC_OscConfig+0x354>)
 8001322:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001324:	4b62      	ldr	r3, [pc, #392]	; (80014b0 <HAL_RCC_OscConfig+0x358>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2513      	movs	r5, #19
 800132a:	197c      	adds	r4, r7, r5
 800132c:	0018      	movs	r0, r3
 800132e:	f7ff fc91 	bl	8000c54 <HAL_InitTick>
 8001332:	0003      	movs	r3, r0
 8001334:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001336:	197b      	adds	r3, r7, r5
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d047      	beq.n	80013ce <HAL_RCC_OscConfig+0x276>
      {
        return status;
 800133e:	2313      	movs	r3, #19
 8001340:	18fb      	adds	r3, r7, r3
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	e2d4      	b.n	80018f0 <HAL_RCC_OscConfig+0x798>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	2b00      	cmp	r3, #0
 800134a:	d027      	beq.n	800139c <HAL_RCC_OscConfig+0x244>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800134c:	4b52      	ldr	r3, [pc, #328]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2209      	movs	r2, #9
 8001352:	4393      	bics	r3, r2
 8001354:	0019      	movs	r1, r3
 8001356:	4b50      	ldr	r3, [pc, #320]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 8001358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800135a:	430a      	orrs	r2, r1
 800135c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135e:	f7ff fcbf 	bl	8000ce0 <HAL_GetTick>
 8001362:	0003      	movs	r3, r0
 8001364:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x222>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001368:	f7ff fcba 	bl	8000ce0 <HAL_GetTick>
 800136c:	0002      	movs	r2, r0
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x222>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e2ba      	b.n	80018f0 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800137a:	4b47      	ldr	r3, [pc, #284]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2204      	movs	r2, #4
 8001380:	4013      	ands	r3, r2
 8001382:	d0f1      	beq.n	8001368 <HAL_RCC_OscConfig+0x210>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001384:	4b44      	ldr	r3, [pc, #272]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	4a46      	ldr	r2, [pc, #280]	; (80014a4 <HAL_RCC_OscConfig+0x34c>)
 800138a:	4013      	ands	r3, r2
 800138c:	0019      	movs	r1, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	021a      	lsls	r2, r3, #8
 8001394:	4b40      	ldr	r3, [pc, #256]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 8001396:	430a      	orrs	r2, r1
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	e018      	b.n	80013ce <HAL_RCC_OscConfig+0x276>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800139c:	4b3e      	ldr	r3, [pc, #248]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b3d      	ldr	r3, [pc, #244]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 80013a2:	2101      	movs	r1, #1
 80013a4:	438a      	bics	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fc9a 	bl	8000ce0 <HAL_GetTick>
 80013ac:	0003      	movs	r3, r0
 80013ae:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b2:	f7ff fc95 	bl	8000ce0 <HAL_GetTick>
 80013b6:	0002      	movs	r2, r0
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e295      	b.n	80018f0 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013c4:	4b34      	ldr	r3, [pc, #208]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2204      	movs	r2, #4
 80013ca:	4013      	ands	r3, r2
 80013cc:	d1f1      	bne.n	80013b2 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2210      	movs	r2, #16
 80013d4:	4013      	ands	r3, r2
 80013d6:	d100      	bne.n	80013da <HAL_RCC_OscConfig+0x282>
 80013d8:	e0a3      	b.n	8001522 <HAL_RCC_OscConfig+0x3ca>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d141      	bne.n	8001464 <HAL_RCC_OscConfig+0x30c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013e0:	4b2d      	ldr	r3, [pc, #180]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4013      	ands	r3, r2
 80013ea:	d005      	beq.n	80013f8 <HAL_RCC_OscConfig+0x2a0>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e27b      	b.n	80018f0 <HAL_RCC_OscConfig+0x798>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013f8:	4b27      	ldr	r3, [pc, #156]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	4a2d      	ldr	r2, [pc, #180]	; (80014b4 <HAL_RCC_OscConfig+0x35c>)
 80013fe:	4013      	ands	r3, r2
 8001400:	0019      	movs	r1, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001406:	4b24      	ldr	r3, [pc, #144]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 8001408:	430a      	orrs	r2, r1
 800140a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800140c:	4b22      	ldr	r3, [pc, #136]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	0a19      	lsrs	r1, r3, #8
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	061a      	lsls	r2, r3, #24
 800141a:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 800141c:	430a      	orrs	r2, r1
 800141e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001424:	0b5b      	lsrs	r3, r3, #13
 8001426:	3301      	adds	r3, #1
 8001428:	2280      	movs	r2, #128	; 0x80
 800142a:	0212      	lsls	r2, r2, #8
 800142c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800142e:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	091b      	lsrs	r3, r3, #4
 8001434:	210f      	movs	r1, #15
 8001436:	400b      	ands	r3, r1
 8001438:	491b      	ldr	r1, [pc, #108]	; (80014a8 <HAL_RCC_OscConfig+0x350>)
 800143a:	5ccb      	ldrb	r3, [r1, r3]
 800143c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800143e:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <HAL_RCC_OscConfig+0x354>)
 8001440:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001442:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <HAL_RCC_OscConfig+0x358>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2513      	movs	r5, #19
 8001448:	197c      	adds	r4, r7, r5
 800144a:	0018      	movs	r0, r3
 800144c:	f7ff fc02 	bl	8000c54 <HAL_InitTick>
 8001450:	0003      	movs	r3, r0
 8001452:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001454:	197b      	adds	r3, r7, r5
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d062      	beq.n	8001522 <HAL_RCC_OscConfig+0x3ca>
        {
          return status;
 800145c:	2313      	movs	r3, #19
 800145e:	18fb      	adds	r3, r7, r3
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	e245      	b.n	80018f0 <HAL_RCC_OscConfig+0x798>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d040      	beq.n	80014ee <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_RCC_OscConfig+0x340>)
 8001472:	2180      	movs	r1, #128	; 0x80
 8001474:	0049      	lsls	r1, r1, #1
 8001476:	430a      	orrs	r2, r1
 8001478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147a:	f7ff fc31 	bl	8000ce0 <HAL_GetTick>
 800147e:	0003      	movs	r3, r0
 8001480:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001482:	e019      	b.n	80014b8 <HAL_RCC_OscConfig+0x360>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001484:	f7ff fc2c 	bl	8000ce0 <HAL_GetTick>
 8001488:	0002      	movs	r2, r0
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d912      	bls.n	80014b8 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e22c      	b.n	80018f0 <HAL_RCC_OscConfig+0x798>
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	40021000 	.word	0x40021000
 800149c:	fffeffff 	.word	0xfffeffff
 80014a0:	fffbffff 	.word	0xfffbffff
 80014a4:	ffffe0ff 	.word	0xffffe0ff
 80014a8:	08002cc8 	.word	0x08002cc8
 80014ac:	20000000 	.word	0x20000000
 80014b0:	20000004 	.word	0x20000004
 80014b4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80014b8:	4bc6      	ldr	r3, [pc, #792]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4013      	ands	r3, r2
 80014c2:	d0df      	beq.n	8001484 <HAL_RCC_OscConfig+0x32c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014c4:	4bc3      	ldr	r3, [pc, #780]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	4ac3      	ldr	r2, [pc, #780]	; (80017d8 <HAL_RCC_OscConfig+0x680>)
 80014ca:	4013      	ands	r3, r2
 80014cc:	0019      	movs	r1, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014d2:	4bc0      	ldr	r3, [pc, #768]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 80014d4:	430a      	orrs	r2, r1
 80014d6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014d8:	4bbe      	ldr	r3, [pc, #760]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	021b      	lsls	r3, r3, #8
 80014de:	0a19      	lsrs	r1, r3, #8
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	061a      	lsls	r2, r3, #24
 80014e6:	4bbb      	ldr	r3, [pc, #748]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 80014e8:	430a      	orrs	r2, r1
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	e019      	b.n	8001522 <HAL_RCC_OscConfig+0x3ca>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014ee:	4bb9      	ldr	r3, [pc, #740]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4bb8      	ldr	r3, [pc, #736]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 80014f4:	49b9      	ldr	r1, [pc, #740]	; (80017dc <HAL_RCC_OscConfig+0x684>)
 80014f6:	400a      	ands	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fa:	f7ff fbf1 	bl	8000ce0 <HAL_GetTick>
 80014fe:	0003      	movs	r3, r0
 8001500:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001504:	f7ff fbec 	bl	8000ce0 <HAL_GetTick>
 8001508:	0002      	movs	r2, r0
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x3be>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e1ec      	b.n	80018f0 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001516:	4baf      	ldr	r3, [pc, #700]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	2380      	movs	r3, #128	; 0x80
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4013      	ands	r3, r2
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2208      	movs	r2, #8
 8001528:	4013      	ands	r3, r2
 800152a:	d036      	beq.n	800159a <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d019      	beq.n	8001568 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001534:	4ba7      	ldr	r3, [pc, #668]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 8001536:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001538:	4ba6      	ldr	r3, [pc, #664]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 800153a:	2101      	movs	r1, #1
 800153c:	430a      	orrs	r2, r1
 800153e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001540:	f7ff fbce 	bl	8000ce0 <HAL_GetTick>
 8001544:	0003      	movs	r3, r0
 8001546:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x404>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800154a:	f7ff fbc9 	bl	8000ce0 <HAL_GetTick>
 800154e:	0002      	movs	r2, r0
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e1c9      	b.n	80018f0 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800155c:	4b9d      	ldr	r3, [pc, #628]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 800155e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001560:	2202      	movs	r2, #2
 8001562:	4013      	ands	r3, r2
 8001564:	d0f1      	beq.n	800154a <HAL_RCC_OscConfig+0x3f2>
 8001566:	e018      	b.n	800159a <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001568:	4b9a      	ldr	r3, [pc, #616]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 800156a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800156c:	4b99      	ldr	r3, [pc, #612]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 800156e:	2101      	movs	r1, #1
 8001570:	438a      	bics	r2, r1
 8001572:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001574:	f7ff fbb4 	bl	8000ce0 <HAL_GetTick>
 8001578:	0003      	movs	r3, r0
 800157a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800157e:	f7ff fbaf 	bl	8000ce0 <HAL_GetTick>
 8001582:	0002      	movs	r2, r0
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e1af      	b.n	80018f0 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001590:	4b90      	ldr	r3, [pc, #576]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 8001592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001594:	2202      	movs	r2, #2
 8001596:	4013      	ands	r3, r2
 8001598:	d1f1      	bne.n	800157e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2204      	movs	r2, #4
 80015a0:	4013      	ands	r3, r2
 80015a2:	d100      	bne.n	80015a6 <HAL_RCC_OscConfig+0x44e>
 80015a4:	e0af      	b.n	8001706 <HAL_RCC_OscConfig+0x5ae>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015a6:	2323      	movs	r3, #35	; 0x23
 80015a8:	18fb      	adds	r3, r7, r3
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ae:	4b89      	ldr	r3, [pc, #548]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 80015b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	055b      	lsls	r3, r3, #21
 80015b6:	4013      	ands	r3, r2
 80015b8:	d10a      	bne.n	80015d0 <HAL_RCC_OscConfig+0x478>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	4b86      	ldr	r3, [pc, #536]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 80015bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015be:	4b85      	ldr	r3, [pc, #532]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 80015c0:	2180      	movs	r1, #128	; 0x80
 80015c2:	0549      	lsls	r1, r1, #21
 80015c4:	430a      	orrs	r2, r1
 80015c6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80015c8:	2323      	movs	r3, #35	; 0x23
 80015ca:	18fb      	adds	r3, r7, r3
 80015cc:	2201      	movs	r2, #1
 80015ce:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d0:	4b83      	ldr	r3, [pc, #524]	; (80017e0 <HAL_RCC_OscConfig+0x688>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4013      	ands	r3, r2
 80015da:	d11a      	bne.n	8001612 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015dc:	4b80      	ldr	r3, [pc, #512]	; (80017e0 <HAL_RCC_OscConfig+0x688>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b7f      	ldr	r3, [pc, #508]	; (80017e0 <HAL_RCC_OscConfig+0x688>)
 80015e2:	2180      	movs	r1, #128	; 0x80
 80015e4:	0049      	lsls	r1, r1, #1
 80015e6:	430a      	orrs	r2, r1
 80015e8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ea:	f7ff fb79 	bl	8000ce0 <HAL_GetTick>
 80015ee:	0003      	movs	r3, r0
 80015f0:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x4ae>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f4:	f7ff fb74 	bl	8000ce0 <HAL_GetTick>
 80015f8:	0002      	movs	r2, r0
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b64      	cmp	r3, #100	; 0x64
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x4ae>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e174      	b.n	80018f0 <HAL_RCC_OscConfig+0x798>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001606:	4b76      	ldr	r3, [pc, #472]	; (80017e0 <HAL_RCC_OscConfig+0x688>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	2380      	movs	r3, #128	; 0x80
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4013      	ands	r3, r2
 8001610:	d0f0      	beq.n	80015f4 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	2380      	movs	r3, #128	; 0x80
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	429a      	cmp	r2, r3
 800161c:	d107      	bne.n	800162e <HAL_RCC_OscConfig+0x4d6>
 800161e:	4b6d      	ldr	r3, [pc, #436]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 8001620:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001622:	4b6c      	ldr	r3, [pc, #432]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 8001624:	2180      	movs	r1, #128	; 0x80
 8001626:	0049      	lsls	r1, r1, #1
 8001628:	430a      	orrs	r2, r1
 800162a:	651a      	str	r2, [r3, #80]	; 0x50
 800162c:	e031      	b.n	8001692 <HAL_RCC_OscConfig+0x53a>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10c      	bne.n	8001650 <HAL_RCC_OscConfig+0x4f8>
 8001636:	4b67      	ldr	r3, [pc, #412]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 8001638:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800163a:	4b66      	ldr	r3, [pc, #408]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 800163c:	4967      	ldr	r1, [pc, #412]	; (80017dc <HAL_RCC_OscConfig+0x684>)
 800163e:	400a      	ands	r2, r1
 8001640:	651a      	str	r2, [r3, #80]	; 0x50
 8001642:	4b64      	ldr	r3, [pc, #400]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 8001644:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001646:	4b63      	ldr	r3, [pc, #396]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 8001648:	4966      	ldr	r1, [pc, #408]	; (80017e4 <HAL_RCC_OscConfig+0x68c>)
 800164a:	400a      	ands	r2, r1
 800164c:	651a      	str	r2, [r3, #80]	; 0x50
 800164e:	e020      	b.n	8001692 <HAL_RCC_OscConfig+0x53a>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	23a0      	movs	r3, #160	; 0xa0
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	429a      	cmp	r2, r3
 800165a:	d10e      	bne.n	800167a <HAL_RCC_OscConfig+0x522>
 800165c:	4b5d      	ldr	r3, [pc, #372]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 800165e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001660:	4b5c      	ldr	r3, [pc, #368]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 8001662:	2180      	movs	r1, #128	; 0x80
 8001664:	00c9      	lsls	r1, r1, #3
 8001666:	430a      	orrs	r2, r1
 8001668:	651a      	str	r2, [r3, #80]	; 0x50
 800166a:	4b5a      	ldr	r3, [pc, #360]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 800166c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800166e:	4b59      	ldr	r3, [pc, #356]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 8001670:	2180      	movs	r1, #128	; 0x80
 8001672:	0049      	lsls	r1, r1, #1
 8001674:	430a      	orrs	r2, r1
 8001676:	651a      	str	r2, [r3, #80]	; 0x50
 8001678:	e00b      	b.n	8001692 <HAL_RCC_OscConfig+0x53a>
 800167a:	4b56      	ldr	r3, [pc, #344]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 800167c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800167e:	4b55      	ldr	r3, [pc, #340]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 8001680:	4956      	ldr	r1, [pc, #344]	; (80017dc <HAL_RCC_OscConfig+0x684>)
 8001682:	400a      	ands	r2, r1
 8001684:	651a      	str	r2, [r3, #80]	; 0x50
 8001686:	4b53      	ldr	r3, [pc, #332]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 8001688:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800168a:	4b52      	ldr	r3, [pc, #328]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 800168c:	4955      	ldr	r1, [pc, #340]	; (80017e4 <HAL_RCC_OscConfig+0x68c>)
 800168e:	400a      	ands	r2, r1
 8001690:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d015      	beq.n	80016c6 <HAL_RCC_OscConfig+0x56e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169a:	f7ff fb21 	bl	8000ce0 <HAL_GetTick>
 800169e:	0003      	movs	r3, r0
 80016a0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016a2:	e009      	b.n	80016b8 <HAL_RCC_OscConfig+0x560>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a4:	f7ff fb1c 	bl	8000ce0 <HAL_GetTick>
 80016a8:	0002      	movs	r2, r0
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	4a4e      	ldr	r2, [pc, #312]	; (80017e8 <HAL_RCC_OscConfig+0x690>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x560>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e11b      	b.n	80018f0 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016b8:	4b46      	ldr	r3, [pc, #280]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 80016ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4013      	ands	r3, r2
 80016c2:	d0ef      	beq.n	80016a4 <HAL_RCC_OscConfig+0x54c>
 80016c4:	e014      	b.n	80016f0 <HAL_RCC_OscConfig+0x598>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c6:	f7ff fb0b 	bl	8000ce0 <HAL_GetTick>
 80016ca:	0003      	movs	r3, r0
 80016cc:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016ce:	e009      	b.n	80016e4 <HAL_RCC_OscConfig+0x58c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d0:	f7ff fb06 	bl	8000ce0 <HAL_GetTick>
 80016d4:	0002      	movs	r2, r0
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	4a43      	ldr	r2, [pc, #268]	; (80017e8 <HAL_RCC_OscConfig+0x690>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e105      	b.n	80018f0 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016e4:	4b3b      	ldr	r3, [pc, #236]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 80016e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4013      	ands	r3, r2
 80016ee:	d1ef      	bne.n	80016d0 <HAL_RCC_OscConfig+0x578>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016f0:	2323      	movs	r3, #35	; 0x23
 80016f2:	18fb      	adds	r3, r7, r3
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d105      	bne.n	8001706 <HAL_RCC_OscConfig+0x5ae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016fa:	4b36      	ldr	r3, [pc, #216]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 80016fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016fe:	4b35      	ldr	r3, [pc, #212]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 8001700:	493a      	ldr	r1, [pc, #232]	; (80017ec <HAL_RCC_OscConfig+0x694>)
 8001702:	400a      	ands	r2, r1
 8001704:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2220      	movs	r2, #32
 800170c:	4013      	ands	r3, r2
 800170e:	d049      	beq.n	80017a4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d026      	beq.n	8001766 <HAL_RCC_OscConfig+0x60e>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001718:	4b2e      	ldr	r3, [pc, #184]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	4b2d      	ldr	r3, [pc, #180]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 800171e:	2101      	movs	r1, #1
 8001720:	430a      	orrs	r2, r1
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 8001726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001728:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 800172a:	2101      	movs	r1, #1
 800172c:	430a      	orrs	r2, r1
 800172e:	635a      	str	r2, [r3, #52]	; 0x34
 8001730:	4b2f      	ldr	r3, [pc, #188]	; (80017f0 <HAL_RCC_OscConfig+0x698>)
 8001732:	6a1a      	ldr	r2, [r3, #32]
 8001734:	4b2e      	ldr	r3, [pc, #184]	; (80017f0 <HAL_RCC_OscConfig+0x698>)
 8001736:	2180      	movs	r1, #128	; 0x80
 8001738:	0189      	lsls	r1, r1, #6
 800173a:	430a      	orrs	r2, r1
 800173c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173e:	f7ff facf 	bl	8000ce0 <HAL_GetTick>
 8001742:	0003      	movs	r3, r0
 8001744:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x602>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001748:	f7ff faca 	bl	8000ce0 <HAL_GetTick>
 800174c:	0002      	movs	r2, r0
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x602>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e0ca      	b.n	80018f0 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800175a:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2202      	movs	r2, #2
 8001760:	4013      	ands	r3, r2
 8001762:	d0f1      	beq.n	8001748 <HAL_RCC_OscConfig+0x5f0>
 8001764:	e01e      	b.n	80017a4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001766:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 800176c:	2101      	movs	r1, #1
 800176e:	438a      	bics	r2, r1
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <HAL_RCC_OscConfig+0x698>)
 8001774:	6a1a      	ldr	r2, [r3, #32]
 8001776:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <HAL_RCC_OscConfig+0x698>)
 8001778:	491e      	ldr	r1, [pc, #120]	; (80017f4 <HAL_RCC_OscConfig+0x69c>)
 800177a:	400a      	ands	r2, r1
 800177c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177e:	f7ff faaf 	bl	8000ce0 <HAL_GetTick>
 8001782:	0003      	movs	r3, r0
 8001784:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x642>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001788:	f7ff faaa 	bl	8000ce0 <HAL_GetTick>
 800178c:	0002      	movs	r2, r0
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x642>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e0aa      	b.n	80018f0 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2202      	movs	r2, #2
 80017a0:	4013      	ands	r3, r2
 80017a2:	d1f1      	bne.n	8001788 <HAL_RCC_OscConfig+0x630>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d100      	bne.n	80017ae <HAL_RCC_OscConfig+0x656>
 80017ac:	e09f      	b.n	80018ee <HAL_RCC_OscConfig+0x796>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	2b0c      	cmp	r3, #12
 80017b2:	d100      	bne.n	80017b6 <HAL_RCC_OscConfig+0x65e>
 80017b4:	e078      	b.n	80018a8 <HAL_RCC_OscConfig+0x750>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d159      	bne.n	8001872 <HAL_RCC_OscConfig+0x71a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017be:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <HAL_RCC_OscConfig+0x67c>)
 80017c4:	490c      	ldr	r1, [pc, #48]	; (80017f8 <HAL_RCC_OscConfig+0x6a0>)
 80017c6:	400a      	ands	r2, r1
 80017c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ca:	f7ff fa89 	bl	8000ce0 <HAL_GetTick>
 80017ce:	0003      	movs	r3, r0
 80017d0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017d2:	e01c      	b.n	800180e <HAL_RCC_OscConfig+0x6b6>
 80017d4:	40021000 	.word	0x40021000
 80017d8:	ffff1fff 	.word	0xffff1fff
 80017dc:	fffffeff 	.word	0xfffffeff
 80017e0:	40007000 	.word	0x40007000
 80017e4:	fffffbff 	.word	0xfffffbff
 80017e8:	00001388 	.word	0x00001388
 80017ec:	efffffff 	.word	0xefffffff
 80017f0:	40010000 	.word	0x40010000
 80017f4:	ffffdfff 	.word	0xffffdfff
 80017f8:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff fa70 	bl	8000ce0 <HAL_GetTick>
 8001800:	0002      	movs	r2, r0
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e070      	b.n	80018f0 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800180e:	4b3a      	ldr	r3, [pc, #232]	; (80018f8 <HAL_RCC_OscConfig+0x7a0>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	2380      	movs	r3, #128	; 0x80
 8001814:	049b      	lsls	r3, r3, #18
 8001816:	4013      	ands	r3, r2
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x6a4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800181a:	4b37      	ldr	r3, [pc, #220]	; (80018f8 <HAL_RCC_OscConfig+0x7a0>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	4a37      	ldr	r2, [pc, #220]	; (80018fc <HAL_RCC_OscConfig+0x7a4>)
 8001820:	4013      	ands	r3, r2
 8001822:	0019      	movs	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182c:	431a      	orrs	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001832:	431a      	orrs	r2, r3
 8001834:	4b30      	ldr	r3, [pc, #192]	; (80018f8 <HAL_RCC_OscConfig+0x7a0>)
 8001836:	430a      	orrs	r2, r1
 8001838:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800183a:	4b2f      	ldr	r3, [pc, #188]	; (80018f8 <HAL_RCC_OscConfig+0x7a0>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	4b2e      	ldr	r3, [pc, #184]	; (80018f8 <HAL_RCC_OscConfig+0x7a0>)
 8001840:	2180      	movs	r1, #128	; 0x80
 8001842:	0449      	lsls	r1, r1, #17
 8001844:	430a      	orrs	r2, r1
 8001846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff fa4a 	bl	8000ce0 <HAL_GetTick>
 800184c:	0003      	movs	r3, r0
 800184e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x70c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001852:	f7ff fa45 	bl	8000ce0 <HAL_GetTick>
 8001856:	0002      	movs	r2, r0
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x70c>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e045      	b.n	80018f0 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001864:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <HAL_RCC_OscConfig+0x7a0>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	049b      	lsls	r3, r3, #18
 800186c:	4013      	ands	r3, r2
 800186e:	d0f0      	beq.n	8001852 <HAL_RCC_OscConfig+0x6fa>
 8001870:	e03d      	b.n	80018ee <HAL_RCC_OscConfig+0x796>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001872:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <HAL_RCC_OscConfig+0x7a0>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <HAL_RCC_OscConfig+0x7a0>)
 8001878:	4921      	ldr	r1, [pc, #132]	; (8001900 <HAL_RCC_OscConfig+0x7a8>)
 800187a:	400a      	ands	r2, r1
 800187c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187e:	f7ff fa2f 	bl	8000ce0 <HAL_GetTick>
 8001882:	0003      	movs	r3, r0
 8001884:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001888:	f7ff fa2a 	bl	8000ce0 <HAL_GetTick>
 800188c:	0002      	movs	r2, r0
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e02a      	b.n	80018f0 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800189a:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <HAL_RCC_OscConfig+0x7a0>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	049b      	lsls	r3, r3, #18
 80018a2:	4013      	ands	r3, r2
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x730>
 80018a6:	e022      	b.n	80018ee <HAL_RCC_OscConfig+0x796>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d101      	bne.n	80018b4 <HAL_RCC_OscConfig+0x75c>
      {
        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e01d      	b.n	80018f0 <HAL_RCC_OscConfig+0x798>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018b4:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <HAL_RCC_OscConfig+0x7a0>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	025b      	lsls	r3, r3, #9
 80018c0:	401a      	ands	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d10f      	bne.n	80018ea <HAL_RCC_OscConfig+0x792>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	23f0      	movs	r3, #240	; 0xf0
 80018ce:	039b      	lsls	r3, r3, #14
 80018d0:	401a      	ands	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d107      	bne.n	80018ea <HAL_RCC_OscConfig+0x792>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	23c0      	movs	r3, #192	; 0xc0
 80018de:	041b      	lsls	r3, r3, #16
 80018e0:	401a      	ands	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d001      	beq.n	80018ee <HAL_RCC_OscConfig+0x796>
        {
          return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e000      	b.n	80018f0 <HAL_RCC_OscConfig+0x798>
        }
      }
    }
  }
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	0018      	movs	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	b00a      	add	sp, #40	; 0x28
 80018f6:	bdb0      	pop	{r4, r5, r7, pc}
 80018f8:	40021000 	.word	0x40021000
 80018fc:	ff02ffff 	.word	0xff02ffff
 8001900:	feffffff 	.word	0xfeffffff

08001904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001904:	b5b0      	push	{r4, r5, r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e129      	b.n	8001b6c <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001918:	4b96      	ldr	r3, [pc, #600]	; (8001b74 <HAL_RCC_ClockConfig+0x270>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2201      	movs	r2, #1
 800191e:	4013      	ands	r3, r2
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d91e      	bls.n	8001964 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001926:	4b93      	ldr	r3, [pc, #588]	; (8001b74 <HAL_RCC_ClockConfig+0x270>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2201      	movs	r2, #1
 800192c:	4393      	bics	r3, r2
 800192e:	0019      	movs	r1, r3
 8001930:	4b90      	ldr	r3, [pc, #576]	; (8001b74 <HAL_RCC_ClockConfig+0x270>)
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001938:	f7ff f9d2 	bl	8000ce0 <HAL_GetTick>
 800193c:	0003      	movs	r3, r0
 800193e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001940:	e009      	b.n	8001956 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001942:	f7ff f9cd 	bl	8000ce0 <HAL_GetTick>
 8001946:	0002      	movs	r2, r0
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	4a8a      	ldr	r2, [pc, #552]	; (8001b78 <HAL_RCC_ClockConfig+0x274>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e10a      	b.n	8001b6c <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001956:	4b87      	ldr	r3, [pc, #540]	; (8001b74 <HAL_RCC_ClockConfig+0x270>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2201      	movs	r2, #1
 800195c:	4013      	ands	r3, r2
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	429a      	cmp	r2, r3
 8001962:	d1ee      	bne.n	8001942 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2202      	movs	r2, #2
 800196a:	4013      	ands	r3, r2
 800196c:	d009      	beq.n	8001982 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800196e:	4b83      	ldr	r3, [pc, #524]	; (8001b7c <HAL_RCC_ClockConfig+0x278>)
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	22f0      	movs	r2, #240	; 0xf0
 8001974:	4393      	bics	r3, r2
 8001976:	0019      	movs	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	4b7f      	ldr	r3, [pc, #508]	; (8001b7c <HAL_RCC_ClockConfig+0x278>)
 800197e:	430a      	orrs	r2, r1
 8001980:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2201      	movs	r2, #1
 8001988:	4013      	ands	r3, r2
 800198a:	d100      	bne.n	800198e <HAL_RCC_ClockConfig+0x8a>
 800198c:	e089      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b02      	cmp	r3, #2
 8001994:	d107      	bne.n	80019a6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001996:	4b79      	ldr	r3, [pc, #484]	; (8001b7c <HAL_RCC_ClockConfig+0x278>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	2380      	movs	r3, #128	; 0x80
 800199c:	029b      	lsls	r3, r3, #10
 800199e:	4013      	ands	r3, r2
 80019a0:	d120      	bne.n	80019e4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e0e2      	b.n	8001b6c <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	d107      	bne.n	80019be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019ae:	4b73      	ldr	r3, [pc, #460]	; (8001b7c <HAL_RCC_ClockConfig+0x278>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	2380      	movs	r3, #128	; 0x80
 80019b4:	049b      	lsls	r3, r3, #18
 80019b6:	4013      	ands	r3, r2
 80019b8:	d114      	bne.n	80019e4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e0d6      	b.n	8001b6c <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d106      	bne.n	80019d4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019c6:	4b6d      	ldr	r3, [pc, #436]	; (8001b7c <HAL_RCC_ClockConfig+0x278>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2204      	movs	r2, #4
 80019cc:	4013      	ands	r3, r2
 80019ce:	d109      	bne.n	80019e4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0cb      	b.n	8001b6c <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019d4:	4b69      	ldr	r3, [pc, #420]	; (8001b7c <HAL_RCC_ClockConfig+0x278>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4013      	ands	r3, r2
 80019de:	d101      	bne.n	80019e4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0c3      	b.n	8001b6c <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019e4:	4b65      	ldr	r3, [pc, #404]	; (8001b7c <HAL_RCC_ClockConfig+0x278>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	2203      	movs	r2, #3
 80019ea:	4393      	bics	r3, r2
 80019ec:	0019      	movs	r1, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	4b62      	ldr	r3, [pc, #392]	; (8001b7c <HAL_RCC_ClockConfig+0x278>)
 80019f4:	430a      	orrs	r2, r1
 80019f6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019f8:	f7ff f972 	bl	8000ce0 <HAL_GetTick>
 80019fc:	0003      	movs	r3, r0
 80019fe:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d111      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a08:	e009      	b.n	8001a1e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a0a:	f7ff f969 	bl	8000ce0 <HAL_GetTick>
 8001a0e:	0002      	movs	r2, r0
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	4a58      	ldr	r2, [pc, #352]	; (8001b78 <HAL_RCC_ClockConfig+0x274>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e0a6      	b.n	8001b6c <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a1e:	4b57      	ldr	r3, [pc, #348]	; (8001b7c <HAL_RCC_ClockConfig+0x278>)
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	220c      	movs	r2, #12
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	d1ef      	bne.n	8001a0a <HAL_RCC_ClockConfig+0x106>
 8001a2a:	e03a      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	d111      	bne.n	8001a58 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a34:	e009      	b.n	8001a4a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a36:	f7ff f953 	bl	8000ce0 <HAL_GetTick>
 8001a3a:	0002      	movs	r2, r0
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	4a4d      	ldr	r2, [pc, #308]	; (8001b78 <HAL_RCC_ClockConfig+0x274>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e090      	b.n	8001b6c <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a4a:	4b4c      	ldr	r3, [pc, #304]	; (8001b7c <HAL_RCC_ClockConfig+0x278>)
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	220c      	movs	r2, #12
 8001a50:	4013      	ands	r3, r2
 8001a52:	2b0c      	cmp	r3, #12
 8001a54:	d1ef      	bne.n	8001a36 <HAL_RCC_ClockConfig+0x132>
 8001a56:	e024      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d11b      	bne.n	8001a98 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a60:	e009      	b.n	8001a76 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a62:	f7ff f93d 	bl	8000ce0 <HAL_GetTick>
 8001a66:	0002      	movs	r2, r0
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	4a42      	ldr	r2, [pc, #264]	; (8001b78 <HAL_RCC_ClockConfig+0x274>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e07a      	b.n	8001b6c <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a76:	4b41      	ldr	r3, [pc, #260]	; (8001b7c <HAL_RCC_ClockConfig+0x278>)
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	d1ef      	bne.n	8001a62 <HAL_RCC_ClockConfig+0x15e>
 8001a82:	e00e      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a84:	f7ff f92c 	bl	8000ce0 <HAL_GetTick>
 8001a88:	0002      	movs	r2, r0
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	4a3a      	ldr	r2, [pc, #232]	; (8001b78 <HAL_RCC_ClockConfig+0x274>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e069      	b.n	8001b6c <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a98:	4b38      	ldr	r3, [pc, #224]	; (8001b7c <HAL_RCC_ClockConfig+0x278>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	220c      	movs	r2, #12
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa2:	4b34      	ldr	r3, [pc, #208]	; (8001b74 <HAL_RCC_ClockConfig+0x270>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d21e      	bcs.n	8001aee <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab0:	4b30      	ldr	r3, [pc, #192]	; (8001b74 <HAL_RCC_ClockConfig+0x270>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	4393      	bics	r3, r2
 8001ab8:	0019      	movs	r1, r3
 8001aba:	4b2e      	ldr	r3, [pc, #184]	; (8001b74 <HAL_RCC_ClockConfig+0x270>)
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ac2:	f7ff f90d 	bl	8000ce0 <HAL_GetTick>
 8001ac6:	0003      	movs	r3, r0
 8001ac8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aca:	e009      	b.n	8001ae0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001acc:	f7ff f908 	bl	8000ce0 <HAL_GetTick>
 8001ad0:	0002      	movs	r2, r0
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	4a28      	ldr	r2, [pc, #160]	; (8001b78 <HAL_RCC_ClockConfig+0x274>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e045      	b.n	8001b6c <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae0:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <HAL_RCC_ClockConfig+0x270>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d1ee      	bne.n	8001acc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2204      	movs	r2, #4
 8001af4:	4013      	ands	r3, r2
 8001af6:	d009      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af8:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <HAL_RCC_ClockConfig+0x278>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	4a20      	ldr	r2, [pc, #128]	; (8001b80 <HAL_RCC_ClockConfig+0x27c>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	0019      	movs	r1, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <HAL_RCC_ClockConfig+0x278>)
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2208      	movs	r2, #8
 8001b12:	4013      	ands	r3, r2
 8001b14:	d00a      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b16:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <HAL_RCC_ClockConfig+0x278>)
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	4a1a      	ldr	r2, [pc, #104]	; (8001b84 <HAL_RCC_ClockConfig+0x280>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	0019      	movs	r1, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	00da      	lsls	r2, r3, #3
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_RCC_ClockConfig+0x278>)
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b2c:	f000 f832 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 8001b30:	0001      	movs	r1, r0
 8001b32:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_RCC_ClockConfig+0x278>)
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	091b      	lsrs	r3, r3, #4
 8001b38:	220f      	movs	r2, #15
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	4a12      	ldr	r2, [pc, #72]	; (8001b88 <HAL_RCC_ClockConfig+0x284>)
 8001b3e:	5cd3      	ldrb	r3, [r2, r3]
 8001b40:	000a      	movs	r2, r1
 8001b42:	40da      	lsrs	r2, r3
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <HAL_RCC_ClockConfig+0x288>)
 8001b46:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <HAL_RCC_ClockConfig+0x28c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	250b      	movs	r5, #11
 8001b4e:	197c      	adds	r4, r7, r5
 8001b50:	0018      	movs	r0, r3
 8001b52:	f7ff f87f 	bl	8000c54 <HAL_InitTick>
 8001b56:	0003      	movs	r3, r0
 8001b58:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001b5a:	197b      	adds	r3, r7, r5
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 8001b62:	230b      	movs	r3, #11
 8001b64:	18fb      	adds	r3, r7, r3
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	e000      	b.n	8001b6c <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	b004      	add	sp, #16
 8001b72:	bdb0      	pop	{r4, r5, r7, pc}
 8001b74:	40022000 	.word	0x40022000
 8001b78:	00001388 	.word	0x00001388
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	fffff8ff 	.word	0xfffff8ff
 8001b84:	ffffc7ff 	.word	0xffffc7ff
 8001b88:	08002cc8 	.word	0x08002cc8
 8001b8c:	20000000 	.word	0x20000000
 8001b90:	20000004 	.word	0x20000004

08001b94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b96:	b08f      	sub	sp, #60	; 0x3c
 8001b98:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001b9a:	4b4a      	ldr	r3, [pc, #296]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x130>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ba0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ba2:	230c      	movs	r3, #12
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d00f      	beq.n	8001bca <HAL_RCC_GetSysClockFreq+0x36>
 8001baa:	2b0c      	cmp	r3, #12
 8001bac:	d010      	beq.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x3c>
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d000      	beq.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x20>
 8001bb2:	e073      	b.n	8001c9c <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001bb4:	4b43      	ldr	r3, [pc, #268]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x130>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2210      	movs	r2, #16
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d002      	beq.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001bbe:	4b42      	ldr	r3, [pc, #264]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x134>)
 8001bc0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001bc2:	e079      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8001bc4:	4b41      	ldr	r3, [pc, #260]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x138>)
 8001bc6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bc8:	e076      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bca:	4b41      	ldr	r3, [pc, #260]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001bcc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bce:	e073      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd2:	0c9a      	lsrs	r2, r3, #18
 8001bd4:	230f      	movs	r3, #15
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	4b3e      	ldr	r3, [pc, #248]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x140>)
 8001bda:	5c9b      	ldrb	r3, [r3, r2]
 8001bdc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be0:	0d9a      	lsrs	r2, r3, #22
 8001be2:	2303      	movs	r3, #3
 8001be4:	4013      	ands	r3, r2
 8001be6:	3301      	adds	r3, #1
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bea:	4b36      	ldr	r3, [pc, #216]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x130>)
 8001bec:	68da      	ldr	r2, [r3, #12]
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	025b      	lsls	r3, r3, #9
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d019      	beq.n	8001c2a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf8:	61bb      	str	r3, [r7, #24]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
 8001bfe:	4a34      	ldr	r2, [pc, #208]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c00:	2300      	movs	r3, #0
 8001c02:	69b8      	ldr	r0, [r7, #24]
 8001c04:	69f9      	ldr	r1, [r7, #28]
 8001c06:	f7fe fb2b 	bl	8000260 <__aeabi_lmul>
 8001c0a:	0003      	movs	r3, r0
 8001c0c:	000c      	movs	r4, r1
 8001c0e:	0018      	movs	r0, r3
 8001c10:	0021      	movs	r1, r4
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f7fe faff 	bl	8000220 <__aeabi_uldivmod>
 8001c22:	0003      	movs	r3, r0
 8001c24:	000c      	movs	r4, r1
 8001c26:	637b      	str	r3, [r7, #52]	; 0x34
 8001c28:	e035      	b.n	8001c96 <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c2a:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x130>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2210      	movs	r2, #16
 8001c30:	4013      	ands	r3, r2
 8001c32:	d019      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	4a22      	ldr	r2, [pc, #136]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x134>)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	68b8      	ldr	r0, [r7, #8]
 8001c42:	68f9      	ldr	r1, [r7, #12]
 8001c44:	f7fe fb0c 	bl	8000260 <__aeabi_lmul>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	000c      	movs	r4, r1
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	0021      	movs	r1, r4
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	2300      	movs	r3, #0
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f7fe fae0 	bl	8000220 <__aeabi_uldivmod>
 8001c60:	0003      	movs	r3, r0
 8001c62:	000c      	movs	r4, r1
 8001c64:	637b      	str	r3, [r7, #52]	; 0x34
 8001c66:	e016      	b.n	8001c96 <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	0019      	movs	r1, r3
 8001c70:	4a16      	ldr	r2, [pc, #88]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x138>)
 8001c72:	2300      	movs	r3, #0
 8001c74:	f7fe faf4 	bl	8000260 <__aeabi_lmul>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	000c      	movs	r4, r1
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	0021      	movs	r1, r4
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	001d      	movs	r5, r3
 8001c84:	2300      	movs	r3, #0
 8001c86:	001e      	movs	r6, r3
 8001c88:	002a      	movs	r2, r5
 8001c8a:	0033      	movs	r3, r6
 8001c8c:	f7fe fac8 	bl	8000220 <__aeabi_uldivmod>
 8001c90:	0003      	movs	r3, r0
 8001c92:	000c      	movs	r4, r1
 8001c94:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c98:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c9a:	e00d      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001c9c:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x130>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	0b5b      	lsrs	r3, r3, #13
 8001ca2:	2207      	movs	r2, #7
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001ca8:	6a3b      	ldr	r3, [r7, #32]
 8001caa:	3301      	adds	r3, #1
 8001cac:	2280      	movs	r2, #128	; 0x80
 8001cae:	0212      	lsls	r2, r2, #8
 8001cb0:	409a      	lsls	r2, r3
 8001cb2:	0013      	movs	r3, r2
 8001cb4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cb6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001cba:	0018      	movs	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	b00f      	add	sp, #60	; 0x3c
 8001cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	003d0900 	.word	0x003d0900
 8001ccc:	00f42400 	.word	0x00f42400
 8001cd0:	007a1200 	.word	0x007a1200
 8001cd4:	08002ce0 	.word	0x08002ce0

08001cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cdc:	4b02      	ldr	r3, [pc, #8]	; (8001ce8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	20000000 	.word	0x20000000

08001cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cf0:	f7ff fff2 	bl	8001cd8 <HAL_RCC_GetHCLKFreq>
 8001cf4:	0001      	movs	r1, r0
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	0a1b      	lsrs	r3, r3, #8
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	4013      	ands	r3, r2
 8001d00:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d02:	5cd3      	ldrb	r3, [r2, r3]
 8001d04:	40d9      	lsrs	r1, r3
 8001d06:	000b      	movs	r3, r1
}
 8001d08:	0018      	movs	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	40021000 	.word	0x40021000
 8001d14:	08002cd8 	.word	0x08002cd8

08001d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d1c:	f7ff ffdc 	bl	8001cd8 <HAL_RCC_GetHCLKFreq>
 8001d20:	0001      	movs	r1, r0
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	0adb      	lsrs	r3, r3, #11
 8001d28:	2207      	movs	r2, #7
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d2e:	5cd3      	ldrb	r3, [r2, r3]
 8001d30:	40d9      	lsrs	r1, r3
 8001d32:	000b      	movs	r3, r1
}
 8001d34:	0018      	movs	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	08002cd8 	.word	0x08002cd8

08001d44 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001d4c:	2317      	movs	r3, #23
 8001d4e:	18fb      	adds	r3, r7, r3
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2220      	movs	r2, #32
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d100      	bne.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001d5e:	e0c3      	b.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d60:	4b99      	ldr	r3, [pc, #612]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001d62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d64:	2380      	movs	r3, #128	; 0x80
 8001d66:	055b      	lsls	r3, r3, #21
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d10a      	bne.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d6c:	4b96      	ldr	r3, [pc, #600]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001d6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d70:	4b95      	ldr	r3, [pc, #596]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001d72:	2180      	movs	r1, #128	; 0x80
 8001d74:	0549      	lsls	r1, r1, #21
 8001d76:	430a      	orrs	r2, r1
 8001d78:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001d7a:	2317      	movs	r3, #23
 8001d7c:	18fb      	adds	r3, r7, r3
 8001d7e:	2201      	movs	r2, #1
 8001d80:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d82:	4b92      	ldr	r3, [pc, #584]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d11a      	bne.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8e:	4b8f      	ldr	r3, [pc, #572]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	4b8e      	ldr	r3, [pc, #568]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001d94:	2180      	movs	r1, #128	; 0x80
 8001d96:	0049      	lsls	r1, r1, #1
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9c:	f7fe ffa0 	bl	8000ce0 <HAL_GetTick>
 8001da0:	0003      	movs	r3, r0
 8001da2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da4:	e008      	b.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da6:	f7fe ff9b 	bl	8000ce0 <HAL_GetTick>
 8001daa:	0002      	movs	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b64      	cmp	r3, #100	; 0x64
 8001db2:	d901      	bls.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e102      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x27a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db8:	4b84      	ldr	r3, [pc, #528]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	2380      	movs	r3, #128	; 0x80
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001dc4:	4b80      	ldr	r3, [pc, #512]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	23c0      	movs	r3, #192	; 0xc0
 8001dca:	039b      	lsls	r3, r3, #14
 8001dcc:	4013      	ands	r3, r2
 8001dce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	23c0      	movs	r3, #192	; 0xc0
 8001dd6:	039b      	lsls	r3, r3, #14
 8001dd8:	4013      	ands	r3, r2
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d013      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	23c0      	movs	r3, #192	; 0xc0
 8001de6:	029b      	lsls	r3, r3, #10
 8001de8:	401a      	ands	r2, r3
 8001dea:	23c0      	movs	r3, #192	; 0xc0
 8001dec:	029b      	lsls	r3, r3, #10
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d10a      	bne.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001df2:	4b75      	ldr	r3, [pc, #468]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	029b      	lsls	r3, r3, #10
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	029b      	lsls	r3, r3, #10
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d101      	bne.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0da      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x27a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001e08:	4b6f      	ldr	r3, [pc, #444]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001e0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e0c:	23c0      	movs	r3, #192	; 0xc0
 8001e0e:	029b      	lsls	r3, r3, #10
 8001e10:	4013      	ands	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d03b      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	23c0      	movs	r3, #192	; 0xc0
 8001e20:	029b      	lsls	r3, r3, #10
 8001e22:	4013      	ands	r3, r2
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d033      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	4013      	ands	r3, r2
 8001e32:	d02e      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001e34:	4b64      	ldr	r3, [pc, #400]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e38:	4a65      	ldr	r2, [pc, #404]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e3e:	4b62      	ldr	r3, [pc, #392]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001e40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e42:	4b61      	ldr	r3, [pc, #388]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001e44:	2180      	movs	r1, #128	; 0x80
 8001e46:	0309      	lsls	r1, r1, #12
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e4c:	4b5e      	ldr	r3, [pc, #376]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001e4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e50:	4b5d      	ldr	r3, [pc, #372]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001e52:	4960      	ldr	r1, [pc, #384]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001e54:	400a      	ands	r2, r1
 8001e56:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001e58:	4b5b      	ldr	r3, [pc, #364]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	4013      	ands	r3, r2
 8001e66:	d014      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e68:	f7fe ff3a 	bl	8000ce0 <HAL_GetTick>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e70:	e009      	b.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e72:	f7fe ff35 	bl	8000ce0 <HAL_GetTick>
 8001e76:	0002      	movs	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	4a56      	ldr	r2, [pc, #344]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e09b      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x27a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e86:	4b50      	ldr	r3, [pc, #320]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001e88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d0ef      	beq.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	23c0      	movs	r3, #192	; 0xc0
 8001e98:	029b      	lsls	r3, r3, #10
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	23c0      	movs	r3, #192	; 0xc0
 8001e9e:	029b      	lsls	r3, r3, #10
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d10c      	bne.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8001ea4:	4b48      	ldr	r3, [pc, #288]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a4c      	ldr	r2, [pc, #304]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	0019      	movs	r1, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	23c0      	movs	r3, #192	; 0xc0
 8001eb4:	039b      	lsls	r3, r3, #14
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	4b43      	ldr	r3, [pc, #268]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	4b42      	ldr	r3, [pc, #264]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001ec0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	23c0      	movs	r3, #192	; 0xc0
 8001ec8:	029b      	lsls	r3, r3, #10
 8001eca:	401a      	ands	r2, r3
 8001ecc:	4b3e      	ldr	r3, [pc, #248]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ed2:	2317      	movs	r3, #23
 8001ed4:	18fb      	adds	r3, r7, r3
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d105      	bne.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001edc:	4b3a      	ldr	r3, [pc, #232]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ee0:	4b39      	ldr	r3, [pc, #228]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001ee2:	493f      	ldr	r1, [pc, #252]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2201      	movs	r2, #1
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d009      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ef2:	4b35      	ldr	r3, [pc, #212]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	4393      	bics	r3, r2
 8001efa:	0019      	movs	r1, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	4b31      	ldr	r3, [pc, #196]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001f02:	430a      	orrs	r2, r1
 8001f04:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d009      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f10:	4b2d      	ldr	r3, [pc, #180]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f14:	220c      	movs	r2, #12
 8001f16:	4393      	bics	r3, r2
 8001f18:	0019      	movs	r1, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	4b2a      	ldr	r3, [pc, #168]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001f20:	430a      	orrs	r2, r1
 8001f22:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2204      	movs	r2, #4
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d009      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f2e:	4b26      	ldr	r3, [pc, #152]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f32:	4a2c      	ldr	r2, [pc, #176]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	0019      	movs	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691a      	ldr	r2, [r3, #16]
 8001f3c:	4b22      	ldr	r3, [pc, #136]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2208      	movs	r2, #8
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d009      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f4c:	4b1e      	ldr	r3, [pc, #120]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f50:	4a25      	ldr	r2, [pc, #148]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	0019      	movs	r1, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695a      	ldr	r2, [r3, #20]
 8001f5a:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d009      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f6c:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f70:	4a17      	ldr	r2, [pc, #92]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	0019      	movs	r1, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699a      	ldr	r2, [r3, #24]
 8001f7a:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2240      	movs	r2, #64	; 0x40
 8001f86:	4013      	ands	r3, r2
 8001f88:	d009      	beq.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f8a:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8e:	4a17      	ldr	r2, [pc, #92]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	0019      	movs	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1a      	ldr	r2, [r3, #32]
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2280      	movs	r2, #128	; 0x80
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d009      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001fa8:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fac:	4a10      	ldr	r2, [pc, #64]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001fae:	4013      	ands	r3, r2
 8001fb0:	0019      	movs	r1, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69da      	ldr	r2, [r3, #28]
 8001fb6:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b006      	add	sp, #24
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40007000 	.word	0x40007000
 8001fd0:	fffcffff 	.word	0xfffcffff
 8001fd4:	fff7ffff 	.word	0xfff7ffff
 8001fd8:	00001388 	.word	0x00001388
 8001fdc:	ffcfffff 	.word	0xffcfffff
 8001fe0:	efffffff 	.word	0xefffffff
 8001fe4:	fffff3ff 	.word	0xfffff3ff
 8001fe8:	ffffcfff 	.word	0xffffcfff
 8001fec:	fbffffff 	.word	0xfbffffff
 8001ff0:	fff3ffff 	.word	0xfff3ffff

08001ff4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e044      	b.n	8002090 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800200a:	2b00      	cmp	r3, #0
 800200c:	d107      	bne.n	800201e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2274      	movs	r2, #116	; 0x74
 8002012:	2100      	movs	r1, #0
 8002014:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	0018      	movs	r0, r3
 800201a:	f7fe fd71 	bl	8000b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2224      	movs	r2, #36	; 0x24
 8002022:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2101      	movs	r1, #1
 8002030:	438a      	bics	r2, r1
 8002032:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	0018      	movs	r0, r3
 8002038:	f000 f9c6 	bl	80023c8 <UART_SetConfig>
 800203c:	0003      	movs	r3, r0
 800203e:	2b01      	cmp	r3, #1
 8002040:	d101      	bne.n	8002046 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e024      	b.n	8002090 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	0018      	movs	r0, r3
 8002052:	f000 fc75 	bl	8002940 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	490d      	ldr	r1, [pc, #52]	; (8002098 <HAL_UART_Init+0xa4>)
 8002062:	400a      	ands	r2, r1
 8002064:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	212a      	movs	r1, #42	; 0x2a
 8002072:	438a      	bics	r2, r1
 8002074:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2101      	movs	r1, #1
 8002082:	430a      	orrs	r2, r1
 8002084:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	0018      	movs	r0, r3
 800208a:	f000 fd0d 	bl	8002aa8 <UART_CheckIdleState>
 800208e:	0003      	movs	r3, r0
}
 8002090:	0018      	movs	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	b002      	add	sp, #8
 8002096:	bd80      	pop	{r7, pc}
 8002098:	ffffb7ff 	.word	0xffffb7ff

0800209c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	; 0x28
 80020a0:	af02      	add	r7, sp, #8
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	603b      	str	r3, [r7, #0]
 80020a8:	1dbb      	adds	r3, r7, #6
 80020aa:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020b0:	2b20      	cmp	r3, #32
 80020b2:	d000      	beq.n	80020b6 <HAL_UART_Transmit+0x1a>
 80020b4:	e095      	b.n	80021e2 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_UART_Transmit+0x28>
 80020bc:	1dbb      	adds	r3, r7, #6
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e08d      	b.n	80021e4 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	015b      	lsls	r3, r3, #5
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d109      	bne.n	80020e8 <HAL_UART_Transmit+0x4c>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d105      	bne.n	80020e8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2201      	movs	r2, #1
 80020e0:	4013      	ands	r3, r2
 80020e2:	d001      	beq.n	80020e8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e07d      	b.n	80021e4 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2274      	movs	r2, #116	; 0x74
 80020ec:	5c9b      	ldrb	r3, [r3, r2]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_UART_Transmit+0x5a>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e076      	b.n	80021e4 <HAL_UART_Transmit+0x148>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2274      	movs	r2, #116	; 0x74
 80020fa:	2101      	movs	r1, #1
 80020fc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2280      	movs	r2, #128	; 0x80
 8002102:	2100      	movs	r1, #0
 8002104:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2221      	movs	r2, #33	; 0x21
 800210a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800210c:	f7fe fde8 	bl	8000ce0 <HAL_GetTick>
 8002110:	0003      	movs	r3, r0
 8002112:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	1dba      	adds	r2, r7, #6
 8002118:	2150      	movs	r1, #80	; 0x50
 800211a:	8812      	ldrh	r2, [r2, #0]
 800211c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1dba      	adds	r2, r7, #6
 8002122:	2152      	movs	r1, #82	; 0x52
 8002124:	8812      	ldrh	r2, [r2, #0]
 8002126:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	015b      	lsls	r3, r3, #5
 8002130:	429a      	cmp	r2, r3
 8002132:	d108      	bne.n	8002146 <HAL_UART_Transmit+0xaa>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d104      	bne.n	8002146 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800213c:	2300      	movs	r3, #0
 800213e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	61bb      	str	r3, [r7, #24]
 8002144:	e003      	b.n	800214e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2274      	movs	r2, #116	; 0x74
 8002152:	2100      	movs	r1, #0
 8002154:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002156:	e02c      	b.n	80021b2 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	0013      	movs	r3, r2
 8002162:	2200      	movs	r2, #0
 8002164:	2180      	movs	r1, #128	; 0x80
 8002166:	f000 fce9 	bl	8002b3c <UART_WaitOnFlagUntilTimeout>
 800216a:	1e03      	subs	r3, r0, #0
 800216c:	d001      	beq.n	8002172 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e038      	b.n	80021e4 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10b      	bne.n	8002190 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	001a      	movs	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	05d2      	lsls	r2, r2, #23
 8002184:	0dd2      	lsrs	r2, r2, #23
 8002186:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	3302      	adds	r3, #2
 800218c:	61bb      	str	r3, [r7, #24]
 800218e:	e007      	b.n	80021a0 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	781a      	ldrb	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3301      	adds	r3, #1
 800219e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2252      	movs	r2, #82	; 0x52
 80021a4:	5a9b      	ldrh	r3, [r3, r2]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	3b01      	subs	r3, #1
 80021aa:	b299      	uxth	r1, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2252      	movs	r2, #82	; 0x52
 80021b0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2252      	movs	r2, #82	; 0x52
 80021b6:	5a9b      	ldrh	r3, [r3, r2]
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1cc      	bne.n	8002158 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	0013      	movs	r3, r2
 80021c8:	2200      	movs	r2, #0
 80021ca:	2140      	movs	r1, #64	; 0x40
 80021cc:	f000 fcb6 	bl	8002b3c <UART_WaitOnFlagUntilTimeout>
 80021d0:	1e03      	subs	r3, r0, #0
 80021d2:	d001      	beq.n	80021d8 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e005      	b.n	80021e4 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2220      	movs	r2, #32
 80021dc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	e000      	b.n	80021e4 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80021e2:	2302      	movs	r3, #2
  }
}
 80021e4:	0018      	movs	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b008      	add	sp, #32
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08a      	sub	sp, #40	; 0x28
 80021f0:	af02      	add	r7, sp, #8
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	603b      	str	r3, [r7, #0]
 80021f8:	1dbb      	adds	r3, r7, #6
 80021fa:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002200:	2b20      	cmp	r3, #32
 8002202:	d000      	beq.n	8002206 <HAL_UART_Receive+0x1a>
 8002204:	e0d9      	b.n	80023ba <HAL_UART_Receive+0x1ce>
  {
    if ((pData == NULL) || (Size == 0U))
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_UART_Receive+0x28>
 800220c:	1dbb      	adds	r3, r7, #6
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0d1      	b.n	80023bc <HAL_UART_Receive+0x1d0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	2380      	movs	r3, #128	; 0x80
 800221e:	015b      	lsls	r3, r3, #5
 8002220:	429a      	cmp	r2, r3
 8002222:	d109      	bne.n	8002238 <HAL_UART_Receive+0x4c>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d105      	bne.n	8002238 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2201      	movs	r2, #1
 8002230:	4013      	ands	r3, r2
 8002232:	d001      	beq.n	8002238 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0c1      	b.n	80023bc <HAL_UART_Receive+0x1d0>
      }
    }

    __HAL_LOCK(huart);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2274      	movs	r2, #116	; 0x74
 800223c:	5c9b      	ldrb	r3, [r3, r2]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_UART_Receive+0x5a>
 8002242:	2302      	movs	r3, #2
 8002244:	e0ba      	b.n	80023bc <HAL_UART_Receive+0x1d0>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2274      	movs	r2, #116	; 0x74
 800224a:	2101      	movs	r1, #1
 800224c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2280      	movs	r2, #128	; 0x80
 8002252:	2100      	movs	r1, #0
 8002254:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2222      	movs	r2, #34	; 0x22
 800225a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002262:	f7fe fd3d 	bl	8000ce0 <HAL_GetTick>
 8002266:	0003      	movs	r3, r0
 8002268:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1dba      	adds	r2, r7, #6
 800226e:	2158      	movs	r1, #88	; 0x58
 8002270:	8812      	ldrh	r2, [r2, #0]
 8002272:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	1dba      	adds	r2, r7, #6
 8002278:	215a      	movs	r1, #90	; 0x5a
 800227a:	8812      	ldrh	r2, [r2, #0]
 800227c:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	015b      	lsls	r3, r3, #5
 8002286:	429a      	cmp	r2, r3
 8002288:	d10d      	bne.n	80022a6 <HAL_UART_Receive+0xba>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d104      	bne.n	800229c <HAL_UART_Receive+0xb0>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	225c      	movs	r2, #92	; 0x5c
 8002296:	494b      	ldr	r1, [pc, #300]	; (80023c4 <HAL_UART_Receive+0x1d8>)
 8002298:	5299      	strh	r1, [r3, r2]
 800229a:	e02e      	b.n	80022fa <HAL_UART_Receive+0x10e>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	225c      	movs	r2, #92	; 0x5c
 80022a0:	21ff      	movs	r1, #255	; 0xff
 80022a2:	5299      	strh	r1, [r3, r2]
 80022a4:	e029      	b.n	80022fa <HAL_UART_Receive+0x10e>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10d      	bne.n	80022ca <HAL_UART_Receive+0xde>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d104      	bne.n	80022c0 <HAL_UART_Receive+0xd4>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	225c      	movs	r2, #92	; 0x5c
 80022ba:	21ff      	movs	r1, #255	; 0xff
 80022bc:	5299      	strh	r1, [r3, r2]
 80022be:	e01c      	b.n	80022fa <HAL_UART_Receive+0x10e>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	225c      	movs	r2, #92	; 0x5c
 80022c4:	217f      	movs	r1, #127	; 0x7f
 80022c6:	5299      	strh	r1, [r3, r2]
 80022c8:	e017      	b.n	80022fa <HAL_UART_Receive+0x10e>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	055b      	lsls	r3, r3, #21
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d10d      	bne.n	80022f2 <HAL_UART_Receive+0x106>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d104      	bne.n	80022e8 <HAL_UART_Receive+0xfc>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	225c      	movs	r2, #92	; 0x5c
 80022e2:	217f      	movs	r1, #127	; 0x7f
 80022e4:	5299      	strh	r1, [r3, r2]
 80022e6:	e008      	b.n	80022fa <HAL_UART_Receive+0x10e>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	225c      	movs	r2, #92	; 0x5c
 80022ec:	213f      	movs	r1, #63	; 0x3f
 80022ee:	5299      	strh	r1, [r3, r2]
 80022f0:	e003      	b.n	80022fa <HAL_UART_Receive+0x10e>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	225c      	movs	r2, #92	; 0x5c
 80022f6:	2100      	movs	r1, #0
 80022f8:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80022fa:	2312      	movs	r3, #18
 80022fc:	18fb      	adds	r3, r7, r3
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	215c      	movs	r1, #92	; 0x5c
 8002302:	5a52      	ldrh	r2, [r2, r1]
 8002304:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	2380      	movs	r3, #128	; 0x80
 800230c:	015b      	lsls	r3, r3, #5
 800230e:	429a      	cmp	r2, r3
 8002310:	d108      	bne.n	8002324 <HAL_UART_Receive+0x138>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d104      	bne.n	8002324 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	e003      	b.n	800232c <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002328:	2300      	movs	r3, #0
 800232a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2274      	movs	r2, #116	; 0x74
 8002330:	2100      	movs	r1, #0
 8002332:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002334:	e036      	b.n	80023a4 <HAL_UART_Receive+0x1b8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	0013      	movs	r3, r2
 8002340:	2200      	movs	r2, #0
 8002342:	2120      	movs	r1, #32
 8002344:	f000 fbfa 	bl	8002b3c <UART_WaitOnFlagUntilTimeout>
 8002348:	1e03      	subs	r3, r0, #0
 800234a:	d001      	beq.n	8002350 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e035      	b.n	80023bc <HAL_UART_Receive+0x1d0>
      }
      if (pdata8bits == NULL)
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10e      	bne.n	8002374 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	b29b      	uxth	r3, r3
 800235e:	2212      	movs	r2, #18
 8002360:	18ba      	adds	r2, r7, r2
 8002362:	8812      	ldrh	r2, [r2, #0]
 8002364:	4013      	ands	r3, r2
 8002366:	b29a      	uxth	r2, r3
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	3302      	adds	r3, #2
 8002370:	61bb      	str	r3, [r7, #24]
 8002372:	e00e      	b.n	8002392 <HAL_UART_Receive+0x1a6>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2212      	movs	r2, #18
 800237e:	18ba      	adds	r2, r7, r2
 8002380:	8812      	ldrh	r2, [r2, #0]
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	4013      	ands	r3, r2
 8002386:	b2da      	uxtb	r2, r3
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	3301      	adds	r3, #1
 8002390:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	225a      	movs	r2, #90	; 0x5a
 8002396:	5a9b      	ldrh	r3, [r3, r2]
 8002398:	b29b      	uxth	r3, r3
 800239a:	3b01      	subs	r3, #1
 800239c:	b299      	uxth	r1, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	225a      	movs	r2, #90	; 0x5a
 80023a2:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	225a      	movs	r2, #90	; 0x5a
 80023a8:	5a9b      	ldrh	r3, [r3, r2]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1c2      	bne.n	8002336 <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2220      	movs	r2, #32
 80023b4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e000      	b.n	80023bc <HAL_UART_Receive+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80023ba:	2302      	movs	r3, #2
  }
}
 80023bc:	0018      	movs	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	b008      	add	sp, #32
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	000001ff 	.word	0x000001ff

080023c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023c8:	b5b0      	push	{r4, r5, r7, lr}
 80023ca:	b08e      	sub	sp, #56	; 0x38
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80023d0:	231a      	movs	r3, #26
 80023d2:	2218      	movs	r2, #24
 80023d4:	4694      	mov	ip, r2
 80023d6:	44bc      	add	ip, r7
 80023d8:	4463      	add	r3, ip
 80023da:	2200      	movs	r2, #0
 80023dc:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	431a      	orrs	r2, r3
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4acb      	ldr	r2, [pc, #812]	; (800272c <UART_SetConfig+0x364>)
 80023fe:	4013      	ands	r3, r2
 8002400:	0019      	movs	r1, r3
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002408:	430a      	orrs	r2, r1
 800240a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	4ac7      	ldr	r2, [pc, #796]	; (8002730 <UART_SetConfig+0x368>)
 8002414:	4013      	ands	r3, r2
 8002416:	0019      	movs	r1, r3
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4ac1      	ldr	r2, [pc, #772]	; (8002734 <UART_SetConfig+0x36c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d004      	beq.n	800243e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800243a:	4313      	orrs	r3, r2
 800243c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	4abc      	ldr	r2, [pc, #752]	; (8002738 <UART_SetConfig+0x370>)
 8002446:	4013      	ands	r3, r2
 8002448:	0019      	movs	r1, r3
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002450:	430a      	orrs	r2, r1
 8002452:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4ab8      	ldr	r2, [pc, #736]	; (800273c <UART_SetConfig+0x374>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d134      	bne.n	80024c8 <UART_SetConfig+0x100>
 800245e:	4bb8      	ldr	r3, [pc, #736]	; (8002740 <UART_SetConfig+0x378>)
 8002460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002462:	2203      	movs	r2, #3
 8002464:	4013      	ands	r3, r2
 8002466:	2b01      	cmp	r3, #1
 8002468:	d015      	beq.n	8002496 <UART_SetConfig+0xce>
 800246a:	d304      	bcc.n	8002476 <UART_SetConfig+0xae>
 800246c:	2b02      	cmp	r3, #2
 800246e:	d00a      	beq.n	8002486 <UART_SetConfig+0xbe>
 8002470:	2b03      	cmp	r3, #3
 8002472:	d018      	beq.n	80024a6 <UART_SetConfig+0xde>
 8002474:	e01f      	b.n	80024b6 <UART_SetConfig+0xee>
 8002476:	231b      	movs	r3, #27
 8002478:	2218      	movs	r2, #24
 800247a:	4694      	mov	ip, r2
 800247c:	44bc      	add	ip, r7
 800247e:	4463      	add	r3, ip
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]
 8002484:	e0c5      	b.n	8002612 <UART_SetConfig+0x24a>
 8002486:	231b      	movs	r3, #27
 8002488:	2218      	movs	r2, #24
 800248a:	4694      	mov	ip, r2
 800248c:	44bc      	add	ip, r7
 800248e:	4463      	add	r3, ip
 8002490:	2202      	movs	r2, #2
 8002492:	701a      	strb	r2, [r3, #0]
 8002494:	e0bd      	b.n	8002612 <UART_SetConfig+0x24a>
 8002496:	231b      	movs	r3, #27
 8002498:	2218      	movs	r2, #24
 800249a:	4694      	mov	ip, r2
 800249c:	44bc      	add	ip, r7
 800249e:	4463      	add	r3, ip
 80024a0:	2204      	movs	r2, #4
 80024a2:	701a      	strb	r2, [r3, #0]
 80024a4:	e0b5      	b.n	8002612 <UART_SetConfig+0x24a>
 80024a6:	231b      	movs	r3, #27
 80024a8:	2218      	movs	r2, #24
 80024aa:	4694      	mov	ip, r2
 80024ac:	44bc      	add	ip, r7
 80024ae:	4463      	add	r3, ip
 80024b0:	2208      	movs	r2, #8
 80024b2:	701a      	strb	r2, [r3, #0]
 80024b4:	e0ad      	b.n	8002612 <UART_SetConfig+0x24a>
 80024b6:	231b      	movs	r3, #27
 80024b8:	2218      	movs	r2, #24
 80024ba:	4694      	mov	ip, r2
 80024bc:	44bc      	add	ip, r7
 80024be:	4463      	add	r3, ip
 80024c0:	2210      	movs	r2, #16
 80024c2:	701a      	strb	r2, [r3, #0]
 80024c4:	46c0      	nop			; (mov r8, r8)
 80024c6:	e0a4      	b.n	8002612 <UART_SetConfig+0x24a>
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a9d      	ldr	r2, [pc, #628]	; (8002744 <UART_SetConfig+0x37c>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d137      	bne.n	8002542 <UART_SetConfig+0x17a>
 80024d2:	4b9b      	ldr	r3, [pc, #620]	; (8002740 <UART_SetConfig+0x378>)
 80024d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d6:	220c      	movs	r2, #12
 80024d8:	4013      	ands	r3, r2
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d018      	beq.n	8002510 <UART_SetConfig+0x148>
 80024de:	d802      	bhi.n	80024e6 <UART_SetConfig+0x11e>
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <UART_SetConfig+0x128>
 80024e4:	e024      	b.n	8002530 <UART_SetConfig+0x168>
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d00a      	beq.n	8002500 <UART_SetConfig+0x138>
 80024ea:	2b0c      	cmp	r3, #12
 80024ec:	d018      	beq.n	8002520 <UART_SetConfig+0x158>
 80024ee:	e01f      	b.n	8002530 <UART_SetConfig+0x168>
 80024f0:	231b      	movs	r3, #27
 80024f2:	2218      	movs	r2, #24
 80024f4:	4694      	mov	ip, r2
 80024f6:	44bc      	add	ip, r7
 80024f8:	4463      	add	r3, ip
 80024fa:	2200      	movs	r2, #0
 80024fc:	701a      	strb	r2, [r3, #0]
 80024fe:	e088      	b.n	8002612 <UART_SetConfig+0x24a>
 8002500:	231b      	movs	r3, #27
 8002502:	2218      	movs	r2, #24
 8002504:	4694      	mov	ip, r2
 8002506:	44bc      	add	ip, r7
 8002508:	4463      	add	r3, ip
 800250a:	2202      	movs	r2, #2
 800250c:	701a      	strb	r2, [r3, #0]
 800250e:	e080      	b.n	8002612 <UART_SetConfig+0x24a>
 8002510:	231b      	movs	r3, #27
 8002512:	2218      	movs	r2, #24
 8002514:	4694      	mov	ip, r2
 8002516:	44bc      	add	ip, r7
 8002518:	4463      	add	r3, ip
 800251a:	2204      	movs	r2, #4
 800251c:	701a      	strb	r2, [r3, #0]
 800251e:	e078      	b.n	8002612 <UART_SetConfig+0x24a>
 8002520:	231b      	movs	r3, #27
 8002522:	2218      	movs	r2, #24
 8002524:	4694      	mov	ip, r2
 8002526:	44bc      	add	ip, r7
 8002528:	4463      	add	r3, ip
 800252a:	2208      	movs	r2, #8
 800252c:	701a      	strb	r2, [r3, #0]
 800252e:	e070      	b.n	8002612 <UART_SetConfig+0x24a>
 8002530:	231b      	movs	r3, #27
 8002532:	2218      	movs	r2, #24
 8002534:	4694      	mov	ip, r2
 8002536:	44bc      	add	ip, r7
 8002538:	4463      	add	r3, ip
 800253a:	2210      	movs	r2, #16
 800253c:	701a      	strb	r2, [r3, #0]
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	e067      	b.n	8002612 <UART_SetConfig+0x24a>
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a80      	ldr	r2, [pc, #512]	; (8002748 <UART_SetConfig+0x380>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d107      	bne.n	800255c <UART_SetConfig+0x194>
 800254c:	231b      	movs	r3, #27
 800254e:	2218      	movs	r2, #24
 8002550:	4694      	mov	ip, r2
 8002552:	44bc      	add	ip, r7
 8002554:	4463      	add	r3, ip
 8002556:	2200      	movs	r2, #0
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	e05a      	b.n	8002612 <UART_SetConfig+0x24a>
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a7a      	ldr	r2, [pc, #488]	; (800274c <UART_SetConfig+0x384>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d107      	bne.n	8002576 <UART_SetConfig+0x1ae>
 8002566:	231b      	movs	r3, #27
 8002568:	2218      	movs	r2, #24
 800256a:	4694      	mov	ip, r2
 800256c:	44bc      	add	ip, r7
 800256e:	4463      	add	r3, ip
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]
 8002574:	e04d      	b.n	8002612 <UART_SetConfig+0x24a>
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a6e      	ldr	r2, [pc, #440]	; (8002734 <UART_SetConfig+0x36c>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d141      	bne.n	8002604 <UART_SetConfig+0x23c>
 8002580:	4b6f      	ldr	r3, [pc, #444]	; (8002740 <UART_SetConfig+0x378>)
 8002582:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002584:	23c0      	movs	r3, #192	; 0xc0
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	4013      	ands	r3, r2
 800258a:	2280      	movs	r2, #128	; 0x80
 800258c:	00d2      	lsls	r2, r2, #3
 800258e:	4293      	cmp	r3, r2
 8002590:	d01f      	beq.n	80025d2 <UART_SetConfig+0x20a>
 8002592:	2280      	movs	r2, #128	; 0x80
 8002594:	00d2      	lsls	r2, r2, #3
 8002596:	4293      	cmp	r3, r2
 8002598:	d802      	bhi.n	80025a0 <UART_SetConfig+0x1d8>
 800259a:	2b00      	cmp	r3, #0
 800259c:	d009      	beq.n	80025b2 <UART_SetConfig+0x1ea>
 800259e:	e028      	b.n	80025f2 <UART_SetConfig+0x22a>
 80025a0:	2280      	movs	r2, #128	; 0x80
 80025a2:	0112      	lsls	r2, r2, #4
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d00c      	beq.n	80025c2 <UART_SetConfig+0x1fa>
 80025a8:	22c0      	movs	r2, #192	; 0xc0
 80025aa:	0112      	lsls	r2, r2, #4
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d018      	beq.n	80025e2 <UART_SetConfig+0x21a>
 80025b0:	e01f      	b.n	80025f2 <UART_SetConfig+0x22a>
 80025b2:	231b      	movs	r3, #27
 80025b4:	2218      	movs	r2, #24
 80025b6:	4694      	mov	ip, r2
 80025b8:	44bc      	add	ip, r7
 80025ba:	4463      	add	r3, ip
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]
 80025c0:	e027      	b.n	8002612 <UART_SetConfig+0x24a>
 80025c2:	231b      	movs	r3, #27
 80025c4:	2218      	movs	r2, #24
 80025c6:	4694      	mov	ip, r2
 80025c8:	44bc      	add	ip, r7
 80025ca:	4463      	add	r3, ip
 80025cc:	2202      	movs	r2, #2
 80025ce:	701a      	strb	r2, [r3, #0]
 80025d0:	e01f      	b.n	8002612 <UART_SetConfig+0x24a>
 80025d2:	231b      	movs	r3, #27
 80025d4:	2218      	movs	r2, #24
 80025d6:	4694      	mov	ip, r2
 80025d8:	44bc      	add	ip, r7
 80025da:	4463      	add	r3, ip
 80025dc:	2204      	movs	r2, #4
 80025de:	701a      	strb	r2, [r3, #0]
 80025e0:	e017      	b.n	8002612 <UART_SetConfig+0x24a>
 80025e2:	231b      	movs	r3, #27
 80025e4:	2218      	movs	r2, #24
 80025e6:	4694      	mov	ip, r2
 80025e8:	44bc      	add	ip, r7
 80025ea:	4463      	add	r3, ip
 80025ec:	2208      	movs	r2, #8
 80025ee:	701a      	strb	r2, [r3, #0]
 80025f0:	e00f      	b.n	8002612 <UART_SetConfig+0x24a>
 80025f2:	231b      	movs	r3, #27
 80025f4:	2218      	movs	r2, #24
 80025f6:	4694      	mov	ip, r2
 80025f8:	44bc      	add	ip, r7
 80025fa:	4463      	add	r3, ip
 80025fc:	2210      	movs	r2, #16
 80025fe:	701a      	strb	r2, [r3, #0]
 8002600:	46c0      	nop			; (mov r8, r8)
 8002602:	e006      	b.n	8002612 <UART_SetConfig+0x24a>
 8002604:	231b      	movs	r3, #27
 8002606:	2218      	movs	r2, #24
 8002608:	4694      	mov	ip, r2
 800260a:	44bc      	add	ip, r7
 800260c:	4463      	add	r3, ip
 800260e:	2210      	movs	r2, #16
 8002610:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a47      	ldr	r2, [pc, #284]	; (8002734 <UART_SetConfig+0x36c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d000      	beq.n	800261e <UART_SetConfig+0x256>
 800261c:	e0a0      	b.n	8002760 <UART_SetConfig+0x398>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800261e:	231b      	movs	r3, #27
 8002620:	2218      	movs	r2, #24
 8002622:	4694      	mov	ip, r2
 8002624:	44bc      	add	ip, r7
 8002626:	4463      	add	r3, ip
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d00d      	beq.n	800264a <UART_SetConfig+0x282>
 800262e:	dc02      	bgt.n	8002636 <UART_SetConfig+0x26e>
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <UART_SetConfig+0x278>
 8002634:	e01d      	b.n	8002672 <UART_SetConfig+0x2aa>
 8002636:	2b04      	cmp	r3, #4
 8002638:	d012      	beq.n	8002660 <UART_SetConfig+0x298>
 800263a:	2b08      	cmp	r3, #8
 800263c:	d015      	beq.n	800266a <UART_SetConfig+0x2a2>
 800263e:	e018      	b.n	8002672 <UART_SetConfig+0x2aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002640:	f7ff fb54 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 8002644:	0003      	movs	r3, r0
 8002646:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002648:	e01d      	b.n	8002686 <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800264a:	4b3d      	ldr	r3, [pc, #244]	; (8002740 <UART_SetConfig+0x378>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2210      	movs	r2, #16
 8002650:	4013      	ands	r3, r2
 8002652:	d002      	beq.n	800265a <UART_SetConfig+0x292>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002654:	4b3e      	ldr	r3, [pc, #248]	; (8002750 <UART_SetConfig+0x388>)
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002658:	e015      	b.n	8002686 <UART_SetConfig+0x2be>
          pclk = (uint32_t) HSI_VALUE;
 800265a:	4b3e      	ldr	r3, [pc, #248]	; (8002754 <UART_SetConfig+0x38c>)
 800265c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800265e:	e012      	b.n	8002686 <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002660:	f7ff fa98 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 8002664:	0003      	movs	r3, r0
 8002666:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002668:	e00d      	b.n	8002686 <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	021b      	lsls	r3, r3, #8
 800266e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002670:	e009      	b.n	8002686 <UART_SetConfig+0x2be>
      default:
        pclk = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002676:	231a      	movs	r3, #26
 8002678:	2218      	movs	r2, #24
 800267a:	4694      	mov	ip, r2
 800267c:	44bc      	add	ip, r7
 800267e:	4463      	add	r3, ip
 8002680:	2201      	movs	r2, #1
 8002682:	701a      	strb	r2, [r3, #0]
        break;
 8002684:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002688:	2b00      	cmp	r3, #0
 800268a:	d100      	bne.n	800268e <UART_SetConfig+0x2c6>
 800268c:	e13c      	b.n	8002908 <UART_SetConfig+0x540>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	0013      	movs	r3, r2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	189b      	adds	r3, r3, r2
 8002698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800269a:	429a      	cmp	r2, r3
 800269c:	d305      	bcc.n	80026aa <UART_SetConfig+0x2e2>
          (pclk > (4096U * huart->Init.BaudRate)))
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80026a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d907      	bls.n	80026ba <UART_SetConfig+0x2f2>
      {
        ret = HAL_ERROR;
 80026aa:	231a      	movs	r3, #26
 80026ac:	2218      	movs	r2, #24
 80026ae:	4694      	mov	ip, r2
 80026b0:	44bc      	add	ip, r7
 80026b2:	4463      	add	r3, ip
 80026b4:	2201      	movs	r2, #1
 80026b6:	701a      	strb	r2, [r3, #0]
 80026b8:	e126      	b.n	8002908 <UART_SetConfig+0x540>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80026ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	6939      	ldr	r1, [r7, #16]
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	000b      	movs	r3, r1
 80026c8:	0e1b      	lsrs	r3, r3, #24
 80026ca:	0010      	movs	r0, r2
 80026cc:	0205      	lsls	r5, r0, #8
 80026ce:	431d      	orrs	r5, r3
 80026d0:	000b      	movs	r3, r1
 80026d2:	021c      	lsls	r4, r3, #8
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	085b      	lsrs	r3, r3, #1
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68b8      	ldr	r0, [r7, #8]
 80026e2:	68f9      	ldr	r1, [r7, #12]
 80026e4:	1900      	adds	r0, r0, r4
 80026e6:	4169      	adcs	r1, r5
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	603b      	str	r3, [r7, #0]
 80026ee:	2300      	movs	r3, #0
 80026f0:	607b      	str	r3, [r7, #4]
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f7fd fd93 	bl	8000220 <__aeabi_uldivmod>
 80026fa:	0003      	movs	r3, r0
 80026fc:	000c      	movs	r4, r1
 80026fe:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002702:	4a15      	ldr	r2, [pc, #84]	; (8002758 <UART_SetConfig+0x390>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d908      	bls.n	800271a <UART_SetConfig+0x352>
 8002708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270a:	4a14      	ldr	r2, [pc, #80]	; (800275c <UART_SetConfig+0x394>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d804      	bhi.n	800271a <UART_SetConfig+0x352>
        {
          huart->Instance->BRR = usartdiv;
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002716:	60da      	str	r2, [r3, #12]
 8002718:	e0f6      	b.n	8002908 <UART_SetConfig+0x540>
        }
        else
        {
          ret = HAL_ERROR;
 800271a:	231a      	movs	r3, #26
 800271c:	2218      	movs	r2, #24
 800271e:	4694      	mov	ip, r2
 8002720:	44bc      	add	ip, r7
 8002722:	4463      	add	r3, ip
 8002724:	2201      	movs	r2, #1
 8002726:	701a      	strb	r2, [r3, #0]
 8002728:	e0ee      	b.n	8002908 <UART_SetConfig+0x540>
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	efff69f3 	.word	0xefff69f3
 8002730:	ffffcfff 	.word	0xffffcfff
 8002734:	40004800 	.word	0x40004800
 8002738:	fffff4ff 	.word	0xfffff4ff
 800273c:	40013800 	.word	0x40013800
 8002740:	40021000 	.word	0x40021000
 8002744:	40004400 	.word	0x40004400
 8002748:	40004c00 	.word	0x40004c00
 800274c:	40005000 	.word	0x40005000
 8002750:	003d0900 	.word	0x003d0900
 8002754:	00f42400 	.word	0x00f42400
 8002758:	000002ff 	.word	0x000002ff
 800275c:	000fffff 	.word	0x000fffff
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	69da      	ldr	r2, [r3, #28]
 8002764:	2380      	movs	r3, #128	; 0x80
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	429a      	cmp	r2, r3
 800276a:	d000      	beq.n	800276e <UART_SetConfig+0x3a6>
 800276c:	e073      	b.n	8002856 <UART_SetConfig+0x48e>
  {
    switch (clocksource)
 800276e:	231b      	movs	r3, #27
 8002770:	2218      	movs	r2, #24
 8002772:	4694      	mov	ip, r2
 8002774:	44bc      	add	ip, r7
 8002776:	4463      	add	r3, ip
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b08      	cmp	r3, #8
 800277c:	d822      	bhi.n	80027c4 <UART_SetConfig+0x3fc>
 800277e:	009a      	lsls	r2, r3, #2
 8002780:	4b69      	ldr	r3, [pc, #420]	; (8002928 <UART_SetConfig+0x560>)
 8002782:	18d3      	adds	r3, r2, r3
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002788:	f7ff fab0 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 800278c:	0003      	movs	r3, r0
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002790:	e022      	b.n	80027d8 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002792:	f7ff fac1 	bl	8001d18 <HAL_RCC_GetPCLK2Freq>
 8002796:	0003      	movs	r3, r0
 8002798:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800279a:	e01d      	b.n	80027d8 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800279c:	4b63      	ldr	r3, [pc, #396]	; (800292c <UART_SetConfig+0x564>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2210      	movs	r2, #16
 80027a2:	4013      	ands	r3, r2
 80027a4:	d002      	beq.n	80027ac <UART_SetConfig+0x3e4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80027a6:	4b62      	ldr	r3, [pc, #392]	; (8002930 <UART_SetConfig+0x568>)
 80027a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80027aa:	e015      	b.n	80027d8 <UART_SetConfig+0x410>
          pclk = (uint32_t) HSI_VALUE;
 80027ac:	4b61      	ldr	r3, [pc, #388]	; (8002934 <UART_SetConfig+0x56c>)
 80027ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027b0:	e012      	b.n	80027d8 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027b2:	f7ff f9ef 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 80027b6:	0003      	movs	r3, r0
 80027b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027ba:	e00d      	b.n	80027d8 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027bc:	2380      	movs	r3, #128	; 0x80
 80027be:	021b      	lsls	r3, r3, #8
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027c2:	e009      	b.n	80027d8 <UART_SetConfig+0x410>
      default:
        pclk = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80027c8:	231a      	movs	r3, #26
 80027ca:	2218      	movs	r2, #24
 80027cc:	4694      	mov	ip, r2
 80027ce:	44bc      	add	ip, r7
 80027d0:	4463      	add	r3, ip
 80027d2:	2201      	movs	r2, #1
 80027d4:	701a      	strb	r2, [r3, #0]
        break;
 80027d6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80027d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d100      	bne.n	80027e0 <UART_SetConfig+0x418>
 80027de:	e093      	b.n	8002908 <UART_SetConfig+0x540>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80027e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e2:	005a      	lsls	r2, r3, #1
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	085b      	lsrs	r3, r3, #1
 80027ea:	18d2      	adds	r2, r2, r3
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	0019      	movs	r1, r3
 80027f2:	0010      	movs	r0, r2
 80027f4:	f7fd fc88 	bl	8000108 <__udivsi3>
 80027f8:	0003      	movs	r3, r0
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002800:	2b0f      	cmp	r3, #15
 8002802:	d920      	bls.n	8002846 <UART_SetConfig+0x47e>
 8002804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002806:	4a4c      	ldr	r2, [pc, #304]	; (8002938 <UART_SetConfig+0x570>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d81c      	bhi.n	8002846 <UART_SetConfig+0x47e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800280c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280e:	b29a      	uxth	r2, r3
 8002810:	200e      	movs	r0, #14
 8002812:	2418      	movs	r4, #24
 8002814:	193b      	adds	r3, r7, r4
 8002816:	181b      	adds	r3, r3, r0
 8002818:	210f      	movs	r1, #15
 800281a:	438a      	bics	r2, r1
 800281c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800281e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002820:	085b      	lsrs	r3, r3, #1
 8002822:	b29b      	uxth	r3, r3
 8002824:	2207      	movs	r2, #7
 8002826:	4013      	ands	r3, r2
 8002828:	b299      	uxth	r1, r3
 800282a:	193b      	adds	r3, r7, r4
 800282c:	181b      	adds	r3, r3, r0
 800282e:	193a      	adds	r2, r7, r4
 8002830:	1812      	adds	r2, r2, r0
 8002832:	8812      	ldrh	r2, [r2, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	193a      	adds	r2, r7, r4
 800283e:	1812      	adds	r2, r2, r0
 8002840:	8812      	ldrh	r2, [r2, #0]
 8002842:	60da      	str	r2, [r3, #12]
 8002844:	e060      	b.n	8002908 <UART_SetConfig+0x540>
      }
      else
      {
        ret = HAL_ERROR;
 8002846:	231a      	movs	r3, #26
 8002848:	2218      	movs	r2, #24
 800284a:	4694      	mov	ip, r2
 800284c:	44bc      	add	ip, r7
 800284e:	4463      	add	r3, ip
 8002850:	2201      	movs	r2, #1
 8002852:	701a      	strb	r2, [r3, #0]
 8002854:	e058      	b.n	8002908 <UART_SetConfig+0x540>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002856:	231b      	movs	r3, #27
 8002858:	2218      	movs	r2, #24
 800285a:	4694      	mov	ip, r2
 800285c:	44bc      	add	ip, r7
 800285e:	4463      	add	r3, ip
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b08      	cmp	r3, #8
 8002864:	d822      	bhi.n	80028ac <UART_SetConfig+0x4e4>
 8002866:	009a      	lsls	r2, r3, #2
 8002868:	4b34      	ldr	r3, [pc, #208]	; (800293c <UART_SetConfig+0x574>)
 800286a:	18d3      	adds	r3, r2, r3
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002870:	f7ff fa3c 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 8002874:	0003      	movs	r3, r0
 8002876:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002878:	e022      	b.n	80028c0 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800287a:	f7ff fa4d 	bl	8001d18 <HAL_RCC_GetPCLK2Freq>
 800287e:	0003      	movs	r3, r0
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002882:	e01d      	b.n	80028c0 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002884:	4b29      	ldr	r3, [pc, #164]	; (800292c <UART_SetConfig+0x564>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2210      	movs	r2, #16
 800288a:	4013      	ands	r3, r2
 800288c:	d002      	beq.n	8002894 <UART_SetConfig+0x4cc>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800288e:	4b28      	ldr	r3, [pc, #160]	; (8002930 <UART_SetConfig+0x568>)
 8002890:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002892:	e015      	b.n	80028c0 <UART_SetConfig+0x4f8>
          pclk = (uint32_t) HSI_VALUE;
 8002894:	4b27      	ldr	r3, [pc, #156]	; (8002934 <UART_SetConfig+0x56c>)
 8002896:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002898:	e012      	b.n	80028c0 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800289a:	f7ff f97b 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 800289e:	0003      	movs	r3, r0
 80028a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028a2:	e00d      	b.n	80028c0 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028a4:	2380      	movs	r3, #128	; 0x80
 80028a6:	021b      	lsls	r3, r3, #8
 80028a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028aa:	e009      	b.n	80028c0 <UART_SetConfig+0x4f8>
      default:
        pclk = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80028b0:	231a      	movs	r3, #26
 80028b2:	2218      	movs	r2, #24
 80028b4:	4694      	mov	ip, r2
 80028b6:	44bc      	add	ip, r7
 80028b8:	4463      	add	r3, ip
 80028ba:	2201      	movs	r2, #1
 80028bc:	701a      	strb	r2, [r3, #0]
        break;
 80028be:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80028c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d020      	beq.n	8002908 <UART_SetConfig+0x540>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	085a      	lsrs	r2, r3, #1
 80028cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ce:	18d2      	adds	r2, r2, r3
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	0019      	movs	r1, r3
 80028d6:	0010      	movs	r0, r2
 80028d8:	f7fd fc16 	bl	8000108 <__udivsi3>
 80028dc:	0003      	movs	r3, r0
 80028de:	b29b      	uxth	r3, r3
 80028e0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e4:	2b0f      	cmp	r3, #15
 80028e6:	d908      	bls.n	80028fa <UART_SetConfig+0x532>
 80028e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ea:	4a13      	ldr	r2, [pc, #76]	; (8002938 <UART_SetConfig+0x570>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d804      	bhi.n	80028fa <UART_SetConfig+0x532>
      {
        huart->Instance->BRR = usartdiv;
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028f6:	60da      	str	r2, [r3, #12]
 80028f8:	e006      	b.n	8002908 <UART_SetConfig+0x540>
      }
      else
      {
        ret = HAL_ERROR;
 80028fa:	231a      	movs	r3, #26
 80028fc:	2218      	movs	r2, #24
 80028fe:	4694      	mov	ip, r2
 8002900:	44bc      	add	ip, r7
 8002902:	4463      	add	r3, ip
 8002904:	2201      	movs	r2, #1
 8002906:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	2200      	movs	r2, #0
 800290c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	2200      	movs	r2, #0
 8002912:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002914:	231a      	movs	r3, #26
 8002916:	2218      	movs	r2, #24
 8002918:	4694      	mov	ip, r2
 800291a:	44bc      	add	ip, r7
 800291c:	4463      	add	r3, ip
 800291e:	781b      	ldrb	r3, [r3, #0]
}
 8002920:	0018      	movs	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	b00e      	add	sp, #56	; 0x38
 8002926:	bdb0      	pop	{r4, r5, r7, pc}
 8002928:	08002cec 	.word	0x08002cec
 800292c:	40021000 	.word	0x40021000
 8002930:	003d0900 	.word	0x003d0900
 8002934:	00f42400 	.word	0x00f42400
 8002938:	0000ffff 	.word	0x0000ffff
 800293c:	08002d10 	.word	0x08002d10

08002940 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	2201      	movs	r2, #1
 800294e:	4013      	ands	r3, r2
 8002950:	d00b      	beq.n	800296a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	4a4a      	ldr	r2, [pc, #296]	; (8002a84 <UART_AdvFeatureConfig+0x144>)
 800295a:	4013      	ands	r3, r2
 800295c:	0019      	movs	r1, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	2202      	movs	r2, #2
 8002970:	4013      	ands	r3, r2
 8002972:	d00b      	beq.n	800298c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	4a43      	ldr	r2, [pc, #268]	; (8002a88 <UART_AdvFeatureConfig+0x148>)
 800297c:	4013      	ands	r3, r2
 800297e:	0019      	movs	r1, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	2204      	movs	r2, #4
 8002992:	4013      	ands	r3, r2
 8002994:	d00b      	beq.n	80029ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4a3b      	ldr	r2, [pc, #236]	; (8002a8c <UART_AdvFeatureConfig+0x14c>)
 800299e:	4013      	ands	r3, r2
 80029a0:	0019      	movs	r1, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	2208      	movs	r2, #8
 80029b4:	4013      	ands	r3, r2
 80029b6:	d00b      	beq.n	80029d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	4a34      	ldr	r2, [pc, #208]	; (8002a90 <UART_AdvFeatureConfig+0x150>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	0019      	movs	r1, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	2210      	movs	r2, #16
 80029d6:	4013      	ands	r3, r2
 80029d8:	d00b      	beq.n	80029f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4a2c      	ldr	r2, [pc, #176]	; (8002a94 <UART_AdvFeatureConfig+0x154>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	0019      	movs	r1, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	2220      	movs	r2, #32
 80029f8:	4013      	ands	r3, r2
 80029fa:	d00b      	beq.n	8002a14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	4a25      	ldr	r2, [pc, #148]	; (8002a98 <UART_AdvFeatureConfig+0x158>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	0019      	movs	r1, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	2240      	movs	r2, #64	; 0x40
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d01d      	beq.n	8002a5a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	4a1d      	ldr	r2, [pc, #116]	; (8002a9c <UART_AdvFeatureConfig+0x15c>)
 8002a26:	4013      	ands	r3, r2
 8002a28:	0019      	movs	r1, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a3a:	2380      	movs	r3, #128	; 0x80
 8002a3c:	035b      	lsls	r3, r3, #13
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d10b      	bne.n	8002a5a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	4a15      	ldr	r2, [pc, #84]	; (8002aa0 <UART_AdvFeatureConfig+0x160>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	0019      	movs	r1, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	2280      	movs	r2, #128	; 0x80
 8002a60:	4013      	ands	r3, r2
 8002a62:	d00b      	beq.n	8002a7c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	4a0e      	ldr	r2, [pc, #56]	; (8002aa4 <UART_AdvFeatureConfig+0x164>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	0019      	movs	r1, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	605a      	str	r2, [r3, #4]
  }
}
 8002a7c:	46c0      	nop			; (mov r8, r8)
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	b002      	add	sp, #8
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	fffdffff 	.word	0xfffdffff
 8002a88:	fffeffff 	.word	0xfffeffff
 8002a8c:	fffbffff 	.word	0xfffbffff
 8002a90:	ffff7fff 	.word	0xffff7fff
 8002a94:	ffffefff 	.word	0xffffefff
 8002a98:	ffffdfff 	.word	0xffffdfff
 8002a9c:	ffefffff 	.word	0xffefffff
 8002aa0:	ff9fffff 	.word	0xff9fffff
 8002aa4:	fff7ffff 	.word	0xfff7ffff

08002aa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2280      	movs	r2, #128	; 0x80
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ab8:	f7fe f912 	bl	8000ce0 <HAL_GetTick>
 8002abc:	0003      	movs	r3, r0
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2208      	movs	r2, #8
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d10d      	bne.n	8002aea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	0399      	lsls	r1, r3, #14
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	4b18      	ldr	r3, [pc, #96]	; (8002b38 <UART_CheckIdleState+0x90>)
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	0013      	movs	r3, r2
 8002adc:	2200      	movs	r2, #0
 8002ade:	f000 f82d 	bl	8002b3c <UART_WaitOnFlagUntilTimeout>
 8002ae2:	1e03      	subs	r3, r0, #0
 8002ae4:	d001      	beq.n	8002aea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e022      	b.n	8002b30 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2204      	movs	r2, #4
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d10d      	bne.n	8002b14 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	03d9      	lsls	r1, r3, #15
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <UART_CheckIdleState+0x90>)
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	0013      	movs	r3, r2
 8002b06:	2200      	movs	r2, #0
 8002b08:	f000 f818 	bl	8002b3c <UART_WaitOnFlagUntilTimeout>
 8002b0c:	1e03      	subs	r3, r0, #0
 8002b0e:	d001      	beq.n	8002b14 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e00d      	b.n	8002b30 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2274      	movs	r2, #116	; 0x74
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	0018      	movs	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b004      	add	sp, #16
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	01ffffff 	.word	0x01ffffff

08002b3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	1dfb      	adds	r3, r7, #7
 8002b4a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b4c:	e05e      	b.n	8002c0c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	3301      	adds	r3, #1
 8002b52:	d05b      	beq.n	8002c0c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b54:	f7fe f8c4 	bl	8000ce0 <HAL_GetTick>
 8002b58:	0002      	movs	r2, r0
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d302      	bcc.n	8002b6a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d11b      	bne.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	492f      	ldr	r1, [pc, #188]	; (8002c34 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002b76:	400a      	ands	r2, r1
 8002b78:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2101      	movs	r1, #1
 8002b86:	438a      	bics	r2, r1
 8002b88:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2220      	movs	r2, #32
 8002b94:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2274      	movs	r2, #116	; 0x74
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e044      	b.n	8002c2c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2204      	movs	r2, #4
 8002baa:	4013      	ands	r3, r2
 8002bac:	d02e      	beq.n	8002c0c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	69da      	ldr	r2, [r3, #28]
 8002bb4:	2380      	movs	r3, #128	; 0x80
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	401a      	ands	r2, r3
 8002bba:	2380      	movs	r3, #128	; 0x80
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d124      	bne.n	8002c0c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2280      	movs	r2, #128	; 0x80
 8002bc8:	0112      	lsls	r2, r2, #4
 8002bca:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4917      	ldr	r1, [pc, #92]	; (8002c34 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002bd8:	400a      	ands	r2, r1
 8002bda:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2101      	movs	r1, #1
 8002be8:	438a      	bics	r2, r1
 8002bea:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2280      	movs	r2, #128	; 0x80
 8002bfc:	2120      	movs	r1, #32
 8002bfe:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2274      	movs	r2, #116	; 0x74
 8002c04:	2100      	movs	r1, #0
 8002c06:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e00f      	b.n	8002c2c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	4013      	ands	r3, r2
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	425a      	negs	r2, r3
 8002c1c:	4153      	adcs	r3, r2
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	001a      	movs	r2, r3
 8002c22:	1dfb      	adds	r3, r7, #7
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d091      	beq.n	8002b4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	b004      	add	sp, #16
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	fffffe5f 	.word	0xfffffe5f

08002c38 <__libc_init_array>:
 8002c38:	b570      	push	{r4, r5, r6, lr}
 8002c3a:	2600      	movs	r6, #0
 8002c3c:	4d0c      	ldr	r5, [pc, #48]	; (8002c70 <__libc_init_array+0x38>)
 8002c3e:	4c0d      	ldr	r4, [pc, #52]	; (8002c74 <__libc_init_array+0x3c>)
 8002c40:	1b64      	subs	r4, r4, r5
 8002c42:	10a4      	asrs	r4, r4, #2
 8002c44:	42a6      	cmp	r6, r4
 8002c46:	d109      	bne.n	8002c5c <__libc_init_array+0x24>
 8002c48:	2600      	movs	r6, #0
 8002c4a:	f000 f82b 	bl	8002ca4 <_init>
 8002c4e:	4d0a      	ldr	r5, [pc, #40]	; (8002c78 <__libc_init_array+0x40>)
 8002c50:	4c0a      	ldr	r4, [pc, #40]	; (8002c7c <__libc_init_array+0x44>)
 8002c52:	1b64      	subs	r4, r4, r5
 8002c54:	10a4      	asrs	r4, r4, #2
 8002c56:	42a6      	cmp	r6, r4
 8002c58:	d105      	bne.n	8002c66 <__libc_init_array+0x2e>
 8002c5a:	bd70      	pop	{r4, r5, r6, pc}
 8002c5c:	00b3      	lsls	r3, r6, #2
 8002c5e:	58eb      	ldr	r3, [r5, r3]
 8002c60:	4798      	blx	r3
 8002c62:	3601      	adds	r6, #1
 8002c64:	e7ee      	b.n	8002c44 <__libc_init_array+0xc>
 8002c66:	00b3      	lsls	r3, r6, #2
 8002c68:	58eb      	ldr	r3, [r5, r3]
 8002c6a:	4798      	blx	r3
 8002c6c:	3601      	adds	r6, #1
 8002c6e:	e7f2      	b.n	8002c56 <__libc_init_array+0x1e>
 8002c70:	08002d3c 	.word	0x08002d3c
 8002c74:	08002d3c 	.word	0x08002d3c
 8002c78:	08002d3c 	.word	0x08002d3c
 8002c7c:	08002d40 	.word	0x08002d40

08002c80 <memcpy>:
 8002c80:	2300      	movs	r3, #0
 8002c82:	b510      	push	{r4, lr}
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d100      	bne.n	8002c8a <memcpy+0xa>
 8002c88:	bd10      	pop	{r4, pc}
 8002c8a:	5ccc      	ldrb	r4, [r1, r3]
 8002c8c:	54c4      	strb	r4, [r0, r3]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	e7f8      	b.n	8002c84 <memcpy+0x4>

08002c92 <memset>:
 8002c92:	0003      	movs	r3, r0
 8002c94:	1812      	adds	r2, r2, r0
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d100      	bne.n	8002c9c <memset+0xa>
 8002c9a:	4770      	bx	lr
 8002c9c:	7019      	strb	r1, [r3, #0]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	e7f9      	b.n	8002c96 <memset+0x4>
	...

08002ca4 <_init>:
 8002ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002caa:	bc08      	pop	{r3}
 8002cac:	469e      	mov	lr, r3
 8002cae:	4770      	bx	lr

08002cb0 <_fini>:
 8002cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cb6:	bc08      	pop	{r3}
 8002cb8:	469e      	mov	lr, r3
 8002cba:	4770      	bx	lr
