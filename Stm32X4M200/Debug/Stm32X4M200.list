
Stm32X4M200.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003768  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003828  08003828  00013828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038a0  080038a0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080038a0  080038a0  000138a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038a8  080038a8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038a8  080038a8  000138a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038ac  080038ac  000138ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080038b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000010  080038c0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080038c0  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000084f8  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001796  00000000  00000000  00028530  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007f8  00000000  00000000  00029cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000778  00000000  00000000  0002a4c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014d5e  00000000  00000000  0002ac38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000752c  00000000  00000000  0003f996  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007b3fb  00000000  00000000  00046ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c22bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bc0  00000000  00000000  000c2338  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003810 	.word	0x08003810

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003810 	.word	0x08003810

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f830 	bl	80002b4 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4343      	muls	r3, r0
 8000298:	4351      	muls	r1, r2
 800029a:	0c25      	lsrs	r5, r4, #16
 800029c:	0436      	lsls	r6, r6, #16
 800029e:	4465      	add	r5, ip
 80002a0:	0c36      	lsrs	r6, r6, #16
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	195b      	adds	r3, r3, r5
 80002a8:	1859      	adds	r1, r3, r1
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__udivmoddi4>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	464f      	mov	r7, r9
 80002b8:	4646      	mov	r6, r8
 80002ba:	46d6      	mov	lr, sl
 80002bc:	b5c0      	push	{r6, r7, lr}
 80002be:	0004      	movs	r4, r0
 80002c0:	b082      	sub	sp, #8
 80002c2:	000d      	movs	r5, r1
 80002c4:	4691      	mov	r9, r2
 80002c6:	4698      	mov	r8, r3
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d82f      	bhi.n	800032c <__udivmoddi4+0x78>
 80002cc:	d02c      	beq.n	8000328 <__udivmoddi4+0x74>
 80002ce:	4641      	mov	r1, r8
 80002d0:	4648      	mov	r0, r9
 80002d2:	f000 f8b1 	bl	8000438 <__clzdi2>
 80002d6:	0029      	movs	r1, r5
 80002d8:	0006      	movs	r6, r0
 80002da:	0020      	movs	r0, r4
 80002dc:	f000 f8ac 	bl	8000438 <__clzdi2>
 80002e0:	1a33      	subs	r3, r6, r0
 80002e2:	469c      	mov	ip, r3
 80002e4:	3b20      	subs	r3, #32
 80002e6:	469a      	mov	sl, r3
 80002e8:	d500      	bpl.n	80002ec <__udivmoddi4+0x38>
 80002ea:	e076      	b.n	80003da <__udivmoddi4+0x126>
 80002ec:	464b      	mov	r3, r9
 80002ee:	4652      	mov	r2, sl
 80002f0:	4093      	lsls	r3, r2
 80002f2:	001f      	movs	r7, r3
 80002f4:	464b      	mov	r3, r9
 80002f6:	4662      	mov	r2, ip
 80002f8:	4093      	lsls	r3, r2
 80002fa:	001e      	movs	r6, r3
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d828      	bhi.n	8000352 <__udivmoddi4+0x9e>
 8000300:	d025      	beq.n	800034e <__udivmoddi4+0x9a>
 8000302:	4653      	mov	r3, sl
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5a>
 800030c:	e07b      	b.n	8000406 <__udivmoddi4+0x152>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	4652      	mov	r2, sl
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4662      	mov	r2, ip
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e018      	b.n	800035a <__udivmoddi4+0xa6>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9d0      	bls.n	80002ce <__udivmoddi4+0x1a>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8a>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b002      	add	sp, #8
 8000344:	bc1c      	pop	{r2, r3, r4}
 8000346:	4690      	mov	r8, r2
 8000348:	4699      	mov	r9, r3
 800034a:	46a2      	mov	sl, r4
 800034c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034e:	42a3      	cmp	r3, r4
 8000350:	d9d7      	bls.n	8000302 <__udivmoddi4+0x4e>
 8000352:	2200      	movs	r2, #0
 8000354:	2300      	movs	r3, #0
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	4663      	mov	r3, ip
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0e9      	beq.n	8000334 <__udivmoddi4+0x80>
 8000360:	07fb      	lsls	r3, r7, #31
 8000362:	4698      	mov	r8, r3
 8000364:	4641      	mov	r1, r8
 8000366:	0872      	lsrs	r2, r6, #1
 8000368:	430a      	orrs	r2, r1
 800036a:	087b      	lsrs	r3, r7, #1
 800036c:	4666      	mov	r6, ip
 800036e:	e00e      	b.n	800038e <__udivmoddi4+0xda>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d101      	bne.n	8000378 <__udivmoddi4+0xc4>
 8000374:	42a2      	cmp	r2, r4
 8000376:	d80c      	bhi.n	8000392 <__udivmoddi4+0xde>
 8000378:	1aa4      	subs	r4, r4, r2
 800037a:	419d      	sbcs	r5, r3
 800037c:	2001      	movs	r0, #1
 800037e:	1924      	adds	r4, r4, r4
 8000380:	416d      	adcs	r5, r5
 8000382:	2100      	movs	r1, #0
 8000384:	3e01      	subs	r6, #1
 8000386:	1824      	adds	r4, r4, r0
 8000388:	414d      	adcs	r5, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d006      	beq.n	800039c <__udivmoddi4+0xe8>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d9ee      	bls.n	8000370 <__udivmoddi4+0xbc>
 8000392:	3e01      	subs	r6, #1
 8000394:	1924      	adds	r4, r4, r4
 8000396:	416d      	adcs	r5, r5
 8000398:	2e00      	cmp	r6, #0
 800039a:	d1f8      	bne.n	800038e <__udivmoddi4+0xda>
 800039c:	9800      	ldr	r0, [sp, #0]
 800039e:	9901      	ldr	r1, [sp, #4]
 80003a0:	4653      	mov	r3, sl
 80003a2:	1900      	adds	r0, r0, r4
 80003a4:	4169      	adcs	r1, r5
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db23      	blt.n	80003f2 <__udivmoddi4+0x13e>
 80003aa:	002b      	movs	r3, r5
 80003ac:	4652      	mov	r2, sl
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	4664      	mov	r4, ip
 80003b4:	40e2      	lsrs	r2, r4
 80003b6:	001c      	movs	r4, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	0015      	movs	r5, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db2d      	blt.n	800041c <__udivmoddi4+0x168>
 80003c0:	0026      	movs	r6, r4
 80003c2:	4657      	mov	r7, sl
 80003c4:	40be      	lsls	r6, r7
 80003c6:	0033      	movs	r3, r6
 80003c8:	0026      	movs	r6, r4
 80003ca:	4667      	mov	r7, ip
 80003cc:	40be      	lsls	r6, r7
 80003ce:	0032      	movs	r2, r6
 80003d0:	1a80      	subs	r0, r0, r2
 80003d2:	4199      	sbcs	r1, r3
 80003d4:	9000      	str	r0, [sp, #0]
 80003d6:	9101      	str	r1, [sp, #4]
 80003d8:	e7ac      	b.n	8000334 <__udivmoddi4+0x80>
 80003da:	4662      	mov	r2, ip
 80003dc:	2320      	movs	r3, #32
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	464a      	mov	r2, r9
 80003e2:	40da      	lsrs	r2, r3
 80003e4:	4661      	mov	r1, ip
 80003e6:	0013      	movs	r3, r2
 80003e8:	4642      	mov	r2, r8
 80003ea:	408a      	lsls	r2, r1
 80003ec:	0017      	movs	r7, r2
 80003ee:	431f      	orrs	r7, r3
 80003f0:	e780      	b.n	80002f4 <__udivmoddi4+0x40>
 80003f2:	4662      	mov	r2, ip
 80003f4:	2320      	movs	r3, #32
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	002a      	movs	r2, r5
 80003fa:	4666      	mov	r6, ip
 80003fc:	409a      	lsls	r2, r3
 80003fe:	0023      	movs	r3, r4
 8000400:	40f3      	lsrs	r3, r6
 8000402:	4313      	orrs	r3, r2
 8000404:	e7d4      	b.n	80003b0 <__udivmoddi4+0xfc>
 8000406:	4662      	mov	r2, ip
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e780      	b.n	800031e <__udivmoddi4+0x6a>
 800041c:	2320      	movs	r3, #32
 800041e:	4662      	mov	r2, ip
 8000420:	0026      	movs	r6, r4
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	40de      	lsrs	r6, r3
 8000426:	002f      	movs	r7, r5
 8000428:	46b0      	mov	r8, r6
 800042a:	4666      	mov	r6, ip
 800042c:	40b7      	lsls	r7, r6
 800042e:	4646      	mov	r6, r8
 8000430:	003b      	movs	r3, r7
 8000432:	4333      	orrs	r3, r6
 8000434:	e7c8      	b.n	80003c8 <__udivmoddi4+0x114>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__clzdi2>:
 8000438:	b510      	push	{r4, lr}
 800043a:	2900      	cmp	r1, #0
 800043c:	d103      	bne.n	8000446 <__clzdi2+0xe>
 800043e:	f000 f807 	bl	8000450 <__clzsi2>
 8000442:	3020      	adds	r0, #32
 8000444:	e002      	b.n	800044c <__clzdi2+0x14>
 8000446:	1c08      	adds	r0, r1, #0
 8000448:	f000 f802 	bl	8000450 <__clzsi2>
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__clzsi2>:
 8000450:	211c      	movs	r1, #28
 8000452:	2301      	movs	r3, #1
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	4298      	cmp	r0, r3
 8000458:	d301      	bcc.n	800045e <__clzsi2+0xe>
 800045a:	0c00      	lsrs	r0, r0, #16
 800045c:	3910      	subs	r1, #16
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	4298      	cmp	r0, r3
 8000462:	d301      	bcc.n	8000468 <__clzsi2+0x18>
 8000464:	0a00      	lsrs	r0, r0, #8
 8000466:	3908      	subs	r1, #8
 8000468:	091b      	lsrs	r3, r3, #4
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__clzsi2+0x22>
 800046e:	0900      	lsrs	r0, r0, #4
 8000470:	3904      	subs	r1, #4
 8000472:	a202      	add	r2, pc, #8	; (adr r2, 800047c <__clzsi2+0x2c>)
 8000474:	5c10      	ldrb	r0, [r2, r0]
 8000476:	1840      	adds	r0, r0, r1
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	02020304 	.word	0x02020304
 8000480:	01010101 	.word	0x01010101
	...

0800048c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800048c:	b5b0      	push	{r4, r5, r7, lr}
 800048e:	b088      	sub	sp, #32
 8000490:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000492:	f000 fd17 	bl	8000ec4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000496:	f000 f88d 	bl	80005b4 <_Z18SystemClock_Configv>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800049a:	f000 f945 	bl	8000728 <_ZL12MX_GPIO_Initv>
	MX_USART2_UART_Init();
 800049e:	f000 f907 	bl	80006b0 <_ZL19MX_USART2_UART_Initv>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80004a2:	4b42      	ldr	r3, [pc, #264]	; (80005ac <main+0x120>)
 80004a4:	2180      	movs	r1, #128	; 0x80
 80004a6:	0018      	movs	r0, r3
 80004a8:	f001 f87d 	bl	80015a6 <HAL_GPIO_TogglePin>
	stopModule();
 80004ac:	f000 fb2c 	bl	8000b08 <_Z10stopModulev>
	resetModule();
 80004b0:	f000 fb3e 	bl	8000b30 <_Z11resetModulev>
	loadRespirationApp();
 80004b4:	f000 fb64 	bl	8000b80 <_Z18loadRespirationAppv>
	configureNoiseMap();
 80004b8:	f000 fb7e 	bl	8000bb8 <_Z17configureNoiseMapv>
	setSensity(5);
 80004bc:	2005      	movs	r0, #5
 80004be:	f000 fb9b 	bl	8000bf8 <_Z10setSensityi>
	setDetectionZone(0.40, 2.00);
 80004c2:	2280      	movs	r2, #128	; 0x80
 80004c4:	05d2      	lsls	r2, r2, #23
 80004c6:	4b3a      	ldr	r3, [pc, #232]	; (80005b0 <main+0x124>)
 80004c8:	1c11      	adds	r1, r2, #0
 80004ca:	1c18      	adds	r0, r3, #0
 80004cc:	f000 fbbe 	bl	8000c4c <_Z16setDetectionZoneff>
	executeApp();
 80004d0:	f000 fbee 	bl	8000cb0 <_Z10executeAppv>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80004d4:	4b35      	ldr	r3, [pc, #212]	; (80005ac <main+0x120>)
 80004d6:	2180      	movs	r1, #128	; 0x80
 80004d8:	0018      	movs	r0, r3
 80004da:	f001 f864 	bl	80015a6 <HAL_GPIO_TogglePin>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		data = getRespirationData();
 80004de:	2510      	movs	r5, #16
 80004e0:	197c      	adds	r4, r7, r5
 80004e2:	003b      	movs	r3, r7
 80004e4:	0018      	movs	r0, r3
 80004e6:	f000 fbf7 	bl	8000cd8 <_Z18getRespirationDatav>
 80004ea:	003a      	movs	r2, r7
 80004ec:	0023      	movs	r3, r4
 80004ee:	ca13      	ldmia	r2!, {r0, r1, r4}
 80004f0:	c313      	stmia	r3!, {r0, r1, r4}
 80004f2:	6812      	ldr	r2, [r2, #0]
 80004f4:	601a      	str	r2, [r3, #0]
		if (data.valid == true)
 80004f6:	197b      	adds	r3, r7, r5
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d0ef      	beq.n	80004de <main+0x52>
			switch (data.code) {
 80004fe:	2310      	movs	r3, #16
 8000500:	18fb      	adds	r3, r7, r3
 8000502:	7b1b      	ldrb	r3, [r3, #12]
 8000504:	2b01      	cmp	r3, #1
 8000506:	d016      	beq.n	8000536 <main+0xaa>
 8000508:	2b02      	cmp	r3, #2
 800050a:	d027      	beq.n	800055c <main+0xd0>
 800050c:	2b00      	cmp	r3, #0
 800050e:	d138      	bne.n	8000582 <main+0xf6>
			case _xts_val_resp_state_breathing:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000510:	4b26      	ldr	r3, [pc, #152]	; (80005ac <main+0x120>)
 8000512:	2201      	movs	r2, #1
 8000514:	2120      	movs	r1, #32
 8000516:	0018      	movs	r0, r3
 8000518:	f001 f828 	bl	800156c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800051c:	4b23      	ldr	r3, [pc, #140]	; (80005ac <main+0x120>)
 800051e:	2200      	movs	r2, #0
 8000520:	2140      	movs	r1, #64	; 0x40
 8000522:	0018      	movs	r0, r3
 8000524:	f001 f822 	bl	800156c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000528:	4b20      	ldr	r3, [pc, #128]	; (80005ac <main+0x120>)
 800052a:	2200      	movs	r2, #0
 800052c:	2180      	movs	r1, #128	; 0x80
 800052e:	0018      	movs	r0, r3
 8000530:	f001 f81c 	bl	800156c <HAL_GPIO_WritePin>
				break;
 8000534:	e038      	b.n	80005a8 <main+0x11c>
			case _xts_val_resp_state_movement:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000536:	4b1d      	ldr	r3, [pc, #116]	; (80005ac <main+0x120>)
 8000538:	2200      	movs	r2, #0
 800053a:	2120      	movs	r1, #32
 800053c:	0018      	movs	r0, r3
 800053e:	f001 f815 	bl	800156c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000542:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <main+0x120>)
 8000544:	2201      	movs	r2, #1
 8000546:	2140      	movs	r1, #64	; 0x40
 8000548:	0018      	movs	r0, r3
 800054a:	f001 f80f 	bl	800156c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800054e:	4b17      	ldr	r3, [pc, #92]	; (80005ac <main+0x120>)
 8000550:	2200      	movs	r2, #0
 8000552:	2180      	movs	r1, #128	; 0x80
 8000554:	0018      	movs	r0, r3
 8000556:	f001 f809 	bl	800156c <HAL_GPIO_WritePin>
				break;
 800055a:	e025      	b.n	80005a8 <main+0x11c>
			case _xts_val_resp_state_movement_tracking:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800055c:	4b13      	ldr	r3, [pc, #76]	; (80005ac <main+0x120>)
 800055e:	2200      	movs	r2, #0
 8000560:	2120      	movs	r1, #32
 8000562:	0018      	movs	r0, r3
 8000564:	f001 f802 	bl	800156c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000568:	4b10      	ldr	r3, [pc, #64]	; (80005ac <main+0x120>)
 800056a:	2200      	movs	r2, #0
 800056c:	2140      	movs	r1, #64	; 0x40
 800056e:	0018      	movs	r0, r3
 8000570:	f000 fffc 	bl	800156c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000574:	4b0d      	ldr	r3, [pc, #52]	; (80005ac <main+0x120>)
 8000576:	2201      	movs	r2, #1
 8000578:	2180      	movs	r1, #128	; 0x80
 800057a:	0018      	movs	r0, r3
 800057c:	f000 fff6 	bl	800156c <HAL_GPIO_WritePin>
				break;
 8000580:	e012      	b.n	80005a8 <main+0x11c>
			default:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000582:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <main+0x120>)
 8000584:	2200      	movs	r2, #0
 8000586:	2120      	movs	r1, #32
 8000588:	0018      	movs	r0, r3
 800058a:	f000 ffef 	bl	800156c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800058e:	4b07      	ldr	r3, [pc, #28]	; (80005ac <main+0x120>)
 8000590:	2200      	movs	r2, #0
 8000592:	2140      	movs	r1, #64	; 0x40
 8000594:	0018      	movs	r0, r3
 8000596:	f000 ffe9 	bl	800156c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800059a:	4b04      	ldr	r3, [pc, #16]	; (80005ac <main+0x120>)
 800059c:	2200      	movs	r2, #0
 800059e:	2180      	movs	r1, #128	; 0x80
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 ffe3 	bl	800156c <HAL_GPIO_WritePin>
				break;
 80005a6:	46c0      	nop			; (mov r8, r8)
		data = getRespirationData();
 80005a8:	e799      	b.n	80004de <main+0x52>
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	50000400 	.word	0x50000400
 80005b0:	3ecccccd 	.word	0x3ecccccd

080005b4 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b09d      	sub	sp, #116	; 0x74
 80005b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005ba:	2438      	movs	r4, #56	; 0x38
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	0018      	movs	r0, r3
 80005c0:	2338      	movs	r3, #56	; 0x38
 80005c2:	001a      	movs	r2, r3
 80005c4:	2100      	movs	r1, #0
 80005c6:	f003 f91a 	bl	80037fe <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005ca:	2324      	movs	r3, #36	; 0x24
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	0018      	movs	r0, r3
 80005d0:	2314      	movs	r3, #20
 80005d2:	001a      	movs	r2, r3
 80005d4:	2100      	movs	r1, #0
 80005d6:	f003 f912 	bl	80037fe <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80005da:	003b      	movs	r3, r7
 80005dc:	0018      	movs	r0, r3
 80005de:	2324      	movs	r3, #36	; 0x24
 80005e0:	001a      	movs	r2, r3
 80005e2:	2100      	movs	r1, #0
 80005e4:	f003 f90b 	bl	80037fe <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e8:	4b2f      	ldr	r3, [pc, #188]	; (80006a8 <_Z18SystemClock_Configv+0xf4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a2f      	ldr	r2, [pc, #188]	; (80006ac <_Z18SystemClock_Configv+0xf8>)
 80005ee:	401a      	ands	r2, r3
 80005f0:	4b2d      	ldr	r3, [pc, #180]	; (80006a8 <_Z18SystemClock_Configv+0xf4>)
 80005f2:	2180      	movs	r1, #128	; 0x80
 80005f4:	0109      	lsls	r1, r1, #4
 80005f6:	430a      	orrs	r2, r1
 80005f8:	601a      	str	r2, [r3, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fa:	0021      	movs	r1, r4
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2202      	movs	r2, #2
 8000600:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000602:	187b      	adds	r3, r7, r1
 8000604:	2201      	movs	r2, #1
 8000606:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2210      	movs	r2, #16
 800060c:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2202      	movs	r2, #2
 8000612:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2200      	movs	r2, #0
 8000618:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2200      	movs	r2, #0
 800061e:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2280      	movs	r2, #128	; 0x80
 8000624:	03d2      	lsls	r2, r2, #15
 8000626:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000628:	187b      	adds	r3, r7, r1
 800062a:	0018      	movs	r0, r3
 800062c:	f000 ffd6 	bl	80015dc <HAL_RCC_OscConfig>
 8000630:	0003      	movs	r3, r0
 8000632:	1e5a      	subs	r2, r3, #1
 8000634:	4193      	sbcs	r3, r2
 8000636:	b2db      	uxtb	r3, r3
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <_Z18SystemClock_Configv+0x8c>
		Error_Handler();
 800063c:	f000 fb8a 	bl	8000d54 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000640:	2124      	movs	r1, #36	; 0x24
 8000642:	187b      	adds	r3, r7, r1
 8000644:	220f      	movs	r2, #15
 8000646:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2203      	movs	r2, #3
 800064c:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2101      	movs	r1, #1
 8000664:	0018      	movs	r0, r3
 8000666:	f001 fb8f 	bl	8001d88 <HAL_RCC_ClockConfig>
 800066a:	0003      	movs	r3, r0
 800066c:	1e5a      	subs	r2, r3, #1
 800066e:	4193      	sbcs	r3, r2
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <_Z18SystemClock_Configv+0xc6>
		Error_Handler();
 8000676:	f000 fb6d 	bl	8000d54 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800067a:	003b      	movs	r3, r7
 800067c:	2202      	movs	r2, #2
 800067e:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000680:	003b      	movs	r3, r7
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000686:	003b      	movs	r3, r7
 8000688:	0018      	movs	r0, r3
 800068a:	f001 fd9d 	bl	80021c8 <HAL_RCCEx_PeriphCLKConfig>
 800068e:	0003      	movs	r3, r0
 8000690:	1e5a      	subs	r2, r3, #1
 8000692:	4193      	sbcs	r3, r2
 8000694:	b2db      	uxtb	r3, r3
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <_Z18SystemClock_Configv+0xea>
		Error_Handler();
 800069a:	f000 fb5b 	bl	8000d54 <Error_Handler>
	}
}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	b01d      	add	sp, #116	; 0x74
 80006a4:	bd90      	pop	{r4, r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	40007000 	.word	0x40007000
 80006ac:	ffffe7ff 	.word	0xffffe7ff

080006b0 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80006b4:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <_ZL19MX_USART2_UART_Initv+0x70>)
 80006b6:	4a1b      	ldr	r2, [pc, #108]	; (8000724 <_ZL19MX_USART2_UART_Initv+0x74>)
 80006b8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <_ZL19MX_USART2_UART_Initv+0x70>)
 80006bc:	22e1      	movs	r2, #225	; 0xe1
 80006be:	0252      	lsls	r2, r2, #9
 80006c0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <_ZL19MX_USART2_UART_Initv+0x70>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <_ZL19MX_USART2_UART_Initv+0x70>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <_ZL19MX_USART2_UART_Initv+0x70>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <_ZL19MX_USART2_UART_Initv+0x70>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <_ZL19MX_USART2_UART_Initv+0x70>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <_ZL19MX_USART2_UART_Initv+0x70>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <_ZL19MX_USART2_UART_Initv+0x70>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <_ZL19MX_USART2_UART_Initv+0x70>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <_ZL19MX_USART2_UART_Initv+0x70>)
 80006f4:	0018      	movs	r0, r3
 80006f6:	f001 febf 	bl	8002478 <HAL_UART_Init>
 80006fa:	0003      	movs	r3, r0
 80006fc:	1e5a      	subs	r2, r3, #1
 80006fe:	4193      	sbcs	r3, r2
 8000700:	b2db      	uxtb	r3, r3
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <_ZL19MX_USART2_UART_Initv+0x5a>
		Error_Handler();
 8000706:	f000 fb25 	bl	8000d54 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	201c      	movs	r0, #28
 8000710:	f000 fcf4 	bl	80010fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000714:	201c      	movs	r0, #28
 8000716:	f000 fd06 	bl	8001126 <HAL_NVIC_EnableIRQ>
	/* USER CODE END USART2_Init 2 */

}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	2000002c 	.word	0x2000002c
 8000724:	40004400 	.word	0x40004400

08000728 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b089      	sub	sp, #36	; 0x24
 800072c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800072e:	240c      	movs	r4, #12
 8000730:	193b      	adds	r3, r7, r4
 8000732:	0018      	movs	r0, r3
 8000734:	2314      	movs	r3, #20
 8000736:	001a      	movs	r2, r3
 8000738:	2100      	movs	r1, #0
 800073a:	f003 f860 	bl	80037fe <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <_ZL12MX_GPIO_Initv+0x80>)
 8000740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <_ZL12MX_GPIO_Initv+0x80>)
 8000744:	2102      	movs	r1, #2
 8000746:	430a      	orrs	r2, r1
 8000748:	62da      	str	r2, [r3, #44]	; 0x2c
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <_ZL12MX_GPIO_Initv+0x80>)
 800074c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800074e:	2202      	movs	r2, #2
 8000750:	4013      	ands	r3, r2
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <_ZL12MX_GPIO_Initv+0x80>)
 8000758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <_ZL12MX_GPIO_Initv+0x80>)
 800075c:	2101      	movs	r1, #1
 800075e:	430a      	orrs	r2, r1
 8000760:	62da      	str	r2, [r3, #44]	; 0x2c
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <_ZL12MX_GPIO_Initv+0x80>)
 8000764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000766:	2201      	movs	r2, #1
 8000768:	4013      	ands	r3, r2
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7,
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <_ZL12MX_GPIO_Initv+0x84>)
 8000770:	2200      	movs	r2, #0
 8000772:	21e0      	movs	r1, #224	; 0xe0
 8000774:	0018      	movs	r0, r3
 8000776:	f000 fef9 	bl	800156c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PB5 PB6 PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 800077a:	0021      	movs	r1, r4
 800077c:	187b      	adds	r3, r7, r1
 800077e:	22e0      	movs	r2, #224	; 0xe0
 8000780:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2201      	movs	r2, #1
 8000786:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2200      	movs	r2, #0
 8000792:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000794:	187b      	adds	r3, r7, r1
 8000796:	4a05      	ldr	r2, [pc, #20]	; (80007ac <_ZL12MX_GPIO_Initv+0x84>)
 8000798:	0019      	movs	r1, r3
 800079a:	0010      	movs	r0, r2
 800079c:	f000 fd68 	bl	8001270 <HAL_GPIO_Init>

}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b009      	add	sp, #36	; 0x24
 80007a6:	bd90      	pop	{r4, r7, pc}
 80007a8:	40021000 	.word	0x40021000
 80007ac:	50000400 	.word	0x50000400

080007b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	UartReady = SET;
 80007b8:	4b03      	ldr	r3, [pc, #12]	; (80007c8 <HAL_UART_RxCpltCallback+0x18>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	701a      	strb	r2, [r3, #0]
}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b002      	add	sp, #8
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	20000000 	.word	0x20000000

080007cc <_Z11sendCommandPhi>:

/* USER CODE BEGIN 4 */
void sendCommand(unsigned char *cmd, int len) {
 80007cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ce:	46c6      	mov	lr, r8
 80007d0:	b500      	push	{lr}
 80007d2:	b08c      	sub	sp, #48	; 0x30
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	61f8      	str	r0, [r7, #28]
 80007d8:	61b9      	str	r1, [r7, #24]
	memcpy(tx + 1, cmd, len);
	tx[len + 1] = crc;
	tx[len + 2] = _xt_stop;

	HAL_UART_Transmit(&huart2, (uint8_t*) tx, len + 3, HAL_MAX_DELAY);
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80007da:	466a      	mov	r2, sp
 80007dc:	607a      	str	r2, [r7, #4]
	char crc = _xt_start;
 80007de:	2213      	movs	r2, #19
 80007e0:	2118      	movs	r1, #24
 80007e2:	468c      	mov	ip, r1
 80007e4:	44bc      	add	ip, r7
 80007e6:	4462      	add	r2, ip
 80007e8:	217d      	movs	r1, #125	; 0x7d
 80007ea:	7011      	strb	r1, [r2, #0]
	for (int i = 0; i < len; i++)
 80007ec:	2200      	movs	r2, #0
 80007ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80007f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80007f2:	69ba      	ldr	r2, [r7, #24]
 80007f4:	4291      	cmp	r1, r2
 80007f6:	da14      	bge.n	8000822 <_Z11sendCommandPhi+0x56>
		crc ^= cmd[i];
 80007f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007fa:	69f9      	ldr	r1, [r7, #28]
 80007fc:	188a      	adds	r2, r1, r2
 80007fe:	7810      	ldrb	r0, [r2, #0]
 8000800:	2113      	movs	r1, #19
 8000802:	2218      	movs	r2, #24
 8000804:	18ba      	adds	r2, r7, r2
 8000806:	4690      	mov	r8, r2
 8000808:	4488      	add	r8, r1
 800080a:	2218      	movs	r2, #24
 800080c:	4694      	mov	ip, r2
 800080e:	44bc      	add	ip, r7
 8000810:	4461      	add	r1, ip
 8000812:	7809      	ldrb	r1, [r1, #0]
 8000814:	4041      	eors	r1, r0
 8000816:	4642      	mov	r2, r8
 8000818:	7011      	strb	r1, [r2, #0]
	for (int i = 0; i < len; i++)
 800081a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800081c:	3201      	adds	r2, #1
 800081e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000820:	e7e6      	b.n	80007f0 <_Z11sendCommandPhi+0x24>
	unsigned char tx[len + 3];
 8000822:	69ba      	ldr	r2, [r7, #24]
 8000824:	3202      	adds	r2, #2
 8000826:	627a      	str	r2, [r7, #36]	; 0x24
 8000828:	0011      	movs	r1, r2
 800082a:	3101      	adds	r1, #1
 800082c:	6139      	str	r1, [r7, #16]
 800082e:	2100      	movs	r1, #0
 8000830:	6179      	str	r1, [r7, #20]
 8000832:	6939      	ldr	r1, [r7, #16]
 8000834:	0f49      	lsrs	r1, r1, #29
 8000836:	6978      	ldr	r0, [r7, #20]
 8000838:	00c6      	lsls	r6, r0, #3
 800083a:	430e      	orrs	r6, r1
 800083c:	6939      	ldr	r1, [r7, #16]
 800083e:	00cd      	lsls	r5, r1, #3
 8000840:	0011      	movs	r1, r2
 8000842:	3101      	adds	r1, #1
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	2100      	movs	r1, #0
 8000848:	60f9      	str	r1, [r7, #12]
 800084a:	68bd      	ldr	r5, [r7, #8]
 800084c:	68fe      	ldr	r6, [r7, #12]
 800084e:	0029      	movs	r1, r5
 8000850:	0f49      	lsrs	r1, r1, #29
 8000852:	0030      	movs	r0, r6
 8000854:	00c4      	lsls	r4, r0, #3
 8000856:	430c      	orrs	r4, r1
 8000858:	0029      	movs	r1, r5
 800085a:	00cb      	lsls	r3, r1, #3
 800085c:	0013      	movs	r3, r2
 800085e:	3301      	adds	r3, #1
 8000860:	3307      	adds	r3, #7
 8000862:	08db      	lsrs	r3, r3, #3
 8000864:	00db      	lsls	r3, r3, #3
 8000866:	466a      	mov	r2, sp
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	469d      	mov	sp, r3
 800086c:	466b      	mov	r3, sp
 800086e:	3300      	adds	r3, #0
 8000870:	623b      	str	r3, [r7, #32]
	tx[0] = _xt_start;
 8000872:	6a3b      	ldr	r3, [r7, #32]
 8000874:	227d      	movs	r2, #125	; 0x7d
 8000876:	701a      	strb	r2, [r3, #0]
	memcpy(tx + 1, cmd, len);
 8000878:	6a3b      	ldr	r3, [r7, #32]
 800087a:	3301      	adds	r3, #1
 800087c:	69ba      	ldr	r2, [r7, #24]
 800087e:	69f9      	ldr	r1, [r7, #28]
 8000880:	0018      	movs	r0, r3
 8000882:	f002 ffb3 	bl	80037ec <memcpy>
	tx[len + 1] = crc;
 8000886:	69bb      	ldr	r3, [r7, #24]
 8000888:	3301      	adds	r3, #1
 800088a:	6a3a      	ldr	r2, [r7, #32]
 800088c:	2113      	movs	r1, #19
 800088e:	2018      	movs	r0, #24
 8000890:	4684      	mov	ip, r0
 8000892:	44bc      	add	ip, r7
 8000894:	4461      	add	r1, ip
 8000896:	7809      	ldrb	r1, [r1, #0]
 8000898:	54d1      	strb	r1, [r2, r3]
	tx[len + 2] = _xt_stop;
 800089a:	69bb      	ldr	r3, [r7, #24]
 800089c:	3302      	adds	r3, #2
 800089e:	6a3a      	ldr	r2, [r7, #32]
 80008a0:	217e      	movs	r1, #126	; 0x7e
 80008a2:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit(&huart2, (uint8_t*) tx, len + 3, HAL_MAX_DELAY);
 80008a4:	6a39      	ldr	r1, [r7, #32]
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	3303      	adds	r3, #3
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	2301      	movs	r3, #1
 80008b0:	425b      	negs	r3, r3
 80008b2:	4808      	ldr	r0, [pc, #32]	; (80008d4 <_Z11sendCommandPhi+0x108>)
 80008b4:	f001 fe34 	bl	8002520 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <_Z11sendCommandPhi+0x10c>)
 80008ba:	2120      	movs	r1, #32
 80008bc:	0018      	movs	r0, r3
 80008be:	f000 fe72 	bl	80015a6 <HAL_GPIO_TogglePin>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	469d      	mov	sp, r3

}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b00c      	add	sp, #48	; 0x30
 80008cc:	bc04      	pop	{r2}
 80008ce:	4690      	mov	r8, r2
 80008d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	2000002c 	.word	0x2000002c
 80008d8:	50000400 	.word	0x50000400

080008dc <_Z11receiveDatai>:

int receiveData(int lengthDataReceive) {
 80008dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008de:	46c6      	mov	lr, r8
 80008e0:	b500      	push	{lr}
 80008e2:	b08c      	sub	sp, #48	; 0x30
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6178      	str	r0, [r7, #20]
	if (crc == rxBuf[rxBuflen - 2]) {
		return rxBuflen;
	} else {

		return -1;
	}
 80008e8:	4668      	mov	r0, sp
 80008ea:	0004      	movs	r4, r0
	int rxBuflen = 0;
 80008ec:	2000      	movs	r0, #0
 80008ee:	62b8      	str	r0, [r7, #40]	; 0x28
	int rxlen = 0;
 80008f0:	2000      	movs	r0, #0
 80008f2:	62f8      	str	r0, [r7, #44]	; 0x2c
	unsigned char rx[lengthDataReceive];
 80008f4:	6978      	ldr	r0, [r7, #20]
 80008f6:	3801      	subs	r0, #1
 80008f8:	61f8      	str	r0, [r7, #28]
 80008fa:	4684      	mov	ip, r0
 80008fc:	2301      	movs	r3, #1
 80008fe:	4698      	mov	r8, r3
 8000900:	44c4      	add	ip, r8
 8000902:	4663      	mov	r3, ip
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	0f5b      	lsrs	r3, r3, #29
 800090e:	469c      	mov	ip, r3
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	00da      	lsls	r2, r3, #3
 8000914:	4663      	mov	r3, ip
 8000916:	431a      	orrs	r2, r3
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	00d9      	lsls	r1, r3, #3
 800091c:	0002      	movs	r2, r0
 800091e:	3201      	adds	r2, #1
 8000920:	0015      	movs	r5, r2
 8000922:	2200      	movs	r2, #0
 8000924:	0016      	movs	r6, r2
 8000926:	0f6a      	lsrs	r2, r5, #29
 8000928:	00f3      	lsls	r3, r6, #3
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4313      	orrs	r3, r2
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	00eb      	lsls	r3, r5, #3
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	0003      	movs	r3, r0
 8000938:	3301      	adds	r3, #1
 800093a:	3307      	adds	r3, #7
 800093c:	08db      	lsrs	r3, r3, #3
 800093e:	00db      	lsls	r3, r3, #3
 8000940:	466a      	mov	r2, sp
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	469d      	mov	sp, r3
 8000946:	466b      	mov	r3, sp
 8000948:	3300      	adds	r3, #0
 800094a:	61bb      	str	r3, [r7, #24]
	if(UartReady == SET) {
 800094c:	4b60      	ldr	r3, [pc, #384]	; (8000ad0 <_Z11receiveDatai+0x1f4>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	3b01      	subs	r3, #1
 8000954:	425a      	negs	r2, r3
 8000956:	4153      	adcs	r3, r2
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b00      	cmp	r3, #0
 800095c:	d009      	beq.n	8000972 <_Z11receiveDatai+0x96>
	    UartReady = RESET;
 800095e:	4b5c      	ldr	r3, [pc, #368]	; (8000ad0 <_Z11receiveDatai+0x1f4>)
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
	    HAL_UART_Receive_IT(&huart2, (uint8_t*) rx, lengthDataReceive);
 8000964:	69b9      	ldr	r1, [r7, #24]
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	b29a      	uxth	r2, r3
 800096a:	4b5a      	ldr	r3, [pc, #360]	; (8000ad4 <_Z11receiveDatai+0x1f8>)
 800096c:	0018      	movs	r0, r3
 800096e:	f001 fe7f 	bl	8002670 <HAL_UART_Receive_IT>
	while(UartReady == RESET);
 8000972:	4b57      	ldr	r3, [pc, #348]	; (8000ad0 <_Z11receiveDatai+0x1f4>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	b2db      	uxtb	r3, r3
 8000978:	425a      	negs	r2, r3
 800097a:	4153      	adcs	r3, r2
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2b00      	cmp	r3, #0
 8000980:	d000      	beq.n	8000984 <_Z11receiveDatai+0xa8>
 8000982:	e7f6      	b.n	8000972 <_Z11receiveDatai+0x96>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000984:	4b54      	ldr	r3, [pc, #336]	; (8000ad8 <_Z11receiveDatai+0x1fc>)
 8000986:	2120      	movs	r1, #32
 8000988:	0018      	movs	r0, r3
 800098a:	f000 fe0c 	bl	80015a6 <HAL_GPIO_TogglePin>
		if (rx[rxlen] == _xt_escape) {
 800098e:	69ba      	ldr	r2, [r7, #24]
 8000990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000992:	18d3      	adds	r3, r2, r3
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b7f      	cmp	r3, #127	; 0x7f
 8000998:	d109      	bne.n	80009ae <_Z11receiveDatai+0xd2>
			if (rxlen >= lengthDataReceive)
 800099a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	429a      	cmp	r2, r3
 80009a0:	db02      	blt.n	80009a8 <_Z11receiveDatai+0xcc>
				return -1;
 80009a2:	2301      	movs	r3, #1
 80009a4:	425b      	negs	r3, r3
 80009a6:	e08b      	b.n	8000ac0 <_Z11receiveDatai+0x1e4>
				rxlen++;
 80009a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009aa:	3301      	adds	r3, #1
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rx[rxlen] == _xt_start) {
 80009ae:	69ba      	ldr	r2, [r7, #24]
 80009b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009b2:	18d3      	adds	r3, r2, r3
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b7d      	cmp	r3, #125	; 0x7d
 80009b8:	d1e9      	bne.n	800098e <_Z11receiveDatai+0xb2>
			rxBuf[rxBuflen++] = rx[rxlen++];
 80009ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009bc:	1c53      	adds	r3, r2, #1
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c2:	1c59      	adds	r1, r3, #1
 80009c4:	62b9      	str	r1, [r7, #40]	; 0x28
 80009c6:	69b9      	ldr	r1, [r7, #24]
 80009c8:	5c89      	ldrb	r1, [r1, r2]
 80009ca:	4a44      	ldr	r2, [pc, #272]	; (8000adc <_Z11receiveDatai+0x200>)
 80009cc:	54d1      	strb	r1, [r2, r3]
		if (rxBuflen >= RX_BUF_LENGTH || rxlen >= lengthDataReceive)
 80009ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d0:	2b3f      	cmp	r3, #63	; 0x3f
 80009d2:	dc03      	bgt.n	80009dc <_Z11receiveDatai+0x100>
 80009d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	429a      	cmp	r2, r3
 80009da:	db02      	blt.n	80009e2 <_Z11receiveDatai+0x106>
			return -1;
 80009dc:	2301      	movs	r3, #1
 80009de:	425b      	negs	r3, r3
 80009e0:	e06e      	b.n	8000ac0 <_Z11receiveDatai+0x1e4>
		if (rx[rxlen] == _xt_escape) {
 80009e2:	69ba      	ldr	r2, [r7, #24]
 80009e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009e6:	18d3      	adds	r3, r2, r3
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b7f      	cmp	r3, #127	; 0x7f
 80009ec:	d109      	bne.n	8000a02 <_Z11receiveDatai+0x126>
			if (rxlen >= lengthDataReceive)
 80009ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	db02      	blt.n	80009fc <_Z11receiveDatai+0x120>
				return -1;
 80009f6:	2301      	movs	r3, #1
 80009f8:	425b      	negs	r3, r3
 80009fa:	e061      	b.n	8000ac0 <_Z11receiveDatai+0x1e4>
				rxlen++;
 80009fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fe:	3301      	adds	r3, #1
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rx[rxlen] == _xt_start) {
 8000a02:	69ba      	ldr	r2, [r7, #24]
 8000a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a06:	18d3      	adds	r3, r2, r3
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b7d      	cmp	r3, #125	; 0x7d
 8000a0c:	d10b      	bne.n	8000a26 <_Z11receiveDatai+0x14a>
			rxBuflen = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
			rxBuf[rxBuflen++] = rx[rxlen++];
 8000a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a14:	1c53      	adds	r3, r2, #1
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a1a:	1c59      	adds	r1, r3, #1
 8000a1c:	62b9      	str	r1, [r7, #40]	; 0x28
 8000a1e:	69b9      	ldr	r1, [r7, #24]
 8000a20:	5c89      	ldrb	r1, [r1, r2]
 8000a22:	4a2e      	ldr	r2, [pc, #184]	; (8000adc <_Z11receiveDatai+0x200>)
 8000a24:	54d1      	strb	r1, [r2, r3]
		if (rx[rxlen] == _xt_stop) {
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a2a:	18d3      	adds	r3, r2, r3
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b7e      	cmp	r3, #126	; 0x7e
 8000a30:	d113      	bne.n	8000a5a <_Z11receiveDatai+0x17e>
			rxBuf[rxBuflen++] = rx[rxlen];
 8000a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a34:	1c5a      	adds	r2, r3, #1
 8000a36:	62ba      	str	r2, [r7, #40]	; 0x28
 8000a38:	69b9      	ldr	r1, [r7, #24]
 8000a3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a3c:	188a      	adds	r2, r1, r2
 8000a3e:	7811      	ldrb	r1, [r2, #0]
 8000a40:	4a26      	ldr	r2, [pc, #152]	; (8000adc <_Z11receiveDatai+0x200>)
 8000a42:	54d1      	strb	r1, [r2, r3]
			break;
 8000a44:	46c0      	nop			; (mov r8, r8)
	char crc = 0;
 8000a46:	2317      	movs	r3, #23
 8000a48:	2210      	movs	r2, #16
 8000a4a:	4694      	mov	ip, r2
 8000a4c:	44bc      	add	ip, r7
 8000a4e:	4463      	add	r3, ip
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < rxBuflen - 2; i++)
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]
 8000a58:	e00a      	b.n	8000a70 <_Z11receiveDatai+0x194>
		rxBuf[rxBuflen++] = rx[rxlen++];
 8000a5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a5c:	1c53      	adds	r3, r2, #1
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a62:	1c59      	adds	r1, r3, #1
 8000a64:	62b9      	str	r1, [r7, #40]	; 0x28
 8000a66:	69b9      	ldr	r1, [r7, #24]
 8000a68:	5c89      	ldrb	r1, [r1, r2]
 8000a6a:	4a1c      	ldr	r2, [pc, #112]	; (8000adc <_Z11receiveDatai+0x200>)
 8000a6c:	54d1      	strb	r1, [r2, r3]
		if (rxBuflen >= RX_BUF_LENGTH || rxlen >= lengthDataReceive)
 8000a6e:	e7ae      	b.n	80009ce <_Z11receiveDatai+0xf2>
	for (int i = 0; i < rxBuflen - 2; i++)
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	3b02      	subs	r3, #2
 8000a74:	6a3a      	ldr	r2, [r7, #32]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	da12      	bge.n	8000aa0 <_Z11receiveDatai+0x1c4>
		crc ^= rxBuf[i];
 8000a7a:	4a18      	ldr	r2, [pc, #96]	; (8000adc <_Z11receiveDatai+0x200>)
 8000a7c:	6a3b      	ldr	r3, [r7, #32]
 8000a7e:	18d3      	adds	r3, r2, r3
 8000a80:	7819      	ldrb	r1, [r3, #0]
 8000a82:	2217      	movs	r2, #23
 8000a84:	2310      	movs	r3, #16
 8000a86:	18fb      	adds	r3, r7, r3
 8000a88:	189b      	adds	r3, r3, r2
 8000a8a:	2010      	movs	r0, #16
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	44bc      	add	ip, r7
 8000a90:	4462      	add	r2, ip
 8000a92:	7812      	ldrb	r2, [r2, #0]
 8000a94:	404a      	eors	r2, r1
 8000a96:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < rxBuflen - 2; i++)
 8000a98:	6a3b      	ldr	r3, [r7, #32]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	623b      	str	r3, [r7, #32]
 8000a9e:	e7e7      	b.n	8000a70 <_Z11receiveDatai+0x194>
	if (crc == rxBuf[rxBuflen - 2]) {
 8000aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa2:	3b02      	subs	r3, #2
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	; (8000adc <_Z11receiveDatai+0x200>)
 8000aa6:	5cd3      	ldrb	r3, [r2, r3]
 8000aa8:	2217      	movs	r2, #23
 8000aaa:	2110      	movs	r1, #16
 8000aac:	468c      	mov	ip, r1
 8000aae:	44bc      	add	ip, r7
 8000ab0:	4462      	add	r2, ip
 8000ab2:	7812      	ldrb	r2, [r2, #0]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d101      	bne.n	8000abc <_Z11receiveDatai+0x1e0>
		return rxBuflen;
 8000ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aba:	e001      	b.n	8000ac0 <_Z11receiveDatai+0x1e4>
		return -1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	425b      	negs	r3, r3
 8000ac0:	0022      	movs	r2, r4
 8000ac2:	4695      	mov	sp, r2
}
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b00c      	add	sp, #48	; 0x30
 8000aca:	bc04      	pop	{r2}
 8000acc:	4690      	mov	r8, r2
 8000ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	2000002c 	.word	0x2000002c
 8000ad8:	50000400 	.word	0x50000400
 8000adc:	200000b0 	.word	0x200000b0

08000ae0 <_Z10receiveAckv>:

void receiveAck() {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	while (true) {
		receiveData(4);
 8000ae4:	2004      	movs	r0, #4
 8000ae6:	f7ff fef9 	bl	80008dc <_Z11receiveDatai>
		if (rxBuf[1] == _xts_spr_ack || rxBuf[2] == _xts_spr_ack)
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <_Z10receiveAckv+0x24>)
 8000aec:	785b      	ldrb	r3, [r3, #1]
 8000aee:	2b10      	cmp	r3, #16
 8000af0:	d004      	beq.n	8000afc <_Z10receiveAckv+0x1c>
 8000af2:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <_Z10receiveAckv+0x24>)
 8000af4:	789b      	ldrb	r3, [r3, #2]
 8000af6:	2b10      	cmp	r3, #16
 8000af8:	d000      	beq.n	8000afc <_Z10receiveAckv+0x1c>
		receiveData(4);
 8000afa:	e7f3      	b.n	8000ae4 <_Z10receiveAckv+0x4>
			return;
 8000afc:	46c0      	nop			; (mov r8, r8)
	}
}
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	200000b0 	.word	0x200000b0

08000b08 <_Z10stopModulev>:
void stopModule() {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	txBuf[0] = _xts_spc_mod_setmode;
 8000b0c:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <_Z10stopModulev+0x24>)
 8000b0e:	2220      	movs	r2, #32
 8000b10:	701a      	strb	r2, [r3, #0]
	txBuf[1] = _xts_sm_stop;
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <_Z10stopModulev+0x24>)
 8000b14:	2213      	movs	r2, #19
 8000b16:	705a      	strb	r2, [r3, #1]

	sendCommand(txBuf, 2);
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <_Z10stopModulev+0x24>)
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f7ff fe55 	bl	80007cc <_Z11sendCommandPhi>
	receiveAck();
 8000b22:	f7ff ffdd 	bl	8000ae0 <_Z10receiveAckv>

}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200000f0 	.word	0x200000f0

08000b30 <_Z11resetModulev>:

void resetModule() {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	txBuf[0] = _xts_spc_mod_reset;
 8000b34:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <_Z11resetModulev+0x48>)
 8000b36:	2222      	movs	r2, #34	; 0x22
 8000b38:	701a      	strb	r2, [r3, #0]
	sendCommand(txBuf, 1);
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <_Z11resetModulev+0x48>)
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f7ff fe44 	bl	80007cc <_Z11sendCommandPhi>
	receiveAck();
 8000b44:	f7ff ffcc 	bl	8000ae0 <_Z10receiveAckv>
	while (true)
		if (receiveData(8) > 0 && rxBuf[1] == _xts_spr_system
 8000b48:	2008      	movs	r0, #8
 8000b4a:	f7ff fec7 	bl	80008dc <_Z11receiveDatai>
 8000b4e:	1e03      	subs	r3, r0, #0
				&& rxBuf[2] == _xts_sprs_ready)
 8000b50:	dd09      	ble.n	8000b66 <_Z11resetModulev+0x36>
		if (receiveData(8) > 0 && rxBuf[1] == _xts_spr_system
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <_Z11resetModulev+0x4c>)
 8000b54:	785b      	ldrb	r3, [r3, #1]
 8000b56:	2b30      	cmp	r3, #48	; 0x30
 8000b58:	d105      	bne.n	8000b66 <_Z11resetModulev+0x36>
				&& rxBuf[2] == _xts_sprs_ready)
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <_Z11resetModulev+0x4c>)
 8000b5c:	789b      	ldrb	r3, [r3, #2]
 8000b5e:	2b11      	cmp	r3, #17
 8000b60:	d101      	bne.n	8000b66 <_Z11resetModulev+0x36>
 8000b62:	2301      	movs	r3, #1
 8000b64:	e000      	b.n	8000b68 <_Z11resetModulev+0x38>
 8000b66:	2300      	movs	r3, #0
		if (receiveData(8) > 0 && rxBuf[1] == _xts_spr_system
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d100      	bne.n	8000b6e <_Z11resetModulev+0x3e>
 8000b6c:	e7ec      	b.n	8000b48 <_Z11resetModulev+0x18>
			break;
 8000b6e:	46c0      	nop			; (mov r8, r8)
}
 8000b70:	46c0      	nop			; (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	200000f0 	.word	0x200000f0
 8000b7c:	200000b0 	.word	0x200000b0

08000b80 <_Z18loadRespirationAppv>:

void loadRespirationApp() {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
	txBuf[0] = _xts_spc_mod_loadapp;
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <_Z18loadRespirationAppv+0x2c>)
 8000b86:	2221      	movs	r2, #33	; 0x21
 8000b88:	701a      	strb	r2, [r3, #0]
	memcpy(txBuf + 1, &_xts_id_app_resp_adult, 4);
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <_Z18loadRespirationAppv+0x30>)
 8000b8c:	4909      	ldr	r1, [pc, #36]	; (8000bb4 <_Z18loadRespirationAppv+0x34>)
 8000b8e:	2204      	movs	r2, #4
 8000b90:	0018      	movs	r0, r3
 8000b92:	f002 fe2b 	bl	80037ec <memcpy>
	sendCommand(txBuf, 5);
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <_Z18loadRespirationAppv+0x2c>)
 8000b98:	2105      	movs	r1, #5
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f7ff fe16 	bl	80007cc <_Z11sendCommandPhi>
	receiveAck();
 8000ba0:	f7ff ff9e 	bl	8000ae0 <_Z10receiveAckv>
}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	200000f0 	.word	0x200000f0
 8000bb0:	200000f1 	.word	0x200000f1
 8000bb4:	08003828 	.word	0x08003828

08000bb8 <_Z17configureNoiseMapv>:

void configureNoiseMap() {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	txBuf[0] = _xts_spc_mod_noisemap;
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <_Z17configureNoiseMapv+0x3c>)
 8000bbe:	2225      	movs	r2, #37	; 0x25
 8000bc0:	701a      	strb	r2, [r3, #0]
	txBuf[1] = _xts_spcn_setcontrol;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <_Z17configureNoiseMapv+0x3c>)
 8000bc4:	2210      	movs	r2, #16
 8000bc6:	705a      	strb	r2, [r3, #1]
	txBuf[2] = 0x06; // 0x06: Use default noisemap and adaptive noisemap
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <_Z17configureNoiseMapv+0x3c>)
 8000bca:	2206      	movs	r2, #6
 8000bcc:	709a      	strb	r2, [r3, #2]
	txBuf[3] = 0x00;
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <_Z17configureNoiseMapv+0x3c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	70da      	strb	r2, [r3, #3]
	txBuf[4] = 0x00;
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <_Z17configureNoiseMapv+0x3c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	711a      	strb	r2, [r3, #4]
	txBuf[5] = 0x00;
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <_Z17configureNoiseMapv+0x3c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	715a      	strb	r2, [r3, #5]
	sendCommand(txBuf, 6);
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <_Z17configureNoiseMapv+0x3c>)
 8000be2:	2106      	movs	r1, #6
 8000be4:	0018      	movs	r0, r3
 8000be6:	f7ff fdf1 	bl	80007cc <_Z11sendCommandPhi>
	receiveAck();
 8000bea:	f7ff ff79 	bl	8000ae0 <_Z10receiveAckv>
}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	200000f0 	.word	0x200000f0

08000bf8 <_Z10setSensityi>:

void setSensity(int sensitivity) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	txBuf[0] = _xts_spc_appcommand;
 8000c00:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <_Z10setSensityi+0x44>)
 8000c02:	2210      	movs	r2, #16
 8000c04:	701a      	strb	r2, [r3, #0]
	txBuf[1] = _xts_spca_set;
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <_Z10setSensityi+0x44>)
 8000c08:	2210      	movs	r2, #16
 8000c0a:	705a      	strb	r2, [r3, #1]
	memcpy(txBuf + 2, &_xts_id_sensitivity, 4);
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <_Z10setSensityi+0x48>)
 8000c0e:	490d      	ldr	r1, [pc, #52]	; (8000c44 <_Z10setSensityi+0x4c>)
 8000c10:	2204      	movs	r2, #4
 8000c12:	0018      	movs	r0, r3
 8000c14:	f002 fdea 	bl	80037ec <memcpy>
	memcpy(txBuf + 6, &sensitivity, 4);
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <_Z10setSensityi+0x50>)
 8000c1a:	1d39      	adds	r1, r7, #4
 8000c1c:	2204      	movs	r2, #4
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f002 fde4 	bl	80037ec <memcpy>
	sendCommand(txBuf, 10);
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <_Z10setSensityi+0x44>)
 8000c26:	210a      	movs	r1, #10
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f7ff fdcf 	bl	80007cc <_Z11sendCommandPhi>
	receiveAck();
 8000c2e:	f7ff ff57 	bl	8000ae0 <_Z10receiveAckv>
}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b002      	add	sp, #8
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	200000f0 	.word	0x200000f0
 8000c40:	200000f2 	.word	0x200000f2
 8000c44:	08003830 	.word	0x08003830
 8000c48:	200000f6 	.word	0x200000f6

08000c4c <_Z16setDetectionZoneff>:

void setDetectionZone(float start_zone, float end_zone) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
	txBuf[0] = _xts_spc_appcommand;
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <_Z16setDetectionZoneff+0x50>)
 8000c58:	2210      	movs	r2, #16
 8000c5a:	701a      	strb	r2, [r3, #0]
	txBuf[1] = _xts_spca_set;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <_Z16setDetectionZoneff+0x50>)
 8000c5e:	2210      	movs	r2, #16
 8000c60:	705a      	strb	r2, [r3, #1]

	memcpy(txBuf + 2, &_xts_id_detection_zone, 4);
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <_Z16setDetectionZoneff+0x54>)
 8000c64:	490f      	ldr	r1, [pc, #60]	; (8000ca4 <_Z16setDetectionZoneff+0x58>)
 8000c66:	2204      	movs	r2, #4
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f002 fdbf 	bl	80037ec <memcpy>
	memcpy(txBuf + 6, &start_zone, 4);
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <_Z16setDetectionZoneff+0x5c>)
 8000c70:	1d39      	adds	r1, r7, #4
 8000c72:	2204      	movs	r2, #4
 8000c74:	0018      	movs	r0, r3
 8000c76:	f002 fdb9 	bl	80037ec <memcpy>
	memcpy(txBuf + 10, &end_zone, 4);
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <_Z16setDetectionZoneff+0x60>)
 8000c7c:	0039      	movs	r1, r7
 8000c7e:	2204      	movs	r2, #4
 8000c80:	0018      	movs	r0, r3
 8000c82:	f002 fdb3 	bl	80037ec <memcpy>

	sendCommand(txBuf, 14);
 8000c86:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <_Z16setDetectionZoneff+0x50>)
 8000c88:	210e      	movs	r1, #14
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f7ff fd9e 	bl	80007cc <_Z11sendCommandPhi>
	receiveAck();
 8000c90:	f7ff ff26 	bl	8000ae0 <_Z10receiveAckv>
}
 8000c94:	46c0      	nop			; (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b002      	add	sp, #8
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	200000f0 	.word	0x200000f0
 8000ca0:	200000f2 	.word	0x200000f2
 8000ca4:	0800382c 	.word	0x0800382c
 8000ca8:	200000f6 	.word	0x200000f6
 8000cac:	200000fa 	.word	0x200000fa

08000cb0 <_Z10executeAppv>:

void executeApp() {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	txBuf[0] = _xts_spc_mod_setmode;
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <_Z10executeAppv+0x24>)
 8000cb6:	2220      	movs	r2, #32
 8000cb8:	701a      	strb	r2, [r3, #0]
	txBuf[1] = _xts_sm_run;
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <_Z10executeAppv+0x24>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	705a      	strb	r2, [r3, #1]

	sendCommand(txBuf, 2);
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <_Z10executeAppv+0x24>)
 8000cc2:	2102      	movs	r1, #2
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f7ff fd81 	bl	80007cc <_Z11sendCommandPhi>
	receiveAck();
 8000cca:	f7ff ff09 	bl	8000ae0 <_Z10receiveAckv>
}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	200000f0 	.word	0x200000f0

08000cd8 <_Z18getRespirationDatav>:

RespirationData getRespirationData() {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	RespirationData data;
	int receiveLenght = receiveData(36);
 8000ce0:	2024      	movs	r0, #36	; 0x24
 8000ce2:	f7ff fdfb 	bl	80008dc <_Z11receiveDatai>
 8000ce6:	0003      	movs	r3, r0
 8000ce8:	60fb      	str	r3, [r7, #12]

	if (receiveLenght < 0 || rxBuf[1] != _xts_spr_appdata) {
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	db03      	blt.n	8000cf8 <_Z18getRespirationDatav+0x20>
 8000cf0:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <_Z18getRespirationDatav+0x6c>)
 8000cf2:	785b      	ldrb	r3, [r3, #1]
 8000cf4:	2b50      	cmp	r3, #80	; 0x50
 8000cf6:	d003      	beq.n	8000d00 <_Z18getRespirationDatav+0x28>
		data.valid = false;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
		return data;
 8000cfe:	e01c      	b.n	8000d3a <_Z18getRespirationDatav+0x62>
	}
	memcpy(&data.code, &rxBuf[10], 4);
 8000d00:	4911      	ldr	r1, [pc, #68]	; (8000d48 <_Z18getRespirationDatav+0x70>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	330c      	adds	r3, #12
 8000d06:	2204      	movs	r2, #4
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f002 fd6f 	bl	80037ec <memcpy>
	if (data.code == _xts_val_resp_state_breathing) {
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	7b1b      	ldrb	r3, [r3, #12]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d10d      	bne.n	8000d32 <_Z18getRespirationDatav+0x5a>
		memcpy(&data.rpm, &rxBuf[14], 4);
 8000d16:	490d      	ldr	r1, [pc, #52]	; (8000d4c <_Z18getRespirationDatav+0x74>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3308      	adds	r3, #8
 8000d1c:	2204      	movs	r2, #4
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f002 fd64 	bl	80037ec <memcpy>
		memcpy(&data.movement, &rxBuf[22], 4);
 8000d24:	490a      	ldr	r1, [pc, #40]	; (8000d50 <_Z18getRespirationDatav+0x78>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f002 fd5d 	bl	80037ec <memcpy>
	}

	data.valid = true;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2201      	movs	r2, #1
 8000d36:	701a      	strb	r2, [r3, #0]
	return data;
 8000d38:	46c0      	nop			; (mov r8, r8)

}
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b004      	add	sp, #16
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	200000b0 	.word	0x200000b0
 8000d48:	200000ba 	.word	0x200000ba
 8000d4c:	200000be 	.word	0x200000be
 8000d50:	200000c6 	.word	0x200000c6

08000d54 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d58:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d5a:	e7fe      	b.n	8000d5a <Error_Handler+0x6>

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <HAL_MspInit+0x24>)
 8000d62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_MspInit+0x24>)
 8000d66:	2101      	movs	r1, #1
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <HAL_MspInit+0x24>)
 8000d6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <HAL_MspInit+0x24>)
 8000d72:	2180      	movs	r1, #128	; 0x80
 8000d74:	0549      	lsls	r1, r1, #21
 8000d76:	430a      	orrs	r2, r1
 8000d78:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40021000 	.word	0x40021000

08000d84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	230c      	movs	r3, #12
 8000d8e:	18fb      	adds	r3, r7, r3
 8000d90:	0018      	movs	r0, r3
 8000d92:	2314      	movs	r3, #20
 8000d94:	001a      	movs	r2, r3
 8000d96:	2100      	movs	r1, #0
 8000d98:	f002 fd31 	bl	80037fe <memset>
  if(huart->Instance==USART2)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a1c      	ldr	r2, [pc, #112]	; (8000e14 <HAL_UART_MspInit+0x90>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d131      	bne.n	8000e0a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000da6:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <HAL_UART_MspInit+0x94>)
 8000da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000daa:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <HAL_UART_MspInit+0x94>)
 8000dac:	2180      	movs	r1, #128	; 0x80
 8000dae:	0289      	lsls	r1, r1, #10
 8000db0:	430a      	orrs	r2, r1
 8000db2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db4:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <HAL_UART_MspInit+0x94>)
 8000db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000db8:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <HAL_UART_MspInit+0x94>)
 8000dba:	2101      	movs	r1, #1
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dc0:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <HAL_UART_MspInit+0x94>)
 8000dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dcc:	210c      	movs	r1, #12
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	220c      	movs	r2, #12
 8000dd2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	2203      	movs	r2, #3
 8000de4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	2204      	movs	r2, #4
 8000dea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	187a      	adds	r2, r7, r1
 8000dee:	23a0      	movs	r3, #160	; 0xa0
 8000df0:	05db      	lsls	r3, r3, #23
 8000df2:	0011      	movs	r1, r2
 8000df4:	0018      	movs	r0, r3
 8000df6:	f000 fa3b 	bl	8001270 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	201c      	movs	r0, #28
 8000e00:	f000 f97c 	bl	80010fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e04:	201c      	movs	r0, #28
 8000e06:	f000 f98e 	bl	8001126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	b008      	add	sp, #32
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	40004400 	.word	0x40004400
 8000e18:	40021000 	.word	0x40021000

08000e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <NMI_Handler+0x4>

08000e22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <HardFault_Handler+0x4>

08000e28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e2c:	46c0      	nop			; (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e40:	f000 f894 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e44:	46c0      	nop			; (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e50:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <USART2_IRQHandler+0x14>)
 8000e52:	0018      	movs	r0, r3
 8000e54:	f001 fc64 	bl	8002720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e58:	46c0      	nop			; (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	2000002c 	.word	0x2000002c

08000e64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e68:	46c0      	nop			; (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000e70:	480d      	ldr	r0, [pc, #52]	; (8000ea8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000e72:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e74:	480d      	ldr	r0, [pc, #52]	; (8000eac <LoopForever+0x6>)
  ldr r1, =_edata
 8000e76:	490e      	ldr	r1, [pc, #56]	; (8000eb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e78:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <LoopForever+0xe>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e7c:	e002      	b.n	8000e84 <LoopCopyDataInit>

08000e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e82:	3304      	adds	r3, #4

08000e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e88:	d3f9      	bcc.n	8000e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e8c:	4c0b      	ldr	r4, [pc, #44]	; (8000ebc <LoopForever+0x16>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e90:	e001      	b.n	8000e96 <LoopFillZerobss>

08000e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e94:	3204      	adds	r2, #4

08000e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e98:	d3fb      	bcc.n	8000e92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e9a:	f7ff ffe3 	bl	8000e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f002 fc81 	bl	80037a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea2:	f7ff faf3 	bl	800048c <main>

08000ea6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ea6:	e7fe      	b.n	8000ea6 <LoopForever>
   ldr   r0, =_estack
 8000ea8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000eb4:	080038b0 	.word	0x080038b0
  ldr r2, =_sbss
 8000eb8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ebc:	20000134 	.word	0x20000134

08000ec0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC1_COMP_IRQHandler>
	...

08000ec4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eca:	1dfb      	adds	r3, r7, #7
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <HAL_Init+0x3c>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <HAL_Init+0x3c>)
 8000ed6:	2140      	movs	r1, #64	; 0x40
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000edc:	2000      	movs	r0, #0
 8000ede:	f000 f811 	bl	8000f04 <HAL_InitTick>
 8000ee2:	1e03      	subs	r3, r0, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000ee6:	1dfb      	adds	r3, r7, #7
 8000ee8:	2201      	movs	r2, #1
 8000eea:	701a      	strb	r2, [r3, #0]
 8000eec:	e001      	b.n	8000ef2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eee:	f7ff ff35 	bl	8000d5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ef2:	1dfb      	adds	r3, r7, #7
 8000ef4:	781b      	ldrb	r3, [r3, #0]
}
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b002      	add	sp, #8
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	40022000 	.word	0x40022000

08000f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f04:	b590      	push	{r4, r7, lr}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <HAL_InitTick+0x5c>)
 8000f0e:	681c      	ldr	r4, [r3, #0]
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <HAL_InitTick+0x60>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	0019      	movs	r1, r3
 8000f16:	23fa      	movs	r3, #250	; 0xfa
 8000f18:	0098      	lsls	r0, r3, #2
 8000f1a:	f7ff f8f5 	bl	8000108 <__udivsi3>
 8000f1e:	0003      	movs	r3, r0
 8000f20:	0019      	movs	r1, r3
 8000f22:	0020      	movs	r0, r4
 8000f24:	f7ff f8f0 	bl	8000108 <__udivsi3>
 8000f28:	0003      	movs	r3, r0
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f000 f90b 	bl	8001146 <HAL_SYSTICK_Config>
 8000f30:	1e03      	subs	r3, r0, #0
 8000f32:	d001      	beq.n	8000f38 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e00f      	b.n	8000f58 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d80b      	bhi.n	8000f56 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	2301      	movs	r3, #1
 8000f42:	425b      	negs	r3, r3
 8000f44:	2200      	movs	r2, #0
 8000f46:	0018      	movs	r0, r3
 8000f48:	f000 f8d8 	bl	80010fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_InitTick+0x64>)
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e000      	b.n	8000f58 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	0018      	movs	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	b003      	add	sp, #12
 8000f5e:	bd90      	pop	{r4, r7, pc}
 8000f60:	20000004 	.word	0x20000004
 8000f64:	2000000c 	.word	0x2000000c
 8000f68:	20000008 	.word	0x20000008

08000f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <HAL_IncTick+0x1c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	001a      	movs	r2, r3
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <HAL_IncTick+0x20>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	18d2      	adds	r2, r2, r3
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_IncTick+0x20>)
 8000f7e:	601a      	str	r2, [r3, #0]
}
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	2000000c 	.word	0x2000000c
 8000f8c:	20000130 	.word	0x20000130

08000f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b02      	ldr	r3, [pc, #8]	; (8000fa0 <HAL_GetTick+0x10>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	0018      	movs	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	20000130 	.word	0x20000130

08000fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	0002      	movs	r2, r0
 8000fac:	1dfb      	adds	r3, r7, #7
 8000fae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	1dfb      	adds	r3, r7, #7
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b7f      	cmp	r3, #127	; 0x7f
 8000fb6:	d809      	bhi.n	8000fcc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb8:	1dfb      	adds	r3, r7, #7
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	001a      	movs	r2, r3
 8000fbe:	231f      	movs	r3, #31
 8000fc0:	401a      	ands	r2, r3
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <__NVIC_EnableIRQ+0x30>)
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	4091      	lsls	r1, r2
 8000fc8:	000a      	movs	r2, r1
 8000fca:	601a      	str	r2, [r3, #0]
  }
}
 8000fcc:	46c0      	nop			; (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b002      	add	sp, #8
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	e000e100 	.word	0xe000e100

08000fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	0002      	movs	r2, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	1dfb      	adds	r3, r7, #7
 8000fe4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fe6:	1dfb      	adds	r3, r7, #7
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b7f      	cmp	r3, #127	; 0x7f
 8000fec:	d828      	bhi.n	8001040 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fee:	4a2f      	ldr	r2, [pc, #188]	; (80010ac <__NVIC_SetPriority+0xd4>)
 8000ff0:	1dfb      	adds	r3, r7, #7
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	089b      	lsrs	r3, r3, #2
 8000ff8:	33c0      	adds	r3, #192	; 0xc0
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	589b      	ldr	r3, [r3, r2]
 8000ffe:	1dfa      	adds	r2, r7, #7
 8001000:	7812      	ldrb	r2, [r2, #0]
 8001002:	0011      	movs	r1, r2
 8001004:	2203      	movs	r2, #3
 8001006:	400a      	ands	r2, r1
 8001008:	00d2      	lsls	r2, r2, #3
 800100a:	21ff      	movs	r1, #255	; 0xff
 800100c:	4091      	lsls	r1, r2
 800100e:	000a      	movs	r2, r1
 8001010:	43d2      	mvns	r2, r2
 8001012:	401a      	ands	r2, r3
 8001014:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	019b      	lsls	r3, r3, #6
 800101a:	22ff      	movs	r2, #255	; 0xff
 800101c:	401a      	ands	r2, r3
 800101e:	1dfb      	adds	r3, r7, #7
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	0018      	movs	r0, r3
 8001024:	2303      	movs	r3, #3
 8001026:	4003      	ands	r3, r0
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800102c:	481f      	ldr	r0, [pc, #124]	; (80010ac <__NVIC_SetPriority+0xd4>)
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b25b      	sxtb	r3, r3
 8001034:	089b      	lsrs	r3, r3, #2
 8001036:	430a      	orrs	r2, r1
 8001038:	33c0      	adds	r3, #192	; 0xc0
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800103e:	e031      	b.n	80010a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001040:	4a1b      	ldr	r2, [pc, #108]	; (80010b0 <__NVIC_SetPriority+0xd8>)
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	0019      	movs	r1, r3
 8001048:	230f      	movs	r3, #15
 800104a:	400b      	ands	r3, r1
 800104c:	3b08      	subs	r3, #8
 800104e:	089b      	lsrs	r3, r3, #2
 8001050:	3306      	adds	r3, #6
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	18d3      	adds	r3, r2, r3
 8001056:	3304      	adds	r3, #4
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	1dfa      	adds	r2, r7, #7
 800105c:	7812      	ldrb	r2, [r2, #0]
 800105e:	0011      	movs	r1, r2
 8001060:	2203      	movs	r2, #3
 8001062:	400a      	ands	r2, r1
 8001064:	00d2      	lsls	r2, r2, #3
 8001066:	21ff      	movs	r1, #255	; 0xff
 8001068:	4091      	lsls	r1, r2
 800106a:	000a      	movs	r2, r1
 800106c:	43d2      	mvns	r2, r2
 800106e:	401a      	ands	r2, r3
 8001070:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	019b      	lsls	r3, r3, #6
 8001076:	22ff      	movs	r2, #255	; 0xff
 8001078:	401a      	ands	r2, r3
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	0018      	movs	r0, r3
 8001080:	2303      	movs	r3, #3
 8001082:	4003      	ands	r3, r0
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001088:	4809      	ldr	r0, [pc, #36]	; (80010b0 <__NVIC_SetPriority+0xd8>)
 800108a:	1dfb      	adds	r3, r7, #7
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	001c      	movs	r4, r3
 8001090:	230f      	movs	r3, #15
 8001092:	4023      	ands	r3, r4
 8001094:	3b08      	subs	r3, #8
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	430a      	orrs	r2, r1
 800109a:	3306      	adds	r3, #6
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	18c3      	adds	r3, r0, r3
 80010a0:	3304      	adds	r3, #4
 80010a2:	601a      	str	r2, [r3, #0]
}
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b003      	add	sp, #12
 80010aa:	bd90      	pop	{r4, r7, pc}
 80010ac:	e000e100 	.word	0xe000e100
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	4a0c      	ldr	r2, [pc, #48]	; (80010f4 <SysTick_Config+0x40>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d901      	bls.n	80010ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c6:	2301      	movs	r3, #1
 80010c8:	e010      	b.n	80010ec <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <SysTick_Config+0x44>)
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	3a01      	subs	r2, #1
 80010d0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d2:	2301      	movs	r3, #1
 80010d4:	425b      	negs	r3, r3
 80010d6:	2103      	movs	r1, #3
 80010d8:	0018      	movs	r0, r3
 80010da:	f7ff ff7d 	bl	8000fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <SysTick_Config+0x44>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <SysTick_Config+0x44>)
 80010e6:	2207      	movs	r2, #7
 80010e8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	0018      	movs	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b002      	add	sp, #8
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	00ffffff 	.word	0x00ffffff
 80010f8:	e000e010 	.word	0xe000e010

080010fc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
 8001106:	210f      	movs	r1, #15
 8001108:	187b      	adds	r3, r7, r1
 800110a:	1c02      	adds	r2, r0, #0
 800110c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	187b      	adds	r3, r7, r1
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b25b      	sxtb	r3, r3
 8001116:	0011      	movs	r1, r2
 8001118:	0018      	movs	r0, r3
 800111a:	f7ff ff5d 	bl	8000fd8 <__NVIC_SetPriority>
}
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	46bd      	mov	sp, r7
 8001122:	b004      	add	sp, #16
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	0002      	movs	r2, r0
 800112e:	1dfb      	adds	r3, r7, #7
 8001130:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001132:	1dfb      	adds	r3, r7, #7
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	b25b      	sxtb	r3, r3
 8001138:	0018      	movs	r0, r3
 800113a:	f7ff ff33 	bl	8000fa4 <__NVIC_EnableIRQ>
}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	46bd      	mov	sp, r7
 8001142:	b002      	add	sp, #8
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	0018      	movs	r0, r3
 8001152:	f7ff ffaf 	bl	80010b4 <SysTick_Config>
 8001156:	0003      	movs	r3, r0
}
 8001158:	0018      	movs	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	b002      	add	sp, #8
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001168:	230f      	movs	r3, #15
 800116a:	18fb      	adds	r3, r7, r3
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2225      	movs	r2, #37	; 0x25
 8001174:	5c9b      	ldrb	r3, [r3, r2]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d008      	beq.n	800118e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2204      	movs	r2, #4
 8001180:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2224      	movs	r2, #36	; 0x24
 8001186:	2100      	movs	r1, #0
 8001188:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e024      	b.n	80011d8 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	210e      	movs	r1, #14
 800119a:	438a      	bics	r2, r1
 800119c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2101      	movs	r1, #1
 80011aa:	438a      	bics	r2, r1
 80011ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	221c      	movs	r2, #28
 80011b4:	401a      	ands	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	2101      	movs	r1, #1
 80011bc:	4091      	lsls	r1, r2
 80011be:	000a      	movs	r2, r1
 80011c0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2225      	movs	r2, #37	; 0x25
 80011c6:	2101      	movs	r1, #1
 80011c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2224      	movs	r2, #36	; 0x24
 80011ce:	2100      	movs	r1, #0
 80011d0:	5499      	strb	r1, [r3, r2]

    return status;
 80011d2:	230f      	movs	r3, #15
 80011d4:	18fb      	adds	r3, r7, r3
 80011d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80011d8:	0018      	movs	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	b004      	add	sp, #16
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011e8:	230f      	movs	r3, #15
 80011ea:	18fb      	adds	r3, r7, r3
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2225      	movs	r2, #37	; 0x25
 80011f4:	5c9b      	ldrb	r3, [r3, r2]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d007      	beq.n	800120c <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2204      	movs	r2, #4
 8001200:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001202:	230f      	movs	r3, #15
 8001204:	18fb      	adds	r3, r7, r3
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
 800120a:	e02a      	b.n	8001262 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	210e      	movs	r1, #14
 8001218:	438a      	bics	r2, r1
 800121a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2101      	movs	r1, #1
 8001228:	438a      	bics	r2, r1
 800122a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001230:	221c      	movs	r2, #28
 8001232:	401a      	ands	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001238:	2101      	movs	r1, #1
 800123a:	4091      	lsls	r1, r2
 800123c:	000a      	movs	r2, r1
 800123e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2225      	movs	r2, #37	; 0x25
 8001244:	2101      	movs	r1, #1
 8001246:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2224      	movs	r2, #36	; 0x24
 800124c:	2100      	movs	r1, #0
 800124e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001254:	2b00      	cmp	r3, #0
 8001256:	d004      	beq.n	8001262 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	0010      	movs	r0, r2
 8001260:	4798      	blx	r3
    }
  }
  return status;
 8001262:	230f      	movs	r3, #15
 8001264:	18fb      	adds	r3, r7, r3
 8001266:	781b      	ldrb	r3, [r3, #0]
}
 8001268:	0018      	movs	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	b004      	add	sp, #16
 800126e:	bd80      	pop	{r7, pc}

08001270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001286:	e155      	b.n	8001534 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2101      	movs	r1, #1
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	4091      	lsls	r1, r2
 8001292:	000a      	movs	r2, r1
 8001294:	4013      	ands	r3, r2
 8001296:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d100      	bne.n	80012a0 <HAL_GPIO_Init+0x30>
 800129e:	e146      	b.n	800152e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d00b      	beq.n	80012c0 <HAL_GPIO_Init+0x50>
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d007      	beq.n	80012c0 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012b4:	2b11      	cmp	r3, #17
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b12      	cmp	r3, #18
 80012be:	d130      	bne.n	8001322 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	2203      	movs	r2, #3
 80012cc:	409a      	lsls	r2, r3
 80012ce:	0013      	movs	r3, r2
 80012d0:	43da      	mvns	r2, r3
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	68da      	ldr	r2, [r3, #12]
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	409a      	lsls	r2, r3
 80012e2:	0013      	movs	r3, r2
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f6:	2201      	movs	r2, #1
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	409a      	lsls	r2, r3
 80012fc:	0013      	movs	r3, r2
 80012fe:	43da      	mvns	r2, r3
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	091b      	lsrs	r3, r3, #4
 800130c:	2201      	movs	r2, #1
 800130e:	401a      	ands	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	409a      	lsls	r2, r3
 8001314:	0013      	movs	r3, r2
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	2203      	movs	r2, #3
 800132e:	409a      	lsls	r2, r3
 8001330:	0013      	movs	r3, r2
 8001332:	43da      	mvns	r2, r3
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	409a      	lsls	r2, r3
 8001344:	0013      	movs	r3, r2
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	2b02      	cmp	r3, #2
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0xf2>
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2b12      	cmp	r3, #18
 8001360:	d123      	bne.n	80013aa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	08da      	lsrs	r2, r3, #3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3208      	adds	r2, #8
 800136a:	0092      	lsls	r2, r2, #2
 800136c:	58d3      	ldr	r3, [r2, r3]
 800136e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	2207      	movs	r2, #7
 8001374:	4013      	ands	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	220f      	movs	r2, #15
 800137a:	409a      	lsls	r2, r3
 800137c:	0013      	movs	r3, r2
 800137e:	43da      	mvns	r2, r3
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	691a      	ldr	r2, [r3, #16]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	2107      	movs	r1, #7
 800138e:	400b      	ands	r3, r1
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	409a      	lsls	r2, r3
 8001394:	0013      	movs	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	08da      	lsrs	r2, r3, #3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3208      	adds	r2, #8
 80013a4:	0092      	lsls	r2, r2, #2
 80013a6:	6939      	ldr	r1, [r7, #16]
 80013a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	2203      	movs	r2, #3
 80013b6:	409a      	lsls	r2, r3
 80013b8:	0013      	movs	r3, r2
 80013ba:	43da      	mvns	r2, r3
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4013      	ands	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2203      	movs	r2, #3
 80013c8:	401a      	ands	r2, r3
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	409a      	lsls	r2, r3
 80013d0:	0013      	movs	r3, r2
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	055b      	lsls	r3, r3, #21
 80013e6:	4013      	ands	r3, r2
 80013e8:	d100      	bne.n	80013ec <HAL_GPIO_Init+0x17c>
 80013ea:	e0a0      	b.n	800152e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ec:	4b57      	ldr	r3, [pc, #348]	; (800154c <HAL_GPIO_Init+0x2dc>)
 80013ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013f0:	4b56      	ldr	r3, [pc, #344]	; (800154c <HAL_GPIO_Init+0x2dc>)
 80013f2:	2101      	movs	r1, #1
 80013f4:	430a      	orrs	r2, r1
 80013f6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80013f8:	4a55      	ldr	r2, [pc, #340]	; (8001550 <HAL_GPIO_Init+0x2e0>)
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	089b      	lsrs	r3, r3, #2
 80013fe:	3302      	adds	r3, #2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	589b      	ldr	r3, [r3, r2]
 8001404:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	2203      	movs	r2, #3
 800140a:	4013      	ands	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	220f      	movs	r2, #15
 8001410:	409a      	lsls	r2, r3
 8001412:	0013      	movs	r3, r2
 8001414:	43da      	mvns	r2, r3
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	23a0      	movs	r3, #160	; 0xa0
 8001420:	05db      	lsls	r3, r3, #23
 8001422:	429a      	cmp	r2, r3
 8001424:	d01f      	beq.n	8001466 <HAL_GPIO_Init+0x1f6>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4a      	ldr	r2, [pc, #296]	; (8001554 <HAL_GPIO_Init+0x2e4>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d019      	beq.n	8001462 <HAL_GPIO_Init+0x1f2>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a49      	ldr	r2, [pc, #292]	; (8001558 <HAL_GPIO_Init+0x2e8>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d013      	beq.n	800145e <HAL_GPIO_Init+0x1ee>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a48      	ldr	r2, [pc, #288]	; (800155c <HAL_GPIO_Init+0x2ec>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d00d      	beq.n	800145a <HAL_GPIO_Init+0x1ea>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a47      	ldr	r2, [pc, #284]	; (8001560 <HAL_GPIO_Init+0x2f0>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d007      	beq.n	8001456 <HAL_GPIO_Init+0x1e6>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a46      	ldr	r2, [pc, #280]	; (8001564 <HAL_GPIO_Init+0x2f4>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d101      	bne.n	8001452 <HAL_GPIO_Init+0x1e2>
 800144e:	2305      	movs	r3, #5
 8001450:	e00a      	b.n	8001468 <HAL_GPIO_Init+0x1f8>
 8001452:	2306      	movs	r3, #6
 8001454:	e008      	b.n	8001468 <HAL_GPIO_Init+0x1f8>
 8001456:	2304      	movs	r3, #4
 8001458:	e006      	b.n	8001468 <HAL_GPIO_Init+0x1f8>
 800145a:	2303      	movs	r3, #3
 800145c:	e004      	b.n	8001468 <HAL_GPIO_Init+0x1f8>
 800145e:	2302      	movs	r3, #2
 8001460:	e002      	b.n	8001468 <HAL_GPIO_Init+0x1f8>
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <HAL_GPIO_Init+0x1f8>
 8001466:	2300      	movs	r3, #0
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	2103      	movs	r1, #3
 800146c:	400a      	ands	r2, r1
 800146e:	0092      	lsls	r2, r2, #2
 8001470:	4093      	lsls	r3, r2
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4313      	orrs	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001478:	4935      	ldr	r1, [pc, #212]	; (8001550 <HAL_GPIO_Init+0x2e0>)
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	089b      	lsrs	r3, r3, #2
 800147e:	3302      	adds	r3, #2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001486:	4b38      	ldr	r3, [pc, #224]	; (8001568 <HAL_GPIO_Init+0x2f8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	43da      	mvns	r2, r3
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	2380      	movs	r3, #128	; 0x80
 800149c:	025b      	lsls	r3, r3, #9
 800149e:	4013      	ands	r3, r2
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014aa:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <HAL_GPIO_Init+0x2f8>)
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80014b0:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <HAL_GPIO_Init+0x2f8>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	43da      	mvns	r2, r3
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	029b      	lsls	r3, r3, #10
 80014c8:	4013      	ands	r3, r2
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014d4:	4b24      	ldr	r3, [pc, #144]	; (8001568 <HAL_GPIO_Init+0x2f8>)
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014da:	4b23      	ldr	r3, [pc, #140]	; (8001568 <HAL_GPIO_Init+0x2f8>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	43da      	mvns	r2, r3
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	035b      	lsls	r3, r3, #13
 80014f2:	4013      	ands	r3, r2
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <HAL_GPIO_Init+0x2f8>)
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001504:	4b18      	ldr	r3, [pc, #96]	; (8001568 <HAL_GPIO_Init+0x2f8>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	43da      	mvns	r2, r3
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	2380      	movs	r3, #128	; 0x80
 800151a:	039b      	lsls	r3, r3, #14
 800151c:	4013      	ands	r3, r2
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <HAL_GPIO_Init+0x2f8>)
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	3301      	adds	r3, #1
 8001532:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	40da      	lsrs	r2, r3
 800153c:	1e13      	subs	r3, r2, #0
 800153e:	d000      	beq.n	8001542 <HAL_GPIO_Init+0x2d2>
 8001540:	e6a2      	b.n	8001288 <HAL_GPIO_Init+0x18>
  }
}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	46bd      	mov	sp, r7
 8001546:	b006      	add	sp, #24
 8001548:	bd80      	pop	{r7, pc}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	40021000 	.word	0x40021000
 8001550:	40010000 	.word	0x40010000
 8001554:	50000400 	.word	0x50000400
 8001558:	50000800 	.word	0x50000800
 800155c:	50000c00 	.word	0x50000c00
 8001560:	50001000 	.word	0x50001000
 8001564:	50001c00 	.word	0x50001c00
 8001568:	40010400 	.word	0x40010400

0800156c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	0008      	movs	r0, r1
 8001576:	0011      	movs	r1, r2
 8001578:	1cbb      	adds	r3, r7, #2
 800157a:	1c02      	adds	r2, r0, #0
 800157c:	801a      	strh	r2, [r3, #0]
 800157e:	1c7b      	adds	r3, r7, #1
 8001580:	1c0a      	adds	r2, r1, #0
 8001582:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001584:	1c7b      	adds	r3, r7, #1
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d004      	beq.n	8001596 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800158c:	1cbb      	adds	r3, r7, #2
 800158e:	881a      	ldrh	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001594:	e003      	b.n	800159e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001596:	1cbb      	adds	r3, r7, #2
 8001598:	881a      	ldrh	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b002      	add	sp, #8
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b084      	sub	sp, #16
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	000a      	movs	r2, r1
 80015b0:	1cbb      	adds	r3, r7, #2
 80015b2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015ba:	1cbb      	adds	r3, r7, #2
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	4013      	ands	r3, r2
 80015c2:	041a      	lsls	r2, r3, #16
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	1cb9      	adds	r1, r7, #2
 80015ca:	8809      	ldrh	r1, [r1, #0]
 80015cc:	400b      	ands	r3, r1
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	619a      	str	r2, [r3, #24]
}
 80015d4:	46c0      	nop			; (mov r8, r8)
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b004      	add	sp, #16
 80015da:	bd80      	pop	{r7, pc}

080015dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015dc:	b5b0      	push	{r4, r5, r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d102      	bne.n	80015f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	f000 fbc2 	bl	8001d74 <HAL_RCC_OscConfig+0x798>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015f0:	4bca      	ldr	r3, [pc, #808]	; (800191c <HAL_RCC_OscConfig+0x340>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	220c      	movs	r2, #12
 80015f6:	4013      	ands	r3, r2
 80015f8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015fa:	4bc8      	ldr	r3, [pc, #800]	; (800191c <HAL_RCC_OscConfig+0x340>)
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	025b      	lsls	r3, r3, #9
 8001602:	4013      	ands	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2201      	movs	r2, #1
 800160c:	4013      	ands	r3, r2
 800160e:	d100      	bne.n	8001612 <HAL_RCC_OscConfig+0x36>
 8001610:	e07e      	b.n	8001710 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	2b08      	cmp	r3, #8
 8001616:	d007      	beq.n	8001628 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	2b0c      	cmp	r3, #12
 800161c:	d112      	bne.n	8001644 <HAL_RCC_OscConfig+0x68>
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	2380      	movs	r3, #128	; 0x80
 8001622:	025b      	lsls	r3, r3, #9
 8001624:	429a      	cmp	r2, r3
 8001626:	d10d      	bne.n	8001644 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001628:	4bbc      	ldr	r3, [pc, #752]	; (800191c <HAL_RCC_OscConfig+0x340>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	029b      	lsls	r3, r3, #10
 8001630:	4013      	ands	r3, r2
 8001632:	d100      	bne.n	8001636 <HAL_RCC_OscConfig+0x5a>
 8001634:	e06b      	b.n	800170e <HAL_RCC_OscConfig+0x132>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d167      	bne.n	800170e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	f000 fb98 	bl	8001d74 <HAL_RCC_OscConfig+0x798>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	025b      	lsls	r3, r3, #9
 800164c:	429a      	cmp	r2, r3
 800164e:	d107      	bne.n	8001660 <HAL_RCC_OscConfig+0x84>
 8001650:	4bb2      	ldr	r3, [pc, #712]	; (800191c <HAL_RCC_OscConfig+0x340>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4bb1      	ldr	r3, [pc, #708]	; (800191c <HAL_RCC_OscConfig+0x340>)
 8001656:	2180      	movs	r1, #128	; 0x80
 8001658:	0249      	lsls	r1, r1, #9
 800165a:	430a      	orrs	r2, r1
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	e027      	b.n	80016b0 <HAL_RCC_OscConfig+0xd4>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	23a0      	movs	r3, #160	; 0xa0
 8001666:	02db      	lsls	r3, r3, #11
 8001668:	429a      	cmp	r2, r3
 800166a:	d10e      	bne.n	800168a <HAL_RCC_OscConfig+0xae>
 800166c:	4bab      	ldr	r3, [pc, #684]	; (800191c <HAL_RCC_OscConfig+0x340>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4baa      	ldr	r3, [pc, #680]	; (800191c <HAL_RCC_OscConfig+0x340>)
 8001672:	2180      	movs	r1, #128	; 0x80
 8001674:	02c9      	lsls	r1, r1, #11
 8001676:	430a      	orrs	r2, r1
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	4ba8      	ldr	r3, [pc, #672]	; (800191c <HAL_RCC_OscConfig+0x340>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4ba7      	ldr	r3, [pc, #668]	; (800191c <HAL_RCC_OscConfig+0x340>)
 8001680:	2180      	movs	r1, #128	; 0x80
 8001682:	0249      	lsls	r1, r1, #9
 8001684:	430a      	orrs	r2, r1
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	e012      	b.n	80016b0 <HAL_RCC_OscConfig+0xd4>
 800168a:	4ba4      	ldr	r3, [pc, #656]	; (800191c <HAL_RCC_OscConfig+0x340>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	4ba3      	ldr	r3, [pc, #652]	; (800191c <HAL_RCC_OscConfig+0x340>)
 8001690:	49a3      	ldr	r1, [pc, #652]	; (8001920 <HAL_RCC_OscConfig+0x344>)
 8001692:	400a      	ands	r2, r1
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	4ba1      	ldr	r3, [pc, #644]	; (800191c <HAL_RCC_OscConfig+0x340>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	025b      	lsls	r3, r3, #9
 800169e:	4013      	ands	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4b9d      	ldr	r3, [pc, #628]	; (800191c <HAL_RCC_OscConfig+0x340>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b9c      	ldr	r3, [pc, #624]	; (800191c <HAL_RCC_OscConfig+0x340>)
 80016aa:	499e      	ldr	r1, [pc, #632]	; (8001924 <HAL_RCC_OscConfig+0x348>)
 80016ac:	400a      	ands	r2, r1
 80016ae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d015      	beq.n	80016e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff fc6a 	bl	8000f90 <HAL_GetTick>
 80016bc:	0003      	movs	r3, r0
 80016be:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016c0:	e009      	b.n	80016d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c2:	f7ff fc65 	bl	8000f90 <HAL_GetTick>
 80016c6:	0002      	movs	r2, r0
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b64      	cmp	r3, #100	; 0x64
 80016ce:	d902      	bls.n	80016d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	f000 fb4f 	bl	8001d74 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016d6:	4b91      	ldr	r3, [pc, #580]	; (800191c <HAL_RCC_OscConfig+0x340>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	029b      	lsls	r3, r3, #10
 80016de:	4013      	ands	r3, r2
 80016e0:	d0ef      	beq.n	80016c2 <HAL_RCC_OscConfig+0xe6>
 80016e2:	e015      	b.n	8001710 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e4:	f7ff fc54 	bl	8000f90 <HAL_GetTick>
 80016e8:	0003      	movs	r3, r0
 80016ea:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ee:	f7ff fc4f 	bl	8000f90 <HAL_GetTick>
 80016f2:	0002      	movs	r2, r0
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b64      	cmp	r3, #100	; 0x64
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e339      	b.n	8001d74 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001700:	4b86      	ldr	r3, [pc, #536]	; (800191c <HAL_RCC_OscConfig+0x340>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	029b      	lsls	r3, r3, #10
 8001708:	4013      	ands	r3, r2
 800170a:	d1f0      	bne.n	80016ee <HAL_RCC_OscConfig+0x112>
 800170c:	e000      	b.n	8001710 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2202      	movs	r2, #2
 8001716:	4013      	ands	r3, r2
 8001718:	d100      	bne.n	800171c <HAL_RCC_OscConfig+0x140>
 800171a:	e09a      	b.n	8001852 <HAL_RCC_OscConfig+0x276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	2220      	movs	r2, #32
 8001726:	4013      	ands	r3, r2
 8001728:	d009      	beq.n	800173e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800172a:	4b7c      	ldr	r3, [pc, #496]	; (800191c <HAL_RCC_OscConfig+0x340>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4b7b      	ldr	r3, [pc, #492]	; (800191c <HAL_RCC_OscConfig+0x340>)
 8001730:	2120      	movs	r1, #32
 8001732:	430a      	orrs	r2, r1
 8001734:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	2220      	movs	r2, #32
 800173a:	4393      	bics	r3, r2
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	2b04      	cmp	r3, #4
 8001742:	d005      	beq.n	8001750 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	2b0c      	cmp	r3, #12
 8001748:	d13f      	bne.n	80017ca <HAL_RCC_OscConfig+0x1ee>
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d13c      	bne.n	80017ca <HAL_RCC_OscConfig+0x1ee>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001750:	4b72      	ldr	r3, [pc, #456]	; (800191c <HAL_RCC_OscConfig+0x340>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2204      	movs	r2, #4
 8001756:	4013      	ands	r3, r2
 8001758:	d004      	beq.n	8001764 <HAL_RCC_OscConfig+0x188>
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e307      	b.n	8001d74 <HAL_RCC_OscConfig+0x798>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001764:	4b6d      	ldr	r3, [pc, #436]	; (800191c <HAL_RCC_OscConfig+0x340>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	4a6f      	ldr	r2, [pc, #444]	; (8001928 <HAL_RCC_OscConfig+0x34c>)
 800176a:	4013      	ands	r3, r2
 800176c:	0019      	movs	r1, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	021a      	lsls	r2, r3, #8
 8001774:	4b69      	ldr	r3, [pc, #420]	; (800191c <HAL_RCC_OscConfig+0x340>)
 8001776:	430a      	orrs	r2, r1
 8001778:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800177a:	4b68      	ldr	r3, [pc, #416]	; (800191c <HAL_RCC_OscConfig+0x340>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2209      	movs	r2, #9
 8001780:	4393      	bics	r3, r2
 8001782:	0019      	movs	r1, r3
 8001784:	4b65      	ldr	r3, [pc, #404]	; (800191c <HAL_RCC_OscConfig+0x340>)
 8001786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001788:	430a      	orrs	r2, r1
 800178a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800178c:	f000 fc44 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8001790:	0001      	movs	r1, r0
 8001792:	4b62      	ldr	r3, [pc, #392]	; (800191c <HAL_RCC_OscConfig+0x340>)
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	091b      	lsrs	r3, r3, #4
 8001798:	220f      	movs	r2, #15
 800179a:	4013      	ands	r3, r2
 800179c:	4a63      	ldr	r2, [pc, #396]	; (800192c <HAL_RCC_OscConfig+0x350>)
 800179e:	5cd3      	ldrb	r3, [r2, r3]
 80017a0:	000a      	movs	r2, r1
 80017a2:	40da      	lsrs	r2, r3
 80017a4:	4b62      	ldr	r3, [pc, #392]	; (8001930 <HAL_RCC_OscConfig+0x354>)
 80017a6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80017a8:	4b62      	ldr	r3, [pc, #392]	; (8001934 <HAL_RCC_OscConfig+0x358>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2513      	movs	r5, #19
 80017ae:	197c      	adds	r4, r7, r5
 80017b0:	0018      	movs	r0, r3
 80017b2:	f7ff fba7 	bl	8000f04 <HAL_InitTick>
 80017b6:	0003      	movs	r3, r0
 80017b8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80017ba:	197b      	adds	r3, r7, r5
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d047      	beq.n	8001852 <HAL_RCC_OscConfig+0x276>
      {
        return status;
 80017c2:	2313      	movs	r3, #19
 80017c4:	18fb      	adds	r3, r7, r3
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	e2d4      	b.n	8001d74 <HAL_RCC_OscConfig+0x798>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d027      	beq.n	8001820 <HAL_RCC_OscConfig+0x244>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80017d0:	4b52      	ldr	r3, [pc, #328]	; (800191c <HAL_RCC_OscConfig+0x340>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2209      	movs	r2, #9
 80017d6:	4393      	bics	r3, r2
 80017d8:	0019      	movs	r1, r3
 80017da:	4b50      	ldr	r3, [pc, #320]	; (800191c <HAL_RCC_OscConfig+0x340>)
 80017dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017de:	430a      	orrs	r2, r1
 80017e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e2:	f7ff fbd5 	bl	8000f90 <HAL_GetTick>
 80017e6:	0003      	movs	r3, r0
 80017e8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x222>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ec:	f7ff fbd0 	bl	8000f90 <HAL_GetTick>
 80017f0:	0002      	movs	r2, r0
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x222>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e2ba      	b.n	8001d74 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017fe:	4b47      	ldr	r3, [pc, #284]	; (800191c <HAL_RCC_OscConfig+0x340>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2204      	movs	r2, #4
 8001804:	4013      	ands	r3, r2
 8001806:	d0f1      	beq.n	80017ec <HAL_RCC_OscConfig+0x210>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001808:	4b44      	ldr	r3, [pc, #272]	; (800191c <HAL_RCC_OscConfig+0x340>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	4a46      	ldr	r2, [pc, #280]	; (8001928 <HAL_RCC_OscConfig+0x34c>)
 800180e:	4013      	ands	r3, r2
 8001810:	0019      	movs	r1, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	021a      	lsls	r2, r3, #8
 8001818:	4b40      	ldr	r3, [pc, #256]	; (800191c <HAL_RCC_OscConfig+0x340>)
 800181a:	430a      	orrs	r2, r1
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	e018      	b.n	8001852 <HAL_RCC_OscConfig+0x276>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001820:	4b3e      	ldr	r3, [pc, #248]	; (800191c <HAL_RCC_OscConfig+0x340>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b3d      	ldr	r3, [pc, #244]	; (800191c <HAL_RCC_OscConfig+0x340>)
 8001826:	2101      	movs	r1, #1
 8001828:	438a      	bics	r2, r1
 800182a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182c:	f7ff fbb0 	bl	8000f90 <HAL_GetTick>
 8001830:	0003      	movs	r3, r0
 8001832:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001836:	f7ff fbab 	bl	8000f90 <HAL_GetTick>
 800183a:	0002      	movs	r2, r0
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e295      	b.n	8001d74 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001848:	4b34      	ldr	r3, [pc, #208]	; (800191c <HAL_RCC_OscConfig+0x340>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2204      	movs	r2, #4
 800184e:	4013      	ands	r3, r2
 8001850:	d1f1      	bne.n	8001836 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2210      	movs	r2, #16
 8001858:	4013      	ands	r3, r2
 800185a:	d100      	bne.n	800185e <HAL_RCC_OscConfig+0x282>
 800185c:	e0a3      	b.n	80019a6 <HAL_RCC_OscConfig+0x3ca>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d141      	bne.n	80018e8 <HAL_RCC_OscConfig+0x30c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001864:	4b2d      	ldr	r3, [pc, #180]	; (800191c <HAL_RCC_OscConfig+0x340>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4013      	ands	r3, r2
 800186e:	d005      	beq.n	800187c <HAL_RCC_OscConfig+0x2a0>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e27b      	b.n	8001d74 <HAL_RCC_OscConfig+0x798>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800187c:	4b27      	ldr	r3, [pc, #156]	; (800191c <HAL_RCC_OscConfig+0x340>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	4a2d      	ldr	r2, [pc, #180]	; (8001938 <HAL_RCC_OscConfig+0x35c>)
 8001882:	4013      	ands	r3, r2
 8001884:	0019      	movs	r1, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800188a:	4b24      	ldr	r3, [pc, #144]	; (800191c <HAL_RCC_OscConfig+0x340>)
 800188c:	430a      	orrs	r2, r1
 800188e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001890:	4b22      	ldr	r3, [pc, #136]	; (800191c <HAL_RCC_OscConfig+0x340>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	021b      	lsls	r3, r3, #8
 8001896:	0a19      	lsrs	r1, r3, #8
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	061a      	lsls	r2, r3, #24
 800189e:	4b1f      	ldr	r3, [pc, #124]	; (800191c <HAL_RCC_OscConfig+0x340>)
 80018a0:	430a      	orrs	r2, r1
 80018a2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	0b5b      	lsrs	r3, r3, #13
 80018aa:	3301      	adds	r3, #1
 80018ac:	2280      	movs	r2, #128	; 0x80
 80018ae:	0212      	lsls	r2, r2, #8
 80018b0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80018b2:	4b1a      	ldr	r3, [pc, #104]	; (800191c <HAL_RCC_OscConfig+0x340>)
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	091b      	lsrs	r3, r3, #4
 80018b8:	210f      	movs	r1, #15
 80018ba:	400b      	ands	r3, r1
 80018bc:	491b      	ldr	r1, [pc, #108]	; (800192c <HAL_RCC_OscConfig+0x350>)
 80018be:	5ccb      	ldrb	r3, [r1, r3]
 80018c0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80018c2:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <HAL_RCC_OscConfig+0x354>)
 80018c4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80018c6:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <HAL_RCC_OscConfig+0x358>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2513      	movs	r5, #19
 80018cc:	197c      	adds	r4, r7, r5
 80018ce:	0018      	movs	r0, r3
 80018d0:	f7ff fb18 	bl	8000f04 <HAL_InitTick>
 80018d4:	0003      	movs	r3, r0
 80018d6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80018d8:	197b      	adds	r3, r7, r5
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d062      	beq.n	80019a6 <HAL_RCC_OscConfig+0x3ca>
        {
          return status;
 80018e0:	2313      	movs	r3, #19
 80018e2:	18fb      	adds	r3, r7, r3
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	e245      	b.n	8001d74 <HAL_RCC_OscConfig+0x798>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d040      	beq.n	8001972 <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018f0:	4b0a      	ldr	r3, [pc, #40]	; (800191c <HAL_RCC_OscConfig+0x340>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <HAL_RCC_OscConfig+0x340>)
 80018f6:	2180      	movs	r1, #128	; 0x80
 80018f8:	0049      	lsls	r1, r1, #1
 80018fa:	430a      	orrs	r2, r1
 80018fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fe:	f7ff fb47 	bl	8000f90 <HAL_GetTick>
 8001902:	0003      	movs	r3, r0
 8001904:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001906:	e019      	b.n	800193c <HAL_RCC_OscConfig+0x360>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001908:	f7ff fb42 	bl	8000f90 <HAL_GetTick>
 800190c:	0002      	movs	r2, r0
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d912      	bls.n	800193c <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e22c      	b.n	8001d74 <HAL_RCC_OscConfig+0x798>
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	40021000 	.word	0x40021000
 8001920:	fffeffff 	.word	0xfffeffff
 8001924:	fffbffff 	.word	0xfffbffff
 8001928:	ffffe0ff 	.word	0xffffe0ff
 800192c:	08003834 	.word	0x08003834
 8001930:	20000004 	.word	0x20000004
 8001934:	20000008 	.word	0x20000008
 8001938:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800193c:	4bc6      	ldr	r3, [pc, #792]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4013      	ands	r3, r2
 8001946:	d0df      	beq.n	8001908 <HAL_RCC_OscConfig+0x32c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001948:	4bc3      	ldr	r3, [pc, #780]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	4ac3      	ldr	r2, [pc, #780]	; (8001c5c <HAL_RCC_OscConfig+0x680>)
 800194e:	4013      	ands	r3, r2
 8001950:	0019      	movs	r1, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001956:	4bc0      	ldr	r3, [pc, #768]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001958:	430a      	orrs	r2, r1
 800195a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800195c:	4bbe      	ldr	r3, [pc, #760]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	021b      	lsls	r3, r3, #8
 8001962:	0a19      	lsrs	r1, r3, #8
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	061a      	lsls	r2, r3, #24
 800196a:	4bbb      	ldr	r3, [pc, #748]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 800196c:	430a      	orrs	r2, r1
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	e019      	b.n	80019a6 <HAL_RCC_OscConfig+0x3ca>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001972:	4bb9      	ldr	r3, [pc, #740]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	4bb8      	ldr	r3, [pc, #736]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001978:	49b9      	ldr	r1, [pc, #740]	; (8001c60 <HAL_RCC_OscConfig+0x684>)
 800197a:	400a      	ands	r2, r1
 800197c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197e:	f7ff fb07 	bl	8000f90 <HAL_GetTick>
 8001982:	0003      	movs	r3, r0
 8001984:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001988:	f7ff fb02 	bl	8000f90 <HAL_GetTick>
 800198c:	0002      	movs	r2, r0
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x3be>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e1ec      	b.n	8001d74 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800199a:	4baf      	ldr	r3, [pc, #700]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	2380      	movs	r3, #128	; 0x80
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4013      	ands	r3, r2
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2208      	movs	r2, #8
 80019ac:	4013      	ands	r3, r2
 80019ae:	d036      	beq.n	8001a1e <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d019      	beq.n	80019ec <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b8:	4ba7      	ldr	r3, [pc, #668]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 80019ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019bc:	4ba6      	ldr	r3, [pc, #664]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 80019be:	2101      	movs	r1, #1
 80019c0:	430a      	orrs	r2, r1
 80019c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c4:	f7ff fae4 	bl	8000f90 <HAL_GetTick>
 80019c8:	0003      	movs	r3, r0
 80019ca:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x404>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ce:	f7ff fadf 	bl	8000f90 <HAL_GetTick>
 80019d2:	0002      	movs	r2, r0
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e1c9      	b.n	8001d74 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019e0:	4b9d      	ldr	r3, [pc, #628]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 80019e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019e4:	2202      	movs	r2, #2
 80019e6:	4013      	ands	r3, r2
 80019e8:	d0f1      	beq.n	80019ce <HAL_RCC_OscConfig+0x3f2>
 80019ea:	e018      	b.n	8001a1e <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ec:	4b9a      	ldr	r3, [pc, #616]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 80019ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019f0:	4b99      	ldr	r3, [pc, #612]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 80019f2:	2101      	movs	r1, #1
 80019f4:	438a      	bics	r2, r1
 80019f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f8:	f7ff faca 	bl	8000f90 <HAL_GetTick>
 80019fc:	0003      	movs	r3, r0
 80019fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a02:	f7ff fac5 	bl	8000f90 <HAL_GetTick>
 8001a06:	0002      	movs	r2, r0
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e1af      	b.n	8001d74 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a14:	4b90      	ldr	r3, [pc, #576]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a18:	2202      	movs	r2, #2
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d1f1      	bne.n	8001a02 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2204      	movs	r2, #4
 8001a24:	4013      	ands	r3, r2
 8001a26:	d100      	bne.n	8001a2a <HAL_RCC_OscConfig+0x44e>
 8001a28:	e0af      	b.n	8001b8a <HAL_RCC_OscConfig+0x5ae>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a2a:	2323      	movs	r3, #35	; 0x23
 8001a2c:	18fb      	adds	r3, r7, r3
 8001a2e:	2200      	movs	r2, #0
 8001a30:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a32:	4b89      	ldr	r3, [pc, #548]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	055b      	lsls	r3, r3, #21
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d10a      	bne.n	8001a54 <HAL_RCC_OscConfig+0x478>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a3e:	4b86      	ldr	r3, [pc, #536]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a42:	4b85      	ldr	r3, [pc, #532]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001a44:	2180      	movs	r1, #128	; 0x80
 8001a46:	0549      	lsls	r1, r1, #21
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001a4c:	2323      	movs	r3, #35	; 0x23
 8001a4e:	18fb      	adds	r3, r7, r3
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a54:	4b83      	ldr	r3, [pc, #524]	; (8001c64 <HAL_RCC_OscConfig+0x688>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d11a      	bne.n	8001a96 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a60:	4b80      	ldr	r3, [pc, #512]	; (8001c64 <HAL_RCC_OscConfig+0x688>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4b7f      	ldr	r3, [pc, #508]	; (8001c64 <HAL_RCC_OscConfig+0x688>)
 8001a66:	2180      	movs	r1, #128	; 0x80
 8001a68:	0049      	lsls	r1, r1, #1
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a6e:	f7ff fa8f 	bl	8000f90 <HAL_GetTick>
 8001a72:	0003      	movs	r3, r0
 8001a74:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x4ae>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a78:	f7ff fa8a 	bl	8000f90 <HAL_GetTick>
 8001a7c:	0002      	movs	r2, r0
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b64      	cmp	r3, #100	; 0x64
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x4ae>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e174      	b.n	8001d74 <HAL_RCC_OscConfig+0x798>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8a:	4b76      	ldr	r3, [pc, #472]	; (8001c64 <HAL_RCC_OscConfig+0x688>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	2380      	movs	r3, #128	; 0x80
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	4013      	ands	r3, r2
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	2380      	movs	r3, #128	; 0x80
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d107      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x4d6>
 8001aa2:	4b6d      	ldr	r3, [pc, #436]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001aa4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001aa6:	4b6c      	ldr	r3, [pc, #432]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001aa8:	2180      	movs	r1, #128	; 0x80
 8001aaa:	0049      	lsls	r1, r1, #1
 8001aac:	430a      	orrs	r2, r1
 8001aae:	651a      	str	r2, [r3, #80]	; 0x50
 8001ab0:	e031      	b.n	8001b16 <HAL_RCC_OscConfig+0x53a>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x4f8>
 8001aba:	4b67      	ldr	r3, [pc, #412]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001abc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001abe:	4b66      	ldr	r3, [pc, #408]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001ac0:	4967      	ldr	r1, [pc, #412]	; (8001c60 <HAL_RCC_OscConfig+0x684>)
 8001ac2:	400a      	ands	r2, r1
 8001ac4:	651a      	str	r2, [r3, #80]	; 0x50
 8001ac6:	4b64      	ldr	r3, [pc, #400]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001ac8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001aca:	4b63      	ldr	r3, [pc, #396]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001acc:	4966      	ldr	r1, [pc, #408]	; (8001c68 <HAL_RCC_OscConfig+0x68c>)
 8001ace:	400a      	ands	r2, r1
 8001ad0:	651a      	str	r2, [r3, #80]	; 0x50
 8001ad2:	e020      	b.n	8001b16 <HAL_RCC_OscConfig+0x53a>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	23a0      	movs	r3, #160	; 0xa0
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d10e      	bne.n	8001afe <HAL_RCC_OscConfig+0x522>
 8001ae0:	4b5d      	ldr	r3, [pc, #372]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001ae2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ae4:	4b5c      	ldr	r3, [pc, #368]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001ae6:	2180      	movs	r1, #128	; 0x80
 8001ae8:	00c9      	lsls	r1, r1, #3
 8001aea:	430a      	orrs	r2, r1
 8001aec:	651a      	str	r2, [r3, #80]	; 0x50
 8001aee:	4b5a      	ldr	r3, [pc, #360]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001af0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001af2:	4b59      	ldr	r3, [pc, #356]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001af4:	2180      	movs	r1, #128	; 0x80
 8001af6:	0049      	lsls	r1, r1, #1
 8001af8:	430a      	orrs	r2, r1
 8001afa:	651a      	str	r2, [r3, #80]	; 0x50
 8001afc:	e00b      	b.n	8001b16 <HAL_RCC_OscConfig+0x53a>
 8001afe:	4b56      	ldr	r3, [pc, #344]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001b00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b02:	4b55      	ldr	r3, [pc, #340]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001b04:	4956      	ldr	r1, [pc, #344]	; (8001c60 <HAL_RCC_OscConfig+0x684>)
 8001b06:	400a      	ands	r2, r1
 8001b08:	651a      	str	r2, [r3, #80]	; 0x50
 8001b0a:	4b53      	ldr	r3, [pc, #332]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001b0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b0e:	4b52      	ldr	r3, [pc, #328]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001b10:	4955      	ldr	r1, [pc, #340]	; (8001c68 <HAL_RCC_OscConfig+0x68c>)
 8001b12:	400a      	ands	r2, r1
 8001b14:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d015      	beq.n	8001b4a <HAL_RCC_OscConfig+0x56e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1e:	f7ff fa37 	bl	8000f90 <HAL_GetTick>
 8001b22:	0003      	movs	r3, r0
 8001b24:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b26:	e009      	b.n	8001b3c <HAL_RCC_OscConfig+0x560>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b28:	f7ff fa32 	bl	8000f90 <HAL_GetTick>
 8001b2c:	0002      	movs	r2, r0
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	4a4e      	ldr	r2, [pc, #312]	; (8001c6c <HAL_RCC_OscConfig+0x690>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x560>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e11b      	b.n	8001d74 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b3c:	4b46      	ldr	r3, [pc, #280]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001b3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4013      	ands	r3, r2
 8001b46:	d0ef      	beq.n	8001b28 <HAL_RCC_OscConfig+0x54c>
 8001b48:	e014      	b.n	8001b74 <HAL_RCC_OscConfig+0x598>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b4a:	f7ff fa21 	bl	8000f90 <HAL_GetTick>
 8001b4e:	0003      	movs	r3, r0
 8001b50:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b52:	e009      	b.n	8001b68 <HAL_RCC_OscConfig+0x58c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b54:	f7ff fa1c 	bl	8000f90 <HAL_GetTick>
 8001b58:	0002      	movs	r2, r0
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	4a43      	ldr	r2, [pc, #268]	; (8001c6c <HAL_RCC_OscConfig+0x690>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e105      	b.n	8001d74 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b68:	4b3b      	ldr	r3, [pc, #236]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001b6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4013      	ands	r3, r2
 8001b72:	d1ef      	bne.n	8001b54 <HAL_RCC_OscConfig+0x578>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b74:	2323      	movs	r3, #35	; 0x23
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d105      	bne.n	8001b8a <HAL_RCC_OscConfig+0x5ae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b7e:	4b36      	ldr	r3, [pc, #216]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001b80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b82:	4b35      	ldr	r3, [pc, #212]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001b84:	493a      	ldr	r1, [pc, #232]	; (8001c70 <HAL_RCC_OscConfig+0x694>)
 8001b86:	400a      	ands	r2, r1
 8001b88:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	4013      	ands	r3, r2
 8001b92:	d049      	beq.n	8001c28 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d026      	beq.n	8001bea <HAL_RCC_OscConfig+0x60e>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001b9c:	4b2e      	ldr	r3, [pc, #184]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	4b2b      	ldr	r3, [pc, #172]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bac:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001bae:	2101      	movs	r1, #1
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	635a      	str	r2, [r3, #52]	; 0x34
 8001bb4:	4b2f      	ldr	r3, [pc, #188]	; (8001c74 <HAL_RCC_OscConfig+0x698>)
 8001bb6:	6a1a      	ldr	r2, [r3, #32]
 8001bb8:	4b2e      	ldr	r3, [pc, #184]	; (8001c74 <HAL_RCC_OscConfig+0x698>)
 8001bba:	2180      	movs	r1, #128	; 0x80
 8001bbc:	0189      	lsls	r1, r1, #6
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc2:	f7ff f9e5 	bl	8000f90 <HAL_GetTick>
 8001bc6:	0003      	movs	r3, r0
 8001bc8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x602>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bcc:	f7ff f9e0 	bl	8000f90 <HAL_GetTick>
 8001bd0:	0002      	movs	r2, r0
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x602>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e0ca      	b.n	8001d74 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bde:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	2202      	movs	r2, #2
 8001be4:	4013      	ands	r3, r2
 8001be6:	d0f1      	beq.n	8001bcc <HAL_RCC_OscConfig+0x5f0>
 8001be8:	e01e      	b.n	8001c28 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001bea:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	438a      	bics	r2, r1
 8001bf4:	609a      	str	r2, [r3, #8]
 8001bf6:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <HAL_RCC_OscConfig+0x698>)
 8001bf8:	6a1a      	ldr	r2, [r3, #32]
 8001bfa:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <HAL_RCC_OscConfig+0x698>)
 8001bfc:	491e      	ldr	r1, [pc, #120]	; (8001c78 <HAL_RCC_OscConfig+0x69c>)
 8001bfe:	400a      	ands	r2, r1
 8001c00:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c02:	f7ff f9c5 	bl	8000f90 <HAL_GetTick>
 8001c06:	0003      	movs	r3, r0
 8001c08:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x642>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c0c:	f7ff f9c0 	bl	8000f90 <HAL_GetTick>
 8001c10:	0002      	movs	r2, r0
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x642>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e0aa      	b.n	8001d74 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2202      	movs	r2, #2
 8001c24:	4013      	ands	r3, r2
 8001c26:	d1f1      	bne.n	8001c0c <HAL_RCC_OscConfig+0x630>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d100      	bne.n	8001c32 <HAL_RCC_OscConfig+0x656>
 8001c30:	e09f      	b.n	8001d72 <HAL_RCC_OscConfig+0x796>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	2b0c      	cmp	r3, #12
 8001c36:	d100      	bne.n	8001c3a <HAL_RCC_OscConfig+0x65e>
 8001c38:	e078      	b.n	8001d2c <HAL_RCC_OscConfig+0x750>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d159      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x71a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c42:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <HAL_RCC_OscConfig+0x67c>)
 8001c48:	490c      	ldr	r1, [pc, #48]	; (8001c7c <HAL_RCC_OscConfig+0x6a0>)
 8001c4a:	400a      	ands	r2, r1
 8001c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4e:	f7ff f99f 	bl	8000f90 <HAL_GetTick>
 8001c52:	0003      	movs	r3, r0
 8001c54:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c56:	e01c      	b.n	8001c92 <HAL_RCC_OscConfig+0x6b6>
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	ffff1fff 	.word	0xffff1fff
 8001c60:	fffffeff 	.word	0xfffffeff
 8001c64:	40007000 	.word	0x40007000
 8001c68:	fffffbff 	.word	0xfffffbff
 8001c6c:	00001388 	.word	0x00001388
 8001c70:	efffffff 	.word	0xefffffff
 8001c74:	40010000 	.word	0x40010000
 8001c78:	ffffdfff 	.word	0xffffdfff
 8001c7c:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c80:	f7ff f986 	bl	8000f90 <HAL_GetTick>
 8001c84:	0002      	movs	r2, r0
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e070      	b.n	8001d74 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c92:	4b3a      	ldr	r3, [pc, #232]	; (8001d7c <HAL_RCC_OscConfig+0x7a0>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	2380      	movs	r3, #128	; 0x80
 8001c98:	049b      	lsls	r3, r3, #18
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x6a4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c9e:	4b37      	ldr	r3, [pc, #220]	; (8001d7c <HAL_RCC_OscConfig+0x7a0>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	4a37      	ldr	r2, [pc, #220]	; (8001d80 <HAL_RCC_OscConfig+0x7a4>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	0019      	movs	r1, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	4b30      	ldr	r3, [pc, #192]	; (8001d7c <HAL_RCC_OscConfig+0x7a0>)
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cbe:	4b2f      	ldr	r3, [pc, #188]	; (8001d7c <HAL_RCC_OscConfig+0x7a0>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	4b2e      	ldr	r3, [pc, #184]	; (8001d7c <HAL_RCC_OscConfig+0x7a0>)
 8001cc4:	2180      	movs	r1, #128	; 0x80
 8001cc6:	0449      	lsls	r1, r1, #17
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7ff f960 	bl	8000f90 <HAL_GetTick>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x70c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd6:	f7ff f95b 	bl	8000f90 <HAL_GetTick>
 8001cda:	0002      	movs	r2, r0
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x70c>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e045      	b.n	8001d74 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001ce8:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <HAL_RCC_OscConfig+0x7a0>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	049b      	lsls	r3, r3, #18
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x6fa>
 8001cf4:	e03d      	b.n	8001d72 <HAL_RCC_OscConfig+0x796>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf6:	4b21      	ldr	r3, [pc, #132]	; (8001d7c <HAL_RCC_OscConfig+0x7a0>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <HAL_RCC_OscConfig+0x7a0>)
 8001cfc:	4921      	ldr	r1, [pc, #132]	; (8001d84 <HAL_RCC_OscConfig+0x7a8>)
 8001cfe:	400a      	ands	r2, r1
 8001d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d02:	f7ff f945 	bl	8000f90 <HAL_GetTick>
 8001d06:	0003      	movs	r3, r0
 8001d08:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d0c:	f7ff f940 	bl	8000f90 <HAL_GetTick>
 8001d10:	0002      	movs	r2, r0
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e02a      	b.n	8001d74 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d1e:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <HAL_RCC_OscConfig+0x7a0>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	2380      	movs	r3, #128	; 0x80
 8001d24:	049b      	lsls	r3, r3, #18
 8001d26:	4013      	ands	r3, r2
 8001d28:	d1f0      	bne.n	8001d0c <HAL_RCC_OscConfig+0x730>
 8001d2a:	e022      	b.n	8001d72 <HAL_RCC_OscConfig+0x796>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_OscConfig+0x75c>
      {
        return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e01d      	b.n	8001d74 <HAL_RCC_OscConfig+0x798>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d38:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <HAL_RCC_OscConfig+0x7a0>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	025b      	lsls	r3, r3, #9
 8001d44:	401a      	ands	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d10f      	bne.n	8001d6e <HAL_RCC_OscConfig+0x792>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	23f0      	movs	r3, #240	; 0xf0
 8001d52:	039b      	lsls	r3, r3, #14
 8001d54:	401a      	ands	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d107      	bne.n	8001d6e <HAL_RCC_OscConfig+0x792>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	23c0      	movs	r3, #192	; 0xc0
 8001d62:	041b      	lsls	r3, r3, #16
 8001d64:	401a      	ands	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d001      	beq.n	8001d72 <HAL_RCC_OscConfig+0x796>
        {
          return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_RCC_OscConfig+0x798>
        }
      }
    }
  }
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	0018      	movs	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b00a      	add	sp, #40	; 0x28
 8001d7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	ff02ffff 	.word	0xff02ffff
 8001d84:	feffffff 	.word	0xfeffffff

08001d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d88:	b5b0      	push	{r4, r5, r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e129      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d9c:	4b96      	ldr	r3, [pc, #600]	; (8001ff8 <HAL_RCC_ClockConfig+0x270>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2201      	movs	r2, #1
 8001da2:	4013      	ands	r3, r2
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d91e      	bls.n	8001de8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001daa:	4b93      	ldr	r3, [pc, #588]	; (8001ff8 <HAL_RCC_ClockConfig+0x270>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2201      	movs	r2, #1
 8001db0:	4393      	bics	r3, r2
 8001db2:	0019      	movs	r1, r3
 8001db4:	4b90      	ldr	r3, [pc, #576]	; (8001ff8 <HAL_RCC_ClockConfig+0x270>)
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001dbc:	f7ff f8e8 	bl	8000f90 <HAL_GetTick>
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc4:	e009      	b.n	8001dda <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc6:	f7ff f8e3 	bl	8000f90 <HAL_GetTick>
 8001dca:	0002      	movs	r2, r0
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	4a8a      	ldr	r2, [pc, #552]	; (8001ffc <HAL_RCC_ClockConfig+0x274>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e10a      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dda:	4b87      	ldr	r3, [pc, #540]	; (8001ff8 <HAL_RCC_ClockConfig+0x270>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2201      	movs	r2, #1
 8001de0:	4013      	ands	r3, r2
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d1ee      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2202      	movs	r2, #2
 8001dee:	4013      	ands	r3, r2
 8001df0:	d009      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df2:	4b83      	ldr	r3, [pc, #524]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	22f0      	movs	r2, #240	; 0xf0
 8001df8:	4393      	bics	r3, r2
 8001dfa:	0019      	movs	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	4b7f      	ldr	r3, [pc, #508]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001e02:	430a      	orrs	r2, r1
 8001e04:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d100      	bne.n	8001e12 <HAL_RCC_ClockConfig+0x8a>
 8001e10:	e089      	b.n	8001f26 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d107      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e1a:	4b79      	ldr	r3, [pc, #484]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	029b      	lsls	r3, r3, #10
 8001e22:	4013      	ands	r3, r2
 8001e24:	d120      	bne.n	8001e68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e0e2      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b03      	cmp	r3, #3
 8001e30:	d107      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e32:	4b73      	ldr	r3, [pc, #460]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	2380      	movs	r3, #128	; 0x80
 8001e38:	049b      	lsls	r3, r3, #18
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d114      	bne.n	8001e68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e0d6      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d106      	bne.n	8001e58 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e4a:	4b6d      	ldr	r3, [pc, #436]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2204      	movs	r2, #4
 8001e50:	4013      	ands	r3, r2
 8001e52:	d109      	bne.n	8001e68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0cb      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e58:	4b69      	ldr	r3, [pc, #420]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4013      	ands	r3, r2
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e0c3      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e68:	4b65      	ldr	r3, [pc, #404]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	4393      	bics	r3, r2
 8001e70:	0019      	movs	r1, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	4b62      	ldr	r3, [pc, #392]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e7c:	f7ff f888 	bl	8000f90 <HAL_GetTick>
 8001e80:	0003      	movs	r3, r0
 8001e82:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d111      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e8c:	e009      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e8e:	f7ff f87f 	bl	8000f90 <HAL_GetTick>
 8001e92:	0002      	movs	r2, r0
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	4a58      	ldr	r2, [pc, #352]	; (8001ffc <HAL_RCC_ClockConfig+0x274>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e0a6      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ea2:	4b57      	ldr	r3, [pc, #348]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d1ef      	bne.n	8001e8e <HAL_RCC_ClockConfig+0x106>
 8001eae:	e03a      	b.n	8001f26 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d111      	bne.n	8001edc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eb8:	e009      	b.n	8001ece <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eba:	f7ff f869 	bl	8000f90 <HAL_GetTick>
 8001ebe:	0002      	movs	r2, r0
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	4a4d      	ldr	r2, [pc, #308]	; (8001ffc <HAL_RCC_ClockConfig+0x274>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e090      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ece:	4b4c      	ldr	r3, [pc, #304]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b0c      	cmp	r3, #12
 8001ed8:	d1ef      	bne.n	8001eba <HAL_RCC_ClockConfig+0x132>
 8001eda:	e024      	b.n	8001f26 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d11b      	bne.n	8001f1c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ee4:	e009      	b.n	8001efa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee6:	f7ff f853 	bl	8000f90 <HAL_GetTick>
 8001eea:	0002      	movs	r2, r0
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	4a42      	ldr	r2, [pc, #264]	; (8001ffc <HAL_RCC_ClockConfig+0x274>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e07a      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001efa:	4b41      	ldr	r3, [pc, #260]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	220c      	movs	r2, #12
 8001f00:	4013      	ands	r3, r2
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d1ef      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0x15e>
 8001f06:	e00e      	b.n	8001f26 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f08:	f7ff f842 	bl	8000f90 <HAL_GetTick>
 8001f0c:	0002      	movs	r2, r0
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	4a3a      	ldr	r2, [pc, #232]	; (8001ffc <HAL_RCC_ClockConfig+0x274>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e069      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f1c:	4b38      	ldr	r3, [pc, #224]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	220c      	movs	r2, #12
 8001f22:	4013      	ands	r3, r2
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f26:	4b34      	ldr	r3, [pc, #208]	; (8001ff8 <HAL_RCC_ClockConfig+0x270>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d21e      	bcs.n	8001f72 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f34:	4b30      	ldr	r3, [pc, #192]	; (8001ff8 <HAL_RCC_ClockConfig+0x270>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	4393      	bics	r3, r2
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <HAL_RCC_ClockConfig+0x270>)
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f46:	f7ff f823 	bl	8000f90 <HAL_GetTick>
 8001f4a:	0003      	movs	r3, r0
 8001f4c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4e:	e009      	b.n	8001f64 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f50:	f7ff f81e 	bl	8000f90 <HAL_GetTick>
 8001f54:	0002      	movs	r2, r0
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	4a28      	ldr	r2, [pc, #160]	; (8001ffc <HAL_RCC_ClockConfig+0x274>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e045      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f64:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <HAL_RCC_ClockConfig+0x270>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d1ee      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2204      	movs	r2, #4
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d009      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f7c:	4b20      	ldr	r3, [pc, #128]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	4a20      	ldr	r2, [pc, #128]	; (8002004 <HAL_RCC_ClockConfig+0x27c>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	0019      	movs	r1, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2208      	movs	r2, #8
 8001f96:	4013      	ands	r3, r2
 8001f98:	d00a      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f9a:	4b19      	ldr	r3, [pc, #100]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	4a1a      	ldr	r2, [pc, #104]	; (8002008 <HAL_RCC_ClockConfig+0x280>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	0019      	movs	r1, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	00da      	lsls	r2, r3, #3
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001fac:	430a      	orrs	r2, r1
 8001fae:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fb0:	f000 f832 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8001fb4:	0001      	movs	r1, r0
 8001fb6:	4b12      	ldr	r3, [pc, #72]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	091b      	lsrs	r3, r3, #4
 8001fbc:	220f      	movs	r2, #15
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	4a12      	ldr	r2, [pc, #72]	; (800200c <HAL_RCC_ClockConfig+0x284>)
 8001fc2:	5cd3      	ldrb	r3, [r2, r3]
 8001fc4:	000a      	movs	r2, r1
 8001fc6:	40da      	lsrs	r2, r3
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <HAL_RCC_ClockConfig+0x288>)
 8001fca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <HAL_RCC_ClockConfig+0x28c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	250b      	movs	r5, #11
 8001fd2:	197c      	adds	r4, r7, r5
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f7fe ff95 	bl	8000f04 <HAL_InitTick>
 8001fda:	0003      	movs	r3, r0
 8001fdc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001fde:	197b      	adds	r3, r7, r5
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 8001fe6:	230b      	movs	r3, #11
 8001fe8:	18fb      	adds	r3, r7, r3
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	e000      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	b004      	add	sp, #16
 8001ff6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ff8:	40022000 	.word	0x40022000
 8001ffc:	00001388 	.word	0x00001388
 8002000:	40021000 	.word	0x40021000
 8002004:	fffff8ff 	.word	0xfffff8ff
 8002008:	ffffc7ff 	.word	0xffffc7ff
 800200c:	08003834 	.word	0x08003834
 8002010:	20000004 	.word	0x20000004
 8002014:	20000008 	.word	0x20000008

08002018 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201a:	b08f      	sub	sp, #60	; 0x3c
 800201c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800201e:	4b4a      	ldr	r3, [pc, #296]	; (8002148 <HAL_RCC_GetSysClockFreq+0x130>)
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002026:	230c      	movs	r3, #12
 8002028:	4013      	ands	r3, r2
 800202a:	2b08      	cmp	r3, #8
 800202c:	d00f      	beq.n	800204e <HAL_RCC_GetSysClockFreq+0x36>
 800202e:	2b0c      	cmp	r3, #12
 8002030:	d010      	beq.n	8002054 <HAL_RCC_GetSysClockFreq+0x3c>
 8002032:	2b04      	cmp	r3, #4
 8002034:	d000      	beq.n	8002038 <HAL_RCC_GetSysClockFreq+0x20>
 8002036:	e073      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002038:	4b43      	ldr	r3, [pc, #268]	; (8002148 <HAL_RCC_GetSysClockFreq+0x130>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2210      	movs	r2, #16
 800203e:	4013      	ands	r3, r2
 8002040:	d002      	beq.n	8002048 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002042:	4b42      	ldr	r3, [pc, #264]	; (800214c <HAL_RCC_GetSysClockFreq+0x134>)
 8002044:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002046:	e079      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8002048:	4b41      	ldr	r3, [pc, #260]	; (8002150 <HAL_RCC_GetSysClockFreq+0x138>)
 800204a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800204c:	e076      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800204e:	4b41      	ldr	r3, [pc, #260]	; (8002154 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002050:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002052:	e073      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002056:	0c9a      	lsrs	r2, r3, #18
 8002058:	230f      	movs	r3, #15
 800205a:	401a      	ands	r2, r3
 800205c:	4b3e      	ldr	r3, [pc, #248]	; (8002158 <HAL_RCC_GetSysClockFreq+0x140>)
 800205e:	5c9b      	ldrb	r3, [r3, r2]
 8002060:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002064:	0d9a      	lsrs	r2, r3, #22
 8002066:	2303      	movs	r3, #3
 8002068:	4013      	ands	r3, r2
 800206a:	3301      	adds	r3, #1
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800206e:	4b36      	ldr	r3, [pc, #216]	; (8002148 <HAL_RCC_GetSysClockFreq+0x130>)
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	025b      	lsls	r3, r3, #9
 8002076:	4013      	ands	r3, r2
 8002078:	d019      	beq.n	80020ae <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800207a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	4a34      	ldr	r2, [pc, #208]	; (8002154 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002084:	2300      	movs	r3, #0
 8002086:	69b8      	ldr	r0, [r7, #24]
 8002088:	69f9      	ldr	r1, [r7, #28]
 800208a:	f7fe f8e9 	bl	8000260 <__aeabi_lmul>
 800208e:	0003      	movs	r3, r0
 8002090:	000c      	movs	r4, r1
 8002092:	0018      	movs	r0, r3
 8002094:	0021      	movs	r1, r4
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f7fe f8bd 	bl	8000220 <__aeabi_uldivmod>
 80020a6:	0003      	movs	r3, r0
 80020a8:	000c      	movs	r4, r1
 80020aa:	637b      	str	r3, [r7, #52]	; 0x34
 80020ac:	e035      	b.n	800211a <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80020ae:	4b26      	ldr	r3, [pc, #152]	; (8002148 <HAL_RCC_GetSysClockFreq+0x130>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2210      	movs	r2, #16
 80020b4:	4013      	ands	r3, r2
 80020b6:	d019      	beq.n	80020ec <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80020b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	4a22      	ldr	r2, [pc, #136]	; (800214c <HAL_RCC_GetSysClockFreq+0x134>)
 80020c2:	2300      	movs	r3, #0
 80020c4:	68b8      	ldr	r0, [r7, #8]
 80020c6:	68f9      	ldr	r1, [r7, #12]
 80020c8:	f7fe f8ca 	bl	8000260 <__aeabi_lmul>
 80020cc:	0003      	movs	r3, r0
 80020ce:	000c      	movs	r4, r1
 80020d0:	0018      	movs	r0, r3
 80020d2:	0021      	movs	r1, r4
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	2300      	movs	r3, #0
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f7fe f89e 	bl	8000220 <__aeabi_uldivmod>
 80020e4:	0003      	movs	r3, r0
 80020e6:	000c      	movs	r4, r1
 80020e8:	637b      	str	r3, [r7, #52]	; 0x34
 80020ea:	e016      	b.n	800211a <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80020ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ee:	0018      	movs	r0, r3
 80020f0:	2300      	movs	r3, #0
 80020f2:	0019      	movs	r1, r3
 80020f4:	4a16      	ldr	r2, [pc, #88]	; (8002150 <HAL_RCC_GetSysClockFreq+0x138>)
 80020f6:	2300      	movs	r3, #0
 80020f8:	f7fe f8b2 	bl	8000260 <__aeabi_lmul>
 80020fc:	0003      	movs	r3, r0
 80020fe:	000c      	movs	r4, r1
 8002100:	0018      	movs	r0, r3
 8002102:	0021      	movs	r1, r4
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	001d      	movs	r5, r3
 8002108:	2300      	movs	r3, #0
 800210a:	001e      	movs	r6, r3
 800210c:	002a      	movs	r2, r5
 800210e:	0033      	movs	r3, r6
 8002110:	f7fe f886 	bl	8000220 <__aeabi_uldivmod>
 8002114:	0003      	movs	r3, r0
 8002116:	000c      	movs	r4, r1
 8002118:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800211a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800211e:	e00d      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002120:	4b09      	ldr	r3, [pc, #36]	; (8002148 <HAL_RCC_GetSysClockFreq+0x130>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	0b5b      	lsrs	r3, r3, #13
 8002126:	2207      	movs	r2, #7
 8002128:	4013      	ands	r3, r2
 800212a:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800212c:	6a3b      	ldr	r3, [r7, #32]
 800212e:	3301      	adds	r3, #1
 8002130:	2280      	movs	r2, #128	; 0x80
 8002132:	0212      	lsls	r2, r2, #8
 8002134:	409a      	lsls	r2, r3
 8002136:	0013      	movs	r3, r2
 8002138:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800213a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800213c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800213e:	0018      	movs	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	b00f      	add	sp, #60	; 0x3c
 8002144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	40021000 	.word	0x40021000
 800214c:	003d0900 	.word	0x003d0900
 8002150:	00f42400 	.word	0x00f42400
 8002154:	007a1200 	.word	0x007a1200
 8002158:	0800384c 	.word	0x0800384c

0800215c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002160:	4b02      	ldr	r3, [pc, #8]	; (800216c <HAL_RCC_GetHCLKFreq+0x10>)
 8002162:	681b      	ldr	r3, [r3, #0]
}
 8002164:	0018      	movs	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	20000004 	.word	0x20000004

08002170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002174:	f7ff fff2 	bl	800215c <HAL_RCC_GetHCLKFreq>
 8002178:	0001      	movs	r1, r0
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_RCC_GetPCLK1Freq+0x24>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	0a1b      	lsrs	r3, r3, #8
 8002180:	2207      	movs	r2, #7
 8002182:	4013      	ands	r3, r2
 8002184:	4a04      	ldr	r2, [pc, #16]	; (8002198 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002186:	5cd3      	ldrb	r3, [r2, r3]
 8002188:	40d9      	lsrs	r1, r3
 800218a:	000b      	movs	r3, r1
}
 800218c:	0018      	movs	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	40021000 	.word	0x40021000
 8002198:	08003844 	.word	0x08003844

0800219c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021a0:	f7ff ffdc 	bl	800215c <HAL_RCC_GetHCLKFreq>
 80021a4:	0001      	movs	r1, r0
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	0adb      	lsrs	r3, r3, #11
 80021ac:	2207      	movs	r2, #7
 80021ae:	4013      	ands	r3, r2
 80021b0:	4a04      	ldr	r2, [pc, #16]	; (80021c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021b2:	5cd3      	ldrb	r3, [r2, r3]
 80021b4:	40d9      	lsrs	r1, r3
 80021b6:	000b      	movs	r3, r1
}
 80021b8:	0018      	movs	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	40021000 	.word	0x40021000
 80021c4:	08003844 	.word	0x08003844

080021c8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80021d0:	2317      	movs	r3, #23
 80021d2:	18fb      	adds	r3, r7, r3
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2220      	movs	r2, #32
 80021de:	4013      	ands	r3, r2
 80021e0:	d100      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80021e2:	e0c3      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021e4:	4b99      	ldr	r3, [pc, #612]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80021e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021e8:	2380      	movs	r3, #128	; 0x80
 80021ea:	055b      	lsls	r3, r3, #21
 80021ec:	4013      	ands	r3, r2
 80021ee:	d10a      	bne.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f0:	4b96      	ldr	r3, [pc, #600]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80021f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021f4:	4b95      	ldr	r3, [pc, #596]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80021f6:	2180      	movs	r1, #128	; 0x80
 80021f8:	0549      	lsls	r1, r1, #21
 80021fa:	430a      	orrs	r2, r1
 80021fc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80021fe:	2317      	movs	r3, #23
 8002200:	18fb      	adds	r3, r7, r3
 8002202:	2201      	movs	r2, #1
 8002204:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002206:	4b92      	ldr	r3, [pc, #584]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	2380      	movs	r3, #128	; 0x80
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	4013      	ands	r3, r2
 8002210:	d11a      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002212:	4b8f      	ldr	r3, [pc, #572]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	4b8e      	ldr	r3, [pc, #568]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002218:	2180      	movs	r1, #128	; 0x80
 800221a:	0049      	lsls	r1, r1, #1
 800221c:	430a      	orrs	r2, r1
 800221e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002220:	f7fe feb6 	bl	8000f90 <HAL_GetTick>
 8002224:	0003      	movs	r3, r0
 8002226:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002228:	e008      	b.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222a:	f7fe feb1 	bl	8000f90 <HAL_GetTick>
 800222e:	0002      	movs	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b64      	cmp	r3, #100	; 0x64
 8002236:	d901      	bls.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e102      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223c:	4b84      	ldr	r3, [pc, #528]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	2380      	movs	r3, #128	; 0x80
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	4013      	ands	r3, r2
 8002246:	d0f0      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002248:	4b80      	ldr	r3, [pc, #512]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	23c0      	movs	r3, #192	; 0xc0
 800224e:	039b      	lsls	r3, r3, #14
 8002250:	4013      	ands	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	23c0      	movs	r3, #192	; 0xc0
 800225a:	039b      	lsls	r3, r3, #14
 800225c:	4013      	ands	r3, r2
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	429a      	cmp	r2, r3
 8002262:	d013      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	23c0      	movs	r3, #192	; 0xc0
 800226a:	029b      	lsls	r3, r3, #10
 800226c:	401a      	ands	r2, r3
 800226e:	23c0      	movs	r3, #192	; 0xc0
 8002270:	029b      	lsls	r3, r3, #10
 8002272:	429a      	cmp	r2, r3
 8002274:	d10a      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002276:	4b75      	ldr	r3, [pc, #468]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	029b      	lsls	r3, r3, #10
 800227e:	401a      	ands	r2, r3
 8002280:	2380      	movs	r3, #128	; 0x80
 8002282:	029b      	lsls	r3, r3, #10
 8002284:	429a      	cmp	r2, r3
 8002286:	d101      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e0da      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800228c:	4b6f      	ldr	r3, [pc, #444]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800228e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002290:	23c0      	movs	r3, #192	; 0xc0
 8002292:	029b      	lsls	r3, r3, #10
 8002294:	4013      	ands	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d03b      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	23c0      	movs	r3, #192	; 0xc0
 80022a4:	029b      	lsls	r3, r3, #10
 80022a6:	4013      	ands	r3, r2
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d033      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2220      	movs	r2, #32
 80022b4:	4013      	ands	r3, r2
 80022b6:	d02e      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80022b8:	4b64      	ldr	r3, [pc, #400]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80022ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022bc:	4a65      	ldr	r2, [pc, #404]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80022be:	4013      	ands	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022c2:	4b62      	ldr	r3, [pc, #392]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80022c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022c6:	4b61      	ldr	r3, [pc, #388]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80022c8:	2180      	movs	r1, #128	; 0x80
 80022ca:	0309      	lsls	r1, r1, #12
 80022cc:	430a      	orrs	r2, r1
 80022ce:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022d0:	4b5e      	ldr	r3, [pc, #376]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80022d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022d4:	4b5d      	ldr	r3, [pc, #372]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80022d6:	4960      	ldr	r1, [pc, #384]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80022d8:	400a      	ands	r2, r1
 80022da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80022dc:	4b5b      	ldr	r3, [pc, #364]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	4013      	ands	r3, r2
 80022ea:	d014      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ec:	f7fe fe50 	bl	8000f90 <HAL_GetTick>
 80022f0:	0003      	movs	r3, r0
 80022f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022f4:	e009      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f6:	f7fe fe4b 	bl	8000f90 <HAL_GetTick>
 80022fa:	0002      	movs	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	4a56      	ldr	r2, [pc, #344]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d901      	bls.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e09b      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800230a:	4b50      	ldr	r3, [pc, #320]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800230c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4013      	ands	r3, r2
 8002314:	d0ef      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	23c0      	movs	r3, #192	; 0xc0
 800231c:	029b      	lsls	r3, r3, #10
 800231e:	401a      	ands	r2, r3
 8002320:	23c0      	movs	r3, #192	; 0xc0
 8002322:	029b      	lsls	r3, r3, #10
 8002324:	429a      	cmp	r2, r3
 8002326:	d10c      	bne.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002328:	4b48      	ldr	r3, [pc, #288]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a4c      	ldr	r2, [pc, #304]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800232e:	4013      	ands	r3, r2
 8002330:	0019      	movs	r1, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	23c0      	movs	r3, #192	; 0xc0
 8002338:	039b      	lsls	r3, r3, #14
 800233a:	401a      	ands	r2, r3
 800233c:	4b43      	ldr	r3, [pc, #268]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800233e:	430a      	orrs	r2, r1
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	4b42      	ldr	r3, [pc, #264]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002344:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	23c0      	movs	r3, #192	; 0xc0
 800234c:	029b      	lsls	r3, r3, #10
 800234e:	401a      	ands	r2, r3
 8002350:	4b3e      	ldr	r3, [pc, #248]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002352:	430a      	orrs	r2, r1
 8002354:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002356:	2317      	movs	r3, #23
 8002358:	18fb      	adds	r3, r7, r3
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d105      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002360:	4b3a      	ldr	r3, [pc, #232]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002362:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002364:	4b39      	ldr	r3, [pc, #228]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002366:	493f      	ldr	r1, [pc, #252]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002368:	400a      	ands	r2, r1
 800236a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2201      	movs	r2, #1
 8002372:	4013      	ands	r3, r2
 8002374:	d009      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002376:	4b35      	ldr	r3, [pc, #212]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237a:	2203      	movs	r2, #3
 800237c:	4393      	bics	r3, r2
 800237e:	0019      	movs	r1, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	4b31      	ldr	r3, [pc, #196]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002386:	430a      	orrs	r2, r1
 8002388:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2202      	movs	r2, #2
 8002390:	4013      	ands	r3, r2
 8002392:	d009      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002394:	4b2d      	ldr	r3, [pc, #180]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002398:	220c      	movs	r2, #12
 800239a:	4393      	bics	r3, r2
 800239c:	0019      	movs	r1, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	4b2a      	ldr	r3, [pc, #168]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80023a4:	430a      	orrs	r2, r1
 80023a6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2204      	movs	r2, #4
 80023ae:	4013      	ands	r3, r2
 80023b0:	d009      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023b2:	4b26      	ldr	r3, [pc, #152]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80023b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b6:	4a2c      	ldr	r2, [pc, #176]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	0019      	movs	r1, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	4b22      	ldr	r3, [pc, #136]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80023c2:	430a      	orrs	r2, r1
 80023c4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2208      	movs	r2, #8
 80023cc:	4013      	ands	r3, r2
 80023ce:	d009      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023d0:	4b1e      	ldr	r3, [pc, #120]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80023d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d4:	4a25      	ldr	r2, [pc, #148]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	0019      	movs	r1, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695a      	ldr	r2, [r3, #20]
 80023de:	4b1b      	ldr	r3, [pc, #108]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80023e0:	430a      	orrs	r2, r1
 80023e2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4013      	ands	r3, r2
 80023ee:	d009      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023f0:	4b16      	ldr	r3, [pc, #88]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80023f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f4:	4a17      	ldr	r2, [pc, #92]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80023f6:	4013      	ands	r3, r2
 80023f8:	0019      	movs	r1, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699a      	ldr	r2, [r3, #24]
 80023fe:	4b13      	ldr	r3, [pc, #76]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002400:	430a      	orrs	r2, r1
 8002402:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2240      	movs	r2, #64	; 0x40
 800240a:	4013      	ands	r3, r2
 800240c:	d009      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800240e:	4b0f      	ldr	r3, [pc, #60]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002412:	4a17      	ldr	r2, [pc, #92]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002414:	4013      	ands	r3, r2
 8002416:	0019      	movs	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1a      	ldr	r2, [r3, #32]
 800241c:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800241e:	430a      	orrs	r2, r1
 8002420:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2280      	movs	r2, #128	; 0x80
 8002428:	4013      	ands	r3, r2
 800242a:	d009      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800242c:	4b07      	ldr	r3, [pc, #28]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800242e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002430:	4a10      	ldr	r2, [pc, #64]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002432:	4013      	ands	r3, r2
 8002434:	0019      	movs	r1, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69da      	ldr	r2, [r3, #28]
 800243a:	4b04      	ldr	r3, [pc, #16]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800243c:	430a      	orrs	r2, r1
 800243e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	0018      	movs	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	b006      	add	sp, #24
 8002448:	bd80      	pop	{r7, pc}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	40021000 	.word	0x40021000
 8002450:	40007000 	.word	0x40007000
 8002454:	fffcffff 	.word	0xfffcffff
 8002458:	fff7ffff 	.word	0xfff7ffff
 800245c:	00001388 	.word	0x00001388
 8002460:	ffcfffff 	.word	0xffcfffff
 8002464:	efffffff 	.word	0xefffffff
 8002468:	fffff3ff 	.word	0xfffff3ff
 800246c:	ffffcfff 	.word	0xffffcfff
 8002470:	fbffffff 	.word	0xfbffffff
 8002474:	fff3ffff 	.word	0xfff3ffff

08002478 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e044      	b.n	8002514 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800248e:	2b00      	cmp	r3, #0
 8002490:	d107      	bne.n	80024a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2274      	movs	r2, #116	; 0x74
 8002496:	2100      	movs	r1, #0
 8002498:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	0018      	movs	r0, r3
 800249e:	f7fe fc71 	bl	8000d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2224      	movs	r2, #36	; 0x24
 80024a6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2101      	movs	r1, #1
 80024b4:	438a      	bics	r2, r1
 80024b6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	0018      	movs	r0, r3
 80024bc:	f000 fb56 	bl	8002b6c <UART_SetConfig>
 80024c0:	0003      	movs	r3, r0
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e024      	b.n	8002514 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	0018      	movs	r0, r3
 80024d6:	f000 fe05 	bl	80030e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	490d      	ldr	r1, [pc, #52]	; (800251c <HAL_UART_Init+0xa4>)
 80024e6:	400a      	ands	r2, r1
 80024e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	212a      	movs	r1, #42	; 0x2a
 80024f6:	438a      	bics	r2, r1
 80024f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2101      	movs	r1, #1
 8002506:	430a      	orrs	r2, r1
 8002508:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	0018      	movs	r0, r3
 800250e:	f000 fe9d 	bl	800324c <UART_CheckIdleState>
 8002512:	0003      	movs	r3, r0
}
 8002514:	0018      	movs	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	b002      	add	sp, #8
 800251a:	bd80      	pop	{r7, pc}
 800251c:	ffffb7ff 	.word	0xffffb7ff

08002520 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	; 0x28
 8002524:	af02      	add	r7, sp, #8
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	603b      	str	r3, [r7, #0]
 800252c:	1dbb      	adds	r3, r7, #6
 800252e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002534:	2b20      	cmp	r3, #32
 8002536:	d000      	beq.n	800253a <HAL_UART_Transmit+0x1a>
 8002538:	e095      	b.n	8002666 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_UART_Transmit+0x28>
 8002540:	1dbb      	adds	r3, r7, #6
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e08d      	b.n	8002668 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	015b      	lsls	r3, r3, #5
 8002554:	429a      	cmp	r2, r3
 8002556:	d109      	bne.n	800256c <HAL_UART_Transmit+0x4c>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d105      	bne.n	800256c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2201      	movs	r2, #1
 8002564:	4013      	ands	r3, r2
 8002566:	d001      	beq.n	800256c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e07d      	b.n	8002668 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2274      	movs	r2, #116	; 0x74
 8002570:	5c9b      	ldrb	r3, [r3, r2]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d101      	bne.n	800257a <HAL_UART_Transmit+0x5a>
 8002576:	2302      	movs	r3, #2
 8002578:	e076      	b.n	8002668 <HAL_UART_Transmit+0x148>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2274      	movs	r2, #116	; 0x74
 800257e:	2101      	movs	r1, #1
 8002580:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2280      	movs	r2, #128	; 0x80
 8002586:	2100      	movs	r1, #0
 8002588:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2221      	movs	r2, #33	; 0x21
 800258e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002590:	f7fe fcfe 	bl	8000f90 <HAL_GetTick>
 8002594:	0003      	movs	r3, r0
 8002596:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	1dba      	adds	r2, r7, #6
 800259c:	2150      	movs	r1, #80	; 0x50
 800259e:	8812      	ldrh	r2, [r2, #0]
 80025a0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1dba      	adds	r2, r7, #6
 80025a6:	2152      	movs	r1, #82	; 0x52
 80025a8:	8812      	ldrh	r2, [r2, #0]
 80025aa:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	015b      	lsls	r3, r3, #5
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d108      	bne.n	80025ca <HAL_UART_Transmit+0xaa>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d104      	bne.n	80025ca <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	61bb      	str	r3, [r7, #24]
 80025c8:	e003      	b.n	80025d2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2274      	movs	r2, #116	; 0x74
 80025d6:	2100      	movs	r1, #0
 80025d8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80025da:	e02c      	b.n	8002636 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	0013      	movs	r3, r2
 80025e6:	2200      	movs	r2, #0
 80025e8:	2180      	movs	r1, #128	; 0x80
 80025ea:	f000 fe79 	bl	80032e0 <UART_WaitOnFlagUntilTimeout>
 80025ee:	1e03      	subs	r3, r0, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e038      	b.n	8002668 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10b      	bne.n	8002614 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	001a      	movs	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	05d2      	lsls	r2, r2, #23
 8002608:	0dd2      	lsrs	r2, r2, #23
 800260a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	3302      	adds	r3, #2
 8002610:	61bb      	str	r3, [r7, #24]
 8002612:	e007      	b.n	8002624 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	781a      	ldrb	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3301      	adds	r3, #1
 8002622:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2252      	movs	r2, #82	; 0x52
 8002628:	5a9b      	ldrh	r3, [r3, r2]
 800262a:	b29b      	uxth	r3, r3
 800262c:	3b01      	subs	r3, #1
 800262e:	b299      	uxth	r1, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2252      	movs	r2, #82	; 0x52
 8002634:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2252      	movs	r2, #82	; 0x52
 800263a:	5a9b      	ldrh	r3, [r3, r2]
 800263c:	b29b      	uxth	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1cc      	bne.n	80025dc <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	0013      	movs	r3, r2
 800264c:	2200      	movs	r2, #0
 800264e:	2140      	movs	r1, #64	; 0x40
 8002650:	f000 fe46 	bl	80032e0 <UART_WaitOnFlagUntilTimeout>
 8002654:	1e03      	subs	r3, r0, #0
 8002656:	d001      	beq.n	800265c <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e005      	b.n	8002668 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2220      	movs	r2, #32
 8002660:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	e000      	b.n	8002668 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002666:	2302      	movs	r3, #2
  }
}
 8002668:	0018      	movs	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	b008      	add	sp, #32
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	1dbb      	adds	r3, r7, #6
 800267c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002682:	2b20      	cmp	r3, #32
 8002684:	d144      	bne.n	8002710 <HAL_UART_Receive_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_UART_Receive_IT+0x24>
 800268c:	1dbb      	adds	r3, r7, #6
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e03c      	b.n	8002712 <HAL_UART_Receive_IT+0xa2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	015b      	lsls	r3, r3, #5
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d109      	bne.n	80026b8 <HAL_UART_Receive_IT+0x48>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d105      	bne.n	80026b8 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2201      	movs	r2, #1
 80026b0:	4013      	ands	r3, r2
 80026b2:	d001      	beq.n	80026b8 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e02c      	b.n	8002712 <HAL_UART_Receive_IT+0xa2>
      }
    }

    __HAL_LOCK(huart);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2274      	movs	r2, #116	; 0x74
 80026bc:	5c9b      	ldrb	r3, [r3, r2]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d101      	bne.n	80026c6 <HAL_UART_Receive_IT+0x56>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e025      	b.n	8002712 <HAL_UART_Receive_IT+0xa2>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2274      	movs	r2, #116	; 0x74
 80026ca:	2101      	movs	r1, #1
 80026cc:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a10      	ldr	r2, [pc, #64]	; (800271c <HAL_UART_Receive_IT+0xac>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d00f      	beq.n	80026fe <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	041b      	lsls	r3, r3, #16
 80026e8:	4013      	ands	r3, r2
 80026ea:	d008      	beq.n	80026fe <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2180      	movs	r1, #128	; 0x80
 80026f8:	04c9      	lsls	r1, r1, #19
 80026fa:	430a      	orrs	r2, r1
 80026fc:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80026fe:	1dbb      	adds	r3, r7, #6
 8002700:	881a      	ldrh	r2, [r3, #0]
 8002702:	68b9      	ldr	r1, [r7, #8]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	0018      	movs	r0, r3
 8002708:	f000 fe68 	bl	80033dc <UART_Start_Receive_IT>
 800270c:	0003      	movs	r3, r0
 800270e:	e000      	b.n	8002712 <HAL_UART_Receive_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8002710:	2302      	movs	r3, #2
  }
}
 8002712:	0018      	movs	r0, r3
 8002714:	46bd      	mov	sp, r7
 8002716:	b004      	add	sp, #16
 8002718:	bd80      	pop	{r7, pc}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	40004800 	.word	0x40004800

08002720 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	4ab6      	ldr	r2, [pc, #728]	; (8002a1c <HAL_UART_IRQHandler+0x2fc>)
 8002744:	4013      	ands	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d112      	bne.n	8002774 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	2220      	movs	r2, #32
 8002752:	4013      	ands	r3, r2
 8002754:	d00e      	beq.n	8002774 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	2220      	movs	r2, #32
 800275a:	4013      	ands	r3, r2
 800275c:	d00a      	beq.n	8002774 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002762:	2b00      	cmp	r3, #0
 8002764:	d100      	bne.n	8002768 <HAL_UART_IRQHandler+0x48>
 8002766:	e1d6      	b.n	8002b16 <HAL_UART_IRQHandler+0x3f6>
      {
        huart->RxISR(huart);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	0010      	movs	r0, r2
 8002770:	4798      	blx	r3
      }
      return;
 8002772:	e1d0      	b.n	8002b16 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d100      	bne.n	800277c <HAL_UART_IRQHandler+0x5c>
 800277a:	e0d9      	b.n	8002930 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	2201      	movs	r2, #1
 8002780:	4013      	ands	r3, r2
 8002782:	d104      	bne.n	800278e <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	4aa6      	ldr	r2, [pc, #664]	; (8002a20 <HAL_UART_IRQHandler+0x300>)
 8002788:	4013      	ands	r3, r2
 800278a:	d100      	bne.n	800278e <HAL_UART_IRQHandler+0x6e>
 800278c:	e0d0      	b.n	8002930 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	2201      	movs	r2, #1
 8002792:	4013      	ands	r3, r2
 8002794:	d010      	beq.n	80027b8 <HAL_UART_IRQHandler+0x98>
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	2380      	movs	r3, #128	; 0x80
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	4013      	ands	r3, r2
 800279e:	d00b      	beq.n	80027b8 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2201      	movs	r2, #1
 80027a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2280      	movs	r2, #128	; 0x80
 80027ac:	589b      	ldr	r3, [r3, r2]
 80027ae:	2201      	movs	r2, #1
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2180      	movs	r1, #128	; 0x80
 80027b6:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	2202      	movs	r2, #2
 80027bc:	4013      	ands	r3, r2
 80027be:	d00f      	beq.n	80027e0 <HAL_UART_IRQHandler+0xc0>
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	2201      	movs	r2, #1
 80027c4:	4013      	ands	r3, r2
 80027c6:	d00b      	beq.n	80027e0 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2202      	movs	r2, #2
 80027ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2280      	movs	r2, #128	; 0x80
 80027d4:	589b      	ldr	r3, [r3, r2]
 80027d6:	2204      	movs	r2, #4
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2180      	movs	r1, #128	; 0x80
 80027de:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	2204      	movs	r2, #4
 80027e4:	4013      	ands	r3, r2
 80027e6:	d00f      	beq.n	8002808 <HAL_UART_IRQHandler+0xe8>
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2201      	movs	r2, #1
 80027ec:	4013      	ands	r3, r2
 80027ee:	d00b      	beq.n	8002808 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2204      	movs	r2, #4
 80027f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2280      	movs	r2, #128	; 0x80
 80027fc:	589b      	ldr	r3, [r3, r2]
 80027fe:	2202      	movs	r2, #2
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2180      	movs	r1, #128	; 0x80
 8002806:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	2208      	movs	r2, #8
 800280c:	4013      	ands	r3, r2
 800280e:	d013      	beq.n	8002838 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	2220      	movs	r2, #32
 8002814:	4013      	ands	r3, r2
 8002816:	d103      	bne.n	8002820 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	2201      	movs	r2, #1
 800281c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800281e:	d00b      	beq.n	8002838 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2208      	movs	r2, #8
 8002826:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2280      	movs	r2, #128	; 0x80
 800282c:	589b      	ldr	r3, [r3, r2]
 800282e:	2208      	movs	r2, #8
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2180      	movs	r1, #128	; 0x80
 8002836:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002838:	69fa      	ldr	r2, [r7, #28]
 800283a:	2380      	movs	r3, #128	; 0x80
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	4013      	ands	r3, r2
 8002840:	d011      	beq.n	8002866 <HAL_UART_IRQHandler+0x146>
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	04db      	lsls	r3, r3, #19
 8002848:	4013      	ands	r3, r2
 800284a:	d00c      	beq.n	8002866 <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2280      	movs	r2, #128	; 0x80
 8002852:	0112      	lsls	r2, r2, #4
 8002854:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2280      	movs	r2, #128	; 0x80
 800285a:	589b      	ldr	r3, [r3, r2]
 800285c:	2220      	movs	r2, #32
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2180      	movs	r1, #128	; 0x80
 8002864:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2280      	movs	r2, #128	; 0x80
 800286a:	589b      	ldr	r3, [r3, r2]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d100      	bne.n	8002872 <HAL_UART_IRQHandler+0x152>
 8002870:	e153      	b.n	8002b1a <HAL_UART_IRQHandler+0x3fa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	2220      	movs	r2, #32
 8002876:	4013      	ands	r3, r2
 8002878:	d00c      	beq.n	8002894 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	2220      	movs	r2, #32
 800287e:	4013      	ands	r3, r2
 8002880:	d008      	beq.n	8002894 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002886:	2b00      	cmp	r3, #0
 8002888:	d004      	beq.n	8002894 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	0010      	movs	r0, r2
 8002892:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2280      	movs	r2, #128	; 0x80
 8002898:	589b      	ldr	r3, [r3, r2]
 800289a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2240      	movs	r2, #64	; 0x40
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b40      	cmp	r3, #64	; 0x40
 80028a8:	d003      	beq.n	80028b2 <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2228      	movs	r2, #40	; 0x28
 80028ae:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028b0:	d033      	beq.n	800291a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	0018      	movs	r0, r3
 80028b6:	f000 fe1f 	bl	80034f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2240      	movs	r2, #64	; 0x40
 80028c2:	4013      	ands	r3, r2
 80028c4:	2b40      	cmp	r3, #64	; 0x40
 80028c6:	d123      	bne.n	8002910 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2140      	movs	r1, #64	; 0x40
 80028d4:	438a      	bics	r2, r1
 80028d6:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d012      	beq.n	8002906 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e4:	4a4f      	ldr	r2, [pc, #316]	; (8002a24 <HAL_UART_IRQHandler+0x304>)
 80028e6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ec:	0018      	movs	r0, r3
 80028ee:	f7fe fc77 	bl	80011e0 <HAL_DMA_Abort_IT>
 80028f2:	1e03      	subs	r3, r0, #0
 80028f4:	d01a      	beq.n	800292c <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002900:	0018      	movs	r0, r3
 8002902:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002904:	e012      	b.n	800292c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	0018      	movs	r0, r3
 800290a:	f000 f91b 	bl	8002b44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800290e:	e00d      	b.n	800292c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	0018      	movs	r0, r3
 8002914:	f000 f916 	bl	8002b44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002918:	e008      	b.n	800292c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	0018      	movs	r0, r3
 800291e:	f000 f911 	bl	8002b44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2280      	movs	r2, #128	; 0x80
 8002926:	2100      	movs	r1, #0
 8002928:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800292a:	e0f6      	b.n	8002b1a <HAL_UART_IRQHandler+0x3fa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800292c:	46c0      	nop			; (mov r8, r8)
    return;
 800292e:	e0f4      	b.n	8002b1a <HAL_UART_IRQHandler+0x3fa>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002934:	2b01      	cmp	r3, #1
 8002936:	d000      	beq.n	800293a <HAL_UART_IRQHandler+0x21a>
 8002938:	e0b9      	b.n	8002aae <HAL_UART_IRQHandler+0x38e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	2210      	movs	r2, #16
 800293e:	4013      	ands	r3, r2
 8002940:	d100      	bne.n	8002944 <HAL_UART_IRQHandler+0x224>
 8002942:	e0b4      	b.n	8002aae <HAL_UART_IRQHandler+0x38e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2210      	movs	r2, #16
 8002948:	4013      	ands	r3, r2
 800294a:	d100      	bne.n	800294e <HAL_UART_IRQHandler+0x22e>
 800294c:	e0af      	b.n	8002aae <HAL_UART_IRQHandler+0x38e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2210      	movs	r2, #16
 8002954:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2240      	movs	r2, #64	; 0x40
 800295e:	4013      	ands	r3, r2
 8002960:	2b40      	cmp	r3, #64	; 0x40
 8002962:	d163      	bne.n	8002a2c <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	2108      	movs	r1, #8
 800296e:	187b      	adds	r3, r7, r1
 8002970:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8002972:	187b      	adds	r3, r7, r1
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d100      	bne.n	800297c <HAL_UART_IRQHandler+0x25c>
 800297a:	e0d0      	b.n	8002b1e <HAL_UART_IRQHandler+0x3fe>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2258      	movs	r2, #88	; 0x58
 8002980:	5a9b      	ldrh	r3, [r3, r2]
 8002982:	2208      	movs	r2, #8
 8002984:	18ba      	adds	r2, r7, r2
 8002986:	8812      	ldrh	r2, [r2, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d300      	bcc.n	800298e <HAL_UART_IRQHandler+0x26e>
 800298c:	e0c7      	b.n	8002b1e <HAL_UART_IRQHandler+0x3fe>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2208      	movs	r2, #8
 8002992:	18ba      	adds	r2, r7, r2
 8002994:	215a      	movs	r1, #90	; 0x5a
 8002996:	8812      	ldrh	r2, [r2, #0]
 8002998:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2220      	movs	r2, #32
 80029a4:	4013      	ands	r3, r2
 80029a6:	d12a      	bne.n	80029fe <HAL_UART_IRQHandler+0x2de>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	491d      	ldr	r1, [pc, #116]	; (8002a28 <HAL_UART_IRQHandler+0x308>)
 80029b4:	400a      	ands	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2101      	movs	r1, #1
 80029c4:	438a      	bics	r2, r1
 80029c6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2140      	movs	r1, #64	; 0x40
 80029d4:	438a      	bics	r2, r1
 80029d6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2220      	movs	r2, #32
 80029dc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2110      	movs	r1, #16
 80029f0:	438a      	bics	r2, r1
 80029f2:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f8:	0018      	movs	r0, r3
 80029fa:	f7fe fbb1 	bl	8001160 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2258      	movs	r2, #88	; 0x58
 8002a02:	5a9a      	ldrh	r2, [r3, r2]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	215a      	movs	r1, #90	; 0x5a
 8002a08:	5a5b      	ldrh	r3, [r3, r1]
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	0011      	movs	r1, r2
 8002a14:	0018      	movs	r0, r3
 8002a16:	f000 f89d 	bl	8002b54 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002a1a:	e080      	b.n	8002b1e <HAL_UART_IRQHandler+0x3fe>
 8002a1c:	0000080f 	.word	0x0000080f
 8002a20:	04000120 	.word	0x04000120
 8002a24:	08003559 	.word	0x08003559
 8002a28:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2258      	movs	r2, #88	; 0x58
 8002a30:	5a99      	ldrh	r1, [r3, r2]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	225a      	movs	r2, #90	; 0x5a
 8002a36:	5a9b      	ldrh	r3, [r3, r2]
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	230a      	movs	r3, #10
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	1a8a      	subs	r2, r1, r2
 8002a40:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	225a      	movs	r2, #90	; 0x5a
 8002a46:	5a9b      	ldrh	r3, [r3, r2]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d100      	bne.n	8002a50 <HAL_UART_IRQHandler+0x330>
 8002a4e:	e068      	b.n	8002b22 <HAL_UART_IRQHandler+0x402>
          &&(nb_rx_data > 0U) )
 8002a50:	230a      	movs	r3, #10
 8002a52:	18fb      	adds	r3, r7, r3
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d063      	beq.n	8002b22 <HAL_UART_IRQHandler+0x402>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4932      	ldr	r1, [pc, #200]	; (8002b30 <HAL_UART_IRQHandler+0x410>)
 8002a66:	400a      	ands	r2, r1
 8002a68:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2101      	movs	r1, #1
 8002a76:	438a      	bics	r2, r1
 8002a78:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2110      	movs	r1, #16
 8002a98:	438a      	bics	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a9c:	230a      	movs	r3, #10
 8002a9e:	18fb      	adds	r3, r7, r3
 8002aa0:	881a      	ldrh	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	0011      	movs	r1, r2
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f000 f854 	bl	8002b54 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002aac:	e039      	b.n	8002b22 <HAL_UART_IRQHandler+0x402>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002aae:	69fa      	ldr	r2, [r7, #28]
 8002ab0:	2380      	movs	r3, #128	; 0x80
 8002ab2:	035b      	lsls	r3, r3, #13
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d00e      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x3b6>
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	03db      	lsls	r3, r3, #15
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d009      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x3b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2280      	movs	r2, #128	; 0x80
 8002ac8:	0352      	lsls	r2, r2, #13
 8002aca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f000 fe60 	bl	8003794 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ad4:	e028      	b.n	8002b28 <HAL_UART_IRQHandler+0x408>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	2280      	movs	r2, #128	; 0x80
 8002ada:	4013      	ands	r3, r2
 8002adc:	d00d      	beq.n	8002afa <HAL_UART_IRQHandler+0x3da>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	2280      	movs	r2, #128	; 0x80
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d009      	beq.n	8002afa <HAL_UART_IRQHandler+0x3da>
  {
    if (huart->TxISR != NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d01b      	beq.n	8002b26 <HAL_UART_IRQHandler+0x406>
    {
      huart->TxISR(huart);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	0010      	movs	r0, r2
 8002af6:	4798      	blx	r3
    }
    return;
 8002af8:	e015      	b.n	8002b26 <HAL_UART_IRQHandler+0x406>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	2240      	movs	r2, #64	; 0x40
 8002afe:	4013      	ands	r3, r2
 8002b00:	d012      	beq.n	8002b28 <HAL_UART_IRQHandler+0x408>
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	2240      	movs	r2, #64	; 0x40
 8002b06:	4013      	ands	r3, r2
 8002b08:	d00e      	beq.n	8002b28 <HAL_UART_IRQHandler+0x408>
  {
    UART_EndTransmit_IT(huart);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f000 fd3a 	bl	8003586 <UART_EndTransmit_IT>
    return;
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	e008      	b.n	8002b28 <HAL_UART_IRQHandler+0x408>
      return;
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	e006      	b.n	8002b28 <HAL_UART_IRQHandler+0x408>
    return;
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	e004      	b.n	8002b28 <HAL_UART_IRQHandler+0x408>
      return;
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	e002      	b.n	8002b28 <HAL_UART_IRQHandler+0x408>
      return;
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	e000      	b.n	8002b28 <HAL_UART_IRQHandler+0x408>
    return;
 8002b26:	46c0      	nop			; (mov r8, r8)
  }

}
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	b008      	add	sp, #32
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	fffffedf 	.word	0xfffffedf

08002b34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002b3c:	46c0      	nop			; (mov r8, r8)
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	b002      	add	sp, #8
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002b4c:	46c0      	nop			; (mov r8, r8)
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	b002      	add	sp, #8
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	000a      	movs	r2, r1
 8002b5e:	1cbb      	adds	r3, r7, #2
 8002b60:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	46bd      	mov	sp, r7
 8002b66:	b002      	add	sp, #8
 8002b68:	bd80      	pop	{r7, pc}
	...

08002b6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b6c:	b5b0      	push	{r4, r5, r7, lr}
 8002b6e:	b08e      	sub	sp, #56	; 0x38
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b74:	231a      	movs	r3, #26
 8002b76:	2218      	movs	r2, #24
 8002b78:	4694      	mov	ip, r2
 8002b7a:	44bc      	add	ip, r7
 8002b7c:	4463      	add	r3, ip
 8002b7e:	2200      	movs	r2, #0
 8002b80:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	431a      	orrs	r2, r3
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4acb      	ldr	r2, [pc, #812]	; (8002ed0 <UART_SetConfig+0x364>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	0019      	movs	r1, r3
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bac:	430a      	orrs	r2, r1
 8002bae:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	4ac7      	ldr	r2, [pc, #796]	; (8002ed4 <UART_SetConfig+0x368>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	0019      	movs	r1, r3
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4ac1      	ldr	r2, [pc, #772]	; (8002ed8 <UART_SetConfig+0x36c>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d004      	beq.n	8002be2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bde:	4313      	orrs	r3, r2
 8002be0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4abc      	ldr	r2, [pc, #752]	; (8002edc <UART_SetConfig+0x370>)
 8002bea:	4013      	ands	r3, r2
 8002bec:	0019      	movs	r1, r3
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4ab8      	ldr	r2, [pc, #736]	; (8002ee0 <UART_SetConfig+0x374>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d134      	bne.n	8002c6c <UART_SetConfig+0x100>
 8002c02:	4bb8      	ldr	r3, [pc, #736]	; (8002ee4 <UART_SetConfig+0x378>)
 8002c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c06:	2203      	movs	r2, #3
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d015      	beq.n	8002c3a <UART_SetConfig+0xce>
 8002c0e:	d304      	bcc.n	8002c1a <UART_SetConfig+0xae>
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d00a      	beq.n	8002c2a <UART_SetConfig+0xbe>
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d018      	beq.n	8002c4a <UART_SetConfig+0xde>
 8002c18:	e01f      	b.n	8002c5a <UART_SetConfig+0xee>
 8002c1a:	231b      	movs	r3, #27
 8002c1c:	2218      	movs	r2, #24
 8002c1e:	4694      	mov	ip, r2
 8002c20:	44bc      	add	ip, r7
 8002c22:	4463      	add	r3, ip
 8002c24:	2201      	movs	r2, #1
 8002c26:	701a      	strb	r2, [r3, #0]
 8002c28:	e0c5      	b.n	8002db6 <UART_SetConfig+0x24a>
 8002c2a:	231b      	movs	r3, #27
 8002c2c:	2218      	movs	r2, #24
 8002c2e:	4694      	mov	ip, r2
 8002c30:	44bc      	add	ip, r7
 8002c32:	4463      	add	r3, ip
 8002c34:	2202      	movs	r2, #2
 8002c36:	701a      	strb	r2, [r3, #0]
 8002c38:	e0bd      	b.n	8002db6 <UART_SetConfig+0x24a>
 8002c3a:	231b      	movs	r3, #27
 8002c3c:	2218      	movs	r2, #24
 8002c3e:	4694      	mov	ip, r2
 8002c40:	44bc      	add	ip, r7
 8002c42:	4463      	add	r3, ip
 8002c44:	2204      	movs	r2, #4
 8002c46:	701a      	strb	r2, [r3, #0]
 8002c48:	e0b5      	b.n	8002db6 <UART_SetConfig+0x24a>
 8002c4a:	231b      	movs	r3, #27
 8002c4c:	2218      	movs	r2, #24
 8002c4e:	4694      	mov	ip, r2
 8002c50:	44bc      	add	ip, r7
 8002c52:	4463      	add	r3, ip
 8002c54:	2208      	movs	r2, #8
 8002c56:	701a      	strb	r2, [r3, #0]
 8002c58:	e0ad      	b.n	8002db6 <UART_SetConfig+0x24a>
 8002c5a:	231b      	movs	r3, #27
 8002c5c:	2218      	movs	r2, #24
 8002c5e:	4694      	mov	ip, r2
 8002c60:	44bc      	add	ip, r7
 8002c62:	4463      	add	r3, ip
 8002c64:	2210      	movs	r2, #16
 8002c66:	701a      	strb	r2, [r3, #0]
 8002c68:	46c0      	nop			; (mov r8, r8)
 8002c6a:	e0a4      	b.n	8002db6 <UART_SetConfig+0x24a>
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a9d      	ldr	r2, [pc, #628]	; (8002ee8 <UART_SetConfig+0x37c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d137      	bne.n	8002ce6 <UART_SetConfig+0x17a>
 8002c76:	4b9b      	ldr	r3, [pc, #620]	; (8002ee4 <UART_SetConfig+0x378>)
 8002c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7a:	220c      	movs	r2, #12
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d018      	beq.n	8002cb4 <UART_SetConfig+0x148>
 8002c82:	d802      	bhi.n	8002c8a <UART_SetConfig+0x11e>
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d005      	beq.n	8002c94 <UART_SetConfig+0x128>
 8002c88:	e024      	b.n	8002cd4 <UART_SetConfig+0x168>
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d00a      	beq.n	8002ca4 <UART_SetConfig+0x138>
 8002c8e:	2b0c      	cmp	r3, #12
 8002c90:	d018      	beq.n	8002cc4 <UART_SetConfig+0x158>
 8002c92:	e01f      	b.n	8002cd4 <UART_SetConfig+0x168>
 8002c94:	231b      	movs	r3, #27
 8002c96:	2218      	movs	r2, #24
 8002c98:	4694      	mov	ip, r2
 8002c9a:	44bc      	add	ip, r7
 8002c9c:	4463      	add	r3, ip
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	701a      	strb	r2, [r3, #0]
 8002ca2:	e088      	b.n	8002db6 <UART_SetConfig+0x24a>
 8002ca4:	231b      	movs	r3, #27
 8002ca6:	2218      	movs	r2, #24
 8002ca8:	4694      	mov	ip, r2
 8002caa:	44bc      	add	ip, r7
 8002cac:	4463      	add	r3, ip
 8002cae:	2202      	movs	r2, #2
 8002cb0:	701a      	strb	r2, [r3, #0]
 8002cb2:	e080      	b.n	8002db6 <UART_SetConfig+0x24a>
 8002cb4:	231b      	movs	r3, #27
 8002cb6:	2218      	movs	r2, #24
 8002cb8:	4694      	mov	ip, r2
 8002cba:	44bc      	add	ip, r7
 8002cbc:	4463      	add	r3, ip
 8002cbe:	2204      	movs	r2, #4
 8002cc0:	701a      	strb	r2, [r3, #0]
 8002cc2:	e078      	b.n	8002db6 <UART_SetConfig+0x24a>
 8002cc4:	231b      	movs	r3, #27
 8002cc6:	2218      	movs	r2, #24
 8002cc8:	4694      	mov	ip, r2
 8002cca:	44bc      	add	ip, r7
 8002ccc:	4463      	add	r3, ip
 8002cce:	2208      	movs	r2, #8
 8002cd0:	701a      	strb	r2, [r3, #0]
 8002cd2:	e070      	b.n	8002db6 <UART_SetConfig+0x24a>
 8002cd4:	231b      	movs	r3, #27
 8002cd6:	2218      	movs	r2, #24
 8002cd8:	4694      	mov	ip, r2
 8002cda:	44bc      	add	ip, r7
 8002cdc:	4463      	add	r3, ip
 8002cde:	2210      	movs	r2, #16
 8002ce0:	701a      	strb	r2, [r3, #0]
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	e067      	b.n	8002db6 <UART_SetConfig+0x24a>
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a80      	ldr	r2, [pc, #512]	; (8002eec <UART_SetConfig+0x380>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d107      	bne.n	8002d00 <UART_SetConfig+0x194>
 8002cf0:	231b      	movs	r3, #27
 8002cf2:	2218      	movs	r2, #24
 8002cf4:	4694      	mov	ip, r2
 8002cf6:	44bc      	add	ip, r7
 8002cf8:	4463      	add	r3, ip
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	701a      	strb	r2, [r3, #0]
 8002cfe:	e05a      	b.n	8002db6 <UART_SetConfig+0x24a>
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a7a      	ldr	r2, [pc, #488]	; (8002ef0 <UART_SetConfig+0x384>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d107      	bne.n	8002d1a <UART_SetConfig+0x1ae>
 8002d0a:	231b      	movs	r3, #27
 8002d0c:	2218      	movs	r2, #24
 8002d0e:	4694      	mov	ip, r2
 8002d10:	44bc      	add	ip, r7
 8002d12:	4463      	add	r3, ip
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
 8002d18:	e04d      	b.n	8002db6 <UART_SetConfig+0x24a>
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a6e      	ldr	r2, [pc, #440]	; (8002ed8 <UART_SetConfig+0x36c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d141      	bne.n	8002da8 <UART_SetConfig+0x23c>
 8002d24:	4b6f      	ldr	r3, [pc, #444]	; (8002ee4 <UART_SetConfig+0x378>)
 8002d26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d28:	23c0      	movs	r3, #192	; 0xc0
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	2280      	movs	r2, #128	; 0x80
 8002d30:	00d2      	lsls	r2, r2, #3
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d01f      	beq.n	8002d76 <UART_SetConfig+0x20a>
 8002d36:	2280      	movs	r2, #128	; 0x80
 8002d38:	00d2      	lsls	r2, r2, #3
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d802      	bhi.n	8002d44 <UART_SetConfig+0x1d8>
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d009      	beq.n	8002d56 <UART_SetConfig+0x1ea>
 8002d42:	e028      	b.n	8002d96 <UART_SetConfig+0x22a>
 8002d44:	2280      	movs	r2, #128	; 0x80
 8002d46:	0112      	lsls	r2, r2, #4
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d00c      	beq.n	8002d66 <UART_SetConfig+0x1fa>
 8002d4c:	22c0      	movs	r2, #192	; 0xc0
 8002d4e:	0112      	lsls	r2, r2, #4
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d018      	beq.n	8002d86 <UART_SetConfig+0x21a>
 8002d54:	e01f      	b.n	8002d96 <UART_SetConfig+0x22a>
 8002d56:	231b      	movs	r3, #27
 8002d58:	2218      	movs	r2, #24
 8002d5a:	4694      	mov	ip, r2
 8002d5c:	44bc      	add	ip, r7
 8002d5e:	4463      	add	r3, ip
 8002d60:	2200      	movs	r2, #0
 8002d62:	701a      	strb	r2, [r3, #0]
 8002d64:	e027      	b.n	8002db6 <UART_SetConfig+0x24a>
 8002d66:	231b      	movs	r3, #27
 8002d68:	2218      	movs	r2, #24
 8002d6a:	4694      	mov	ip, r2
 8002d6c:	44bc      	add	ip, r7
 8002d6e:	4463      	add	r3, ip
 8002d70:	2202      	movs	r2, #2
 8002d72:	701a      	strb	r2, [r3, #0]
 8002d74:	e01f      	b.n	8002db6 <UART_SetConfig+0x24a>
 8002d76:	231b      	movs	r3, #27
 8002d78:	2218      	movs	r2, #24
 8002d7a:	4694      	mov	ip, r2
 8002d7c:	44bc      	add	ip, r7
 8002d7e:	4463      	add	r3, ip
 8002d80:	2204      	movs	r2, #4
 8002d82:	701a      	strb	r2, [r3, #0]
 8002d84:	e017      	b.n	8002db6 <UART_SetConfig+0x24a>
 8002d86:	231b      	movs	r3, #27
 8002d88:	2218      	movs	r2, #24
 8002d8a:	4694      	mov	ip, r2
 8002d8c:	44bc      	add	ip, r7
 8002d8e:	4463      	add	r3, ip
 8002d90:	2208      	movs	r2, #8
 8002d92:	701a      	strb	r2, [r3, #0]
 8002d94:	e00f      	b.n	8002db6 <UART_SetConfig+0x24a>
 8002d96:	231b      	movs	r3, #27
 8002d98:	2218      	movs	r2, #24
 8002d9a:	4694      	mov	ip, r2
 8002d9c:	44bc      	add	ip, r7
 8002d9e:	4463      	add	r3, ip
 8002da0:	2210      	movs	r2, #16
 8002da2:	701a      	strb	r2, [r3, #0]
 8002da4:	46c0      	nop			; (mov r8, r8)
 8002da6:	e006      	b.n	8002db6 <UART_SetConfig+0x24a>
 8002da8:	231b      	movs	r3, #27
 8002daa:	2218      	movs	r2, #24
 8002dac:	4694      	mov	ip, r2
 8002dae:	44bc      	add	ip, r7
 8002db0:	4463      	add	r3, ip
 8002db2:	2210      	movs	r2, #16
 8002db4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a47      	ldr	r2, [pc, #284]	; (8002ed8 <UART_SetConfig+0x36c>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d000      	beq.n	8002dc2 <UART_SetConfig+0x256>
 8002dc0:	e0a0      	b.n	8002f04 <UART_SetConfig+0x398>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002dc2:	231b      	movs	r3, #27
 8002dc4:	2218      	movs	r2, #24
 8002dc6:	4694      	mov	ip, r2
 8002dc8:	44bc      	add	ip, r7
 8002dca:	4463      	add	r3, ip
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d00d      	beq.n	8002dee <UART_SetConfig+0x282>
 8002dd2:	dc02      	bgt.n	8002dda <UART_SetConfig+0x26e>
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <UART_SetConfig+0x278>
 8002dd8:	e01d      	b.n	8002e16 <UART_SetConfig+0x2aa>
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d012      	beq.n	8002e04 <UART_SetConfig+0x298>
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d015      	beq.n	8002e0e <UART_SetConfig+0x2a2>
 8002de2:	e018      	b.n	8002e16 <UART_SetConfig+0x2aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002de4:	f7ff f9c4 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 8002de8:	0003      	movs	r3, r0
 8002dea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dec:	e01d      	b.n	8002e2a <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dee:	4b3d      	ldr	r3, [pc, #244]	; (8002ee4 <UART_SetConfig+0x378>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2210      	movs	r2, #16
 8002df4:	4013      	ands	r3, r2
 8002df6:	d002      	beq.n	8002dfe <UART_SetConfig+0x292>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002df8:	4b3e      	ldr	r3, [pc, #248]	; (8002ef4 <UART_SetConfig+0x388>)
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002dfc:	e015      	b.n	8002e2a <UART_SetConfig+0x2be>
          pclk = (uint32_t) HSI_VALUE;
 8002dfe:	4b3e      	ldr	r3, [pc, #248]	; (8002ef8 <UART_SetConfig+0x38c>)
 8002e00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e02:	e012      	b.n	8002e2a <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e04:	f7ff f908 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8002e08:	0003      	movs	r3, r0
 8002e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e0c:	e00d      	b.n	8002e2a <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e0e:	2380      	movs	r3, #128	; 0x80
 8002e10:	021b      	lsls	r3, r3, #8
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e14:	e009      	b.n	8002e2a <UART_SetConfig+0x2be>
      default:
        pclk = 0U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002e1a:	231a      	movs	r3, #26
 8002e1c:	2218      	movs	r2, #24
 8002e1e:	4694      	mov	ip, r2
 8002e20:	44bc      	add	ip, r7
 8002e22:	4463      	add	r3, ip
 8002e24:	2201      	movs	r2, #1
 8002e26:	701a      	strb	r2, [r3, #0]
        break;
 8002e28:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d100      	bne.n	8002e32 <UART_SetConfig+0x2c6>
 8002e30:	e13c      	b.n	80030ac <UART_SetConfig+0x540>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	0013      	movs	r3, r2
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	189b      	adds	r3, r3, r2
 8002e3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d305      	bcc.n	8002e4e <UART_SetConfig+0x2e2>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d907      	bls.n	8002e5e <UART_SetConfig+0x2f2>
      {
        ret = HAL_ERROR;
 8002e4e:	231a      	movs	r3, #26
 8002e50:	2218      	movs	r2, #24
 8002e52:	4694      	mov	ip, r2
 8002e54:	44bc      	add	ip, r7
 8002e56:	4463      	add	r3, ip
 8002e58:	2201      	movs	r2, #1
 8002e5a:	701a      	strb	r2, [r3, #0]
 8002e5c:	e126      	b.n	80030ac <UART_SetConfig+0x540>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	6939      	ldr	r1, [r7, #16]
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	000b      	movs	r3, r1
 8002e6c:	0e1b      	lsrs	r3, r3, #24
 8002e6e:	0010      	movs	r0, r2
 8002e70:	0205      	lsls	r5, r0, #8
 8002e72:	431d      	orrs	r5, r3
 8002e74:	000b      	movs	r3, r1
 8002e76:	021c      	lsls	r4, r3, #8
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	085b      	lsrs	r3, r3, #1
 8002e7e:	60bb      	str	r3, [r7, #8]
 8002e80:	2300      	movs	r3, #0
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	68b8      	ldr	r0, [r7, #8]
 8002e86:	68f9      	ldr	r1, [r7, #12]
 8002e88:	1900      	adds	r0, r0, r4
 8002e8a:	4169      	adcs	r1, r5
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	603b      	str	r3, [r7, #0]
 8002e92:	2300      	movs	r3, #0
 8002e94:	607b      	str	r3, [r7, #4]
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f7fd f9c1 	bl	8000220 <__aeabi_uldivmod>
 8002e9e:	0003      	movs	r3, r0
 8002ea0:	000c      	movs	r4, r1
 8002ea2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea6:	4a15      	ldr	r2, [pc, #84]	; (8002efc <UART_SetConfig+0x390>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d908      	bls.n	8002ebe <UART_SetConfig+0x352>
 8002eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eae:	4a14      	ldr	r2, [pc, #80]	; (8002f00 <UART_SetConfig+0x394>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d804      	bhi.n	8002ebe <UART_SetConfig+0x352>
        {
          huart->Instance->BRR = usartdiv;
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eba:	60da      	str	r2, [r3, #12]
 8002ebc:	e0f6      	b.n	80030ac <UART_SetConfig+0x540>
        }
        else
        {
          ret = HAL_ERROR;
 8002ebe:	231a      	movs	r3, #26
 8002ec0:	2218      	movs	r2, #24
 8002ec2:	4694      	mov	ip, r2
 8002ec4:	44bc      	add	ip, r7
 8002ec6:	4463      	add	r3, ip
 8002ec8:	2201      	movs	r2, #1
 8002eca:	701a      	strb	r2, [r3, #0]
 8002ecc:	e0ee      	b.n	80030ac <UART_SetConfig+0x540>
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	efff69f3 	.word	0xefff69f3
 8002ed4:	ffffcfff 	.word	0xffffcfff
 8002ed8:	40004800 	.word	0x40004800
 8002edc:	fffff4ff 	.word	0xfffff4ff
 8002ee0:	40013800 	.word	0x40013800
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40004400 	.word	0x40004400
 8002eec:	40004c00 	.word	0x40004c00
 8002ef0:	40005000 	.word	0x40005000
 8002ef4:	003d0900 	.word	0x003d0900
 8002ef8:	00f42400 	.word	0x00f42400
 8002efc:	000002ff 	.word	0x000002ff
 8002f00:	000fffff 	.word	0x000fffff
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	69da      	ldr	r2, [r3, #28]
 8002f08:	2380      	movs	r3, #128	; 0x80
 8002f0a:	021b      	lsls	r3, r3, #8
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d000      	beq.n	8002f12 <UART_SetConfig+0x3a6>
 8002f10:	e073      	b.n	8002ffa <UART_SetConfig+0x48e>
  {
    switch (clocksource)
 8002f12:	231b      	movs	r3, #27
 8002f14:	2218      	movs	r2, #24
 8002f16:	4694      	mov	ip, r2
 8002f18:	44bc      	add	ip, r7
 8002f1a:	4463      	add	r3, ip
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d822      	bhi.n	8002f68 <UART_SetConfig+0x3fc>
 8002f22:	009a      	lsls	r2, r3, #2
 8002f24:	4b69      	ldr	r3, [pc, #420]	; (80030cc <UART_SetConfig+0x560>)
 8002f26:	18d3      	adds	r3, r2, r3
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f2c:	f7ff f920 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 8002f30:	0003      	movs	r3, r0
 8002f32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f34:	e022      	b.n	8002f7c <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f36:	f7ff f931 	bl	800219c <HAL_RCC_GetPCLK2Freq>
 8002f3a:	0003      	movs	r3, r0
 8002f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f3e:	e01d      	b.n	8002f7c <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f40:	4b63      	ldr	r3, [pc, #396]	; (80030d0 <UART_SetConfig+0x564>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2210      	movs	r2, #16
 8002f46:	4013      	ands	r3, r2
 8002f48:	d002      	beq.n	8002f50 <UART_SetConfig+0x3e4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002f4a:	4b62      	ldr	r3, [pc, #392]	; (80030d4 <UART_SetConfig+0x568>)
 8002f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002f4e:	e015      	b.n	8002f7c <UART_SetConfig+0x410>
          pclk = (uint32_t) HSI_VALUE;
 8002f50:	4b61      	ldr	r3, [pc, #388]	; (80030d8 <UART_SetConfig+0x56c>)
 8002f52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f54:	e012      	b.n	8002f7c <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f56:	f7ff f85f 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8002f5a:	0003      	movs	r3, r0
 8002f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f5e:	e00d      	b.n	8002f7c <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f60:	2380      	movs	r3, #128	; 0x80
 8002f62:	021b      	lsls	r3, r3, #8
 8002f64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f66:	e009      	b.n	8002f7c <UART_SetConfig+0x410>
      default:
        pclk = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002f6c:	231a      	movs	r3, #26
 8002f6e:	2218      	movs	r2, #24
 8002f70:	4694      	mov	ip, r2
 8002f72:	44bc      	add	ip, r7
 8002f74:	4463      	add	r3, ip
 8002f76:	2201      	movs	r2, #1
 8002f78:	701a      	strb	r2, [r3, #0]
        break;
 8002f7a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d100      	bne.n	8002f84 <UART_SetConfig+0x418>
 8002f82:	e093      	b.n	80030ac <UART_SetConfig+0x540>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f86:	005a      	lsls	r2, r3, #1
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	085b      	lsrs	r3, r3, #1
 8002f8e:	18d2      	adds	r2, r2, r3
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	0019      	movs	r1, r3
 8002f96:	0010      	movs	r0, r2
 8002f98:	f7fd f8b6 	bl	8000108 <__udivsi3>
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa4:	2b0f      	cmp	r3, #15
 8002fa6:	d920      	bls.n	8002fea <UART_SetConfig+0x47e>
 8002fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002faa:	4a4c      	ldr	r2, [pc, #304]	; (80030dc <UART_SetConfig+0x570>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d81c      	bhi.n	8002fea <UART_SetConfig+0x47e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	200e      	movs	r0, #14
 8002fb6:	2418      	movs	r4, #24
 8002fb8:	193b      	adds	r3, r7, r4
 8002fba:	181b      	adds	r3, r3, r0
 8002fbc:	210f      	movs	r1, #15
 8002fbe:	438a      	bics	r2, r1
 8002fc0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc4:	085b      	lsrs	r3, r3, #1
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2207      	movs	r2, #7
 8002fca:	4013      	ands	r3, r2
 8002fcc:	b299      	uxth	r1, r3
 8002fce:	193b      	adds	r3, r7, r4
 8002fd0:	181b      	adds	r3, r3, r0
 8002fd2:	193a      	adds	r2, r7, r4
 8002fd4:	1812      	adds	r2, r2, r0
 8002fd6:	8812      	ldrh	r2, [r2, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	193a      	adds	r2, r7, r4
 8002fe2:	1812      	adds	r2, r2, r0
 8002fe4:	8812      	ldrh	r2, [r2, #0]
 8002fe6:	60da      	str	r2, [r3, #12]
 8002fe8:	e060      	b.n	80030ac <UART_SetConfig+0x540>
      }
      else
      {
        ret = HAL_ERROR;
 8002fea:	231a      	movs	r3, #26
 8002fec:	2218      	movs	r2, #24
 8002fee:	4694      	mov	ip, r2
 8002ff0:	44bc      	add	ip, r7
 8002ff2:	4463      	add	r3, ip
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	701a      	strb	r2, [r3, #0]
 8002ff8:	e058      	b.n	80030ac <UART_SetConfig+0x540>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ffa:	231b      	movs	r3, #27
 8002ffc:	2218      	movs	r2, #24
 8002ffe:	4694      	mov	ip, r2
 8003000:	44bc      	add	ip, r7
 8003002:	4463      	add	r3, ip
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b08      	cmp	r3, #8
 8003008:	d822      	bhi.n	8003050 <UART_SetConfig+0x4e4>
 800300a:	009a      	lsls	r2, r3, #2
 800300c:	4b34      	ldr	r3, [pc, #208]	; (80030e0 <UART_SetConfig+0x574>)
 800300e:	18d3      	adds	r3, r2, r3
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003014:	f7ff f8ac 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 8003018:	0003      	movs	r3, r0
 800301a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800301c:	e022      	b.n	8003064 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800301e:	f7ff f8bd 	bl	800219c <HAL_RCC_GetPCLK2Freq>
 8003022:	0003      	movs	r3, r0
 8003024:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003026:	e01d      	b.n	8003064 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003028:	4b29      	ldr	r3, [pc, #164]	; (80030d0 <UART_SetConfig+0x564>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2210      	movs	r2, #16
 800302e:	4013      	ands	r3, r2
 8003030:	d002      	beq.n	8003038 <UART_SetConfig+0x4cc>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003032:	4b28      	ldr	r3, [pc, #160]	; (80030d4 <UART_SetConfig+0x568>)
 8003034:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003036:	e015      	b.n	8003064 <UART_SetConfig+0x4f8>
          pclk = (uint32_t) HSI_VALUE;
 8003038:	4b27      	ldr	r3, [pc, #156]	; (80030d8 <UART_SetConfig+0x56c>)
 800303a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800303c:	e012      	b.n	8003064 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800303e:	f7fe ffeb 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8003042:	0003      	movs	r3, r0
 8003044:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003046:	e00d      	b.n	8003064 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003048:	2380      	movs	r3, #128	; 0x80
 800304a:	021b      	lsls	r3, r3, #8
 800304c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800304e:	e009      	b.n	8003064 <UART_SetConfig+0x4f8>
      default:
        pclk = 0U;
 8003050:	2300      	movs	r3, #0
 8003052:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003054:	231a      	movs	r3, #26
 8003056:	2218      	movs	r2, #24
 8003058:	4694      	mov	ip, r2
 800305a:	44bc      	add	ip, r7
 800305c:	4463      	add	r3, ip
 800305e:	2201      	movs	r2, #1
 8003060:	701a      	strb	r2, [r3, #0]
        break;
 8003062:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003066:	2b00      	cmp	r3, #0
 8003068:	d020      	beq.n	80030ac <UART_SetConfig+0x540>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	085a      	lsrs	r2, r3, #1
 8003070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003072:	18d2      	adds	r2, r2, r3
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	0019      	movs	r1, r3
 800307a:	0010      	movs	r0, r2
 800307c:	f7fd f844 	bl	8000108 <__udivsi3>
 8003080:	0003      	movs	r3, r0
 8003082:	b29b      	uxth	r3, r3
 8003084:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003088:	2b0f      	cmp	r3, #15
 800308a:	d908      	bls.n	800309e <UART_SetConfig+0x532>
 800308c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308e:	4a13      	ldr	r2, [pc, #76]	; (80030dc <UART_SetConfig+0x570>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d804      	bhi.n	800309e <UART_SetConfig+0x532>
      {
        huart->Instance->BRR = usartdiv;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800309a:	60da      	str	r2, [r3, #12]
 800309c:	e006      	b.n	80030ac <UART_SetConfig+0x540>
      }
      else
      {
        ret = HAL_ERROR;
 800309e:	231a      	movs	r3, #26
 80030a0:	2218      	movs	r2, #24
 80030a2:	4694      	mov	ip, r2
 80030a4:	44bc      	add	ip, r7
 80030a6:	4463      	add	r3, ip
 80030a8:	2201      	movs	r2, #1
 80030aa:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	2200      	movs	r2, #0
 80030b0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	2200      	movs	r2, #0
 80030b6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80030b8:	231a      	movs	r3, #26
 80030ba:	2218      	movs	r2, #24
 80030bc:	4694      	mov	ip, r2
 80030be:	44bc      	add	ip, r7
 80030c0:	4463      	add	r3, ip
 80030c2:	781b      	ldrb	r3, [r3, #0]
}
 80030c4:	0018      	movs	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b00e      	add	sp, #56	; 0x38
 80030ca:	bdb0      	pop	{r4, r5, r7, pc}
 80030cc:	08003858 	.word	0x08003858
 80030d0:	40021000 	.word	0x40021000
 80030d4:	003d0900 	.word	0x003d0900
 80030d8:	00f42400 	.word	0x00f42400
 80030dc:	0000ffff 	.word	0x0000ffff
 80030e0:	0800387c 	.word	0x0800387c

080030e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	2201      	movs	r2, #1
 80030f2:	4013      	ands	r3, r2
 80030f4:	d00b      	beq.n	800310e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	4a4a      	ldr	r2, [pc, #296]	; (8003228 <UART_AdvFeatureConfig+0x144>)
 80030fe:	4013      	ands	r3, r2
 8003100:	0019      	movs	r1, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	2202      	movs	r2, #2
 8003114:	4013      	ands	r3, r2
 8003116:	d00b      	beq.n	8003130 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4a43      	ldr	r2, [pc, #268]	; (800322c <UART_AdvFeatureConfig+0x148>)
 8003120:	4013      	ands	r3, r2
 8003122:	0019      	movs	r1, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	2204      	movs	r2, #4
 8003136:	4013      	ands	r3, r2
 8003138:	d00b      	beq.n	8003152 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	4a3b      	ldr	r2, [pc, #236]	; (8003230 <UART_AdvFeatureConfig+0x14c>)
 8003142:	4013      	ands	r3, r2
 8003144:	0019      	movs	r1, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	2208      	movs	r2, #8
 8003158:	4013      	ands	r3, r2
 800315a:	d00b      	beq.n	8003174 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	4a34      	ldr	r2, [pc, #208]	; (8003234 <UART_AdvFeatureConfig+0x150>)
 8003164:	4013      	ands	r3, r2
 8003166:	0019      	movs	r1, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	2210      	movs	r2, #16
 800317a:	4013      	ands	r3, r2
 800317c:	d00b      	beq.n	8003196 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	4a2c      	ldr	r2, [pc, #176]	; (8003238 <UART_AdvFeatureConfig+0x154>)
 8003186:	4013      	ands	r3, r2
 8003188:	0019      	movs	r1, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	2220      	movs	r2, #32
 800319c:	4013      	ands	r3, r2
 800319e:	d00b      	beq.n	80031b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	4a25      	ldr	r2, [pc, #148]	; (800323c <UART_AdvFeatureConfig+0x158>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	0019      	movs	r1, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	2240      	movs	r2, #64	; 0x40
 80031be:	4013      	ands	r3, r2
 80031c0:	d01d      	beq.n	80031fe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	4a1d      	ldr	r2, [pc, #116]	; (8003240 <UART_AdvFeatureConfig+0x15c>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	0019      	movs	r1, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031de:	2380      	movs	r3, #128	; 0x80
 80031e0:	035b      	lsls	r3, r3, #13
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d10b      	bne.n	80031fe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	4a15      	ldr	r2, [pc, #84]	; (8003244 <UART_AdvFeatureConfig+0x160>)
 80031ee:	4013      	ands	r3, r2
 80031f0:	0019      	movs	r1, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	2280      	movs	r2, #128	; 0x80
 8003204:	4013      	ands	r3, r2
 8003206:	d00b      	beq.n	8003220 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	4a0e      	ldr	r2, [pc, #56]	; (8003248 <UART_AdvFeatureConfig+0x164>)
 8003210:	4013      	ands	r3, r2
 8003212:	0019      	movs	r1, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	605a      	str	r2, [r3, #4]
  }
}
 8003220:	46c0      	nop			; (mov r8, r8)
 8003222:	46bd      	mov	sp, r7
 8003224:	b002      	add	sp, #8
 8003226:	bd80      	pop	{r7, pc}
 8003228:	fffdffff 	.word	0xfffdffff
 800322c:	fffeffff 	.word	0xfffeffff
 8003230:	fffbffff 	.word	0xfffbffff
 8003234:	ffff7fff 	.word	0xffff7fff
 8003238:	ffffefff 	.word	0xffffefff
 800323c:	ffffdfff 	.word	0xffffdfff
 8003240:	ffefffff 	.word	0xffefffff
 8003244:	ff9fffff 	.word	0xff9fffff
 8003248:	fff7ffff 	.word	0xfff7ffff

0800324c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af02      	add	r7, sp, #8
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2280      	movs	r2, #128	; 0x80
 8003258:	2100      	movs	r1, #0
 800325a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800325c:	f7fd fe98 	bl	8000f90 <HAL_GetTick>
 8003260:	0003      	movs	r3, r0
 8003262:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2208      	movs	r2, #8
 800326c:	4013      	ands	r3, r2
 800326e:	2b08      	cmp	r3, #8
 8003270:	d10d      	bne.n	800328e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	2380      	movs	r3, #128	; 0x80
 8003276:	0399      	lsls	r1, r3, #14
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	4b18      	ldr	r3, [pc, #96]	; (80032dc <UART_CheckIdleState+0x90>)
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	0013      	movs	r3, r2
 8003280:	2200      	movs	r2, #0
 8003282:	f000 f82d 	bl	80032e0 <UART_WaitOnFlagUntilTimeout>
 8003286:	1e03      	subs	r3, r0, #0
 8003288:	d001      	beq.n	800328e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e022      	b.n	80032d4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2204      	movs	r2, #4
 8003296:	4013      	ands	r3, r2
 8003298:	2b04      	cmp	r3, #4
 800329a:	d10d      	bne.n	80032b8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	2380      	movs	r3, #128	; 0x80
 80032a0:	03d9      	lsls	r1, r3, #15
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <UART_CheckIdleState+0x90>)
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	0013      	movs	r3, r2
 80032aa:	2200      	movs	r2, #0
 80032ac:	f000 f818 	bl	80032e0 <UART_WaitOnFlagUntilTimeout>
 80032b0:	1e03      	subs	r3, r0, #0
 80032b2:	d001      	beq.n	80032b8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e00d      	b.n	80032d4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2220      	movs	r2, #32
 80032bc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2220      	movs	r2, #32
 80032c2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2274      	movs	r2, #116	; 0x74
 80032ce:	2100      	movs	r1, #0
 80032d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	0018      	movs	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	b004      	add	sp, #16
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	01ffffff 	.word	0x01ffffff

080032e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	603b      	str	r3, [r7, #0]
 80032ec:	1dfb      	adds	r3, r7, #7
 80032ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032f0:	e05e      	b.n	80033b0 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	3301      	adds	r3, #1
 80032f6:	d05b      	beq.n	80033b0 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f8:	f7fd fe4a 	bl	8000f90 <HAL_GetTick>
 80032fc:	0002      	movs	r2, r0
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	429a      	cmp	r2, r3
 8003306:	d302      	bcc.n	800330e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d11b      	bne.n	8003346 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	492f      	ldr	r1, [pc, #188]	; (80033d8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800331a:	400a      	ands	r2, r1
 800331c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2101      	movs	r1, #1
 800332a:	438a      	bics	r2, r1
 800332c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2220      	movs	r2, #32
 8003332:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2220      	movs	r2, #32
 8003338:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2274      	movs	r2, #116	; 0x74
 800333e:	2100      	movs	r1, #0
 8003340:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e044      	b.n	80033d0 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2204      	movs	r2, #4
 800334e:	4013      	ands	r3, r2
 8003350:	d02e      	beq.n	80033b0 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	69da      	ldr	r2, [r3, #28]
 8003358:	2380      	movs	r3, #128	; 0x80
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	401a      	ands	r2, r3
 800335e:	2380      	movs	r3, #128	; 0x80
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	429a      	cmp	r2, r3
 8003364:	d124      	bne.n	80033b0 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2280      	movs	r2, #128	; 0x80
 800336c:	0112      	lsls	r2, r2, #4
 800336e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4917      	ldr	r1, [pc, #92]	; (80033d8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800337c:	400a      	ands	r2, r1
 800337e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2101      	movs	r1, #1
 800338c:	438a      	bics	r2, r1
 800338e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2220      	movs	r2, #32
 800339a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2280      	movs	r2, #128	; 0x80
 80033a0:	2120      	movs	r1, #32
 80033a2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2274      	movs	r2, #116	; 0x74
 80033a8:	2100      	movs	r1, #0
 80033aa:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e00f      	b.n	80033d0 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	4013      	ands	r3, r2
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	425a      	negs	r2, r3
 80033c0:	4153      	adcs	r3, r2
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	001a      	movs	r2, r3
 80033c6:	1dfb      	adds	r3, r7, #7
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d091      	beq.n	80032f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	0018      	movs	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b004      	add	sp, #16
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	fffffe5f 	.word	0xfffffe5f

080033dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	1dbb      	adds	r3, r7, #6
 80033e8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1dba      	adds	r2, r7, #6
 80033f4:	2158      	movs	r1, #88	; 0x58
 80033f6:	8812      	ldrh	r2, [r2, #0]
 80033f8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1dba      	adds	r2, r7, #6
 80033fe:	215a      	movs	r1, #90	; 0x5a
 8003400:	8812      	ldrh	r2, [r2, #0]
 8003402:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	2380      	movs	r3, #128	; 0x80
 8003410:	015b      	lsls	r3, r3, #5
 8003412:	429a      	cmp	r2, r3
 8003414:	d10d      	bne.n	8003432 <UART_Start_Receive_IT+0x56>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d104      	bne.n	8003428 <UART_Start_Receive_IT+0x4c>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	225c      	movs	r2, #92	; 0x5c
 8003422:	4932      	ldr	r1, [pc, #200]	; (80034ec <UART_Start_Receive_IT+0x110>)
 8003424:	5299      	strh	r1, [r3, r2]
 8003426:	e02e      	b.n	8003486 <UART_Start_Receive_IT+0xaa>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	225c      	movs	r2, #92	; 0x5c
 800342c:	21ff      	movs	r1, #255	; 0xff
 800342e:	5299      	strh	r1, [r3, r2]
 8003430:	e029      	b.n	8003486 <UART_Start_Receive_IT+0xaa>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10d      	bne.n	8003456 <UART_Start_Receive_IT+0x7a>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d104      	bne.n	800344c <UART_Start_Receive_IT+0x70>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	225c      	movs	r2, #92	; 0x5c
 8003446:	21ff      	movs	r1, #255	; 0xff
 8003448:	5299      	strh	r1, [r3, r2]
 800344a:	e01c      	b.n	8003486 <UART_Start_Receive_IT+0xaa>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	225c      	movs	r2, #92	; 0x5c
 8003450:	217f      	movs	r1, #127	; 0x7f
 8003452:	5299      	strh	r1, [r3, r2]
 8003454:	e017      	b.n	8003486 <UART_Start_Receive_IT+0xaa>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	2380      	movs	r3, #128	; 0x80
 800345c:	055b      	lsls	r3, r3, #21
 800345e:	429a      	cmp	r2, r3
 8003460:	d10d      	bne.n	800347e <UART_Start_Receive_IT+0xa2>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d104      	bne.n	8003474 <UART_Start_Receive_IT+0x98>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	225c      	movs	r2, #92	; 0x5c
 800346e:	217f      	movs	r1, #127	; 0x7f
 8003470:	5299      	strh	r1, [r3, r2]
 8003472:	e008      	b.n	8003486 <UART_Start_Receive_IT+0xaa>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	225c      	movs	r2, #92	; 0x5c
 8003478:	213f      	movs	r1, #63	; 0x3f
 800347a:	5299      	strh	r1, [r3, r2]
 800347c:	e003      	b.n	8003486 <UART_Start_Receive_IT+0xaa>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	225c      	movs	r2, #92	; 0x5c
 8003482:	2100      	movs	r1, #0
 8003484:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2280      	movs	r2, #128	; 0x80
 800348a:	2100      	movs	r1, #0
 800348c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2222      	movs	r2, #34	; 0x22
 8003492:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2101      	movs	r1, #1
 80034a0:	430a      	orrs	r2, r1
 80034a2:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	2380      	movs	r3, #128	; 0x80
 80034aa:	015b      	lsls	r3, r3, #5
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d107      	bne.n	80034c0 <UART_Start_Receive_IT+0xe4>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d103      	bne.n	80034c0 <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4a0d      	ldr	r2, [pc, #52]	; (80034f0 <UART_Start_Receive_IT+0x114>)
 80034bc:	665a      	str	r2, [r3, #100]	; 0x64
 80034be:	e002      	b.n	80034c6 <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4a0c      	ldr	r2, [pc, #48]	; (80034f4 <UART_Start_Receive_IT+0x118>)
 80034c4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2274      	movs	r2, #116	; 0x74
 80034ca:	2100      	movs	r1, #0
 80034cc:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2190      	movs	r1, #144	; 0x90
 80034da:	0049      	lsls	r1, r1, #1
 80034dc:	430a      	orrs	r2, r1
 80034de:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	0018      	movs	r0, r3
 80034e4:	46bd      	mov	sp, r7
 80034e6:	b004      	add	sp, #16
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	000001ff 	.word	0x000001ff
 80034f0:	080036a9 	.word	0x080036a9
 80034f4:	080035bd 	.word	0x080035bd

080034f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4912      	ldr	r1, [pc, #72]	; (8003554 <UART_EndRxTransfer+0x5c>)
 800350c:	400a      	ands	r2, r1
 800350e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2101      	movs	r1, #1
 800351c:	438a      	bics	r2, r1
 800351e:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003524:	2b01      	cmp	r3, #1
 8003526:	d107      	bne.n	8003538 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2110      	movs	r1, #16
 8003534:	438a      	bics	r2, r1
 8003536:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	665a      	str	r2, [r3, #100]	; 0x64
}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	46bd      	mov	sp, r7
 800354e:	b002      	add	sp, #8
 8003550:	bd80      	pop	{r7, pc}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	fffffedf 	.word	0xfffffedf

08003558 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003564:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	225a      	movs	r2, #90	; 0x5a
 800356a:	2100      	movs	r1, #0
 800356c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2252      	movs	r2, #82	; 0x52
 8003572:	2100      	movs	r1, #0
 8003574:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	0018      	movs	r0, r3
 800357a:	f7ff fae3 	bl	8002b44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	46bd      	mov	sp, r7
 8003582:	b004      	add	sp, #16
 8003584:	bd80      	pop	{r7, pc}

08003586 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b082      	sub	sp, #8
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2140      	movs	r1, #64	; 0x40
 800359a:	438a      	bics	r2, r1
 800359c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2220      	movs	r2, #32
 80035a2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	0018      	movs	r0, r3
 80035ae:	f7ff fac1 	bl	8002b34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	46bd      	mov	sp, r7
 80035b6:	b002      	add	sp, #8
 80035b8:	bd80      	pop	{r7, pc}
	...

080035bc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80035c4:	230e      	movs	r3, #14
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	215c      	movs	r1, #92	; 0x5c
 80035cc:	5a52      	ldrh	r2, [r2, r1]
 80035ce:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035d4:	2b22      	cmp	r3, #34	; 0x22
 80035d6:	d158      	bne.n	800368a <UART_RxISR_8BIT+0xce>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035de:	210c      	movs	r1, #12
 80035e0:	187b      	adds	r3, r7, r1
 80035e2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80035e4:	187b      	adds	r3, r7, r1
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	230e      	movs	r3, #14
 80035ec:	18fb      	adds	r3, r7, r3
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	b2d9      	uxtb	r1, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f6:	400a      	ands	r2, r1
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	225a      	movs	r2, #90	; 0x5a
 800360a:	5a9b      	ldrh	r3, [r3, r2]
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b299      	uxth	r1, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	225a      	movs	r2, #90	; 0x5a
 8003616:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	225a      	movs	r2, #90	; 0x5a
 800361c:	5a9b      	ldrh	r3, [r3, r2]
 800361e:	b29b      	uxth	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d13a      	bne.n	800369a <UART_RxISR_8BIT+0xde>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	491d      	ldr	r1, [pc, #116]	; (80036a4 <UART_RxISR_8BIT+0xe8>)
 8003630:	400a      	ands	r2, r1
 8003632:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2101      	movs	r1, #1
 8003640:	438a      	bics	r2, r1
 8003642:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2220      	movs	r2, #32
 8003648:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003654:	2b01      	cmp	r3, #1
 8003656:	d110      	bne.n	800367a <UART_RxISR_8BIT+0xbe>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2110      	movs	r1, #16
 8003664:	438a      	bics	r2, r1
 8003666:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2258      	movs	r2, #88	; 0x58
 800366c:	5a9a      	ldrh	r2, [r3, r2]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	0011      	movs	r1, r2
 8003672:	0018      	movs	r0, r3
 8003674:	f7ff fa6e 	bl	8002b54 <HAL_UARTEx_RxEventCallback>
 8003678:	e003      	b.n	8003682 <UART_RxISR_8BIT+0xc6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	0018      	movs	r0, r3
 800367e:	f7fd f897 	bl	80007b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003688:	e007      	b.n	800369a <UART_RxISR_8BIT+0xde>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699a      	ldr	r2, [r3, #24]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2108      	movs	r1, #8
 8003696:	430a      	orrs	r2, r1
 8003698:	619a      	str	r2, [r3, #24]
}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	46bd      	mov	sp, r7
 800369e:	b004      	add	sp, #16
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	fffffedf 	.word	0xfffffedf

080036a8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80036b0:	230e      	movs	r3, #14
 80036b2:	18fb      	adds	r3, r7, r3
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	215c      	movs	r1, #92	; 0x5c
 80036b8:	5a52      	ldrh	r2, [r2, r1]
 80036ba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036c0:	2b22      	cmp	r3, #34	; 0x22
 80036c2:	d158      	bne.n	8003776 <UART_RxISR_16BIT+0xce>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036ca:	210c      	movs	r1, #12
 80036cc:	187b      	adds	r3, r7, r1
 80036ce:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80036d6:	187b      	adds	r3, r7, r1
 80036d8:	220e      	movs	r2, #14
 80036da:	18ba      	adds	r2, r7, r2
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	8812      	ldrh	r2, [r2, #0]
 80036e0:	4013      	ands	r3, r2
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ec:	1c9a      	adds	r2, r3, #2
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	225a      	movs	r2, #90	; 0x5a
 80036f6:	5a9b      	ldrh	r3, [r3, r2]
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b299      	uxth	r1, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	225a      	movs	r2, #90	; 0x5a
 8003702:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	225a      	movs	r2, #90	; 0x5a
 8003708:	5a9b      	ldrh	r3, [r3, r2]
 800370a:	b29b      	uxth	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d13a      	bne.n	8003786 <UART_RxISR_16BIT+0xde>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	491d      	ldr	r1, [pc, #116]	; (8003790 <UART_RxISR_16BIT+0xe8>)
 800371c:	400a      	ands	r2, r1
 800371e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2101      	movs	r1, #1
 800372c:	438a      	bics	r2, r1
 800372e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2220      	movs	r2, #32
 8003734:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003740:	2b01      	cmp	r3, #1
 8003742:	d110      	bne.n	8003766 <UART_RxISR_16BIT+0xbe>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2110      	movs	r1, #16
 8003750:	438a      	bics	r2, r1
 8003752:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2258      	movs	r2, #88	; 0x58
 8003758:	5a9a      	ldrh	r2, [r3, r2]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	0011      	movs	r1, r2
 800375e:	0018      	movs	r0, r3
 8003760:	f7ff f9f8 	bl	8002b54 <HAL_UARTEx_RxEventCallback>
 8003764:	e003      	b.n	800376e <UART_RxISR_16BIT+0xc6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	0018      	movs	r0, r3
 800376a:	f7fd f821 	bl	80007b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003774:	e007      	b.n	8003786 <UART_RxISR_16BIT+0xde>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699a      	ldr	r2, [r3, #24]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2108      	movs	r1, #8
 8003782:	430a      	orrs	r2, r1
 8003784:	619a      	str	r2, [r3, #24]
}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	46bd      	mov	sp, r7
 800378a:	b004      	add	sp, #16
 800378c:	bd80      	pop	{r7, pc}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	fffffedf 	.word	0xfffffedf

08003794 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800379c:	46c0      	nop			; (mov r8, r8)
 800379e:	46bd      	mov	sp, r7
 80037a0:	b002      	add	sp, #8
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <__libc_init_array>:
 80037a4:	b570      	push	{r4, r5, r6, lr}
 80037a6:	2600      	movs	r6, #0
 80037a8:	4d0c      	ldr	r5, [pc, #48]	; (80037dc <__libc_init_array+0x38>)
 80037aa:	4c0d      	ldr	r4, [pc, #52]	; (80037e0 <__libc_init_array+0x3c>)
 80037ac:	1b64      	subs	r4, r4, r5
 80037ae:	10a4      	asrs	r4, r4, #2
 80037b0:	42a6      	cmp	r6, r4
 80037b2:	d109      	bne.n	80037c8 <__libc_init_array+0x24>
 80037b4:	2600      	movs	r6, #0
 80037b6:	f000 f82b 	bl	8003810 <_init>
 80037ba:	4d0a      	ldr	r5, [pc, #40]	; (80037e4 <__libc_init_array+0x40>)
 80037bc:	4c0a      	ldr	r4, [pc, #40]	; (80037e8 <__libc_init_array+0x44>)
 80037be:	1b64      	subs	r4, r4, r5
 80037c0:	10a4      	asrs	r4, r4, #2
 80037c2:	42a6      	cmp	r6, r4
 80037c4:	d105      	bne.n	80037d2 <__libc_init_array+0x2e>
 80037c6:	bd70      	pop	{r4, r5, r6, pc}
 80037c8:	00b3      	lsls	r3, r6, #2
 80037ca:	58eb      	ldr	r3, [r5, r3]
 80037cc:	4798      	blx	r3
 80037ce:	3601      	adds	r6, #1
 80037d0:	e7ee      	b.n	80037b0 <__libc_init_array+0xc>
 80037d2:	00b3      	lsls	r3, r6, #2
 80037d4:	58eb      	ldr	r3, [r5, r3]
 80037d6:	4798      	blx	r3
 80037d8:	3601      	adds	r6, #1
 80037da:	e7f2      	b.n	80037c2 <__libc_init_array+0x1e>
 80037dc:	080038a8 	.word	0x080038a8
 80037e0:	080038a8 	.word	0x080038a8
 80037e4:	080038a8 	.word	0x080038a8
 80037e8:	080038ac 	.word	0x080038ac

080037ec <memcpy>:
 80037ec:	2300      	movs	r3, #0
 80037ee:	b510      	push	{r4, lr}
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d100      	bne.n	80037f6 <memcpy+0xa>
 80037f4:	bd10      	pop	{r4, pc}
 80037f6:	5ccc      	ldrb	r4, [r1, r3]
 80037f8:	54c4      	strb	r4, [r0, r3]
 80037fa:	3301      	adds	r3, #1
 80037fc:	e7f8      	b.n	80037f0 <memcpy+0x4>

080037fe <memset>:
 80037fe:	0003      	movs	r3, r0
 8003800:	1812      	adds	r2, r2, r0
 8003802:	4293      	cmp	r3, r2
 8003804:	d100      	bne.n	8003808 <memset+0xa>
 8003806:	4770      	bx	lr
 8003808:	7019      	strb	r1, [r3, #0]
 800380a:	3301      	adds	r3, #1
 800380c:	e7f9      	b.n	8003802 <memset+0x4>
	...

08003810 <_init>:
 8003810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003816:	bc08      	pop	{r3}
 8003818:	469e      	mov	lr, r3
 800381a:	4770      	bx	lr

0800381c <_fini>:
 800381c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003822:	bc08      	pop	{r3}
 8003824:	469e      	mov	lr, r3
 8003826:	4770      	bx	lr
