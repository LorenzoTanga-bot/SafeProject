
mlm32l07x01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010680  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c74  08010740  08010740  00020740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080113b4  080113b4  000213b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080113bc  080113bc  000213bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080113c0  080113c0  000213c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f0  20000000  080113c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001534  200001f0  080115b4  000301f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20001724  080115b4  00031724  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 10 .debug_line   0003c9e0  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   0004be30  00000000  00000000  0006cbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000a688  00000000  00000000  000b8a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001c60  00000000  00000000  000c30b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000a9ec1  00000000  00000000  000c4d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002bb0  00000000  00000000  0016ebd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    000183ae  00000000  00000000  00171788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002345d  00000000  00000000  00189b36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001acf93  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005a90  00000000  00000000  001acfe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stabstr      0000014d  00000000  00000000  001b2a78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f0 	.word	0x200001f0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08010728 	.word	0x08010728

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f4 	.word	0x200001f4
 8000104:	08010728 	.word	0x08010728

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__gnu_thumb1_case_uhi>:
 8000130:	b403      	push	{r0, r1}
 8000132:	4671      	mov	r1, lr
 8000134:	0849      	lsrs	r1, r1, #1
 8000136:	0040      	lsls	r0, r0, #1
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	5a09      	ldrh	r1, [r1, r0]
 800013c:	0049      	lsls	r1, r1, #1
 800013e:	448e      	add	lr, r1
 8000140:	bc03      	pop	{r0, r1}
 8000142:	4770      	bx	lr

08000144 <__udivsi3>:
 8000144:	2200      	movs	r2, #0
 8000146:	0843      	lsrs	r3, r0, #1
 8000148:	428b      	cmp	r3, r1
 800014a:	d374      	bcc.n	8000236 <__udivsi3+0xf2>
 800014c:	0903      	lsrs	r3, r0, #4
 800014e:	428b      	cmp	r3, r1
 8000150:	d35f      	bcc.n	8000212 <__udivsi3+0xce>
 8000152:	0a03      	lsrs	r3, r0, #8
 8000154:	428b      	cmp	r3, r1
 8000156:	d344      	bcc.n	80001e2 <__udivsi3+0x9e>
 8000158:	0b03      	lsrs	r3, r0, #12
 800015a:	428b      	cmp	r3, r1
 800015c:	d328      	bcc.n	80001b0 <__udivsi3+0x6c>
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d30d      	bcc.n	8000180 <__udivsi3+0x3c>
 8000164:	22ff      	movs	r2, #255	; 0xff
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	ba12      	rev	r2, r2
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d302      	bcc.n	8000176 <__udivsi3+0x32>
 8000170:	1212      	asrs	r2, r2, #8
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	d065      	beq.n	8000242 <__udivsi3+0xfe>
 8000176:	0b03      	lsrs	r3, r0, #12
 8000178:	428b      	cmp	r3, r1
 800017a:	d319      	bcc.n	80001b0 <__udivsi3+0x6c>
 800017c:	e000      	b.n	8000180 <__udivsi3+0x3c>
 800017e:	0a09      	lsrs	r1, r1, #8
 8000180:	0bc3      	lsrs	r3, r0, #15
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x46>
 8000186:	03cb      	lsls	r3, r1, #15
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b83      	lsrs	r3, r0, #14
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x52>
 8000192:	038b      	lsls	r3, r1, #14
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b43      	lsrs	r3, r0, #13
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x5e>
 800019e:	034b      	lsls	r3, r1, #13
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b03      	lsrs	r3, r0, #12
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x6a>
 80001aa:	030b      	lsls	r3, r1, #12
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0ac3      	lsrs	r3, r0, #11
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x76>
 80001b6:	02cb      	lsls	r3, r1, #11
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a83      	lsrs	r3, r0, #10
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x82>
 80001c2:	028b      	lsls	r3, r1, #10
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a43      	lsrs	r3, r0, #9
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x8e>
 80001ce:	024b      	lsls	r3, r1, #9
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a03      	lsrs	r3, r0, #8
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x9a>
 80001da:	020b      	lsls	r3, r1, #8
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	d2cd      	bcs.n	800017e <__udivsi3+0x3a>
 80001e2:	09c3      	lsrs	r3, r0, #7
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xa8>
 80001e8:	01cb      	lsls	r3, r1, #7
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0983      	lsrs	r3, r0, #6
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xb4>
 80001f4:	018b      	lsls	r3, r1, #6
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0943      	lsrs	r3, r0, #5
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xc0>
 8000200:	014b      	lsls	r3, r1, #5
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0903      	lsrs	r3, r0, #4
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xcc>
 800020c:	010b      	lsls	r3, r1, #4
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	08c3      	lsrs	r3, r0, #3
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xd8>
 8000218:	00cb      	lsls	r3, r1, #3
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0883      	lsrs	r3, r0, #2
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xe4>
 8000224:	008b      	lsls	r3, r1, #2
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0843      	lsrs	r3, r0, #1
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xf0>
 8000230:	004b      	lsls	r3, r1, #1
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	1a41      	subs	r1, r0, r1
 8000238:	d200      	bcs.n	800023c <__udivsi3+0xf8>
 800023a:	4601      	mov	r1, r0
 800023c:	4152      	adcs	r2, r2
 800023e:	4610      	mov	r0, r2
 8000240:	4770      	bx	lr
 8000242:	e7ff      	b.n	8000244 <__udivsi3+0x100>
 8000244:	b501      	push	{r0, lr}
 8000246:	2000      	movs	r0, #0
 8000248:	f000 f8f0 	bl	800042c <__aeabi_idiv0>
 800024c:	bd02      	pop	{r1, pc}
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_uidivmod>:
 8000250:	2900      	cmp	r1, #0
 8000252:	d0f7      	beq.n	8000244 <__udivsi3+0x100>
 8000254:	e776      	b.n	8000144 <__udivsi3>
 8000256:	4770      	bx	lr

08000258 <__divsi3>:
 8000258:	4603      	mov	r3, r0
 800025a:	430b      	orrs	r3, r1
 800025c:	d47f      	bmi.n	800035e <__divsi3+0x106>
 800025e:	2200      	movs	r2, #0
 8000260:	0843      	lsrs	r3, r0, #1
 8000262:	428b      	cmp	r3, r1
 8000264:	d374      	bcc.n	8000350 <__divsi3+0xf8>
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d35f      	bcc.n	800032c <__divsi3+0xd4>
 800026c:	0a03      	lsrs	r3, r0, #8
 800026e:	428b      	cmp	r3, r1
 8000270:	d344      	bcc.n	80002fc <__divsi3+0xa4>
 8000272:	0b03      	lsrs	r3, r0, #12
 8000274:	428b      	cmp	r3, r1
 8000276:	d328      	bcc.n	80002ca <__divsi3+0x72>
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d30d      	bcc.n	800029a <__divsi3+0x42>
 800027e:	22ff      	movs	r2, #255	; 0xff
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	ba12      	rev	r2, r2
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d302      	bcc.n	8000290 <__divsi3+0x38>
 800028a:	1212      	asrs	r2, r2, #8
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	d065      	beq.n	800035c <__divsi3+0x104>
 8000290:	0b03      	lsrs	r3, r0, #12
 8000292:	428b      	cmp	r3, r1
 8000294:	d319      	bcc.n	80002ca <__divsi3+0x72>
 8000296:	e000      	b.n	800029a <__divsi3+0x42>
 8000298:	0a09      	lsrs	r1, r1, #8
 800029a:	0bc3      	lsrs	r3, r0, #15
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x4c>
 80002a0:	03cb      	lsls	r3, r1, #15
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b83      	lsrs	r3, r0, #14
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x58>
 80002ac:	038b      	lsls	r3, r1, #14
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b43      	lsrs	r3, r0, #13
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x64>
 80002b8:	034b      	lsls	r3, r1, #13
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b03      	lsrs	r3, r0, #12
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x70>
 80002c4:	030b      	lsls	r3, r1, #12
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0ac3      	lsrs	r3, r0, #11
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x7c>
 80002d0:	02cb      	lsls	r3, r1, #11
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a83      	lsrs	r3, r0, #10
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x88>
 80002dc:	028b      	lsls	r3, r1, #10
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a43      	lsrs	r3, r0, #9
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x94>
 80002e8:	024b      	lsls	r3, r1, #9
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a03      	lsrs	r3, r0, #8
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0xa0>
 80002f4:	020b      	lsls	r3, r1, #8
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	d2cd      	bcs.n	8000298 <__divsi3+0x40>
 80002fc:	09c3      	lsrs	r3, r0, #7
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xae>
 8000302:	01cb      	lsls	r3, r1, #7
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0983      	lsrs	r3, r0, #6
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xba>
 800030e:	018b      	lsls	r3, r1, #6
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0943      	lsrs	r3, r0, #5
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xc6>
 800031a:	014b      	lsls	r3, r1, #5
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0903      	lsrs	r3, r0, #4
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xd2>
 8000326:	010b      	lsls	r3, r1, #4
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	08c3      	lsrs	r3, r0, #3
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xde>
 8000332:	00cb      	lsls	r3, r1, #3
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0883      	lsrs	r3, r0, #2
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xea>
 800033e:	008b      	lsls	r3, r1, #2
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0843      	lsrs	r3, r0, #1
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xf6>
 800034a:	004b      	lsls	r3, r1, #1
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	1a41      	subs	r1, r0, r1
 8000352:	d200      	bcs.n	8000356 <__divsi3+0xfe>
 8000354:	4601      	mov	r1, r0
 8000356:	4152      	adcs	r2, r2
 8000358:	4610      	mov	r0, r2
 800035a:	4770      	bx	lr
 800035c:	e05d      	b.n	800041a <__divsi3+0x1c2>
 800035e:	0fca      	lsrs	r2, r1, #31
 8000360:	d000      	beq.n	8000364 <__divsi3+0x10c>
 8000362:	4249      	negs	r1, r1
 8000364:	1003      	asrs	r3, r0, #32
 8000366:	d300      	bcc.n	800036a <__divsi3+0x112>
 8000368:	4240      	negs	r0, r0
 800036a:	4053      	eors	r3, r2
 800036c:	2200      	movs	r2, #0
 800036e:	469c      	mov	ip, r3
 8000370:	0903      	lsrs	r3, r0, #4
 8000372:	428b      	cmp	r3, r1
 8000374:	d32d      	bcc.n	80003d2 <__divsi3+0x17a>
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d312      	bcc.n	80003a2 <__divsi3+0x14a>
 800037c:	22fc      	movs	r2, #252	; 0xfc
 800037e:	0189      	lsls	r1, r1, #6
 8000380:	ba12      	rev	r2, r2
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d30c      	bcc.n	80003a2 <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d308      	bcc.n	80003a2 <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	1192      	asrs	r2, r2, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d304      	bcc.n	80003a2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	d03a      	beq.n	8000412 <__divsi3+0x1ba>
 800039c:	1192      	asrs	r2, r2, #6
 800039e:	e000      	b.n	80003a2 <__divsi3+0x14a>
 80003a0:	0989      	lsrs	r1, r1, #6
 80003a2:	09c3      	lsrs	r3, r0, #7
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x154>
 80003a8:	01cb      	lsls	r3, r1, #7
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0983      	lsrs	r3, r0, #6
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x160>
 80003b4:	018b      	lsls	r3, r1, #6
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0943      	lsrs	r3, r0, #5
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x16c>
 80003c0:	014b      	lsls	r3, r1, #5
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0903      	lsrs	r3, r0, #4
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x178>
 80003cc:	010b      	lsls	r3, r1, #4
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	08c3      	lsrs	r3, r0, #3
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x184>
 80003d8:	00cb      	lsls	r3, r1, #3
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	0883      	lsrs	r3, r0, #2
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x190>
 80003e4:	008b      	lsls	r3, r1, #2
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	d2d9      	bcs.n	80003a0 <__divsi3+0x148>
 80003ec:	0843      	lsrs	r3, r0, #1
 80003ee:	428b      	cmp	r3, r1
 80003f0:	d301      	bcc.n	80003f6 <__divsi3+0x19e>
 80003f2:	004b      	lsls	r3, r1, #1
 80003f4:	1ac0      	subs	r0, r0, r3
 80003f6:	4152      	adcs	r2, r2
 80003f8:	1a41      	subs	r1, r0, r1
 80003fa:	d200      	bcs.n	80003fe <__divsi3+0x1a6>
 80003fc:	4601      	mov	r1, r0
 80003fe:	4663      	mov	r3, ip
 8000400:	4152      	adcs	r2, r2
 8000402:	105b      	asrs	r3, r3, #1
 8000404:	4610      	mov	r0, r2
 8000406:	d301      	bcc.n	800040c <__divsi3+0x1b4>
 8000408:	4240      	negs	r0, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d500      	bpl.n	8000410 <__divsi3+0x1b8>
 800040e:	4249      	negs	r1, r1
 8000410:	4770      	bx	lr
 8000412:	4663      	mov	r3, ip
 8000414:	105b      	asrs	r3, r3, #1
 8000416:	d300      	bcc.n	800041a <__divsi3+0x1c2>
 8000418:	4240      	negs	r0, r0
 800041a:	b501      	push	{r0, lr}
 800041c:	2000      	movs	r0, #0
 800041e:	f000 f805 	bl	800042c <__aeabi_idiv0>
 8000422:	bd02      	pop	{r1, pc}

08000424 <__aeabi_idivmod>:
 8000424:	2900      	cmp	r1, #0
 8000426:	d0f8      	beq.n	800041a <__divsi3+0x1c2>
 8000428:	e716      	b.n	8000258 <__divsi3>
 800042a:	4770      	bx	lr

0800042c <__aeabi_idiv0>:
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_cdrcmple>:
 8000430:	4684      	mov	ip, r0
 8000432:	1c10      	adds	r0, r2, #0
 8000434:	4662      	mov	r2, ip
 8000436:	468c      	mov	ip, r1
 8000438:	1c19      	adds	r1, r3, #0
 800043a:	4663      	mov	r3, ip
 800043c:	e000      	b.n	8000440 <__aeabi_cdcmpeq>
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdcmpeq>:
 8000440:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000442:	f001 ff33 	bl	80022ac <__ledf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	d401      	bmi.n	800044e <__aeabi_cdcmpeq+0xe>
 800044a:	2100      	movs	r1, #0
 800044c:	42c8      	cmn	r0, r1
 800044e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000450 <__aeabi_dcmpeq>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 fe7d 	bl	8002150 <__eqdf2>
 8000456:	4240      	negs	r0, r0
 8000458:	3001      	adds	r0, #1
 800045a:	bd10      	pop	{r4, pc}

0800045c <__aeabi_dcmplt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 ff25 	bl	80022ac <__ledf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	db01      	blt.n	800046a <__aeabi_dcmplt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmple>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f001 ff1b 	bl	80022ac <__ledf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	dd01      	ble.n	800047e <__aeabi_dcmple+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_dcmpgt>:
 8000484:	b510      	push	{r4, lr}
 8000486:	f001 fe9f 	bl	80021c8 <__gedf2>
 800048a:	2800      	cmp	r0, #0
 800048c:	dc01      	bgt.n	8000492 <__aeabi_dcmpgt+0xe>
 800048e:	2000      	movs	r0, #0
 8000490:	bd10      	pop	{r4, pc}
 8000492:	2001      	movs	r0, #1
 8000494:	bd10      	pop	{r4, pc}
 8000496:	46c0      	nop			; (mov r8, r8)

08000498 <__aeabi_dcmpge>:
 8000498:	b510      	push	{r4, lr}
 800049a:	f001 fe95 	bl	80021c8 <__gedf2>
 800049e:	2800      	cmp	r0, #0
 80004a0:	da01      	bge.n	80004a6 <__aeabi_dcmpge+0xe>
 80004a2:	2000      	movs	r0, #0
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	2001      	movs	r0, #1
 80004a8:	bd10      	pop	{r4, pc}
 80004aa:	46c0      	nop			; (mov r8, r8)

080004ac <__aeabi_cfrcmple>:
 80004ac:	4684      	mov	ip, r0
 80004ae:	1c08      	adds	r0, r1, #0
 80004b0:	4661      	mov	r1, ip
 80004b2:	e7ff      	b.n	80004b4 <__aeabi_cfcmpeq>

080004b4 <__aeabi_cfcmpeq>:
 80004b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b6:	f000 fc71 	bl	8000d9c <__lesf2>
 80004ba:	2800      	cmp	r0, #0
 80004bc:	d401      	bmi.n	80004c2 <__aeabi_cfcmpeq+0xe>
 80004be:	2100      	movs	r1, #0
 80004c0:	42c8      	cmn	r0, r1
 80004c2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c4 <__aeabi_fcmpeq>:
 80004c4:	b510      	push	{r4, lr}
 80004c6:	f000 fbf5 	bl	8000cb4 <__eqsf2>
 80004ca:	4240      	negs	r0, r0
 80004cc:	3001      	adds	r0, #1
 80004ce:	bd10      	pop	{r4, pc}

080004d0 <__aeabi_fcmplt>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fc63 	bl	8000d9c <__lesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	db01      	blt.n	80004de <__aeabi_fcmplt+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_fcmple>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f000 fc59 	bl	8000d9c <__lesf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dd01      	ble.n	80004f2 <__aeabi_fcmple+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)

080004f8 <__aeabi_fcmpgt>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f000 fc03 	bl	8000d04 <__gesf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	dc01      	bgt.n	8000506 <__aeabi_fcmpgt+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			; (mov r8, r8)

0800050c <__aeabi_fcmpge>:
 800050c:	b510      	push	{r4, lr}
 800050e:	f000 fbf9 	bl	8000d04 <__gesf2>
 8000512:	2800      	cmp	r0, #0
 8000514:	da01      	bge.n	800051a <__aeabi_fcmpge+0xe>
 8000516:	2000      	movs	r0, #0
 8000518:	bd10      	pop	{r4, pc}
 800051a:	2001      	movs	r0, #1
 800051c:	bd10      	pop	{r4, pc}
 800051e:	46c0      	nop			; (mov r8, r8)

08000520 <__aeabi_uldivmod>:
 8000520:	2b00      	cmp	r3, #0
 8000522:	d111      	bne.n	8000548 <__aeabi_uldivmod+0x28>
 8000524:	2a00      	cmp	r2, #0
 8000526:	d10f      	bne.n	8000548 <__aeabi_uldivmod+0x28>
 8000528:	2900      	cmp	r1, #0
 800052a:	d100      	bne.n	800052e <__aeabi_uldivmod+0xe>
 800052c:	2800      	cmp	r0, #0
 800052e:	d002      	beq.n	8000536 <__aeabi_uldivmod+0x16>
 8000530:	2100      	movs	r1, #0
 8000532:	43c9      	mvns	r1, r1
 8000534:	1c08      	adds	r0, r1, #0
 8000536:	b407      	push	{r0, r1, r2}
 8000538:	4802      	ldr	r0, [pc, #8]	; (8000544 <__aeabi_uldivmod+0x24>)
 800053a:	a102      	add	r1, pc, #8	; (adr r1, 8000544 <__aeabi_uldivmod+0x24>)
 800053c:	1840      	adds	r0, r0, r1
 800053e:	9002      	str	r0, [sp, #8]
 8000540:	bd03      	pop	{r0, r1, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	fffffee9 	.word	0xfffffee9
 8000548:	b403      	push	{r0, r1}
 800054a:	4668      	mov	r0, sp
 800054c:	b501      	push	{r0, lr}
 800054e:	9802      	ldr	r0, [sp, #8]
 8000550:	f000 f83c 	bl	80005cc <__udivmoddi4>
 8000554:	9b01      	ldr	r3, [sp, #4]
 8000556:	469e      	mov	lr, r3
 8000558:	b002      	add	sp, #8
 800055a:	bc0c      	pop	{r2, r3}
 800055c:	4770      	bx	lr
 800055e:	46c0      	nop			; (mov r8, r8)

08000560 <__aeabi_f2uiz>:
 8000560:	219e      	movs	r1, #158	; 0x9e
 8000562:	b510      	push	{r4, lr}
 8000564:	05c9      	lsls	r1, r1, #23
 8000566:	1c04      	adds	r4, r0, #0
 8000568:	f7ff ffd0 	bl	800050c <__aeabi_fcmpge>
 800056c:	2800      	cmp	r0, #0
 800056e:	d103      	bne.n	8000578 <__aeabi_f2uiz+0x18>
 8000570:	1c20      	adds	r0, r4, #0
 8000572:	f000 ff3f 	bl	80013f4 <__aeabi_f2iz>
 8000576:	bd10      	pop	{r4, pc}
 8000578:	219e      	movs	r1, #158	; 0x9e
 800057a:	1c20      	adds	r0, r4, #0
 800057c:	05c9      	lsls	r1, r1, #23
 800057e:	f000 fd71 	bl	8001064 <__aeabi_fsub>
 8000582:	f000 ff37 	bl	80013f4 <__aeabi_f2iz>
 8000586:	2380      	movs	r3, #128	; 0x80
 8000588:	061b      	lsls	r3, r3, #24
 800058a:	469c      	mov	ip, r3
 800058c:	4460      	add	r0, ip
 800058e:	e7f2      	b.n	8000576 <__aeabi_f2uiz+0x16>

08000590 <__aeabi_d2uiz>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	2200      	movs	r2, #0
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <__aeabi_d2uiz+0x38>)
 8000596:	0004      	movs	r4, r0
 8000598:	000d      	movs	r5, r1
 800059a:	f7ff ff7d 	bl	8000498 <__aeabi_dcmpge>
 800059e:	2800      	cmp	r0, #0
 80005a0:	d104      	bne.n	80005ac <__aeabi_d2uiz+0x1c>
 80005a2:	0020      	movs	r0, r4
 80005a4:	0029      	movs	r1, r5
 80005a6:	f002 fcef 	bl	8002f88 <__aeabi_d2iz>
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <__aeabi_d2uiz+0x38>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	0020      	movs	r0, r4
 80005b2:	0029      	movs	r1, r5
 80005b4:	f002 f956 	bl	8002864 <__aeabi_dsub>
 80005b8:	f002 fce6 	bl	8002f88 <__aeabi_d2iz>
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	061b      	lsls	r3, r3, #24
 80005c0:	469c      	mov	ip, r3
 80005c2:	4460      	add	r0, ip
 80005c4:	e7f1      	b.n	80005aa <__aeabi_d2uiz+0x1a>
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	41e00000 	.word	0x41e00000

080005cc <__udivmoddi4>:
 80005cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ce:	4657      	mov	r7, sl
 80005d0:	464e      	mov	r6, r9
 80005d2:	4645      	mov	r5, r8
 80005d4:	46de      	mov	lr, fp
 80005d6:	b5e0      	push	{r5, r6, r7, lr}
 80005d8:	0004      	movs	r4, r0
 80005da:	000d      	movs	r5, r1
 80005dc:	4692      	mov	sl, r2
 80005de:	4699      	mov	r9, r3
 80005e0:	b083      	sub	sp, #12
 80005e2:	428b      	cmp	r3, r1
 80005e4:	d830      	bhi.n	8000648 <__udivmoddi4+0x7c>
 80005e6:	d02d      	beq.n	8000644 <__udivmoddi4+0x78>
 80005e8:	4649      	mov	r1, r9
 80005ea:	4650      	mov	r0, sl
 80005ec:	f002 fe46 	bl	800327c <__clzdi2>
 80005f0:	0029      	movs	r1, r5
 80005f2:	0006      	movs	r6, r0
 80005f4:	0020      	movs	r0, r4
 80005f6:	f002 fe41 	bl	800327c <__clzdi2>
 80005fa:	1a33      	subs	r3, r6, r0
 80005fc:	4698      	mov	r8, r3
 80005fe:	3b20      	subs	r3, #32
 8000600:	469b      	mov	fp, r3
 8000602:	d433      	bmi.n	800066c <__udivmoddi4+0xa0>
 8000604:	465a      	mov	r2, fp
 8000606:	4653      	mov	r3, sl
 8000608:	4093      	lsls	r3, r2
 800060a:	4642      	mov	r2, r8
 800060c:	001f      	movs	r7, r3
 800060e:	4653      	mov	r3, sl
 8000610:	4093      	lsls	r3, r2
 8000612:	001e      	movs	r6, r3
 8000614:	42af      	cmp	r7, r5
 8000616:	d83a      	bhi.n	800068e <__udivmoddi4+0xc2>
 8000618:	42af      	cmp	r7, r5
 800061a:	d100      	bne.n	800061e <__udivmoddi4+0x52>
 800061c:	e078      	b.n	8000710 <__udivmoddi4+0x144>
 800061e:	465b      	mov	r3, fp
 8000620:	1ba4      	subs	r4, r4, r6
 8000622:	41bd      	sbcs	r5, r7
 8000624:	2b00      	cmp	r3, #0
 8000626:	da00      	bge.n	800062a <__udivmoddi4+0x5e>
 8000628:	e075      	b.n	8000716 <__udivmoddi4+0x14a>
 800062a:	2200      	movs	r2, #0
 800062c:	2300      	movs	r3, #0
 800062e:	9200      	str	r2, [sp, #0]
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2301      	movs	r3, #1
 8000634:	465a      	mov	r2, fp
 8000636:	4093      	lsls	r3, r2
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	2301      	movs	r3, #1
 800063c:	4642      	mov	r2, r8
 800063e:	4093      	lsls	r3, r2
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	e028      	b.n	8000696 <__udivmoddi4+0xca>
 8000644:	4282      	cmp	r2, r0
 8000646:	d9cf      	bls.n	80005e8 <__udivmoddi4+0x1c>
 8000648:	2200      	movs	r2, #0
 800064a:	2300      	movs	r3, #0
 800064c:	9200      	str	r2, [sp, #0]
 800064e:	9301      	str	r3, [sp, #4]
 8000650:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <__udivmoddi4+0x8e>
 8000656:	601c      	str	r4, [r3, #0]
 8000658:	605d      	str	r5, [r3, #4]
 800065a:	9800      	ldr	r0, [sp, #0]
 800065c:	9901      	ldr	r1, [sp, #4]
 800065e:	b003      	add	sp, #12
 8000660:	bcf0      	pop	{r4, r5, r6, r7}
 8000662:	46bb      	mov	fp, r7
 8000664:	46b2      	mov	sl, r6
 8000666:	46a9      	mov	r9, r5
 8000668:	46a0      	mov	r8, r4
 800066a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800066c:	4642      	mov	r2, r8
 800066e:	2320      	movs	r3, #32
 8000670:	1a9b      	subs	r3, r3, r2
 8000672:	4652      	mov	r2, sl
 8000674:	40da      	lsrs	r2, r3
 8000676:	4641      	mov	r1, r8
 8000678:	0013      	movs	r3, r2
 800067a:	464a      	mov	r2, r9
 800067c:	408a      	lsls	r2, r1
 800067e:	0017      	movs	r7, r2
 8000680:	4642      	mov	r2, r8
 8000682:	431f      	orrs	r7, r3
 8000684:	4653      	mov	r3, sl
 8000686:	4093      	lsls	r3, r2
 8000688:	001e      	movs	r6, r3
 800068a:	42af      	cmp	r7, r5
 800068c:	d9c4      	bls.n	8000618 <__udivmoddi4+0x4c>
 800068e:	2200      	movs	r2, #0
 8000690:	2300      	movs	r3, #0
 8000692:	9200      	str	r2, [sp, #0]
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	4643      	mov	r3, r8
 8000698:	2b00      	cmp	r3, #0
 800069a:	d0d9      	beq.n	8000650 <__udivmoddi4+0x84>
 800069c:	07fb      	lsls	r3, r7, #31
 800069e:	0872      	lsrs	r2, r6, #1
 80006a0:	431a      	orrs	r2, r3
 80006a2:	4646      	mov	r6, r8
 80006a4:	087b      	lsrs	r3, r7, #1
 80006a6:	e00e      	b.n	80006c6 <__udivmoddi4+0xfa>
 80006a8:	42ab      	cmp	r3, r5
 80006aa:	d101      	bne.n	80006b0 <__udivmoddi4+0xe4>
 80006ac:	42a2      	cmp	r2, r4
 80006ae:	d80c      	bhi.n	80006ca <__udivmoddi4+0xfe>
 80006b0:	1aa4      	subs	r4, r4, r2
 80006b2:	419d      	sbcs	r5, r3
 80006b4:	2001      	movs	r0, #1
 80006b6:	1924      	adds	r4, r4, r4
 80006b8:	416d      	adcs	r5, r5
 80006ba:	2100      	movs	r1, #0
 80006bc:	3e01      	subs	r6, #1
 80006be:	1824      	adds	r4, r4, r0
 80006c0:	414d      	adcs	r5, r1
 80006c2:	2e00      	cmp	r6, #0
 80006c4:	d006      	beq.n	80006d4 <__udivmoddi4+0x108>
 80006c6:	42ab      	cmp	r3, r5
 80006c8:	d9ee      	bls.n	80006a8 <__udivmoddi4+0xdc>
 80006ca:	3e01      	subs	r6, #1
 80006cc:	1924      	adds	r4, r4, r4
 80006ce:	416d      	adcs	r5, r5
 80006d0:	2e00      	cmp	r6, #0
 80006d2:	d1f8      	bne.n	80006c6 <__udivmoddi4+0xfa>
 80006d4:	9800      	ldr	r0, [sp, #0]
 80006d6:	9901      	ldr	r1, [sp, #4]
 80006d8:	465b      	mov	r3, fp
 80006da:	1900      	adds	r0, r0, r4
 80006dc:	4169      	adcs	r1, r5
 80006de:	2b00      	cmp	r3, #0
 80006e0:	db24      	blt.n	800072c <__udivmoddi4+0x160>
 80006e2:	002b      	movs	r3, r5
 80006e4:	465a      	mov	r2, fp
 80006e6:	4644      	mov	r4, r8
 80006e8:	40d3      	lsrs	r3, r2
 80006ea:	002a      	movs	r2, r5
 80006ec:	40e2      	lsrs	r2, r4
 80006ee:	001c      	movs	r4, r3
 80006f0:	465b      	mov	r3, fp
 80006f2:	0015      	movs	r5, r2
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	db2a      	blt.n	800074e <__udivmoddi4+0x182>
 80006f8:	0026      	movs	r6, r4
 80006fa:	409e      	lsls	r6, r3
 80006fc:	0033      	movs	r3, r6
 80006fe:	0026      	movs	r6, r4
 8000700:	4647      	mov	r7, r8
 8000702:	40be      	lsls	r6, r7
 8000704:	0032      	movs	r2, r6
 8000706:	1a80      	subs	r0, r0, r2
 8000708:	4199      	sbcs	r1, r3
 800070a:	9000      	str	r0, [sp, #0]
 800070c:	9101      	str	r1, [sp, #4]
 800070e:	e79f      	b.n	8000650 <__udivmoddi4+0x84>
 8000710:	42a3      	cmp	r3, r4
 8000712:	d8bc      	bhi.n	800068e <__udivmoddi4+0xc2>
 8000714:	e783      	b.n	800061e <__udivmoddi4+0x52>
 8000716:	4642      	mov	r2, r8
 8000718:	2320      	movs	r3, #32
 800071a:	2100      	movs	r1, #0
 800071c:	1a9b      	subs	r3, r3, r2
 800071e:	2200      	movs	r2, #0
 8000720:	9100      	str	r1, [sp, #0]
 8000722:	9201      	str	r2, [sp, #4]
 8000724:	2201      	movs	r2, #1
 8000726:	40da      	lsrs	r2, r3
 8000728:	9201      	str	r2, [sp, #4]
 800072a:	e786      	b.n	800063a <__udivmoddi4+0x6e>
 800072c:	4642      	mov	r2, r8
 800072e:	2320      	movs	r3, #32
 8000730:	1a9b      	subs	r3, r3, r2
 8000732:	002a      	movs	r2, r5
 8000734:	4646      	mov	r6, r8
 8000736:	409a      	lsls	r2, r3
 8000738:	0023      	movs	r3, r4
 800073a:	40f3      	lsrs	r3, r6
 800073c:	4644      	mov	r4, r8
 800073e:	4313      	orrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	dad4      	bge.n	80006f8 <__udivmoddi4+0x12c>
 800074e:	4642      	mov	r2, r8
 8000750:	002f      	movs	r7, r5
 8000752:	2320      	movs	r3, #32
 8000754:	0026      	movs	r6, r4
 8000756:	4097      	lsls	r7, r2
 8000758:	1a9b      	subs	r3, r3, r2
 800075a:	40de      	lsrs	r6, r3
 800075c:	003b      	movs	r3, r7
 800075e:	4333      	orrs	r3, r6
 8000760:	e7cd      	b.n	80006fe <__udivmoddi4+0x132>
 8000762:	46c0      	nop			; (mov r8, r8)

08000764 <__aeabi_fadd>:
 8000764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000766:	4646      	mov	r6, r8
 8000768:	46d6      	mov	lr, sl
 800076a:	464f      	mov	r7, r9
 800076c:	024d      	lsls	r5, r1, #9
 800076e:	0242      	lsls	r2, r0, #9
 8000770:	b5c0      	push	{r6, r7, lr}
 8000772:	0a52      	lsrs	r2, r2, #9
 8000774:	0a6e      	lsrs	r6, r5, #9
 8000776:	0047      	lsls	r7, r0, #1
 8000778:	46b0      	mov	r8, r6
 800077a:	0e3f      	lsrs	r7, r7, #24
 800077c:	004e      	lsls	r6, r1, #1
 800077e:	0fc4      	lsrs	r4, r0, #31
 8000780:	00d0      	lsls	r0, r2, #3
 8000782:	4694      	mov	ip, r2
 8000784:	003b      	movs	r3, r7
 8000786:	4682      	mov	sl, r0
 8000788:	0e36      	lsrs	r6, r6, #24
 800078a:	0fc9      	lsrs	r1, r1, #31
 800078c:	09ad      	lsrs	r5, r5, #6
 800078e:	428c      	cmp	r4, r1
 8000790:	d06d      	beq.n	800086e <__aeabi_fadd+0x10a>
 8000792:	1bb8      	subs	r0, r7, r6
 8000794:	4681      	mov	r9, r0
 8000796:	2800      	cmp	r0, #0
 8000798:	dd4d      	ble.n	8000836 <__aeabi_fadd+0xd2>
 800079a:	2e00      	cmp	r6, #0
 800079c:	d100      	bne.n	80007a0 <__aeabi_fadd+0x3c>
 800079e:	e088      	b.n	80008b2 <__aeabi_fadd+0x14e>
 80007a0:	2fff      	cmp	r7, #255	; 0xff
 80007a2:	d05a      	beq.n	800085a <__aeabi_fadd+0xf6>
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	04db      	lsls	r3, r3, #19
 80007a8:	431d      	orrs	r5, r3
 80007aa:	464b      	mov	r3, r9
 80007ac:	2201      	movs	r2, #1
 80007ae:	2b1b      	cmp	r3, #27
 80007b0:	dc0a      	bgt.n	80007c8 <__aeabi_fadd+0x64>
 80007b2:	002b      	movs	r3, r5
 80007b4:	464a      	mov	r2, r9
 80007b6:	4649      	mov	r1, r9
 80007b8:	40d3      	lsrs	r3, r2
 80007ba:	2220      	movs	r2, #32
 80007bc:	1a52      	subs	r2, r2, r1
 80007be:	4095      	lsls	r5, r2
 80007c0:	002a      	movs	r2, r5
 80007c2:	1e55      	subs	r5, r2, #1
 80007c4:	41aa      	sbcs	r2, r5
 80007c6:	431a      	orrs	r2, r3
 80007c8:	4653      	mov	r3, sl
 80007ca:	1a9a      	subs	r2, r3, r2
 80007cc:	0153      	lsls	r3, r2, #5
 80007ce:	d400      	bmi.n	80007d2 <__aeabi_fadd+0x6e>
 80007d0:	e0b9      	b.n	8000946 <__aeabi_fadd+0x1e2>
 80007d2:	0192      	lsls	r2, r2, #6
 80007d4:	0996      	lsrs	r6, r2, #6
 80007d6:	0030      	movs	r0, r6
 80007d8:	f002 fd32 	bl	8003240 <__clzsi2>
 80007dc:	3805      	subs	r0, #5
 80007de:	4086      	lsls	r6, r0
 80007e0:	4287      	cmp	r7, r0
 80007e2:	dd00      	ble.n	80007e6 <__aeabi_fadd+0x82>
 80007e4:	e0d4      	b.n	8000990 <__aeabi_fadd+0x22c>
 80007e6:	0033      	movs	r3, r6
 80007e8:	1bc7      	subs	r7, r0, r7
 80007ea:	2020      	movs	r0, #32
 80007ec:	3701      	adds	r7, #1
 80007ee:	40fb      	lsrs	r3, r7
 80007f0:	1bc7      	subs	r7, r0, r7
 80007f2:	40be      	lsls	r6, r7
 80007f4:	0032      	movs	r2, r6
 80007f6:	1e56      	subs	r6, r2, #1
 80007f8:	41b2      	sbcs	r2, r6
 80007fa:	2700      	movs	r7, #0
 80007fc:	431a      	orrs	r2, r3
 80007fe:	0753      	lsls	r3, r2, #29
 8000800:	d004      	beq.n	800080c <__aeabi_fadd+0xa8>
 8000802:	230f      	movs	r3, #15
 8000804:	4013      	ands	r3, r2
 8000806:	2b04      	cmp	r3, #4
 8000808:	d000      	beq.n	800080c <__aeabi_fadd+0xa8>
 800080a:	3204      	adds	r2, #4
 800080c:	0153      	lsls	r3, r2, #5
 800080e:	d400      	bmi.n	8000812 <__aeabi_fadd+0xae>
 8000810:	e09c      	b.n	800094c <__aeabi_fadd+0x1e8>
 8000812:	1c7b      	adds	r3, r7, #1
 8000814:	2ffe      	cmp	r7, #254	; 0xfe
 8000816:	d100      	bne.n	800081a <__aeabi_fadd+0xb6>
 8000818:	e09a      	b.n	8000950 <__aeabi_fadd+0x1ec>
 800081a:	0192      	lsls	r2, r2, #6
 800081c:	0a52      	lsrs	r2, r2, #9
 800081e:	4694      	mov	ip, r2
 8000820:	b2db      	uxtb	r3, r3
 8000822:	05d8      	lsls	r0, r3, #23
 8000824:	4663      	mov	r3, ip
 8000826:	07e4      	lsls	r4, r4, #31
 8000828:	4318      	orrs	r0, r3
 800082a:	4320      	orrs	r0, r4
 800082c:	bce0      	pop	{r5, r6, r7}
 800082e:	46ba      	mov	sl, r7
 8000830:	46b1      	mov	r9, r6
 8000832:	46a8      	mov	r8, r5
 8000834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000836:	2800      	cmp	r0, #0
 8000838:	d049      	beq.n	80008ce <__aeabi_fadd+0x16a>
 800083a:	1bf3      	subs	r3, r6, r7
 800083c:	2f00      	cmp	r7, #0
 800083e:	d000      	beq.n	8000842 <__aeabi_fadd+0xde>
 8000840:	e0b6      	b.n	80009b0 <__aeabi_fadd+0x24c>
 8000842:	4652      	mov	r2, sl
 8000844:	2a00      	cmp	r2, #0
 8000846:	d060      	beq.n	800090a <__aeabi_fadd+0x1a6>
 8000848:	3b01      	subs	r3, #1
 800084a:	2b00      	cmp	r3, #0
 800084c:	d100      	bne.n	8000850 <__aeabi_fadd+0xec>
 800084e:	e0fc      	b.n	8000a4a <__aeabi_fadd+0x2e6>
 8000850:	2eff      	cmp	r6, #255	; 0xff
 8000852:	d000      	beq.n	8000856 <__aeabi_fadd+0xf2>
 8000854:	e0b4      	b.n	80009c0 <__aeabi_fadd+0x25c>
 8000856:	000c      	movs	r4, r1
 8000858:	4642      	mov	r2, r8
 800085a:	2a00      	cmp	r2, #0
 800085c:	d078      	beq.n	8000950 <__aeabi_fadd+0x1ec>
 800085e:	2080      	movs	r0, #128	; 0x80
 8000860:	03c0      	lsls	r0, r0, #15
 8000862:	4310      	orrs	r0, r2
 8000864:	0242      	lsls	r2, r0, #9
 8000866:	0a53      	lsrs	r3, r2, #9
 8000868:	469c      	mov	ip, r3
 800086a:	23ff      	movs	r3, #255	; 0xff
 800086c:	e7d9      	b.n	8000822 <__aeabi_fadd+0xbe>
 800086e:	1bb9      	subs	r1, r7, r6
 8000870:	2900      	cmp	r1, #0
 8000872:	dd71      	ble.n	8000958 <__aeabi_fadd+0x1f4>
 8000874:	2e00      	cmp	r6, #0
 8000876:	d03f      	beq.n	80008f8 <__aeabi_fadd+0x194>
 8000878:	2fff      	cmp	r7, #255	; 0xff
 800087a:	d0ee      	beq.n	800085a <__aeabi_fadd+0xf6>
 800087c:	2380      	movs	r3, #128	; 0x80
 800087e:	04db      	lsls	r3, r3, #19
 8000880:	431d      	orrs	r5, r3
 8000882:	2201      	movs	r2, #1
 8000884:	291b      	cmp	r1, #27
 8000886:	dc07      	bgt.n	8000898 <__aeabi_fadd+0x134>
 8000888:	002a      	movs	r2, r5
 800088a:	2320      	movs	r3, #32
 800088c:	40ca      	lsrs	r2, r1
 800088e:	1a59      	subs	r1, r3, r1
 8000890:	408d      	lsls	r5, r1
 8000892:	1e6b      	subs	r3, r5, #1
 8000894:	419d      	sbcs	r5, r3
 8000896:	432a      	orrs	r2, r5
 8000898:	4452      	add	r2, sl
 800089a:	0153      	lsls	r3, r2, #5
 800089c:	d553      	bpl.n	8000946 <__aeabi_fadd+0x1e2>
 800089e:	3701      	adds	r7, #1
 80008a0:	2fff      	cmp	r7, #255	; 0xff
 80008a2:	d055      	beq.n	8000950 <__aeabi_fadd+0x1ec>
 80008a4:	2301      	movs	r3, #1
 80008a6:	497b      	ldr	r1, [pc, #492]	; (8000a94 <__aeabi_fadd+0x330>)
 80008a8:	4013      	ands	r3, r2
 80008aa:	0852      	lsrs	r2, r2, #1
 80008ac:	400a      	ands	r2, r1
 80008ae:	431a      	orrs	r2, r3
 80008b0:	e7a5      	b.n	80007fe <__aeabi_fadd+0x9a>
 80008b2:	2d00      	cmp	r5, #0
 80008b4:	d02c      	beq.n	8000910 <__aeabi_fadd+0x1ac>
 80008b6:	2301      	movs	r3, #1
 80008b8:	425b      	negs	r3, r3
 80008ba:	469c      	mov	ip, r3
 80008bc:	44e1      	add	r9, ip
 80008be:	464b      	mov	r3, r9
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d100      	bne.n	80008c6 <__aeabi_fadd+0x162>
 80008c4:	e0ad      	b.n	8000a22 <__aeabi_fadd+0x2be>
 80008c6:	2fff      	cmp	r7, #255	; 0xff
 80008c8:	d000      	beq.n	80008cc <__aeabi_fadd+0x168>
 80008ca:	e76e      	b.n	80007aa <__aeabi_fadd+0x46>
 80008cc:	e7c5      	b.n	800085a <__aeabi_fadd+0xf6>
 80008ce:	20fe      	movs	r0, #254	; 0xfe
 80008d0:	1c7e      	adds	r6, r7, #1
 80008d2:	4230      	tst	r0, r6
 80008d4:	d160      	bne.n	8000998 <__aeabi_fadd+0x234>
 80008d6:	2f00      	cmp	r7, #0
 80008d8:	d000      	beq.n	80008dc <__aeabi_fadd+0x178>
 80008da:	e093      	b.n	8000a04 <__aeabi_fadd+0x2a0>
 80008dc:	4652      	mov	r2, sl
 80008de:	2a00      	cmp	r2, #0
 80008e0:	d100      	bne.n	80008e4 <__aeabi_fadd+0x180>
 80008e2:	e0b6      	b.n	8000a52 <__aeabi_fadd+0x2ee>
 80008e4:	2d00      	cmp	r5, #0
 80008e6:	d09c      	beq.n	8000822 <__aeabi_fadd+0xbe>
 80008e8:	1b52      	subs	r2, r2, r5
 80008ea:	0150      	lsls	r0, r2, #5
 80008ec:	d400      	bmi.n	80008f0 <__aeabi_fadd+0x18c>
 80008ee:	e0c3      	b.n	8000a78 <__aeabi_fadd+0x314>
 80008f0:	4653      	mov	r3, sl
 80008f2:	000c      	movs	r4, r1
 80008f4:	1aea      	subs	r2, r5, r3
 80008f6:	e782      	b.n	80007fe <__aeabi_fadd+0x9a>
 80008f8:	2d00      	cmp	r5, #0
 80008fa:	d009      	beq.n	8000910 <__aeabi_fadd+0x1ac>
 80008fc:	3901      	subs	r1, #1
 80008fe:	2900      	cmp	r1, #0
 8000900:	d100      	bne.n	8000904 <__aeabi_fadd+0x1a0>
 8000902:	e08b      	b.n	8000a1c <__aeabi_fadd+0x2b8>
 8000904:	2fff      	cmp	r7, #255	; 0xff
 8000906:	d1bc      	bne.n	8000882 <__aeabi_fadd+0x11e>
 8000908:	e7a7      	b.n	800085a <__aeabi_fadd+0xf6>
 800090a:	000c      	movs	r4, r1
 800090c:	4642      	mov	r2, r8
 800090e:	0037      	movs	r7, r6
 8000910:	2fff      	cmp	r7, #255	; 0xff
 8000912:	d0a2      	beq.n	800085a <__aeabi_fadd+0xf6>
 8000914:	0252      	lsls	r2, r2, #9
 8000916:	0a53      	lsrs	r3, r2, #9
 8000918:	469c      	mov	ip, r3
 800091a:	b2fb      	uxtb	r3, r7
 800091c:	e781      	b.n	8000822 <__aeabi_fadd+0xbe>
 800091e:	21fe      	movs	r1, #254	; 0xfe
 8000920:	3701      	adds	r7, #1
 8000922:	4239      	tst	r1, r7
 8000924:	d165      	bne.n	80009f2 <__aeabi_fadd+0x28e>
 8000926:	2b00      	cmp	r3, #0
 8000928:	d17e      	bne.n	8000a28 <__aeabi_fadd+0x2c4>
 800092a:	2800      	cmp	r0, #0
 800092c:	d100      	bne.n	8000930 <__aeabi_fadd+0x1cc>
 800092e:	e0aa      	b.n	8000a86 <__aeabi_fadd+0x322>
 8000930:	2d00      	cmp	r5, #0
 8000932:	d100      	bne.n	8000936 <__aeabi_fadd+0x1d2>
 8000934:	e775      	b.n	8000822 <__aeabi_fadd+0xbe>
 8000936:	002a      	movs	r2, r5
 8000938:	4452      	add	r2, sl
 800093a:	2700      	movs	r7, #0
 800093c:	0153      	lsls	r3, r2, #5
 800093e:	d502      	bpl.n	8000946 <__aeabi_fadd+0x1e2>
 8000940:	4b55      	ldr	r3, [pc, #340]	; (8000a98 <__aeabi_fadd+0x334>)
 8000942:	3701      	adds	r7, #1
 8000944:	401a      	ands	r2, r3
 8000946:	0753      	lsls	r3, r2, #29
 8000948:	d000      	beq.n	800094c <__aeabi_fadd+0x1e8>
 800094a:	e75a      	b.n	8000802 <__aeabi_fadd+0x9e>
 800094c:	08d2      	lsrs	r2, r2, #3
 800094e:	e7df      	b.n	8000910 <__aeabi_fadd+0x1ac>
 8000950:	2200      	movs	r2, #0
 8000952:	23ff      	movs	r3, #255	; 0xff
 8000954:	4694      	mov	ip, r2
 8000956:	e764      	b.n	8000822 <__aeabi_fadd+0xbe>
 8000958:	2900      	cmp	r1, #0
 800095a:	d0e0      	beq.n	800091e <__aeabi_fadd+0x1ba>
 800095c:	1bf3      	subs	r3, r6, r7
 800095e:	2f00      	cmp	r7, #0
 8000960:	d03e      	beq.n	80009e0 <__aeabi_fadd+0x27c>
 8000962:	2eff      	cmp	r6, #255	; 0xff
 8000964:	d100      	bne.n	8000968 <__aeabi_fadd+0x204>
 8000966:	e777      	b.n	8000858 <__aeabi_fadd+0xf4>
 8000968:	2280      	movs	r2, #128	; 0x80
 800096a:	0001      	movs	r1, r0
 800096c:	04d2      	lsls	r2, r2, #19
 800096e:	4311      	orrs	r1, r2
 8000970:	468a      	mov	sl, r1
 8000972:	2201      	movs	r2, #1
 8000974:	2b1b      	cmp	r3, #27
 8000976:	dc08      	bgt.n	800098a <__aeabi_fadd+0x226>
 8000978:	4652      	mov	r2, sl
 800097a:	2120      	movs	r1, #32
 800097c:	4650      	mov	r0, sl
 800097e:	40da      	lsrs	r2, r3
 8000980:	1acb      	subs	r3, r1, r3
 8000982:	4098      	lsls	r0, r3
 8000984:	1e43      	subs	r3, r0, #1
 8000986:	4198      	sbcs	r0, r3
 8000988:	4302      	orrs	r2, r0
 800098a:	0037      	movs	r7, r6
 800098c:	1952      	adds	r2, r2, r5
 800098e:	e784      	b.n	800089a <__aeabi_fadd+0x136>
 8000990:	4a41      	ldr	r2, [pc, #260]	; (8000a98 <__aeabi_fadd+0x334>)
 8000992:	1a3f      	subs	r7, r7, r0
 8000994:	4032      	ands	r2, r6
 8000996:	e732      	b.n	80007fe <__aeabi_fadd+0x9a>
 8000998:	4653      	mov	r3, sl
 800099a:	1b5e      	subs	r6, r3, r5
 800099c:	0173      	lsls	r3, r6, #5
 800099e:	d42d      	bmi.n	80009fc <__aeabi_fadd+0x298>
 80009a0:	2e00      	cmp	r6, #0
 80009a2:	d000      	beq.n	80009a6 <__aeabi_fadd+0x242>
 80009a4:	e717      	b.n	80007d6 <__aeabi_fadd+0x72>
 80009a6:	2200      	movs	r2, #0
 80009a8:	2400      	movs	r4, #0
 80009aa:	2300      	movs	r3, #0
 80009ac:	4694      	mov	ip, r2
 80009ae:	e738      	b.n	8000822 <__aeabi_fadd+0xbe>
 80009b0:	2eff      	cmp	r6, #255	; 0xff
 80009b2:	d100      	bne.n	80009b6 <__aeabi_fadd+0x252>
 80009b4:	e74f      	b.n	8000856 <__aeabi_fadd+0xf2>
 80009b6:	2280      	movs	r2, #128	; 0x80
 80009b8:	4650      	mov	r0, sl
 80009ba:	04d2      	lsls	r2, r2, #19
 80009bc:	4310      	orrs	r0, r2
 80009be:	4682      	mov	sl, r0
 80009c0:	2201      	movs	r2, #1
 80009c2:	2b1b      	cmp	r3, #27
 80009c4:	dc08      	bgt.n	80009d8 <__aeabi_fadd+0x274>
 80009c6:	4652      	mov	r2, sl
 80009c8:	2420      	movs	r4, #32
 80009ca:	4650      	mov	r0, sl
 80009cc:	40da      	lsrs	r2, r3
 80009ce:	1ae3      	subs	r3, r4, r3
 80009d0:	4098      	lsls	r0, r3
 80009d2:	1e43      	subs	r3, r0, #1
 80009d4:	4198      	sbcs	r0, r3
 80009d6:	4302      	orrs	r2, r0
 80009d8:	000c      	movs	r4, r1
 80009da:	0037      	movs	r7, r6
 80009dc:	1aaa      	subs	r2, r5, r2
 80009de:	e6f5      	b.n	80007cc <__aeabi_fadd+0x68>
 80009e0:	2800      	cmp	r0, #0
 80009e2:	d093      	beq.n	800090c <__aeabi_fadd+0x1a8>
 80009e4:	3b01      	subs	r3, #1
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d04f      	beq.n	8000a8a <__aeabi_fadd+0x326>
 80009ea:	2eff      	cmp	r6, #255	; 0xff
 80009ec:	d1c1      	bne.n	8000972 <__aeabi_fadd+0x20e>
 80009ee:	4642      	mov	r2, r8
 80009f0:	e733      	b.n	800085a <__aeabi_fadd+0xf6>
 80009f2:	2fff      	cmp	r7, #255	; 0xff
 80009f4:	d0ac      	beq.n	8000950 <__aeabi_fadd+0x1ec>
 80009f6:	4455      	add	r5, sl
 80009f8:	086a      	lsrs	r2, r5, #1
 80009fa:	e7a4      	b.n	8000946 <__aeabi_fadd+0x1e2>
 80009fc:	4653      	mov	r3, sl
 80009fe:	000c      	movs	r4, r1
 8000a00:	1aee      	subs	r6, r5, r3
 8000a02:	e6e8      	b.n	80007d6 <__aeabi_fadd+0x72>
 8000a04:	4653      	mov	r3, sl
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d128      	bne.n	8000a5c <__aeabi_fadd+0x2f8>
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	d000      	beq.n	8000a10 <__aeabi_fadd+0x2ac>
 8000a0e:	e722      	b.n	8000856 <__aeabi_fadd+0xf2>
 8000a10:	2380      	movs	r3, #128	; 0x80
 8000a12:	03db      	lsls	r3, r3, #15
 8000a14:	469c      	mov	ip, r3
 8000a16:	2400      	movs	r4, #0
 8000a18:	23ff      	movs	r3, #255	; 0xff
 8000a1a:	e702      	b.n	8000822 <__aeabi_fadd+0xbe>
 8000a1c:	002a      	movs	r2, r5
 8000a1e:	4452      	add	r2, sl
 8000a20:	e73b      	b.n	800089a <__aeabi_fadd+0x136>
 8000a22:	4653      	mov	r3, sl
 8000a24:	1b5a      	subs	r2, r3, r5
 8000a26:	e6d1      	b.n	80007cc <__aeabi_fadd+0x68>
 8000a28:	2800      	cmp	r0, #0
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_fadd+0x2ca>
 8000a2c:	e714      	b.n	8000858 <__aeabi_fadd+0xf4>
 8000a2e:	2d00      	cmp	r5, #0
 8000a30:	d100      	bne.n	8000a34 <__aeabi_fadd+0x2d0>
 8000a32:	e712      	b.n	800085a <__aeabi_fadd+0xf6>
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	03db      	lsls	r3, r3, #15
 8000a38:	421a      	tst	r2, r3
 8000a3a:	d100      	bne.n	8000a3e <__aeabi_fadd+0x2da>
 8000a3c:	e70d      	b.n	800085a <__aeabi_fadd+0xf6>
 8000a3e:	4641      	mov	r1, r8
 8000a40:	4219      	tst	r1, r3
 8000a42:	d000      	beq.n	8000a46 <__aeabi_fadd+0x2e2>
 8000a44:	e709      	b.n	800085a <__aeabi_fadd+0xf6>
 8000a46:	4642      	mov	r2, r8
 8000a48:	e707      	b.n	800085a <__aeabi_fadd+0xf6>
 8000a4a:	000c      	movs	r4, r1
 8000a4c:	0037      	movs	r7, r6
 8000a4e:	1aaa      	subs	r2, r5, r2
 8000a50:	e6bc      	b.n	80007cc <__aeabi_fadd+0x68>
 8000a52:	2d00      	cmp	r5, #0
 8000a54:	d013      	beq.n	8000a7e <__aeabi_fadd+0x31a>
 8000a56:	000c      	movs	r4, r1
 8000a58:	46c4      	mov	ip, r8
 8000a5a:	e6e2      	b.n	8000822 <__aeabi_fadd+0xbe>
 8000a5c:	2d00      	cmp	r5, #0
 8000a5e:	d100      	bne.n	8000a62 <__aeabi_fadd+0x2fe>
 8000a60:	e6fb      	b.n	800085a <__aeabi_fadd+0xf6>
 8000a62:	2380      	movs	r3, #128	; 0x80
 8000a64:	03db      	lsls	r3, r3, #15
 8000a66:	421a      	tst	r2, r3
 8000a68:	d100      	bne.n	8000a6c <__aeabi_fadd+0x308>
 8000a6a:	e6f6      	b.n	800085a <__aeabi_fadd+0xf6>
 8000a6c:	4640      	mov	r0, r8
 8000a6e:	4218      	tst	r0, r3
 8000a70:	d000      	beq.n	8000a74 <__aeabi_fadd+0x310>
 8000a72:	e6f2      	b.n	800085a <__aeabi_fadd+0xf6>
 8000a74:	000c      	movs	r4, r1
 8000a76:	e6ef      	b.n	8000858 <__aeabi_fadd+0xf4>
 8000a78:	2a00      	cmp	r2, #0
 8000a7a:	d000      	beq.n	8000a7e <__aeabi_fadd+0x31a>
 8000a7c:	e763      	b.n	8000946 <__aeabi_fadd+0x1e2>
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2400      	movs	r4, #0
 8000a82:	4694      	mov	ip, r2
 8000a84:	e6cd      	b.n	8000822 <__aeabi_fadd+0xbe>
 8000a86:	46c4      	mov	ip, r8
 8000a88:	e6cb      	b.n	8000822 <__aeabi_fadd+0xbe>
 8000a8a:	002a      	movs	r2, r5
 8000a8c:	0037      	movs	r7, r6
 8000a8e:	4452      	add	r2, sl
 8000a90:	e703      	b.n	800089a <__aeabi_fadd+0x136>
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	7dffffff 	.word	0x7dffffff
 8000a98:	fbffffff 	.word	0xfbffffff

08000a9c <__aeabi_fdiv>:
 8000a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a9e:	464f      	mov	r7, r9
 8000aa0:	4646      	mov	r6, r8
 8000aa2:	46d6      	mov	lr, sl
 8000aa4:	0245      	lsls	r5, r0, #9
 8000aa6:	b5c0      	push	{r6, r7, lr}
 8000aa8:	0047      	lsls	r7, r0, #1
 8000aaa:	1c0c      	adds	r4, r1, #0
 8000aac:	0a6d      	lsrs	r5, r5, #9
 8000aae:	0e3f      	lsrs	r7, r7, #24
 8000ab0:	0fc6      	lsrs	r6, r0, #31
 8000ab2:	2f00      	cmp	r7, #0
 8000ab4:	d066      	beq.n	8000b84 <__aeabi_fdiv+0xe8>
 8000ab6:	2fff      	cmp	r7, #255	; 0xff
 8000ab8:	d06c      	beq.n	8000b94 <__aeabi_fdiv+0xf8>
 8000aba:	2300      	movs	r3, #0
 8000abc:	00ea      	lsls	r2, r5, #3
 8000abe:	2580      	movs	r5, #128	; 0x80
 8000ac0:	4699      	mov	r9, r3
 8000ac2:	469a      	mov	sl, r3
 8000ac4:	04ed      	lsls	r5, r5, #19
 8000ac6:	4315      	orrs	r5, r2
 8000ac8:	3f7f      	subs	r7, #127	; 0x7f
 8000aca:	0260      	lsls	r0, r4, #9
 8000acc:	0061      	lsls	r1, r4, #1
 8000ace:	0a43      	lsrs	r3, r0, #9
 8000ad0:	4698      	mov	r8, r3
 8000ad2:	0e09      	lsrs	r1, r1, #24
 8000ad4:	0fe4      	lsrs	r4, r4, #31
 8000ad6:	2900      	cmp	r1, #0
 8000ad8:	d048      	beq.n	8000b6c <__aeabi_fdiv+0xd0>
 8000ada:	29ff      	cmp	r1, #255	; 0xff
 8000adc:	d010      	beq.n	8000b00 <__aeabi_fdiv+0x64>
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	00d8      	lsls	r0, r3, #3
 8000ae2:	04d2      	lsls	r2, r2, #19
 8000ae4:	4302      	orrs	r2, r0
 8000ae6:	4690      	mov	r8, r2
 8000ae8:	2000      	movs	r0, #0
 8000aea:	397f      	subs	r1, #127	; 0x7f
 8000aec:	464a      	mov	r2, r9
 8000aee:	0033      	movs	r3, r6
 8000af0:	1a7f      	subs	r7, r7, r1
 8000af2:	4302      	orrs	r2, r0
 8000af4:	496c      	ldr	r1, [pc, #432]	; (8000ca8 <__aeabi_fdiv+0x20c>)
 8000af6:	0092      	lsls	r2, r2, #2
 8000af8:	588a      	ldr	r2, [r1, r2]
 8000afa:	4063      	eors	r3, r4
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	4697      	mov	pc, r2
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d16d      	bne.n	8000be0 <__aeabi_fdiv+0x144>
 8000b04:	2002      	movs	r0, #2
 8000b06:	3fff      	subs	r7, #255	; 0xff
 8000b08:	e033      	b.n	8000b72 <__aeabi_fdiv+0xd6>
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	4698      	mov	r8, r3
 8000b0e:	0026      	movs	r6, r4
 8000b10:	4645      	mov	r5, r8
 8000b12:	4682      	mov	sl, r0
 8000b14:	4653      	mov	r3, sl
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d100      	bne.n	8000b1c <__aeabi_fdiv+0x80>
 8000b1a:	e07f      	b.n	8000c1c <__aeabi_fdiv+0x180>
 8000b1c:	2b03      	cmp	r3, #3
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_fdiv+0x86>
 8000b20:	e094      	b.n	8000c4c <__aeabi_fdiv+0x1b0>
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d017      	beq.n	8000b56 <__aeabi_fdiv+0xba>
 8000b26:	0038      	movs	r0, r7
 8000b28:	307f      	adds	r0, #127	; 0x7f
 8000b2a:	2800      	cmp	r0, #0
 8000b2c:	dd5f      	ble.n	8000bee <__aeabi_fdiv+0x152>
 8000b2e:	076b      	lsls	r3, r5, #29
 8000b30:	d004      	beq.n	8000b3c <__aeabi_fdiv+0xa0>
 8000b32:	230f      	movs	r3, #15
 8000b34:	402b      	ands	r3, r5
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	d000      	beq.n	8000b3c <__aeabi_fdiv+0xa0>
 8000b3a:	3504      	adds	r5, #4
 8000b3c:	012b      	lsls	r3, r5, #4
 8000b3e:	d503      	bpl.n	8000b48 <__aeabi_fdiv+0xac>
 8000b40:	0038      	movs	r0, r7
 8000b42:	4b5a      	ldr	r3, [pc, #360]	; (8000cac <__aeabi_fdiv+0x210>)
 8000b44:	3080      	adds	r0, #128	; 0x80
 8000b46:	401d      	ands	r5, r3
 8000b48:	28fe      	cmp	r0, #254	; 0xfe
 8000b4a:	dc67      	bgt.n	8000c1c <__aeabi_fdiv+0x180>
 8000b4c:	01ad      	lsls	r5, r5, #6
 8000b4e:	0a6d      	lsrs	r5, r5, #9
 8000b50:	b2c0      	uxtb	r0, r0
 8000b52:	e002      	b.n	8000b5a <__aeabi_fdiv+0xbe>
 8000b54:	001e      	movs	r6, r3
 8000b56:	2000      	movs	r0, #0
 8000b58:	2500      	movs	r5, #0
 8000b5a:	05c0      	lsls	r0, r0, #23
 8000b5c:	4328      	orrs	r0, r5
 8000b5e:	07f6      	lsls	r6, r6, #31
 8000b60:	4330      	orrs	r0, r6
 8000b62:	bce0      	pop	{r5, r6, r7}
 8000b64:	46ba      	mov	sl, r7
 8000b66:	46b1      	mov	r9, r6
 8000b68:	46a8      	mov	r8, r5
 8000b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d12b      	bne.n	8000bc8 <__aeabi_fdiv+0x12c>
 8000b70:	2001      	movs	r0, #1
 8000b72:	464a      	mov	r2, r9
 8000b74:	0033      	movs	r3, r6
 8000b76:	494e      	ldr	r1, [pc, #312]	; (8000cb0 <__aeabi_fdiv+0x214>)
 8000b78:	4302      	orrs	r2, r0
 8000b7a:	0092      	lsls	r2, r2, #2
 8000b7c:	588a      	ldr	r2, [r1, r2]
 8000b7e:	4063      	eors	r3, r4
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	4697      	mov	pc, r2
 8000b84:	2d00      	cmp	r5, #0
 8000b86:	d113      	bne.n	8000bb0 <__aeabi_fdiv+0x114>
 8000b88:	2304      	movs	r3, #4
 8000b8a:	4699      	mov	r9, r3
 8000b8c:	3b03      	subs	r3, #3
 8000b8e:	2700      	movs	r7, #0
 8000b90:	469a      	mov	sl, r3
 8000b92:	e79a      	b.n	8000aca <__aeabi_fdiv+0x2e>
 8000b94:	2d00      	cmp	r5, #0
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_fdiv+0x108>
 8000b98:	2308      	movs	r3, #8
 8000b9a:	4699      	mov	r9, r3
 8000b9c:	3b06      	subs	r3, #6
 8000b9e:	27ff      	movs	r7, #255	; 0xff
 8000ba0:	469a      	mov	sl, r3
 8000ba2:	e792      	b.n	8000aca <__aeabi_fdiv+0x2e>
 8000ba4:	230c      	movs	r3, #12
 8000ba6:	4699      	mov	r9, r3
 8000ba8:	3b09      	subs	r3, #9
 8000baa:	27ff      	movs	r7, #255	; 0xff
 8000bac:	469a      	mov	sl, r3
 8000bae:	e78c      	b.n	8000aca <__aeabi_fdiv+0x2e>
 8000bb0:	0028      	movs	r0, r5
 8000bb2:	f002 fb45 	bl	8003240 <__clzsi2>
 8000bb6:	2776      	movs	r7, #118	; 0x76
 8000bb8:	1f43      	subs	r3, r0, #5
 8000bba:	409d      	lsls	r5, r3
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	427f      	negs	r7, r7
 8000bc0:	4699      	mov	r9, r3
 8000bc2:	469a      	mov	sl, r3
 8000bc4:	1a3f      	subs	r7, r7, r0
 8000bc6:	e780      	b.n	8000aca <__aeabi_fdiv+0x2e>
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f002 fb39 	bl	8003240 <__clzsi2>
 8000bce:	4642      	mov	r2, r8
 8000bd0:	1f43      	subs	r3, r0, #5
 8000bd2:	2176      	movs	r1, #118	; 0x76
 8000bd4:	409a      	lsls	r2, r3
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	1a09      	subs	r1, r1, r0
 8000bda:	4690      	mov	r8, r2
 8000bdc:	2000      	movs	r0, #0
 8000bde:	e785      	b.n	8000aec <__aeabi_fdiv+0x50>
 8000be0:	21ff      	movs	r1, #255	; 0xff
 8000be2:	2003      	movs	r0, #3
 8000be4:	e782      	b.n	8000aec <__aeabi_fdiv+0x50>
 8000be6:	001e      	movs	r6, r3
 8000be8:	20ff      	movs	r0, #255	; 0xff
 8000bea:	2500      	movs	r5, #0
 8000bec:	e7b5      	b.n	8000b5a <__aeabi_fdiv+0xbe>
 8000bee:	2301      	movs	r3, #1
 8000bf0:	1a1b      	subs	r3, r3, r0
 8000bf2:	2b1b      	cmp	r3, #27
 8000bf4:	dcaf      	bgt.n	8000b56 <__aeabi_fdiv+0xba>
 8000bf6:	379e      	adds	r7, #158	; 0x9e
 8000bf8:	0029      	movs	r1, r5
 8000bfa:	40bd      	lsls	r5, r7
 8000bfc:	40d9      	lsrs	r1, r3
 8000bfe:	1e6a      	subs	r2, r5, #1
 8000c00:	4195      	sbcs	r5, r2
 8000c02:	430d      	orrs	r5, r1
 8000c04:	076b      	lsls	r3, r5, #29
 8000c06:	d004      	beq.n	8000c12 <__aeabi_fdiv+0x176>
 8000c08:	230f      	movs	r3, #15
 8000c0a:	402b      	ands	r3, r5
 8000c0c:	2b04      	cmp	r3, #4
 8000c0e:	d000      	beq.n	8000c12 <__aeabi_fdiv+0x176>
 8000c10:	3504      	adds	r5, #4
 8000c12:	016b      	lsls	r3, r5, #5
 8000c14:	d544      	bpl.n	8000ca0 <__aeabi_fdiv+0x204>
 8000c16:	2001      	movs	r0, #1
 8000c18:	2500      	movs	r5, #0
 8000c1a:	e79e      	b.n	8000b5a <__aeabi_fdiv+0xbe>
 8000c1c:	20ff      	movs	r0, #255	; 0xff
 8000c1e:	2500      	movs	r5, #0
 8000c20:	e79b      	b.n	8000b5a <__aeabi_fdiv+0xbe>
 8000c22:	2580      	movs	r5, #128	; 0x80
 8000c24:	2600      	movs	r6, #0
 8000c26:	20ff      	movs	r0, #255	; 0xff
 8000c28:	03ed      	lsls	r5, r5, #15
 8000c2a:	e796      	b.n	8000b5a <__aeabi_fdiv+0xbe>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	4698      	mov	r8, r3
 8000c30:	2080      	movs	r0, #128	; 0x80
 8000c32:	03c0      	lsls	r0, r0, #15
 8000c34:	4205      	tst	r5, r0
 8000c36:	d009      	beq.n	8000c4c <__aeabi_fdiv+0x1b0>
 8000c38:	4643      	mov	r3, r8
 8000c3a:	4203      	tst	r3, r0
 8000c3c:	d106      	bne.n	8000c4c <__aeabi_fdiv+0x1b0>
 8000c3e:	4645      	mov	r5, r8
 8000c40:	4305      	orrs	r5, r0
 8000c42:	026d      	lsls	r5, r5, #9
 8000c44:	0026      	movs	r6, r4
 8000c46:	20ff      	movs	r0, #255	; 0xff
 8000c48:	0a6d      	lsrs	r5, r5, #9
 8000c4a:	e786      	b.n	8000b5a <__aeabi_fdiv+0xbe>
 8000c4c:	2080      	movs	r0, #128	; 0x80
 8000c4e:	03c0      	lsls	r0, r0, #15
 8000c50:	4305      	orrs	r5, r0
 8000c52:	026d      	lsls	r5, r5, #9
 8000c54:	20ff      	movs	r0, #255	; 0xff
 8000c56:	0a6d      	lsrs	r5, r5, #9
 8000c58:	e77f      	b.n	8000b5a <__aeabi_fdiv+0xbe>
 8000c5a:	4641      	mov	r1, r8
 8000c5c:	016a      	lsls	r2, r5, #5
 8000c5e:	0148      	lsls	r0, r1, #5
 8000c60:	4282      	cmp	r2, r0
 8000c62:	d219      	bcs.n	8000c98 <__aeabi_fdiv+0x1fc>
 8000c64:	211b      	movs	r1, #27
 8000c66:	2500      	movs	r5, #0
 8000c68:	3f01      	subs	r7, #1
 8000c6a:	2601      	movs	r6, #1
 8000c6c:	0014      	movs	r4, r2
 8000c6e:	006d      	lsls	r5, r5, #1
 8000c70:	0052      	lsls	r2, r2, #1
 8000c72:	2c00      	cmp	r4, #0
 8000c74:	db01      	blt.n	8000c7a <__aeabi_fdiv+0x1de>
 8000c76:	4290      	cmp	r0, r2
 8000c78:	d801      	bhi.n	8000c7e <__aeabi_fdiv+0x1e2>
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	4335      	orrs	r5, r6
 8000c7e:	3901      	subs	r1, #1
 8000c80:	2900      	cmp	r1, #0
 8000c82:	d1f3      	bne.n	8000c6c <__aeabi_fdiv+0x1d0>
 8000c84:	1e50      	subs	r0, r2, #1
 8000c86:	4182      	sbcs	r2, r0
 8000c88:	0038      	movs	r0, r7
 8000c8a:	307f      	adds	r0, #127	; 0x7f
 8000c8c:	001e      	movs	r6, r3
 8000c8e:	4315      	orrs	r5, r2
 8000c90:	2800      	cmp	r0, #0
 8000c92:	dd00      	ble.n	8000c96 <__aeabi_fdiv+0x1fa>
 8000c94:	e74b      	b.n	8000b2e <__aeabi_fdiv+0x92>
 8000c96:	e7aa      	b.n	8000bee <__aeabi_fdiv+0x152>
 8000c98:	211a      	movs	r1, #26
 8000c9a:	2501      	movs	r5, #1
 8000c9c:	1a12      	subs	r2, r2, r0
 8000c9e:	e7e4      	b.n	8000c6a <__aeabi_fdiv+0x1ce>
 8000ca0:	01ad      	lsls	r5, r5, #6
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	0a6d      	lsrs	r5, r5, #9
 8000ca6:	e758      	b.n	8000b5a <__aeabi_fdiv+0xbe>
 8000ca8:	08010c78 	.word	0x08010c78
 8000cac:	f7ffffff 	.word	0xf7ffffff
 8000cb0:	08010cb8 	.word	0x08010cb8

08000cb4 <__eqsf2>:
 8000cb4:	b570      	push	{r4, r5, r6, lr}
 8000cb6:	0042      	lsls	r2, r0, #1
 8000cb8:	024e      	lsls	r6, r1, #9
 8000cba:	004c      	lsls	r4, r1, #1
 8000cbc:	0245      	lsls	r5, r0, #9
 8000cbe:	0a6d      	lsrs	r5, r5, #9
 8000cc0:	0e12      	lsrs	r2, r2, #24
 8000cc2:	0fc3      	lsrs	r3, r0, #31
 8000cc4:	0a76      	lsrs	r6, r6, #9
 8000cc6:	0e24      	lsrs	r4, r4, #24
 8000cc8:	0fc9      	lsrs	r1, r1, #31
 8000cca:	2aff      	cmp	r2, #255	; 0xff
 8000ccc:	d00f      	beq.n	8000cee <__eqsf2+0x3a>
 8000cce:	2cff      	cmp	r4, #255	; 0xff
 8000cd0:	d011      	beq.n	8000cf6 <__eqsf2+0x42>
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	42a2      	cmp	r2, r4
 8000cd6:	d000      	beq.n	8000cda <__eqsf2+0x26>
 8000cd8:	bd70      	pop	{r4, r5, r6, pc}
 8000cda:	42b5      	cmp	r5, r6
 8000cdc:	d1fc      	bne.n	8000cd8 <__eqsf2+0x24>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d00d      	beq.n	8000cfe <__eqsf2+0x4a>
 8000ce2:	2a00      	cmp	r2, #0
 8000ce4:	d1f8      	bne.n	8000cd8 <__eqsf2+0x24>
 8000ce6:	0028      	movs	r0, r5
 8000ce8:	1e45      	subs	r5, r0, #1
 8000cea:	41a8      	sbcs	r0, r5
 8000cec:	e7f4      	b.n	8000cd8 <__eqsf2+0x24>
 8000cee:	2001      	movs	r0, #1
 8000cf0:	2d00      	cmp	r5, #0
 8000cf2:	d1f1      	bne.n	8000cd8 <__eqsf2+0x24>
 8000cf4:	e7eb      	b.n	8000cce <__eqsf2+0x1a>
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	2e00      	cmp	r6, #0
 8000cfa:	d1ed      	bne.n	8000cd8 <__eqsf2+0x24>
 8000cfc:	e7e9      	b.n	8000cd2 <__eqsf2+0x1e>
 8000cfe:	2000      	movs	r0, #0
 8000d00:	e7ea      	b.n	8000cd8 <__eqsf2+0x24>
 8000d02:	46c0      	nop			; (mov r8, r8)

08000d04 <__gesf2>:
 8000d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d06:	0042      	lsls	r2, r0, #1
 8000d08:	0246      	lsls	r6, r0, #9
 8000d0a:	024d      	lsls	r5, r1, #9
 8000d0c:	004c      	lsls	r4, r1, #1
 8000d0e:	0fc3      	lsrs	r3, r0, #31
 8000d10:	0a76      	lsrs	r6, r6, #9
 8000d12:	0e12      	lsrs	r2, r2, #24
 8000d14:	0a6d      	lsrs	r5, r5, #9
 8000d16:	0e24      	lsrs	r4, r4, #24
 8000d18:	0fc8      	lsrs	r0, r1, #31
 8000d1a:	2aff      	cmp	r2, #255	; 0xff
 8000d1c:	d01f      	beq.n	8000d5e <__gesf2+0x5a>
 8000d1e:	2cff      	cmp	r4, #255	; 0xff
 8000d20:	d010      	beq.n	8000d44 <__gesf2+0x40>
 8000d22:	2a00      	cmp	r2, #0
 8000d24:	d11f      	bne.n	8000d66 <__gesf2+0x62>
 8000d26:	4271      	negs	r1, r6
 8000d28:	4171      	adcs	r1, r6
 8000d2a:	2c00      	cmp	r4, #0
 8000d2c:	d101      	bne.n	8000d32 <__gesf2+0x2e>
 8000d2e:	2d00      	cmp	r5, #0
 8000d30:	d01e      	beq.n	8000d70 <__gesf2+0x6c>
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d10e      	bne.n	8000d54 <__gesf2+0x50>
 8000d36:	4283      	cmp	r3, r0
 8000d38:	d01e      	beq.n	8000d78 <__gesf2+0x74>
 8000d3a:	2102      	movs	r1, #2
 8000d3c:	1e58      	subs	r0, r3, #1
 8000d3e:	4008      	ands	r0, r1
 8000d40:	3801      	subs	r0, #1
 8000d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d44:	2d00      	cmp	r5, #0
 8000d46:	d126      	bne.n	8000d96 <__gesf2+0x92>
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	d1f4      	bne.n	8000d36 <__gesf2+0x32>
 8000d4c:	4271      	negs	r1, r6
 8000d4e:	4171      	adcs	r1, r6
 8000d50:	2900      	cmp	r1, #0
 8000d52:	d0f0      	beq.n	8000d36 <__gesf2+0x32>
 8000d54:	2800      	cmp	r0, #0
 8000d56:	d1f4      	bne.n	8000d42 <__gesf2+0x3e>
 8000d58:	2001      	movs	r0, #1
 8000d5a:	4240      	negs	r0, r0
 8000d5c:	e7f1      	b.n	8000d42 <__gesf2+0x3e>
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d119      	bne.n	8000d96 <__gesf2+0x92>
 8000d62:	2cff      	cmp	r4, #255	; 0xff
 8000d64:	d0ee      	beq.n	8000d44 <__gesf2+0x40>
 8000d66:	2c00      	cmp	r4, #0
 8000d68:	d1e5      	bne.n	8000d36 <__gesf2+0x32>
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d1e3      	bne.n	8000d36 <__gesf2+0x32>
 8000d6e:	e7e4      	b.n	8000d3a <__gesf2+0x36>
 8000d70:	2000      	movs	r0, #0
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d0e5      	beq.n	8000d42 <__gesf2+0x3e>
 8000d76:	e7e0      	b.n	8000d3a <__gesf2+0x36>
 8000d78:	42a2      	cmp	r2, r4
 8000d7a:	dc05      	bgt.n	8000d88 <__gesf2+0x84>
 8000d7c:	dbea      	blt.n	8000d54 <__gesf2+0x50>
 8000d7e:	42ae      	cmp	r6, r5
 8000d80:	d802      	bhi.n	8000d88 <__gesf2+0x84>
 8000d82:	d3e7      	bcc.n	8000d54 <__gesf2+0x50>
 8000d84:	2000      	movs	r0, #0
 8000d86:	e7dc      	b.n	8000d42 <__gesf2+0x3e>
 8000d88:	4241      	negs	r1, r0
 8000d8a:	4141      	adcs	r1, r0
 8000d8c:	4248      	negs	r0, r1
 8000d8e:	2102      	movs	r1, #2
 8000d90:	4008      	ands	r0, r1
 8000d92:	3801      	subs	r0, #1
 8000d94:	e7d5      	b.n	8000d42 <__gesf2+0x3e>
 8000d96:	2002      	movs	r0, #2
 8000d98:	4240      	negs	r0, r0
 8000d9a:	e7d2      	b.n	8000d42 <__gesf2+0x3e>

08000d9c <__lesf2>:
 8000d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d9e:	0042      	lsls	r2, r0, #1
 8000da0:	0246      	lsls	r6, r0, #9
 8000da2:	024d      	lsls	r5, r1, #9
 8000da4:	004c      	lsls	r4, r1, #1
 8000da6:	0fc3      	lsrs	r3, r0, #31
 8000da8:	0a76      	lsrs	r6, r6, #9
 8000daa:	0e12      	lsrs	r2, r2, #24
 8000dac:	0a6d      	lsrs	r5, r5, #9
 8000dae:	0e24      	lsrs	r4, r4, #24
 8000db0:	0fc8      	lsrs	r0, r1, #31
 8000db2:	2aff      	cmp	r2, #255	; 0xff
 8000db4:	d00d      	beq.n	8000dd2 <__lesf2+0x36>
 8000db6:	2cff      	cmp	r4, #255	; 0xff
 8000db8:	d00f      	beq.n	8000dda <__lesf2+0x3e>
 8000dba:	2a00      	cmp	r2, #0
 8000dbc:	d123      	bne.n	8000e06 <__lesf2+0x6a>
 8000dbe:	4271      	negs	r1, r6
 8000dc0:	4171      	adcs	r1, r6
 8000dc2:	2c00      	cmp	r4, #0
 8000dc4:	d10f      	bne.n	8000de6 <__lesf2+0x4a>
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d10d      	bne.n	8000de6 <__lesf2+0x4a>
 8000dca:	2000      	movs	r0, #0
 8000dcc:	2e00      	cmp	r6, #0
 8000dce:	d014      	beq.n	8000dfa <__lesf2+0x5e>
 8000dd0:	e00d      	b.n	8000dee <__lesf2+0x52>
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d110      	bne.n	8000df8 <__lesf2+0x5c>
 8000dd6:	2cff      	cmp	r4, #255	; 0xff
 8000dd8:	d115      	bne.n	8000e06 <__lesf2+0x6a>
 8000dda:	2d00      	cmp	r5, #0
 8000ddc:	d10c      	bne.n	8000df8 <__lesf2+0x5c>
 8000dde:	2a00      	cmp	r2, #0
 8000de0:	d103      	bne.n	8000dea <__lesf2+0x4e>
 8000de2:	4271      	negs	r1, r6
 8000de4:	4171      	adcs	r1, r6
 8000de6:	2900      	cmp	r1, #0
 8000de8:	d108      	bne.n	8000dfc <__lesf2+0x60>
 8000dea:	4283      	cmp	r3, r0
 8000dec:	d010      	beq.n	8000e10 <__lesf2+0x74>
 8000dee:	2102      	movs	r1, #2
 8000df0:	1e58      	subs	r0, r3, #1
 8000df2:	4008      	ands	r0, r1
 8000df4:	3801      	subs	r0, #1
 8000df6:	e000      	b.n	8000dfa <__lesf2+0x5e>
 8000df8:	2002      	movs	r0, #2
 8000dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dfc:	2800      	cmp	r0, #0
 8000dfe:	d1fc      	bne.n	8000dfa <__lesf2+0x5e>
 8000e00:	2001      	movs	r0, #1
 8000e02:	4240      	negs	r0, r0
 8000e04:	e7f9      	b.n	8000dfa <__lesf2+0x5e>
 8000e06:	2c00      	cmp	r4, #0
 8000e08:	d1ef      	bne.n	8000dea <__lesf2+0x4e>
 8000e0a:	2d00      	cmp	r5, #0
 8000e0c:	d1ed      	bne.n	8000dea <__lesf2+0x4e>
 8000e0e:	e7ee      	b.n	8000dee <__lesf2+0x52>
 8000e10:	42a2      	cmp	r2, r4
 8000e12:	dc05      	bgt.n	8000e20 <__lesf2+0x84>
 8000e14:	dbf2      	blt.n	8000dfc <__lesf2+0x60>
 8000e16:	42ae      	cmp	r6, r5
 8000e18:	d802      	bhi.n	8000e20 <__lesf2+0x84>
 8000e1a:	d3ef      	bcc.n	8000dfc <__lesf2+0x60>
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	e7ec      	b.n	8000dfa <__lesf2+0x5e>
 8000e20:	4241      	negs	r1, r0
 8000e22:	4141      	adcs	r1, r0
 8000e24:	4248      	negs	r0, r1
 8000e26:	2102      	movs	r1, #2
 8000e28:	4008      	ands	r0, r1
 8000e2a:	3801      	subs	r0, #1
 8000e2c:	e7e5      	b.n	8000dfa <__lesf2+0x5e>
 8000e2e:	46c0      	nop			; (mov r8, r8)

08000e30 <__aeabi_fmul>:
 8000e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e32:	4657      	mov	r7, sl
 8000e34:	464e      	mov	r6, r9
 8000e36:	4645      	mov	r5, r8
 8000e38:	46de      	mov	lr, fp
 8000e3a:	0244      	lsls	r4, r0, #9
 8000e3c:	b5e0      	push	{r5, r6, r7, lr}
 8000e3e:	0045      	lsls	r5, r0, #1
 8000e40:	1c0f      	adds	r7, r1, #0
 8000e42:	0a64      	lsrs	r4, r4, #9
 8000e44:	0e2d      	lsrs	r5, r5, #24
 8000e46:	0fc6      	lsrs	r6, r0, #31
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d047      	beq.n	8000edc <__aeabi_fmul+0xac>
 8000e4c:	2dff      	cmp	r5, #255	; 0xff
 8000e4e:	d04d      	beq.n	8000eec <__aeabi_fmul+0xbc>
 8000e50:	2300      	movs	r3, #0
 8000e52:	2080      	movs	r0, #128	; 0x80
 8000e54:	469a      	mov	sl, r3
 8000e56:	469b      	mov	fp, r3
 8000e58:	00e4      	lsls	r4, r4, #3
 8000e5a:	04c0      	lsls	r0, r0, #19
 8000e5c:	4304      	orrs	r4, r0
 8000e5e:	3d7f      	subs	r5, #127	; 0x7f
 8000e60:	0278      	lsls	r0, r7, #9
 8000e62:	0a43      	lsrs	r3, r0, #9
 8000e64:	4699      	mov	r9, r3
 8000e66:	007a      	lsls	r2, r7, #1
 8000e68:	0ffb      	lsrs	r3, r7, #31
 8000e6a:	4698      	mov	r8, r3
 8000e6c:	0e12      	lsrs	r2, r2, #24
 8000e6e:	464b      	mov	r3, r9
 8000e70:	d044      	beq.n	8000efc <__aeabi_fmul+0xcc>
 8000e72:	2aff      	cmp	r2, #255	; 0xff
 8000e74:	d011      	beq.n	8000e9a <__aeabi_fmul+0x6a>
 8000e76:	00d8      	lsls	r0, r3, #3
 8000e78:	2380      	movs	r3, #128	; 0x80
 8000e7a:	04db      	lsls	r3, r3, #19
 8000e7c:	4303      	orrs	r3, r0
 8000e7e:	4699      	mov	r9, r3
 8000e80:	2000      	movs	r0, #0
 8000e82:	3a7f      	subs	r2, #127	; 0x7f
 8000e84:	18ad      	adds	r5, r5, r2
 8000e86:	4647      	mov	r7, r8
 8000e88:	4653      	mov	r3, sl
 8000e8a:	4077      	eors	r7, r6
 8000e8c:	1c69      	adds	r1, r5, #1
 8000e8e:	2b0f      	cmp	r3, #15
 8000e90:	d83f      	bhi.n	8000f12 <__aeabi_fmul+0xe2>
 8000e92:	4a72      	ldr	r2, [pc, #456]	; (800105c <__aeabi_fmul+0x22c>)
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	58d3      	ldr	r3, [r2, r3]
 8000e98:	469f      	mov	pc, r3
 8000e9a:	35ff      	adds	r5, #255	; 0xff
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d000      	beq.n	8000ea2 <__aeabi_fmul+0x72>
 8000ea0:	e079      	b.n	8000f96 <__aeabi_fmul+0x166>
 8000ea2:	4652      	mov	r2, sl
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	4692      	mov	sl, r2
 8000eaa:	2002      	movs	r0, #2
 8000eac:	e7eb      	b.n	8000e86 <__aeabi_fmul+0x56>
 8000eae:	4647      	mov	r7, r8
 8000eb0:	464c      	mov	r4, r9
 8000eb2:	4683      	mov	fp, r0
 8000eb4:	465b      	mov	r3, fp
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d028      	beq.n	8000f0c <__aeabi_fmul+0xdc>
 8000eba:	2b03      	cmp	r3, #3
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_fmul+0x90>
 8000ebe:	e0c6      	b.n	800104e <__aeabi_fmul+0x21e>
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d14f      	bne.n	8000f64 <__aeabi_fmul+0x134>
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	2400      	movs	r4, #0
 8000ec8:	05c0      	lsls	r0, r0, #23
 8000eca:	07ff      	lsls	r7, r7, #31
 8000ecc:	4320      	orrs	r0, r4
 8000ece:	4338      	orrs	r0, r7
 8000ed0:	bcf0      	pop	{r4, r5, r6, r7}
 8000ed2:	46bb      	mov	fp, r7
 8000ed4:	46b2      	mov	sl, r6
 8000ed6:	46a9      	mov	r9, r5
 8000ed8:	46a0      	mov	r8, r4
 8000eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000edc:	2c00      	cmp	r4, #0
 8000ede:	d171      	bne.n	8000fc4 <__aeabi_fmul+0x194>
 8000ee0:	2304      	movs	r3, #4
 8000ee2:	469a      	mov	sl, r3
 8000ee4:	3b03      	subs	r3, #3
 8000ee6:	2500      	movs	r5, #0
 8000ee8:	469b      	mov	fp, r3
 8000eea:	e7b9      	b.n	8000e60 <__aeabi_fmul+0x30>
 8000eec:	2c00      	cmp	r4, #0
 8000eee:	d163      	bne.n	8000fb8 <__aeabi_fmul+0x188>
 8000ef0:	2308      	movs	r3, #8
 8000ef2:	469a      	mov	sl, r3
 8000ef4:	3b06      	subs	r3, #6
 8000ef6:	25ff      	movs	r5, #255	; 0xff
 8000ef8:	469b      	mov	fp, r3
 8000efa:	e7b1      	b.n	8000e60 <__aeabi_fmul+0x30>
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d150      	bne.n	8000fa2 <__aeabi_fmul+0x172>
 8000f00:	4652      	mov	r2, sl
 8000f02:	3301      	adds	r3, #1
 8000f04:	431a      	orrs	r2, r3
 8000f06:	4692      	mov	sl, r2
 8000f08:	2001      	movs	r0, #1
 8000f0a:	e7bc      	b.n	8000e86 <__aeabi_fmul+0x56>
 8000f0c:	20ff      	movs	r0, #255	; 0xff
 8000f0e:	2400      	movs	r4, #0
 8000f10:	e7da      	b.n	8000ec8 <__aeabi_fmul+0x98>
 8000f12:	4648      	mov	r0, r9
 8000f14:	0c26      	lsrs	r6, r4, #16
 8000f16:	0424      	lsls	r4, r4, #16
 8000f18:	0c22      	lsrs	r2, r4, #16
 8000f1a:	0404      	lsls	r4, r0, #16
 8000f1c:	0c24      	lsrs	r4, r4, #16
 8000f1e:	464b      	mov	r3, r9
 8000f20:	0020      	movs	r0, r4
 8000f22:	0c1b      	lsrs	r3, r3, #16
 8000f24:	4350      	muls	r0, r2
 8000f26:	4374      	muls	r4, r6
 8000f28:	435a      	muls	r2, r3
 8000f2a:	435e      	muls	r6, r3
 8000f2c:	1912      	adds	r2, r2, r4
 8000f2e:	0c03      	lsrs	r3, r0, #16
 8000f30:	189b      	adds	r3, r3, r2
 8000f32:	429c      	cmp	r4, r3
 8000f34:	d903      	bls.n	8000f3e <__aeabi_fmul+0x10e>
 8000f36:	2280      	movs	r2, #128	; 0x80
 8000f38:	0252      	lsls	r2, r2, #9
 8000f3a:	4694      	mov	ip, r2
 8000f3c:	4466      	add	r6, ip
 8000f3e:	0400      	lsls	r0, r0, #16
 8000f40:	041a      	lsls	r2, r3, #16
 8000f42:	0c00      	lsrs	r0, r0, #16
 8000f44:	1812      	adds	r2, r2, r0
 8000f46:	0194      	lsls	r4, r2, #6
 8000f48:	1e60      	subs	r0, r4, #1
 8000f4a:	4184      	sbcs	r4, r0
 8000f4c:	0c1b      	lsrs	r3, r3, #16
 8000f4e:	0e92      	lsrs	r2, r2, #26
 8000f50:	199b      	adds	r3, r3, r6
 8000f52:	4314      	orrs	r4, r2
 8000f54:	019b      	lsls	r3, r3, #6
 8000f56:	431c      	orrs	r4, r3
 8000f58:	011b      	lsls	r3, r3, #4
 8000f5a:	d572      	bpl.n	8001042 <__aeabi_fmul+0x212>
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	0863      	lsrs	r3, r4, #1
 8000f60:	4004      	ands	r4, r0
 8000f62:	431c      	orrs	r4, r3
 8000f64:	0008      	movs	r0, r1
 8000f66:	307f      	adds	r0, #127	; 0x7f
 8000f68:	2800      	cmp	r0, #0
 8000f6a:	dd3c      	ble.n	8000fe6 <__aeabi_fmul+0x1b6>
 8000f6c:	0763      	lsls	r3, r4, #29
 8000f6e:	d004      	beq.n	8000f7a <__aeabi_fmul+0x14a>
 8000f70:	230f      	movs	r3, #15
 8000f72:	4023      	ands	r3, r4
 8000f74:	2b04      	cmp	r3, #4
 8000f76:	d000      	beq.n	8000f7a <__aeabi_fmul+0x14a>
 8000f78:	3404      	adds	r4, #4
 8000f7a:	0123      	lsls	r3, r4, #4
 8000f7c:	d503      	bpl.n	8000f86 <__aeabi_fmul+0x156>
 8000f7e:	3180      	adds	r1, #128	; 0x80
 8000f80:	0008      	movs	r0, r1
 8000f82:	4b37      	ldr	r3, [pc, #220]	; (8001060 <__aeabi_fmul+0x230>)
 8000f84:	401c      	ands	r4, r3
 8000f86:	28fe      	cmp	r0, #254	; 0xfe
 8000f88:	dcc0      	bgt.n	8000f0c <__aeabi_fmul+0xdc>
 8000f8a:	01a4      	lsls	r4, r4, #6
 8000f8c:	0a64      	lsrs	r4, r4, #9
 8000f8e:	b2c0      	uxtb	r0, r0
 8000f90:	e79a      	b.n	8000ec8 <__aeabi_fmul+0x98>
 8000f92:	0037      	movs	r7, r6
 8000f94:	e78e      	b.n	8000eb4 <__aeabi_fmul+0x84>
 8000f96:	4652      	mov	r2, sl
 8000f98:	2303      	movs	r3, #3
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	4692      	mov	sl, r2
 8000f9e:	2003      	movs	r0, #3
 8000fa0:	e771      	b.n	8000e86 <__aeabi_fmul+0x56>
 8000fa2:	4648      	mov	r0, r9
 8000fa4:	f002 f94c 	bl	8003240 <__clzsi2>
 8000fa8:	464a      	mov	r2, r9
 8000faa:	1f43      	subs	r3, r0, #5
 8000fac:	409a      	lsls	r2, r3
 8000fae:	1a2d      	subs	r5, r5, r0
 8000fb0:	4691      	mov	r9, r2
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	3d76      	subs	r5, #118	; 0x76
 8000fb6:	e766      	b.n	8000e86 <__aeabi_fmul+0x56>
 8000fb8:	230c      	movs	r3, #12
 8000fba:	469a      	mov	sl, r3
 8000fbc:	3b09      	subs	r3, #9
 8000fbe:	25ff      	movs	r5, #255	; 0xff
 8000fc0:	469b      	mov	fp, r3
 8000fc2:	e74d      	b.n	8000e60 <__aeabi_fmul+0x30>
 8000fc4:	0020      	movs	r0, r4
 8000fc6:	f002 f93b 	bl	8003240 <__clzsi2>
 8000fca:	2576      	movs	r5, #118	; 0x76
 8000fcc:	1f43      	subs	r3, r0, #5
 8000fce:	409c      	lsls	r4, r3
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	426d      	negs	r5, r5
 8000fd4:	469a      	mov	sl, r3
 8000fd6:	469b      	mov	fp, r3
 8000fd8:	1a2d      	subs	r5, r5, r0
 8000fda:	e741      	b.n	8000e60 <__aeabi_fmul+0x30>
 8000fdc:	2480      	movs	r4, #128	; 0x80
 8000fde:	2700      	movs	r7, #0
 8000fe0:	20ff      	movs	r0, #255	; 0xff
 8000fe2:	03e4      	lsls	r4, r4, #15
 8000fe4:	e770      	b.n	8000ec8 <__aeabi_fmul+0x98>
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	1a1b      	subs	r3, r3, r0
 8000fea:	2b1b      	cmp	r3, #27
 8000fec:	dd00      	ble.n	8000ff0 <__aeabi_fmul+0x1c0>
 8000fee:	e769      	b.n	8000ec4 <__aeabi_fmul+0x94>
 8000ff0:	319e      	adds	r1, #158	; 0x9e
 8000ff2:	0020      	movs	r0, r4
 8000ff4:	408c      	lsls	r4, r1
 8000ff6:	40d8      	lsrs	r0, r3
 8000ff8:	1e63      	subs	r3, r4, #1
 8000ffa:	419c      	sbcs	r4, r3
 8000ffc:	4304      	orrs	r4, r0
 8000ffe:	0763      	lsls	r3, r4, #29
 8001000:	d004      	beq.n	800100c <__aeabi_fmul+0x1dc>
 8001002:	230f      	movs	r3, #15
 8001004:	4023      	ands	r3, r4
 8001006:	2b04      	cmp	r3, #4
 8001008:	d000      	beq.n	800100c <__aeabi_fmul+0x1dc>
 800100a:	3404      	adds	r4, #4
 800100c:	0163      	lsls	r3, r4, #5
 800100e:	d51a      	bpl.n	8001046 <__aeabi_fmul+0x216>
 8001010:	2001      	movs	r0, #1
 8001012:	2400      	movs	r4, #0
 8001014:	e758      	b.n	8000ec8 <__aeabi_fmul+0x98>
 8001016:	2080      	movs	r0, #128	; 0x80
 8001018:	03c0      	lsls	r0, r0, #15
 800101a:	4204      	tst	r4, r0
 800101c:	d009      	beq.n	8001032 <__aeabi_fmul+0x202>
 800101e:	464b      	mov	r3, r9
 8001020:	4203      	tst	r3, r0
 8001022:	d106      	bne.n	8001032 <__aeabi_fmul+0x202>
 8001024:	464c      	mov	r4, r9
 8001026:	4304      	orrs	r4, r0
 8001028:	0264      	lsls	r4, r4, #9
 800102a:	4647      	mov	r7, r8
 800102c:	20ff      	movs	r0, #255	; 0xff
 800102e:	0a64      	lsrs	r4, r4, #9
 8001030:	e74a      	b.n	8000ec8 <__aeabi_fmul+0x98>
 8001032:	2080      	movs	r0, #128	; 0x80
 8001034:	03c0      	lsls	r0, r0, #15
 8001036:	4304      	orrs	r4, r0
 8001038:	0264      	lsls	r4, r4, #9
 800103a:	0037      	movs	r7, r6
 800103c:	20ff      	movs	r0, #255	; 0xff
 800103e:	0a64      	lsrs	r4, r4, #9
 8001040:	e742      	b.n	8000ec8 <__aeabi_fmul+0x98>
 8001042:	0029      	movs	r1, r5
 8001044:	e78e      	b.n	8000f64 <__aeabi_fmul+0x134>
 8001046:	01a4      	lsls	r4, r4, #6
 8001048:	2000      	movs	r0, #0
 800104a:	0a64      	lsrs	r4, r4, #9
 800104c:	e73c      	b.n	8000ec8 <__aeabi_fmul+0x98>
 800104e:	2080      	movs	r0, #128	; 0x80
 8001050:	03c0      	lsls	r0, r0, #15
 8001052:	4304      	orrs	r4, r0
 8001054:	0264      	lsls	r4, r4, #9
 8001056:	20ff      	movs	r0, #255	; 0xff
 8001058:	0a64      	lsrs	r4, r4, #9
 800105a:	e735      	b.n	8000ec8 <__aeabi_fmul+0x98>
 800105c:	08010cf8 	.word	0x08010cf8
 8001060:	f7ffffff 	.word	0xf7ffffff

08001064 <__aeabi_fsub>:
 8001064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001066:	4646      	mov	r6, r8
 8001068:	46d6      	mov	lr, sl
 800106a:	464f      	mov	r7, r9
 800106c:	0243      	lsls	r3, r0, #9
 800106e:	0a5b      	lsrs	r3, r3, #9
 8001070:	00da      	lsls	r2, r3, #3
 8001072:	4694      	mov	ip, r2
 8001074:	024a      	lsls	r2, r1, #9
 8001076:	b5c0      	push	{r6, r7, lr}
 8001078:	0044      	lsls	r4, r0, #1
 800107a:	0a56      	lsrs	r6, r2, #9
 800107c:	1c05      	adds	r5, r0, #0
 800107e:	46b0      	mov	r8, r6
 8001080:	0e24      	lsrs	r4, r4, #24
 8001082:	004e      	lsls	r6, r1, #1
 8001084:	0992      	lsrs	r2, r2, #6
 8001086:	001f      	movs	r7, r3
 8001088:	0020      	movs	r0, r4
 800108a:	4692      	mov	sl, r2
 800108c:	0fed      	lsrs	r5, r5, #31
 800108e:	0e36      	lsrs	r6, r6, #24
 8001090:	0fc9      	lsrs	r1, r1, #31
 8001092:	2eff      	cmp	r6, #255	; 0xff
 8001094:	d100      	bne.n	8001098 <__aeabi_fsub+0x34>
 8001096:	e07f      	b.n	8001198 <__aeabi_fsub+0x134>
 8001098:	2201      	movs	r2, #1
 800109a:	4051      	eors	r1, r2
 800109c:	428d      	cmp	r5, r1
 800109e:	d051      	beq.n	8001144 <__aeabi_fsub+0xe0>
 80010a0:	1ba2      	subs	r2, r4, r6
 80010a2:	4691      	mov	r9, r2
 80010a4:	2a00      	cmp	r2, #0
 80010a6:	dc00      	bgt.n	80010aa <__aeabi_fsub+0x46>
 80010a8:	e07e      	b.n	80011a8 <__aeabi_fsub+0x144>
 80010aa:	2e00      	cmp	r6, #0
 80010ac:	d100      	bne.n	80010b0 <__aeabi_fsub+0x4c>
 80010ae:	e099      	b.n	80011e4 <__aeabi_fsub+0x180>
 80010b0:	2cff      	cmp	r4, #255	; 0xff
 80010b2:	d100      	bne.n	80010b6 <__aeabi_fsub+0x52>
 80010b4:	e08c      	b.n	80011d0 <__aeabi_fsub+0x16c>
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	4652      	mov	r2, sl
 80010ba:	04db      	lsls	r3, r3, #19
 80010bc:	431a      	orrs	r2, r3
 80010be:	4692      	mov	sl, r2
 80010c0:	464a      	mov	r2, r9
 80010c2:	2301      	movs	r3, #1
 80010c4:	2a1b      	cmp	r2, #27
 80010c6:	dc08      	bgt.n	80010da <__aeabi_fsub+0x76>
 80010c8:	4653      	mov	r3, sl
 80010ca:	2120      	movs	r1, #32
 80010cc:	40d3      	lsrs	r3, r2
 80010ce:	1a89      	subs	r1, r1, r2
 80010d0:	4652      	mov	r2, sl
 80010d2:	408a      	lsls	r2, r1
 80010d4:	1e51      	subs	r1, r2, #1
 80010d6:	418a      	sbcs	r2, r1
 80010d8:	4313      	orrs	r3, r2
 80010da:	4662      	mov	r2, ip
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	015a      	lsls	r2, r3, #5
 80010e0:	d400      	bmi.n	80010e4 <__aeabi_fsub+0x80>
 80010e2:	e0f3      	b.n	80012cc <__aeabi_fsub+0x268>
 80010e4:	019b      	lsls	r3, r3, #6
 80010e6:	099e      	lsrs	r6, r3, #6
 80010e8:	0030      	movs	r0, r6
 80010ea:	f002 f8a9 	bl	8003240 <__clzsi2>
 80010ee:	3805      	subs	r0, #5
 80010f0:	4086      	lsls	r6, r0
 80010f2:	4284      	cmp	r4, r0
 80010f4:	dd00      	ble.n	80010f8 <__aeabi_fsub+0x94>
 80010f6:	e0f7      	b.n	80012e8 <__aeabi_fsub+0x284>
 80010f8:	0032      	movs	r2, r6
 80010fa:	1b04      	subs	r4, r0, r4
 80010fc:	2020      	movs	r0, #32
 80010fe:	3401      	adds	r4, #1
 8001100:	40e2      	lsrs	r2, r4
 8001102:	1b04      	subs	r4, r0, r4
 8001104:	40a6      	lsls	r6, r4
 8001106:	0033      	movs	r3, r6
 8001108:	1e5e      	subs	r6, r3, #1
 800110a:	41b3      	sbcs	r3, r6
 800110c:	2400      	movs	r4, #0
 800110e:	4313      	orrs	r3, r2
 8001110:	075a      	lsls	r2, r3, #29
 8001112:	d004      	beq.n	800111e <__aeabi_fsub+0xba>
 8001114:	220f      	movs	r2, #15
 8001116:	401a      	ands	r2, r3
 8001118:	2a04      	cmp	r2, #4
 800111a:	d000      	beq.n	800111e <__aeabi_fsub+0xba>
 800111c:	3304      	adds	r3, #4
 800111e:	015a      	lsls	r2, r3, #5
 8001120:	d400      	bmi.n	8001124 <__aeabi_fsub+0xc0>
 8001122:	e0d6      	b.n	80012d2 <__aeabi_fsub+0x26e>
 8001124:	1c62      	adds	r2, r4, #1
 8001126:	2cfe      	cmp	r4, #254	; 0xfe
 8001128:	d100      	bne.n	800112c <__aeabi_fsub+0xc8>
 800112a:	e0da      	b.n	80012e2 <__aeabi_fsub+0x27e>
 800112c:	019b      	lsls	r3, r3, #6
 800112e:	0a5f      	lsrs	r7, r3, #9
 8001130:	b2d0      	uxtb	r0, r2
 8001132:	05c0      	lsls	r0, r0, #23
 8001134:	4338      	orrs	r0, r7
 8001136:	07ed      	lsls	r5, r5, #31
 8001138:	4328      	orrs	r0, r5
 800113a:	bce0      	pop	{r5, r6, r7}
 800113c:	46ba      	mov	sl, r7
 800113e:	46b1      	mov	r9, r6
 8001140:	46a8      	mov	r8, r5
 8001142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001144:	1ba2      	subs	r2, r4, r6
 8001146:	4691      	mov	r9, r2
 8001148:	2a00      	cmp	r2, #0
 800114a:	dd63      	ble.n	8001214 <__aeabi_fsub+0x1b0>
 800114c:	2e00      	cmp	r6, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_fsub+0xee>
 8001150:	e099      	b.n	8001286 <__aeabi_fsub+0x222>
 8001152:	2cff      	cmp	r4, #255	; 0xff
 8001154:	d03c      	beq.n	80011d0 <__aeabi_fsub+0x16c>
 8001156:	2380      	movs	r3, #128	; 0x80
 8001158:	4652      	mov	r2, sl
 800115a:	04db      	lsls	r3, r3, #19
 800115c:	431a      	orrs	r2, r3
 800115e:	4692      	mov	sl, r2
 8001160:	464a      	mov	r2, r9
 8001162:	2301      	movs	r3, #1
 8001164:	2a1b      	cmp	r2, #27
 8001166:	dc08      	bgt.n	800117a <__aeabi_fsub+0x116>
 8001168:	4653      	mov	r3, sl
 800116a:	2120      	movs	r1, #32
 800116c:	40d3      	lsrs	r3, r2
 800116e:	1a89      	subs	r1, r1, r2
 8001170:	4652      	mov	r2, sl
 8001172:	408a      	lsls	r2, r1
 8001174:	1e51      	subs	r1, r2, #1
 8001176:	418a      	sbcs	r2, r1
 8001178:	4313      	orrs	r3, r2
 800117a:	4463      	add	r3, ip
 800117c:	015a      	lsls	r2, r3, #5
 800117e:	d400      	bmi.n	8001182 <__aeabi_fsub+0x11e>
 8001180:	e0a4      	b.n	80012cc <__aeabi_fsub+0x268>
 8001182:	3401      	adds	r4, #1
 8001184:	2cff      	cmp	r4, #255	; 0xff
 8001186:	d100      	bne.n	800118a <__aeabi_fsub+0x126>
 8001188:	e0ab      	b.n	80012e2 <__aeabi_fsub+0x27e>
 800118a:	2201      	movs	r2, #1
 800118c:	4997      	ldr	r1, [pc, #604]	; (80013ec <__aeabi_fsub+0x388>)
 800118e:	401a      	ands	r2, r3
 8001190:	085b      	lsrs	r3, r3, #1
 8001192:	400b      	ands	r3, r1
 8001194:	4313      	orrs	r3, r2
 8001196:	e7bb      	b.n	8001110 <__aeabi_fsub+0xac>
 8001198:	2a00      	cmp	r2, #0
 800119a:	d032      	beq.n	8001202 <__aeabi_fsub+0x19e>
 800119c:	428d      	cmp	r5, r1
 800119e:	d035      	beq.n	800120c <__aeabi_fsub+0x1a8>
 80011a0:	22ff      	movs	r2, #255	; 0xff
 80011a2:	4252      	negs	r2, r2
 80011a4:	4691      	mov	r9, r2
 80011a6:	44a1      	add	r9, r4
 80011a8:	464a      	mov	r2, r9
 80011aa:	2a00      	cmp	r2, #0
 80011ac:	d051      	beq.n	8001252 <__aeabi_fsub+0x1ee>
 80011ae:	1b30      	subs	r0, r6, r4
 80011b0:	2c00      	cmp	r4, #0
 80011b2:	d000      	beq.n	80011b6 <__aeabi_fsub+0x152>
 80011b4:	e09c      	b.n	80012f0 <__aeabi_fsub+0x28c>
 80011b6:	4663      	mov	r3, ip
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d100      	bne.n	80011be <__aeabi_fsub+0x15a>
 80011bc:	e0df      	b.n	800137e <__aeabi_fsub+0x31a>
 80011be:	3801      	subs	r0, #1
 80011c0:	2800      	cmp	r0, #0
 80011c2:	d100      	bne.n	80011c6 <__aeabi_fsub+0x162>
 80011c4:	e0f7      	b.n	80013b6 <__aeabi_fsub+0x352>
 80011c6:	2eff      	cmp	r6, #255	; 0xff
 80011c8:	d000      	beq.n	80011cc <__aeabi_fsub+0x168>
 80011ca:	e099      	b.n	8001300 <__aeabi_fsub+0x29c>
 80011cc:	000d      	movs	r5, r1
 80011ce:	4643      	mov	r3, r8
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d100      	bne.n	80011d6 <__aeabi_fsub+0x172>
 80011d4:	e085      	b.n	80012e2 <__aeabi_fsub+0x27e>
 80011d6:	2780      	movs	r7, #128	; 0x80
 80011d8:	03ff      	lsls	r7, r7, #15
 80011da:	431f      	orrs	r7, r3
 80011dc:	027f      	lsls	r7, r7, #9
 80011de:	20ff      	movs	r0, #255	; 0xff
 80011e0:	0a7f      	lsrs	r7, r7, #9
 80011e2:	e7a6      	b.n	8001132 <__aeabi_fsub+0xce>
 80011e4:	4652      	mov	r2, sl
 80011e6:	2a00      	cmp	r2, #0
 80011e8:	d074      	beq.n	80012d4 <__aeabi_fsub+0x270>
 80011ea:	2201      	movs	r2, #1
 80011ec:	4252      	negs	r2, r2
 80011ee:	4690      	mov	r8, r2
 80011f0:	44c1      	add	r9, r8
 80011f2:	464a      	mov	r2, r9
 80011f4:	2a00      	cmp	r2, #0
 80011f6:	d100      	bne.n	80011fa <__aeabi_fsub+0x196>
 80011f8:	e0c8      	b.n	800138c <__aeabi_fsub+0x328>
 80011fa:	2cff      	cmp	r4, #255	; 0xff
 80011fc:	d000      	beq.n	8001200 <__aeabi_fsub+0x19c>
 80011fe:	e75f      	b.n	80010c0 <__aeabi_fsub+0x5c>
 8001200:	e7e6      	b.n	80011d0 <__aeabi_fsub+0x16c>
 8001202:	2201      	movs	r2, #1
 8001204:	4051      	eors	r1, r2
 8001206:	42a9      	cmp	r1, r5
 8001208:	d000      	beq.n	800120c <__aeabi_fsub+0x1a8>
 800120a:	e749      	b.n	80010a0 <__aeabi_fsub+0x3c>
 800120c:	22ff      	movs	r2, #255	; 0xff
 800120e:	4252      	negs	r2, r2
 8001210:	4691      	mov	r9, r2
 8001212:	44a1      	add	r9, r4
 8001214:	464a      	mov	r2, r9
 8001216:	2a00      	cmp	r2, #0
 8001218:	d043      	beq.n	80012a2 <__aeabi_fsub+0x23e>
 800121a:	1b31      	subs	r1, r6, r4
 800121c:	2c00      	cmp	r4, #0
 800121e:	d100      	bne.n	8001222 <__aeabi_fsub+0x1be>
 8001220:	e08c      	b.n	800133c <__aeabi_fsub+0x2d8>
 8001222:	2eff      	cmp	r6, #255	; 0xff
 8001224:	d100      	bne.n	8001228 <__aeabi_fsub+0x1c4>
 8001226:	e092      	b.n	800134e <__aeabi_fsub+0x2ea>
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	4662      	mov	r2, ip
 800122c:	04db      	lsls	r3, r3, #19
 800122e:	431a      	orrs	r2, r3
 8001230:	4694      	mov	ip, r2
 8001232:	2301      	movs	r3, #1
 8001234:	291b      	cmp	r1, #27
 8001236:	dc09      	bgt.n	800124c <__aeabi_fsub+0x1e8>
 8001238:	2020      	movs	r0, #32
 800123a:	4663      	mov	r3, ip
 800123c:	4662      	mov	r2, ip
 800123e:	40cb      	lsrs	r3, r1
 8001240:	1a41      	subs	r1, r0, r1
 8001242:	408a      	lsls	r2, r1
 8001244:	0011      	movs	r1, r2
 8001246:	1e48      	subs	r0, r1, #1
 8001248:	4181      	sbcs	r1, r0
 800124a:	430b      	orrs	r3, r1
 800124c:	0034      	movs	r4, r6
 800124e:	4453      	add	r3, sl
 8001250:	e794      	b.n	800117c <__aeabi_fsub+0x118>
 8001252:	22fe      	movs	r2, #254	; 0xfe
 8001254:	1c66      	adds	r6, r4, #1
 8001256:	4232      	tst	r2, r6
 8001258:	d164      	bne.n	8001324 <__aeabi_fsub+0x2c0>
 800125a:	2c00      	cmp	r4, #0
 800125c:	d000      	beq.n	8001260 <__aeabi_fsub+0x1fc>
 800125e:	e082      	b.n	8001366 <__aeabi_fsub+0x302>
 8001260:	4663      	mov	r3, ip
 8001262:	2b00      	cmp	r3, #0
 8001264:	d100      	bne.n	8001268 <__aeabi_fsub+0x204>
 8001266:	e0ab      	b.n	80013c0 <__aeabi_fsub+0x35c>
 8001268:	4653      	mov	r3, sl
 800126a:	2b00      	cmp	r3, #0
 800126c:	d100      	bne.n	8001270 <__aeabi_fsub+0x20c>
 800126e:	e760      	b.n	8001132 <__aeabi_fsub+0xce>
 8001270:	4663      	mov	r3, ip
 8001272:	4652      	mov	r2, sl
 8001274:	1a9b      	subs	r3, r3, r2
 8001276:	015a      	lsls	r2, r3, #5
 8001278:	d400      	bmi.n	800127c <__aeabi_fsub+0x218>
 800127a:	e0aa      	b.n	80013d2 <__aeabi_fsub+0x36e>
 800127c:	4663      	mov	r3, ip
 800127e:	4652      	mov	r2, sl
 8001280:	000d      	movs	r5, r1
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	e744      	b.n	8001110 <__aeabi_fsub+0xac>
 8001286:	4652      	mov	r2, sl
 8001288:	2a00      	cmp	r2, #0
 800128a:	d023      	beq.n	80012d4 <__aeabi_fsub+0x270>
 800128c:	2201      	movs	r2, #1
 800128e:	4252      	negs	r2, r2
 8001290:	4690      	mov	r8, r2
 8001292:	44c1      	add	r9, r8
 8001294:	464a      	mov	r2, r9
 8001296:	2a00      	cmp	r2, #0
 8001298:	d075      	beq.n	8001386 <__aeabi_fsub+0x322>
 800129a:	2cff      	cmp	r4, #255	; 0xff
 800129c:	d000      	beq.n	80012a0 <__aeabi_fsub+0x23c>
 800129e:	e75f      	b.n	8001160 <__aeabi_fsub+0xfc>
 80012a0:	e796      	b.n	80011d0 <__aeabi_fsub+0x16c>
 80012a2:	26fe      	movs	r6, #254	; 0xfe
 80012a4:	3401      	adds	r4, #1
 80012a6:	4226      	tst	r6, r4
 80012a8:	d153      	bne.n	8001352 <__aeabi_fsub+0x2ee>
 80012aa:	2800      	cmp	r0, #0
 80012ac:	d172      	bne.n	8001394 <__aeabi_fsub+0x330>
 80012ae:	4663      	mov	r3, ip
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d100      	bne.n	80012b6 <__aeabi_fsub+0x252>
 80012b4:	e093      	b.n	80013de <__aeabi_fsub+0x37a>
 80012b6:	4653      	mov	r3, sl
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d100      	bne.n	80012be <__aeabi_fsub+0x25a>
 80012bc:	e739      	b.n	8001132 <__aeabi_fsub+0xce>
 80012be:	4463      	add	r3, ip
 80012c0:	2400      	movs	r4, #0
 80012c2:	015a      	lsls	r2, r3, #5
 80012c4:	d502      	bpl.n	80012cc <__aeabi_fsub+0x268>
 80012c6:	4a4a      	ldr	r2, [pc, #296]	; (80013f0 <__aeabi_fsub+0x38c>)
 80012c8:	3401      	adds	r4, #1
 80012ca:	4013      	ands	r3, r2
 80012cc:	075a      	lsls	r2, r3, #29
 80012ce:	d000      	beq.n	80012d2 <__aeabi_fsub+0x26e>
 80012d0:	e720      	b.n	8001114 <__aeabi_fsub+0xb0>
 80012d2:	08db      	lsrs	r3, r3, #3
 80012d4:	2cff      	cmp	r4, #255	; 0xff
 80012d6:	d100      	bne.n	80012da <__aeabi_fsub+0x276>
 80012d8:	e77a      	b.n	80011d0 <__aeabi_fsub+0x16c>
 80012da:	025b      	lsls	r3, r3, #9
 80012dc:	0a5f      	lsrs	r7, r3, #9
 80012de:	b2e0      	uxtb	r0, r4
 80012e0:	e727      	b.n	8001132 <__aeabi_fsub+0xce>
 80012e2:	20ff      	movs	r0, #255	; 0xff
 80012e4:	2700      	movs	r7, #0
 80012e6:	e724      	b.n	8001132 <__aeabi_fsub+0xce>
 80012e8:	4b41      	ldr	r3, [pc, #260]	; (80013f0 <__aeabi_fsub+0x38c>)
 80012ea:	1a24      	subs	r4, r4, r0
 80012ec:	4033      	ands	r3, r6
 80012ee:	e70f      	b.n	8001110 <__aeabi_fsub+0xac>
 80012f0:	2eff      	cmp	r6, #255	; 0xff
 80012f2:	d100      	bne.n	80012f6 <__aeabi_fsub+0x292>
 80012f4:	e76a      	b.n	80011cc <__aeabi_fsub+0x168>
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	4662      	mov	r2, ip
 80012fa:	04db      	lsls	r3, r3, #19
 80012fc:	431a      	orrs	r2, r3
 80012fe:	4694      	mov	ip, r2
 8001300:	2301      	movs	r3, #1
 8001302:	281b      	cmp	r0, #27
 8001304:	dc09      	bgt.n	800131a <__aeabi_fsub+0x2b6>
 8001306:	2420      	movs	r4, #32
 8001308:	4663      	mov	r3, ip
 800130a:	4662      	mov	r2, ip
 800130c:	40c3      	lsrs	r3, r0
 800130e:	1a20      	subs	r0, r4, r0
 8001310:	4082      	lsls	r2, r0
 8001312:	0010      	movs	r0, r2
 8001314:	1e44      	subs	r4, r0, #1
 8001316:	41a0      	sbcs	r0, r4
 8001318:	4303      	orrs	r3, r0
 800131a:	4652      	mov	r2, sl
 800131c:	000d      	movs	r5, r1
 800131e:	0034      	movs	r4, r6
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	e6dc      	b.n	80010de <__aeabi_fsub+0x7a>
 8001324:	4663      	mov	r3, ip
 8001326:	4652      	mov	r2, sl
 8001328:	1a9e      	subs	r6, r3, r2
 800132a:	0173      	lsls	r3, r6, #5
 800132c:	d417      	bmi.n	800135e <__aeabi_fsub+0x2fa>
 800132e:	2e00      	cmp	r6, #0
 8001330:	d000      	beq.n	8001334 <__aeabi_fsub+0x2d0>
 8001332:	e6d9      	b.n	80010e8 <__aeabi_fsub+0x84>
 8001334:	2500      	movs	r5, #0
 8001336:	2000      	movs	r0, #0
 8001338:	2700      	movs	r7, #0
 800133a:	e6fa      	b.n	8001132 <__aeabi_fsub+0xce>
 800133c:	4663      	mov	r3, ip
 800133e:	2b00      	cmp	r3, #0
 8001340:	d044      	beq.n	80013cc <__aeabi_fsub+0x368>
 8001342:	3901      	subs	r1, #1
 8001344:	2900      	cmp	r1, #0
 8001346:	d04c      	beq.n	80013e2 <__aeabi_fsub+0x37e>
 8001348:	2eff      	cmp	r6, #255	; 0xff
 800134a:	d000      	beq.n	800134e <__aeabi_fsub+0x2ea>
 800134c:	e771      	b.n	8001232 <__aeabi_fsub+0x1ce>
 800134e:	4643      	mov	r3, r8
 8001350:	e73e      	b.n	80011d0 <__aeabi_fsub+0x16c>
 8001352:	2cff      	cmp	r4, #255	; 0xff
 8001354:	d0c5      	beq.n	80012e2 <__aeabi_fsub+0x27e>
 8001356:	4652      	mov	r2, sl
 8001358:	4462      	add	r2, ip
 800135a:	0853      	lsrs	r3, r2, #1
 800135c:	e7b6      	b.n	80012cc <__aeabi_fsub+0x268>
 800135e:	4663      	mov	r3, ip
 8001360:	000d      	movs	r5, r1
 8001362:	1ad6      	subs	r6, r2, r3
 8001364:	e6c0      	b.n	80010e8 <__aeabi_fsub+0x84>
 8001366:	4662      	mov	r2, ip
 8001368:	2a00      	cmp	r2, #0
 800136a:	d116      	bne.n	800139a <__aeabi_fsub+0x336>
 800136c:	4653      	mov	r3, sl
 800136e:	2b00      	cmp	r3, #0
 8001370:	d000      	beq.n	8001374 <__aeabi_fsub+0x310>
 8001372:	e72b      	b.n	80011cc <__aeabi_fsub+0x168>
 8001374:	2780      	movs	r7, #128	; 0x80
 8001376:	2500      	movs	r5, #0
 8001378:	20ff      	movs	r0, #255	; 0xff
 800137a:	03ff      	lsls	r7, r7, #15
 800137c:	e6d9      	b.n	8001132 <__aeabi_fsub+0xce>
 800137e:	000d      	movs	r5, r1
 8001380:	4643      	mov	r3, r8
 8001382:	0034      	movs	r4, r6
 8001384:	e7a6      	b.n	80012d4 <__aeabi_fsub+0x270>
 8001386:	4653      	mov	r3, sl
 8001388:	4463      	add	r3, ip
 800138a:	e6f7      	b.n	800117c <__aeabi_fsub+0x118>
 800138c:	4663      	mov	r3, ip
 800138e:	4652      	mov	r2, sl
 8001390:	1a9b      	subs	r3, r3, r2
 8001392:	e6a4      	b.n	80010de <__aeabi_fsub+0x7a>
 8001394:	4662      	mov	r2, ip
 8001396:	2a00      	cmp	r2, #0
 8001398:	d0d9      	beq.n	800134e <__aeabi_fsub+0x2ea>
 800139a:	4652      	mov	r2, sl
 800139c:	2a00      	cmp	r2, #0
 800139e:	d100      	bne.n	80013a2 <__aeabi_fsub+0x33e>
 80013a0:	e716      	b.n	80011d0 <__aeabi_fsub+0x16c>
 80013a2:	2280      	movs	r2, #128	; 0x80
 80013a4:	03d2      	lsls	r2, r2, #15
 80013a6:	4213      	tst	r3, r2
 80013a8:	d100      	bne.n	80013ac <__aeabi_fsub+0x348>
 80013aa:	e711      	b.n	80011d0 <__aeabi_fsub+0x16c>
 80013ac:	4640      	mov	r0, r8
 80013ae:	4210      	tst	r0, r2
 80013b0:	d000      	beq.n	80013b4 <__aeabi_fsub+0x350>
 80013b2:	e70d      	b.n	80011d0 <__aeabi_fsub+0x16c>
 80013b4:	e70a      	b.n	80011cc <__aeabi_fsub+0x168>
 80013b6:	4652      	mov	r2, sl
 80013b8:	000d      	movs	r5, r1
 80013ba:	0034      	movs	r4, r6
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	e68e      	b.n	80010de <__aeabi_fsub+0x7a>
 80013c0:	4653      	mov	r3, sl
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d008      	beq.n	80013d8 <__aeabi_fsub+0x374>
 80013c6:	000d      	movs	r5, r1
 80013c8:	4647      	mov	r7, r8
 80013ca:	e6b2      	b.n	8001132 <__aeabi_fsub+0xce>
 80013cc:	4643      	mov	r3, r8
 80013ce:	0034      	movs	r4, r6
 80013d0:	e780      	b.n	80012d4 <__aeabi_fsub+0x270>
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d000      	beq.n	80013d8 <__aeabi_fsub+0x374>
 80013d6:	e779      	b.n	80012cc <__aeabi_fsub+0x268>
 80013d8:	2500      	movs	r5, #0
 80013da:	2700      	movs	r7, #0
 80013dc:	e6a9      	b.n	8001132 <__aeabi_fsub+0xce>
 80013de:	4647      	mov	r7, r8
 80013e0:	e6a7      	b.n	8001132 <__aeabi_fsub+0xce>
 80013e2:	4653      	mov	r3, sl
 80013e4:	0034      	movs	r4, r6
 80013e6:	4463      	add	r3, ip
 80013e8:	e6c8      	b.n	800117c <__aeabi_fsub+0x118>
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	7dffffff 	.word	0x7dffffff
 80013f0:	fbffffff 	.word	0xfbffffff

080013f4 <__aeabi_f2iz>:
 80013f4:	0241      	lsls	r1, r0, #9
 80013f6:	0042      	lsls	r2, r0, #1
 80013f8:	0fc3      	lsrs	r3, r0, #31
 80013fa:	0a49      	lsrs	r1, r1, #9
 80013fc:	2000      	movs	r0, #0
 80013fe:	0e12      	lsrs	r2, r2, #24
 8001400:	2a7e      	cmp	r2, #126	; 0x7e
 8001402:	d903      	bls.n	800140c <__aeabi_f2iz+0x18>
 8001404:	2a9d      	cmp	r2, #157	; 0x9d
 8001406:	d902      	bls.n	800140e <__aeabi_f2iz+0x1a>
 8001408:	4a09      	ldr	r2, [pc, #36]	; (8001430 <__aeabi_f2iz+0x3c>)
 800140a:	1898      	adds	r0, r3, r2
 800140c:	4770      	bx	lr
 800140e:	2080      	movs	r0, #128	; 0x80
 8001410:	0400      	lsls	r0, r0, #16
 8001412:	4301      	orrs	r1, r0
 8001414:	2a95      	cmp	r2, #149	; 0x95
 8001416:	dc07      	bgt.n	8001428 <__aeabi_f2iz+0x34>
 8001418:	2096      	movs	r0, #150	; 0x96
 800141a:	1a82      	subs	r2, r0, r2
 800141c:	40d1      	lsrs	r1, r2
 800141e:	4248      	negs	r0, r1
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1f3      	bne.n	800140c <__aeabi_f2iz+0x18>
 8001424:	0008      	movs	r0, r1
 8001426:	e7f1      	b.n	800140c <__aeabi_f2iz+0x18>
 8001428:	3a96      	subs	r2, #150	; 0x96
 800142a:	4091      	lsls	r1, r2
 800142c:	e7f7      	b.n	800141e <__aeabi_f2iz+0x2a>
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	7fffffff 	.word	0x7fffffff

08001434 <__aeabi_ui2f>:
 8001434:	b570      	push	{r4, r5, r6, lr}
 8001436:	1e05      	subs	r5, r0, #0
 8001438:	d00e      	beq.n	8001458 <__aeabi_ui2f+0x24>
 800143a:	f001 ff01 	bl	8003240 <__clzsi2>
 800143e:	239e      	movs	r3, #158	; 0x9e
 8001440:	0004      	movs	r4, r0
 8001442:	1a1b      	subs	r3, r3, r0
 8001444:	2b96      	cmp	r3, #150	; 0x96
 8001446:	dc0c      	bgt.n	8001462 <__aeabi_ui2f+0x2e>
 8001448:	2808      	cmp	r0, #8
 800144a:	dd01      	ble.n	8001450 <__aeabi_ui2f+0x1c>
 800144c:	3c08      	subs	r4, #8
 800144e:	40a5      	lsls	r5, r4
 8001450:	026d      	lsls	r5, r5, #9
 8001452:	0a6d      	lsrs	r5, r5, #9
 8001454:	b2d8      	uxtb	r0, r3
 8001456:	e001      	b.n	800145c <__aeabi_ui2f+0x28>
 8001458:	2000      	movs	r0, #0
 800145a:	2500      	movs	r5, #0
 800145c:	05c0      	lsls	r0, r0, #23
 800145e:	4328      	orrs	r0, r5
 8001460:	bd70      	pop	{r4, r5, r6, pc}
 8001462:	2b99      	cmp	r3, #153	; 0x99
 8001464:	dd09      	ble.n	800147a <__aeabi_ui2f+0x46>
 8001466:	0002      	movs	r2, r0
 8001468:	0029      	movs	r1, r5
 800146a:	321b      	adds	r2, #27
 800146c:	4091      	lsls	r1, r2
 800146e:	1e4a      	subs	r2, r1, #1
 8001470:	4191      	sbcs	r1, r2
 8001472:	2205      	movs	r2, #5
 8001474:	1a12      	subs	r2, r2, r0
 8001476:	40d5      	lsrs	r5, r2
 8001478:	430d      	orrs	r5, r1
 800147a:	2c05      	cmp	r4, #5
 800147c:	dd01      	ble.n	8001482 <__aeabi_ui2f+0x4e>
 800147e:	1f62      	subs	r2, r4, #5
 8001480:	4095      	lsls	r5, r2
 8001482:	0029      	movs	r1, r5
 8001484:	4e08      	ldr	r6, [pc, #32]	; (80014a8 <__aeabi_ui2f+0x74>)
 8001486:	4031      	ands	r1, r6
 8001488:	076a      	lsls	r2, r5, #29
 800148a:	d009      	beq.n	80014a0 <__aeabi_ui2f+0x6c>
 800148c:	200f      	movs	r0, #15
 800148e:	4028      	ands	r0, r5
 8001490:	2804      	cmp	r0, #4
 8001492:	d005      	beq.n	80014a0 <__aeabi_ui2f+0x6c>
 8001494:	3104      	adds	r1, #4
 8001496:	014a      	lsls	r2, r1, #5
 8001498:	d502      	bpl.n	80014a0 <__aeabi_ui2f+0x6c>
 800149a:	239f      	movs	r3, #159	; 0x9f
 800149c:	4031      	ands	r1, r6
 800149e:	1b1b      	subs	r3, r3, r4
 80014a0:	0189      	lsls	r1, r1, #6
 80014a2:	0a4d      	lsrs	r5, r1, #9
 80014a4:	b2d8      	uxtb	r0, r3
 80014a6:	e7d9      	b.n	800145c <__aeabi_ui2f+0x28>
 80014a8:	fbffffff 	.word	0xfbffffff

080014ac <__aeabi_dadd>:
 80014ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ae:	464f      	mov	r7, r9
 80014b0:	46d6      	mov	lr, sl
 80014b2:	4646      	mov	r6, r8
 80014b4:	000d      	movs	r5, r1
 80014b6:	0001      	movs	r1, r0
 80014b8:	0018      	movs	r0, r3
 80014ba:	b5c0      	push	{r6, r7, lr}
 80014bc:	0017      	movs	r7, r2
 80014be:	032b      	lsls	r3, r5, #12
 80014c0:	0a5a      	lsrs	r2, r3, #9
 80014c2:	0f4b      	lsrs	r3, r1, #29
 80014c4:	4313      	orrs	r3, r2
 80014c6:	00ca      	lsls	r2, r1, #3
 80014c8:	4691      	mov	r9, r2
 80014ca:	0302      	lsls	r2, r0, #12
 80014cc:	006e      	lsls	r6, r5, #1
 80014ce:	0041      	lsls	r1, r0, #1
 80014d0:	0a52      	lsrs	r2, r2, #9
 80014d2:	0fec      	lsrs	r4, r5, #31
 80014d4:	0f7d      	lsrs	r5, r7, #29
 80014d6:	4315      	orrs	r5, r2
 80014d8:	0d76      	lsrs	r6, r6, #21
 80014da:	0d49      	lsrs	r1, r1, #21
 80014dc:	0fc0      	lsrs	r0, r0, #31
 80014de:	4682      	mov	sl, r0
 80014e0:	46ac      	mov	ip, r5
 80014e2:	00ff      	lsls	r7, r7, #3
 80014e4:	1a72      	subs	r2, r6, r1
 80014e6:	4284      	cmp	r4, r0
 80014e8:	d100      	bne.n	80014ec <__aeabi_dadd+0x40>
 80014ea:	e098      	b.n	800161e <__aeabi_dadd+0x172>
 80014ec:	2a00      	cmp	r2, #0
 80014ee:	dc00      	bgt.n	80014f2 <__aeabi_dadd+0x46>
 80014f0:	e081      	b.n	80015f6 <__aeabi_dadd+0x14a>
 80014f2:	2900      	cmp	r1, #0
 80014f4:	d100      	bne.n	80014f8 <__aeabi_dadd+0x4c>
 80014f6:	e0b6      	b.n	8001666 <__aeabi_dadd+0x1ba>
 80014f8:	49c9      	ldr	r1, [pc, #804]	; (8001820 <__aeabi_dadd+0x374>)
 80014fa:	428e      	cmp	r6, r1
 80014fc:	d100      	bne.n	8001500 <__aeabi_dadd+0x54>
 80014fe:	e172      	b.n	80017e6 <__aeabi_dadd+0x33a>
 8001500:	2180      	movs	r1, #128	; 0x80
 8001502:	0028      	movs	r0, r5
 8001504:	0409      	lsls	r1, r1, #16
 8001506:	4308      	orrs	r0, r1
 8001508:	4684      	mov	ip, r0
 800150a:	2a38      	cmp	r2, #56	; 0x38
 800150c:	dd00      	ble.n	8001510 <__aeabi_dadd+0x64>
 800150e:	e15e      	b.n	80017ce <__aeabi_dadd+0x322>
 8001510:	2a1f      	cmp	r2, #31
 8001512:	dd00      	ble.n	8001516 <__aeabi_dadd+0x6a>
 8001514:	e1ee      	b.n	80018f4 <__aeabi_dadd+0x448>
 8001516:	2020      	movs	r0, #32
 8001518:	0039      	movs	r1, r7
 800151a:	4665      	mov	r5, ip
 800151c:	1a80      	subs	r0, r0, r2
 800151e:	4087      	lsls	r7, r0
 8001520:	40d1      	lsrs	r1, r2
 8001522:	4085      	lsls	r5, r0
 8001524:	430d      	orrs	r5, r1
 8001526:	0039      	movs	r1, r7
 8001528:	1e4f      	subs	r7, r1, #1
 800152a:	41b9      	sbcs	r1, r7
 800152c:	4667      	mov	r7, ip
 800152e:	40d7      	lsrs	r7, r2
 8001530:	4329      	orrs	r1, r5
 8001532:	1bdb      	subs	r3, r3, r7
 8001534:	464a      	mov	r2, r9
 8001536:	1a55      	subs	r5, r2, r1
 8001538:	45a9      	cmp	r9, r5
 800153a:	4189      	sbcs	r1, r1
 800153c:	4249      	negs	r1, r1
 800153e:	1a5b      	subs	r3, r3, r1
 8001540:	4698      	mov	r8, r3
 8001542:	4643      	mov	r3, r8
 8001544:	021b      	lsls	r3, r3, #8
 8001546:	d400      	bmi.n	800154a <__aeabi_dadd+0x9e>
 8001548:	e0cc      	b.n	80016e4 <__aeabi_dadd+0x238>
 800154a:	4643      	mov	r3, r8
 800154c:	025b      	lsls	r3, r3, #9
 800154e:	0a5b      	lsrs	r3, r3, #9
 8001550:	4698      	mov	r8, r3
 8001552:	4643      	mov	r3, r8
 8001554:	2b00      	cmp	r3, #0
 8001556:	d100      	bne.n	800155a <__aeabi_dadd+0xae>
 8001558:	e12c      	b.n	80017b4 <__aeabi_dadd+0x308>
 800155a:	4640      	mov	r0, r8
 800155c:	f001 fe70 	bl	8003240 <__clzsi2>
 8001560:	0001      	movs	r1, r0
 8001562:	3908      	subs	r1, #8
 8001564:	2220      	movs	r2, #32
 8001566:	0028      	movs	r0, r5
 8001568:	4643      	mov	r3, r8
 800156a:	1a52      	subs	r2, r2, r1
 800156c:	408b      	lsls	r3, r1
 800156e:	40d0      	lsrs	r0, r2
 8001570:	408d      	lsls	r5, r1
 8001572:	4303      	orrs	r3, r0
 8001574:	428e      	cmp	r6, r1
 8001576:	dd00      	ble.n	800157a <__aeabi_dadd+0xce>
 8001578:	e117      	b.n	80017aa <__aeabi_dadd+0x2fe>
 800157a:	1b8e      	subs	r6, r1, r6
 800157c:	1c72      	adds	r2, r6, #1
 800157e:	2a1f      	cmp	r2, #31
 8001580:	dd00      	ble.n	8001584 <__aeabi_dadd+0xd8>
 8001582:	e1a7      	b.n	80018d4 <__aeabi_dadd+0x428>
 8001584:	2120      	movs	r1, #32
 8001586:	0018      	movs	r0, r3
 8001588:	002e      	movs	r6, r5
 800158a:	1a89      	subs	r1, r1, r2
 800158c:	408d      	lsls	r5, r1
 800158e:	4088      	lsls	r0, r1
 8001590:	40d6      	lsrs	r6, r2
 8001592:	40d3      	lsrs	r3, r2
 8001594:	1e69      	subs	r1, r5, #1
 8001596:	418d      	sbcs	r5, r1
 8001598:	4330      	orrs	r0, r6
 800159a:	4698      	mov	r8, r3
 800159c:	2600      	movs	r6, #0
 800159e:	4305      	orrs	r5, r0
 80015a0:	076b      	lsls	r3, r5, #29
 80015a2:	d009      	beq.n	80015b8 <__aeabi_dadd+0x10c>
 80015a4:	230f      	movs	r3, #15
 80015a6:	402b      	ands	r3, r5
 80015a8:	2b04      	cmp	r3, #4
 80015aa:	d005      	beq.n	80015b8 <__aeabi_dadd+0x10c>
 80015ac:	1d2b      	adds	r3, r5, #4
 80015ae:	42ab      	cmp	r3, r5
 80015b0:	41ad      	sbcs	r5, r5
 80015b2:	426d      	negs	r5, r5
 80015b4:	44a8      	add	r8, r5
 80015b6:	001d      	movs	r5, r3
 80015b8:	4643      	mov	r3, r8
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	d400      	bmi.n	80015c0 <__aeabi_dadd+0x114>
 80015be:	e094      	b.n	80016ea <__aeabi_dadd+0x23e>
 80015c0:	4b97      	ldr	r3, [pc, #604]	; (8001820 <__aeabi_dadd+0x374>)
 80015c2:	1c72      	adds	r2, r6, #1
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d100      	bne.n	80015ca <__aeabi_dadd+0x11e>
 80015c8:	e09d      	b.n	8001706 <__aeabi_dadd+0x25a>
 80015ca:	4641      	mov	r1, r8
 80015cc:	4b95      	ldr	r3, [pc, #596]	; (8001824 <__aeabi_dadd+0x378>)
 80015ce:	08ed      	lsrs	r5, r5, #3
 80015d0:	4019      	ands	r1, r3
 80015d2:	000b      	movs	r3, r1
 80015d4:	0552      	lsls	r2, r2, #21
 80015d6:	0749      	lsls	r1, r1, #29
 80015d8:	025b      	lsls	r3, r3, #9
 80015da:	4329      	orrs	r1, r5
 80015dc:	0b1b      	lsrs	r3, r3, #12
 80015de:	0d52      	lsrs	r2, r2, #21
 80015e0:	0512      	lsls	r2, r2, #20
 80015e2:	4313      	orrs	r3, r2
 80015e4:	07e4      	lsls	r4, r4, #31
 80015e6:	4323      	orrs	r3, r4
 80015e8:	0008      	movs	r0, r1
 80015ea:	0019      	movs	r1, r3
 80015ec:	bce0      	pop	{r5, r6, r7}
 80015ee:	46ba      	mov	sl, r7
 80015f0:	46b1      	mov	r9, r6
 80015f2:	46a8      	mov	r8, r5
 80015f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015f6:	2a00      	cmp	r2, #0
 80015f8:	d043      	beq.n	8001682 <__aeabi_dadd+0x1d6>
 80015fa:	1b8a      	subs	r2, r1, r6
 80015fc:	2e00      	cmp	r6, #0
 80015fe:	d000      	beq.n	8001602 <__aeabi_dadd+0x156>
 8001600:	e12a      	b.n	8001858 <__aeabi_dadd+0x3ac>
 8001602:	464c      	mov	r4, r9
 8001604:	431c      	orrs	r4, r3
 8001606:	d100      	bne.n	800160a <__aeabi_dadd+0x15e>
 8001608:	e1d1      	b.n	80019ae <__aeabi_dadd+0x502>
 800160a:	1e54      	subs	r4, r2, #1
 800160c:	2a01      	cmp	r2, #1
 800160e:	d100      	bne.n	8001612 <__aeabi_dadd+0x166>
 8001610:	e21f      	b.n	8001a52 <__aeabi_dadd+0x5a6>
 8001612:	4d83      	ldr	r5, [pc, #524]	; (8001820 <__aeabi_dadd+0x374>)
 8001614:	42aa      	cmp	r2, r5
 8001616:	d100      	bne.n	800161a <__aeabi_dadd+0x16e>
 8001618:	e272      	b.n	8001b00 <__aeabi_dadd+0x654>
 800161a:	0022      	movs	r2, r4
 800161c:	e123      	b.n	8001866 <__aeabi_dadd+0x3ba>
 800161e:	2a00      	cmp	r2, #0
 8001620:	dc00      	bgt.n	8001624 <__aeabi_dadd+0x178>
 8001622:	e098      	b.n	8001756 <__aeabi_dadd+0x2aa>
 8001624:	2900      	cmp	r1, #0
 8001626:	d042      	beq.n	80016ae <__aeabi_dadd+0x202>
 8001628:	497d      	ldr	r1, [pc, #500]	; (8001820 <__aeabi_dadd+0x374>)
 800162a:	428e      	cmp	r6, r1
 800162c:	d100      	bne.n	8001630 <__aeabi_dadd+0x184>
 800162e:	e0da      	b.n	80017e6 <__aeabi_dadd+0x33a>
 8001630:	2180      	movs	r1, #128	; 0x80
 8001632:	0028      	movs	r0, r5
 8001634:	0409      	lsls	r1, r1, #16
 8001636:	4308      	orrs	r0, r1
 8001638:	4684      	mov	ip, r0
 800163a:	2a38      	cmp	r2, #56	; 0x38
 800163c:	dd00      	ble.n	8001640 <__aeabi_dadd+0x194>
 800163e:	e129      	b.n	8001894 <__aeabi_dadd+0x3e8>
 8001640:	2a1f      	cmp	r2, #31
 8001642:	dc00      	bgt.n	8001646 <__aeabi_dadd+0x19a>
 8001644:	e187      	b.n	8001956 <__aeabi_dadd+0x4aa>
 8001646:	0011      	movs	r1, r2
 8001648:	4665      	mov	r5, ip
 800164a:	3920      	subs	r1, #32
 800164c:	40cd      	lsrs	r5, r1
 800164e:	2a20      	cmp	r2, #32
 8001650:	d004      	beq.n	800165c <__aeabi_dadd+0x1b0>
 8001652:	2040      	movs	r0, #64	; 0x40
 8001654:	4661      	mov	r1, ip
 8001656:	1a82      	subs	r2, r0, r2
 8001658:	4091      	lsls	r1, r2
 800165a:	430f      	orrs	r7, r1
 800165c:	0039      	movs	r1, r7
 800165e:	1e4f      	subs	r7, r1, #1
 8001660:	41b9      	sbcs	r1, r7
 8001662:	430d      	orrs	r5, r1
 8001664:	e11b      	b.n	800189e <__aeabi_dadd+0x3f2>
 8001666:	0029      	movs	r1, r5
 8001668:	4339      	orrs	r1, r7
 800166a:	d100      	bne.n	800166e <__aeabi_dadd+0x1c2>
 800166c:	e0b5      	b.n	80017da <__aeabi_dadd+0x32e>
 800166e:	1e51      	subs	r1, r2, #1
 8001670:	2a01      	cmp	r2, #1
 8001672:	d100      	bne.n	8001676 <__aeabi_dadd+0x1ca>
 8001674:	e1ab      	b.n	80019ce <__aeabi_dadd+0x522>
 8001676:	486a      	ldr	r0, [pc, #424]	; (8001820 <__aeabi_dadd+0x374>)
 8001678:	4282      	cmp	r2, r0
 800167a:	d100      	bne.n	800167e <__aeabi_dadd+0x1d2>
 800167c:	e1b2      	b.n	80019e4 <__aeabi_dadd+0x538>
 800167e:	000a      	movs	r2, r1
 8001680:	e743      	b.n	800150a <__aeabi_dadd+0x5e>
 8001682:	4969      	ldr	r1, [pc, #420]	; (8001828 <__aeabi_dadd+0x37c>)
 8001684:	1c75      	adds	r5, r6, #1
 8001686:	420d      	tst	r5, r1
 8001688:	d000      	beq.n	800168c <__aeabi_dadd+0x1e0>
 800168a:	e0cf      	b.n	800182c <__aeabi_dadd+0x380>
 800168c:	2e00      	cmp	r6, #0
 800168e:	d000      	beq.n	8001692 <__aeabi_dadd+0x1e6>
 8001690:	e193      	b.n	80019ba <__aeabi_dadd+0x50e>
 8001692:	4649      	mov	r1, r9
 8001694:	4319      	orrs	r1, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dadd+0x1ee>
 8001698:	e1d1      	b.n	8001a3e <__aeabi_dadd+0x592>
 800169a:	4661      	mov	r1, ip
 800169c:	4339      	orrs	r1, r7
 800169e:	d000      	beq.n	80016a2 <__aeabi_dadd+0x1f6>
 80016a0:	e1e3      	b.n	8001a6a <__aeabi_dadd+0x5be>
 80016a2:	4649      	mov	r1, r9
 80016a4:	0758      	lsls	r0, r3, #29
 80016a6:	08c9      	lsrs	r1, r1, #3
 80016a8:	4301      	orrs	r1, r0
 80016aa:	08db      	lsrs	r3, r3, #3
 80016ac:	e026      	b.n	80016fc <__aeabi_dadd+0x250>
 80016ae:	0029      	movs	r1, r5
 80016b0:	4339      	orrs	r1, r7
 80016b2:	d100      	bne.n	80016b6 <__aeabi_dadd+0x20a>
 80016b4:	e091      	b.n	80017da <__aeabi_dadd+0x32e>
 80016b6:	1e51      	subs	r1, r2, #1
 80016b8:	2a01      	cmp	r2, #1
 80016ba:	d005      	beq.n	80016c8 <__aeabi_dadd+0x21c>
 80016bc:	4858      	ldr	r0, [pc, #352]	; (8001820 <__aeabi_dadd+0x374>)
 80016be:	4282      	cmp	r2, r0
 80016c0:	d100      	bne.n	80016c4 <__aeabi_dadd+0x218>
 80016c2:	e18f      	b.n	80019e4 <__aeabi_dadd+0x538>
 80016c4:	000a      	movs	r2, r1
 80016c6:	e7b8      	b.n	800163a <__aeabi_dadd+0x18e>
 80016c8:	003d      	movs	r5, r7
 80016ca:	444d      	add	r5, r9
 80016cc:	454d      	cmp	r5, r9
 80016ce:	4189      	sbcs	r1, r1
 80016d0:	4463      	add	r3, ip
 80016d2:	4698      	mov	r8, r3
 80016d4:	4249      	negs	r1, r1
 80016d6:	4488      	add	r8, r1
 80016d8:	4643      	mov	r3, r8
 80016da:	2602      	movs	r6, #2
 80016dc:	021b      	lsls	r3, r3, #8
 80016de:	d500      	bpl.n	80016e2 <__aeabi_dadd+0x236>
 80016e0:	e0eb      	b.n	80018ba <__aeabi_dadd+0x40e>
 80016e2:	3e01      	subs	r6, #1
 80016e4:	076b      	lsls	r3, r5, #29
 80016e6:	d000      	beq.n	80016ea <__aeabi_dadd+0x23e>
 80016e8:	e75c      	b.n	80015a4 <__aeabi_dadd+0xf8>
 80016ea:	4643      	mov	r3, r8
 80016ec:	08e9      	lsrs	r1, r5, #3
 80016ee:	075a      	lsls	r2, r3, #29
 80016f0:	4311      	orrs	r1, r2
 80016f2:	0032      	movs	r2, r6
 80016f4:	08db      	lsrs	r3, r3, #3
 80016f6:	484a      	ldr	r0, [pc, #296]	; (8001820 <__aeabi_dadd+0x374>)
 80016f8:	4282      	cmp	r2, r0
 80016fa:	d021      	beq.n	8001740 <__aeabi_dadd+0x294>
 80016fc:	031b      	lsls	r3, r3, #12
 80016fe:	0552      	lsls	r2, r2, #21
 8001700:	0b1b      	lsrs	r3, r3, #12
 8001702:	0d52      	lsrs	r2, r2, #21
 8001704:	e76c      	b.n	80015e0 <__aeabi_dadd+0x134>
 8001706:	2300      	movs	r3, #0
 8001708:	2100      	movs	r1, #0
 800170a:	e769      	b.n	80015e0 <__aeabi_dadd+0x134>
 800170c:	002a      	movs	r2, r5
 800170e:	433a      	orrs	r2, r7
 8001710:	d069      	beq.n	80017e6 <__aeabi_dadd+0x33a>
 8001712:	464a      	mov	r2, r9
 8001714:	0758      	lsls	r0, r3, #29
 8001716:	08d1      	lsrs	r1, r2, #3
 8001718:	08da      	lsrs	r2, r3, #3
 800171a:	2380      	movs	r3, #128	; 0x80
 800171c:	031b      	lsls	r3, r3, #12
 800171e:	4308      	orrs	r0, r1
 8001720:	421a      	tst	r2, r3
 8001722:	d007      	beq.n	8001734 <__aeabi_dadd+0x288>
 8001724:	0029      	movs	r1, r5
 8001726:	08ed      	lsrs	r5, r5, #3
 8001728:	421d      	tst	r5, r3
 800172a:	d103      	bne.n	8001734 <__aeabi_dadd+0x288>
 800172c:	002a      	movs	r2, r5
 800172e:	08ff      	lsrs	r7, r7, #3
 8001730:	0748      	lsls	r0, r1, #29
 8001732:	4338      	orrs	r0, r7
 8001734:	0f43      	lsrs	r3, r0, #29
 8001736:	00c1      	lsls	r1, r0, #3
 8001738:	075b      	lsls	r3, r3, #29
 800173a:	08c9      	lsrs	r1, r1, #3
 800173c:	4319      	orrs	r1, r3
 800173e:	0013      	movs	r3, r2
 8001740:	000a      	movs	r2, r1
 8001742:	431a      	orrs	r2, r3
 8001744:	d100      	bne.n	8001748 <__aeabi_dadd+0x29c>
 8001746:	e213      	b.n	8001b70 <__aeabi_dadd+0x6c4>
 8001748:	2280      	movs	r2, #128	; 0x80
 800174a:	0312      	lsls	r2, r2, #12
 800174c:	4313      	orrs	r3, r2
 800174e:	031b      	lsls	r3, r3, #12
 8001750:	4a33      	ldr	r2, [pc, #204]	; (8001820 <__aeabi_dadd+0x374>)
 8001752:	0b1b      	lsrs	r3, r3, #12
 8001754:	e744      	b.n	80015e0 <__aeabi_dadd+0x134>
 8001756:	2a00      	cmp	r2, #0
 8001758:	d04b      	beq.n	80017f2 <__aeabi_dadd+0x346>
 800175a:	1b8a      	subs	r2, r1, r6
 800175c:	2e00      	cmp	r6, #0
 800175e:	d100      	bne.n	8001762 <__aeabi_dadd+0x2b6>
 8001760:	e0e7      	b.n	8001932 <__aeabi_dadd+0x486>
 8001762:	482f      	ldr	r0, [pc, #188]	; (8001820 <__aeabi_dadd+0x374>)
 8001764:	4281      	cmp	r1, r0
 8001766:	d100      	bne.n	800176a <__aeabi_dadd+0x2be>
 8001768:	e195      	b.n	8001a96 <__aeabi_dadd+0x5ea>
 800176a:	2080      	movs	r0, #128	; 0x80
 800176c:	0400      	lsls	r0, r0, #16
 800176e:	4303      	orrs	r3, r0
 8001770:	2a38      	cmp	r2, #56	; 0x38
 8001772:	dd00      	ble.n	8001776 <__aeabi_dadd+0x2ca>
 8001774:	e143      	b.n	80019fe <__aeabi_dadd+0x552>
 8001776:	2a1f      	cmp	r2, #31
 8001778:	dd00      	ble.n	800177c <__aeabi_dadd+0x2d0>
 800177a:	e1db      	b.n	8001b34 <__aeabi_dadd+0x688>
 800177c:	2020      	movs	r0, #32
 800177e:	001d      	movs	r5, r3
 8001780:	464e      	mov	r6, r9
 8001782:	1a80      	subs	r0, r0, r2
 8001784:	4085      	lsls	r5, r0
 8001786:	40d6      	lsrs	r6, r2
 8001788:	4335      	orrs	r5, r6
 800178a:	464e      	mov	r6, r9
 800178c:	4086      	lsls	r6, r0
 800178e:	0030      	movs	r0, r6
 8001790:	40d3      	lsrs	r3, r2
 8001792:	1e46      	subs	r6, r0, #1
 8001794:	41b0      	sbcs	r0, r6
 8001796:	449c      	add	ip, r3
 8001798:	4305      	orrs	r5, r0
 800179a:	19ed      	adds	r5, r5, r7
 800179c:	42bd      	cmp	r5, r7
 800179e:	419b      	sbcs	r3, r3
 80017a0:	425b      	negs	r3, r3
 80017a2:	4463      	add	r3, ip
 80017a4:	4698      	mov	r8, r3
 80017a6:	000e      	movs	r6, r1
 80017a8:	e07f      	b.n	80018aa <__aeabi_dadd+0x3fe>
 80017aa:	4a1e      	ldr	r2, [pc, #120]	; (8001824 <__aeabi_dadd+0x378>)
 80017ac:	1a76      	subs	r6, r6, r1
 80017ae:	4013      	ands	r3, r2
 80017b0:	4698      	mov	r8, r3
 80017b2:	e6f5      	b.n	80015a0 <__aeabi_dadd+0xf4>
 80017b4:	0028      	movs	r0, r5
 80017b6:	f001 fd43 	bl	8003240 <__clzsi2>
 80017ba:	0001      	movs	r1, r0
 80017bc:	3118      	adds	r1, #24
 80017be:	291f      	cmp	r1, #31
 80017c0:	dc00      	bgt.n	80017c4 <__aeabi_dadd+0x318>
 80017c2:	e6cf      	b.n	8001564 <__aeabi_dadd+0xb8>
 80017c4:	002b      	movs	r3, r5
 80017c6:	3808      	subs	r0, #8
 80017c8:	4083      	lsls	r3, r0
 80017ca:	2500      	movs	r5, #0
 80017cc:	e6d2      	b.n	8001574 <__aeabi_dadd+0xc8>
 80017ce:	4662      	mov	r2, ip
 80017d0:	433a      	orrs	r2, r7
 80017d2:	0011      	movs	r1, r2
 80017d4:	1e4f      	subs	r7, r1, #1
 80017d6:	41b9      	sbcs	r1, r7
 80017d8:	e6ac      	b.n	8001534 <__aeabi_dadd+0x88>
 80017da:	4649      	mov	r1, r9
 80017dc:	0758      	lsls	r0, r3, #29
 80017de:	08c9      	lsrs	r1, r1, #3
 80017e0:	4301      	orrs	r1, r0
 80017e2:	08db      	lsrs	r3, r3, #3
 80017e4:	e787      	b.n	80016f6 <__aeabi_dadd+0x24a>
 80017e6:	4649      	mov	r1, r9
 80017e8:	075a      	lsls	r2, r3, #29
 80017ea:	08c9      	lsrs	r1, r1, #3
 80017ec:	4311      	orrs	r1, r2
 80017ee:	08db      	lsrs	r3, r3, #3
 80017f0:	e7a6      	b.n	8001740 <__aeabi_dadd+0x294>
 80017f2:	490d      	ldr	r1, [pc, #52]	; (8001828 <__aeabi_dadd+0x37c>)
 80017f4:	1c70      	adds	r0, r6, #1
 80017f6:	4208      	tst	r0, r1
 80017f8:	d000      	beq.n	80017fc <__aeabi_dadd+0x350>
 80017fa:	e0bb      	b.n	8001974 <__aeabi_dadd+0x4c8>
 80017fc:	2e00      	cmp	r6, #0
 80017fe:	d000      	beq.n	8001802 <__aeabi_dadd+0x356>
 8001800:	e114      	b.n	8001a2c <__aeabi_dadd+0x580>
 8001802:	4649      	mov	r1, r9
 8001804:	4319      	orrs	r1, r3
 8001806:	d100      	bne.n	800180a <__aeabi_dadd+0x35e>
 8001808:	e175      	b.n	8001af6 <__aeabi_dadd+0x64a>
 800180a:	0029      	movs	r1, r5
 800180c:	4339      	orrs	r1, r7
 800180e:	d000      	beq.n	8001812 <__aeabi_dadd+0x366>
 8001810:	e17e      	b.n	8001b10 <__aeabi_dadd+0x664>
 8001812:	4649      	mov	r1, r9
 8001814:	0758      	lsls	r0, r3, #29
 8001816:	08c9      	lsrs	r1, r1, #3
 8001818:	4301      	orrs	r1, r0
 800181a:	08db      	lsrs	r3, r3, #3
 800181c:	e76e      	b.n	80016fc <__aeabi_dadd+0x250>
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	000007ff 	.word	0x000007ff
 8001824:	ff7fffff 	.word	0xff7fffff
 8001828:	000007fe 	.word	0x000007fe
 800182c:	4649      	mov	r1, r9
 800182e:	1bcd      	subs	r5, r1, r7
 8001830:	4661      	mov	r1, ip
 8001832:	1a58      	subs	r0, r3, r1
 8001834:	45a9      	cmp	r9, r5
 8001836:	4189      	sbcs	r1, r1
 8001838:	4249      	negs	r1, r1
 800183a:	4688      	mov	r8, r1
 800183c:	0001      	movs	r1, r0
 800183e:	4640      	mov	r0, r8
 8001840:	1a09      	subs	r1, r1, r0
 8001842:	4688      	mov	r8, r1
 8001844:	0209      	lsls	r1, r1, #8
 8001846:	d500      	bpl.n	800184a <__aeabi_dadd+0x39e>
 8001848:	e0a6      	b.n	8001998 <__aeabi_dadd+0x4ec>
 800184a:	4641      	mov	r1, r8
 800184c:	4329      	orrs	r1, r5
 800184e:	d000      	beq.n	8001852 <__aeabi_dadd+0x3a6>
 8001850:	e67f      	b.n	8001552 <__aeabi_dadd+0xa6>
 8001852:	2300      	movs	r3, #0
 8001854:	2400      	movs	r4, #0
 8001856:	e751      	b.n	80016fc <__aeabi_dadd+0x250>
 8001858:	4cc7      	ldr	r4, [pc, #796]	; (8001b78 <__aeabi_dadd+0x6cc>)
 800185a:	42a1      	cmp	r1, r4
 800185c:	d100      	bne.n	8001860 <__aeabi_dadd+0x3b4>
 800185e:	e0c7      	b.n	80019f0 <__aeabi_dadd+0x544>
 8001860:	2480      	movs	r4, #128	; 0x80
 8001862:	0424      	lsls	r4, r4, #16
 8001864:	4323      	orrs	r3, r4
 8001866:	2a38      	cmp	r2, #56	; 0x38
 8001868:	dc54      	bgt.n	8001914 <__aeabi_dadd+0x468>
 800186a:	2a1f      	cmp	r2, #31
 800186c:	dd00      	ble.n	8001870 <__aeabi_dadd+0x3c4>
 800186e:	e0cc      	b.n	8001a0a <__aeabi_dadd+0x55e>
 8001870:	2420      	movs	r4, #32
 8001872:	4648      	mov	r0, r9
 8001874:	1aa4      	subs	r4, r4, r2
 8001876:	001d      	movs	r5, r3
 8001878:	464e      	mov	r6, r9
 800187a:	40a0      	lsls	r0, r4
 800187c:	40d6      	lsrs	r6, r2
 800187e:	40a5      	lsls	r5, r4
 8001880:	0004      	movs	r4, r0
 8001882:	40d3      	lsrs	r3, r2
 8001884:	4662      	mov	r2, ip
 8001886:	4335      	orrs	r5, r6
 8001888:	1e66      	subs	r6, r4, #1
 800188a:	41b4      	sbcs	r4, r6
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	469c      	mov	ip, r3
 8001890:	4325      	orrs	r5, r4
 8001892:	e044      	b.n	800191e <__aeabi_dadd+0x472>
 8001894:	4662      	mov	r2, ip
 8001896:	433a      	orrs	r2, r7
 8001898:	0015      	movs	r5, r2
 800189a:	1e6f      	subs	r7, r5, #1
 800189c:	41bd      	sbcs	r5, r7
 800189e:	444d      	add	r5, r9
 80018a0:	454d      	cmp	r5, r9
 80018a2:	4189      	sbcs	r1, r1
 80018a4:	4249      	negs	r1, r1
 80018a6:	4688      	mov	r8, r1
 80018a8:	4498      	add	r8, r3
 80018aa:	4643      	mov	r3, r8
 80018ac:	021b      	lsls	r3, r3, #8
 80018ae:	d400      	bmi.n	80018b2 <__aeabi_dadd+0x406>
 80018b0:	e718      	b.n	80016e4 <__aeabi_dadd+0x238>
 80018b2:	4bb1      	ldr	r3, [pc, #708]	; (8001b78 <__aeabi_dadd+0x6cc>)
 80018b4:	3601      	adds	r6, #1
 80018b6:	429e      	cmp	r6, r3
 80018b8:	d049      	beq.n	800194e <__aeabi_dadd+0x4a2>
 80018ba:	4642      	mov	r2, r8
 80018bc:	4baf      	ldr	r3, [pc, #700]	; (8001b7c <__aeabi_dadd+0x6d0>)
 80018be:	2101      	movs	r1, #1
 80018c0:	401a      	ands	r2, r3
 80018c2:	0013      	movs	r3, r2
 80018c4:	086a      	lsrs	r2, r5, #1
 80018c6:	400d      	ands	r5, r1
 80018c8:	4315      	orrs	r5, r2
 80018ca:	07d9      	lsls	r1, r3, #31
 80018cc:	085b      	lsrs	r3, r3, #1
 80018ce:	4698      	mov	r8, r3
 80018d0:	430d      	orrs	r5, r1
 80018d2:	e665      	b.n	80015a0 <__aeabi_dadd+0xf4>
 80018d4:	0018      	movs	r0, r3
 80018d6:	3e1f      	subs	r6, #31
 80018d8:	40f0      	lsrs	r0, r6
 80018da:	2a20      	cmp	r2, #32
 80018dc:	d003      	beq.n	80018e6 <__aeabi_dadd+0x43a>
 80018de:	2140      	movs	r1, #64	; 0x40
 80018e0:	1a8a      	subs	r2, r1, r2
 80018e2:	4093      	lsls	r3, r2
 80018e4:	431d      	orrs	r5, r3
 80018e6:	1e69      	subs	r1, r5, #1
 80018e8:	418d      	sbcs	r5, r1
 80018ea:	2300      	movs	r3, #0
 80018ec:	2600      	movs	r6, #0
 80018ee:	4698      	mov	r8, r3
 80018f0:	4305      	orrs	r5, r0
 80018f2:	e6f7      	b.n	80016e4 <__aeabi_dadd+0x238>
 80018f4:	0011      	movs	r1, r2
 80018f6:	4665      	mov	r5, ip
 80018f8:	3920      	subs	r1, #32
 80018fa:	40cd      	lsrs	r5, r1
 80018fc:	2a20      	cmp	r2, #32
 80018fe:	d004      	beq.n	800190a <__aeabi_dadd+0x45e>
 8001900:	2040      	movs	r0, #64	; 0x40
 8001902:	4661      	mov	r1, ip
 8001904:	1a82      	subs	r2, r0, r2
 8001906:	4091      	lsls	r1, r2
 8001908:	430f      	orrs	r7, r1
 800190a:	0039      	movs	r1, r7
 800190c:	1e4f      	subs	r7, r1, #1
 800190e:	41b9      	sbcs	r1, r7
 8001910:	4329      	orrs	r1, r5
 8001912:	e60f      	b.n	8001534 <__aeabi_dadd+0x88>
 8001914:	464a      	mov	r2, r9
 8001916:	4313      	orrs	r3, r2
 8001918:	001d      	movs	r5, r3
 800191a:	1e6b      	subs	r3, r5, #1
 800191c:	419d      	sbcs	r5, r3
 800191e:	1b7d      	subs	r5, r7, r5
 8001920:	42af      	cmp	r7, r5
 8001922:	419b      	sbcs	r3, r3
 8001924:	4662      	mov	r2, ip
 8001926:	425b      	negs	r3, r3
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	4698      	mov	r8, r3
 800192c:	4654      	mov	r4, sl
 800192e:	000e      	movs	r6, r1
 8001930:	e607      	b.n	8001542 <__aeabi_dadd+0x96>
 8001932:	4648      	mov	r0, r9
 8001934:	4318      	orrs	r0, r3
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x48e>
 8001938:	e0b3      	b.n	8001aa2 <__aeabi_dadd+0x5f6>
 800193a:	1e50      	subs	r0, r2, #1
 800193c:	2a01      	cmp	r2, #1
 800193e:	d100      	bne.n	8001942 <__aeabi_dadd+0x496>
 8001940:	e10d      	b.n	8001b5e <__aeabi_dadd+0x6b2>
 8001942:	4d8d      	ldr	r5, [pc, #564]	; (8001b78 <__aeabi_dadd+0x6cc>)
 8001944:	42aa      	cmp	r2, r5
 8001946:	d100      	bne.n	800194a <__aeabi_dadd+0x49e>
 8001948:	e0a5      	b.n	8001a96 <__aeabi_dadd+0x5ea>
 800194a:	0002      	movs	r2, r0
 800194c:	e710      	b.n	8001770 <__aeabi_dadd+0x2c4>
 800194e:	0032      	movs	r2, r6
 8001950:	2300      	movs	r3, #0
 8001952:	2100      	movs	r1, #0
 8001954:	e644      	b.n	80015e0 <__aeabi_dadd+0x134>
 8001956:	2120      	movs	r1, #32
 8001958:	0038      	movs	r0, r7
 800195a:	1a89      	subs	r1, r1, r2
 800195c:	4665      	mov	r5, ip
 800195e:	408f      	lsls	r7, r1
 8001960:	408d      	lsls	r5, r1
 8001962:	40d0      	lsrs	r0, r2
 8001964:	1e79      	subs	r1, r7, #1
 8001966:	418f      	sbcs	r7, r1
 8001968:	4305      	orrs	r5, r0
 800196a:	433d      	orrs	r5, r7
 800196c:	4667      	mov	r7, ip
 800196e:	40d7      	lsrs	r7, r2
 8001970:	19db      	adds	r3, r3, r7
 8001972:	e794      	b.n	800189e <__aeabi_dadd+0x3f2>
 8001974:	4a80      	ldr	r2, [pc, #512]	; (8001b78 <__aeabi_dadd+0x6cc>)
 8001976:	4290      	cmp	r0, r2
 8001978:	d100      	bne.n	800197c <__aeabi_dadd+0x4d0>
 800197a:	e0ec      	b.n	8001b56 <__aeabi_dadd+0x6aa>
 800197c:	0039      	movs	r1, r7
 800197e:	4449      	add	r1, r9
 8001980:	4549      	cmp	r1, r9
 8001982:	4192      	sbcs	r2, r2
 8001984:	4463      	add	r3, ip
 8001986:	4252      	negs	r2, r2
 8001988:	189b      	adds	r3, r3, r2
 800198a:	07dd      	lsls	r5, r3, #31
 800198c:	0849      	lsrs	r1, r1, #1
 800198e:	085b      	lsrs	r3, r3, #1
 8001990:	4698      	mov	r8, r3
 8001992:	0006      	movs	r6, r0
 8001994:	430d      	orrs	r5, r1
 8001996:	e6a5      	b.n	80016e4 <__aeabi_dadd+0x238>
 8001998:	464a      	mov	r2, r9
 800199a:	1abd      	subs	r5, r7, r2
 800199c:	42af      	cmp	r7, r5
 800199e:	4189      	sbcs	r1, r1
 80019a0:	4662      	mov	r2, ip
 80019a2:	4249      	negs	r1, r1
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	1a5b      	subs	r3, r3, r1
 80019a8:	4698      	mov	r8, r3
 80019aa:	4654      	mov	r4, sl
 80019ac:	e5d1      	b.n	8001552 <__aeabi_dadd+0xa6>
 80019ae:	076c      	lsls	r4, r5, #29
 80019b0:	08f9      	lsrs	r1, r7, #3
 80019b2:	4321      	orrs	r1, r4
 80019b4:	08eb      	lsrs	r3, r5, #3
 80019b6:	0004      	movs	r4, r0
 80019b8:	e69d      	b.n	80016f6 <__aeabi_dadd+0x24a>
 80019ba:	464a      	mov	r2, r9
 80019bc:	431a      	orrs	r2, r3
 80019be:	d175      	bne.n	8001aac <__aeabi_dadd+0x600>
 80019c0:	4661      	mov	r1, ip
 80019c2:	4339      	orrs	r1, r7
 80019c4:	d114      	bne.n	80019f0 <__aeabi_dadd+0x544>
 80019c6:	2380      	movs	r3, #128	; 0x80
 80019c8:	2400      	movs	r4, #0
 80019ca:	031b      	lsls	r3, r3, #12
 80019cc:	e6bc      	b.n	8001748 <__aeabi_dadd+0x29c>
 80019ce:	464a      	mov	r2, r9
 80019d0:	1bd5      	subs	r5, r2, r7
 80019d2:	45a9      	cmp	r9, r5
 80019d4:	4189      	sbcs	r1, r1
 80019d6:	4662      	mov	r2, ip
 80019d8:	4249      	negs	r1, r1
 80019da:	1a9b      	subs	r3, r3, r2
 80019dc:	1a5b      	subs	r3, r3, r1
 80019de:	4698      	mov	r8, r3
 80019e0:	2601      	movs	r6, #1
 80019e2:	e5ae      	b.n	8001542 <__aeabi_dadd+0x96>
 80019e4:	464a      	mov	r2, r9
 80019e6:	08d1      	lsrs	r1, r2, #3
 80019e8:	075a      	lsls	r2, r3, #29
 80019ea:	4311      	orrs	r1, r2
 80019ec:	08db      	lsrs	r3, r3, #3
 80019ee:	e6a7      	b.n	8001740 <__aeabi_dadd+0x294>
 80019f0:	4663      	mov	r3, ip
 80019f2:	08f9      	lsrs	r1, r7, #3
 80019f4:	075a      	lsls	r2, r3, #29
 80019f6:	4654      	mov	r4, sl
 80019f8:	4311      	orrs	r1, r2
 80019fa:	08db      	lsrs	r3, r3, #3
 80019fc:	e6a0      	b.n	8001740 <__aeabi_dadd+0x294>
 80019fe:	464a      	mov	r2, r9
 8001a00:	4313      	orrs	r3, r2
 8001a02:	001d      	movs	r5, r3
 8001a04:	1e6b      	subs	r3, r5, #1
 8001a06:	419d      	sbcs	r5, r3
 8001a08:	e6c7      	b.n	800179a <__aeabi_dadd+0x2ee>
 8001a0a:	0014      	movs	r4, r2
 8001a0c:	001e      	movs	r6, r3
 8001a0e:	3c20      	subs	r4, #32
 8001a10:	40e6      	lsrs	r6, r4
 8001a12:	2a20      	cmp	r2, #32
 8001a14:	d005      	beq.n	8001a22 <__aeabi_dadd+0x576>
 8001a16:	2440      	movs	r4, #64	; 0x40
 8001a18:	1aa2      	subs	r2, r4, r2
 8001a1a:	4093      	lsls	r3, r2
 8001a1c:	464a      	mov	r2, r9
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	4691      	mov	r9, r2
 8001a22:	464d      	mov	r5, r9
 8001a24:	1e6b      	subs	r3, r5, #1
 8001a26:	419d      	sbcs	r5, r3
 8001a28:	4335      	orrs	r5, r6
 8001a2a:	e778      	b.n	800191e <__aeabi_dadd+0x472>
 8001a2c:	464a      	mov	r2, r9
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	d000      	beq.n	8001a34 <__aeabi_dadd+0x588>
 8001a32:	e66b      	b.n	800170c <__aeabi_dadd+0x260>
 8001a34:	076b      	lsls	r3, r5, #29
 8001a36:	08f9      	lsrs	r1, r7, #3
 8001a38:	4319      	orrs	r1, r3
 8001a3a:	08eb      	lsrs	r3, r5, #3
 8001a3c:	e680      	b.n	8001740 <__aeabi_dadd+0x294>
 8001a3e:	4661      	mov	r1, ip
 8001a40:	4339      	orrs	r1, r7
 8001a42:	d054      	beq.n	8001aee <__aeabi_dadd+0x642>
 8001a44:	4663      	mov	r3, ip
 8001a46:	08f9      	lsrs	r1, r7, #3
 8001a48:	075c      	lsls	r4, r3, #29
 8001a4a:	4321      	orrs	r1, r4
 8001a4c:	08db      	lsrs	r3, r3, #3
 8001a4e:	0004      	movs	r4, r0
 8001a50:	e654      	b.n	80016fc <__aeabi_dadd+0x250>
 8001a52:	464a      	mov	r2, r9
 8001a54:	1abd      	subs	r5, r7, r2
 8001a56:	42af      	cmp	r7, r5
 8001a58:	4189      	sbcs	r1, r1
 8001a5a:	4662      	mov	r2, ip
 8001a5c:	4249      	negs	r1, r1
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	1a5b      	subs	r3, r3, r1
 8001a62:	4698      	mov	r8, r3
 8001a64:	0004      	movs	r4, r0
 8001a66:	2601      	movs	r6, #1
 8001a68:	e56b      	b.n	8001542 <__aeabi_dadd+0x96>
 8001a6a:	464a      	mov	r2, r9
 8001a6c:	1bd5      	subs	r5, r2, r7
 8001a6e:	45a9      	cmp	r9, r5
 8001a70:	4189      	sbcs	r1, r1
 8001a72:	4662      	mov	r2, ip
 8001a74:	4249      	negs	r1, r1
 8001a76:	1a9a      	subs	r2, r3, r2
 8001a78:	1a52      	subs	r2, r2, r1
 8001a7a:	4690      	mov	r8, r2
 8001a7c:	0212      	lsls	r2, r2, #8
 8001a7e:	d532      	bpl.n	8001ae6 <__aeabi_dadd+0x63a>
 8001a80:	464a      	mov	r2, r9
 8001a82:	1abd      	subs	r5, r7, r2
 8001a84:	42af      	cmp	r7, r5
 8001a86:	4189      	sbcs	r1, r1
 8001a88:	4662      	mov	r2, ip
 8001a8a:	4249      	negs	r1, r1
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	1a5b      	subs	r3, r3, r1
 8001a90:	4698      	mov	r8, r3
 8001a92:	0004      	movs	r4, r0
 8001a94:	e584      	b.n	80015a0 <__aeabi_dadd+0xf4>
 8001a96:	4663      	mov	r3, ip
 8001a98:	08f9      	lsrs	r1, r7, #3
 8001a9a:	075a      	lsls	r2, r3, #29
 8001a9c:	4311      	orrs	r1, r2
 8001a9e:	08db      	lsrs	r3, r3, #3
 8001aa0:	e64e      	b.n	8001740 <__aeabi_dadd+0x294>
 8001aa2:	08f9      	lsrs	r1, r7, #3
 8001aa4:	0768      	lsls	r0, r5, #29
 8001aa6:	4301      	orrs	r1, r0
 8001aa8:	08eb      	lsrs	r3, r5, #3
 8001aaa:	e624      	b.n	80016f6 <__aeabi_dadd+0x24a>
 8001aac:	4662      	mov	r2, ip
 8001aae:	433a      	orrs	r2, r7
 8001ab0:	d100      	bne.n	8001ab4 <__aeabi_dadd+0x608>
 8001ab2:	e698      	b.n	80017e6 <__aeabi_dadd+0x33a>
 8001ab4:	464a      	mov	r2, r9
 8001ab6:	08d1      	lsrs	r1, r2, #3
 8001ab8:	075a      	lsls	r2, r3, #29
 8001aba:	4311      	orrs	r1, r2
 8001abc:	08da      	lsrs	r2, r3, #3
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	031b      	lsls	r3, r3, #12
 8001ac2:	421a      	tst	r2, r3
 8001ac4:	d008      	beq.n	8001ad8 <__aeabi_dadd+0x62c>
 8001ac6:	4660      	mov	r0, ip
 8001ac8:	08c5      	lsrs	r5, r0, #3
 8001aca:	421d      	tst	r5, r3
 8001acc:	d104      	bne.n	8001ad8 <__aeabi_dadd+0x62c>
 8001ace:	4654      	mov	r4, sl
 8001ad0:	002a      	movs	r2, r5
 8001ad2:	08f9      	lsrs	r1, r7, #3
 8001ad4:	0743      	lsls	r3, r0, #29
 8001ad6:	4319      	orrs	r1, r3
 8001ad8:	0f4b      	lsrs	r3, r1, #29
 8001ada:	00c9      	lsls	r1, r1, #3
 8001adc:	075b      	lsls	r3, r3, #29
 8001ade:	08c9      	lsrs	r1, r1, #3
 8001ae0:	4319      	orrs	r1, r3
 8001ae2:	0013      	movs	r3, r2
 8001ae4:	e62c      	b.n	8001740 <__aeabi_dadd+0x294>
 8001ae6:	4641      	mov	r1, r8
 8001ae8:	4329      	orrs	r1, r5
 8001aea:	d000      	beq.n	8001aee <__aeabi_dadd+0x642>
 8001aec:	e5fa      	b.n	80016e4 <__aeabi_dadd+0x238>
 8001aee:	2300      	movs	r3, #0
 8001af0:	000a      	movs	r2, r1
 8001af2:	2400      	movs	r4, #0
 8001af4:	e602      	b.n	80016fc <__aeabi_dadd+0x250>
 8001af6:	076b      	lsls	r3, r5, #29
 8001af8:	08f9      	lsrs	r1, r7, #3
 8001afa:	4319      	orrs	r1, r3
 8001afc:	08eb      	lsrs	r3, r5, #3
 8001afe:	e5fd      	b.n	80016fc <__aeabi_dadd+0x250>
 8001b00:	4663      	mov	r3, ip
 8001b02:	08f9      	lsrs	r1, r7, #3
 8001b04:	075b      	lsls	r3, r3, #29
 8001b06:	4319      	orrs	r1, r3
 8001b08:	4663      	mov	r3, ip
 8001b0a:	0004      	movs	r4, r0
 8001b0c:	08db      	lsrs	r3, r3, #3
 8001b0e:	e617      	b.n	8001740 <__aeabi_dadd+0x294>
 8001b10:	003d      	movs	r5, r7
 8001b12:	444d      	add	r5, r9
 8001b14:	4463      	add	r3, ip
 8001b16:	454d      	cmp	r5, r9
 8001b18:	4189      	sbcs	r1, r1
 8001b1a:	4698      	mov	r8, r3
 8001b1c:	4249      	negs	r1, r1
 8001b1e:	4488      	add	r8, r1
 8001b20:	4643      	mov	r3, r8
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	d400      	bmi.n	8001b28 <__aeabi_dadd+0x67c>
 8001b26:	e5dd      	b.n	80016e4 <__aeabi_dadd+0x238>
 8001b28:	4642      	mov	r2, r8
 8001b2a:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <__aeabi_dadd+0x6d0>)
 8001b2c:	2601      	movs	r6, #1
 8001b2e:	401a      	ands	r2, r3
 8001b30:	4690      	mov	r8, r2
 8001b32:	e5d7      	b.n	80016e4 <__aeabi_dadd+0x238>
 8001b34:	0010      	movs	r0, r2
 8001b36:	001e      	movs	r6, r3
 8001b38:	3820      	subs	r0, #32
 8001b3a:	40c6      	lsrs	r6, r0
 8001b3c:	2a20      	cmp	r2, #32
 8001b3e:	d005      	beq.n	8001b4c <__aeabi_dadd+0x6a0>
 8001b40:	2040      	movs	r0, #64	; 0x40
 8001b42:	1a82      	subs	r2, r0, r2
 8001b44:	4093      	lsls	r3, r2
 8001b46:	464a      	mov	r2, r9
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	4691      	mov	r9, r2
 8001b4c:	464d      	mov	r5, r9
 8001b4e:	1e6b      	subs	r3, r5, #1
 8001b50:	419d      	sbcs	r5, r3
 8001b52:	4335      	orrs	r5, r6
 8001b54:	e621      	b.n	800179a <__aeabi_dadd+0x2ee>
 8001b56:	0002      	movs	r2, r0
 8001b58:	2300      	movs	r3, #0
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	e540      	b.n	80015e0 <__aeabi_dadd+0x134>
 8001b5e:	464a      	mov	r2, r9
 8001b60:	19d5      	adds	r5, r2, r7
 8001b62:	42bd      	cmp	r5, r7
 8001b64:	4189      	sbcs	r1, r1
 8001b66:	4463      	add	r3, ip
 8001b68:	4698      	mov	r8, r3
 8001b6a:	4249      	negs	r1, r1
 8001b6c:	4488      	add	r8, r1
 8001b6e:	e5b3      	b.n	80016d8 <__aeabi_dadd+0x22c>
 8001b70:	2100      	movs	r1, #0
 8001b72:	4a01      	ldr	r2, [pc, #4]	; (8001b78 <__aeabi_dadd+0x6cc>)
 8001b74:	000b      	movs	r3, r1
 8001b76:	e533      	b.n	80015e0 <__aeabi_dadd+0x134>
 8001b78:	000007ff 	.word	0x000007ff
 8001b7c:	ff7fffff 	.word	0xff7fffff

08001b80 <__aeabi_ddiv>:
 8001b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b82:	4657      	mov	r7, sl
 8001b84:	464e      	mov	r6, r9
 8001b86:	4645      	mov	r5, r8
 8001b88:	46de      	mov	lr, fp
 8001b8a:	b5e0      	push	{r5, r6, r7, lr}
 8001b8c:	4681      	mov	r9, r0
 8001b8e:	0005      	movs	r5, r0
 8001b90:	030c      	lsls	r4, r1, #12
 8001b92:	0048      	lsls	r0, r1, #1
 8001b94:	4692      	mov	sl, r2
 8001b96:	001f      	movs	r7, r3
 8001b98:	b085      	sub	sp, #20
 8001b9a:	0b24      	lsrs	r4, r4, #12
 8001b9c:	0d40      	lsrs	r0, r0, #21
 8001b9e:	0fce      	lsrs	r6, r1, #31
 8001ba0:	2800      	cmp	r0, #0
 8001ba2:	d059      	beq.n	8001c58 <__aeabi_ddiv+0xd8>
 8001ba4:	4b87      	ldr	r3, [pc, #540]	; (8001dc4 <__aeabi_ddiv+0x244>)
 8001ba6:	4298      	cmp	r0, r3
 8001ba8:	d100      	bne.n	8001bac <__aeabi_ddiv+0x2c>
 8001baa:	e098      	b.n	8001cde <__aeabi_ddiv+0x15e>
 8001bac:	0f6b      	lsrs	r3, r5, #29
 8001bae:	00e4      	lsls	r4, r4, #3
 8001bb0:	431c      	orrs	r4, r3
 8001bb2:	2380      	movs	r3, #128	; 0x80
 8001bb4:	041b      	lsls	r3, r3, #16
 8001bb6:	4323      	orrs	r3, r4
 8001bb8:	4698      	mov	r8, r3
 8001bba:	4b83      	ldr	r3, [pc, #524]	; (8001dc8 <__aeabi_ddiv+0x248>)
 8001bbc:	00ed      	lsls	r5, r5, #3
 8001bbe:	469b      	mov	fp, r3
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	4699      	mov	r9, r3
 8001bc4:	4483      	add	fp, r0
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	033c      	lsls	r4, r7, #12
 8001bca:	007b      	lsls	r3, r7, #1
 8001bcc:	4650      	mov	r0, sl
 8001bce:	0b24      	lsrs	r4, r4, #12
 8001bd0:	0d5b      	lsrs	r3, r3, #21
 8001bd2:	0fff      	lsrs	r7, r7, #31
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d067      	beq.n	8001ca8 <__aeabi_ddiv+0x128>
 8001bd8:	4a7a      	ldr	r2, [pc, #488]	; (8001dc4 <__aeabi_ddiv+0x244>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d018      	beq.n	8001c10 <__aeabi_ddiv+0x90>
 8001bde:	497a      	ldr	r1, [pc, #488]	; (8001dc8 <__aeabi_ddiv+0x248>)
 8001be0:	0f42      	lsrs	r2, r0, #29
 8001be2:	468c      	mov	ip, r1
 8001be4:	00e4      	lsls	r4, r4, #3
 8001be6:	4659      	mov	r1, fp
 8001be8:	4314      	orrs	r4, r2
 8001bea:	2280      	movs	r2, #128	; 0x80
 8001bec:	4463      	add	r3, ip
 8001bee:	0412      	lsls	r2, r2, #16
 8001bf0:	1acb      	subs	r3, r1, r3
 8001bf2:	4314      	orrs	r4, r2
 8001bf4:	469b      	mov	fp, r3
 8001bf6:	00c2      	lsls	r2, r0, #3
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	0033      	movs	r3, r6
 8001bfc:	407b      	eors	r3, r7
 8001bfe:	469a      	mov	sl, r3
 8001c00:	464b      	mov	r3, r9
 8001c02:	2b0f      	cmp	r3, #15
 8001c04:	d900      	bls.n	8001c08 <__aeabi_ddiv+0x88>
 8001c06:	e0ef      	b.n	8001de8 <__aeabi_ddiv+0x268>
 8001c08:	4970      	ldr	r1, [pc, #448]	; (8001dcc <__aeabi_ddiv+0x24c>)
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	58cb      	ldr	r3, [r1, r3]
 8001c0e:	469f      	mov	pc, r3
 8001c10:	4b6f      	ldr	r3, [pc, #444]	; (8001dd0 <__aeabi_ddiv+0x250>)
 8001c12:	4652      	mov	r2, sl
 8001c14:	469c      	mov	ip, r3
 8001c16:	4322      	orrs	r2, r4
 8001c18:	44e3      	add	fp, ip
 8001c1a:	2a00      	cmp	r2, #0
 8001c1c:	d000      	beq.n	8001c20 <__aeabi_ddiv+0xa0>
 8001c1e:	e095      	b.n	8001d4c <__aeabi_ddiv+0x1cc>
 8001c20:	4649      	mov	r1, r9
 8001c22:	2302      	movs	r3, #2
 8001c24:	4319      	orrs	r1, r3
 8001c26:	4689      	mov	r9, r1
 8001c28:	2400      	movs	r4, #0
 8001c2a:	2002      	movs	r0, #2
 8001c2c:	e7e5      	b.n	8001bfa <__aeabi_ddiv+0x7a>
 8001c2e:	2300      	movs	r3, #0
 8001c30:	2400      	movs	r4, #0
 8001c32:	2500      	movs	r5, #0
 8001c34:	4652      	mov	r2, sl
 8001c36:	051b      	lsls	r3, r3, #20
 8001c38:	4323      	orrs	r3, r4
 8001c3a:	07d2      	lsls	r2, r2, #31
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	0028      	movs	r0, r5
 8001c40:	0019      	movs	r1, r3
 8001c42:	b005      	add	sp, #20
 8001c44:	bcf0      	pop	{r4, r5, r6, r7}
 8001c46:	46bb      	mov	fp, r7
 8001c48:	46b2      	mov	sl, r6
 8001c4a:	46a9      	mov	r9, r5
 8001c4c:	46a0      	mov	r8, r4
 8001c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c50:	2400      	movs	r4, #0
 8001c52:	2500      	movs	r5, #0
 8001c54:	4b5b      	ldr	r3, [pc, #364]	; (8001dc4 <__aeabi_ddiv+0x244>)
 8001c56:	e7ed      	b.n	8001c34 <__aeabi_ddiv+0xb4>
 8001c58:	464b      	mov	r3, r9
 8001c5a:	4323      	orrs	r3, r4
 8001c5c:	4698      	mov	r8, r3
 8001c5e:	d100      	bne.n	8001c62 <__aeabi_ddiv+0xe2>
 8001c60:	e089      	b.n	8001d76 <__aeabi_ddiv+0x1f6>
 8001c62:	2c00      	cmp	r4, #0
 8001c64:	d100      	bne.n	8001c68 <__aeabi_ddiv+0xe8>
 8001c66:	e1e0      	b.n	800202a <__aeabi_ddiv+0x4aa>
 8001c68:	0020      	movs	r0, r4
 8001c6a:	f001 fae9 	bl	8003240 <__clzsi2>
 8001c6e:	0001      	movs	r1, r0
 8001c70:	0002      	movs	r2, r0
 8001c72:	390b      	subs	r1, #11
 8001c74:	231d      	movs	r3, #29
 8001c76:	1a5b      	subs	r3, r3, r1
 8001c78:	4649      	mov	r1, r9
 8001c7a:	0010      	movs	r0, r2
 8001c7c:	40d9      	lsrs	r1, r3
 8001c7e:	3808      	subs	r0, #8
 8001c80:	4084      	lsls	r4, r0
 8001c82:	000b      	movs	r3, r1
 8001c84:	464d      	mov	r5, r9
 8001c86:	4323      	orrs	r3, r4
 8001c88:	4698      	mov	r8, r3
 8001c8a:	4085      	lsls	r5, r0
 8001c8c:	4851      	ldr	r0, [pc, #324]	; (8001dd4 <__aeabi_ddiv+0x254>)
 8001c8e:	033c      	lsls	r4, r7, #12
 8001c90:	1a83      	subs	r3, r0, r2
 8001c92:	469b      	mov	fp, r3
 8001c94:	2300      	movs	r3, #0
 8001c96:	4699      	mov	r9, r3
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	007b      	lsls	r3, r7, #1
 8001c9c:	4650      	mov	r0, sl
 8001c9e:	0b24      	lsrs	r4, r4, #12
 8001ca0:	0d5b      	lsrs	r3, r3, #21
 8001ca2:	0fff      	lsrs	r7, r7, #31
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d197      	bne.n	8001bd8 <__aeabi_ddiv+0x58>
 8001ca8:	4652      	mov	r2, sl
 8001caa:	4322      	orrs	r2, r4
 8001cac:	d055      	beq.n	8001d5a <__aeabi_ddiv+0x1da>
 8001cae:	2c00      	cmp	r4, #0
 8001cb0:	d100      	bne.n	8001cb4 <__aeabi_ddiv+0x134>
 8001cb2:	e1ca      	b.n	800204a <__aeabi_ddiv+0x4ca>
 8001cb4:	0020      	movs	r0, r4
 8001cb6:	f001 fac3 	bl	8003240 <__clzsi2>
 8001cba:	0002      	movs	r2, r0
 8001cbc:	3a0b      	subs	r2, #11
 8001cbe:	231d      	movs	r3, #29
 8001cc0:	0001      	movs	r1, r0
 8001cc2:	1a9b      	subs	r3, r3, r2
 8001cc4:	4652      	mov	r2, sl
 8001cc6:	3908      	subs	r1, #8
 8001cc8:	40da      	lsrs	r2, r3
 8001cca:	408c      	lsls	r4, r1
 8001ccc:	4314      	orrs	r4, r2
 8001cce:	4652      	mov	r2, sl
 8001cd0:	408a      	lsls	r2, r1
 8001cd2:	4b41      	ldr	r3, [pc, #260]	; (8001dd8 <__aeabi_ddiv+0x258>)
 8001cd4:	4458      	add	r0, fp
 8001cd6:	469b      	mov	fp, r3
 8001cd8:	4483      	add	fp, r0
 8001cda:	2000      	movs	r0, #0
 8001cdc:	e78d      	b.n	8001bfa <__aeabi_ddiv+0x7a>
 8001cde:	464b      	mov	r3, r9
 8001ce0:	4323      	orrs	r3, r4
 8001ce2:	4698      	mov	r8, r3
 8001ce4:	d140      	bne.n	8001d68 <__aeabi_ddiv+0x1e8>
 8001ce6:	2308      	movs	r3, #8
 8001ce8:	4699      	mov	r9, r3
 8001cea:	3b06      	subs	r3, #6
 8001cec:	2500      	movs	r5, #0
 8001cee:	4683      	mov	fp, r0
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	e769      	b.n	8001bc8 <__aeabi_ddiv+0x48>
 8001cf4:	46b2      	mov	sl, r6
 8001cf6:	9b00      	ldr	r3, [sp, #0]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d0a9      	beq.n	8001c50 <__aeabi_ddiv+0xd0>
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_ddiv+0x182>
 8001d00:	e211      	b.n	8002126 <__aeabi_ddiv+0x5a6>
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d093      	beq.n	8001c2e <__aeabi_ddiv+0xae>
 8001d06:	4a35      	ldr	r2, [pc, #212]	; (8001ddc <__aeabi_ddiv+0x25c>)
 8001d08:	445a      	add	r2, fp
 8001d0a:	2a00      	cmp	r2, #0
 8001d0c:	dc00      	bgt.n	8001d10 <__aeabi_ddiv+0x190>
 8001d0e:	e13c      	b.n	8001f8a <__aeabi_ddiv+0x40a>
 8001d10:	076b      	lsls	r3, r5, #29
 8001d12:	d000      	beq.n	8001d16 <__aeabi_ddiv+0x196>
 8001d14:	e1a7      	b.n	8002066 <__aeabi_ddiv+0x4e6>
 8001d16:	08ed      	lsrs	r5, r5, #3
 8001d18:	4643      	mov	r3, r8
 8001d1a:	01db      	lsls	r3, r3, #7
 8001d1c:	d506      	bpl.n	8001d2c <__aeabi_ddiv+0x1ac>
 8001d1e:	4642      	mov	r2, r8
 8001d20:	4b2f      	ldr	r3, [pc, #188]	; (8001de0 <__aeabi_ddiv+0x260>)
 8001d22:	401a      	ands	r2, r3
 8001d24:	4690      	mov	r8, r2
 8001d26:	2280      	movs	r2, #128	; 0x80
 8001d28:	00d2      	lsls	r2, r2, #3
 8001d2a:	445a      	add	r2, fp
 8001d2c:	4b2d      	ldr	r3, [pc, #180]	; (8001de4 <__aeabi_ddiv+0x264>)
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	dc8e      	bgt.n	8001c50 <__aeabi_ddiv+0xd0>
 8001d32:	4643      	mov	r3, r8
 8001d34:	0552      	lsls	r2, r2, #21
 8001d36:	0758      	lsls	r0, r3, #29
 8001d38:	025c      	lsls	r4, r3, #9
 8001d3a:	4305      	orrs	r5, r0
 8001d3c:	0b24      	lsrs	r4, r4, #12
 8001d3e:	0d53      	lsrs	r3, r2, #21
 8001d40:	e778      	b.n	8001c34 <__aeabi_ddiv+0xb4>
 8001d42:	46ba      	mov	sl, r7
 8001d44:	46a0      	mov	r8, r4
 8001d46:	0015      	movs	r5, r2
 8001d48:	9000      	str	r0, [sp, #0]
 8001d4a:	e7d4      	b.n	8001cf6 <__aeabi_ddiv+0x176>
 8001d4c:	464a      	mov	r2, r9
 8001d4e:	2303      	movs	r3, #3
 8001d50:	431a      	orrs	r2, r3
 8001d52:	4691      	mov	r9, r2
 8001d54:	2003      	movs	r0, #3
 8001d56:	4652      	mov	r2, sl
 8001d58:	e74f      	b.n	8001bfa <__aeabi_ddiv+0x7a>
 8001d5a:	4649      	mov	r1, r9
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	4319      	orrs	r1, r3
 8001d60:	4689      	mov	r9, r1
 8001d62:	2400      	movs	r4, #0
 8001d64:	2001      	movs	r0, #1
 8001d66:	e748      	b.n	8001bfa <__aeabi_ddiv+0x7a>
 8001d68:	230c      	movs	r3, #12
 8001d6a:	4699      	mov	r9, r3
 8001d6c:	3b09      	subs	r3, #9
 8001d6e:	46a0      	mov	r8, r4
 8001d70:	4683      	mov	fp, r0
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	e728      	b.n	8001bc8 <__aeabi_ddiv+0x48>
 8001d76:	2304      	movs	r3, #4
 8001d78:	4699      	mov	r9, r3
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	469b      	mov	fp, r3
 8001d7e:	3301      	adds	r3, #1
 8001d80:	2500      	movs	r5, #0
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	e720      	b.n	8001bc8 <__aeabi_ddiv+0x48>
 8001d86:	2300      	movs	r3, #0
 8001d88:	2480      	movs	r4, #128	; 0x80
 8001d8a:	469a      	mov	sl, r3
 8001d8c:	2500      	movs	r5, #0
 8001d8e:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <__aeabi_ddiv+0x244>)
 8001d90:	0324      	lsls	r4, r4, #12
 8001d92:	e74f      	b.n	8001c34 <__aeabi_ddiv+0xb4>
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	4641      	mov	r1, r8
 8001d98:	031b      	lsls	r3, r3, #12
 8001d9a:	4219      	tst	r1, r3
 8001d9c:	d008      	beq.n	8001db0 <__aeabi_ddiv+0x230>
 8001d9e:	421c      	tst	r4, r3
 8001da0:	d106      	bne.n	8001db0 <__aeabi_ddiv+0x230>
 8001da2:	431c      	orrs	r4, r3
 8001da4:	0324      	lsls	r4, r4, #12
 8001da6:	46ba      	mov	sl, r7
 8001da8:	0015      	movs	r5, r2
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <__aeabi_ddiv+0x244>)
 8001dac:	0b24      	lsrs	r4, r4, #12
 8001dae:	e741      	b.n	8001c34 <__aeabi_ddiv+0xb4>
 8001db0:	2480      	movs	r4, #128	; 0x80
 8001db2:	4643      	mov	r3, r8
 8001db4:	0324      	lsls	r4, r4, #12
 8001db6:	431c      	orrs	r4, r3
 8001db8:	0324      	lsls	r4, r4, #12
 8001dba:	46b2      	mov	sl, r6
 8001dbc:	4b01      	ldr	r3, [pc, #4]	; (8001dc4 <__aeabi_ddiv+0x244>)
 8001dbe:	0b24      	lsrs	r4, r4, #12
 8001dc0:	e738      	b.n	8001c34 <__aeabi_ddiv+0xb4>
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	000007ff 	.word	0x000007ff
 8001dc8:	fffffc01 	.word	0xfffffc01
 8001dcc:	08010d38 	.word	0x08010d38
 8001dd0:	fffff801 	.word	0xfffff801
 8001dd4:	fffffc0d 	.word	0xfffffc0d
 8001dd8:	000003f3 	.word	0x000003f3
 8001ddc:	000003ff 	.word	0x000003ff
 8001de0:	feffffff 	.word	0xfeffffff
 8001de4:	000007fe 	.word	0x000007fe
 8001de8:	4544      	cmp	r4, r8
 8001dea:	d200      	bcs.n	8001dee <__aeabi_ddiv+0x26e>
 8001dec:	e116      	b.n	800201c <__aeabi_ddiv+0x49c>
 8001dee:	d100      	bne.n	8001df2 <__aeabi_ddiv+0x272>
 8001df0:	e111      	b.n	8002016 <__aeabi_ddiv+0x496>
 8001df2:	2301      	movs	r3, #1
 8001df4:	425b      	negs	r3, r3
 8001df6:	469c      	mov	ip, r3
 8001df8:	002e      	movs	r6, r5
 8001dfa:	4640      	mov	r0, r8
 8001dfc:	2500      	movs	r5, #0
 8001dfe:	44e3      	add	fp, ip
 8001e00:	0223      	lsls	r3, r4, #8
 8001e02:	0e14      	lsrs	r4, r2, #24
 8001e04:	431c      	orrs	r4, r3
 8001e06:	0c1b      	lsrs	r3, r3, #16
 8001e08:	4699      	mov	r9, r3
 8001e0a:	0423      	lsls	r3, r4, #16
 8001e0c:	0c1f      	lsrs	r7, r3, #16
 8001e0e:	0212      	lsls	r2, r2, #8
 8001e10:	4649      	mov	r1, r9
 8001e12:	9200      	str	r2, [sp, #0]
 8001e14:	9701      	str	r7, [sp, #4]
 8001e16:	f7fe fa1b 	bl	8000250 <__aeabi_uidivmod>
 8001e1a:	0002      	movs	r2, r0
 8001e1c:	437a      	muls	r2, r7
 8001e1e:	040b      	lsls	r3, r1, #16
 8001e20:	0c31      	lsrs	r1, r6, #16
 8001e22:	4680      	mov	r8, r0
 8001e24:	4319      	orrs	r1, r3
 8001e26:	428a      	cmp	r2, r1
 8001e28:	d90b      	bls.n	8001e42 <__aeabi_ddiv+0x2c2>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	425b      	negs	r3, r3
 8001e2e:	469c      	mov	ip, r3
 8001e30:	1909      	adds	r1, r1, r4
 8001e32:	44e0      	add	r8, ip
 8001e34:	428c      	cmp	r4, r1
 8001e36:	d804      	bhi.n	8001e42 <__aeabi_ddiv+0x2c2>
 8001e38:	428a      	cmp	r2, r1
 8001e3a:	d902      	bls.n	8001e42 <__aeabi_ddiv+0x2c2>
 8001e3c:	1e83      	subs	r3, r0, #2
 8001e3e:	4698      	mov	r8, r3
 8001e40:	1909      	adds	r1, r1, r4
 8001e42:	1a88      	subs	r0, r1, r2
 8001e44:	4649      	mov	r1, r9
 8001e46:	f7fe fa03 	bl	8000250 <__aeabi_uidivmod>
 8001e4a:	0409      	lsls	r1, r1, #16
 8001e4c:	468c      	mov	ip, r1
 8001e4e:	0431      	lsls	r1, r6, #16
 8001e50:	4666      	mov	r6, ip
 8001e52:	9a01      	ldr	r2, [sp, #4]
 8001e54:	0c09      	lsrs	r1, r1, #16
 8001e56:	4342      	muls	r2, r0
 8001e58:	0003      	movs	r3, r0
 8001e5a:	4331      	orrs	r1, r6
 8001e5c:	428a      	cmp	r2, r1
 8001e5e:	d904      	bls.n	8001e6a <__aeabi_ddiv+0x2ea>
 8001e60:	1909      	adds	r1, r1, r4
 8001e62:	3b01      	subs	r3, #1
 8001e64:	428c      	cmp	r4, r1
 8001e66:	d800      	bhi.n	8001e6a <__aeabi_ddiv+0x2ea>
 8001e68:	e111      	b.n	800208e <__aeabi_ddiv+0x50e>
 8001e6a:	1a89      	subs	r1, r1, r2
 8001e6c:	4642      	mov	r2, r8
 8001e6e:	9e00      	ldr	r6, [sp, #0]
 8001e70:	0412      	lsls	r2, r2, #16
 8001e72:	431a      	orrs	r2, r3
 8001e74:	0c33      	lsrs	r3, r6, #16
 8001e76:	001f      	movs	r7, r3
 8001e78:	0c10      	lsrs	r0, r2, #16
 8001e7a:	4690      	mov	r8, r2
 8001e7c:	9302      	str	r3, [sp, #8]
 8001e7e:	0413      	lsls	r3, r2, #16
 8001e80:	0432      	lsls	r2, r6, #16
 8001e82:	0c16      	lsrs	r6, r2, #16
 8001e84:	0032      	movs	r2, r6
 8001e86:	0c1b      	lsrs	r3, r3, #16
 8001e88:	435a      	muls	r2, r3
 8001e8a:	9603      	str	r6, [sp, #12]
 8001e8c:	437b      	muls	r3, r7
 8001e8e:	4346      	muls	r6, r0
 8001e90:	4378      	muls	r0, r7
 8001e92:	0c17      	lsrs	r7, r2, #16
 8001e94:	46bc      	mov	ip, r7
 8001e96:	199b      	adds	r3, r3, r6
 8001e98:	4463      	add	r3, ip
 8001e9a:	429e      	cmp	r6, r3
 8001e9c:	d903      	bls.n	8001ea6 <__aeabi_ddiv+0x326>
 8001e9e:	2680      	movs	r6, #128	; 0x80
 8001ea0:	0276      	lsls	r6, r6, #9
 8001ea2:	46b4      	mov	ip, r6
 8001ea4:	4460      	add	r0, ip
 8001ea6:	0c1e      	lsrs	r6, r3, #16
 8001ea8:	1830      	adds	r0, r6, r0
 8001eaa:	0416      	lsls	r6, r2, #16
 8001eac:	041b      	lsls	r3, r3, #16
 8001eae:	0c36      	lsrs	r6, r6, #16
 8001eb0:	199e      	adds	r6, r3, r6
 8001eb2:	4281      	cmp	r1, r0
 8001eb4:	d200      	bcs.n	8001eb8 <__aeabi_ddiv+0x338>
 8001eb6:	e09c      	b.n	8001ff2 <__aeabi_ddiv+0x472>
 8001eb8:	d100      	bne.n	8001ebc <__aeabi_ddiv+0x33c>
 8001eba:	e097      	b.n	8001fec <__aeabi_ddiv+0x46c>
 8001ebc:	1bae      	subs	r6, r5, r6
 8001ebe:	1a09      	subs	r1, r1, r0
 8001ec0:	42b5      	cmp	r5, r6
 8001ec2:	4180      	sbcs	r0, r0
 8001ec4:	4240      	negs	r0, r0
 8001ec6:	1a08      	subs	r0, r1, r0
 8001ec8:	4284      	cmp	r4, r0
 8001eca:	d100      	bne.n	8001ece <__aeabi_ddiv+0x34e>
 8001ecc:	e111      	b.n	80020f2 <__aeabi_ddiv+0x572>
 8001ece:	4649      	mov	r1, r9
 8001ed0:	f7fe f9be 	bl	8000250 <__aeabi_uidivmod>
 8001ed4:	9a01      	ldr	r2, [sp, #4]
 8001ed6:	040b      	lsls	r3, r1, #16
 8001ed8:	4342      	muls	r2, r0
 8001eda:	0c31      	lsrs	r1, r6, #16
 8001edc:	0005      	movs	r5, r0
 8001ede:	4319      	orrs	r1, r3
 8001ee0:	428a      	cmp	r2, r1
 8001ee2:	d907      	bls.n	8001ef4 <__aeabi_ddiv+0x374>
 8001ee4:	1909      	adds	r1, r1, r4
 8001ee6:	3d01      	subs	r5, #1
 8001ee8:	428c      	cmp	r4, r1
 8001eea:	d803      	bhi.n	8001ef4 <__aeabi_ddiv+0x374>
 8001eec:	428a      	cmp	r2, r1
 8001eee:	d901      	bls.n	8001ef4 <__aeabi_ddiv+0x374>
 8001ef0:	1e85      	subs	r5, r0, #2
 8001ef2:	1909      	adds	r1, r1, r4
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	4649      	mov	r1, r9
 8001ef8:	f7fe f9aa 	bl	8000250 <__aeabi_uidivmod>
 8001efc:	0409      	lsls	r1, r1, #16
 8001efe:	468c      	mov	ip, r1
 8001f00:	0431      	lsls	r1, r6, #16
 8001f02:	4666      	mov	r6, ip
 8001f04:	9a01      	ldr	r2, [sp, #4]
 8001f06:	0c09      	lsrs	r1, r1, #16
 8001f08:	4342      	muls	r2, r0
 8001f0a:	0003      	movs	r3, r0
 8001f0c:	4331      	orrs	r1, r6
 8001f0e:	428a      	cmp	r2, r1
 8001f10:	d907      	bls.n	8001f22 <__aeabi_ddiv+0x3a2>
 8001f12:	1909      	adds	r1, r1, r4
 8001f14:	3b01      	subs	r3, #1
 8001f16:	428c      	cmp	r4, r1
 8001f18:	d803      	bhi.n	8001f22 <__aeabi_ddiv+0x3a2>
 8001f1a:	428a      	cmp	r2, r1
 8001f1c:	d901      	bls.n	8001f22 <__aeabi_ddiv+0x3a2>
 8001f1e:	1e83      	subs	r3, r0, #2
 8001f20:	1909      	adds	r1, r1, r4
 8001f22:	9e03      	ldr	r6, [sp, #12]
 8001f24:	1a89      	subs	r1, r1, r2
 8001f26:	0032      	movs	r2, r6
 8001f28:	042d      	lsls	r5, r5, #16
 8001f2a:	431d      	orrs	r5, r3
 8001f2c:	9f02      	ldr	r7, [sp, #8]
 8001f2e:	042b      	lsls	r3, r5, #16
 8001f30:	0c1b      	lsrs	r3, r3, #16
 8001f32:	435a      	muls	r2, r3
 8001f34:	437b      	muls	r3, r7
 8001f36:	469c      	mov	ip, r3
 8001f38:	0c28      	lsrs	r0, r5, #16
 8001f3a:	4346      	muls	r6, r0
 8001f3c:	0c13      	lsrs	r3, r2, #16
 8001f3e:	44b4      	add	ip, r6
 8001f40:	4463      	add	r3, ip
 8001f42:	4378      	muls	r0, r7
 8001f44:	429e      	cmp	r6, r3
 8001f46:	d903      	bls.n	8001f50 <__aeabi_ddiv+0x3d0>
 8001f48:	2680      	movs	r6, #128	; 0x80
 8001f4a:	0276      	lsls	r6, r6, #9
 8001f4c:	46b4      	mov	ip, r6
 8001f4e:	4460      	add	r0, ip
 8001f50:	0c1e      	lsrs	r6, r3, #16
 8001f52:	0412      	lsls	r2, r2, #16
 8001f54:	041b      	lsls	r3, r3, #16
 8001f56:	0c12      	lsrs	r2, r2, #16
 8001f58:	1830      	adds	r0, r6, r0
 8001f5a:	189b      	adds	r3, r3, r2
 8001f5c:	4281      	cmp	r1, r0
 8001f5e:	d306      	bcc.n	8001f6e <__aeabi_ddiv+0x3ee>
 8001f60:	d002      	beq.n	8001f68 <__aeabi_ddiv+0x3e8>
 8001f62:	2301      	movs	r3, #1
 8001f64:	431d      	orrs	r5, r3
 8001f66:	e6ce      	b.n	8001d06 <__aeabi_ddiv+0x186>
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d100      	bne.n	8001f6e <__aeabi_ddiv+0x3ee>
 8001f6c:	e6cb      	b.n	8001d06 <__aeabi_ddiv+0x186>
 8001f6e:	1861      	adds	r1, r4, r1
 8001f70:	1e6e      	subs	r6, r5, #1
 8001f72:	42a1      	cmp	r1, r4
 8001f74:	d200      	bcs.n	8001f78 <__aeabi_ddiv+0x3f8>
 8001f76:	e0a4      	b.n	80020c2 <__aeabi_ddiv+0x542>
 8001f78:	4281      	cmp	r1, r0
 8001f7a:	d200      	bcs.n	8001f7e <__aeabi_ddiv+0x3fe>
 8001f7c:	e0c9      	b.n	8002112 <__aeabi_ddiv+0x592>
 8001f7e:	d100      	bne.n	8001f82 <__aeabi_ddiv+0x402>
 8001f80:	e0d9      	b.n	8002136 <__aeabi_ddiv+0x5b6>
 8001f82:	0035      	movs	r5, r6
 8001f84:	e7ed      	b.n	8001f62 <__aeabi_ddiv+0x3e2>
 8001f86:	2501      	movs	r5, #1
 8001f88:	426d      	negs	r5, r5
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	1a89      	subs	r1, r1, r2
 8001f8e:	2938      	cmp	r1, #56	; 0x38
 8001f90:	dd00      	ble.n	8001f94 <__aeabi_ddiv+0x414>
 8001f92:	e64c      	b.n	8001c2e <__aeabi_ddiv+0xae>
 8001f94:	291f      	cmp	r1, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_ddiv+0x41a>
 8001f98:	e07f      	b.n	800209a <__aeabi_ddiv+0x51a>
 8001f9a:	231f      	movs	r3, #31
 8001f9c:	425b      	negs	r3, r3
 8001f9e:	1a9a      	subs	r2, r3, r2
 8001fa0:	4643      	mov	r3, r8
 8001fa2:	40d3      	lsrs	r3, r2
 8001fa4:	2920      	cmp	r1, #32
 8001fa6:	d004      	beq.n	8001fb2 <__aeabi_ddiv+0x432>
 8001fa8:	4644      	mov	r4, r8
 8001faa:	4a65      	ldr	r2, [pc, #404]	; (8002140 <__aeabi_ddiv+0x5c0>)
 8001fac:	445a      	add	r2, fp
 8001fae:	4094      	lsls	r4, r2
 8001fb0:	4325      	orrs	r5, r4
 8001fb2:	1e6a      	subs	r2, r5, #1
 8001fb4:	4195      	sbcs	r5, r2
 8001fb6:	2207      	movs	r2, #7
 8001fb8:	432b      	orrs	r3, r5
 8001fba:	0015      	movs	r5, r2
 8001fbc:	2400      	movs	r4, #0
 8001fbe:	401d      	ands	r5, r3
 8001fc0:	421a      	tst	r2, r3
 8001fc2:	d100      	bne.n	8001fc6 <__aeabi_ddiv+0x446>
 8001fc4:	e0a1      	b.n	800210a <__aeabi_ddiv+0x58a>
 8001fc6:	220f      	movs	r2, #15
 8001fc8:	2400      	movs	r4, #0
 8001fca:	401a      	ands	r2, r3
 8001fcc:	2a04      	cmp	r2, #4
 8001fce:	d100      	bne.n	8001fd2 <__aeabi_ddiv+0x452>
 8001fd0:	e098      	b.n	8002104 <__aeabi_ddiv+0x584>
 8001fd2:	1d1a      	adds	r2, r3, #4
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	419b      	sbcs	r3, r3
 8001fd8:	425b      	negs	r3, r3
 8001fda:	18e4      	adds	r4, r4, r3
 8001fdc:	0013      	movs	r3, r2
 8001fde:	0222      	lsls	r2, r4, #8
 8001fe0:	d400      	bmi.n	8001fe4 <__aeabi_ddiv+0x464>
 8001fe2:	e08f      	b.n	8002104 <__aeabi_ddiv+0x584>
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	2400      	movs	r4, #0
 8001fe8:	2500      	movs	r5, #0
 8001fea:	e623      	b.n	8001c34 <__aeabi_ddiv+0xb4>
 8001fec:	42b5      	cmp	r5, r6
 8001fee:	d300      	bcc.n	8001ff2 <__aeabi_ddiv+0x472>
 8001ff0:	e764      	b.n	8001ebc <__aeabi_ddiv+0x33c>
 8001ff2:	4643      	mov	r3, r8
 8001ff4:	1e5a      	subs	r2, r3, #1
 8001ff6:	9b00      	ldr	r3, [sp, #0]
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	4465      	add	r5, ip
 8001ffc:	001f      	movs	r7, r3
 8001ffe:	429d      	cmp	r5, r3
 8002000:	419b      	sbcs	r3, r3
 8002002:	425b      	negs	r3, r3
 8002004:	191b      	adds	r3, r3, r4
 8002006:	18c9      	adds	r1, r1, r3
 8002008:	428c      	cmp	r4, r1
 800200a:	d23a      	bcs.n	8002082 <__aeabi_ddiv+0x502>
 800200c:	4288      	cmp	r0, r1
 800200e:	d863      	bhi.n	80020d8 <__aeabi_ddiv+0x558>
 8002010:	d060      	beq.n	80020d4 <__aeabi_ddiv+0x554>
 8002012:	4690      	mov	r8, r2
 8002014:	e752      	b.n	8001ebc <__aeabi_ddiv+0x33c>
 8002016:	42aa      	cmp	r2, r5
 8002018:	d900      	bls.n	800201c <__aeabi_ddiv+0x49c>
 800201a:	e6ea      	b.n	8001df2 <__aeabi_ddiv+0x272>
 800201c:	4643      	mov	r3, r8
 800201e:	07de      	lsls	r6, r3, #31
 8002020:	0858      	lsrs	r0, r3, #1
 8002022:	086b      	lsrs	r3, r5, #1
 8002024:	431e      	orrs	r6, r3
 8002026:	07ed      	lsls	r5, r5, #31
 8002028:	e6ea      	b.n	8001e00 <__aeabi_ddiv+0x280>
 800202a:	4648      	mov	r0, r9
 800202c:	f001 f908 	bl	8003240 <__clzsi2>
 8002030:	0001      	movs	r1, r0
 8002032:	0002      	movs	r2, r0
 8002034:	3115      	adds	r1, #21
 8002036:	3220      	adds	r2, #32
 8002038:	291c      	cmp	r1, #28
 800203a:	dc00      	bgt.n	800203e <__aeabi_ddiv+0x4be>
 800203c:	e61a      	b.n	8001c74 <__aeabi_ddiv+0xf4>
 800203e:	464b      	mov	r3, r9
 8002040:	3808      	subs	r0, #8
 8002042:	4083      	lsls	r3, r0
 8002044:	2500      	movs	r5, #0
 8002046:	4698      	mov	r8, r3
 8002048:	e620      	b.n	8001c8c <__aeabi_ddiv+0x10c>
 800204a:	f001 f8f9 	bl	8003240 <__clzsi2>
 800204e:	0003      	movs	r3, r0
 8002050:	001a      	movs	r2, r3
 8002052:	3215      	adds	r2, #21
 8002054:	3020      	adds	r0, #32
 8002056:	2a1c      	cmp	r2, #28
 8002058:	dc00      	bgt.n	800205c <__aeabi_ddiv+0x4dc>
 800205a:	e630      	b.n	8001cbe <__aeabi_ddiv+0x13e>
 800205c:	4654      	mov	r4, sl
 800205e:	3b08      	subs	r3, #8
 8002060:	2200      	movs	r2, #0
 8002062:	409c      	lsls	r4, r3
 8002064:	e635      	b.n	8001cd2 <__aeabi_ddiv+0x152>
 8002066:	230f      	movs	r3, #15
 8002068:	402b      	ands	r3, r5
 800206a:	2b04      	cmp	r3, #4
 800206c:	d100      	bne.n	8002070 <__aeabi_ddiv+0x4f0>
 800206e:	e652      	b.n	8001d16 <__aeabi_ddiv+0x196>
 8002070:	2305      	movs	r3, #5
 8002072:	425b      	negs	r3, r3
 8002074:	42ab      	cmp	r3, r5
 8002076:	419b      	sbcs	r3, r3
 8002078:	3504      	adds	r5, #4
 800207a:	425b      	negs	r3, r3
 800207c:	08ed      	lsrs	r5, r5, #3
 800207e:	4498      	add	r8, r3
 8002080:	e64a      	b.n	8001d18 <__aeabi_ddiv+0x198>
 8002082:	428c      	cmp	r4, r1
 8002084:	d1c5      	bne.n	8002012 <__aeabi_ddiv+0x492>
 8002086:	42af      	cmp	r7, r5
 8002088:	d9c0      	bls.n	800200c <__aeabi_ddiv+0x48c>
 800208a:	4690      	mov	r8, r2
 800208c:	e716      	b.n	8001ebc <__aeabi_ddiv+0x33c>
 800208e:	428a      	cmp	r2, r1
 8002090:	d800      	bhi.n	8002094 <__aeabi_ddiv+0x514>
 8002092:	e6ea      	b.n	8001e6a <__aeabi_ddiv+0x2ea>
 8002094:	1e83      	subs	r3, r0, #2
 8002096:	1909      	adds	r1, r1, r4
 8002098:	e6e7      	b.n	8001e6a <__aeabi_ddiv+0x2ea>
 800209a:	4a2a      	ldr	r2, [pc, #168]	; (8002144 <__aeabi_ddiv+0x5c4>)
 800209c:	0028      	movs	r0, r5
 800209e:	445a      	add	r2, fp
 80020a0:	4643      	mov	r3, r8
 80020a2:	4095      	lsls	r5, r2
 80020a4:	4093      	lsls	r3, r2
 80020a6:	40c8      	lsrs	r0, r1
 80020a8:	1e6a      	subs	r2, r5, #1
 80020aa:	4195      	sbcs	r5, r2
 80020ac:	4644      	mov	r4, r8
 80020ae:	4303      	orrs	r3, r0
 80020b0:	432b      	orrs	r3, r5
 80020b2:	40cc      	lsrs	r4, r1
 80020b4:	075a      	lsls	r2, r3, #29
 80020b6:	d092      	beq.n	8001fde <__aeabi_ddiv+0x45e>
 80020b8:	220f      	movs	r2, #15
 80020ba:	401a      	ands	r2, r3
 80020bc:	2a04      	cmp	r2, #4
 80020be:	d188      	bne.n	8001fd2 <__aeabi_ddiv+0x452>
 80020c0:	e78d      	b.n	8001fde <__aeabi_ddiv+0x45e>
 80020c2:	0035      	movs	r5, r6
 80020c4:	4281      	cmp	r1, r0
 80020c6:	d000      	beq.n	80020ca <__aeabi_ddiv+0x54a>
 80020c8:	e74b      	b.n	8001f62 <__aeabi_ddiv+0x3e2>
 80020ca:	9a00      	ldr	r2, [sp, #0]
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d000      	beq.n	80020d2 <__aeabi_ddiv+0x552>
 80020d0:	e747      	b.n	8001f62 <__aeabi_ddiv+0x3e2>
 80020d2:	e618      	b.n	8001d06 <__aeabi_ddiv+0x186>
 80020d4:	42ae      	cmp	r6, r5
 80020d6:	d99c      	bls.n	8002012 <__aeabi_ddiv+0x492>
 80020d8:	2302      	movs	r3, #2
 80020da:	425b      	negs	r3, r3
 80020dc:	469c      	mov	ip, r3
 80020de:	9b00      	ldr	r3, [sp, #0]
 80020e0:	44e0      	add	r8, ip
 80020e2:	469c      	mov	ip, r3
 80020e4:	4465      	add	r5, ip
 80020e6:	429d      	cmp	r5, r3
 80020e8:	419b      	sbcs	r3, r3
 80020ea:	425b      	negs	r3, r3
 80020ec:	191b      	adds	r3, r3, r4
 80020ee:	18c9      	adds	r1, r1, r3
 80020f0:	e6e4      	b.n	8001ebc <__aeabi_ddiv+0x33c>
 80020f2:	4a15      	ldr	r2, [pc, #84]	; (8002148 <__aeabi_ddiv+0x5c8>)
 80020f4:	445a      	add	r2, fp
 80020f6:	2a00      	cmp	r2, #0
 80020f8:	dc00      	bgt.n	80020fc <__aeabi_ddiv+0x57c>
 80020fa:	e744      	b.n	8001f86 <__aeabi_ddiv+0x406>
 80020fc:	2301      	movs	r3, #1
 80020fe:	2500      	movs	r5, #0
 8002100:	4498      	add	r8, r3
 8002102:	e609      	b.n	8001d18 <__aeabi_ddiv+0x198>
 8002104:	0765      	lsls	r5, r4, #29
 8002106:	0264      	lsls	r4, r4, #9
 8002108:	0b24      	lsrs	r4, r4, #12
 800210a:	08db      	lsrs	r3, r3, #3
 800210c:	431d      	orrs	r5, r3
 800210e:	2300      	movs	r3, #0
 8002110:	e590      	b.n	8001c34 <__aeabi_ddiv+0xb4>
 8002112:	9e00      	ldr	r6, [sp, #0]
 8002114:	3d02      	subs	r5, #2
 8002116:	0072      	lsls	r2, r6, #1
 8002118:	42b2      	cmp	r2, r6
 800211a:	41bf      	sbcs	r7, r7
 800211c:	427f      	negs	r7, r7
 800211e:	193c      	adds	r4, r7, r4
 8002120:	1909      	adds	r1, r1, r4
 8002122:	9200      	str	r2, [sp, #0]
 8002124:	e7ce      	b.n	80020c4 <__aeabi_ddiv+0x544>
 8002126:	2480      	movs	r4, #128	; 0x80
 8002128:	4643      	mov	r3, r8
 800212a:	0324      	lsls	r4, r4, #12
 800212c:	431c      	orrs	r4, r3
 800212e:	0324      	lsls	r4, r4, #12
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <__aeabi_ddiv+0x5cc>)
 8002132:	0b24      	lsrs	r4, r4, #12
 8002134:	e57e      	b.n	8001c34 <__aeabi_ddiv+0xb4>
 8002136:	9a00      	ldr	r2, [sp, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d3ea      	bcc.n	8002112 <__aeabi_ddiv+0x592>
 800213c:	0035      	movs	r5, r6
 800213e:	e7c4      	b.n	80020ca <__aeabi_ddiv+0x54a>
 8002140:	0000043e 	.word	0x0000043e
 8002144:	0000041e 	.word	0x0000041e
 8002148:	000003ff 	.word	0x000003ff
 800214c:	000007ff 	.word	0x000007ff

08002150 <__eqdf2>:
 8002150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002152:	464f      	mov	r7, r9
 8002154:	4646      	mov	r6, r8
 8002156:	46d6      	mov	lr, sl
 8002158:	4694      	mov	ip, r2
 800215a:	4691      	mov	r9, r2
 800215c:	031a      	lsls	r2, r3, #12
 800215e:	0b12      	lsrs	r2, r2, #12
 8002160:	4d18      	ldr	r5, [pc, #96]	; (80021c4 <__eqdf2+0x74>)
 8002162:	b5c0      	push	{r6, r7, lr}
 8002164:	004c      	lsls	r4, r1, #1
 8002166:	030f      	lsls	r7, r1, #12
 8002168:	4692      	mov	sl, r2
 800216a:	005a      	lsls	r2, r3, #1
 800216c:	0006      	movs	r6, r0
 800216e:	4680      	mov	r8, r0
 8002170:	0b3f      	lsrs	r7, r7, #12
 8002172:	2001      	movs	r0, #1
 8002174:	0d64      	lsrs	r4, r4, #21
 8002176:	0fc9      	lsrs	r1, r1, #31
 8002178:	0d52      	lsrs	r2, r2, #21
 800217a:	0fdb      	lsrs	r3, r3, #31
 800217c:	42ac      	cmp	r4, r5
 800217e:	d00a      	beq.n	8002196 <__eqdf2+0x46>
 8002180:	42aa      	cmp	r2, r5
 8002182:	d003      	beq.n	800218c <__eqdf2+0x3c>
 8002184:	4294      	cmp	r4, r2
 8002186:	d101      	bne.n	800218c <__eqdf2+0x3c>
 8002188:	4557      	cmp	r7, sl
 800218a:	d00d      	beq.n	80021a8 <__eqdf2+0x58>
 800218c:	bce0      	pop	{r5, r6, r7}
 800218e:	46ba      	mov	sl, r7
 8002190:	46b1      	mov	r9, r6
 8002192:	46a8      	mov	r8, r5
 8002194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002196:	003d      	movs	r5, r7
 8002198:	4335      	orrs	r5, r6
 800219a:	d1f7      	bne.n	800218c <__eqdf2+0x3c>
 800219c:	42a2      	cmp	r2, r4
 800219e:	d1f5      	bne.n	800218c <__eqdf2+0x3c>
 80021a0:	4652      	mov	r2, sl
 80021a2:	4665      	mov	r5, ip
 80021a4:	432a      	orrs	r2, r5
 80021a6:	d1f1      	bne.n	800218c <__eqdf2+0x3c>
 80021a8:	2001      	movs	r0, #1
 80021aa:	45c8      	cmp	r8, r9
 80021ac:	d1ee      	bne.n	800218c <__eqdf2+0x3c>
 80021ae:	4299      	cmp	r1, r3
 80021b0:	d006      	beq.n	80021c0 <__eqdf2+0x70>
 80021b2:	2c00      	cmp	r4, #0
 80021b4:	d1ea      	bne.n	800218c <__eqdf2+0x3c>
 80021b6:	433e      	orrs	r6, r7
 80021b8:	0030      	movs	r0, r6
 80021ba:	1e46      	subs	r6, r0, #1
 80021bc:	41b0      	sbcs	r0, r6
 80021be:	e7e5      	b.n	800218c <__eqdf2+0x3c>
 80021c0:	2000      	movs	r0, #0
 80021c2:	e7e3      	b.n	800218c <__eqdf2+0x3c>
 80021c4:	000007ff 	.word	0x000007ff

080021c8 <__gedf2>:
 80021c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ca:	464e      	mov	r6, r9
 80021cc:	4645      	mov	r5, r8
 80021ce:	4657      	mov	r7, sl
 80021d0:	46de      	mov	lr, fp
 80021d2:	0004      	movs	r4, r0
 80021d4:	0018      	movs	r0, r3
 80021d6:	b5e0      	push	{r5, r6, r7, lr}
 80021d8:	0016      	movs	r6, r2
 80021da:	031b      	lsls	r3, r3, #12
 80021dc:	0b1b      	lsrs	r3, r3, #12
 80021de:	4d32      	ldr	r5, [pc, #200]	; (80022a8 <__gedf2+0xe0>)
 80021e0:	030f      	lsls	r7, r1, #12
 80021e2:	004a      	lsls	r2, r1, #1
 80021e4:	4699      	mov	r9, r3
 80021e6:	0043      	lsls	r3, r0, #1
 80021e8:	46a4      	mov	ip, r4
 80021ea:	46b0      	mov	r8, r6
 80021ec:	0b3f      	lsrs	r7, r7, #12
 80021ee:	0d52      	lsrs	r2, r2, #21
 80021f0:	0fc9      	lsrs	r1, r1, #31
 80021f2:	0d5b      	lsrs	r3, r3, #21
 80021f4:	0fc0      	lsrs	r0, r0, #31
 80021f6:	42aa      	cmp	r2, r5
 80021f8:	d029      	beq.n	800224e <__gedf2+0x86>
 80021fa:	42ab      	cmp	r3, r5
 80021fc:	d018      	beq.n	8002230 <__gedf2+0x68>
 80021fe:	2a00      	cmp	r2, #0
 8002200:	d12a      	bne.n	8002258 <__gedf2+0x90>
 8002202:	433c      	orrs	r4, r7
 8002204:	46a3      	mov	fp, r4
 8002206:	4265      	negs	r5, r4
 8002208:	4165      	adcs	r5, r4
 800220a:	2b00      	cmp	r3, #0
 800220c:	d102      	bne.n	8002214 <__gedf2+0x4c>
 800220e:	464c      	mov	r4, r9
 8002210:	4326      	orrs	r6, r4
 8002212:	d027      	beq.n	8002264 <__gedf2+0x9c>
 8002214:	2d00      	cmp	r5, #0
 8002216:	d115      	bne.n	8002244 <__gedf2+0x7c>
 8002218:	4281      	cmp	r1, r0
 800221a:	d028      	beq.n	800226e <__gedf2+0xa6>
 800221c:	2002      	movs	r0, #2
 800221e:	3901      	subs	r1, #1
 8002220:	4008      	ands	r0, r1
 8002222:	3801      	subs	r0, #1
 8002224:	bcf0      	pop	{r4, r5, r6, r7}
 8002226:	46bb      	mov	fp, r7
 8002228:	46b2      	mov	sl, r6
 800222a:	46a9      	mov	r9, r5
 800222c:	46a0      	mov	r8, r4
 800222e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002230:	464d      	mov	r5, r9
 8002232:	432e      	orrs	r6, r5
 8002234:	d12f      	bne.n	8002296 <__gedf2+0xce>
 8002236:	2a00      	cmp	r2, #0
 8002238:	d1ee      	bne.n	8002218 <__gedf2+0x50>
 800223a:	433c      	orrs	r4, r7
 800223c:	4265      	negs	r5, r4
 800223e:	4165      	adcs	r5, r4
 8002240:	2d00      	cmp	r5, #0
 8002242:	d0e9      	beq.n	8002218 <__gedf2+0x50>
 8002244:	2800      	cmp	r0, #0
 8002246:	d1ed      	bne.n	8002224 <__gedf2+0x5c>
 8002248:	2001      	movs	r0, #1
 800224a:	4240      	negs	r0, r0
 800224c:	e7ea      	b.n	8002224 <__gedf2+0x5c>
 800224e:	003d      	movs	r5, r7
 8002250:	4325      	orrs	r5, r4
 8002252:	d120      	bne.n	8002296 <__gedf2+0xce>
 8002254:	4293      	cmp	r3, r2
 8002256:	d0eb      	beq.n	8002230 <__gedf2+0x68>
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1dd      	bne.n	8002218 <__gedf2+0x50>
 800225c:	464c      	mov	r4, r9
 800225e:	4326      	orrs	r6, r4
 8002260:	d1da      	bne.n	8002218 <__gedf2+0x50>
 8002262:	e7db      	b.n	800221c <__gedf2+0x54>
 8002264:	465b      	mov	r3, fp
 8002266:	2000      	movs	r0, #0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0db      	beq.n	8002224 <__gedf2+0x5c>
 800226c:	e7d6      	b.n	800221c <__gedf2+0x54>
 800226e:	429a      	cmp	r2, r3
 8002270:	dc0a      	bgt.n	8002288 <__gedf2+0xc0>
 8002272:	dbe7      	blt.n	8002244 <__gedf2+0x7c>
 8002274:	454f      	cmp	r7, r9
 8002276:	d8d1      	bhi.n	800221c <__gedf2+0x54>
 8002278:	d010      	beq.n	800229c <__gedf2+0xd4>
 800227a:	2000      	movs	r0, #0
 800227c:	454f      	cmp	r7, r9
 800227e:	d2d1      	bcs.n	8002224 <__gedf2+0x5c>
 8002280:	2900      	cmp	r1, #0
 8002282:	d0e1      	beq.n	8002248 <__gedf2+0x80>
 8002284:	0008      	movs	r0, r1
 8002286:	e7cd      	b.n	8002224 <__gedf2+0x5c>
 8002288:	4243      	negs	r3, r0
 800228a:	4158      	adcs	r0, r3
 800228c:	2302      	movs	r3, #2
 800228e:	4240      	negs	r0, r0
 8002290:	4018      	ands	r0, r3
 8002292:	3801      	subs	r0, #1
 8002294:	e7c6      	b.n	8002224 <__gedf2+0x5c>
 8002296:	2002      	movs	r0, #2
 8002298:	4240      	negs	r0, r0
 800229a:	e7c3      	b.n	8002224 <__gedf2+0x5c>
 800229c:	45c4      	cmp	ip, r8
 800229e:	d8bd      	bhi.n	800221c <__gedf2+0x54>
 80022a0:	2000      	movs	r0, #0
 80022a2:	45c4      	cmp	ip, r8
 80022a4:	d2be      	bcs.n	8002224 <__gedf2+0x5c>
 80022a6:	e7eb      	b.n	8002280 <__gedf2+0xb8>
 80022a8:	000007ff 	.word	0x000007ff

080022ac <__ledf2>:
 80022ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ae:	464e      	mov	r6, r9
 80022b0:	4645      	mov	r5, r8
 80022b2:	4657      	mov	r7, sl
 80022b4:	46de      	mov	lr, fp
 80022b6:	0004      	movs	r4, r0
 80022b8:	0018      	movs	r0, r3
 80022ba:	b5e0      	push	{r5, r6, r7, lr}
 80022bc:	0016      	movs	r6, r2
 80022be:	031b      	lsls	r3, r3, #12
 80022c0:	0b1b      	lsrs	r3, r3, #12
 80022c2:	4d31      	ldr	r5, [pc, #196]	; (8002388 <__ledf2+0xdc>)
 80022c4:	030f      	lsls	r7, r1, #12
 80022c6:	004a      	lsls	r2, r1, #1
 80022c8:	4699      	mov	r9, r3
 80022ca:	0043      	lsls	r3, r0, #1
 80022cc:	46a4      	mov	ip, r4
 80022ce:	46b0      	mov	r8, r6
 80022d0:	0b3f      	lsrs	r7, r7, #12
 80022d2:	0d52      	lsrs	r2, r2, #21
 80022d4:	0fc9      	lsrs	r1, r1, #31
 80022d6:	0d5b      	lsrs	r3, r3, #21
 80022d8:	0fc0      	lsrs	r0, r0, #31
 80022da:	42aa      	cmp	r2, r5
 80022dc:	d011      	beq.n	8002302 <__ledf2+0x56>
 80022de:	42ab      	cmp	r3, r5
 80022e0:	d014      	beq.n	800230c <__ledf2+0x60>
 80022e2:	2a00      	cmp	r2, #0
 80022e4:	d12f      	bne.n	8002346 <__ledf2+0x9a>
 80022e6:	433c      	orrs	r4, r7
 80022e8:	46a3      	mov	fp, r4
 80022ea:	4265      	negs	r5, r4
 80022ec:	4165      	adcs	r5, r4
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d114      	bne.n	800231c <__ledf2+0x70>
 80022f2:	464c      	mov	r4, r9
 80022f4:	4326      	orrs	r6, r4
 80022f6:	d111      	bne.n	800231c <__ledf2+0x70>
 80022f8:	465b      	mov	r3, fp
 80022fa:	2000      	movs	r0, #0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d017      	beq.n	8002330 <__ledf2+0x84>
 8002300:	e010      	b.n	8002324 <__ledf2+0x78>
 8002302:	003d      	movs	r5, r7
 8002304:	4325      	orrs	r5, r4
 8002306:	d112      	bne.n	800232e <__ledf2+0x82>
 8002308:	4293      	cmp	r3, r2
 800230a:	d11c      	bne.n	8002346 <__ledf2+0x9a>
 800230c:	464d      	mov	r5, r9
 800230e:	432e      	orrs	r6, r5
 8002310:	d10d      	bne.n	800232e <__ledf2+0x82>
 8002312:	2a00      	cmp	r2, #0
 8002314:	d104      	bne.n	8002320 <__ledf2+0x74>
 8002316:	433c      	orrs	r4, r7
 8002318:	4265      	negs	r5, r4
 800231a:	4165      	adcs	r5, r4
 800231c:	2d00      	cmp	r5, #0
 800231e:	d10d      	bne.n	800233c <__ledf2+0x90>
 8002320:	4281      	cmp	r1, r0
 8002322:	d016      	beq.n	8002352 <__ledf2+0xa6>
 8002324:	2002      	movs	r0, #2
 8002326:	3901      	subs	r1, #1
 8002328:	4008      	ands	r0, r1
 800232a:	3801      	subs	r0, #1
 800232c:	e000      	b.n	8002330 <__ledf2+0x84>
 800232e:	2002      	movs	r0, #2
 8002330:	bcf0      	pop	{r4, r5, r6, r7}
 8002332:	46bb      	mov	fp, r7
 8002334:	46b2      	mov	sl, r6
 8002336:	46a9      	mov	r9, r5
 8002338:	46a0      	mov	r8, r4
 800233a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800233c:	2800      	cmp	r0, #0
 800233e:	d1f7      	bne.n	8002330 <__ledf2+0x84>
 8002340:	2001      	movs	r0, #1
 8002342:	4240      	negs	r0, r0
 8002344:	e7f4      	b.n	8002330 <__ledf2+0x84>
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1ea      	bne.n	8002320 <__ledf2+0x74>
 800234a:	464c      	mov	r4, r9
 800234c:	4326      	orrs	r6, r4
 800234e:	d1e7      	bne.n	8002320 <__ledf2+0x74>
 8002350:	e7e8      	b.n	8002324 <__ledf2+0x78>
 8002352:	429a      	cmp	r2, r3
 8002354:	dd06      	ble.n	8002364 <__ledf2+0xb8>
 8002356:	4243      	negs	r3, r0
 8002358:	4158      	adcs	r0, r3
 800235a:	2302      	movs	r3, #2
 800235c:	4240      	negs	r0, r0
 800235e:	4018      	ands	r0, r3
 8002360:	3801      	subs	r0, #1
 8002362:	e7e5      	b.n	8002330 <__ledf2+0x84>
 8002364:	429a      	cmp	r2, r3
 8002366:	dbe9      	blt.n	800233c <__ledf2+0x90>
 8002368:	454f      	cmp	r7, r9
 800236a:	d8db      	bhi.n	8002324 <__ledf2+0x78>
 800236c:	d006      	beq.n	800237c <__ledf2+0xd0>
 800236e:	2000      	movs	r0, #0
 8002370:	454f      	cmp	r7, r9
 8002372:	d2dd      	bcs.n	8002330 <__ledf2+0x84>
 8002374:	2900      	cmp	r1, #0
 8002376:	d0e3      	beq.n	8002340 <__ledf2+0x94>
 8002378:	0008      	movs	r0, r1
 800237a:	e7d9      	b.n	8002330 <__ledf2+0x84>
 800237c:	45c4      	cmp	ip, r8
 800237e:	d8d1      	bhi.n	8002324 <__ledf2+0x78>
 8002380:	2000      	movs	r0, #0
 8002382:	45c4      	cmp	ip, r8
 8002384:	d2d4      	bcs.n	8002330 <__ledf2+0x84>
 8002386:	e7f5      	b.n	8002374 <__ledf2+0xc8>
 8002388:	000007ff 	.word	0x000007ff

0800238c <__aeabi_dmul>:
 800238c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800238e:	4657      	mov	r7, sl
 8002390:	464e      	mov	r6, r9
 8002392:	4645      	mov	r5, r8
 8002394:	46de      	mov	lr, fp
 8002396:	b5e0      	push	{r5, r6, r7, lr}
 8002398:	4698      	mov	r8, r3
 800239a:	030c      	lsls	r4, r1, #12
 800239c:	004b      	lsls	r3, r1, #1
 800239e:	0006      	movs	r6, r0
 80023a0:	4692      	mov	sl, r2
 80023a2:	b087      	sub	sp, #28
 80023a4:	0b24      	lsrs	r4, r4, #12
 80023a6:	0d5b      	lsrs	r3, r3, #21
 80023a8:	0fcf      	lsrs	r7, r1, #31
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d06c      	beq.n	8002488 <__aeabi_dmul+0xfc>
 80023ae:	4add      	ldr	r2, [pc, #884]	; (8002724 <__aeabi_dmul+0x398>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d100      	bne.n	80023b6 <__aeabi_dmul+0x2a>
 80023b4:	e086      	b.n	80024c4 <__aeabi_dmul+0x138>
 80023b6:	0f42      	lsrs	r2, r0, #29
 80023b8:	00e4      	lsls	r4, r4, #3
 80023ba:	4314      	orrs	r4, r2
 80023bc:	2280      	movs	r2, #128	; 0x80
 80023be:	0412      	lsls	r2, r2, #16
 80023c0:	4314      	orrs	r4, r2
 80023c2:	4ad9      	ldr	r2, [pc, #868]	; (8002728 <__aeabi_dmul+0x39c>)
 80023c4:	00c5      	lsls	r5, r0, #3
 80023c6:	4694      	mov	ip, r2
 80023c8:	4463      	add	r3, ip
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	2300      	movs	r3, #0
 80023ce:	4699      	mov	r9, r3
 80023d0:	469b      	mov	fp, r3
 80023d2:	4643      	mov	r3, r8
 80023d4:	4642      	mov	r2, r8
 80023d6:	031e      	lsls	r6, r3, #12
 80023d8:	0fd2      	lsrs	r2, r2, #31
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4650      	mov	r0, sl
 80023de:	4690      	mov	r8, r2
 80023e0:	0b36      	lsrs	r6, r6, #12
 80023e2:	0d5b      	lsrs	r3, r3, #21
 80023e4:	d100      	bne.n	80023e8 <__aeabi_dmul+0x5c>
 80023e6:	e078      	b.n	80024da <__aeabi_dmul+0x14e>
 80023e8:	4ace      	ldr	r2, [pc, #824]	; (8002724 <__aeabi_dmul+0x398>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d01d      	beq.n	800242a <__aeabi_dmul+0x9e>
 80023ee:	49ce      	ldr	r1, [pc, #824]	; (8002728 <__aeabi_dmul+0x39c>)
 80023f0:	0f42      	lsrs	r2, r0, #29
 80023f2:	468c      	mov	ip, r1
 80023f4:	9900      	ldr	r1, [sp, #0]
 80023f6:	4463      	add	r3, ip
 80023f8:	00f6      	lsls	r6, r6, #3
 80023fa:	468c      	mov	ip, r1
 80023fc:	4316      	orrs	r6, r2
 80023fe:	2280      	movs	r2, #128	; 0x80
 8002400:	449c      	add	ip, r3
 8002402:	0412      	lsls	r2, r2, #16
 8002404:	4663      	mov	r3, ip
 8002406:	4316      	orrs	r6, r2
 8002408:	00c2      	lsls	r2, r0, #3
 800240a:	2000      	movs	r0, #0
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	9900      	ldr	r1, [sp, #0]
 8002410:	4643      	mov	r3, r8
 8002412:	3101      	adds	r1, #1
 8002414:	468c      	mov	ip, r1
 8002416:	4649      	mov	r1, r9
 8002418:	407b      	eors	r3, r7
 800241a:	9301      	str	r3, [sp, #4]
 800241c:	290f      	cmp	r1, #15
 800241e:	d900      	bls.n	8002422 <__aeabi_dmul+0x96>
 8002420:	e07e      	b.n	8002520 <__aeabi_dmul+0x194>
 8002422:	4bc2      	ldr	r3, [pc, #776]	; (800272c <__aeabi_dmul+0x3a0>)
 8002424:	0089      	lsls	r1, r1, #2
 8002426:	5859      	ldr	r1, [r3, r1]
 8002428:	468f      	mov	pc, r1
 800242a:	4652      	mov	r2, sl
 800242c:	9b00      	ldr	r3, [sp, #0]
 800242e:	4332      	orrs	r2, r6
 8002430:	d000      	beq.n	8002434 <__aeabi_dmul+0xa8>
 8002432:	e156      	b.n	80026e2 <__aeabi_dmul+0x356>
 8002434:	49bb      	ldr	r1, [pc, #748]	; (8002724 <__aeabi_dmul+0x398>)
 8002436:	2600      	movs	r6, #0
 8002438:	468c      	mov	ip, r1
 800243a:	4463      	add	r3, ip
 800243c:	4649      	mov	r1, r9
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	2302      	movs	r3, #2
 8002442:	4319      	orrs	r1, r3
 8002444:	4689      	mov	r9, r1
 8002446:	2002      	movs	r0, #2
 8002448:	e7e1      	b.n	800240e <__aeabi_dmul+0x82>
 800244a:	4643      	mov	r3, r8
 800244c:	9301      	str	r3, [sp, #4]
 800244e:	0034      	movs	r4, r6
 8002450:	0015      	movs	r5, r2
 8002452:	4683      	mov	fp, r0
 8002454:	465b      	mov	r3, fp
 8002456:	2b02      	cmp	r3, #2
 8002458:	d05e      	beq.n	8002518 <__aeabi_dmul+0x18c>
 800245a:	2b03      	cmp	r3, #3
 800245c:	d100      	bne.n	8002460 <__aeabi_dmul+0xd4>
 800245e:	e1f3      	b.n	8002848 <__aeabi_dmul+0x4bc>
 8002460:	2b01      	cmp	r3, #1
 8002462:	d000      	beq.n	8002466 <__aeabi_dmul+0xda>
 8002464:	e118      	b.n	8002698 <__aeabi_dmul+0x30c>
 8002466:	2200      	movs	r2, #0
 8002468:	2400      	movs	r4, #0
 800246a:	2500      	movs	r5, #0
 800246c:	9b01      	ldr	r3, [sp, #4]
 800246e:	0512      	lsls	r2, r2, #20
 8002470:	4322      	orrs	r2, r4
 8002472:	07db      	lsls	r3, r3, #31
 8002474:	431a      	orrs	r2, r3
 8002476:	0028      	movs	r0, r5
 8002478:	0011      	movs	r1, r2
 800247a:	b007      	add	sp, #28
 800247c:	bcf0      	pop	{r4, r5, r6, r7}
 800247e:	46bb      	mov	fp, r7
 8002480:	46b2      	mov	sl, r6
 8002482:	46a9      	mov	r9, r5
 8002484:	46a0      	mov	r8, r4
 8002486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002488:	0025      	movs	r5, r4
 800248a:	4305      	orrs	r5, r0
 800248c:	d100      	bne.n	8002490 <__aeabi_dmul+0x104>
 800248e:	e141      	b.n	8002714 <__aeabi_dmul+0x388>
 8002490:	2c00      	cmp	r4, #0
 8002492:	d100      	bne.n	8002496 <__aeabi_dmul+0x10a>
 8002494:	e1ad      	b.n	80027f2 <__aeabi_dmul+0x466>
 8002496:	0020      	movs	r0, r4
 8002498:	f000 fed2 	bl	8003240 <__clzsi2>
 800249c:	0001      	movs	r1, r0
 800249e:	0002      	movs	r2, r0
 80024a0:	390b      	subs	r1, #11
 80024a2:	231d      	movs	r3, #29
 80024a4:	0010      	movs	r0, r2
 80024a6:	1a5b      	subs	r3, r3, r1
 80024a8:	0031      	movs	r1, r6
 80024aa:	0035      	movs	r5, r6
 80024ac:	3808      	subs	r0, #8
 80024ae:	4084      	lsls	r4, r0
 80024b0:	40d9      	lsrs	r1, r3
 80024b2:	4085      	lsls	r5, r0
 80024b4:	430c      	orrs	r4, r1
 80024b6:	489e      	ldr	r0, [pc, #632]	; (8002730 <__aeabi_dmul+0x3a4>)
 80024b8:	1a83      	subs	r3, r0, r2
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	2300      	movs	r3, #0
 80024be:	4699      	mov	r9, r3
 80024c0:	469b      	mov	fp, r3
 80024c2:	e786      	b.n	80023d2 <__aeabi_dmul+0x46>
 80024c4:	0005      	movs	r5, r0
 80024c6:	4325      	orrs	r5, r4
 80024c8:	d000      	beq.n	80024cc <__aeabi_dmul+0x140>
 80024ca:	e11c      	b.n	8002706 <__aeabi_dmul+0x37a>
 80024cc:	2208      	movs	r2, #8
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	2302      	movs	r3, #2
 80024d2:	2400      	movs	r4, #0
 80024d4:	4691      	mov	r9, r2
 80024d6:	469b      	mov	fp, r3
 80024d8:	e77b      	b.n	80023d2 <__aeabi_dmul+0x46>
 80024da:	4652      	mov	r2, sl
 80024dc:	4332      	orrs	r2, r6
 80024de:	d100      	bne.n	80024e2 <__aeabi_dmul+0x156>
 80024e0:	e10a      	b.n	80026f8 <__aeabi_dmul+0x36c>
 80024e2:	2e00      	cmp	r6, #0
 80024e4:	d100      	bne.n	80024e8 <__aeabi_dmul+0x15c>
 80024e6:	e176      	b.n	80027d6 <__aeabi_dmul+0x44a>
 80024e8:	0030      	movs	r0, r6
 80024ea:	f000 fea9 	bl	8003240 <__clzsi2>
 80024ee:	0002      	movs	r2, r0
 80024f0:	3a0b      	subs	r2, #11
 80024f2:	231d      	movs	r3, #29
 80024f4:	0001      	movs	r1, r0
 80024f6:	1a9b      	subs	r3, r3, r2
 80024f8:	4652      	mov	r2, sl
 80024fa:	3908      	subs	r1, #8
 80024fc:	40da      	lsrs	r2, r3
 80024fe:	408e      	lsls	r6, r1
 8002500:	4316      	orrs	r6, r2
 8002502:	4652      	mov	r2, sl
 8002504:	408a      	lsls	r2, r1
 8002506:	9b00      	ldr	r3, [sp, #0]
 8002508:	4989      	ldr	r1, [pc, #548]	; (8002730 <__aeabi_dmul+0x3a4>)
 800250a:	1a18      	subs	r0, r3, r0
 800250c:	0003      	movs	r3, r0
 800250e:	468c      	mov	ip, r1
 8002510:	4463      	add	r3, ip
 8002512:	2000      	movs	r0, #0
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	e77a      	b.n	800240e <__aeabi_dmul+0x82>
 8002518:	2400      	movs	r4, #0
 800251a:	2500      	movs	r5, #0
 800251c:	4a81      	ldr	r2, [pc, #516]	; (8002724 <__aeabi_dmul+0x398>)
 800251e:	e7a5      	b.n	800246c <__aeabi_dmul+0xe0>
 8002520:	0c2f      	lsrs	r7, r5, #16
 8002522:	042d      	lsls	r5, r5, #16
 8002524:	0c2d      	lsrs	r5, r5, #16
 8002526:	002b      	movs	r3, r5
 8002528:	0c11      	lsrs	r1, r2, #16
 800252a:	0412      	lsls	r2, r2, #16
 800252c:	0c12      	lsrs	r2, r2, #16
 800252e:	4353      	muls	r3, r2
 8002530:	4698      	mov	r8, r3
 8002532:	0013      	movs	r3, r2
 8002534:	0028      	movs	r0, r5
 8002536:	437b      	muls	r3, r7
 8002538:	4699      	mov	r9, r3
 800253a:	4348      	muls	r0, r1
 800253c:	4448      	add	r0, r9
 800253e:	4683      	mov	fp, r0
 8002540:	4640      	mov	r0, r8
 8002542:	000b      	movs	r3, r1
 8002544:	0c00      	lsrs	r0, r0, #16
 8002546:	4682      	mov	sl, r0
 8002548:	4658      	mov	r0, fp
 800254a:	437b      	muls	r3, r7
 800254c:	4450      	add	r0, sl
 800254e:	9302      	str	r3, [sp, #8]
 8002550:	4581      	cmp	r9, r0
 8002552:	d906      	bls.n	8002562 <__aeabi_dmul+0x1d6>
 8002554:	469a      	mov	sl, r3
 8002556:	2380      	movs	r3, #128	; 0x80
 8002558:	025b      	lsls	r3, r3, #9
 800255a:	4699      	mov	r9, r3
 800255c:	44ca      	add	sl, r9
 800255e:	4653      	mov	r3, sl
 8002560:	9302      	str	r3, [sp, #8]
 8002562:	0c03      	lsrs	r3, r0, #16
 8002564:	469b      	mov	fp, r3
 8002566:	4643      	mov	r3, r8
 8002568:	041b      	lsls	r3, r3, #16
 800256a:	0400      	lsls	r0, r0, #16
 800256c:	0c1b      	lsrs	r3, r3, #16
 800256e:	4698      	mov	r8, r3
 8002570:	0003      	movs	r3, r0
 8002572:	4443      	add	r3, r8
 8002574:	9304      	str	r3, [sp, #16]
 8002576:	0c33      	lsrs	r3, r6, #16
 8002578:	4699      	mov	r9, r3
 800257a:	002b      	movs	r3, r5
 800257c:	0436      	lsls	r6, r6, #16
 800257e:	0c36      	lsrs	r6, r6, #16
 8002580:	4373      	muls	r3, r6
 8002582:	4698      	mov	r8, r3
 8002584:	0033      	movs	r3, r6
 8002586:	437b      	muls	r3, r7
 8002588:	469a      	mov	sl, r3
 800258a:	464b      	mov	r3, r9
 800258c:	435d      	muls	r5, r3
 800258e:	435f      	muls	r7, r3
 8002590:	4643      	mov	r3, r8
 8002592:	4455      	add	r5, sl
 8002594:	0c18      	lsrs	r0, r3, #16
 8002596:	1940      	adds	r0, r0, r5
 8002598:	4582      	cmp	sl, r0
 800259a:	d903      	bls.n	80025a4 <__aeabi_dmul+0x218>
 800259c:	2380      	movs	r3, #128	; 0x80
 800259e:	025b      	lsls	r3, r3, #9
 80025a0:	469a      	mov	sl, r3
 80025a2:	4457      	add	r7, sl
 80025a4:	0c05      	lsrs	r5, r0, #16
 80025a6:	19eb      	adds	r3, r5, r7
 80025a8:	9305      	str	r3, [sp, #20]
 80025aa:	4643      	mov	r3, r8
 80025ac:	041d      	lsls	r5, r3, #16
 80025ae:	0c2d      	lsrs	r5, r5, #16
 80025b0:	0400      	lsls	r0, r0, #16
 80025b2:	1940      	adds	r0, r0, r5
 80025b4:	0c25      	lsrs	r5, r4, #16
 80025b6:	0424      	lsls	r4, r4, #16
 80025b8:	0c24      	lsrs	r4, r4, #16
 80025ba:	0027      	movs	r7, r4
 80025bc:	4357      	muls	r7, r2
 80025be:	436a      	muls	r2, r5
 80025c0:	4690      	mov	r8, r2
 80025c2:	002a      	movs	r2, r5
 80025c4:	0c3b      	lsrs	r3, r7, #16
 80025c6:	469a      	mov	sl, r3
 80025c8:	434a      	muls	r2, r1
 80025ca:	4361      	muls	r1, r4
 80025cc:	4441      	add	r1, r8
 80025ce:	4451      	add	r1, sl
 80025d0:	4483      	add	fp, r0
 80025d2:	4588      	cmp	r8, r1
 80025d4:	d903      	bls.n	80025de <__aeabi_dmul+0x252>
 80025d6:	2380      	movs	r3, #128	; 0x80
 80025d8:	025b      	lsls	r3, r3, #9
 80025da:	4698      	mov	r8, r3
 80025dc:	4442      	add	r2, r8
 80025de:	043f      	lsls	r7, r7, #16
 80025e0:	0c0b      	lsrs	r3, r1, #16
 80025e2:	0c3f      	lsrs	r7, r7, #16
 80025e4:	0409      	lsls	r1, r1, #16
 80025e6:	19c9      	adds	r1, r1, r7
 80025e8:	0027      	movs	r7, r4
 80025ea:	4698      	mov	r8, r3
 80025ec:	464b      	mov	r3, r9
 80025ee:	4377      	muls	r7, r6
 80025f0:	435c      	muls	r4, r3
 80025f2:	436e      	muls	r6, r5
 80025f4:	435d      	muls	r5, r3
 80025f6:	0c3b      	lsrs	r3, r7, #16
 80025f8:	4699      	mov	r9, r3
 80025fa:	19a4      	adds	r4, r4, r6
 80025fc:	444c      	add	r4, r9
 80025fe:	4442      	add	r2, r8
 8002600:	9503      	str	r5, [sp, #12]
 8002602:	42a6      	cmp	r6, r4
 8002604:	d904      	bls.n	8002610 <__aeabi_dmul+0x284>
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	025b      	lsls	r3, r3, #9
 800260a:	4698      	mov	r8, r3
 800260c:	4445      	add	r5, r8
 800260e:	9503      	str	r5, [sp, #12]
 8002610:	9b02      	ldr	r3, [sp, #8]
 8002612:	043f      	lsls	r7, r7, #16
 8002614:	445b      	add	r3, fp
 8002616:	001e      	movs	r6, r3
 8002618:	4283      	cmp	r3, r0
 800261a:	4180      	sbcs	r0, r0
 800261c:	0423      	lsls	r3, r4, #16
 800261e:	4698      	mov	r8, r3
 8002620:	9b05      	ldr	r3, [sp, #20]
 8002622:	0c3f      	lsrs	r7, r7, #16
 8002624:	4447      	add	r7, r8
 8002626:	4698      	mov	r8, r3
 8002628:	1876      	adds	r6, r6, r1
 800262a:	428e      	cmp	r6, r1
 800262c:	4189      	sbcs	r1, r1
 800262e:	4447      	add	r7, r8
 8002630:	4240      	negs	r0, r0
 8002632:	183d      	adds	r5, r7, r0
 8002634:	46a8      	mov	r8, r5
 8002636:	4693      	mov	fp, r2
 8002638:	4249      	negs	r1, r1
 800263a:	468a      	mov	sl, r1
 800263c:	44c3      	add	fp, r8
 800263e:	429f      	cmp	r7, r3
 8002640:	41bf      	sbcs	r7, r7
 8002642:	4580      	cmp	r8, r0
 8002644:	4180      	sbcs	r0, r0
 8002646:	9b03      	ldr	r3, [sp, #12]
 8002648:	44da      	add	sl, fp
 800264a:	4698      	mov	r8, r3
 800264c:	4653      	mov	r3, sl
 800264e:	4240      	negs	r0, r0
 8002650:	427f      	negs	r7, r7
 8002652:	4307      	orrs	r7, r0
 8002654:	0c24      	lsrs	r4, r4, #16
 8002656:	4593      	cmp	fp, r2
 8002658:	4192      	sbcs	r2, r2
 800265a:	458a      	cmp	sl, r1
 800265c:	4189      	sbcs	r1, r1
 800265e:	193f      	adds	r7, r7, r4
 8002660:	0ddc      	lsrs	r4, r3, #23
 8002662:	9b04      	ldr	r3, [sp, #16]
 8002664:	0275      	lsls	r5, r6, #9
 8002666:	431d      	orrs	r5, r3
 8002668:	1e68      	subs	r0, r5, #1
 800266a:	4185      	sbcs	r5, r0
 800266c:	4653      	mov	r3, sl
 800266e:	4252      	negs	r2, r2
 8002670:	4249      	negs	r1, r1
 8002672:	430a      	orrs	r2, r1
 8002674:	18bf      	adds	r7, r7, r2
 8002676:	4447      	add	r7, r8
 8002678:	0df6      	lsrs	r6, r6, #23
 800267a:	027f      	lsls	r7, r7, #9
 800267c:	4335      	orrs	r5, r6
 800267e:	025a      	lsls	r2, r3, #9
 8002680:	433c      	orrs	r4, r7
 8002682:	4315      	orrs	r5, r2
 8002684:	01fb      	lsls	r3, r7, #7
 8002686:	d400      	bmi.n	800268a <__aeabi_dmul+0x2fe>
 8002688:	e0c1      	b.n	800280e <__aeabi_dmul+0x482>
 800268a:	2101      	movs	r1, #1
 800268c:	086a      	lsrs	r2, r5, #1
 800268e:	400d      	ands	r5, r1
 8002690:	4315      	orrs	r5, r2
 8002692:	07e2      	lsls	r2, r4, #31
 8002694:	4315      	orrs	r5, r2
 8002696:	0864      	lsrs	r4, r4, #1
 8002698:	4926      	ldr	r1, [pc, #152]	; (8002734 <__aeabi_dmul+0x3a8>)
 800269a:	4461      	add	r1, ip
 800269c:	2900      	cmp	r1, #0
 800269e:	dd56      	ble.n	800274e <__aeabi_dmul+0x3c2>
 80026a0:	076b      	lsls	r3, r5, #29
 80026a2:	d009      	beq.n	80026b8 <__aeabi_dmul+0x32c>
 80026a4:	220f      	movs	r2, #15
 80026a6:	402a      	ands	r2, r5
 80026a8:	2a04      	cmp	r2, #4
 80026aa:	d005      	beq.n	80026b8 <__aeabi_dmul+0x32c>
 80026ac:	1d2a      	adds	r2, r5, #4
 80026ae:	42aa      	cmp	r2, r5
 80026b0:	41ad      	sbcs	r5, r5
 80026b2:	426d      	negs	r5, r5
 80026b4:	1964      	adds	r4, r4, r5
 80026b6:	0015      	movs	r5, r2
 80026b8:	01e3      	lsls	r3, r4, #7
 80026ba:	d504      	bpl.n	80026c6 <__aeabi_dmul+0x33a>
 80026bc:	2180      	movs	r1, #128	; 0x80
 80026be:	4a1e      	ldr	r2, [pc, #120]	; (8002738 <__aeabi_dmul+0x3ac>)
 80026c0:	00c9      	lsls	r1, r1, #3
 80026c2:	4014      	ands	r4, r2
 80026c4:	4461      	add	r1, ip
 80026c6:	4a1d      	ldr	r2, [pc, #116]	; (800273c <__aeabi_dmul+0x3b0>)
 80026c8:	4291      	cmp	r1, r2
 80026ca:	dd00      	ble.n	80026ce <__aeabi_dmul+0x342>
 80026cc:	e724      	b.n	8002518 <__aeabi_dmul+0x18c>
 80026ce:	0762      	lsls	r2, r4, #29
 80026d0:	08ed      	lsrs	r5, r5, #3
 80026d2:	0264      	lsls	r4, r4, #9
 80026d4:	0549      	lsls	r1, r1, #21
 80026d6:	4315      	orrs	r5, r2
 80026d8:	0b24      	lsrs	r4, r4, #12
 80026da:	0d4a      	lsrs	r2, r1, #21
 80026dc:	e6c6      	b.n	800246c <__aeabi_dmul+0xe0>
 80026de:	9701      	str	r7, [sp, #4]
 80026e0:	e6b8      	b.n	8002454 <__aeabi_dmul+0xc8>
 80026e2:	4a10      	ldr	r2, [pc, #64]	; (8002724 <__aeabi_dmul+0x398>)
 80026e4:	2003      	movs	r0, #3
 80026e6:	4694      	mov	ip, r2
 80026e8:	4463      	add	r3, ip
 80026ea:	464a      	mov	r2, r9
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	2303      	movs	r3, #3
 80026f0:	431a      	orrs	r2, r3
 80026f2:	4691      	mov	r9, r2
 80026f4:	4652      	mov	r2, sl
 80026f6:	e68a      	b.n	800240e <__aeabi_dmul+0x82>
 80026f8:	4649      	mov	r1, r9
 80026fa:	2301      	movs	r3, #1
 80026fc:	4319      	orrs	r1, r3
 80026fe:	4689      	mov	r9, r1
 8002700:	2600      	movs	r6, #0
 8002702:	2001      	movs	r0, #1
 8002704:	e683      	b.n	800240e <__aeabi_dmul+0x82>
 8002706:	220c      	movs	r2, #12
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	2303      	movs	r3, #3
 800270c:	0005      	movs	r5, r0
 800270e:	4691      	mov	r9, r2
 8002710:	469b      	mov	fp, r3
 8002712:	e65e      	b.n	80023d2 <__aeabi_dmul+0x46>
 8002714:	2304      	movs	r3, #4
 8002716:	4699      	mov	r9, r3
 8002718:	2300      	movs	r3, #0
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	3301      	adds	r3, #1
 800271e:	2400      	movs	r4, #0
 8002720:	469b      	mov	fp, r3
 8002722:	e656      	b.n	80023d2 <__aeabi_dmul+0x46>
 8002724:	000007ff 	.word	0x000007ff
 8002728:	fffffc01 	.word	0xfffffc01
 800272c:	08010d78 	.word	0x08010d78
 8002730:	fffffc0d 	.word	0xfffffc0d
 8002734:	000003ff 	.word	0x000003ff
 8002738:	feffffff 	.word	0xfeffffff
 800273c:	000007fe 	.word	0x000007fe
 8002740:	2300      	movs	r3, #0
 8002742:	2480      	movs	r4, #128	; 0x80
 8002744:	2500      	movs	r5, #0
 8002746:	4a44      	ldr	r2, [pc, #272]	; (8002858 <__aeabi_dmul+0x4cc>)
 8002748:	9301      	str	r3, [sp, #4]
 800274a:	0324      	lsls	r4, r4, #12
 800274c:	e68e      	b.n	800246c <__aeabi_dmul+0xe0>
 800274e:	2001      	movs	r0, #1
 8002750:	1a40      	subs	r0, r0, r1
 8002752:	2838      	cmp	r0, #56	; 0x38
 8002754:	dd00      	ble.n	8002758 <__aeabi_dmul+0x3cc>
 8002756:	e686      	b.n	8002466 <__aeabi_dmul+0xda>
 8002758:	281f      	cmp	r0, #31
 800275a:	dd5b      	ble.n	8002814 <__aeabi_dmul+0x488>
 800275c:	221f      	movs	r2, #31
 800275e:	0023      	movs	r3, r4
 8002760:	4252      	negs	r2, r2
 8002762:	1a51      	subs	r1, r2, r1
 8002764:	40cb      	lsrs	r3, r1
 8002766:	0019      	movs	r1, r3
 8002768:	2820      	cmp	r0, #32
 800276a:	d003      	beq.n	8002774 <__aeabi_dmul+0x3e8>
 800276c:	4a3b      	ldr	r2, [pc, #236]	; (800285c <__aeabi_dmul+0x4d0>)
 800276e:	4462      	add	r2, ip
 8002770:	4094      	lsls	r4, r2
 8002772:	4325      	orrs	r5, r4
 8002774:	1e6a      	subs	r2, r5, #1
 8002776:	4195      	sbcs	r5, r2
 8002778:	002a      	movs	r2, r5
 800277a:	430a      	orrs	r2, r1
 800277c:	2107      	movs	r1, #7
 800277e:	000d      	movs	r5, r1
 8002780:	2400      	movs	r4, #0
 8002782:	4015      	ands	r5, r2
 8002784:	4211      	tst	r1, r2
 8002786:	d05b      	beq.n	8002840 <__aeabi_dmul+0x4b4>
 8002788:	210f      	movs	r1, #15
 800278a:	2400      	movs	r4, #0
 800278c:	4011      	ands	r1, r2
 800278e:	2904      	cmp	r1, #4
 8002790:	d053      	beq.n	800283a <__aeabi_dmul+0x4ae>
 8002792:	1d11      	adds	r1, r2, #4
 8002794:	4291      	cmp	r1, r2
 8002796:	4192      	sbcs	r2, r2
 8002798:	4252      	negs	r2, r2
 800279a:	18a4      	adds	r4, r4, r2
 800279c:	000a      	movs	r2, r1
 800279e:	0223      	lsls	r3, r4, #8
 80027a0:	d54b      	bpl.n	800283a <__aeabi_dmul+0x4ae>
 80027a2:	2201      	movs	r2, #1
 80027a4:	2400      	movs	r4, #0
 80027a6:	2500      	movs	r5, #0
 80027a8:	e660      	b.n	800246c <__aeabi_dmul+0xe0>
 80027aa:	2380      	movs	r3, #128	; 0x80
 80027ac:	031b      	lsls	r3, r3, #12
 80027ae:	421c      	tst	r4, r3
 80027b0:	d009      	beq.n	80027c6 <__aeabi_dmul+0x43a>
 80027b2:	421e      	tst	r6, r3
 80027b4:	d107      	bne.n	80027c6 <__aeabi_dmul+0x43a>
 80027b6:	4333      	orrs	r3, r6
 80027b8:	031c      	lsls	r4, r3, #12
 80027ba:	4643      	mov	r3, r8
 80027bc:	0015      	movs	r5, r2
 80027be:	0b24      	lsrs	r4, r4, #12
 80027c0:	4a25      	ldr	r2, [pc, #148]	; (8002858 <__aeabi_dmul+0x4cc>)
 80027c2:	9301      	str	r3, [sp, #4]
 80027c4:	e652      	b.n	800246c <__aeabi_dmul+0xe0>
 80027c6:	2280      	movs	r2, #128	; 0x80
 80027c8:	0312      	lsls	r2, r2, #12
 80027ca:	4314      	orrs	r4, r2
 80027cc:	0324      	lsls	r4, r4, #12
 80027ce:	4a22      	ldr	r2, [pc, #136]	; (8002858 <__aeabi_dmul+0x4cc>)
 80027d0:	0b24      	lsrs	r4, r4, #12
 80027d2:	9701      	str	r7, [sp, #4]
 80027d4:	e64a      	b.n	800246c <__aeabi_dmul+0xe0>
 80027d6:	f000 fd33 	bl	8003240 <__clzsi2>
 80027da:	0003      	movs	r3, r0
 80027dc:	001a      	movs	r2, r3
 80027de:	3215      	adds	r2, #21
 80027e0:	3020      	adds	r0, #32
 80027e2:	2a1c      	cmp	r2, #28
 80027e4:	dc00      	bgt.n	80027e8 <__aeabi_dmul+0x45c>
 80027e6:	e684      	b.n	80024f2 <__aeabi_dmul+0x166>
 80027e8:	4656      	mov	r6, sl
 80027ea:	3b08      	subs	r3, #8
 80027ec:	2200      	movs	r2, #0
 80027ee:	409e      	lsls	r6, r3
 80027f0:	e689      	b.n	8002506 <__aeabi_dmul+0x17a>
 80027f2:	f000 fd25 	bl	8003240 <__clzsi2>
 80027f6:	0001      	movs	r1, r0
 80027f8:	0002      	movs	r2, r0
 80027fa:	3115      	adds	r1, #21
 80027fc:	3220      	adds	r2, #32
 80027fe:	291c      	cmp	r1, #28
 8002800:	dc00      	bgt.n	8002804 <__aeabi_dmul+0x478>
 8002802:	e64e      	b.n	80024a2 <__aeabi_dmul+0x116>
 8002804:	0034      	movs	r4, r6
 8002806:	3808      	subs	r0, #8
 8002808:	2500      	movs	r5, #0
 800280a:	4084      	lsls	r4, r0
 800280c:	e653      	b.n	80024b6 <__aeabi_dmul+0x12a>
 800280e:	9b00      	ldr	r3, [sp, #0]
 8002810:	469c      	mov	ip, r3
 8002812:	e741      	b.n	8002698 <__aeabi_dmul+0x30c>
 8002814:	4912      	ldr	r1, [pc, #72]	; (8002860 <__aeabi_dmul+0x4d4>)
 8002816:	0022      	movs	r2, r4
 8002818:	4461      	add	r1, ip
 800281a:	002e      	movs	r6, r5
 800281c:	408d      	lsls	r5, r1
 800281e:	408a      	lsls	r2, r1
 8002820:	40c6      	lsrs	r6, r0
 8002822:	1e69      	subs	r1, r5, #1
 8002824:	418d      	sbcs	r5, r1
 8002826:	4332      	orrs	r2, r6
 8002828:	432a      	orrs	r2, r5
 800282a:	40c4      	lsrs	r4, r0
 800282c:	0753      	lsls	r3, r2, #29
 800282e:	d0b6      	beq.n	800279e <__aeabi_dmul+0x412>
 8002830:	210f      	movs	r1, #15
 8002832:	4011      	ands	r1, r2
 8002834:	2904      	cmp	r1, #4
 8002836:	d1ac      	bne.n	8002792 <__aeabi_dmul+0x406>
 8002838:	e7b1      	b.n	800279e <__aeabi_dmul+0x412>
 800283a:	0765      	lsls	r5, r4, #29
 800283c:	0264      	lsls	r4, r4, #9
 800283e:	0b24      	lsrs	r4, r4, #12
 8002840:	08d2      	lsrs	r2, r2, #3
 8002842:	4315      	orrs	r5, r2
 8002844:	2200      	movs	r2, #0
 8002846:	e611      	b.n	800246c <__aeabi_dmul+0xe0>
 8002848:	2280      	movs	r2, #128	; 0x80
 800284a:	0312      	lsls	r2, r2, #12
 800284c:	4314      	orrs	r4, r2
 800284e:	0324      	lsls	r4, r4, #12
 8002850:	4a01      	ldr	r2, [pc, #4]	; (8002858 <__aeabi_dmul+0x4cc>)
 8002852:	0b24      	lsrs	r4, r4, #12
 8002854:	e60a      	b.n	800246c <__aeabi_dmul+0xe0>
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	000007ff 	.word	0x000007ff
 800285c:	0000043e 	.word	0x0000043e
 8002860:	0000041e 	.word	0x0000041e

08002864 <__aeabi_dsub>:
 8002864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002866:	4657      	mov	r7, sl
 8002868:	464e      	mov	r6, r9
 800286a:	4645      	mov	r5, r8
 800286c:	46de      	mov	lr, fp
 800286e:	0004      	movs	r4, r0
 8002870:	b5e0      	push	{r5, r6, r7, lr}
 8002872:	001f      	movs	r7, r3
 8002874:	0010      	movs	r0, r2
 8002876:	030b      	lsls	r3, r1, #12
 8002878:	0f62      	lsrs	r2, r4, #29
 800287a:	004e      	lsls	r6, r1, #1
 800287c:	0fcd      	lsrs	r5, r1, #31
 800287e:	0a5b      	lsrs	r3, r3, #9
 8002880:	0339      	lsls	r1, r7, #12
 8002882:	4313      	orrs	r3, r2
 8002884:	0a49      	lsrs	r1, r1, #9
 8002886:	00e2      	lsls	r2, r4, #3
 8002888:	0f44      	lsrs	r4, r0, #29
 800288a:	4321      	orrs	r1, r4
 800288c:	4cc2      	ldr	r4, [pc, #776]	; (8002b98 <__aeabi_dsub+0x334>)
 800288e:	4691      	mov	r9, r2
 8002890:	4692      	mov	sl, r2
 8002892:	00c0      	lsls	r0, r0, #3
 8002894:	007a      	lsls	r2, r7, #1
 8002896:	4680      	mov	r8, r0
 8002898:	0d76      	lsrs	r6, r6, #21
 800289a:	0d52      	lsrs	r2, r2, #21
 800289c:	0fff      	lsrs	r7, r7, #31
 800289e:	42a2      	cmp	r2, r4
 80028a0:	d100      	bne.n	80028a4 <__aeabi_dsub+0x40>
 80028a2:	e0b4      	b.n	8002a0e <__aeabi_dsub+0x1aa>
 80028a4:	2401      	movs	r4, #1
 80028a6:	4067      	eors	r7, r4
 80028a8:	46bb      	mov	fp, r7
 80028aa:	42bd      	cmp	r5, r7
 80028ac:	d100      	bne.n	80028b0 <__aeabi_dsub+0x4c>
 80028ae:	e088      	b.n	80029c2 <__aeabi_dsub+0x15e>
 80028b0:	1ab4      	subs	r4, r6, r2
 80028b2:	46a4      	mov	ip, r4
 80028b4:	2c00      	cmp	r4, #0
 80028b6:	dc00      	bgt.n	80028ba <__aeabi_dsub+0x56>
 80028b8:	e0b2      	b.n	8002a20 <__aeabi_dsub+0x1bc>
 80028ba:	2a00      	cmp	r2, #0
 80028bc:	d100      	bne.n	80028c0 <__aeabi_dsub+0x5c>
 80028be:	e0c5      	b.n	8002a4c <__aeabi_dsub+0x1e8>
 80028c0:	4ab5      	ldr	r2, [pc, #724]	; (8002b98 <__aeabi_dsub+0x334>)
 80028c2:	4296      	cmp	r6, r2
 80028c4:	d100      	bne.n	80028c8 <__aeabi_dsub+0x64>
 80028c6:	e28b      	b.n	8002de0 <__aeabi_dsub+0x57c>
 80028c8:	2280      	movs	r2, #128	; 0x80
 80028ca:	0412      	lsls	r2, r2, #16
 80028cc:	4311      	orrs	r1, r2
 80028ce:	4662      	mov	r2, ip
 80028d0:	2a38      	cmp	r2, #56	; 0x38
 80028d2:	dd00      	ble.n	80028d6 <__aeabi_dsub+0x72>
 80028d4:	e1a1      	b.n	8002c1a <__aeabi_dsub+0x3b6>
 80028d6:	2a1f      	cmp	r2, #31
 80028d8:	dd00      	ble.n	80028dc <__aeabi_dsub+0x78>
 80028da:	e216      	b.n	8002d0a <__aeabi_dsub+0x4a6>
 80028dc:	2720      	movs	r7, #32
 80028de:	000c      	movs	r4, r1
 80028e0:	1abf      	subs	r7, r7, r2
 80028e2:	40bc      	lsls	r4, r7
 80028e4:	0002      	movs	r2, r0
 80028e6:	46a0      	mov	r8, r4
 80028e8:	4664      	mov	r4, ip
 80028ea:	40b8      	lsls	r0, r7
 80028ec:	40e2      	lsrs	r2, r4
 80028ee:	4644      	mov	r4, r8
 80028f0:	4314      	orrs	r4, r2
 80028f2:	0002      	movs	r2, r0
 80028f4:	1e50      	subs	r0, r2, #1
 80028f6:	4182      	sbcs	r2, r0
 80028f8:	4660      	mov	r0, ip
 80028fa:	40c1      	lsrs	r1, r0
 80028fc:	4322      	orrs	r2, r4
 80028fe:	1a5b      	subs	r3, r3, r1
 8002900:	4649      	mov	r1, r9
 8002902:	1a8c      	subs	r4, r1, r2
 8002904:	45a1      	cmp	r9, r4
 8002906:	4192      	sbcs	r2, r2
 8002908:	4252      	negs	r2, r2
 800290a:	1a9b      	subs	r3, r3, r2
 800290c:	4698      	mov	r8, r3
 800290e:	4643      	mov	r3, r8
 8002910:	021b      	lsls	r3, r3, #8
 8002912:	d400      	bmi.n	8002916 <__aeabi_dsub+0xb2>
 8002914:	e117      	b.n	8002b46 <__aeabi_dsub+0x2e2>
 8002916:	4643      	mov	r3, r8
 8002918:	025b      	lsls	r3, r3, #9
 800291a:	0a5b      	lsrs	r3, r3, #9
 800291c:	4698      	mov	r8, r3
 800291e:	4643      	mov	r3, r8
 8002920:	2b00      	cmp	r3, #0
 8002922:	d100      	bne.n	8002926 <__aeabi_dsub+0xc2>
 8002924:	e16c      	b.n	8002c00 <__aeabi_dsub+0x39c>
 8002926:	4640      	mov	r0, r8
 8002928:	f000 fc8a 	bl	8003240 <__clzsi2>
 800292c:	0002      	movs	r2, r0
 800292e:	3a08      	subs	r2, #8
 8002930:	2120      	movs	r1, #32
 8002932:	0020      	movs	r0, r4
 8002934:	4643      	mov	r3, r8
 8002936:	1a89      	subs	r1, r1, r2
 8002938:	4093      	lsls	r3, r2
 800293a:	40c8      	lsrs	r0, r1
 800293c:	4094      	lsls	r4, r2
 800293e:	4303      	orrs	r3, r0
 8002940:	4296      	cmp	r6, r2
 8002942:	dd00      	ble.n	8002946 <__aeabi_dsub+0xe2>
 8002944:	e157      	b.n	8002bf6 <__aeabi_dsub+0x392>
 8002946:	1b96      	subs	r6, r2, r6
 8002948:	1c71      	adds	r1, r6, #1
 800294a:	291f      	cmp	r1, #31
 800294c:	dd00      	ble.n	8002950 <__aeabi_dsub+0xec>
 800294e:	e1cb      	b.n	8002ce8 <__aeabi_dsub+0x484>
 8002950:	2220      	movs	r2, #32
 8002952:	0018      	movs	r0, r3
 8002954:	0026      	movs	r6, r4
 8002956:	1a52      	subs	r2, r2, r1
 8002958:	4094      	lsls	r4, r2
 800295a:	4090      	lsls	r0, r2
 800295c:	40ce      	lsrs	r6, r1
 800295e:	40cb      	lsrs	r3, r1
 8002960:	1e62      	subs	r2, r4, #1
 8002962:	4194      	sbcs	r4, r2
 8002964:	4330      	orrs	r0, r6
 8002966:	4698      	mov	r8, r3
 8002968:	2600      	movs	r6, #0
 800296a:	4304      	orrs	r4, r0
 800296c:	0763      	lsls	r3, r4, #29
 800296e:	d009      	beq.n	8002984 <__aeabi_dsub+0x120>
 8002970:	230f      	movs	r3, #15
 8002972:	4023      	ands	r3, r4
 8002974:	2b04      	cmp	r3, #4
 8002976:	d005      	beq.n	8002984 <__aeabi_dsub+0x120>
 8002978:	1d23      	adds	r3, r4, #4
 800297a:	42a3      	cmp	r3, r4
 800297c:	41a4      	sbcs	r4, r4
 800297e:	4264      	negs	r4, r4
 8002980:	44a0      	add	r8, r4
 8002982:	001c      	movs	r4, r3
 8002984:	4643      	mov	r3, r8
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	d400      	bmi.n	800298c <__aeabi_dsub+0x128>
 800298a:	e0df      	b.n	8002b4c <__aeabi_dsub+0x2e8>
 800298c:	4b82      	ldr	r3, [pc, #520]	; (8002b98 <__aeabi_dsub+0x334>)
 800298e:	3601      	adds	r6, #1
 8002990:	429e      	cmp	r6, r3
 8002992:	d100      	bne.n	8002996 <__aeabi_dsub+0x132>
 8002994:	e0fb      	b.n	8002b8e <__aeabi_dsub+0x32a>
 8002996:	4642      	mov	r2, r8
 8002998:	4b80      	ldr	r3, [pc, #512]	; (8002b9c <__aeabi_dsub+0x338>)
 800299a:	08e4      	lsrs	r4, r4, #3
 800299c:	401a      	ands	r2, r3
 800299e:	0013      	movs	r3, r2
 80029a0:	0571      	lsls	r1, r6, #21
 80029a2:	0752      	lsls	r2, r2, #29
 80029a4:	025b      	lsls	r3, r3, #9
 80029a6:	4322      	orrs	r2, r4
 80029a8:	0b1b      	lsrs	r3, r3, #12
 80029aa:	0d49      	lsrs	r1, r1, #21
 80029ac:	0509      	lsls	r1, r1, #20
 80029ae:	07ed      	lsls	r5, r5, #31
 80029b0:	4319      	orrs	r1, r3
 80029b2:	4329      	orrs	r1, r5
 80029b4:	0010      	movs	r0, r2
 80029b6:	bcf0      	pop	{r4, r5, r6, r7}
 80029b8:	46bb      	mov	fp, r7
 80029ba:	46b2      	mov	sl, r6
 80029bc:	46a9      	mov	r9, r5
 80029be:	46a0      	mov	r8, r4
 80029c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029c2:	1ab4      	subs	r4, r6, r2
 80029c4:	46a4      	mov	ip, r4
 80029c6:	2c00      	cmp	r4, #0
 80029c8:	dd58      	ble.n	8002a7c <__aeabi_dsub+0x218>
 80029ca:	2a00      	cmp	r2, #0
 80029cc:	d100      	bne.n	80029d0 <__aeabi_dsub+0x16c>
 80029ce:	e09e      	b.n	8002b0e <__aeabi_dsub+0x2aa>
 80029d0:	4a71      	ldr	r2, [pc, #452]	; (8002b98 <__aeabi_dsub+0x334>)
 80029d2:	4296      	cmp	r6, r2
 80029d4:	d100      	bne.n	80029d8 <__aeabi_dsub+0x174>
 80029d6:	e13b      	b.n	8002c50 <__aeabi_dsub+0x3ec>
 80029d8:	2280      	movs	r2, #128	; 0x80
 80029da:	0412      	lsls	r2, r2, #16
 80029dc:	4311      	orrs	r1, r2
 80029de:	4662      	mov	r2, ip
 80029e0:	2a38      	cmp	r2, #56	; 0x38
 80029e2:	dd00      	ble.n	80029e6 <__aeabi_dsub+0x182>
 80029e4:	e0c1      	b.n	8002b6a <__aeabi_dsub+0x306>
 80029e6:	2a1f      	cmp	r2, #31
 80029e8:	dc00      	bgt.n	80029ec <__aeabi_dsub+0x188>
 80029ea:	e1bb      	b.n	8002d64 <__aeabi_dsub+0x500>
 80029ec:	000c      	movs	r4, r1
 80029ee:	3a20      	subs	r2, #32
 80029f0:	40d4      	lsrs	r4, r2
 80029f2:	0022      	movs	r2, r4
 80029f4:	4664      	mov	r4, ip
 80029f6:	2c20      	cmp	r4, #32
 80029f8:	d004      	beq.n	8002a04 <__aeabi_dsub+0x1a0>
 80029fa:	2740      	movs	r7, #64	; 0x40
 80029fc:	1b3f      	subs	r7, r7, r4
 80029fe:	40b9      	lsls	r1, r7
 8002a00:	4308      	orrs	r0, r1
 8002a02:	4680      	mov	r8, r0
 8002a04:	4644      	mov	r4, r8
 8002a06:	1e61      	subs	r1, r4, #1
 8002a08:	418c      	sbcs	r4, r1
 8002a0a:	4314      	orrs	r4, r2
 8002a0c:	e0b1      	b.n	8002b72 <__aeabi_dsub+0x30e>
 8002a0e:	000c      	movs	r4, r1
 8002a10:	4304      	orrs	r4, r0
 8002a12:	d02a      	beq.n	8002a6a <__aeabi_dsub+0x206>
 8002a14:	46bb      	mov	fp, r7
 8002a16:	42bd      	cmp	r5, r7
 8002a18:	d02d      	beq.n	8002a76 <__aeabi_dsub+0x212>
 8002a1a:	4c61      	ldr	r4, [pc, #388]	; (8002ba0 <__aeabi_dsub+0x33c>)
 8002a1c:	46a4      	mov	ip, r4
 8002a1e:	44b4      	add	ip, r6
 8002a20:	4664      	mov	r4, ip
 8002a22:	2c00      	cmp	r4, #0
 8002a24:	d05c      	beq.n	8002ae0 <__aeabi_dsub+0x27c>
 8002a26:	1b94      	subs	r4, r2, r6
 8002a28:	46a4      	mov	ip, r4
 8002a2a:	2e00      	cmp	r6, #0
 8002a2c:	d000      	beq.n	8002a30 <__aeabi_dsub+0x1cc>
 8002a2e:	e115      	b.n	8002c5c <__aeabi_dsub+0x3f8>
 8002a30:	464d      	mov	r5, r9
 8002a32:	431d      	orrs	r5, r3
 8002a34:	d100      	bne.n	8002a38 <__aeabi_dsub+0x1d4>
 8002a36:	e1c3      	b.n	8002dc0 <__aeabi_dsub+0x55c>
 8002a38:	1e65      	subs	r5, r4, #1
 8002a3a:	2c01      	cmp	r4, #1
 8002a3c:	d100      	bne.n	8002a40 <__aeabi_dsub+0x1dc>
 8002a3e:	e20c      	b.n	8002e5a <__aeabi_dsub+0x5f6>
 8002a40:	4e55      	ldr	r6, [pc, #340]	; (8002b98 <__aeabi_dsub+0x334>)
 8002a42:	42b4      	cmp	r4, r6
 8002a44:	d100      	bne.n	8002a48 <__aeabi_dsub+0x1e4>
 8002a46:	e1f8      	b.n	8002e3a <__aeabi_dsub+0x5d6>
 8002a48:	46ac      	mov	ip, r5
 8002a4a:	e10e      	b.n	8002c6a <__aeabi_dsub+0x406>
 8002a4c:	000a      	movs	r2, r1
 8002a4e:	4302      	orrs	r2, r0
 8002a50:	d100      	bne.n	8002a54 <__aeabi_dsub+0x1f0>
 8002a52:	e136      	b.n	8002cc2 <__aeabi_dsub+0x45e>
 8002a54:	0022      	movs	r2, r4
 8002a56:	3a01      	subs	r2, #1
 8002a58:	2c01      	cmp	r4, #1
 8002a5a:	d100      	bne.n	8002a5e <__aeabi_dsub+0x1fa>
 8002a5c:	e1c6      	b.n	8002dec <__aeabi_dsub+0x588>
 8002a5e:	4c4e      	ldr	r4, [pc, #312]	; (8002b98 <__aeabi_dsub+0x334>)
 8002a60:	45a4      	cmp	ip, r4
 8002a62:	d100      	bne.n	8002a66 <__aeabi_dsub+0x202>
 8002a64:	e0f4      	b.n	8002c50 <__aeabi_dsub+0x3ec>
 8002a66:	4694      	mov	ip, r2
 8002a68:	e731      	b.n	80028ce <__aeabi_dsub+0x6a>
 8002a6a:	2401      	movs	r4, #1
 8002a6c:	4067      	eors	r7, r4
 8002a6e:	46bb      	mov	fp, r7
 8002a70:	42bd      	cmp	r5, r7
 8002a72:	d000      	beq.n	8002a76 <__aeabi_dsub+0x212>
 8002a74:	e71c      	b.n	80028b0 <__aeabi_dsub+0x4c>
 8002a76:	4c4a      	ldr	r4, [pc, #296]	; (8002ba0 <__aeabi_dsub+0x33c>)
 8002a78:	46a4      	mov	ip, r4
 8002a7a:	44b4      	add	ip, r6
 8002a7c:	4664      	mov	r4, ip
 8002a7e:	2c00      	cmp	r4, #0
 8002a80:	d100      	bne.n	8002a84 <__aeabi_dsub+0x220>
 8002a82:	e0cf      	b.n	8002c24 <__aeabi_dsub+0x3c0>
 8002a84:	1b94      	subs	r4, r2, r6
 8002a86:	46a4      	mov	ip, r4
 8002a88:	2e00      	cmp	r6, #0
 8002a8a:	d100      	bne.n	8002a8e <__aeabi_dsub+0x22a>
 8002a8c:	e15c      	b.n	8002d48 <__aeabi_dsub+0x4e4>
 8002a8e:	4e42      	ldr	r6, [pc, #264]	; (8002b98 <__aeabi_dsub+0x334>)
 8002a90:	42b2      	cmp	r2, r6
 8002a92:	d100      	bne.n	8002a96 <__aeabi_dsub+0x232>
 8002a94:	e1ec      	b.n	8002e70 <__aeabi_dsub+0x60c>
 8002a96:	2680      	movs	r6, #128	; 0x80
 8002a98:	0436      	lsls	r6, r6, #16
 8002a9a:	4333      	orrs	r3, r6
 8002a9c:	4664      	mov	r4, ip
 8002a9e:	2c38      	cmp	r4, #56	; 0x38
 8002aa0:	dd00      	ble.n	8002aa4 <__aeabi_dsub+0x240>
 8002aa2:	e1b3      	b.n	8002e0c <__aeabi_dsub+0x5a8>
 8002aa4:	2c1f      	cmp	r4, #31
 8002aa6:	dd00      	ble.n	8002aaa <__aeabi_dsub+0x246>
 8002aa8:	e238      	b.n	8002f1c <__aeabi_dsub+0x6b8>
 8002aaa:	2620      	movs	r6, #32
 8002aac:	1b36      	subs	r6, r6, r4
 8002aae:	001c      	movs	r4, r3
 8002ab0:	40b4      	lsls	r4, r6
 8002ab2:	464f      	mov	r7, r9
 8002ab4:	46a0      	mov	r8, r4
 8002ab6:	4664      	mov	r4, ip
 8002ab8:	40e7      	lsrs	r7, r4
 8002aba:	4644      	mov	r4, r8
 8002abc:	433c      	orrs	r4, r7
 8002abe:	464f      	mov	r7, r9
 8002ac0:	40b7      	lsls	r7, r6
 8002ac2:	003e      	movs	r6, r7
 8002ac4:	1e77      	subs	r7, r6, #1
 8002ac6:	41be      	sbcs	r6, r7
 8002ac8:	4334      	orrs	r4, r6
 8002aca:	4666      	mov	r6, ip
 8002acc:	40f3      	lsrs	r3, r6
 8002ace:	18c9      	adds	r1, r1, r3
 8002ad0:	1824      	adds	r4, r4, r0
 8002ad2:	4284      	cmp	r4, r0
 8002ad4:	419b      	sbcs	r3, r3
 8002ad6:	425b      	negs	r3, r3
 8002ad8:	4698      	mov	r8, r3
 8002ada:	0016      	movs	r6, r2
 8002adc:	4488      	add	r8, r1
 8002ade:	e04e      	b.n	8002b7e <__aeabi_dsub+0x31a>
 8002ae0:	4a30      	ldr	r2, [pc, #192]	; (8002ba4 <__aeabi_dsub+0x340>)
 8002ae2:	1c74      	adds	r4, r6, #1
 8002ae4:	4214      	tst	r4, r2
 8002ae6:	d000      	beq.n	8002aea <__aeabi_dsub+0x286>
 8002ae8:	e0d6      	b.n	8002c98 <__aeabi_dsub+0x434>
 8002aea:	464a      	mov	r2, r9
 8002aec:	431a      	orrs	r2, r3
 8002aee:	2e00      	cmp	r6, #0
 8002af0:	d000      	beq.n	8002af4 <__aeabi_dsub+0x290>
 8002af2:	e15b      	b.n	8002dac <__aeabi_dsub+0x548>
 8002af4:	2a00      	cmp	r2, #0
 8002af6:	d100      	bne.n	8002afa <__aeabi_dsub+0x296>
 8002af8:	e1a5      	b.n	8002e46 <__aeabi_dsub+0x5e2>
 8002afa:	000a      	movs	r2, r1
 8002afc:	4302      	orrs	r2, r0
 8002afe:	d000      	beq.n	8002b02 <__aeabi_dsub+0x29e>
 8002b00:	e1bb      	b.n	8002e7a <__aeabi_dsub+0x616>
 8002b02:	464a      	mov	r2, r9
 8002b04:	0759      	lsls	r1, r3, #29
 8002b06:	08d2      	lsrs	r2, r2, #3
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	08db      	lsrs	r3, r3, #3
 8002b0c:	e027      	b.n	8002b5e <__aeabi_dsub+0x2fa>
 8002b0e:	000a      	movs	r2, r1
 8002b10:	4302      	orrs	r2, r0
 8002b12:	d100      	bne.n	8002b16 <__aeabi_dsub+0x2b2>
 8002b14:	e174      	b.n	8002e00 <__aeabi_dsub+0x59c>
 8002b16:	0022      	movs	r2, r4
 8002b18:	3a01      	subs	r2, #1
 8002b1a:	2c01      	cmp	r4, #1
 8002b1c:	d005      	beq.n	8002b2a <__aeabi_dsub+0x2c6>
 8002b1e:	4c1e      	ldr	r4, [pc, #120]	; (8002b98 <__aeabi_dsub+0x334>)
 8002b20:	45a4      	cmp	ip, r4
 8002b22:	d100      	bne.n	8002b26 <__aeabi_dsub+0x2c2>
 8002b24:	e094      	b.n	8002c50 <__aeabi_dsub+0x3ec>
 8002b26:	4694      	mov	ip, r2
 8002b28:	e759      	b.n	80029de <__aeabi_dsub+0x17a>
 8002b2a:	4448      	add	r0, r9
 8002b2c:	4548      	cmp	r0, r9
 8002b2e:	4192      	sbcs	r2, r2
 8002b30:	185b      	adds	r3, r3, r1
 8002b32:	4698      	mov	r8, r3
 8002b34:	0004      	movs	r4, r0
 8002b36:	4252      	negs	r2, r2
 8002b38:	4490      	add	r8, r2
 8002b3a:	4643      	mov	r3, r8
 8002b3c:	2602      	movs	r6, #2
 8002b3e:	021b      	lsls	r3, r3, #8
 8002b40:	d500      	bpl.n	8002b44 <__aeabi_dsub+0x2e0>
 8002b42:	e0c4      	b.n	8002cce <__aeabi_dsub+0x46a>
 8002b44:	3e01      	subs	r6, #1
 8002b46:	0763      	lsls	r3, r4, #29
 8002b48:	d000      	beq.n	8002b4c <__aeabi_dsub+0x2e8>
 8002b4a:	e711      	b.n	8002970 <__aeabi_dsub+0x10c>
 8002b4c:	4643      	mov	r3, r8
 8002b4e:	46b4      	mov	ip, r6
 8002b50:	0759      	lsls	r1, r3, #29
 8002b52:	08e2      	lsrs	r2, r4, #3
 8002b54:	430a      	orrs	r2, r1
 8002b56:	08db      	lsrs	r3, r3, #3
 8002b58:	490f      	ldr	r1, [pc, #60]	; (8002b98 <__aeabi_dsub+0x334>)
 8002b5a:	458c      	cmp	ip, r1
 8002b5c:	d040      	beq.n	8002be0 <__aeabi_dsub+0x37c>
 8002b5e:	4661      	mov	r1, ip
 8002b60:	031b      	lsls	r3, r3, #12
 8002b62:	0549      	lsls	r1, r1, #21
 8002b64:	0b1b      	lsrs	r3, r3, #12
 8002b66:	0d49      	lsrs	r1, r1, #21
 8002b68:	e720      	b.n	80029ac <__aeabi_dsub+0x148>
 8002b6a:	4301      	orrs	r1, r0
 8002b6c:	000c      	movs	r4, r1
 8002b6e:	1e61      	subs	r1, r4, #1
 8002b70:	418c      	sbcs	r4, r1
 8002b72:	444c      	add	r4, r9
 8002b74:	454c      	cmp	r4, r9
 8002b76:	4192      	sbcs	r2, r2
 8002b78:	4252      	negs	r2, r2
 8002b7a:	4690      	mov	r8, r2
 8002b7c:	4498      	add	r8, r3
 8002b7e:	4643      	mov	r3, r8
 8002b80:	021b      	lsls	r3, r3, #8
 8002b82:	d5e0      	bpl.n	8002b46 <__aeabi_dsub+0x2e2>
 8002b84:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <__aeabi_dsub+0x334>)
 8002b86:	3601      	adds	r6, #1
 8002b88:	429e      	cmp	r6, r3
 8002b8a:	d000      	beq.n	8002b8e <__aeabi_dsub+0x32a>
 8002b8c:	e09f      	b.n	8002cce <__aeabi_dsub+0x46a>
 8002b8e:	0031      	movs	r1, r6
 8002b90:	2300      	movs	r3, #0
 8002b92:	2200      	movs	r2, #0
 8002b94:	e70a      	b.n	80029ac <__aeabi_dsub+0x148>
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	000007ff 	.word	0x000007ff
 8002b9c:	ff7fffff 	.word	0xff7fffff
 8002ba0:	fffff801 	.word	0xfffff801
 8002ba4:	000007fe 	.word	0x000007fe
 8002ba8:	2a00      	cmp	r2, #0
 8002baa:	d100      	bne.n	8002bae <__aeabi_dsub+0x34a>
 8002bac:	e160      	b.n	8002e70 <__aeabi_dsub+0x60c>
 8002bae:	000a      	movs	r2, r1
 8002bb0:	4302      	orrs	r2, r0
 8002bb2:	d04d      	beq.n	8002c50 <__aeabi_dsub+0x3ec>
 8002bb4:	464a      	mov	r2, r9
 8002bb6:	075c      	lsls	r4, r3, #29
 8002bb8:	08d2      	lsrs	r2, r2, #3
 8002bba:	4322      	orrs	r2, r4
 8002bbc:	2480      	movs	r4, #128	; 0x80
 8002bbe:	08db      	lsrs	r3, r3, #3
 8002bc0:	0324      	lsls	r4, r4, #12
 8002bc2:	4223      	tst	r3, r4
 8002bc4:	d007      	beq.n	8002bd6 <__aeabi_dsub+0x372>
 8002bc6:	08ce      	lsrs	r6, r1, #3
 8002bc8:	4226      	tst	r6, r4
 8002bca:	d104      	bne.n	8002bd6 <__aeabi_dsub+0x372>
 8002bcc:	465d      	mov	r5, fp
 8002bce:	0033      	movs	r3, r6
 8002bd0:	08c2      	lsrs	r2, r0, #3
 8002bd2:	0749      	lsls	r1, r1, #29
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	0f51      	lsrs	r1, r2, #29
 8002bd8:	00d2      	lsls	r2, r2, #3
 8002bda:	08d2      	lsrs	r2, r2, #3
 8002bdc:	0749      	lsls	r1, r1, #29
 8002bde:	430a      	orrs	r2, r1
 8002be0:	0011      	movs	r1, r2
 8002be2:	4319      	orrs	r1, r3
 8002be4:	d100      	bne.n	8002be8 <__aeabi_dsub+0x384>
 8002be6:	e1c8      	b.n	8002f7a <__aeabi_dsub+0x716>
 8002be8:	2180      	movs	r1, #128	; 0x80
 8002bea:	0309      	lsls	r1, r1, #12
 8002bec:	430b      	orrs	r3, r1
 8002bee:	031b      	lsls	r3, r3, #12
 8002bf0:	49d5      	ldr	r1, [pc, #852]	; (8002f48 <__aeabi_dsub+0x6e4>)
 8002bf2:	0b1b      	lsrs	r3, r3, #12
 8002bf4:	e6da      	b.n	80029ac <__aeabi_dsub+0x148>
 8002bf6:	49d5      	ldr	r1, [pc, #852]	; (8002f4c <__aeabi_dsub+0x6e8>)
 8002bf8:	1ab6      	subs	r6, r6, r2
 8002bfa:	400b      	ands	r3, r1
 8002bfc:	4698      	mov	r8, r3
 8002bfe:	e6b5      	b.n	800296c <__aeabi_dsub+0x108>
 8002c00:	0020      	movs	r0, r4
 8002c02:	f000 fb1d 	bl	8003240 <__clzsi2>
 8002c06:	0002      	movs	r2, r0
 8002c08:	3218      	adds	r2, #24
 8002c0a:	2a1f      	cmp	r2, #31
 8002c0c:	dc00      	bgt.n	8002c10 <__aeabi_dsub+0x3ac>
 8002c0e:	e68f      	b.n	8002930 <__aeabi_dsub+0xcc>
 8002c10:	0023      	movs	r3, r4
 8002c12:	3808      	subs	r0, #8
 8002c14:	4083      	lsls	r3, r0
 8002c16:	2400      	movs	r4, #0
 8002c18:	e692      	b.n	8002940 <__aeabi_dsub+0xdc>
 8002c1a:	4308      	orrs	r0, r1
 8002c1c:	0002      	movs	r2, r0
 8002c1e:	1e50      	subs	r0, r2, #1
 8002c20:	4182      	sbcs	r2, r0
 8002c22:	e66d      	b.n	8002900 <__aeabi_dsub+0x9c>
 8002c24:	4cca      	ldr	r4, [pc, #808]	; (8002f50 <__aeabi_dsub+0x6ec>)
 8002c26:	1c72      	adds	r2, r6, #1
 8002c28:	4222      	tst	r2, r4
 8002c2a:	d000      	beq.n	8002c2e <__aeabi_dsub+0x3ca>
 8002c2c:	e0ad      	b.n	8002d8a <__aeabi_dsub+0x526>
 8002c2e:	464a      	mov	r2, r9
 8002c30:	431a      	orrs	r2, r3
 8002c32:	2e00      	cmp	r6, #0
 8002c34:	d1b8      	bne.n	8002ba8 <__aeabi_dsub+0x344>
 8002c36:	2a00      	cmp	r2, #0
 8002c38:	d100      	bne.n	8002c3c <__aeabi_dsub+0x3d8>
 8002c3a:	e158      	b.n	8002eee <__aeabi_dsub+0x68a>
 8002c3c:	000a      	movs	r2, r1
 8002c3e:	4302      	orrs	r2, r0
 8002c40:	d000      	beq.n	8002c44 <__aeabi_dsub+0x3e0>
 8002c42:	e159      	b.n	8002ef8 <__aeabi_dsub+0x694>
 8002c44:	464a      	mov	r2, r9
 8002c46:	0759      	lsls	r1, r3, #29
 8002c48:	08d2      	lsrs	r2, r2, #3
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	08db      	lsrs	r3, r3, #3
 8002c4e:	e786      	b.n	8002b5e <__aeabi_dsub+0x2fa>
 8002c50:	464a      	mov	r2, r9
 8002c52:	0759      	lsls	r1, r3, #29
 8002c54:	08d2      	lsrs	r2, r2, #3
 8002c56:	430a      	orrs	r2, r1
 8002c58:	08db      	lsrs	r3, r3, #3
 8002c5a:	e7c1      	b.n	8002be0 <__aeabi_dsub+0x37c>
 8002c5c:	4dba      	ldr	r5, [pc, #744]	; (8002f48 <__aeabi_dsub+0x6e4>)
 8002c5e:	42aa      	cmp	r2, r5
 8002c60:	d100      	bne.n	8002c64 <__aeabi_dsub+0x400>
 8002c62:	e11e      	b.n	8002ea2 <__aeabi_dsub+0x63e>
 8002c64:	2580      	movs	r5, #128	; 0x80
 8002c66:	042d      	lsls	r5, r5, #16
 8002c68:	432b      	orrs	r3, r5
 8002c6a:	4664      	mov	r4, ip
 8002c6c:	2c38      	cmp	r4, #56	; 0x38
 8002c6e:	dc5d      	bgt.n	8002d2c <__aeabi_dsub+0x4c8>
 8002c70:	2c1f      	cmp	r4, #31
 8002c72:	dd00      	ble.n	8002c76 <__aeabi_dsub+0x412>
 8002c74:	e0d0      	b.n	8002e18 <__aeabi_dsub+0x5b4>
 8002c76:	2520      	movs	r5, #32
 8002c78:	4667      	mov	r7, ip
 8002c7a:	1b2d      	subs	r5, r5, r4
 8002c7c:	464e      	mov	r6, r9
 8002c7e:	001c      	movs	r4, r3
 8002c80:	40fe      	lsrs	r6, r7
 8002c82:	40ac      	lsls	r4, r5
 8002c84:	4334      	orrs	r4, r6
 8002c86:	464e      	mov	r6, r9
 8002c88:	40ae      	lsls	r6, r5
 8002c8a:	0035      	movs	r5, r6
 8002c8c:	40fb      	lsrs	r3, r7
 8002c8e:	1e6e      	subs	r6, r5, #1
 8002c90:	41b5      	sbcs	r5, r6
 8002c92:	1ac9      	subs	r1, r1, r3
 8002c94:	432c      	orrs	r4, r5
 8002c96:	e04e      	b.n	8002d36 <__aeabi_dsub+0x4d2>
 8002c98:	464a      	mov	r2, r9
 8002c9a:	1a14      	subs	r4, r2, r0
 8002c9c:	45a1      	cmp	r9, r4
 8002c9e:	4192      	sbcs	r2, r2
 8002ca0:	4252      	negs	r2, r2
 8002ca2:	4690      	mov	r8, r2
 8002ca4:	1a5f      	subs	r7, r3, r1
 8002ca6:	003a      	movs	r2, r7
 8002ca8:	4647      	mov	r7, r8
 8002caa:	1bd2      	subs	r2, r2, r7
 8002cac:	4690      	mov	r8, r2
 8002cae:	0212      	lsls	r2, r2, #8
 8002cb0:	d500      	bpl.n	8002cb4 <__aeabi_dsub+0x450>
 8002cb2:	e08b      	b.n	8002dcc <__aeabi_dsub+0x568>
 8002cb4:	4642      	mov	r2, r8
 8002cb6:	4322      	orrs	r2, r4
 8002cb8:	d000      	beq.n	8002cbc <__aeabi_dsub+0x458>
 8002cba:	e630      	b.n	800291e <__aeabi_dsub+0xba>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	2500      	movs	r5, #0
 8002cc0:	e74d      	b.n	8002b5e <__aeabi_dsub+0x2fa>
 8002cc2:	464a      	mov	r2, r9
 8002cc4:	0759      	lsls	r1, r3, #29
 8002cc6:	08d2      	lsrs	r2, r2, #3
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	08db      	lsrs	r3, r3, #3
 8002ccc:	e744      	b.n	8002b58 <__aeabi_dsub+0x2f4>
 8002cce:	4642      	mov	r2, r8
 8002cd0:	4b9e      	ldr	r3, [pc, #632]	; (8002f4c <__aeabi_dsub+0x6e8>)
 8002cd2:	0861      	lsrs	r1, r4, #1
 8002cd4:	401a      	ands	r2, r3
 8002cd6:	0013      	movs	r3, r2
 8002cd8:	2201      	movs	r2, #1
 8002cda:	4014      	ands	r4, r2
 8002cdc:	430c      	orrs	r4, r1
 8002cde:	07da      	lsls	r2, r3, #31
 8002ce0:	085b      	lsrs	r3, r3, #1
 8002ce2:	4698      	mov	r8, r3
 8002ce4:	4314      	orrs	r4, r2
 8002ce6:	e641      	b.n	800296c <__aeabi_dsub+0x108>
 8002ce8:	001a      	movs	r2, r3
 8002cea:	3e1f      	subs	r6, #31
 8002cec:	40f2      	lsrs	r2, r6
 8002cee:	0016      	movs	r6, r2
 8002cf0:	2920      	cmp	r1, #32
 8002cf2:	d003      	beq.n	8002cfc <__aeabi_dsub+0x498>
 8002cf4:	2240      	movs	r2, #64	; 0x40
 8002cf6:	1a51      	subs	r1, r2, r1
 8002cf8:	408b      	lsls	r3, r1
 8002cfa:	431c      	orrs	r4, r3
 8002cfc:	1e62      	subs	r2, r4, #1
 8002cfe:	4194      	sbcs	r4, r2
 8002d00:	2300      	movs	r3, #0
 8002d02:	4334      	orrs	r4, r6
 8002d04:	4698      	mov	r8, r3
 8002d06:	2600      	movs	r6, #0
 8002d08:	e71d      	b.n	8002b46 <__aeabi_dsub+0x2e2>
 8002d0a:	000c      	movs	r4, r1
 8002d0c:	3a20      	subs	r2, #32
 8002d0e:	40d4      	lsrs	r4, r2
 8002d10:	0022      	movs	r2, r4
 8002d12:	4664      	mov	r4, ip
 8002d14:	2c20      	cmp	r4, #32
 8002d16:	d004      	beq.n	8002d22 <__aeabi_dsub+0x4be>
 8002d18:	2740      	movs	r7, #64	; 0x40
 8002d1a:	1b3f      	subs	r7, r7, r4
 8002d1c:	40b9      	lsls	r1, r7
 8002d1e:	4308      	orrs	r0, r1
 8002d20:	4680      	mov	r8, r0
 8002d22:	4644      	mov	r4, r8
 8002d24:	1e61      	subs	r1, r4, #1
 8002d26:	418c      	sbcs	r4, r1
 8002d28:	4322      	orrs	r2, r4
 8002d2a:	e5e9      	b.n	8002900 <__aeabi_dsub+0x9c>
 8002d2c:	464c      	mov	r4, r9
 8002d2e:	4323      	orrs	r3, r4
 8002d30:	001c      	movs	r4, r3
 8002d32:	1e63      	subs	r3, r4, #1
 8002d34:	419c      	sbcs	r4, r3
 8002d36:	1b04      	subs	r4, r0, r4
 8002d38:	42a0      	cmp	r0, r4
 8002d3a:	419b      	sbcs	r3, r3
 8002d3c:	425b      	negs	r3, r3
 8002d3e:	1acb      	subs	r3, r1, r3
 8002d40:	4698      	mov	r8, r3
 8002d42:	465d      	mov	r5, fp
 8002d44:	0016      	movs	r6, r2
 8002d46:	e5e2      	b.n	800290e <__aeabi_dsub+0xaa>
 8002d48:	464e      	mov	r6, r9
 8002d4a:	431e      	orrs	r6, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x4ec>
 8002d4e:	e0ae      	b.n	8002eae <__aeabi_dsub+0x64a>
 8002d50:	1e66      	subs	r6, r4, #1
 8002d52:	2c01      	cmp	r4, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x4f4>
 8002d56:	e0fd      	b.n	8002f54 <__aeabi_dsub+0x6f0>
 8002d58:	4f7b      	ldr	r7, [pc, #492]	; (8002f48 <__aeabi_dsub+0x6e4>)
 8002d5a:	42bc      	cmp	r4, r7
 8002d5c:	d100      	bne.n	8002d60 <__aeabi_dsub+0x4fc>
 8002d5e:	e107      	b.n	8002f70 <__aeabi_dsub+0x70c>
 8002d60:	46b4      	mov	ip, r6
 8002d62:	e69b      	b.n	8002a9c <__aeabi_dsub+0x238>
 8002d64:	4664      	mov	r4, ip
 8002d66:	2220      	movs	r2, #32
 8002d68:	1b12      	subs	r2, r2, r4
 8002d6a:	000c      	movs	r4, r1
 8002d6c:	4094      	lsls	r4, r2
 8002d6e:	0007      	movs	r7, r0
 8002d70:	4090      	lsls	r0, r2
 8002d72:	46a0      	mov	r8, r4
 8002d74:	4664      	mov	r4, ip
 8002d76:	1e42      	subs	r2, r0, #1
 8002d78:	4190      	sbcs	r0, r2
 8002d7a:	4662      	mov	r2, ip
 8002d7c:	40e7      	lsrs	r7, r4
 8002d7e:	4644      	mov	r4, r8
 8002d80:	40d1      	lsrs	r1, r2
 8002d82:	433c      	orrs	r4, r7
 8002d84:	4304      	orrs	r4, r0
 8002d86:	185b      	adds	r3, r3, r1
 8002d88:	e6f3      	b.n	8002b72 <__aeabi_dsub+0x30e>
 8002d8a:	4c6f      	ldr	r4, [pc, #444]	; (8002f48 <__aeabi_dsub+0x6e4>)
 8002d8c:	42a2      	cmp	r2, r4
 8002d8e:	d100      	bne.n	8002d92 <__aeabi_dsub+0x52e>
 8002d90:	e0d5      	b.n	8002f3e <__aeabi_dsub+0x6da>
 8002d92:	4448      	add	r0, r9
 8002d94:	185b      	adds	r3, r3, r1
 8002d96:	4548      	cmp	r0, r9
 8002d98:	4189      	sbcs	r1, r1
 8002d9a:	4249      	negs	r1, r1
 8002d9c:	185b      	adds	r3, r3, r1
 8002d9e:	07dc      	lsls	r4, r3, #31
 8002da0:	0840      	lsrs	r0, r0, #1
 8002da2:	085b      	lsrs	r3, r3, #1
 8002da4:	4698      	mov	r8, r3
 8002da6:	0016      	movs	r6, r2
 8002da8:	4304      	orrs	r4, r0
 8002daa:	e6cc      	b.n	8002b46 <__aeabi_dsub+0x2e2>
 8002dac:	2a00      	cmp	r2, #0
 8002dae:	d000      	beq.n	8002db2 <__aeabi_dsub+0x54e>
 8002db0:	e082      	b.n	8002eb8 <__aeabi_dsub+0x654>
 8002db2:	000a      	movs	r2, r1
 8002db4:	4302      	orrs	r2, r0
 8002db6:	d140      	bne.n	8002e3a <__aeabi_dsub+0x5d6>
 8002db8:	2380      	movs	r3, #128	; 0x80
 8002dba:	2500      	movs	r5, #0
 8002dbc:	031b      	lsls	r3, r3, #12
 8002dbe:	e713      	b.n	8002be8 <__aeabi_dsub+0x384>
 8002dc0:	074b      	lsls	r3, r1, #29
 8002dc2:	08c2      	lsrs	r2, r0, #3
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	465d      	mov	r5, fp
 8002dc8:	08cb      	lsrs	r3, r1, #3
 8002dca:	e6c5      	b.n	8002b58 <__aeabi_dsub+0x2f4>
 8002dcc:	464a      	mov	r2, r9
 8002dce:	1a84      	subs	r4, r0, r2
 8002dd0:	42a0      	cmp	r0, r4
 8002dd2:	4192      	sbcs	r2, r2
 8002dd4:	1acb      	subs	r3, r1, r3
 8002dd6:	4252      	negs	r2, r2
 8002dd8:	1a9b      	subs	r3, r3, r2
 8002dda:	4698      	mov	r8, r3
 8002ddc:	465d      	mov	r5, fp
 8002dde:	e59e      	b.n	800291e <__aeabi_dsub+0xba>
 8002de0:	464a      	mov	r2, r9
 8002de2:	0759      	lsls	r1, r3, #29
 8002de4:	08d2      	lsrs	r2, r2, #3
 8002de6:	430a      	orrs	r2, r1
 8002de8:	08db      	lsrs	r3, r3, #3
 8002dea:	e6f9      	b.n	8002be0 <__aeabi_dsub+0x37c>
 8002dec:	464a      	mov	r2, r9
 8002dee:	1a14      	subs	r4, r2, r0
 8002df0:	45a1      	cmp	r9, r4
 8002df2:	4192      	sbcs	r2, r2
 8002df4:	1a5b      	subs	r3, r3, r1
 8002df6:	4252      	negs	r2, r2
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	4698      	mov	r8, r3
 8002dfc:	2601      	movs	r6, #1
 8002dfe:	e586      	b.n	800290e <__aeabi_dsub+0xaa>
 8002e00:	464a      	mov	r2, r9
 8002e02:	0759      	lsls	r1, r3, #29
 8002e04:	08d2      	lsrs	r2, r2, #3
 8002e06:	430a      	orrs	r2, r1
 8002e08:	08db      	lsrs	r3, r3, #3
 8002e0a:	e6a5      	b.n	8002b58 <__aeabi_dsub+0x2f4>
 8002e0c:	464c      	mov	r4, r9
 8002e0e:	4323      	orrs	r3, r4
 8002e10:	001c      	movs	r4, r3
 8002e12:	1e63      	subs	r3, r4, #1
 8002e14:	419c      	sbcs	r4, r3
 8002e16:	e65b      	b.n	8002ad0 <__aeabi_dsub+0x26c>
 8002e18:	4665      	mov	r5, ip
 8002e1a:	001e      	movs	r6, r3
 8002e1c:	3d20      	subs	r5, #32
 8002e1e:	40ee      	lsrs	r6, r5
 8002e20:	2c20      	cmp	r4, #32
 8002e22:	d005      	beq.n	8002e30 <__aeabi_dsub+0x5cc>
 8002e24:	2540      	movs	r5, #64	; 0x40
 8002e26:	1b2d      	subs	r5, r5, r4
 8002e28:	40ab      	lsls	r3, r5
 8002e2a:	464c      	mov	r4, r9
 8002e2c:	431c      	orrs	r4, r3
 8002e2e:	46a2      	mov	sl, r4
 8002e30:	4654      	mov	r4, sl
 8002e32:	1e63      	subs	r3, r4, #1
 8002e34:	419c      	sbcs	r4, r3
 8002e36:	4334      	orrs	r4, r6
 8002e38:	e77d      	b.n	8002d36 <__aeabi_dsub+0x4d2>
 8002e3a:	074b      	lsls	r3, r1, #29
 8002e3c:	08c2      	lsrs	r2, r0, #3
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	465d      	mov	r5, fp
 8002e42:	08cb      	lsrs	r3, r1, #3
 8002e44:	e6cc      	b.n	8002be0 <__aeabi_dsub+0x37c>
 8002e46:	000a      	movs	r2, r1
 8002e48:	4302      	orrs	r2, r0
 8002e4a:	d100      	bne.n	8002e4e <__aeabi_dsub+0x5ea>
 8002e4c:	e736      	b.n	8002cbc <__aeabi_dsub+0x458>
 8002e4e:	074b      	lsls	r3, r1, #29
 8002e50:	08c2      	lsrs	r2, r0, #3
 8002e52:	431a      	orrs	r2, r3
 8002e54:	465d      	mov	r5, fp
 8002e56:	08cb      	lsrs	r3, r1, #3
 8002e58:	e681      	b.n	8002b5e <__aeabi_dsub+0x2fa>
 8002e5a:	464a      	mov	r2, r9
 8002e5c:	1a84      	subs	r4, r0, r2
 8002e5e:	42a0      	cmp	r0, r4
 8002e60:	4192      	sbcs	r2, r2
 8002e62:	1acb      	subs	r3, r1, r3
 8002e64:	4252      	negs	r2, r2
 8002e66:	1a9b      	subs	r3, r3, r2
 8002e68:	4698      	mov	r8, r3
 8002e6a:	465d      	mov	r5, fp
 8002e6c:	2601      	movs	r6, #1
 8002e6e:	e54e      	b.n	800290e <__aeabi_dsub+0xaa>
 8002e70:	074b      	lsls	r3, r1, #29
 8002e72:	08c2      	lsrs	r2, r0, #3
 8002e74:	431a      	orrs	r2, r3
 8002e76:	08cb      	lsrs	r3, r1, #3
 8002e78:	e6b2      	b.n	8002be0 <__aeabi_dsub+0x37c>
 8002e7a:	464a      	mov	r2, r9
 8002e7c:	1a14      	subs	r4, r2, r0
 8002e7e:	45a1      	cmp	r9, r4
 8002e80:	4192      	sbcs	r2, r2
 8002e82:	1a5f      	subs	r7, r3, r1
 8002e84:	4252      	negs	r2, r2
 8002e86:	1aba      	subs	r2, r7, r2
 8002e88:	4690      	mov	r8, r2
 8002e8a:	0212      	lsls	r2, r2, #8
 8002e8c:	d56b      	bpl.n	8002f66 <__aeabi_dsub+0x702>
 8002e8e:	464a      	mov	r2, r9
 8002e90:	1a84      	subs	r4, r0, r2
 8002e92:	42a0      	cmp	r0, r4
 8002e94:	4192      	sbcs	r2, r2
 8002e96:	1acb      	subs	r3, r1, r3
 8002e98:	4252      	negs	r2, r2
 8002e9a:	1a9b      	subs	r3, r3, r2
 8002e9c:	4698      	mov	r8, r3
 8002e9e:	465d      	mov	r5, fp
 8002ea0:	e564      	b.n	800296c <__aeabi_dsub+0x108>
 8002ea2:	074b      	lsls	r3, r1, #29
 8002ea4:	08c2      	lsrs	r2, r0, #3
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	465d      	mov	r5, fp
 8002eaa:	08cb      	lsrs	r3, r1, #3
 8002eac:	e698      	b.n	8002be0 <__aeabi_dsub+0x37c>
 8002eae:	074b      	lsls	r3, r1, #29
 8002eb0:	08c2      	lsrs	r2, r0, #3
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	08cb      	lsrs	r3, r1, #3
 8002eb6:	e64f      	b.n	8002b58 <__aeabi_dsub+0x2f4>
 8002eb8:	000a      	movs	r2, r1
 8002eba:	4302      	orrs	r2, r0
 8002ebc:	d090      	beq.n	8002de0 <__aeabi_dsub+0x57c>
 8002ebe:	464a      	mov	r2, r9
 8002ec0:	075c      	lsls	r4, r3, #29
 8002ec2:	08d2      	lsrs	r2, r2, #3
 8002ec4:	4314      	orrs	r4, r2
 8002ec6:	2280      	movs	r2, #128	; 0x80
 8002ec8:	08db      	lsrs	r3, r3, #3
 8002eca:	0312      	lsls	r2, r2, #12
 8002ecc:	4213      	tst	r3, r2
 8002ece:	d008      	beq.n	8002ee2 <__aeabi_dsub+0x67e>
 8002ed0:	08ce      	lsrs	r6, r1, #3
 8002ed2:	4216      	tst	r6, r2
 8002ed4:	d105      	bne.n	8002ee2 <__aeabi_dsub+0x67e>
 8002ed6:	08c0      	lsrs	r0, r0, #3
 8002ed8:	0749      	lsls	r1, r1, #29
 8002eda:	4308      	orrs	r0, r1
 8002edc:	0004      	movs	r4, r0
 8002ede:	465d      	mov	r5, fp
 8002ee0:	0033      	movs	r3, r6
 8002ee2:	0f61      	lsrs	r1, r4, #29
 8002ee4:	00e2      	lsls	r2, r4, #3
 8002ee6:	0749      	lsls	r1, r1, #29
 8002ee8:	08d2      	lsrs	r2, r2, #3
 8002eea:	430a      	orrs	r2, r1
 8002eec:	e678      	b.n	8002be0 <__aeabi_dsub+0x37c>
 8002eee:	074b      	lsls	r3, r1, #29
 8002ef0:	08c2      	lsrs	r2, r0, #3
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	08cb      	lsrs	r3, r1, #3
 8002ef6:	e632      	b.n	8002b5e <__aeabi_dsub+0x2fa>
 8002ef8:	4448      	add	r0, r9
 8002efa:	185b      	adds	r3, r3, r1
 8002efc:	4548      	cmp	r0, r9
 8002efe:	4192      	sbcs	r2, r2
 8002f00:	4698      	mov	r8, r3
 8002f02:	4252      	negs	r2, r2
 8002f04:	4490      	add	r8, r2
 8002f06:	4643      	mov	r3, r8
 8002f08:	0004      	movs	r4, r0
 8002f0a:	021b      	lsls	r3, r3, #8
 8002f0c:	d400      	bmi.n	8002f10 <__aeabi_dsub+0x6ac>
 8002f0e:	e61a      	b.n	8002b46 <__aeabi_dsub+0x2e2>
 8002f10:	4642      	mov	r2, r8
 8002f12:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <__aeabi_dsub+0x6e8>)
 8002f14:	2601      	movs	r6, #1
 8002f16:	401a      	ands	r2, r3
 8002f18:	4690      	mov	r8, r2
 8002f1a:	e614      	b.n	8002b46 <__aeabi_dsub+0x2e2>
 8002f1c:	4666      	mov	r6, ip
 8002f1e:	001f      	movs	r7, r3
 8002f20:	3e20      	subs	r6, #32
 8002f22:	40f7      	lsrs	r7, r6
 8002f24:	2c20      	cmp	r4, #32
 8002f26:	d005      	beq.n	8002f34 <__aeabi_dsub+0x6d0>
 8002f28:	2640      	movs	r6, #64	; 0x40
 8002f2a:	1b36      	subs	r6, r6, r4
 8002f2c:	40b3      	lsls	r3, r6
 8002f2e:	464c      	mov	r4, r9
 8002f30:	431c      	orrs	r4, r3
 8002f32:	46a2      	mov	sl, r4
 8002f34:	4654      	mov	r4, sl
 8002f36:	1e63      	subs	r3, r4, #1
 8002f38:	419c      	sbcs	r4, r3
 8002f3a:	433c      	orrs	r4, r7
 8002f3c:	e5c8      	b.n	8002ad0 <__aeabi_dsub+0x26c>
 8002f3e:	0011      	movs	r1, r2
 8002f40:	2300      	movs	r3, #0
 8002f42:	2200      	movs	r2, #0
 8002f44:	e532      	b.n	80029ac <__aeabi_dsub+0x148>
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	000007ff 	.word	0x000007ff
 8002f4c:	ff7fffff 	.word	0xff7fffff
 8002f50:	000007fe 	.word	0x000007fe
 8002f54:	464a      	mov	r2, r9
 8002f56:	1814      	adds	r4, r2, r0
 8002f58:	4284      	cmp	r4, r0
 8002f5a:	4192      	sbcs	r2, r2
 8002f5c:	185b      	adds	r3, r3, r1
 8002f5e:	4698      	mov	r8, r3
 8002f60:	4252      	negs	r2, r2
 8002f62:	4490      	add	r8, r2
 8002f64:	e5e9      	b.n	8002b3a <__aeabi_dsub+0x2d6>
 8002f66:	4642      	mov	r2, r8
 8002f68:	4322      	orrs	r2, r4
 8002f6a:	d100      	bne.n	8002f6e <__aeabi_dsub+0x70a>
 8002f6c:	e6a6      	b.n	8002cbc <__aeabi_dsub+0x458>
 8002f6e:	e5ea      	b.n	8002b46 <__aeabi_dsub+0x2e2>
 8002f70:	074b      	lsls	r3, r1, #29
 8002f72:	08c2      	lsrs	r2, r0, #3
 8002f74:	431a      	orrs	r2, r3
 8002f76:	08cb      	lsrs	r3, r1, #3
 8002f78:	e632      	b.n	8002be0 <__aeabi_dsub+0x37c>
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	4901      	ldr	r1, [pc, #4]	; (8002f84 <__aeabi_dsub+0x720>)
 8002f7e:	0013      	movs	r3, r2
 8002f80:	e514      	b.n	80029ac <__aeabi_dsub+0x148>
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	000007ff 	.word	0x000007ff

08002f88 <__aeabi_d2iz>:
 8002f88:	000a      	movs	r2, r1
 8002f8a:	b530      	push	{r4, r5, lr}
 8002f8c:	4c13      	ldr	r4, [pc, #76]	; (8002fdc <__aeabi_d2iz+0x54>)
 8002f8e:	0053      	lsls	r3, r2, #1
 8002f90:	0309      	lsls	r1, r1, #12
 8002f92:	0005      	movs	r5, r0
 8002f94:	0b09      	lsrs	r1, r1, #12
 8002f96:	2000      	movs	r0, #0
 8002f98:	0d5b      	lsrs	r3, r3, #21
 8002f9a:	0fd2      	lsrs	r2, r2, #31
 8002f9c:	42a3      	cmp	r3, r4
 8002f9e:	dd04      	ble.n	8002faa <__aeabi_d2iz+0x22>
 8002fa0:	480f      	ldr	r0, [pc, #60]	; (8002fe0 <__aeabi_d2iz+0x58>)
 8002fa2:	4283      	cmp	r3, r0
 8002fa4:	dd02      	ble.n	8002fac <__aeabi_d2iz+0x24>
 8002fa6:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <__aeabi_d2iz+0x5c>)
 8002fa8:	18d0      	adds	r0, r2, r3
 8002faa:	bd30      	pop	{r4, r5, pc}
 8002fac:	2080      	movs	r0, #128	; 0x80
 8002fae:	0340      	lsls	r0, r0, #13
 8002fb0:	4301      	orrs	r1, r0
 8002fb2:	480d      	ldr	r0, [pc, #52]	; (8002fe8 <__aeabi_d2iz+0x60>)
 8002fb4:	1ac0      	subs	r0, r0, r3
 8002fb6:	281f      	cmp	r0, #31
 8002fb8:	dd08      	ble.n	8002fcc <__aeabi_d2iz+0x44>
 8002fba:	480c      	ldr	r0, [pc, #48]	; (8002fec <__aeabi_d2iz+0x64>)
 8002fbc:	1ac3      	subs	r3, r0, r3
 8002fbe:	40d9      	lsrs	r1, r3
 8002fc0:	000b      	movs	r3, r1
 8002fc2:	4258      	negs	r0, r3
 8002fc4:	2a00      	cmp	r2, #0
 8002fc6:	d1f0      	bne.n	8002faa <__aeabi_d2iz+0x22>
 8002fc8:	0018      	movs	r0, r3
 8002fca:	e7ee      	b.n	8002faa <__aeabi_d2iz+0x22>
 8002fcc:	4c08      	ldr	r4, [pc, #32]	; (8002ff0 <__aeabi_d2iz+0x68>)
 8002fce:	40c5      	lsrs	r5, r0
 8002fd0:	46a4      	mov	ip, r4
 8002fd2:	4463      	add	r3, ip
 8002fd4:	4099      	lsls	r1, r3
 8002fd6:	000b      	movs	r3, r1
 8002fd8:	432b      	orrs	r3, r5
 8002fda:	e7f2      	b.n	8002fc2 <__aeabi_d2iz+0x3a>
 8002fdc:	000003fe 	.word	0x000003fe
 8002fe0:	0000041d 	.word	0x0000041d
 8002fe4:	7fffffff 	.word	0x7fffffff
 8002fe8:	00000433 	.word	0x00000433
 8002fec:	00000413 	.word	0x00000413
 8002ff0:	fffffbed 	.word	0xfffffbed

08002ff4 <__aeabi_i2d>:
 8002ff4:	b570      	push	{r4, r5, r6, lr}
 8002ff6:	2800      	cmp	r0, #0
 8002ff8:	d016      	beq.n	8003028 <__aeabi_i2d+0x34>
 8002ffa:	17c3      	asrs	r3, r0, #31
 8002ffc:	18c5      	adds	r5, r0, r3
 8002ffe:	405d      	eors	r5, r3
 8003000:	0fc4      	lsrs	r4, r0, #31
 8003002:	0028      	movs	r0, r5
 8003004:	f000 f91c 	bl	8003240 <__clzsi2>
 8003008:	4a11      	ldr	r2, [pc, #68]	; (8003050 <__aeabi_i2d+0x5c>)
 800300a:	1a12      	subs	r2, r2, r0
 800300c:	280a      	cmp	r0, #10
 800300e:	dc16      	bgt.n	800303e <__aeabi_i2d+0x4a>
 8003010:	0003      	movs	r3, r0
 8003012:	002e      	movs	r6, r5
 8003014:	3315      	adds	r3, #21
 8003016:	409e      	lsls	r6, r3
 8003018:	230b      	movs	r3, #11
 800301a:	1a18      	subs	r0, r3, r0
 800301c:	40c5      	lsrs	r5, r0
 800301e:	0553      	lsls	r3, r2, #21
 8003020:	032d      	lsls	r5, r5, #12
 8003022:	0b2d      	lsrs	r5, r5, #12
 8003024:	0d5b      	lsrs	r3, r3, #21
 8003026:	e003      	b.n	8003030 <__aeabi_i2d+0x3c>
 8003028:	2400      	movs	r4, #0
 800302a:	2300      	movs	r3, #0
 800302c:	2500      	movs	r5, #0
 800302e:	2600      	movs	r6, #0
 8003030:	051b      	lsls	r3, r3, #20
 8003032:	432b      	orrs	r3, r5
 8003034:	07e4      	lsls	r4, r4, #31
 8003036:	4323      	orrs	r3, r4
 8003038:	0030      	movs	r0, r6
 800303a:	0019      	movs	r1, r3
 800303c:	bd70      	pop	{r4, r5, r6, pc}
 800303e:	380b      	subs	r0, #11
 8003040:	4085      	lsls	r5, r0
 8003042:	0553      	lsls	r3, r2, #21
 8003044:	032d      	lsls	r5, r5, #12
 8003046:	2600      	movs	r6, #0
 8003048:	0b2d      	lsrs	r5, r5, #12
 800304a:	0d5b      	lsrs	r3, r3, #21
 800304c:	e7f0      	b.n	8003030 <__aeabi_i2d+0x3c>
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	0000041e 	.word	0x0000041e

08003054 <__aeabi_ui2d>:
 8003054:	b510      	push	{r4, lr}
 8003056:	1e04      	subs	r4, r0, #0
 8003058:	d010      	beq.n	800307c <__aeabi_ui2d+0x28>
 800305a:	f000 f8f1 	bl	8003240 <__clzsi2>
 800305e:	4b0f      	ldr	r3, [pc, #60]	; (800309c <__aeabi_ui2d+0x48>)
 8003060:	1a1b      	subs	r3, r3, r0
 8003062:	280a      	cmp	r0, #10
 8003064:	dc11      	bgt.n	800308a <__aeabi_ui2d+0x36>
 8003066:	220b      	movs	r2, #11
 8003068:	0021      	movs	r1, r4
 800306a:	1a12      	subs	r2, r2, r0
 800306c:	40d1      	lsrs	r1, r2
 800306e:	3015      	adds	r0, #21
 8003070:	030a      	lsls	r2, r1, #12
 8003072:	055b      	lsls	r3, r3, #21
 8003074:	4084      	lsls	r4, r0
 8003076:	0b12      	lsrs	r2, r2, #12
 8003078:	0d5b      	lsrs	r3, r3, #21
 800307a:	e001      	b.n	8003080 <__aeabi_ui2d+0x2c>
 800307c:	2300      	movs	r3, #0
 800307e:	2200      	movs	r2, #0
 8003080:	051b      	lsls	r3, r3, #20
 8003082:	4313      	orrs	r3, r2
 8003084:	0020      	movs	r0, r4
 8003086:	0019      	movs	r1, r3
 8003088:	bd10      	pop	{r4, pc}
 800308a:	0022      	movs	r2, r4
 800308c:	380b      	subs	r0, #11
 800308e:	4082      	lsls	r2, r0
 8003090:	055b      	lsls	r3, r3, #21
 8003092:	0312      	lsls	r2, r2, #12
 8003094:	2400      	movs	r4, #0
 8003096:	0b12      	lsrs	r2, r2, #12
 8003098:	0d5b      	lsrs	r3, r3, #21
 800309a:	e7f1      	b.n	8003080 <__aeabi_ui2d+0x2c>
 800309c:	0000041e 	.word	0x0000041e

080030a0 <__aeabi_f2d>:
 80030a0:	b570      	push	{r4, r5, r6, lr}
 80030a2:	0043      	lsls	r3, r0, #1
 80030a4:	0246      	lsls	r6, r0, #9
 80030a6:	0fc4      	lsrs	r4, r0, #31
 80030a8:	20fe      	movs	r0, #254	; 0xfe
 80030aa:	0e1b      	lsrs	r3, r3, #24
 80030ac:	1c59      	adds	r1, r3, #1
 80030ae:	0a75      	lsrs	r5, r6, #9
 80030b0:	4208      	tst	r0, r1
 80030b2:	d00c      	beq.n	80030ce <__aeabi_f2d+0x2e>
 80030b4:	22e0      	movs	r2, #224	; 0xe0
 80030b6:	0092      	lsls	r2, r2, #2
 80030b8:	4694      	mov	ip, r2
 80030ba:	076d      	lsls	r5, r5, #29
 80030bc:	0b36      	lsrs	r6, r6, #12
 80030be:	4463      	add	r3, ip
 80030c0:	051b      	lsls	r3, r3, #20
 80030c2:	4333      	orrs	r3, r6
 80030c4:	07e4      	lsls	r4, r4, #31
 80030c6:	4323      	orrs	r3, r4
 80030c8:	0028      	movs	r0, r5
 80030ca:	0019      	movs	r1, r3
 80030cc:	bd70      	pop	{r4, r5, r6, pc}
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d114      	bne.n	80030fc <__aeabi_f2d+0x5c>
 80030d2:	2d00      	cmp	r5, #0
 80030d4:	d01b      	beq.n	800310e <__aeabi_f2d+0x6e>
 80030d6:	0028      	movs	r0, r5
 80030d8:	f000 f8b2 	bl	8003240 <__clzsi2>
 80030dc:	280a      	cmp	r0, #10
 80030de:	dc1c      	bgt.n	800311a <__aeabi_f2d+0x7a>
 80030e0:	230b      	movs	r3, #11
 80030e2:	002a      	movs	r2, r5
 80030e4:	1a1b      	subs	r3, r3, r0
 80030e6:	40da      	lsrs	r2, r3
 80030e8:	0003      	movs	r3, r0
 80030ea:	3315      	adds	r3, #21
 80030ec:	409d      	lsls	r5, r3
 80030ee:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <__aeabi_f2d+0x88>)
 80030f0:	0312      	lsls	r2, r2, #12
 80030f2:	1a1b      	subs	r3, r3, r0
 80030f4:	055b      	lsls	r3, r3, #21
 80030f6:	0b16      	lsrs	r6, r2, #12
 80030f8:	0d5b      	lsrs	r3, r3, #21
 80030fa:	e7e1      	b.n	80030c0 <__aeabi_f2d+0x20>
 80030fc:	2d00      	cmp	r5, #0
 80030fe:	d009      	beq.n	8003114 <__aeabi_f2d+0x74>
 8003100:	0b32      	lsrs	r2, r6, #12
 8003102:	2680      	movs	r6, #128	; 0x80
 8003104:	0336      	lsls	r6, r6, #12
 8003106:	4b09      	ldr	r3, [pc, #36]	; (800312c <__aeabi_f2d+0x8c>)
 8003108:	076d      	lsls	r5, r5, #29
 800310a:	4316      	orrs	r6, r2
 800310c:	e7d8      	b.n	80030c0 <__aeabi_f2d+0x20>
 800310e:	2300      	movs	r3, #0
 8003110:	2600      	movs	r6, #0
 8003112:	e7d5      	b.n	80030c0 <__aeabi_f2d+0x20>
 8003114:	2600      	movs	r6, #0
 8003116:	4b05      	ldr	r3, [pc, #20]	; (800312c <__aeabi_f2d+0x8c>)
 8003118:	e7d2      	b.n	80030c0 <__aeabi_f2d+0x20>
 800311a:	0003      	movs	r3, r0
 800311c:	002a      	movs	r2, r5
 800311e:	3b0b      	subs	r3, #11
 8003120:	409a      	lsls	r2, r3
 8003122:	2500      	movs	r5, #0
 8003124:	e7e3      	b.n	80030ee <__aeabi_f2d+0x4e>
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	00000389 	.word	0x00000389
 800312c:	000007ff 	.word	0x000007ff

08003130 <__aeabi_d2f>:
 8003130:	0002      	movs	r2, r0
 8003132:	004b      	lsls	r3, r1, #1
 8003134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003136:	0308      	lsls	r0, r1, #12
 8003138:	0d5b      	lsrs	r3, r3, #21
 800313a:	4e3d      	ldr	r6, [pc, #244]	; (8003230 <__aeabi_d2f+0x100>)
 800313c:	0fcc      	lsrs	r4, r1, #31
 800313e:	0a40      	lsrs	r0, r0, #9
 8003140:	0f51      	lsrs	r1, r2, #29
 8003142:	1c5f      	adds	r7, r3, #1
 8003144:	4308      	orrs	r0, r1
 8003146:	00d5      	lsls	r5, r2, #3
 8003148:	4237      	tst	r7, r6
 800314a:	d00a      	beq.n	8003162 <__aeabi_d2f+0x32>
 800314c:	4939      	ldr	r1, [pc, #228]	; (8003234 <__aeabi_d2f+0x104>)
 800314e:	185e      	adds	r6, r3, r1
 8003150:	2efe      	cmp	r6, #254	; 0xfe
 8003152:	dd16      	ble.n	8003182 <__aeabi_d2f+0x52>
 8003154:	23ff      	movs	r3, #255	; 0xff
 8003156:	2100      	movs	r1, #0
 8003158:	05db      	lsls	r3, r3, #23
 800315a:	430b      	orrs	r3, r1
 800315c:	07e0      	lsls	r0, r4, #31
 800315e:	4318      	orrs	r0, r3
 8003160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <__aeabi_d2f+0x44>
 8003166:	4328      	orrs	r0, r5
 8003168:	d027      	beq.n	80031ba <__aeabi_d2f+0x8a>
 800316a:	2105      	movs	r1, #5
 800316c:	0189      	lsls	r1, r1, #6
 800316e:	0a49      	lsrs	r1, r1, #9
 8003170:	b2db      	uxtb	r3, r3
 8003172:	e7f1      	b.n	8003158 <__aeabi_d2f+0x28>
 8003174:	4305      	orrs	r5, r0
 8003176:	d0ed      	beq.n	8003154 <__aeabi_d2f+0x24>
 8003178:	2180      	movs	r1, #128	; 0x80
 800317a:	03c9      	lsls	r1, r1, #15
 800317c:	23ff      	movs	r3, #255	; 0xff
 800317e:	4301      	orrs	r1, r0
 8003180:	e7ea      	b.n	8003158 <__aeabi_d2f+0x28>
 8003182:	2e00      	cmp	r6, #0
 8003184:	dd1c      	ble.n	80031c0 <__aeabi_d2f+0x90>
 8003186:	0192      	lsls	r2, r2, #6
 8003188:	0011      	movs	r1, r2
 800318a:	1e4a      	subs	r2, r1, #1
 800318c:	4191      	sbcs	r1, r2
 800318e:	00c0      	lsls	r0, r0, #3
 8003190:	0f6d      	lsrs	r5, r5, #29
 8003192:	4301      	orrs	r1, r0
 8003194:	4329      	orrs	r1, r5
 8003196:	074b      	lsls	r3, r1, #29
 8003198:	d048      	beq.n	800322c <__aeabi_d2f+0xfc>
 800319a:	230f      	movs	r3, #15
 800319c:	400b      	ands	r3, r1
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d000      	beq.n	80031a4 <__aeabi_d2f+0x74>
 80031a2:	3104      	adds	r1, #4
 80031a4:	2380      	movs	r3, #128	; 0x80
 80031a6:	04db      	lsls	r3, r3, #19
 80031a8:	400b      	ands	r3, r1
 80031aa:	d03f      	beq.n	800322c <__aeabi_d2f+0xfc>
 80031ac:	1c72      	adds	r2, r6, #1
 80031ae:	2efe      	cmp	r6, #254	; 0xfe
 80031b0:	d0d0      	beq.n	8003154 <__aeabi_d2f+0x24>
 80031b2:	0189      	lsls	r1, r1, #6
 80031b4:	0a49      	lsrs	r1, r1, #9
 80031b6:	b2d3      	uxtb	r3, r2
 80031b8:	e7ce      	b.n	8003158 <__aeabi_d2f+0x28>
 80031ba:	2300      	movs	r3, #0
 80031bc:	2100      	movs	r1, #0
 80031be:	e7cb      	b.n	8003158 <__aeabi_d2f+0x28>
 80031c0:	0032      	movs	r2, r6
 80031c2:	3217      	adds	r2, #23
 80031c4:	db22      	blt.n	800320c <__aeabi_d2f+0xdc>
 80031c6:	2180      	movs	r1, #128	; 0x80
 80031c8:	221e      	movs	r2, #30
 80031ca:	0409      	lsls	r1, r1, #16
 80031cc:	4308      	orrs	r0, r1
 80031ce:	1b92      	subs	r2, r2, r6
 80031d0:	2a1f      	cmp	r2, #31
 80031d2:	dd1d      	ble.n	8003210 <__aeabi_d2f+0xe0>
 80031d4:	2102      	movs	r1, #2
 80031d6:	4249      	negs	r1, r1
 80031d8:	1b8e      	subs	r6, r1, r6
 80031da:	0001      	movs	r1, r0
 80031dc:	40f1      	lsrs	r1, r6
 80031de:	000e      	movs	r6, r1
 80031e0:	2a20      	cmp	r2, #32
 80031e2:	d004      	beq.n	80031ee <__aeabi_d2f+0xbe>
 80031e4:	4a14      	ldr	r2, [pc, #80]	; (8003238 <__aeabi_d2f+0x108>)
 80031e6:	4694      	mov	ip, r2
 80031e8:	4463      	add	r3, ip
 80031ea:	4098      	lsls	r0, r3
 80031ec:	4305      	orrs	r5, r0
 80031ee:	0029      	movs	r1, r5
 80031f0:	1e4d      	subs	r5, r1, #1
 80031f2:	41a9      	sbcs	r1, r5
 80031f4:	4331      	orrs	r1, r6
 80031f6:	2600      	movs	r6, #0
 80031f8:	074b      	lsls	r3, r1, #29
 80031fa:	d1ce      	bne.n	800319a <__aeabi_d2f+0x6a>
 80031fc:	2080      	movs	r0, #128	; 0x80
 80031fe:	000b      	movs	r3, r1
 8003200:	04c0      	lsls	r0, r0, #19
 8003202:	2201      	movs	r2, #1
 8003204:	4003      	ands	r3, r0
 8003206:	4201      	tst	r1, r0
 8003208:	d1d3      	bne.n	80031b2 <__aeabi_d2f+0x82>
 800320a:	e7af      	b.n	800316c <__aeabi_d2f+0x3c>
 800320c:	2300      	movs	r3, #0
 800320e:	e7ac      	b.n	800316a <__aeabi_d2f+0x3a>
 8003210:	490a      	ldr	r1, [pc, #40]	; (800323c <__aeabi_d2f+0x10c>)
 8003212:	468c      	mov	ip, r1
 8003214:	0029      	movs	r1, r5
 8003216:	4463      	add	r3, ip
 8003218:	40d1      	lsrs	r1, r2
 800321a:	409d      	lsls	r5, r3
 800321c:	000a      	movs	r2, r1
 800321e:	0029      	movs	r1, r5
 8003220:	4098      	lsls	r0, r3
 8003222:	1e4d      	subs	r5, r1, #1
 8003224:	41a9      	sbcs	r1, r5
 8003226:	4301      	orrs	r1, r0
 8003228:	4311      	orrs	r1, r2
 800322a:	e7e4      	b.n	80031f6 <__aeabi_d2f+0xc6>
 800322c:	0033      	movs	r3, r6
 800322e:	e79d      	b.n	800316c <__aeabi_d2f+0x3c>
 8003230:	000007fe 	.word	0x000007fe
 8003234:	fffffc80 	.word	0xfffffc80
 8003238:	fffffca2 	.word	0xfffffca2
 800323c:	fffffc82 	.word	0xfffffc82

08003240 <__clzsi2>:
 8003240:	211c      	movs	r1, #28
 8003242:	2301      	movs	r3, #1
 8003244:	041b      	lsls	r3, r3, #16
 8003246:	4298      	cmp	r0, r3
 8003248:	d301      	bcc.n	800324e <__clzsi2+0xe>
 800324a:	0c00      	lsrs	r0, r0, #16
 800324c:	3910      	subs	r1, #16
 800324e:	0a1b      	lsrs	r3, r3, #8
 8003250:	4298      	cmp	r0, r3
 8003252:	d301      	bcc.n	8003258 <__clzsi2+0x18>
 8003254:	0a00      	lsrs	r0, r0, #8
 8003256:	3908      	subs	r1, #8
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	4298      	cmp	r0, r3
 800325c:	d301      	bcc.n	8003262 <__clzsi2+0x22>
 800325e:	0900      	lsrs	r0, r0, #4
 8003260:	3904      	subs	r1, #4
 8003262:	a202      	add	r2, pc, #8	; (adr r2, 800326c <__clzsi2+0x2c>)
 8003264:	5c10      	ldrb	r0, [r2, r0]
 8003266:	1840      	adds	r0, r0, r1
 8003268:	4770      	bx	lr
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	02020304 	.word	0x02020304
 8003270:	01010101 	.word	0x01010101
	...

0800327c <__clzdi2>:
 800327c:	b510      	push	{r4, lr}
 800327e:	2900      	cmp	r1, #0
 8003280:	d103      	bne.n	800328a <__clzdi2+0xe>
 8003282:	f7ff ffdd 	bl	8003240 <__clzsi2>
 8003286:	3020      	adds	r0, #32
 8003288:	e002      	b.n	8003290 <__clzdi2+0x14>
 800328a:	1c08      	adds	r0, r1, #0
 800328c:	f7ff ffd8 	bl	8003240 <__clzsi2>
 8003290:	bd10      	pop	{r4, pc}
 8003292:	46c0      	nop			; (mov r8, r8)

08003294 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003294:	480d      	ldr	r0, [pc, #52]	; (80032cc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003296:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003298:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800329a:	e003      	b.n	80032a4 <LoopCopyDataInit>

0800329c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800329c:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800329e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80032a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80032a2:	3104      	adds	r1, #4

080032a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80032a4:	480b      	ldr	r0, [pc, #44]	; (80032d4 <LoopForever+0xa>)
  ldr  r3, =_edata
 80032a6:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <LoopForever+0xe>)
  adds  r2, r0, r1
 80032a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80032ac:	d3f6      	bcc.n	800329c <CopyDataInit>
  ldr  r2, =_sbss
 80032ae:	4a0b      	ldr	r2, [pc, #44]	; (80032dc <LoopForever+0x12>)
  b  LoopFillZerobss
 80032b0:	e002      	b.n	80032b8 <LoopFillZerobss>

080032b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80032b2:	2300      	movs	r3, #0
  str  r3, [r2]
 80032b4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032b6:	3204      	adds	r2, #4

080032b8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80032b8:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <LoopForever+0x16>)
  cmp  r2, r3
 80032ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032bc:	d3f9      	bcc.n	80032b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80032be:	f001 fceb 	bl	8004c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032c2:	f00c fc57 	bl	800fb74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032c6:	f00c f803 	bl	800f2d0 <main>

080032ca <LoopForever>:

LoopForever:
    b LoopForever
 80032ca:	e7fe      	b.n	80032ca <LoopForever>
   ldr   r0, =_estack
 80032cc:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80032d0:	080113c4 	.word	0x080113c4
  ldr  r0, =_sdata
 80032d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80032d8:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 80032dc:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 80032e0:	20001724 	.word	0x20001724

080032e4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032e4:	e7fe      	b.n	80032e4 <ADC1_COMP_IRQHandler>
	...

080032e8 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80032e8:	b500      	push	{lr}
 80032ea:	b08b      	sub	sp, #44	; 0x2c
 80032ec:	2803      	cmp	r0, #3
 80032ee:	d80c      	bhi.n	800330a <BSP_LED_Init+0x22>
 80032f0:	4b1b      	ldr	r3, [pc, #108]	; (8003360 <BSP_LED_Init+0x78>)
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE( Led );
 80032f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f4:	f7fc ff08 	bl	8000108 <__gnu_thumb1_case_uqi>
 80032f8:	2b231b02 	.word	0x2b231b02
 80032fc:	2102      	movs	r1, #2
 80032fe:	430a      	orrs	r2, r1
 8003300:	62da      	str	r2, [r3, #44]	; 0x2c
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	400b      	ands	r3, r1
 8003306:	9301      	str	r3, [sp, #4]
 8003308:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800330a:	4b16      	ldr	r3, [pc, #88]	; (8003364 <BSP_LED_Init+0x7c>)
 800330c:	0042      	lsls	r2, r0, #1
 800330e:	5ad3      	ldrh	r3, [r2, r3]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8003310:	0080      	lsls	r0, r0, #2
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8003312:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003314:	2301      	movs	r3, #1
 8003316:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003318:	2300      	movs	r3, #0
 800331a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800331c:	3303      	adds	r3, #3
 800331e:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <BSP_LED_Init+0x80>)
 8003322:	a905      	add	r1, sp, #20
 8003324:	58c0      	ldr	r0, [r0, r3]
 8003326:	f002 f957 	bl	80055d8 <HAL_GPIO_Init>
}
 800332a:	b00b      	add	sp, #44	; 0x2c
 800332c:	bd00      	pop	{pc}
  LEDx_GPIO_CLK_ENABLE( Led );
 800332e:	2101      	movs	r1, #1
 8003330:	430a      	orrs	r2, r1
 8003332:	62da      	str	r2, [r3, #44]	; 0x2c
 8003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003336:	400b      	ands	r3, r1
 8003338:	9302      	str	r3, [sp, #8]
 800333a:	9b02      	ldr	r3, [sp, #8]
 800333c:	e7e5      	b.n	800330a <BSP_LED_Init+0x22>
 800333e:	2102      	movs	r1, #2
 8003340:	430a      	orrs	r2, r1
 8003342:	62da      	str	r2, [r3, #44]	; 0x2c
 8003344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003346:	400b      	ands	r3, r1
 8003348:	9303      	str	r3, [sp, #12]
 800334a:	9b03      	ldr	r3, [sp, #12]
 800334c:	e7dd      	b.n	800330a <BSP_LED_Init+0x22>
 800334e:	2102      	movs	r1, #2
 8003350:	430a      	orrs	r2, r1
 8003352:	62da      	str	r2, [r3, #44]	; 0x2c
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	400b      	ands	r3, r1
 8003358:	9304      	str	r3, [sp, #16]
 800335a:	9b04      	ldr	r3, [sp, #16]
 800335c:	e7d5      	b.n	800330a <BSP_LED_Init+0x22>
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	40021000 	.word	0x40021000
 8003364:	08010740 	.word	0x08010740
 8003368:	20000000 	.word	0x20000000

0800336c <BSP_LED_On>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 800336c:	4b05      	ldr	r3, [pc, #20]	; (8003384 <BSP_LED_On+0x18>)
{
 800336e:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8003370:	0042      	lsls	r2, r0, #1
 8003372:	5ad1      	ldrh	r1, [r2, r3]
 8003374:	4b04      	ldr	r3, [pc, #16]	; (8003388 <BSP_LED_On+0x1c>)
 8003376:	0080      	lsls	r0, r0, #2
 8003378:	2201      	movs	r2, #1
 800337a:	58c0      	ldr	r0, [r0, r3]
 800337c:	f002 f9ea 	bl	8005754 <HAL_GPIO_WritePin>
}
 8003380:	bd10      	pop	{r4, pc}
 8003382:	46c0      	nop			; (mov r8, r8)
 8003384:	08010740 	.word	0x08010740
 8003388:	20000000 	.word	0x20000000

0800338c <BSP_LED_Off>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 800338c:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <BSP_LED_Off+0x18>)
{
 800338e:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8003390:	0042      	lsls	r2, r0, #1
 8003392:	5ad1      	ldrh	r1, [r2, r3]
 8003394:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <BSP_LED_Off+0x1c>)
 8003396:	0080      	lsls	r0, r0, #2
 8003398:	2200      	movs	r2, #0
 800339a:	58c0      	ldr	r0, [r0, r3]
 800339c:	f002 f9da 	bl	8005754 <HAL_GPIO_WritePin>
}
 80033a0:	bd10      	pop	{r4, pc}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	08010740 	.word	0x08010740
 80033a8:	20000000 	.word	0x20000000

080033ac <SX1276GetWakeTime>:
};

uint32_t SX1276GetWakeTime( void )
{
  return  BOARD_WAKEUP_TIME;
}
 80033ac:	2005      	movs	r0, #5
 80033ae:	4770      	bx	lr

080033b0 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
    // Implement check. Currently all frequencies are supported
    return true;
}
 80033b0:	2001      	movs	r0, #1
 80033b2:	4770      	bx	lr

080033b4 <SX1276SetRfTxPower>:
{
 80033b4:	b570      	push	{r4, r5, r6, lr}
 80033b6:	0005      	movs	r5, r0
    paConfig = SX1276Read( REG_PACONFIG );
 80033b8:	2009      	movs	r0, #9
 80033ba:	f000 fa05 	bl	80037c8 <SX1276Read>
 80033be:	0006      	movs	r6, r0
    paDac = SX1276Read( REG_PADAC );
 80033c0:	204d      	movs	r0, #77	; 0x4d
 80033c2:	f000 fa01 	bl	80037c8 <SX1276Read>
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( power );
 80033c6:	217f      	movs	r1, #127	; 0x7f
    paDac = SX1276Read( REG_PADAC );
 80033c8:	0004      	movs	r4, r0
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( power );
 80033ca:	4031      	ands	r1, r6
        return RF_PACONFIG_PASELECT_PABOOST;
 80033cc:	2680      	movs	r6, #128	; 0x80
    if (power >14)
 80033ce:	2d0e      	cmp	r5, #14
 80033d0:	dc00      	bgt.n	80033d4 <SX1276SetRfTxPower+0x20>
        return RF_PACONFIG_PASELECT_RFO;
 80033d2:	2600      	movs	r6, #0
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( power );
 80033d4:	4331      	orrs	r1, r6
 80033d6:	b249      	sxtb	r1, r1
    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 80033d8:	2900      	cmp	r1, #0
 80033da:	da1f      	bge.n	800341c <SX1276SetRfTxPower+0x68>
        if( power > 17 )
 80033dc:	230f      	movs	r3, #15
 80033de:	2407      	movs	r4, #7
 80033e0:	4399      	bics	r1, r3
 80033e2:	2d11      	cmp	r5, #17
 80033e4:	dd10      	ble.n	8003408 <SX1276SetRfTxPower+0x54>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 80033e6:	4304      	orrs	r4, r0
 80033e8:	b2e4      	uxtb	r4, r4
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 80033ea:	1c2b      	adds	r3, r5, #0
 80033ec:	2d14      	cmp	r5, #20
 80033ee:	dd00      	ble.n	80033f2 <SX1276SetRfTxPower+0x3e>
 80033f0:	2314      	movs	r3, #20
 80033f2:	3b05      	subs	r3, #5
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 80033f4:	4319      	orrs	r1, r3
    SX1276Write( REG_PACONFIG, paConfig );
 80033f6:	2009      	movs	r0, #9
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 80033f8:	b2c9      	uxtb	r1, r1
    SX1276Write( REG_PACONFIG, paConfig );
 80033fa:	f000 f992 	bl	8003722 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 80033fe:	0021      	movs	r1, r4
 8003400:	204d      	movs	r0, #77	; 0x4d
 8003402:	f000 f98e 	bl	8003722 <SX1276Write>
}
 8003406:	bd70      	pop	{r4, r5, r6, pc}
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8003408:	43a0      	bics	r0, r4
 800340a:	2404      	movs	r4, #4
 800340c:	4304      	orrs	r4, r0
 800340e:	b2e4      	uxtb	r4, r4
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8003410:	1c2b      	adds	r3, r5, #0
 8003412:	2d02      	cmp	r5, #2
 8003414:	da00      	bge.n	8003418 <SX1276SetRfTxPower+0x64>
 8003416:	2302      	movs	r3, #2
 8003418:	3b02      	subs	r3, #2
 800341a:	e7eb      	b.n	80033f4 <SX1276SetRfTxPower+0x40>
        if( power > 0 )
 800341c:	2d00      	cmp	r5, #0
 800341e:	dd05      	ble.n	800342c <SX1276SetRfTxPower+0x78>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 8003420:	1c2b      	adds	r3, r5, #0
 8003422:	2d0f      	cmp	r5, #15
 8003424:	dd00      	ble.n	8003428 <SX1276SetRfTxPower+0x74>
 8003426:	230f      	movs	r3, #15
 8003428:	2170      	movs	r1, #112	; 0x70
 800342a:	e7e3      	b.n	80033f4 <SX1276SetRfTxPower+0x40>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 800342c:	1c29      	adds	r1, r5, #0
 800342e:	1d2b      	adds	r3, r5, #4
 8003430:	da01      	bge.n	8003436 <SX1276SetRfTxPower+0x82>
 8003432:	4b02      	ldr	r3, [pc, #8]	; (800343c <SX1276SetRfTxPower+0x88>)
 8003434:	7819      	ldrb	r1, [r3, #0]
 8003436:	3104      	adds	r1, #4
 8003438:	e7dd      	b.n	80033f6 <SX1276SetRfTxPower+0x42>
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	08010db8 	.word	0x08010db8

08003440 <SX1276IoInit>:
{
 8003440:	b530      	push	{r4, r5, lr}
 8003442:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct={0};
 8003444:	2214      	movs	r2, #20
 8003446:	2100      	movs	r1, #0
 8003448:	a801      	add	r0, sp, #4
 800344a:	f00c fbc0 	bl	800fbce <memset>
  SX1276BoardInit( &BoardCallbacks );
 800344e:	4816      	ldr	r0, [pc, #88]	; (80034a8 <SX1276IoInit+0x68>)
 8003450:	f000 f914 	bl	800367c <SX1276BoardInit>
  initStruct.Mode =GPIO_MODE_IT_RISING;
 8003454:	4b15      	ldr	r3, [pc, #84]	; (80034ac <SX1276IoInit+0x6c>)
  initStruct.Pull = GPIO_PULLDOWN;
 8003456:	2502      	movs	r5, #2
  initStruct.Mode =GPIO_MODE_IT_RISING;
 8003458:	9302      	str	r3, [sp, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 800345a:	2303      	movs	r3, #3
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 800345c:	4c14      	ldr	r4, [pc, #80]	; (80034b0 <SX1276IoInit+0x70>)
 800345e:	aa01      	add	r2, sp, #4
 8003460:	0020      	movs	r0, r4
 8003462:	2110      	movs	r1, #16
  initStruct.Speed = GPIO_SPEED_HIGH;
 8003464:	9304      	str	r3, [sp, #16]
  initStruct.Pull = GPIO_PULLDOWN;
 8003466:	9503      	str	r5, [sp, #12]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8003468:	f00b fb26 	bl	800eab8 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 800346c:	0029      	movs	r1, r5
 800346e:	0020      	movs	r0, r4
 8003470:	aa01      	add	r2, sp, #4
 8003472:	f00b fb21 	bl	800eab8 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8003476:	0020      	movs	r0, r4
 8003478:	aa01      	add	r2, sp, #4
 800347a:	2101      	movs	r1, #1
 800347c:	f00b fb1c 	bl	800eab8 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8003480:	2180      	movs	r1, #128	; 0x80
 8003482:	aa01      	add	r2, sp, #4
 8003484:	480b      	ldr	r0, [pc, #44]	; (80034b4 <SX1276IoInit+0x74>)
 8003486:	0189      	lsls	r1, r1, #6
 8003488:	f00b fb16 	bl	800eab8 <HW_GPIO_Init>
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 800348c:	2301      	movs	r3, #1
  HW_GPIO_Init( RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, &initStruct );
 800348e:	2180      	movs	r1, #128	; 0x80
 8003490:	20a0      	movs	r0, #160	; 0xa0
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8003492:	9302      	str	r3, [sp, #8]
  initStruct.Pull = GPIO_NOPULL;  
 8003494:	2300      	movs	r3, #0
  HW_GPIO_Init( RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, &initStruct );
 8003496:	aa01      	add	r2, sp, #4
 8003498:	0149      	lsls	r1, r1, #5
 800349a:	05c0      	lsls	r0, r0, #23
  initStruct.Pull = GPIO_NOPULL;  
 800349c:	9303      	str	r3, [sp, #12]
  HW_GPIO_Init( RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, &initStruct );
 800349e:	f00b fb0b 	bl	800eab8 <HW_GPIO_Init>
}
 80034a2:	b007      	add	sp, #28
 80034a4:	bd30      	pop	{r4, r5, pc}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	20000014 	.word	0x20000014
 80034ac:	10110000 	.word	0x10110000
 80034b0:	50000400 	.word	0x50000400
 80034b4:	50000800 	.word	0x50000800

080034b8 <SX1276IoDeInit>:
{
 80034b8:	b530      	push	{r4, r5, lr}
  initStruct.Pull = GPIO_PULLDOWN;
 80034ba:	2502      	movs	r5, #2
{
 80034bc:	b087      	sub	sp, #28
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80034be:	4c10      	ldr	r4, [pc, #64]	; (8003500 <SX1276IoDeInit+0x48>)
  GPIO_InitTypeDef initStruct={0};
 80034c0:	2214      	movs	r2, #20
 80034c2:	2100      	movs	r1, #0
 80034c4:	a801      	add	r0, sp, #4
 80034c6:	f00c fb82 	bl	800fbce <memset>
  initStruct.Mode = GPIO_MODE_IT_RISING ; //GPIO_MODE_ANALOG;
 80034ca:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <SX1276IoDeInit+0x4c>)
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80034cc:	0020      	movs	r0, r4
 80034ce:	aa01      	add	r2, sp, #4
 80034d0:	2110      	movs	r1, #16
  initStruct.Mode = GPIO_MODE_IT_RISING ; //GPIO_MODE_ANALOG;
 80034d2:	9302      	str	r3, [sp, #8]
  initStruct.Pull = GPIO_PULLDOWN;
 80034d4:	9503      	str	r5, [sp, #12]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80034d6:	f00b faef 	bl	800eab8 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 80034da:	0029      	movs	r1, r5
 80034dc:	0020      	movs	r0, r4
 80034de:	aa01      	add	r2, sp, #4
 80034e0:	f00b faea 	bl	800eab8 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 80034e4:	0020      	movs	r0, r4
 80034e6:	aa01      	add	r2, sp, #4
 80034e8:	2101      	movs	r1, #1
 80034ea:	f00b fae5 	bl	800eab8 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 80034ee:	2180      	movs	r1, #128	; 0x80
 80034f0:	4805      	ldr	r0, [pc, #20]	; (8003508 <SX1276IoDeInit+0x50>)
 80034f2:	aa01      	add	r2, sp, #4
 80034f4:	0189      	lsls	r1, r1, #6
 80034f6:	f00b fadf 	bl	800eab8 <HW_GPIO_Init>
}
 80034fa:	b007      	add	sp, #28
 80034fc:	bd30      	pop	{r4, r5, pc}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	50000400 	.word	0x50000400
 8003504:	10110000 	.word	0x10110000
 8003508:	50000800 	.word	0x50000800

0800350c <SX1276SetAntSwLowPower>:
{
 800350c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef initStruct={0};
 800350e:	2214      	movs	r2, #20
{
 8003510:	0004      	movs	r4, r0
 8003512:	b086      	sub	sp, #24
    if( status == false )
 8003514:	2800      	cmp	r0, #0
 8003516:	d12a      	bne.n	800356e <SX1276SetAntSwLowPower+0x62>
  GPIO_InitTypeDef initStruct={0};
 8003518:	0001      	movs	r1, r0
 800351a:	a801      	add	r0, sp, #4
 800351c:	f00c fb57 	bl	800fbce <memset>
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8003520:	2301      	movs	r3, #1
  initStruct.Pull = GPIO_NOPULL; 
 8003522:	9403      	str	r4, [sp, #12]
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8003524:	9302      	str	r3, [sp, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8003526:	3302      	adds	r3, #2
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 8003528:	20a0      	movs	r0, #160	; 0xa0
 800352a:	aa01      	add	r2, sp, #4
 800352c:	2102      	movs	r1, #2
 800352e:	05c0      	lsls	r0, r0, #23
  initStruct.Speed = GPIO_SPEED_HIGH;
 8003530:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 8003532:	f00b fac1 	bl	800eab8 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 0);
 8003536:	20a0      	movs	r0, #160	; 0xa0
 8003538:	0022      	movs	r2, r4
 800353a:	2102      	movs	r1, #2
 800353c:	05c0      	lsls	r0, r0, #23
 800353e:	f00b fb2f 	bl	800eba0 <HW_GPIO_Write>
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, &initStruct  ); 
 8003542:	aa01      	add	r2, sp, #4
 8003544:	2102      	movs	r1, #2
 8003546:	480e      	ldr	r0, [pc, #56]	; (8003580 <SX1276SetAntSwLowPower+0x74>)
 8003548:	f00b fab6 	bl	800eab8 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 0);
 800354c:	0022      	movs	r2, r4
 800354e:	2102      	movs	r1, #2
 8003550:	480b      	ldr	r0, [pc, #44]	; (8003580 <SX1276SetAntSwLowPower+0x74>)
 8003552:	f00b fb25 	bl	800eba0 <HW_GPIO_Write>
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, &initStruct  ); 
 8003556:	aa01      	add	r2, sp, #4
 8003558:	2104      	movs	r1, #4
 800355a:	4809      	ldr	r0, [pc, #36]	; (8003580 <SX1276SetAntSwLowPower+0x74>)
 800355c:	f00b faac 	bl	800eab8 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 0);
 8003560:	0022      	movs	r2, r4
 8003562:	2104      	movs	r1, #4
 8003564:	4806      	ldr	r0, [pc, #24]	; (8003580 <SX1276SetAntSwLowPower+0x74>)
 8003566:	f00b fb1b 	bl	800eba0 <HW_GPIO_Write>
}
 800356a:	b006      	add	sp, #24
 800356c:	bd10      	pop	{r4, pc}
  GPIO_InitTypeDef initStruct={0};
 800356e:	2100      	movs	r1, #0
 8003570:	a801      	add	r0, sp, #4
 8003572:	f00c fb2c 	bl	800fbce <memset>
  initStruct.Mode = GPIO_MODE_ANALOG ;
 8003576:	2303      	movs	r3, #3
  initStruct.Pull = GPIO_NOPULL;
 8003578:	2400      	movs	r4, #0
  initStruct.Mode = GPIO_MODE_ANALOG ;
 800357a:	9302      	str	r3, [sp, #8]
  initStruct.Pull = GPIO_NOPULL;
 800357c:	e7d4      	b.n	8003528 <SX1276SetAntSwLowPower+0x1c>
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	50000800 	.word	0x50000800

08003584 <SX1276IoIrqInit>:
{
 8003584:	b570      	push	{r4, r5, r6, lr}
 8003586:	0004      	movs	r4, r0
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 8003588:	4d0d      	ldr	r5, [pc, #52]	; (80035c0 <SX1276IoIrqInit+0x3c>)
 800358a:	6803      	ldr	r3, [r0, #0]
 800358c:	2200      	movs	r2, #0
 800358e:	0028      	movs	r0, r5
 8003590:	2110      	movs	r1, #16
 8003592:	f00b fadd 	bl	800eb50 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 8003596:	0028      	movs	r0, r5
 8003598:	6863      	ldr	r3, [r4, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	2102      	movs	r1, #2
 800359e:	f00b fad7 	bl	800eb50 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 80035a2:	0028      	movs	r0, r5
 80035a4:	68a3      	ldr	r3, [r4, #8]
 80035a6:	2200      	movs	r2, #0
 80035a8:	2101      	movs	r1, #1
 80035aa:	f00b fad1 	bl	800eb50 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 80035ae:	2180      	movs	r1, #128	; 0x80
 80035b0:	2200      	movs	r2, #0
 80035b2:	68e3      	ldr	r3, [r4, #12]
 80035b4:	4803      	ldr	r0, [pc, #12]	; (80035c4 <SX1276IoIrqInit+0x40>)
 80035b6:	0189      	lsls	r1, r1, #6
 80035b8:	f00b faca 	bl	800eb50 <HW_GPIO_SetIrq>
}
 80035bc:	bd70      	pop	{r4, r5, r6, pc}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	50000400 	.word	0x50000400
 80035c4:	50000800 	.word	0x50000800

080035c8 <SX1276SetAntSw>:
{
 80035c8:	b570      	push	{r4, r5, r6, lr}
 80035ca:	0004      	movs	r4, r0
 uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 80035cc:	2009      	movs	r0, #9
 80035ce:	f000 f8fb 	bl	80037c8 <SX1276Read>
    switch( opMode )
 80035d2:	4d0b      	ldr	r5, [pc, #44]	; (8003600 <SX1276SetAntSw+0x38>)
 80035d4:	2c03      	cmp	r4, #3
 80035d6:	d10a      	bne.n	80035ee <SX1276SetAntSw+0x26>
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 1 );
 80035d8:	2201      	movs	r2, #1
 80035da:	2102      	movs	r1, #2
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 80035dc:	0603      	lsls	r3, r0, #24
 80035de:	d400      	bmi.n	80035e2 <SX1276SetAntSw+0x1a>
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 1 );
 80035e0:	2104      	movs	r1, #4
 80035e2:	4808      	ldr	r0, [pc, #32]	; (8003604 <SX1276SetAntSw+0x3c>)
 80035e4:	f00b fadc 	bl	800eba0 <HW_GPIO_Write>
      SX1276.RxTx = 1;
 80035e8:	2301      	movs	r3, #1
 80035ea:	702b      	strb	r3, [r5, #0]
}
 80035ec:	bd70      	pop	{r4, r5, r6, pc}
     HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 1 );
 80035ee:	20a0      	movs	r0, #160	; 0xa0
     SX1276.RxTx = 0;
 80035f0:	2300      	movs	r3, #0
     HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 1 );
 80035f2:	2201      	movs	r2, #1
 80035f4:	2102      	movs	r1, #2
 80035f6:	05c0      	lsls	r0, r0, #23
     SX1276.RxTx = 0;
 80035f8:	702b      	strb	r3, [r5, #0]
     HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 1 );
 80035fa:	f00b fad1 	bl	800eba0 <HW_GPIO_Write>
}
 80035fe:	e7f5      	b.n	80035ec <SX1276SetAntSw+0x24>
 8003600:	20001584 	.word	0x20001584
 8003604:	50000800 	.word	0x50000800

08003608 <SX1276SetXO>:
{
 8003608:	0002      	movs	r2, r0
 800360a:	b510      	push	{r4, lr}
  if (state == SET )
 800360c:	2801      	cmp	r0, #1
 800360e:	d109      	bne.n	8003624 <SX1276SetXO+0x1c>
    TCXO_ON(); 
 8003610:	2180      	movs	r1, #128	; 0x80
 8003612:	20a0      	movs	r0, #160	; 0xa0
 8003614:	0149      	lsls	r1, r1, #5
 8003616:	05c0      	lsls	r0, r0, #23
 8003618:	f00b fac2 	bl	800eba0 <HW_GPIO_Write>
    DelayMs( BOARD_WAKEUP_TIME ); //start up time of TCXO
 800361c:	2005      	movs	r0, #5
 800361e:	f00b feaf 	bl	800f380 <HAL_Delay>
}
 8003622:	bd10      	pop	{r4, pc}
    TCXO_OFF(); 
 8003624:	2180      	movs	r1, #128	; 0x80
 8003626:	20a0      	movs	r0, #160	; 0xa0
 8003628:	2200      	movs	r2, #0
 800362a:	0149      	lsls	r1, r1, #5
 800362c:	05c0      	lsls	r0, r0, #23
 800362e:	f00b fab7 	bl	800eba0 <HW_GPIO_Write>
}
 8003632:	e7f6      	b.n	8003622 <SX1276SetXO+0x1a>

08003634 <GetFskBandwidthRegValue>:
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8003634:	4a09      	ldr	r2, [pc, #36]	; (800365c <GetFskBandwidthRegValue+0x28>)
{
 8003636:	2300      	movs	r3, #0
 8003638:	0011      	movs	r1, r2
 800363a:	b510      	push	{r4, lr}
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 800363c:	6814      	ldr	r4, [r2, #0]
 800363e:	4284      	cmp	r4, r0
 8003640:	d806      	bhi.n	8003650 <GetFskBandwidthRegValue+0x1c>
 8003642:	6894      	ldr	r4, [r2, #8]
 8003644:	4284      	cmp	r4, r0
 8003646:	d903      	bls.n	8003650 <GetFskBandwidthRegValue+0x1c>
        {
            return FskBandwidths[i].RegValue;
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	18cb      	adds	r3, r1, r3
 800364c:	7918      	ldrb	r0, [r3, #4]
        }
    }
    // ERROR: Value not found
    while( 1 );
}
 800364e:	bd10      	pop	{r4, pc}
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8003650:	3301      	adds	r3, #1
 8003652:	3208      	adds	r2, #8
 8003654:	2b15      	cmp	r3, #21
 8003656:	d1f1      	bne.n	800363c <GetFskBandwidthRegValue+0x8>
    while( 1 );
 8003658:	e7fe      	b.n	8003658 <GetFskBandwidthRegValue+0x24>
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	08010808 	.word	0x08010808

08003660 <SX1276OnDio4Irq>:
    }
}

void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <SX1276OnDio4Irq+0x18>)
 8003662:	795a      	ldrb	r2, [r3, #5]
 8003664:	2a00      	cmp	r2, #0
 8003666:	d105      	bne.n	8003674 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8003668:	3330      	adds	r3, #48	; 0x30
 800366a:	781a      	ldrb	r2, [r3, #0]
 800366c:	2a00      	cmp	r2, #0
 800366e:	d101      	bne.n	8003674 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8003670:	3201      	adds	r2, #1
 8003672:	701a      	strb	r2, [r3, #0]
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8003674:	4770      	bx	lr
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	20001584 	.word	0x20001584

0800367c <SX1276BoardInit>:
    LoRaBoardCallbacks =callbacks;
 800367c:	4b01      	ldr	r3, [pc, #4]	; (8003684 <SX1276BoardInit+0x8>)
 800367e:	6018      	str	r0, [r3, #0]
}
 8003680:	4770      	bx	lr
 8003682:	46c0      	nop			; (mov r8, r8)
 8003684:	2000020c 	.word	0x2000020c

08003688 <SX1276GetStatus>:
    return SX1276.Settings.State;
 8003688:	4b01      	ldr	r3, [pc, #4]	; (8003690 <SX1276GetStatus+0x8>)
 800368a:	7918      	ldrb	r0, [r3, #4]
}
 800368c:	4770      	bx	lr
 800368e:	46c0      	nop			; (mov r8, r8)
 8003690:	20001584 	.word	0x20001584

08003694 <SX1276Reset>:
{
 8003694:	b570      	push	{r4, r5, r6, lr}
 8003696:	b086      	sub	sp, #24
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8003698:	2401      	movs	r4, #1
    GPIO_InitTypeDef initStruct = { 0 };
 800369a:	2214      	movs	r2, #20
 800369c:	2100      	movs	r1, #0
 800369e:	a801      	add	r0, sp, #4
 80036a0:	f00c fa95 	bl	800fbce <memset>
    initStruct.Pull = GPIO_NOPULL;
 80036a4:	2600      	movs	r6, #0
    initStruct.Speed = GPIO_SPEED_HIGH;
 80036a6:	2303      	movs	r3, #3
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 80036a8:	4d0d      	ldr	r5, [pc, #52]	; (80036e0 <SX1276Reset+0x4c>)
 80036aa:	0021      	movs	r1, r4
 80036ac:	0028      	movs	r0, r5
 80036ae:	aa01      	add	r2, sp, #4
    initStruct.Speed = GPIO_SPEED_HIGH;
 80036b0:	9304      	str	r3, [sp, #16]
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 80036b2:	9402      	str	r4, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 80036b4:	f00b fa00 	bl	800eab8 <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 0 );
 80036b8:	0032      	movs	r2, r6
 80036ba:	0021      	movs	r1, r4
 80036bc:	0028      	movs	r0, r5
 80036be:	f00b fa6f 	bl	800eba0 <HW_GPIO_Write>
    DelayMs( 1 );
 80036c2:	0020      	movs	r0, r4
 80036c4:	f00b fe5c 	bl	800f380 <HAL_Delay>
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 80036c8:	0021      	movs	r1, r4
 80036ca:	0028      	movs	r0, r5
 80036cc:	aa01      	add	r2, sp, #4
    initStruct.Mode = GPIO_NOPULL;
 80036ce:	9602      	str	r6, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 80036d0:	f00b f9f2 	bl	800eab8 <HW_GPIO_Init>
    DelayMs( 6 );
 80036d4:	2006      	movs	r0, #6
 80036d6:	f00b fe53 	bl	800f380 <HAL_Delay>
}
 80036da:	b006      	add	sp, #24
 80036dc:	bd70      	pop	{r4, r5, r6, pc}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	50000800 	.word	0x50000800

080036e4 <SX1276WriteBuffer>:
{
 80036e4:	b570      	push	{r4, r5, r6, lr}
 80036e6:	0006      	movs	r6, r0
 80036e8:	000c      	movs	r4, r1
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 80036ea:	20a0      	movs	r0, #160	; 0xa0
 80036ec:	2180      	movs	r1, #128	; 0x80
{
 80036ee:	0015      	movs	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 80036f0:	0209      	lsls	r1, r1, #8
 80036f2:	2200      	movs	r2, #0
 80036f4:	05c0      	lsls	r0, r0, #23
 80036f6:	f00b fa53 	bl	800eba0 <HW_GPIO_Write>
    HW_SPI_InOut( addr | 0x80 );
 80036fa:	2080      	movs	r0, #128	; 0x80
 80036fc:	4330      	orrs	r0, r6
 80036fe:	f00b fcff 	bl	800f100 <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 8003702:	1965      	adds	r5, r4, r5
 8003704:	42ac      	cmp	r4, r5
 8003706:	d107      	bne.n	8003718 <SX1276WriteBuffer+0x34>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8003708:	2180      	movs	r1, #128	; 0x80
 800370a:	20a0      	movs	r0, #160	; 0xa0
 800370c:	2201      	movs	r2, #1
 800370e:	0209      	lsls	r1, r1, #8
 8003710:	05c0      	lsls	r0, r0, #23
 8003712:	f00b fa45 	bl	800eba0 <HW_GPIO_Write>
}
 8003716:	bd70      	pop	{r4, r5, r6, pc}
        HW_SPI_InOut( buffer[i] );
 8003718:	7820      	ldrb	r0, [r4, #0]
 800371a:	f00b fcf1 	bl	800f100 <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 800371e:	3401      	adds	r4, #1
 8003720:	e7f0      	b.n	8003704 <SX1276WriteBuffer+0x20>

08003722 <SX1276Write>:
{
 8003722:	b507      	push	{r0, r1, r2, lr}
 8003724:	466b      	mov	r3, sp
 8003726:	71d9      	strb	r1, [r3, #7]
 8003728:	3307      	adds	r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 800372a:	2201      	movs	r2, #1
 800372c:	0019      	movs	r1, r3
 800372e:	f7ff ffd9 	bl	80036e4 <SX1276WriteBuffer>
}
 8003732:	bd07      	pop	{r0, r1, r2, pc}

08003734 <SX1276SetChannel>:
    SX1276.Settings.Channel = freq;
 8003734:	4b11      	ldr	r3, [pc, #68]	; (800377c <SX1276SetChannel+0x48>)
{
 8003736:	b570      	push	{r4, r5, r6, lr}
    SX_FREQ_TO_CHANNEL( channel, freq );
 8003738:	4911      	ldr	r1, [pc, #68]	; (8003780 <SX1276SetChannel+0x4c>)
    SX1276.Settings.Channel = freq;
 800373a:	6098      	str	r0, [r3, #8]
{
 800373c:	0005      	movs	r5, r0
    SX_FREQ_TO_CHANNEL( channel, freq );
 800373e:	f7fc fd87 	bl	8000250 <__aeabi_uidivmod>
 8003742:	4b10      	ldr	r3, [pc, #64]	; (8003784 <SX1276SetChannel+0x50>)
 8003744:	0208      	lsls	r0, r1, #8
 8003746:	18c0      	adds	r0, r0, r3
 8003748:	490d      	ldr	r1, [pc, #52]	; (8003780 <SX1276SetChannel+0x4c>)
 800374a:	f7fc fcfb 	bl	8000144 <__udivsi3>
 800374e:	490c      	ldr	r1, [pc, #48]	; (8003780 <SX1276SetChannel+0x4c>)
 8003750:	0004      	movs	r4, r0
 8003752:	0028      	movs	r0, r5
 8003754:	f7fc fcf6 	bl	8000144 <__udivsi3>
 8003758:	0200      	lsls	r0, r0, #8
 800375a:	1824      	adds	r4, r4, r0
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 800375c:	0c21      	lsrs	r1, r4, #16
 800375e:	2006      	movs	r0, #6
 8003760:	b2c9      	uxtb	r1, r1
 8003762:	f7ff ffde 	bl	8003722 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8003766:	0a21      	lsrs	r1, r4, #8
 8003768:	2007      	movs	r0, #7
 800376a:	b2c9      	uxtb	r1, r1
 800376c:	f7ff ffd9 	bl	8003722 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8003770:	2008      	movs	r0, #8
 8003772:	b2e1      	uxtb	r1, r4
 8003774:	f7ff ffd5 	bl	8003722 <SX1276Write>
}
 8003778:	bd70      	pop	{r4, r5, r6, pc}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	20001584 	.word	0x20001584
 8003780:	00003d09 	.word	0x00003d09
 8003784:	00001e84 	.word	0x00001e84

08003788 <SX1276ReadBuffer>:
{
 8003788:	b570      	push	{r4, r5, r6, lr}
 800378a:	0005      	movs	r5, r0
 800378c:	000c      	movs	r4, r1
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 800378e:	20a0      	movs	r0, #160	; 0xa0
 8003790:	2180      	movs	r1, #128	; 0x80
{
 8003792:	0016      	movs	r6, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8003794:	0209      	lsls	r1, r1, #8
 8003796:	2200      	movs	r2, #0
 8003798:	05c0      	lsls	r0, r0, #23
 800379a:	f00b fa01 	bl	800eba0 <HW_GPIO_Write>
    HW_SPI_InOut( addr & 0x7F );
 800379e:	207f      	movs	r0, #127	; 0x7f
 80037a0:	4028      	ands	r0, r5
 80037a2:	f00b fcad 	bl	800f100 <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 80037a6:	19a6      	adds	r6, r4, r6
 80037a8:	42b4      	cmp	r4, r6
 80037aa:	d107      	bne.n	80037bc <SX1276ReadBuffer+0x34>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 80037ac:	2180      	movs	r1, #128	; 0x80
 80037ae:	20a0      	movs	r0, #160	; 0xa0
 80037b0:	2201      	movs	r2, #1
 80037b2:	0209      	lsls	r1, r1, #8
 80037b4:	05c0      	lsls	r0, r0, #23
 80037b6:	f00b f9f3 	bl	800eba0 <HW_GPIO_Write>
}
 80037ba:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = HW_SPI_InOut( 0 );
 80037bc:	2000      	movs	r0, #0
 80037be:	f00b fc9f 	bl	800f100 <HW_SPI_InOut>
 80037c2:	7020      	strb	r0, [r4, #0]
    for( i = 0; i < size; i++ )
 80037c4:	3401      	adds	r4, #1
 80037c6:	e7ef      	b.n	80037a8 <SX1276ReadBuffer+0x20>

080037c8 <SX1276Read>:
{
 80037c8:	b513      	push	{r0, r1, r4, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 80037ca:	466b      	mov	r3, sp
 80037cc:	1ddc      	adds	r4, r3, #7
 80037ce:	2201      	movs	r2, #1
 80037d0:	0021      	movs	r1, r4
 80037d2:	f7ff ffd9 	bl	8003788 <SX1276ReadBuffer>
    return data;
 80037d6:	7820      	ldrb	r0, [r4, #0]
}
 80037d8:	bd16      	pop	{r1, r2, r4, pc}
	...

080037dc <RxChainCalibration>:
{
 80037dc:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 80037de:	2009      	movs	r0, #9
 80037e0:	f7ff fff2 	bl	80037c8 <SX1276Read>
 80037e4:	0005      	movs	r5, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80037e6:	2006      	movs	r0, #6
 80037e8:	f7ff ffee 	bl	80037c8 <SX1276Read>
 80037ec:	0004      	movs	r4, r0
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 80037ee:	2007      	movs	r0, #7
 80037f0:	f7ff ffea 	bl	80037c8 <SX1276Read>
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80037f4:	0424      	lsls	r4, r4, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 80037f6:	0200      	lsls	r0, r0, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80037f8:	4304      	orrs	r4, r0
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 80037fa:	2008      	movs	r0, #8
 80037fc:	f7ff ffe4 	bl	80037c8 <SX1276Read>
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8003800:	4b1a      	ldr	r3, [pc, #104]	; (800386c <RxChainCalibration+0x90>)
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8003802:	4304      	orrs	r4, r0
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8003804:	b2c0      	uxtb	r0, r0
 8003806:	4358      	muls	r0, r3
 8003808:	0a24      	lsrs	r4, r4, #8
 800380a:	435c      	muls	r4, r3
 800380c:	3080      	adds	r0, #128	; 0x80
 800380e:	0a00      	lsrs	r0, r0, #8
    SX1276Write( REG_PACONFIG, 0x00 );
 8003810:	2100      	movs	r1, #0
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8003812:	1904      	adds	r4, r0, r4
    SX1276Write( REG_PACONFIG, 0x00 );
 8003814:	2009      	movs	r0, #9
 8003816:	f7ff ff84 	bl	8003722 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800381a:	203b      	movs	r0, #59	; 0x3b
 800381c:	f7ff ffd4 	bl	80037c8 <SX1276Read>
 8003820:	2140      	movs	r1, #64	; 0x40
 8003822:	4301      	orrs	r1, r0
 8003824:	b2c9      	uxtb	r1, r1
 8003826:	203b      	movs	r0, #59	; 0x3b
 8003828:	f7ff ff7b 	bl	8003722 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800382c:	2620      	movs	r6, #32
 800382e:	203b      	movs	r0, #59	; 0x3b
 8003830:	f7ff ffca 	bl	80037c8 <SX1276Read>
 8003834:	4230      	tst	r0, r6
 8003836:	d1fa      	bne.n	800382e <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
 8003838:	480d      	ldr	r0, [pc, #52]	; (8003870 <RxChainCalibration+0x94>)
 800383a:	f7ff ff7b 	bl	8003734 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800383e:	203b      	movs	r0, #59	; 0x3b
 8003840:	f7ff ffc2 	bl	80037c8 <SX1276Read>
 8003844:	2140      	movs	r1, #64	; 0x40
 8003846:	4301      	orrs	r1, r0
 8003848:	b2c9      	uxtb	r1, r1
 800384a:	203b      	movs	r0, #59	; 0x3b
 800384c:	f7ff ff69 	bl	8003722 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8003850:	2620      	movs	r6, #32
 8003852:	203b      	movs	r0, #59	; 0x3b
 8003854:	f7ff ffb8 	bl	80037c8 <SX1276Read>
 8003858:	4230      	tst	r0, r6
 800385a:	d1fa      	bne.n	8003852 <RxChainCalibration+0x76>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 800385c:	0029      	movs	r1, r5
 800385e:	2009      	movs	r0, #9
 8003860:	f7ff ff5f 	bl	8003722 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8003864:	0020      	movs	r0, r4
 8003866:	f7ff ff65 	bl	8003734 <SX1276SetChannel>
}
 800386a:	bd70      	pop	{r4, r5, r6, pc}
 800386c:	00003d09 	.word	0x00003d09
 8003870:	33bca100 	.word	0x33bca100

08003874 <SX1276GetTimeOnAir>:
{
 8003874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003876:	000d      	movs	r5, r1
 8003878:	b085      	sub	sp, #20
    switch( modem )
 800387a:	2800      	cmp	r0, #0
 800387c:	d004      	beq.n	8003888 <SX1276GetTimeOnAir+0x14>
 800387e:	2801      	cmp	r0, #1
 8003880:	d055      	beq.n	800392e <SX1276GetTimeOnAir+0xba>
 8003882:	2000      	movs	r0, #0
}
 8003884:	b005      	add	sp, #20
 8003886:	bdf0      	pop	{r4, r5, r6, r7, pc}
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8003888:	4c6d      	ldr	r4, [pc, #436]	; (8003a40 <SX1276GetTimeOnAir+0x1cc>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800388a:	2027      	movs	r0, #39	; 0x27
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800388c:	8c26      	ldrh	r6, [r4, #32]
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800388e:	f7ff ff9b 	bl	80037c8 <SX1276Read>
 8003892:	23f8      	movs	r3, #248	; 0xf8
 8003894:	4398      	bics	r0, r3
 8003896:	3001      	adds	r0, #1
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8003898:	1980      	adds	r0, r0, r6
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800389a:	f7ff fbab 	bl	8002ff4 <__aeabi_i2d>
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 800389e:	1ce3      	adds	r3, r4, #3
 80038a0:	7fdb      	ldrb	r3, [r3, #31]
 80038a2:	2200      	movs	r2, #0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d13d      	bne.n	8003924 <SX1276GetTimeOnAir+0xb0>
 80038a8:	4b66      	ldr	r3, [pc, #408]	; (8003a44 <SX1276GetTimeOnAir+0x1d0>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80038aa:	f7fd fdff 	bl	80014ac <__aeabi_dadd>
 80038ae:	0006      	movs	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80038b0:	2030      	movs	r0, #48	; 0x30
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80038b2:	000f      	movs	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80038b4:	f7ff ff88 	bl	80037c8 <SX1276Read>
 80038b8:	23f9      	movs	r3, #249	; 0xf9
 80038ba:	2200      	movs	r2, #0
 80038bc:	4398      	bics	r0, r3
 80038be:	2300      	movs	r3, #0
 80038c0:	2800      	cmp	r0, #0
 80038c2:	d000      	beq.n	80038c6 <SX1276GetTimeOnAir+0x52>
 80038c4:	4b5f      	ldr	r3, [pc, #380]	; (8003a44 <SX1276GetTimeOnAir+0x1d0>)
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80038c6:	0030      	movs	r0, r6
 80038c8:	0039      	movs	r1, r7
 80038ca:	f7fd fdef 	bl	80014ac <__aeabi_dadd>
 80038ce:	0006      	movs	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80038d0:	0028      	movs	r0, r5
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80038d2:	000f      	movs	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80038d4:	f7ff fb8e 	bl	8002ff4 <__aeabi_i2d>
 80038d8:	0002      	movs	r2, r0
 80038da:	000b      	movs	r3, r1
 80038dc:	0030      	movs	r0, r6
 80038de:	0039      	movs	r1, r7
 80038e0:	f7fd fde4 	bl	80014ac <__aeabi_dadd>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80038e4:	1d63      	adds	r3, r4, #5
 80038e6:	7fdb      	ldrb	r3, [r3, #31]
 80038e8:	2200      	movs	r2, #0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d11c      	bne.n	8003928 <SX1276GetTimeOnAir+0xb4>
 80038ee:	2300      	movs	r3, #0
                                     pktLen +
 80038f0:	f7fd fddc 	bl	80014ac <__aeabi_dadd>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80038f4:	2200      	movs	r2, #0
 80038f6:	4b54      	ldr	r3, [pc, #336]	; (8003a48 <SX1276GetTimeOnAir+0x1d4>)
 80038f8:	f7fe fd48 	bl	800238c <__aeabi_dmul>
 80038fc:	0006      	movs	r6, r0
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80038fe:	69e0      	ldr	r0, [r4, #28]
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8003900:	000f      	movs	r7, r1
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8003902:	f7ff fba7 	bl	8003054 <__aeabi_ui2d>
 8003906:	0002      	movs	r2, r0
 8003908:	000b      	movs	r3, r1
 800390a:	0030      	movs	r0, r6
 800390c:	0039      	movs	r1, r7
 800390e:	f7fe f937 	bl	8001b80 <__aeabi_ddiv>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8003912:	2200      	movs	r2, #0
 8003914:	4b4d      	ldr	r3, [pc, #308]	; (8003a4c <SX1276GetTimeOnAir+0x1d8>)
 8003916:	f7fe fd39 	bl	800238c <__aeabi_dmul>
 800391a:	f00c fea7 	bl	801066c <round>
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 800391e:	f7fc fe37 	bl	8000590 <__aeabi_d2uiz>
    return airTime;
 8003922:	e7af      	b.n	8003884 <SX1276GetTimeOnAir+0x10>
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8003924:	2300      	movs	r3, #0
 8003926:	e7c0      	b.n	80038aa <SX1276GetTimeOnAir+0x36>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8003928:	2380      	movs	r3, #128	; 0x80
 800392a:	05db      	lsls	r3, r3, #23
 800392c:	e7e0      	b.n	80038f0 <SX1276GetTimeOnAir+0x7c>
            switch( SX1276.Settings.LoRa.Bandwidth )
 800392e:	4c44      	ldr	r4, [pc, #272]	; (8003a40 <SX1276GetTimeOnAir+0x1cc>)
 8003930:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003932:	3b07      	subs	r3, #7
 8003934:	2b02      	cmp	r3, #2
 8003936:	d900      	bls.n	800393a <SX1276GetTimeOnAir+0xc6>
 8003938:	e07f      	b.n	8003a3a <SX1276GetTimeOnAir+0x1c6>
 800393a:	4a45      	ldr	r2, [pc, #276]	; (8003a50 <SX1276GetTimeOnAir+0x1dc>)
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	18d3      	adds	r3, r2, r3
 8003940:	681e      	ldr	r6, [r3, #0]
 8003942:	685f      	ldr	r7, [r3, #4]
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 8003944:	2001      	movs	r0, #1
 8003946:	6ca3      	ldr	r3, [r4, #72]	; 0x48
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8003948:	00ed      	lsls	r5, r5, #3
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 800394a:	4098      	lsls	r0, r3
 800394c:	9301      	str	r3, [sp, #4]
 800394e:	f7ff fb51 	bl	8002ff4 <__aeabi_i2d>
 8003952:	0002      	movs	r2, r0
 8003954:	000b      	movs	r3, r1
 8003956:	0030      	movs	r0, r6
 8003958:	0039      	movs	r1, r7
 800395a:	f7fe f911 	bl	8001b80 <__aeabi_ddiv>
 800395e:	0002      	movs	r2, r0
 8003960:	000b      	movs	r3, r1
            double ts = 1 / rs;
 8003962:	2000      	movs	r0, #0
 8003964:	4937      	ldr	r1, [pc, #220]	; (8003a44 <SX1276GetTimeOnAir+0x1d0>)
 8003966:	f7fe f90b 	bl	8001b80 <__aeabi_ddiv>
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 800396a:	0023      	movs	r3, r4
            double ts = 1 / rs;
 800396c:	0006      	movs	r6, r0
 800396e:	000f      	movs	r7, r1
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8003970:	334e      	adds	r3, #78	; 0x4e
 8003972:	8818      	ldrh	r0, [r3, #0]
 8003974:	f7ff fb3e 	bl	8002ff4 <__aeabi_i2d>
 8003978:	2200      	movs	r2, #0
 800397a:	4b36      	ldr	r3, [pc, #216]	; (8003a54 <SX1276GetTimeOnAir+0x1e0>)
 800397c:	f7fd fd96 	bl	80014ac <__aeabi_dadd>
 8003980:	0032      	movs	r2, r6
 8003982:	003b      	movs	r3, r7
 8003984:	f7fe fd02 	bl	800238c <__aeabi_dmul>
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8003988:	0023      	movs	r3, r4
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 800398a:	9002      	str	r0, [sp, #8]
 800398c:	9103      	str	r1, [sp, #12]
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 800398e:	3352      	adds	r3, #82	; 0x52
 8003990:	7818      	ldrb	r0, [r3, #0]
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8003992:	9b01      	ldr	r3, [sp, #4]
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8003994:	3450      	adds	r4, #80	; 0x50
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8003996:	009b      	lsls	r3, r3, #2
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8003998:	0100      	lsls	r0, r0, #4
 800399a:	1ac0      	subs	r0, r0, r3
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 800399c:	7823      	ldrb	r3, [r4, #0]
 800399e:	2114      	movs	r1, #20
 80039a0:	1e5a      	subs	r2, r3, #1
 80039a2:	4193      	sbcs	r3, r2
 80039a4:	301c      	adds	r0, #28
 80039a6:	425b      	negs	r3, r3
 80039a8:	4019      	ands	r1, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 80039aa:	1828      	adds	r0, r5, r0
 80039ac:	1a40      	subs	r0, r0, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80039ae:	f7ff fb51 	bl	8003054 <__aeabi_ui2d>
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80039b2:	4b23      	ldr	r3, [pc, #140]	; (8003a40 <SX1276GetTimeOnAir+0x1cc>)
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80039b4:	0004      	movs	r4, r0
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80039b6:	334c      	adds	r3, #76	; 0x4c
 80039b8:	7818      	ldrb	r0, [r3, #0]
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80039ba:	000d      	movs	r5, r1
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80039bc:	1e43      	subs	r3, r0, #1
 80039be:	4198      	sbcs	r0, r3
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 80039c0:	9b01      	ldr	r3, [sp, #4]
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80039c2:	0040      	lsls	r0, r0, #1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 80039c4:	1a18      	subs	r0, r3, r0
 80039c6:	0080      	lsls	r0, r0, #2
 80039c8:	f7ff fb44 	bl	8003054 <__aeabi_ui2d>
 80039cc:	0002      	movs	r2, r0
 80039ce:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80039d0:	0020      	movs	r0, r4
 80039d2:	0029      	movs	r1, r5
 80039d4:	f7fe f8d4 	bl	8001b80 <__aeabi_ddiv>
 80039d8:	f00c fd34 	bl	8010444 <ceil>
 80039dc:	0004      	movs	r4, r0
 80039de:	000d      	movs	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 80039e0:	4b17      	ldr	r3, [pc, #92]	; (8003a40 <SX1276GetTimeOnAir+0x1cc>)
 80039e2:	334d      	adds	r3, #77	; 0x4d
 80039e4:	7818      	ldrb	r0, [r3, #0]
 80039e6:	3004      	adds	r0, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80039e8:	f7ff fb04 	bl	8002ff4 <__aeabi_i2d>
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80039ec:	0022      	movs	r2, r4
 80039ee:	002b      	movs	r3, r5
 80039f0:	f7fe fccc 	bl	800238c <__aeabi_dmul>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 80039f4:	2200      	movs	r2, #0
 80039f6:	2300      	movs	r3, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80039f8:	0004      	movs	r4, r0
 80039fa:	000d      	movs	r5, r1
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 80039fc:	f7fc fd42 	bl	8000484 <__aeabi_dcmpgt>
 8003a00:	2800      	cmp	r0, #0
 8003a02:	d101      	bne.n	8003a08 <SX1276GetTimeOnAir+0x194>
 8003a04:	2400      	movs	r4, #0
 8003a06:	2500      	movs	r5, #0
 8003a08:	2200      	movs	r2, #0
 8003a0a:	0020      	movs	r0, r4
 8003a0c:	0029      	movs	r1, r5
 8003a0e:	4b0e      	ldr	r3, [pc, #56]	; (8003a48 <SX1276GetTimeOnAir+0x1d4>)
 8003a10:	f7fd fd4c 	bl	80014ac <__aeabi_dadd>
            double tPayload = nPayload * ts;
 8003a14:	0032      	movs	r2, r6
 8003a16:	003b      	movs	r3, r7
 8003a18:	f7fe fcb8 	bl	800238c <__aeabi_dmul>
            double tOnAir = tPreamble + tPayload;
 8003a1c:	9a02      	ldr	r2, [sp, #8]
 8003a1e:	9b03      	ldr	r3, [sp, #12]
 8003a20:	f7fd fd44 	bl	80014ac <__aeabi_dadd>
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 8003a24:	2200      	movs	r2, #0
 8003a26:	4b09      	ldr	r3, [pc, #36]	; (8003a4c <SX1276GetTimeOnAir+0x1d8>)
 8003a28:	f7fe fcb0 	bl	800238c <__aeabi_dmul>
 8003a2c:	4a0a      	ldr	r2, [pc, #40]	; (8003a58 <SX1276GetTimeOnAir+0x1e4>)
 8003a2e:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <SX1276GetTimeOnAir+0x1e8>)
 8003a30:	f7fd fd3c 	bl	80014ac <__aeabi_dadd>
 8003a34:	f00c fd90 	bl	8010558 <floor>
 8003a38:	e771      	b.n	800391e <SX1276GetTimeOnAir+0xaa>
            switch( SX1276.Settings.LoRa.Bandwidth )
 8003a3a:	2600      	movs	r6, #0
 8003a3c:	2700      	movs	r7, #0
 8003a3e:	e781      	b.n	8003944 <SX1276GetTimeOnAir+0xd0>
 8003a40:	20001584 	.word	0x20001584
 8003a44:	3ff00000 	.word	0x3ff00000
 8003a48:	40200000 	.word	0x40200000
 8003a4c:	408f4000 	.word	0x408f4000
 8003a50:	080107c0 	.word	0x080107c0
 8003a54:	40110000 	.word	0x40110000
 8003a58:	d916872b 	.word	0xd916872b
 8003a5c:	3feff7ce 	.word	0x3feff7ce

08003a60 <SX1276ReadRssi>:
{
 8003a60:	b510      	push	{r4, lr}
    switch( modem )
 8003a62:	2800      	cmp	r0, #0
 8003a64:	d004      	beq.n	8003a70 <SX1276ReadRssi+0x10>
 8003a66:	2801      	cmp	r0, #1
 8003a68:	d00a      	beq.n	8003a80 <SX1276ReadRssi+0x20>
 8003a6a:	2001      	movs	r0, #1
 8003a6c:	4240      	negs	r0, r0
}
 8003a6e:	bd10      	pop	{r4, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8003a70:	2011      	movs	r0, #17
 8003a72:	f7ff fea9 	bl	80037c8 <SX1276Read>
 8003a76:	0840      	lsrs	r0, r0, #1
 8003a78:	b2c0      	uxtb	r0, r0
 8003a7a:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8003a7c:	b200      	sxth	r0, r0
 8003a7e:	e7f6      	b.n	8003a6e <SX1276ReadRssi+0xe>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8003a80:	4a06      	ldr	r2, [pc, #24]	; (8003a9c <SX1276ReadRssi+0x3c>)
 8003a82:	4b07      	ldr	r3, [pc, #28]	; (8003aa0 <SX1276ReadRssi+0x40>)
 8003a84:	6892      	ldr	r2, [r2, #8]
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8003a86:	201b      	movs	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d903      	bls.n	8003a94 <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8003a8c:	f7ff fe9c 	bl	80037c8 <SX1276Read>
 8003a90:	389d      	subs	r0, #157	; 0x9d
 8003a92:	e7f3      	b.n	8003a7c <SX1276ReadRssi+0x1c>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8003a94:	f7ff fe98 	bl	80037c8 <SX1276Read>
 8003a98:	38a4      	subs	r0, #164	; 0xa4
 8003a9a:	e7ef      	b.n	8003a7c <SX1276ReadRssi+0x1c>
 8003a9c:	20001584 	.word	0x20001584
 8003aa0:	1f4add40 	.word	0x1f4add40

08003aa4 <SX1276SetOpMode.part.0>:
void SX1276SetOpMode( uint8_t opMode )
 8003aa4:	b510      	push	{r4, lr}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8003aa6:	2001      	movs	r0, #1
 8003aa8:	f7ff fe8e 	bl	80037c8 <SX1276Read>
 8003aac:	21f8      	movs	r1, #248	; 0xf8
 8003aae:	4001      	ands	r1, r0
 8003ab0:	2001      	movs	r0, #1
 8003ab2:	f7ff fe36 	bl	8003722 <SX1276Write>
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 8003ab6:	4c05      	ldr	r4, [pc, #20]	; (8003acc <SX1276SetOpMode.part.0+0x28>)
 8003ab8:	2001      	movs	r0, #1
 8003aba:	6823      	ldr	r3, [r4, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 8003ac0:	6823      	ldr	r3, [r4, #0]
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4798      	blx	r3
}
 8003ac8:	bd10      	pop	{r4, pc}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	2000020c 	.word	0x2000020c

08003ad0 <SX1276SetSleep>:
{
 8003ad0:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 8003ad2:	480a      	ldr	r0, [pc, #40]	; (8003afc <SX1276SetSleep+0x2c>)
 8003ad4:	f00a fe7e 	bl	800e7d4 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8003ad8:	4809      	ldr	r0, [pc, #36]	; (8003b00 <SX1276SetSleep+0x30>)
 8003ada:	f00a fe7b 	bl	800e7d4 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8003ade:	4809      	ldr	r0, [pc, #36]	; (8003b04 <SX1276SetSleep+0x34>)
 8003ae0:	f00a fe78 	bl	800e7d4 <TimerStop>
    if( opMode == RF_OPMODE_SLEEP )
 8003ae4:	f7ff ffde 	bl	8003aa4 <SX1276SetOpMode.part.0>
    LoRaBoardCallbacks->SX1276BoardSetXO( RESET );
 8003ae8:	4b07      	ldr	r3, [pc, #28]	; (8003b08 <SX1276SetSleep+0x38>)
 8003aea:	2000      	movs	r0, #0
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4798      	blx	r3
    SX1276.Settings.State = RF_IDLE;
 8003af2:	2200      	movs	r2, #0
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <SX1276SetSleep+0x3c>)
 8003af6:	711a      	strb	r2, [r3, #4]
}
 8003af8:	bd10      	pop	{r4, pc}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	200015ec 	.word	0x200015ec
 8003b00:	20001554 	.word	0x20001554
 8003b04:	2000156c 	.word	0x2000156c
 8003b08:	2000020c 	.word	0x2000020c
 8003b0c:	20001584 	.word	0x20001584

08003b10 <SX1276SetOpMode>:
{
 8003b10:	b570      	push	{r4, r5, r6, lr}
 8003b12:	1e04      	subs	r4, r0, #0
    if( opMode == RF_OPMODE_SLEEP )
 8003b14:	d102      	bne.n	8003b1c <SX1276SetOpMode+0xc>
 8003b16:	f7ff ffc5 	bl	8003aa4 <SX1276SetOpMode.part.0>
}
 8003b1a:	bd70      	pop	{r4, r5, r6, pc}
      LoRaBoardCallbacks->SX1276BoardSetXO( SET ); 
 8003b1c:	4d0c      	ldr	r5, [pc, #48]	; (8003b50 <SX1276SetOpMode+0x40>)
 8003b1e:	2001      	movs	r0, #1
 8003b20:	682b      	ldr	r3, [r5, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( false );
 8003b26:	682b      	ldr	r3, [r5, #0]
 8003b28:	2000      	movs	r0, #0
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
 8003b2e:	682b      	ldr	r3, [r5, #0]
 8003b30:	0020      	movs	r0, r4
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	4798      	blx	r3
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8003b36:	2001      	movs	r0, #1
 8003b38:	f7ff fe46 	bl	80037c8 <SX1276Read>
 8003b3c:	2307      	movs	r3, #7
 8003b3e:	0001      	movs	r1, r0
 8003b40:	4399      	bics	r1, r3
 8003b42:	4321      	orrs	r1, r4
 8003b44:	2001      	movs	r0, #1
 8003b46:	b2c9      	uxtb	r1, r1
 8003b48:	f7ff fdeb 	bl	8003722 <SX1276Write>
}
 8003b4c:	e7e5      	b.n	8003b1a <SX1276SetOpMode+0xa>
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	2000020c 	.word	0x2000020c

08003b54 <SX1276SetStby>:
{
 8003b54:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 8003b56:	4808      	ldr	r0, [pc, #32]	; (8003b78 <SX1276SetStby+0x24>)
 8003b58:	f00a fe3c 	bl	800e7d4 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8003b5c:	4807      	ldr	r0, [pc, #28]	; (8003b7c <SX1276SetStby+0x28>)
 8003b5e:	f00a fe39 	bl	800e7d4 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8003b62:	4807      	ldr	r0, [pc, #28]	; (8003b80 <SX1276SetStby+0x2c>)
 8003b64:	f00a fe36 	bl	800e7d4 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8003b68:	2001      	movs	r0, #1
 8003b6a:	f7ff ffd1 	bl	8003b10 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8003b6e:	2200      	movs	r2, #0
 8003b70:	4b04      	ldr	r3, [pc, #16]	; (8003b84 <SX1276SetStby+0x30>)
 8003b72:	711a      	strb	r2, [r3, #4]
}
 8003b74:	bd10      	pop	{r4, pc}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	200015ec 	.word	0x200015ec
 8003b7c:	20001554 	.word	0x20001554
 8003b80:	2000156c 	.word	0x2000156c
 8003b84:	20001584 	.word	0x20001584

08003b88 <SX1276SetRx>:
{
 8003b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8a:	0006      	movs	r6, r0
    TimerStop( &TxTimeoutTimer );
 8003b8c:	4877      	ldr	r0, [pc, #476]	; (8003d6c <SX1276SetRx+0x1e4>)
 8003b8e:	f00a fe21 	bl	800e7d4 <TimerStop>
    switch( SX1276.Settings.Modem )
 8003b92:	4c77      	ldr	r4, [pc, #476]	; (8003d70 <SX1276SetRx+0x1e8>)
 8003b94:	7965      	ldrb	r5, [r4, #5]
 8003b96:	2d00      	cmp	r5, #0
 8003b98:	d02f      	beq.n	8003bfa <SX1276SetRx+0x72>
 8003b9a:	2700      	movs	r7, #0
 8003b9c:	2d01      	cmp	r5, #1
 8003b9e:	d151      	bne.n	8003c44 <SX1276SetRx+0xbc>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8003ba0:	0023      	movs	r3, r4
 8003ba2:	3355      	adds	r3, #85	; 0x55
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	2741      	movs	r7, #65	; 0x41
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8003ba8:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d100      	bne.n	8003bb0 <SX1276SetRx+0x28>
 8003bae:	e06b      	b.n	8003c88 <SX1276SetRx+0x100>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8003bb0:	f7ff fe0a 	bl	80037c8 <SX1276Read>
 8003bb4:	4338      	orrs	r0, r7
 8003bb6:	b2c1      	uxtb	r1, r0
 8003bb8:	2033      	movs	r0, #51	; 0x33
 8003bba:	f7ff fdb2 	bl	8003722 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8003bbe:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8003bc0:	203b      	movs	r0, #59	; 0x3b
 8003bc2:	f7ff fdae 	bl	8003722 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8003bc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8003bc8:	2031      	movs	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d900      	bls.n	8003bd0 <SX1276SetRx+0x48>
 8003bce:	e0b4      	b.n	8003d3a <SX1276SetRx+0x1b2>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8003bd0:	f7ff fdfa 	bl	80037c8 <SX1276Read>
 8003bd4:	217f      	movs	r1, #127	; 0x7f
 8003bd6:	4001      	ands	r1, r0
 8003bd8:	2031      	movs	r0, #49	; 0x31
 8003bda:	f7ff fda2 	bl	8003722 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8003bde:	2030      	movs	r0, #48	; 0x30
 8003be0:	2100      	movs	r1, #0
 8003be2:	f7ff fd9e 	bl	8003722 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8003be6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003be8:	2808      	cmp	r0, #8
 8003bea:	d861      	bhi.n	8003cb0 <SX1276SetRx+0x128>
 8003bec:	f7fc fa8c 	bl	8000108 <__gnu_thumb1_case_uqi>
 8003bf0:	8b847d57 	.word	0x8b847d57
 8003bf4:	a0a09992 	.word	0xa0a09992
 8003bf8:	a0          	.byte	0xa0
 8003bf9:	00          	.byte	0x00
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8003bfa:	1de3      	adds	r3, r4, #7
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003bfc:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8003bfe:	7fdf      	ldrb	r7, [r3, #31]
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003c00:	f7ff fde2 	bl	80037c8 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8003c04:	2103      	movs	r1, #3
 8003c06:	4008      	ands	r0, r1
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003c08:	3109      	adds	r1, #9
 8003c0a:	4301      	orrs	r1, r0
 8003c0c:	2040      	movs	r0, #64	; 0x40
 8003c0e:	f7ff fd88 	bl	8003722 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8003c12:	2041      	movs	r0, #65	; 0x41
 8003c14:	f7ff fdd8 	bl	80037c8 <SX1276Read>
 8003c18:	213f      	movs	r1, #63	; 0x3f
 8003c1a:	4249      	negs	r1, r1
 8003c1c:	4301      	orrs	r1, r0
 8003c1e:	b2c9      	uxtb	r1, r1
 8003c20:	2041      	movs	r0, #65	; 0x41
 8003c22:	f7ff fd7e 	bl	8003722 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8003c26:	2035      	movs	r0, #53	; 0x35
 8003c28:	f7ff fdce 	bl	80037c8 <SX1276Read>
 8003c2c:	233f      	movs	r3, #63	; 0x3f
 8003c2e:	4018      	ands	r0, r3
 8003c30:	0023      	movs	r3, r4
 8003c32:	333e      	adds	r3, #62	; 0x3e
 8003c34:	7018      	strb	r0, [r3, #0]
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8003c36:	211e      	movs	r1, #30
 8003c38:	200d      	movs	r0, #13
 8003c3a:	f7ff fd72 	bl	8003722 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8003c3e:	8625      	strh	r5, [r4, #48]	; 0x30
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8003c40:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8003c42:	8765      	strh	r5, [r4, #58]	; 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 8003c44:	2280      	movs	r2, #128	; 0x80
 8003c46:	2100      	movs	r1, #0
 8003c48:	484a      	ldr	r0, [pc, #296]	; (8003d74 <SX1276SetRx+0x1ec>)
 8003c4a:	0052      	lsls	r2, r2, #1
 8003c4c:	f00b ffbf 	bl	800fbce <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8003c50:	2301      	movs	r3, #1
 8003c52:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 8003c54:	2e00      	cmp	r6, #0
 8003c56:	d007      	beq.n	8003c68 <SX1276SetRx+0xe0>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8003c58:	4d47      	ldr	r5, [pc, #284]	; (8003d78 <SX1276SetRx+0x1f0>)
 8003c5a:	0031      	movs	r1, r6
 8003c5c:	0028      	movs	r0, r5
 8003c5e:	f00a fde5 	bl	800e82c <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8003c62:	0028      	movs	r0, r5
 8003c64:	f00a fd3e 	bl	800e6e4 <TimerStart>
    if( SX1276.Settings.Modem == MODEM_FSK )
 8003c68:	7963      	ldrb	r3, [r4, #5]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d000      	beq.n	8003c70 <SX1276SetRx+0xe8>
 8003c6e:	e075      	b.n	8003d5c <SX1276SetRx+0x1d4>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8003c70:	2005      	movs	r0, #5
 8003c72:	f7ff ff4d 	bl	8003b10 <SX1276SetOpMode>
        TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8003c76:	4d41      	ldr	r5, [pc, #260]	; (8003d7c <SX1276SetRx+0x1f4>)
 8003c78:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003c7a:	0028      	movs	r0, r5
 8003c7c:	f00a fdd6 	bl	800e82c <TimerSetValue>
        TimerStart( &RxTimeoutSyncWord );
 8003c80:	0028      	movs	r0, r5
 8003c82:	f00a fd2f 	bl	800e6e4 <TimerStart>
}
 8003c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8003c88:	f7ff fd9e 	bl	80037c8 <SX1276Read>
 8003c8c:	0001      	movs	r1, r0
 8003c8e:	43b9      	bics	r1, r7
 8003c90:	4329      	orrs	r1, r5
 8003c92:	b2c9      	uxtb	r1, r1
 8003c94:	2033      	movs	r0, #51	; 0x33
 8003c96:	f7ff fd44 	bl	8003722 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8003c9a:	211d      	movs	r1, #29
 8003c9c:	e790      	b.n	8003bc0 <SX1276SetRx+0x38>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8003c9e:	2148      	movs	r1, #72	; 0x48
 8003ca0:	202f      	movs	r0, #47	; 0x2f
 8003ca2:	f7ff fd3e 	bl	8003722 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8003ca6:	68a3      	ldr	r3, [r4, #8]
 8003ca8:	4a35      	ldr	r2, [pc, #212]	; (8003d80 <SX1276SetRx+0x1f8>)
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8003caa:	1898      	adds	r0, r3, r2
 8003cac:	f7ff fd42 	bl	8003734 <SX1276SetChannel>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8003cb0:	0023      	movs	r3, r4
 8003cb2:	3356      	adds	r3, #86	; 0x56
 8003cb4:	781f      	ldrb	r7, [r3, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003cb6:	0023      	movs	r3, r4
 8003cb8:	3353      	adds	r3, #83	; 0x53
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d044      	beq.n	8003d4a <SX1276SetRx+0x1c2>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8003cc0:	211d      	movs	r1, #29
 8003cc2:	2011      	movs	r0, #17
 8003cc4:	f7ff fd2d 	bl	8003722 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8003cc8:	2040      	movs	r0, #64	; 0x40
 8003cca:	f7ff fd7d 	bl	80037c8 <SX1276Read>
 8003cce:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8003cd0:	4001      	ands	r1, r0
 8003cd2:	2040      	movs	r0, #64	; 0x40
 8003cd4:	f7ff fd25 	bl	8003722 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8003cd8:	2100      	movs	r1, #0
 8003cda:	200f      	movs	r0, #15
 8003cdc:	f7ff fd21 	bl	8003722 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	200d      	movs	r0, #13
 8003ce4:	f7ff fd1d 	bl	8003722 <SX1276Write>
        break;
 8003ce8:	e7ac      	b.n	8003c44 <SX1276SetRx+0xbc>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8003cea:	2144      	movs	r1, #68	; 0x44
 8003cec:	202f      	movs	r0, #47	; 0x2f
 8003cee:	f7ff fd18 	bl	8003722 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8003cf2:	68a3      	ldr	r3, [r4, #8]
 8003cf4:	4a23      	ldr	r2, [pc, #140]	; (8003d84 <SX1276SetRx+0x1fc>)
 8003cf6:	e7d8      	b.n	8003caa <SX1276SetRx+0x122>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8003cf8:	2144      	movs	r1, #68	; 0x44
 8003cfa:	202f      	movs	r0, #47	; 0x2f
 8003cfc:	f7ff fd11 	bl	8003722 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8003d00:	68a3      	ldr	r3, [r4, #8]
 8003d02:	4a21      	ldr	r2, [pc, #132]	; (8003d88 <SX1276SetRx+0x200>)
 8003d04:	e7d1      	b.n	8003caa <SX1276SetRx+0x122>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8003d06:	2144      	movs	r1, #68	; 0x44
 8003d08:	202f      	movs	r0, #47	; 0x2f
 8003d0a:	f7ff fd0a 	bl	8003722 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8003d0e:	68a3      	ldr	r3, [r4, #8]
 8003d10:	4a1e      	ldr	r2, [pc, #120]	; (8003d8c <SX1276SetRx+0x204>)
 8003d12:	e7ca      	b.n	8003caa <SX1276SetRx+0x122>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8003d14:	2144      	movs	r1, #68	; 0x44
 8003d16:	202f      	movs	r0, #47	; 0x2f
 8003d18:	f7ff fd03 	bl	8003722 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8003d1c:	68a3      	ldr	r3, [r4, #8]
 8003d1e:	4a1c      	ldr	r2, [pc, #112]	; (8003d90 <SX1276SetRx+0x208>)
 8003d20:	e7c3      	b.n	8003caa <SX1276SetRx+0x122>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8003d22:	2144      	movs	r1, #68	; 0x44
 8003d24:	202f      	movs	r0, #47	; 0x2f
 8003d26:	f7ff fcfc 	bl	8003722 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8003d2a:	68a3      	ldr	r3, [r4, #8]
 8003d2c:	4a19      	ldr	r2, [pc, #100]	; (8003d94 <SX1276SetRx+0x20c>)
 8003d2e:	e7bc      	b.n	8003caa <SX1276SetRx+0x122>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8003d30:	2140      	movs	r1, #64	; 0x40
 8003d32:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8003d34:	f7ff fcf5 	bl	8003722 <SX1276Write>
 8003d38:	e7ba      	b.n	8003cb0 <SX1276SetRx+0x128>
 8003d3a:	f7ff fd45 	bl	80037c8 <SX1276Read>
 8003d3e:	2180      	movs	r1, #128	; 0x80
 8003d40:	4249      	negs	r1, r1
 8003d42:	4301      	orrs	r1, r0
 8003d44:	b2c9      	uxtb	r1, r1
 8003d46:	2031      	movs	r0, #49	; 0x31
 8003d48:	e7f4      	b.n	8003d34 <SX1276SetRx+0x1ac>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8003d4a:	211f      	movs	r1, #31
 8003d4c:	2011      	movs	r0, #17
 8003d4e:	f7ff fce8 	bl	8003722 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8003d52:	2040      	movs	r0, #64	; 0x40
 8003d54:	f7ff fd38 	bl	80037c8 <SX1276Read>
 8003d58:	213f      	movs	r1, #63	; 0x3f
 8003d5a:	e7b9      	b.n	8003cd0 <SX1276SetRx+0x148>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8003d5c:	2005      	movs	r0, #5
        if( rxContinuous == true )
 8003d5e:	2f00      	cmp	r7, #0
 8003d60:	d100      	bne.n	8003d64 <SX1276SetRx+0x1dc>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8003d62:	2006      	movs	r0, #6
 8003d64:	f7ff fed4 	bl	8003b10 <SX1276SetOpMode>
}
 8003d68:	e78d      	b.n	8003c86 <SX1276SetRx+0xfe>
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	20001554 	.word	0x20001554
 8003d70:	20001584 	.word	0x20001584
 8003d74:	20000214 	.word	0x20000214
 8003d78:	200015ec 	.word	0x200015ec
 8003d7c:	2000156c 	.word	0x2000156c
 8003d80:	00001e82 	.word	0x00001e82
 8003d84:	000028b4 	.word	0x000028b4
 8003d88:	00003d04 	.word	0x00003d04
 8003d8c:	0000515e 	.word	0x0000515e
 8003d90:	00007a12 	.word	0x00007a12
 8003d94:	0000a2c6 	.word	0x0000a2c6

08003d98 <SX1276SetTx>:
{
 8003d98:	b570      	push	{r4, r5, r6, lr}
 8003d9a:	0004      	movs	r4, r0
    TimerStop( &RxTimeoutTimer );
 8003d9c:	4826      	ldr	r0, [pc, #152]	; (8003e38 <SX1276SetTx+0xa0>)
 8003d9e:	f00a fd19 	bl	800e7d4 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8003da2:	4d26      	ldr	r5, [pc, #152]	; (8003e3c <SX1276SetTx+0xa4>)
 8003da4:	0021      	movs	r1, r4
 8003da6:	0028      	movs	r0, r5
 8003da8:	f00a fd40 	bl	800e82c <TimerSetValue>
    switch( SX1276.Settings.Modem )
 8003dac:	4c24      	ldr	r4, [pc, #144]	; (8003e40 <SX1276SetTx+0xa8>)
 8003dae:	7963      	ldrb	r3, [r4, #5]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <SX1276SetTx+0x32>
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d023      	beq.n	8003e00 <SX1276SetTx+0x68>
    SX1276.Settings.State = RF_TX_RUNNING;
 8003db8:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 8003dba:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 8003dbc:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 8003dbe:	f00a fc91 	bl	800e6e4 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8003dc2:	2003      	movs	r0, #3
 8003dc4:	f7ff fea4 	bl	8003b10 <SX1276SetOpMode>
}
 8003dc8:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003dca:	2040      	movs	r0, #64	; 0x40
 8003dcc:	f7ff fcfc 	bl	80037c8 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 8003dd0:	2103      	movs	r1, #3
 8003dd2:	4008      	ands	r0, r1
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003dd4:	310d      	adds	r1, #13
 8003dd6:	4301      	orrs	r1, r0
 8003dd8:	2040      	movs	r0, #64	; 0x40
 8003dda:	f7ff fca2 	bl	8003722 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8003dde:	2041      	movs	r0, #65	; 0x41
 8003de0:	f7ff fcf2 	bl	80037c8 <SX1276Read>
 8003de4:	213e      	movs	r1, #62	; 0x3e
 8003de6:	4001      	ands	r1, r0
 8003de8:	2041      	movs	r0, #65	; 0x41
 8003dea:	f7ff fc9a 	bl	8003722 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8003dee:	2035      	movs	r0, #53	; 0x35
 8003df0:	f7ff fcea 	bl	80037c8 <SX1276Read>
 8003df4:	233f      	movs	r3, #63	; 0x3f
 8003df6:	4018      	ands	r0, r3
 8003df8:	0023      	movs	r3, r4
 8003dfa:	333e      	adds	r3, #62	; 0x3e
 8003dfc:	7018      	strb	r0, [r3, #0]
        break;
 8003dfe:	e7db      	b.n	8003db8 <SX1276SetTx+0x20>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003e00:	0023      	movs	r3, r4
 8003e02:	3353      	adds	r3, #83	; 0x53
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00d      	beq.n	8003e26 <SX1276SetTx+0x8e>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003e0a:	21f5      	movs	r1, #245	; 0xf5
 8003e0c:	2011      	movs	r0, #17
 8003e0e:	f7ff fc88 	bl	8003722 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8003e12:	2040      	movs	r0, #64	; 0x40
 8003e14:	f7ff fcd8 	bl	80037c8 <SX1276Read>
 8003e18:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8003e1a:	4001      	ands	r1, r0
 8003e1c:	2040      	movs	r0, #64	; 0x40
 8003e1e:	4301      	orrs	r1, r0
 8003e20:	f7ff fc7f 	bl	8003722 <SX1276Write>
 8003e24:	e7c8      	b.n	8003db8 <SX1276SetTx+0x20>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003e26:	21f7      	movs	r1, #247	; 0xf7
 8003e28:	2011      	movs	r0, #17
 8003e2a:	f7ff fc7a 	bl	8003722 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8003e2e:	2040      	movs	r0, #64	; 0x40
 8003e30:	f7ff fcca 	bl	80037c8 <SX1276Read>
 8003e34:	213f      	movs	r1, #63	; 0x3f
 8003e36:	e7f0      	b.n	8003e1a <SX1276SetTx+0x82>
 8003e38:	200015ec 	.word	0x200015ec
 8003e3c:	20001554 	.word	0x20001554
 8003e40:	20001584 	.word	0x20001584

08003e44 <SX1276StartCad>:
{
 8003e44:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 8003e46:	4c0b      	ldr	r4, [pc, #44]	; (8003e74 <SX1276StartCad+0x30>)
 8003e48:	7963      	ldrb	r3, [r4, #5]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d110      	bne.n	8003e70 <SX1276StartCad+0x2c>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003e4e:	21fa      	movs	r1, #250	; 0xfa
 8003e50:	2011      	movs	r0, #17
 8003e52:	f7ff fc66 	bl	8003722 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8003e56:	2040      	movs	r0, #64	; 0x40
 8003e58:	f7ff fcb6 	bl	80037c8 <SX1276Read>
 8003e5c:	2503      	movs	r5, #3
 8003e5e:	43a8      	bics	r0, r5
 8003e60:	b2c1      	uxtb	r1, r0
 8003e62:	2040      	movs	r0, #64	; 0x40
 8003e64:	f7ff fc5d 	bl	8003722 <SX1276Write>
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8003e68:	2007      	movs	r0, #7
            SX1276.Settings.State = RF_CAD;
 8003e6a:	7125      	strb	r5, [r4, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8003e6c:	f7ff fe50 	bl	8003b10 <SX1276SetOpMode>
}
 8003e70:	bd70      	pop	{r4, r5, r6, pc}
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	20001584 	.word	0x20001584

08003e78 <SX1276SetModem>:
{
 8003e78:	b510      	push	{r4, lr}
 8003e7a:	0004      	movs	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8003e7c:	2001      	movs	r0, #1
 8003e7e:	f7ff fca3 	bl	80037c8 <SX1276Read>
 8003e82:	b2c0      	uxtb	r0, r0
 8003e84:	4b16      	ldr	r3, [pc, #88]	; (8003ee0 <SX1276SetModem+0x68>)
        SX1276.Settings.Modem = MODEM_LORA;
 8003e86:	09c0      	lsrs	r0, r0, #7
    if( SX1276.Settings.Modem == modem )
 8003e88:	42a0      	cmp	r0, r4
 8003e8a:	d101      	bne.n	8003e90 <SX1276SetModem+0x18>
 8003e8c:	7158      	strb	r0, [r3, #5]
}
 8003e8e:	bd10      	pop	{r4, pc}
    SX1276.Settings.Modem = modem;
 8003e90:	715c      	strb	r4, [r3, #5]
    switch( SX1276.Settings.Modem )
 8003e92:	2c01      	cmp	r4, #1
 8003e94:	d012      	beq.n	8003ebc <SX1276SetModem+0x44>
    if( opMode == RF_OPMODE_SLEEP )
 8003e96:	f7ff fe05 	bl	8003aa4 <SX1276SetOpMode.part.0>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8003e9a:	2001      	movs	r0, #1
 8003e9c:	f7ff fc94 	bl	80037c8 <SX1276Read>
 8003ea0:	217f      	movs	r1, #127	; 0x7f
 8003ea2:	4001      	ands	r1, r0
 8003ea4:	2001      	movs	r0, #1
 8003ea6:	f7ff fc3c 	bl	8003722 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8003eaa:	2100      	movs	r1, #0
 8003eac:	2040      	movs	r0, #64	; 0x40
 8003eae:	f7ff fc38 	bl	8003722 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8003eb2:	2130      	movs	r1, #48	; 0x30
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8003eb4:	2041      	movs	r0, #65	; 0x41
 8003eb6:	f7ff fc34 	bl	8003722 <SX1276Write>
        break;
 8003eba:	e7e8      	b.n	8003e8e <SX1276SetModem+0x16>
    if( opMode == RF_OPMODE_SLEEP )
 8003ebc:	f7ff fdf2 	bl	8003aa4 <SX1276SetOpMode.part.0>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8003ec0:	0020      	movs	r0, r4
 8003ec2:	f7ff fc81 	bl	80037c8 <SX1276Read>
 8003ec6:	2180      	movs	r1, #128	; 0x80
 8003ec8:	4249      	negs	r1, r1
 8003eca:	4301      	orrs	r1, r0
 8003ecc:	b2c9      	uxtb	r1, r1
 8003ece:	0020      	movs	r0, r4
 8003ed0:	f7ff fc27 	bl	8003722 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	2040      	movs	r0, #64	; 0x40
 8003ed8:	f7ff fc23 	bl	8003722 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8003edc:	2100      	movs	r1, #0
 8003ede:	e7e9      	b.n	8003eb4 <SX1276SetModem+0x3c>
 8003ee0:	20001584 	.word	0x20001584

08003ee4 <SX1276Init>:
{
 8003ee4:	b570      	push	{r4, r5, r6, lr}
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8003ee6:	4c1b      	ldr	r4, [pc, #108]	; (8003f54 <SX1276Init+0x70>)
    RadioEvents = events;
 8003ee8:	4d1b      	ldr	r5, [pc, #108]	; (8003f58 <SX1276Init+0x74>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8003eea:	0021      	movs	r1, r4
    RadioEvents = events;
 8003eec:	6068      	str	r0, [r5, #4]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8003eee:	481b      	ldr	r0, [pc, #108]	; (8003f5c <SX1276Init+0x78>)
 8003ef0:	f00a fbf0 	bl	800e6d4 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8003ef4:	0021      	movs	r1, r4
 8003ef6:	481a      	ldr	r0, [pc, #104]	; (8003f60 <SX1276Init+0x7c>)
 8003ef8:	f00a fbec 	bl	800e6d4 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8003efc:	0021      	movs	r1, r4
 8003efe:	4819      	ldr	r0, [pc, #100]	; (8003f64 <SX1276Init+0x80>)
 8003f00:	f00a fbe8 	bl	800e6d4 <TimerInit>
    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 8003f04:	682b      	ldr	r3, [r5, #0]
 8003f06:	2001      	movs	r0, #1
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4798      	blx	r3
    SX1276Reset( );
 8003f0c:	f7ff fbc2 	bl	8003694 <SX1276Reset>
    RxChainCalibration( );
 8003f10:	f7ff fc64 	bl	80037dc <RxChainCalibration>
    if( opMode == RF_OPMODE_SLEEP )
 8003f14:	f7ff fdc6 	bl	8003aa4 <SX1276SetOpMode.part.0>
    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 8003f18:	682b      	ldr	r3, [r5, #0]
 8003f1a:	4813      	ldr	r0, [pc, #76]	; (8003f68 <SX1276Init+0x84>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	4798      	blx	r3
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8003f20:	4e12      	ldr	r6, [pc, #72]	; (8003f6c <SX1276Init+0x88>)
 8003f22:	0034      	movs	r4, r6
 8003f24:	3648      	adds	r6, #72	; 0x48
 8003f26:	3418      	adds	r4, #24
        SX1276SetModem( RadioRegsInit[i].Modem );
 8003f28:	7820      	ldrb	r0, [r4, #0]
 8003f2a:	f7ff ffa5 	bl	8003e78 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8003f2e:	78a1      	ldrb	r1, [r4, #2]
 8003f30:	7860      	ldrb	r0, [r4, #1]
 8003f32:	3403      	adds	r4, #3
 8003f34:	f7ff fbf5 	bl	8003722 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8003f38:	42b4      	cmp	r4, r6
 8003f3a:	d1f5      	bne.n	8003f28 <SX1276Init+0x44>
    SX1276SetModem( MODEM_FSK );
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	f7ff ff9b 	bl	8003e78 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8003f42:	2200      	movs	r2, #0
 8003f44:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <SX1276Init+0x8c>)
 8003f46:	711a      	strb	r2, [r3, #4]
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8003f48:	682b      	ldr	r3, [r5, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	4798      	blx	r3
 8003f4e:	3002      	adds	r0, #2
}
 8003f50:	bd70      	pop	{r4, r5, r6, pc}
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	08004bc1 	.word	0x08004bc1
 8003f58:	2000020c 	.word	0x2000020c
 8003f5c:	20001554 	.word	0x20001554
 8003f60:	200015ec 	.word	0x200015ec
 8003f64:	2000156c 	.word	0x2000156c
 8003f68:	2000002c 	.word	0x2000002c
 8003f6c:	080107c0 	.word	0x080107c0
 8003f70:	20001584 	.word	0x20001584

08003f74 <SX1276IsChannelFree>:
{
 8003f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return false;
 8003f76:	2500      	movs	r5, #0
{
 8003f78:	9301      	str	r3, [sp, #4]
    return SX1276.Settings.State;
 8003f7a:	4b13      	ldr	r3, [pc, #76]	; (8003fc8 <SX1276IsChannelFree+0x54>)
{
 8003f7c:	0004      	movs	r4, r0
    if( SX1276GetStatus( ) != RF_IDLE )
 8003f7e:	791b      	ldrb	r3, [r3, #4]
{
 8003f80:	000f      	movs	r7, r1
 8003f82:	0016      	movs	r6, r2
    if( SX1276GetStatus( ) != RF_IDLE )
 8003f84:	42ab      	cmp	r3, r5
 8003f86:	d116      	bne.n	8003fb6 <SX1276IsChannelFree+0x42>
    SX1276SetModem( modem );
 8003f88:	f7ff ff76 	bl	8003e78 <SX1276SetModem>
    SX1276SetChannel( freq );
 8003f8c:	0038      	movs	r0, r7
 8003f8e:	f7ff fbd1 	bl	8003734 <SX1276SetChannel>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8003f92:	2005      	movs	r0, #5
 8003f94:	f7ff fdbc 	bl	8003b10 <SX1276SetOpMode>
    DelayMs( 1 );
 8003f98:	2001      	movs	r0, #1
 8003f9a:	f00b f9f1 	bl	800f380 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8003f9e:	f00a fc56 	bl	800e84e <TimerGetCurrentTime>
 8003fa2:	0005      	movs	r5, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8003fa4:	0028      	movs	r0, r5
 8003fa6:	f00a fc58 	bl	800e85a <TimerGetElapsedTime>
 8003faa:	9b01      	ldr	r3, [sp, #4]
 8003fac:	4298      	cmp	r0, r3
 8003fae:	d304      	bcc.n	8003fba <SX1276IsChannelFree+0x46>
    bool status = true;
 8003fb0:	2501      	movs	r5, #1
    SX1276SetSleep( );
 8003fb2:	f7ff fd8d 	bl	8003ad0 <SX1276SetSleep>
}
 8003fb6:	0028      	movs	r0, r5
 8003fb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( modem );
 8003fba:	0020      	movs	r0, r4
 8003fbc:	f7ff fd50 	bl	8003a60 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 8003fc0:	42b0      	cmp	r0, r6
 8003fc2:	ddef      	ble.n	8003fa4 <SX1276IsChannelFree+0x30>
            status = false;
 8003fc4:	2500      	movs	r5, #0
 8003fc6:	e7f4      	b.n	8003fb2 <SX1276IsChannelFree+0x3e>
 8003fc8:	20001584 	.word	0x20001584

08003fcc <SX1276Random>:
{
 8003fcc:	b570      	push	{r4, r5, r6, lr}
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8003fce:	2400      	movs	r4, #0
    SX1276SetModem( MODEM_LORA );
 8003fd0:	2001      	movs	r0, #1
 8003fd2:	f7ff ff51 	bl	8003e78 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003fd6:	21ff      	movs	r1, #255	; 0xff
 8003fd8:	2011      	movs	r0, #17
 8003fda:	f7ff fba2 	bl	8003722 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8003fde:	2005      	movs	r0, #5
 8003fe0:	f7ff fd96 	bl	8003b10 <SX1276SetOpMode>
    uint32_t rnd = 0;
 8003fe4:	0025      	movs	r5, r4
        DelayMs( 1 );
 8003fe6:	2601      	movs	r6, #1
 8003fe8:	0030      	movs	r0, r6
 8003fea:	f00b f9c9 	bl	800f380 <HAL_Delay>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8003fee:	202c      	movs	r0, #44	; 0x2c
 8003ff0:	f7ff fbea 	bl	80037c8 <SX1276Read>
 8003ff4:	4030      	ands	r0, r6
 8003ff6:	40a0      	lsls	r0, r4
 8003ff8:	3401      	adds	r4, #1
 8003ffa:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 8003ffc:	2c20      	cmp	r4, #32
 8003ffe:	d1f3      	bne.n	8003fe8 <SX1276Random+0x1c>
    SX1276SetSleep( );
 8004000:	f7ff fd66 	bl	8003ad0 <SX1276SetSleep>
}
 8004004:	0028      	movs	r0, r5
 8004006:	bd70      	pop	{r4, r5, r6, pc}

08004008 <SX1276SetRxConfig>:
{
 8004008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800400a:	b08d      	sub	sp, #52	; 0x34
 800400c:	9306      	str	r3, [sp, #24]
 800400e:	ab12      	add	r3, sp, #72	; 0x48
 8004010:	0016      	movs	r6, r2
 8004012:	cb04      	ldmia	r3!, {r2}
 8004014:	0004      	movs	r4, r0
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	9208      	str	r2, [sp, #32]
 800401a:	9301      	str	r3, [sp, #4]
 800401c:	ab14      	add	r3, sp, #80	; 0x50
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	aa0c      	add	r2, sp, #48	; 0x30
 8004022:	9305      	str	r3, [sp, #20]
 8004024:	ab15      	add	r3, sp, #84	; 0x54
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	000d      	movs	r5, r1
 800402a:	9302      	str	r3, [sp, #8]
 800402c:	ab16      	add	r3, sp, #88	; 0x58
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	9303      	str	r3, [sp, #12]
 8004032:	ab17      	add	r3, sp, #92	; 0x5c
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	9304      	str	r3, [sp, #16]
 8004038:	ab18      	add	r3, sp, #96	; 0x60
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	930a      	str	r3, [sp, #40]	; 0x28
 800403e:	ab19      	add	r3, sp, #100	; 0x64
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	930b      	str	r3, [sp, #44]	; 0x2c
 8004044:	2319      	movs	r3, #25
 8004046:	189b      	adds	r3, r3, r2
 8004048:	7fdf      	ldrb	r7, [r3, #31]
 800404a:	231d      	movs	r3, #29
 800404c:	189b      	adds	r3, r3, r2
 800404e:	7fdb      	ldrb	r3, [r3, #31]
 8004050:	9309      	str	r3, [sp, #36]	; 0x24
    SX1276SetModem( modem );
 8004052:	f7ff ff11 	bl	8003e78 <SX1276SetModem>
    switch( modem )
 8004056:	2c00      	cmp	r4, #0
 8004058:	d004      	beq.n	8004064 <SX1276SetRxConfig+0x5c>
 800405a:	2c01      	cmp	r4, #1
 800405c:	d100      	bne.n	8004060 <SX1276SetRxConfig+0x58>
 800405e:	e084      	b.n	800416a <SX1276SetRxConfig+0x162>
}
 8004060:	b00d      	add	sp, #52	; 0x34
 8004062:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8004064:	4ca6      	ldr	r4, [pc, #664]	; (8004300 <SX1276SetRxConfig+0x2f8>)
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8004066:	9b08      	ldr	r3, [sp, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8004068:	9a02      	ldr	r2, [sp, #8]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800406a:	61a3      	str	r3, [r4, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800406c:	1ce3      	adds	r3, r4, #3
 800406e:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8004070:	9a03      	ldr	r2, [sp, #12]
 8004072:	1d23      	adds	r3, r4, #4
 8004074:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8004076:	9a04      	ldr	r2, [sp, #16]
 8004078:	1d63      	adds	r3, r4, #5
 800407a:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 800407c:	9a09      	ldr	r2, [sp, #36]	; 0x24
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800407e:	1da3      	adds	r3, r4, #6
 8004080:	77df      	strb	r7, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8004082:	1de3      	adds	r3, r4, #7
 8004084:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8004086:	9b01      	ldr	r3, [sp, #4]
            SX1276.Settings.Fsk.Datarate = datarate;
 8004088:	61e6      	str	r6, [r4, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800408a:	8423      	strh	r3, [r4, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 800408c:	0030      	movs	r0, r6
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800408e:	6165      	str	r5, [r4, #20]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8004090:	f7fe ffe0 	bl	8003054 <__aeabi_ui2d>
 8004094:	0002      	movs	r2, r0
 8004096:	000b      	movs	r3, r1
 8004098:	0006      	movs	r6, r0
 800409a:	000f      	movs	r7, r1
 800409c:	2000      	movs	r0, #0
 800409e:	4999      	ldr	r1, [pc, #612]	; (8004304 <SX1276SetRxConfig+0x2fc>)
 80040a0:	f7fd fd6e 	bl	8001b80 <__aeabi_ddiv>
 80040a4:	2200      	movs	r2, #0
 80040a6:	4b98      	ldr	r3, [pc, #608]	; (8004308 <SX1276SetRxConfig+0x300>)
 80040a8:	f7fe f970 	bl	800238c <__aeabi_dmul>
 80040ac:	9006      	str	r0, [sp, #24]
 80040ae:	9107      	str	r1, [sp, #28]
 80040b0:	9805      	ldr	r0, [sp, #20]
 80040b2:	f7fe ff9f 	bl	8002ff4 <__aeabi_i2d>
 80040b6:	0002      	movs	r2, r0
 80040b8:	000b      	movs	r3, r1
 80040ba:	9806      	ldr	r0, [sp, #24]
 80040bc:	9907      	ldr	r1, [sp, #28]
 80040be:	f7fe f965 	bl	800238c <__aeabi_dmul>
 80040c2:	2200      	movs	r2, #0
 80040c4:	4b91      	ldr	r3, [pc, #580]	; (800430c <SX1276SetRxConfig+0x304>)
 80040c6:	f7fe f961 	bl	800238c <__aeabi_dmul>
 80040ca:	f7fc fa61 	bl	8000590 <__aeabi_d2uiz>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80040ce:	0032      	movs	r2, r6
 80040d0:	003b      	movs	r3, r7
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 80040d2:	62e0      	str	r0, [r4, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80040d4:	498e      	ldr	r1, [pc, #568]	; (8004310 <SX1276SetRxConfig+0x308>)
 80040d6:	2000      	movs	r0, #0
 80040d8:	f7fd fd52 	bl	8001b80 <__aeabi_ddiv>
 80040dc:	f7fc fa58 	bl	8000590 <__aeabi_d2uiz>
 80040e0:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80040e2:	0a21      	lsrs	r1, r4, #8
 80040e4:	2002      	movs	r0, #2
 80040e6:	f7ff fb1c 	bl	8003722 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80040ea:	b2e1      	uxtb	r1, r4
 80040ec:	2003      	movs	r0, #3
 80040ee:	f7ff fb18 	bl	8003722 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 80040f2:	0028      	movs	r0, r5
 80040f4:	f7ff fa9e 	bl	8003634 <GetFskBandwidthRegValue>
 80040f8:	0001      	movs	r1, r0
 80040fa:	2012      	movs	r0, #18
 80040fc:	f7ff fb11 	bl	8003722 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8004100:	9808      	ldr	r0, [sp, #32]
 8004102:	f7ff fa97 	bl	8003634 <GetFskBandwidthRegValue>
 8004106:	0001      	movs	r1, r0
 8004108:	2013      	movs	r0, #19
 800410a:	f7ff fb0a 	bl	8003722 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800410e:	9b01      	ldr	r3, [sp, #4]
 8004110:	2025      	movs	r0, #37	; 0x25
 8004112:	0a19      	lsrs	r1, r3, #8
 8004114:	f7ff fb05 	bl	8003722 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8004118:	466b      	mov	r3, sp
 800411a:	2026      	movs	r0, #38	; 0x26
 800411c:	7919      	ldrb	r1, [r3, #4]
 800411e:	f7ff fb00 	bl	8003722 <SX1276Write>
            if( fixLen == 1 )
 8004122:	9b02      	ldr	r3, [sp, #8]
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8004124:	9903      	ldr	r1, [sp, #12]
            if( fixLen == 1 )
 8004126:	2b00      	cmp	r3, #0
 8004128:	d100      	bne.n	800412c <SX1276SetRxConfig+0x124>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 800412a:	21ff      	movs	r1, #255	; 0xff
 800412c:	2032      	movs	r0, #50	; 0x32
 800412e:	f7ff faf8 	bl	8003722 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8004132:	2030      	movs	r0, #48	; 0x30
 8004134:	f7ff fb48 	bl	80037c8 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8004138:	216f      	movs	r1, #111	; 0x6f
 800413a:	4008      	ands	r0, r1
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800413c:	2100      	movs	r1, #0
 800413e:	9b02      	ldr	r3, [sp, #8]
 8004140:	428b      	cmp	r3, r1
 8004142:	d100      	bne.n	8004146 <SX1276SetRxConfig+0x13e>
 8004144:	3980      	subs	r1, #128	; 0x80
                           ( crcOn << 4 ) );
 8004146:	9b04      	ldr	r3, [sp, #16]
 8004148:	011c      	lsls	r4, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800414a:	4320      	orrs	r0, r4
 800414c:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 800414e:	b2c9      	uxtb	r1, r1
 8004150:	2030      	movs	r0, #48	; 0x30
 8004152:	f7ff fae6 	bl	8003722 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8004156:	2031      	movs	r0, #49	; 0x31
 8004158:	f7ff fb36 	bl	80037c8 <SX1276Read>
 800415c:	2140      	movs	r1, #64	; 0x40
 800415e:	4301      	orrs	r1, r0
 8004160:	2031      	movs	r0, #49	; 0x31
 8004162:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8004164:	f7ff fadd 	bl	8003722 <SX1276Write>
}
 8004168:	e77a      	b.n	8004060 <SX1276SetRxConfig+0x58>
            if( bandwidth > 2 )
 800416a:	2d02      	cmp	r5, #2
 800416c:	d900      	bls.n	8004170 <SX1276SetRxConfig+0x168>
                while( 1 );
 800416e:	e7fe      	b.n	800416e <SX1276SetRxConfig+0x166>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8004170:	4b63      	ldr	r3, [pc, #396]	; (8004300 <SX1276SetRxConfig+0x2f8>)
            SX1276.Settings.LoRa.Coderate = coderate;
 8004172:	9906      	ldr	r1, [sp, #24]
 8004174:	001a      	movs	r2, r3
 8004176:	324d      	adds	r2, #77	; 0x4d
 8004178:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800417a:	001a      	movs	r2, r3
 800417c:	9901      	ldr	r1, [sp, #4]
 800417e:	324e      	adds	r2, #78	; 0x4e
 8004180:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8004182:	001a      	movs	r2, r3
 8004184:	9902      	ldr	r1, [sp, #8]
 8004186:	3250      	adds	r2, #80	; 0x50
 8004188:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 800418a:	001a      	movs	r2, r3
 800418c:	9903      	ldr	r1, [sp, #12]
 800418e:	3251      	adds	r2, #81	; 0x51
 8004190:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8004192:	001a      	movs	r2, r3
 8004194:	9904      	ldr	r1, [sp, #16]
 8004196:	3252      	adds	r2, #82	; 0x52
 8004198:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800419a:	001a      	movs	r2, r3
 800419c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800419e:	3253      	adds	r2, #83	; 0x53
 80041a0:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80041a2:	001a      	movs	r2, r3
 80041a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80041a6:	3254      	adds	r2, #84	; 0x54
 80041a8:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80041aa:	001a      	movs	r2, r3
 80041ac:	3255      	adds	r2, #85	; 0x55
            bandwidth += 7;
 80041ae:	3507      	adds	r5, #7
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80041b0:	7017      	strb	r7, [r2, #0]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 80041b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80041b4:	645d      	str	r5, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 80041b6:	649e      	str	r6, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 80041b8:	3356      	adds	r3, #86	; 0x56
 80041ba:	2406      	movs	r4, #6
 80041bc:	701a      	strb	r2, [r3, #0]
            if( datarate > 12 )
 80041be:	2e06      	cmp	r6, #6
 80041c0:	d303      	bcc.n	80041ca <SX1276SetRxConfig+0x1c2>
 80041c2:	0034      	movs	r4, r6
 80041c4:	2e0c      	cmp	r6, #12
 80041c6:	d900      	bls.n	80041ca <SX1276SetRxConfig+0x1c2>
 80041c8:	240c      	movs	r4, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80041ca:	2d07      	cmp	r5, #7
 80041cc:	d17d      	bne.n	80042ca <SX1276SetRxConfig+0x2c2>
 80041ce:	0022      	movs	r2, r4
 80041d0:	2300      	movs	r3, #0
 80041d2:	2101      	movs	r1, #1
 80041d4:	3a0b      	subs	r2, #11
 80041d6:	4291      	cmp	r1, r2
 80041d8:	415b      	adcs	r3, r3
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	4f48      	ldr	r7, [pc, #288]	; (8004300 <SX1276SetRxConfig+0x2f8>)
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80041de:	201d      	movs	r0, #29
 80041e0:	374c      	adds	r7, #76	; 0x4c
 80041e2:	703b      	strb	r3, [r7, #0]
 80041e4:	f7ff faf0 	bl	80037c8 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80041e8:	9b06      	ldr	r3, [sp, #24]
            SX1276Write( REG_LR_MODEMCONFIG1,
 80041ea:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80041ec:	0059      	lsls	r1, r3, #1
 80041ee:	9b02      	ldr	r3, [sp, #8]
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80041f0:	0124      	lsls	r4, r4, #4
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80041f2:	4319      	orrs	r1, r3
 80041f4:	012b      	lsls	r3, r5, #4
 80041f6:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80041f8:	b2c9      	uxtb	r1, r1
 80041fa:	f7ff fa92 	bl	8003722 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80041fe:	201e      	movs	r0, #30
 8004200:	f7ff fae2 	bl	80037c8 <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8004204:	9b05      	ldr	r3, [sp, #20]
 8004206:	0599      	lsls	r1, r3, #22
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8004208:	9b04      	ldr	r3, [sp, #16]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800420a:	0f89      	lsrs	r1, r1, #30
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800420c:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 800420e:	4319      	orrs	r1, r3
 8004210:	4321      	orrs	r1, r4
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8004212:	2408      	movs	r4, #8
 8004214:	4020      	ands	r0, r4
            SX1276Write( REG_LR_MODEMCONFIG2,
 8004216:	4301      	orrs	r1, r0
 8004218:	b2c9      	uxtb	r1, r1
 800421a:	201e      	movs	r0, #30
 800421c:	f7ff fa81 	bl	8003722 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8004220:	2026      	movs	r0, #38	; 0x26
 8004222:	f7ff fad1 	bl	80037c8 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8004226:	7839      	ldrb	r1, [r7, #0]
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8004228:	43a0      	bics	r0, r4
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800422a:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800422c:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 800422e:	b2c9      	uxtb	r1, r1
 8004230:	2026      	movs	r0, #38	; 0x26
 8004232:	f7ff fa76 	bl	8003722 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8004236:	466b      	mov	r3, sp
 8004238:	201f      	movs	r0, #31
 800423a:	7d19      	ldrb	r1, [r3, #20]
 800423c:	f7ff fa71 	bl	8003722 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8004240:	9b01      	ldr	r3, [sp, #4]
 8004242:	2020      	movs	r0, #32
 8004244:	0a19      	lsrs	r1, r3, #8
 8004246:	f7ff fa6c 	bl	8003722 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800424a:	466b      	mov	r3, sp
 800424c:	2021      	movs	r0, #33	; 0x21
 800424e:	7919      	ldrb	r1, [r3, #4]
 8004250:	f7ff fa67 	bl	8003722 <SX1276Write>
            if( fixLen == 1 )
 8004254:	9b02      	ldr	r3, [sp, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <SX1276SetRxConfig+0x25a>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 800425a:	2022      	movs	r0, #34	; 0x22
 800425c:	9903      	ldr	r1, [sp, #12]
 800425e:	f7ff fa60 	bl	8003722 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004262:	4b27      	ldr	r3, [pc, #156]	; (8004300 <SX1276SetRxConfig+0x2f8>)
 8004264:	3353      	adds	r3, #83	; 0x53
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00f      	beq.n	800428c <SX1276SetRxConfig+0x284>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800426c:	2044      	movs	r0, #68	; 0x44
 800426e:	f7ff faab 	bl	80037c8 <SX1276Read>
 8004272:	2180      	movs	r1, #128	; 0x80
 8004274:	4249      	negs	r1, r1
 8004276:	4301      	orrs	r1, r0
 8004278:	b2c9      	uxtb	r1, r1
 800427a:	2044      	movs	r0, #68	; 0x44
 800427c:	f7ff fa51 	bl	8003722 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8004280:	4b1f      	ldr	r3, [pc, #124]	; (8004300 <SX1276SetRxConfig+0x2f8>)
 8004282:	2024      	movs	r0, #36	; 0x24
 8004284:	3354      	adds	r3, #84	; 0x54
 8004286:	7819      	ldrb	r1, [r3, #0]
 8004288:	f7ff fa4b 	bl	8003722 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800428c:	2d09      	cmp	r5, #9
 800428e:	d128      	bne.n	80042e2 <SX1276SetRxConfig+0x2da>
 8004290:	4a1b      	ldr	r2, [pc, #108]	; (8004300 <SX1276SetRxConfig+0x2f8>)
 8004292:	4b20      	ldr	r3, [pc, #128]	; (8004314 <SX1276SetRxConfig+0x30c>)
 8004294:	6892      	ldr	r2, [r2, #8]
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8004296:	2102      	movs	r1, #2
 8004298:	2036      	movs	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800429a:	429a      	cmp	r2, r3
 800429c:	d91d      	bls.n	80042da <SX1276SetRxConfig+0x2d2>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800429e:	f7ff fa40 	bl	8003722 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 80042a2:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 80042a4:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 80042a6:	f7ff fa3c 	bl	8003722 <SX1276Write>
            if( datarate == 6 )
 80042aa:	2407      	movs	r4, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80042ac:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 80042ae:	2e06      	cmp	r6, #6
 80042b0:	d81a      	bhi.n	80042e8 <SX1276SetRxConfig+0x2e0>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80042b2:	f7ff fa89 	bl	80037c8 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80042b6:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80042b8:	43a0      	bics	r0, r4
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80042ba:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80042bc:	b2c9      	uxtb	r1, r1
 80042be:	2031      	movs	r0, #49	; 0x31
 80042c0:	f7ff fa2f 	bl	8003722 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80042c4:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80042c6:	2037      	movs	r0, #55	; 0x37
 80042c8:	e74c      	b.n	8004164 <SX1276SetRxConfig+0x15c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80042ca:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80042cc:	2d08      	cmp	r5, #8
 80042ce:	d185      	bne.n	80041dc <SX1276SetRxConfig+0x1d4>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80042d0:	330b      	adds	r3, #11
 80042d2:	42b3      	cmp	r3, r6
 80042d4:	419b      	sbcs	r3, r3
 80042d6:	425b      	negs	r3, r3
 80042d8:	e780      	b.n	80041dc <SX1276SetRxConfig+0x1d4>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80042da:	f7ff fa22 	bl	8003722 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 80042de:	217f      	movs	r1, #127	; 0x7f
 80042e0:	e7e0      	b.n	80042a4 <SX1276SetRxConfig+0x29c>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 80042e2:	2103      	movs	r1, #3
 80042e4:	2036      	movs	r0, #54	; 0x36
 80042e6:	e7de      	b.n	80042a6 <SX1276SetRxConfig+0x29e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80042e8:	f7ff fa6e 	bl	80037c8 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80042ec:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80042ee:	43a0      	bics	r0, r4
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80042f0:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80042f2:	b2c9      	uxtb	r1, r1
 80042f4:	2031      	movs	r0, #49	; 0x31
 80042f6:	f7ff fa14 	bl	8003722 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80042fa:	210a      	movs	r1, #10
 80042fc:	e7e3      	b.n	80042c6 <SX1276SetRxConfig+0x2be>
 80042fe:	46c0      	nop			; (mov r8, r8)
 8004300:	20001584 	.word	0x20001584
 8004304:	3ff00000 	.word	0x3ff00000
 8004308:	40200000 	.word	0x40200000
 800430c:	408f4000 	.word	0x408f4000
 8004310:	417e8480 	.word	0x417e8480
 8004314:	1f4add40 	.word	0x1f4add40

08004318 <SX1276SetTxConfig>:
{
 8004318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800431a:	000e      	movs	r6, r1
 800431c:	b089      	sub	sp, #36	; 0x24
 800431e:	001f      	movs	r7, r3
 8004320:	ab0e      	add	r3, sp, #56	; 0x38
 8004322:	cb20      	ldmia	r3!, {r5}
 8004324:	0004      	movs	r4, r0
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	9203      	str	r2, [sp, #12]
 800432a:	9304      	str	r3, [sp, #16]
 800432c:	ab10      	add	r3, sp, #64	; 0x40
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	ab11      	add	r3, sp, #68	; 0x44
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	9301      	str	r3, [sp, #4]
 8004338:	ab12      	add	r3, sp, #72	; 0x48
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	9302      	str	r3, [sp, #8]
 800433e:	ab13      	add	r3, sp, #76	; 0x4c
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	9305      	str	r3, [sp, #20]
 8004344:	ab14      	add	r3, sp, #80	; 0x50
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	9307      	str	r3, [sp, #28]
 800434a:	ab15      	add	r3, sp, #84	; 0x54
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	9306      	str	r3, [sp, #24]
    SX1276SetModem( modem );
 8004350:	f7ff fd92 	bl	8003e78 <SX1276SetModem>
    LoRaBoardCallbacks->SX1276BoardSetRfTxPower( power );
 8004354:	4b87      	ldr	r3, [pc, #540]	; (8004574 <SX1276SetTxConfig+0x25c>)
 8004356:	0030      	movs	r0, r6
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	4798      	blx	r3
    switch( modem )
 800435e:	2c00      	cmp	r4, #0
 8004360:	d003      	beq.n	800436a <SX1276SetTxConfig+0x52>
 8004362:	2c01      	cmp	r4, #1
 8004364:	d060      	beq.n	8004428 <SX1276SetTxConfig+0x110>
}
 8004366:	b009      	add	sp, #36	; 0x24
 8004368:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.Power = power;
 800436a:	4b83      	ldr	r3, [pc, #524]	; (8004578 <SX1276SetTxConfig+0x260>)
            SX1276.Settings.Fsk.Fdev = fdev;
 800436c:	9a03      	ldr	r2, [sp, #12]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800436e:	9901      	ldr	r1, [sp, #4]
            SX1276.Settings.Fsk.Fdev = fdev;
 8004370:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8004372:	9a00      	ldr	r2, [sp, #0]
            SX1276.Settings.Fsk.Power = power;
 8004374:	731e      	strb	r6, [r3, #12]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8004376:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8004378:	1cda      	adds	r2, r3, #3
 800437a:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800437c:	9902      	ldr	r1, [sp, #8]
 800437e:	1d5a      	adds	r2, r3, #5
 8004380:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8004382:	9906      	ldr	r1, [sp, #24]
 8004384:	1d9a      	adds	r2, r3, #6
 8004386:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8004388:	9a16      	ldr	r2, [sp, #88]	; 0x58
            SX1276.Settings.Fsk.Datarate = datarate;
 800438a:	61dd      	str	r5, [r3, #28]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 800438c:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 800438e:	9803      	ldr	r0, [sp, #12]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8004390:	615f      	str	r7, [r3, #20]
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8004392:	f7fe fe5f 	bl	8003054 <__aeabi_ui2d>
 8004396:	2200      	movs	r2, #0
 8004398:	4b78      	ldr	r3, [pc, #480]	; (800457c <SX1276SetTxConfig+0x264>)
 800439a:	f7fd fbf1 	bl	8001b80 <__aeabi_ddiv>
 800439e:	f7fc f8f7 	bl	8000590 <__aeabi_d2uiz>
 80043a2:	b286      	uxth	r6, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 80043a4:	0a31      	lsrs	r1, r6, #8
 80043a6:	2004      	movs	r0, #4
 80043a8:	f7ff f9bb 	bl	8003722 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 80043ac:	2005      	movs	r0, #5
 80043ae:	b2f1      	uxtb	r1, r6
 80043b0:	f7ff f9b7 	bl	8003722 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80043b4:	0028      	movs	r0, r5
 80043b6:	f7fe fe4d 	bl	8003054 <__aeabi_ui2d>
 80043ba:	0002      	movs	r2, r0
 80043bc:	000b      	movs	r3, r1
 80043be:	2000      	movs	r0, #0
 80043c0:	496f      	ldr	r1, [pc, #444]	; (8004580 <SX1276SetTxConfig+0x268>)
 80043c2:	f7fd fbdd 	bl	8001b80 <__aeabi_ddiv>
 80043c6:	f7fc f8e3 	bl	8000590 <__aeabi_d2uiz>
 80043ca:	b285      	uxth	r5, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80043cc:	0a29      	lsrs	r1, r5, #8
 80043ce:	2002      	movs	r0, #2
 80043d0:	f7ff f9a7 	bl	8003722 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80043d4:	2003      	movs	r0, #3
 80043d6:	b2e9      	uxtb	r1, r5
 80043d8:	f7ff f9a3 	bl	8003722 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80043dc:	9b00      	ldr	r3, [sp, #0]
 80043de:	2025      	movs	r0, #37	; 0x25
 80043e0:	0a19      	lsrs	r1, r3, #8
 80043e2:	f7ff f99e 	bl	8003722 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 80043e6:	466b      	mov	r3, sp
 80043e8:	2026      	movs	r0, #38	; 0x26
 80043ea:	7819      	ldrb	r1, [r3, #0]
 80043ec:	f7ff f999 	bl	8003722 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 80043f0:	2030      	movs	r0, #48	; 0x30
 80043f2:	f7ff f9e9 	bl	80037c8 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 80043f6:	216f      	movs	r1, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80043f8:	9b01      	ldr	r3, [sp, #4]
                           RF_PACKETCONFIG1_CRC_MASK &
 80043fa:	4001      	ands	r1, r0
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <SX1276SetTxConfig+0xec>
 8004400:	2480      	movs	r4, #128	; 0x80
 8004402:	4264      	negs	r4, r4
                           ( crcOn << 4 ) );
 8004404:	9b02      	ldr	r3, [sp, #8]
 8004406:	0118      	lsls	r0, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8004408:	4301      	orrs	r1, r0
 800440a:	4321      	orrs	r1, r4
            SX1276Write( REG_PACKETCONFIG1,
 800440c:	b2c9      	uxtb	r1, r1
 800440e:	2030      	movs	r0, #48	; 0x30
 8004410:	f7ff f987 	bl	8003722 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8004414:	2031      	movs	r0, #49	; 0x31
 8004416:	f7ff f9d7 	bl	80037c8 <SX1276Read>
 800441a:	2140      	movs	r1, #64	; 0x40
 800441c:	4301      	orrs	r1, r0
 800441e:	2031      	movs	r0, #49	; 0x31
 8004420:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8004422:	f7ff f97e 	bl	8003722 <SX1276Write>
}
 8004426:	e79e      	b.n	8004366 <SX1276SetTxConfig+0x4e>
            SX1276.Settings.LoRa.Power = power;
 8004428:	4b53      	ldr	r3, [pc, #332]	; (8004578 <SX1276SetTxConfig+0x260>)
 800442a:	001a      	movs	r2, r3
 800442c:	3240      	adds	r2, #64	; 0x40
 800442e:	7016      	strb	r6, [r2, #0]
            if( bandwidth > 2 )
 8004430:	2f02      	cmp	r7, #2
 8004432:	d900      	bls.n	8004436 <SX1276SetTxConfig+0x11e>
                while( 1 );
 8004434:	e7fe      	b.n	8004434 <SX1276SetTxConfig+0x11c>
            SX1276.Settings.LoRa.Coderate = coderate;
 8004436:	001a      	movs	r2, r3
 8004438:	9904      	ldr	r1, [sp, #16]
 800443a:	324d      	adds	r2, #77	; 0x4d
 800443c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800443e:	001a      	movs	r2, r3
 8004440:	9900      	ldr	r1, [sp, #0]
 8004442:	324e      	adds	r2, #78	; 0x4e
 8004444:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8004446:	001a      	movs	r2, r3
 8004448:	9901      	ldr	r1, [sp, #4]
 800444a:	3250      	adds	r2, #80	; 0x50
 800444c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800444e:	001a      	movs	r2, r3
 8004450:	9905      	ldr	r1, [sp, #20]
 8004452:	3253      	adds	r2, #83	; 0x53
 8004454:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8004456:	001a      	movs	r2, r3
 8004458:	9907      	ldr	r1, [sp, #28]
 800445a:	3254      	adds	r2, #84	; 0x54
 800445c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800445e:	001a      	movs	r2, r3
 8004460:	9902      	ldr	r1, [sp, #8]
 8004462:	3252      	adds	r2, #82	; 0x52
 8004464:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8004466:	001a      	movs	r2, r3
 8004468:	9906      	ldr	r1, [sp, #24]
 800446a:	3255      	adds	r2, #85	; 0x55
 800446c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800446e:	9a16      	ldr	r2, [sp, #88]	; 0x58
            bandwidth += 7;
 8004470:	1dfe      	adds	r6, r7, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8004472:	2406      	movs	r4, #6
 8004474:	645e      	str	r6, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8004476:	649d      	str	r5, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8004478:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 800447a:	2d06      	cmp	r5, #6
 800447c:	d303      	bcc.n	8004486 <SX1276SetTxConfig+0x16e>
 800447e:	002c      	movs	r4, r5
 8004480:	2d0c      	cmp	r5, #12
 8004482:	d900      	bls.n	8004486 <SX1276SetTxConfig+0x16e>
 8004484:	240c      	movs	r4, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8004486:	2e07      	cmp	r6, #7
 8004488:	d160      	bne.n	800454c <SX1276SetTxConfig+0x234>
 800448a:	0022      	movs	r2, r4
 800448c:	2300      	movs	r3, #0
 800448e:	2101      	movs	r1, #1
 8004490:	3a0b      	subs	r2, #11
 8004492:	4291      	cmp	r1, r2
 8004494:	415b      	adcs	r3, r3
 8004496:	b2db      	uxtb	r3, r3
 8004498:	4f37      	ldr	r7, [pc, #220]	; (8004578 <SX1276SetTxConfig+0x260>)
 800449a:	003a      	movs	r2, r7
 800449c:	324c      	adds	r2, #76	; 0x4c
 800449e:	7013      	strb	r3, [r2, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80044a0:	9b05      	ldr	r3, [sp, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00f      	beq.n	80044c6 <SX1276SetTxConfig+0x1ae>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80044a6:	2044      	movs	r0, #68	; 0x44
 80044a8:	f7ff f98e 	bl	80037c8 <SX1276Read>
 80044ac:	2180      	movs	r1, #128	; 0x80
 80044ae:	4249      	negs	r1, r1
 80044b0:	4301      	orrs	r1, r0
 80044b2:	b2c9      	uxtb	r1, r1
 80044b4:	2044      	movs	r0, #68	; 0x44
 80044b6:	f7ff f934 	bl	8003722 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80044ba:	003b      	movs	r3, r7
 80044bc:	3354      	adds	r3, #84	; 0x54
 80044be:	2024      	movs	r0, #36	; 0x24
 80044c0:	7819      	ldrb	r1, [r3, #0]
 80044c2:	f7ff f92e 	bl	8003722 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80044c6:	201d      	movs	r0, #29
 80044c8:	f7ff f97e 	bl	80037c8 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80044cc:	9b04      	ldr	r3, [sp, #16]
 80044ce:	0136      	lsls	r6, r6, #4
 80044d0:	0059      	lsls	r1, r3, #1
 80044d2:	9b01      	ldr	r3, [sp, #4]
            SX1276Write( REG_LR_MODEMCONFIG1,
 80044d4:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80044d6:	430b      	orrs	r3, r1
 80044d8:	0019      	movs	r1, r3
 80044da:	4331      	orrs	r1, r6
            SX1276Write( REG_LR_MODEMCONFIG1,
 80044dc:	b2c9      	uxtb	r1, r1
 80044de:	f7ff f920 	bl	8003722 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80044e2:	201e      	movs	r0, #30
 80044e4:	f7ff f970 	bl	80037c8 <SX1276Read>
                           RFLR_MODEMCONFIG2_SF_MASK &
 80044e8:	210b      	movs	r1, #11
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80044ea:	9b02      	ldr	r3, [sp, #8]
 80044ec:	0124      	lsls	r4, r4, #4
 80044ee:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 80044f0:	431c      	orrs	r4, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 80044f2:	4001      	ands	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG2,
 80044f4:	4321      	orrs	r1, r4
 80044f6:	b2c9      	uxtb	r1, r1
 80044f8:	201e      	movs	r0, #30
 80044fa:	f7ff f912 	bl	8003722 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80044fe:	2026      	movs	r0, #38	; 0x26
 8004500:	f7ff f962 	bl	80037c8 <SX1276Read>
 8004504:	2308      	movs	r3, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8004506:	374c      	adds	r7, #76	; 0x4c
 8004508:	7839      	ldrb	r1, [r7, #0]
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800450a:	4398      	bics	r0, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800450c:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800450e:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 8004510:	b2c9      	uxtb	r1, r1
 8004512:	2026      	movs	r0, #38	; 0x26
 8004514:	f7ff f905 	bl	8003722 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8004518:	9b00      	ldr	r3, [sp, #0]
 800451a:	2020      	movs	r0, #32
 800451c:	0a19      	lsrs	r1, r3, #8
 800451e:	f7ff f900 	bl	8003722 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8004522:	466b      	mov	r3, sp
 8004524:	2021      	movs	r0, #33	; 0x21
 8004526:	7819      	ldrb	r1, [r3, #0]
 8004528:	f7ff f8fb 	bl	8003722 <SX1276Write>
            if( datarate == 6 )
 800452c:	2407      	movs	r4, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800452e:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 8004530:	2d06      	cmp	r5, #6
 8004532:	d813      	bhi.n	800455c <SX1276SetTxConfig+0x244>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8004534:	f7ff f948 	bl	80037c8 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8004538:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800453a:	43a0      	bics	r0, r4
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800453c:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800453e:	b2c9      	uxtb	r1, r1
 8004540:	2031      	movs	r0, #49	; 0x31
 8004542:	f7ff f8ee 	bl	8003722 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8004546:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8004548:	2037      	movs	r0, #55	; 0x37
 800454a:	e76a      	b.n	8004422 <SX1276SetTxConfig+0x10a>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800454c:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800454e:	2e08      	cmp	r6, #8
 8004550:	d1a2      	bne.n	8004498 <SX1276SetTxConfig+0x180>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8004552:	330b      	adds	r3, #11
 8004554:	42ab      	cmp	r3, r5
 8004556:	419b      	sbcs	r3, r3
 8004558:	425b      	negs	r3, r3
 800455a:	e79d      	b.n	8004498 <SX1276SetTxConfig+0x180>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800455c:	f7ff f934 	bl	80037c8 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8004560:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8004562:	43a0      	bics	r0, r4
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8004564:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8004566:	b2c9      	uxtb	r1, r1
 8004568:	2031      	movs	r0, #49	; 0x31
 800456a:	f7ff f8da 	bl	8003722 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800456e:	210a      	movs	r1, #10
 8004570:	e7ea      	b.n	8004548 <SX1276SetTxConfig+0x230>
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	2000020c 	.word	0x2000020c
 8004578:	20001584 	.word	0x20001584
 800457c:	404e8480 	.word	0x404e8480
 8004580:	417e8480 	.word	0x417e8480

08004584 <SX1276SetTxContinuousWave>:
{
 8004584:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )( time * 1000 );
 8004586:	24fa      	movs	r4, #250	; 0xfa
{
 8004588:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )( time * 1000 );
 800458a:	00a4      	lsls	r4, r4, #2
 800458c:	4354      	muls	r4, r2
{
 800458e:	000d      	movs	r5, r1
    SX1276SetChannel( freq );
 8004590:	f7ff f8d0 	bl	8003734 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8004594:	2305      	movs	r3, #5
 8004596:	9302      	str	r3, [sp, #8]
 8004598:	2396      	movs	r3, #150	; 0x96
 800459a:	2000      	movs	r0, #0
 800459c:	015b      	lsls	r3, r3, #5
 800459e:	0002      	movs	r2, r0
 80045a0:	0029      	movs	r1, r5
 80045a2:	9007      	str	r0, [sp, #28]
 80045a4:	9006      	str	r0, [sp, #24]
 80045a6:	9005      	str	r0, [sp, #20]
 80045a8:	9004      	str	r0, [sp, #16]
 80045aa:	9003      	str	r0, [sp, #12]
 80045ac:	9001      	str	r0, [sp, #4]
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	9408      	str	r4, [sp, #32]
 80045b2:	0003      	movs	r3, r0
 80045b4:	f7ff feb0 	bl	8004318 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 80045b8:	2031      	movs	r0, #49	; 0x31
 80045ba:	f7ff f905 	bl	80037c8 <SX1276Read>
 80045be:	2540      	movs	r5, #64	; 0x40
 80045c0:	43a8      	bics	r0, r5
 80045c2:	b2c1      	uxtb	r1, r0
 80045c4:	2031      	movs	r0, #49	; 0x31
 80045c6:	f7ff f8ac 	bl	8003722 <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 80045ca:	0028      	movs	r0, r5
 80045cc:	21f0      	movs	r1, #240	; 0xf0
 80045ce:	f7ff f8a8 	bl	8003722 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 80045d2:	21a0      	movs	r1, #160	; 0xa0
 80045d4:	2041      	movs	r0, #65	; 0x41
 80045d6:	f7ff f8a4 	bl	8003722 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80045da:	4d08      	ldr	r5, [pc, #32]	; (80045fc <SX1276SetTxContinuousWave+0x78>)
 80045dc:	0021      	movs	r1, r4
 80045de:	0028      	movs	r0, r5
 80045e0:	f00a f924 	bl	800e82c <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 80045e4:	2202      	movs	r2, #2
 80045e6:	4b06      	ldr	r3, [pc, #24]	; (8004600 <SX1276SetTxContinuousWave+0x7c>)
    TimerStart( &TxTimeoutTimer );
 80045e8:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 80045ea:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 80045ec:	f00a f87a 	bl	800e6e4 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80045f0:	2003      	movs	r0, #3
 80045f2:	f7ff fa8d 	bl	8003b10 <SX1276SetOpMode>
}
 80045f6:	b00b      	add	sp, #44	; 0x2c
 80045f8:	bd30      	pop	{r4, r5, pc}
 80045fa:	46c0      	nop			; (mov r8, r8)
 80045fc:	20001554 	.word	0x20001554
 8004600:	20001584 	.word	0x20001584

08004604 <SX1276OnDio2Irq>:
{
 8004604:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8004606:	4c2b      	ldr	r4, [pc, #172]	; (80046b4 <SX1276OnDio2Irq+0xb0>)
 8004608:	7921      	ldrb	r1, [r4, #4]
 800460a:	2901      	cmp	r1, #1
 800460c:	d002      	beq.n	8004614 <SX1276OnDio2Irq+0x10>
 800460e:	2902      	cmp	r1, #2
 8004610:	d048      	beq.n	80046a4 <SX1276OnDio2Irq+0xa0>
}
 8004612:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8004614:	7963      	ldrb	r3, [r4, #5]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d017      	beq.n	800464a <SX1276OnDio2Irq+0x46>
 800461a:	2b01      	cmp	r3, #1
 800461c:	d1f9      	bne.n	8004612 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800461e:	3453      	adds	r4, #83	; 0x53
 8004620:	7823      	ldrb	r3, [r4, #0]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8004622:	2102      	movs	r1, #2
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0f4      	beq.n	8004612 <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8004628:	2012      	movs	r0, #18
 800462a:	f7ff f87a 	bl	8003722 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800462e:	4b22      	ldr	r3, [pc, #136]	; (80046b8 <SX1276OnDio2Irq+0xb4>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0ed      	beq.n	8004612 <SX1276OnDio2Irq+0xe>
 8004636:	695c      	ldr	r4, [r3, #20]
 8004638:	2c00      	cmp	r4, #0
 800463a:	d0ea      	beq.n	8004612 <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800463c:	201c      	movs	r0, #28
 800463e:	f7ff f8c3 	bl	80037c8 <SX1276Read>
 8004642:	233f      	movs	r3, #63	; 0x3f
 8004644:	4018      	ands	r0, r3
 8004646:	47a0      	blx	r4
}
 8004648:	e7e3      	b.n	8004612 <SX1276OnDio2Irq+0xe>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800464a:	0023      	movs	r3, r4
 800464c:	3330      	adds	r3, #48	; 0x30
 800464e:	7019      	strb	r1, [r3, #0]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 8004650:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8004652:	2d01      	cmp	r5, #1
 8004654:	d1dd      	bne.n	8004612 <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 8004656:	4819      	ldr	r0, [pc, #100]	; (80046bc <SX1276OnDio2Irq+0xb8>)
 8004658:	f00a f8bc 	bl	800e7d4 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 800465c:	0023      	movs	r3, r4
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800465e:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8004660:	3331      	adds	r3, #49	; 0x31
 8004662:	701d      	strb	r5, [r3, #0]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8004664:	f7ff f8b0 	bl	80037c8 <SX1276Read>
 8004668:	0023      	movs	r3, r4
 800466a:	0840      	lsrs	r0, r0, #1
 800466c:	3332      	adds	r3, #50	; 0x32
 800466e:	4240      	negs	r0, r0
 8004670:	7018      	strb	r0, [r3, #0]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8004672:	201b      	movs	r0, #27
 8004674:	f7ff f8a8 	bl	80037c8 <SX1276Read>
 8004678:	0005      	movs	r5, r0
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 800467a:	201c      	movs	r0, #28
 800467c:	f7ff f8a4 	bl	80037c8 <SX1276Read>
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8004680:	022d      	lsls	r5, r5, #8
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8004682:	4b0f      	ldr	r3, [pc, #60]	; (80046c0 <SX1276OnDio2Irq+0xbc>)
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8004684:	4305      	orrs	r5, r0
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8004686:	b2c0      	uxtb	r0, r0
 8004688:	4358      	muls	r0, r3
 800468a:	0a2d      	lsrs	r5, r5, #8
 800468c:	435d      	muls	r5, r3
 800468e:	3080      	adds	r0, #128	; 0x80
 8004690:	0a00      	lsrs	r0, r0, #8
 8004692:	1940      	adds	r0, r0, r5
 8004694:	6360      	str	r0, [r4, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8004696:	200c      	movs	r0, #12
 8004698:	f7ff f896 	bl	80037c8 <SX1276Read>
 800469c:	3438      	adds	r4, #56	; 0x38
 800469e:	0940      	lsrs	r0, r0, #5
 80046a0:	7020      	strb	r0, [r4, #0]
 80046a2:	e7b6      	b.n	8004612 <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 80046a4:	7963      	ldrb	r3, [r4, #5]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d1b3      	bne.n	8004612 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 80046aa:	3453      	adds	r4, #83	; 0x53
 80046ac:	7823      	ldrb	r3, [r4, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0af      	beq.n	8004612 <SX1276OnDio2Irq+0xe>
 80046b2:	e7b9      	b.n	8004628 <SX1276OnDio2Irq+0x24>
 80046b4:	20001584 	.word	0x20001584
 80046b8:	2000020c 	.word	0x2000020c
 80046bc:	2000156c 	.word	0x2000156c
 80046c0:	00003d09 	.word	0x00003d09

080046c4 <SX1276OnDio3Irq>:
{
 80046c4:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 80046c6:	4b12      	ldr	r3, [pc, #72]	; (8004710 <SX1276OnDio3Irq+0x4c>)
 80046c8:	795c      	ldrb	r4, [r3, #5]
 80046ca:	2c01      	cmp	r4, #1
 80046cc:	d112      	bne.n	80046f4 <SX1276OnDio3Irq+0x30>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 80046ce:	2012      	movs	r0, #18
 80046d0:	f7ff f87a 	bl	80037c8 <SX1276Read>
 80046d4:	0005      	movs	r5, r0
 80046d6:	4e0f      	ldr	r6, [pc, #60]	; (8004714 <SX1276OnDio3Irq+0x50>)
 80046d8:	4025      	ands	r5, r4
 80046da:	4220      	tst	r0, r4
 80046dc:	d00b      	beq.n	80046f6 <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 80046de:	2105      	movs	r1, #5
 80046e0:	2012      	movs	r0, #18
 80046e2:	f7ff f81e 	bl	8003722 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80046e6:	6873      	ldr	r3, [r6, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <SX1276OnDio3Irq+0x30>
 80046ec:	699b      	ldr	r3, [r3, #24]
                RadioEvents->CadDone( true );
 80046ee:	0020      	movs	r0, r4
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10b      	bne.n	800470c <SX1276OnDio3Irq+0x48>
}
 80046f4:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 80046f6:	2104      	movs	r1, #4
 80046f8:	2012      	movs	r0, #18
 80046fa:	f7ff f812 	bl	8003722 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80046fe:	6873      	ldr	r3, [r6, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0f7      	beq.n	80046f4 <SX1276OnDio3Irq+0x30>
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0f4      	beq.n	80046f4 <SX1276OnDio3Irq+0x30>
                RadioEvents->CadDone( false );
 800470a:	0028      	movs	r0, r5
 800470c:	4798      	blx	r3
}
 800470e:	e7f1      	b.n	80046f4 <SX1276OnDio3Irq+0x30>
 8004710:	20001584 	.word	0x20001584
 8004714:	2000020c 	.word	0x2000020c

08004718 <SX1276WriteFifo>:
{
 8004718:	b510      	push	{r4, lr}
 800471a:	000a      	movs	r2, r1
    SX1276WriteBuffer( 0, buffer, size );
 800471c:	0001      	movs	r1, r0
 800471e:	2000      	movs	r0, #0
 8004720:	f7fe ffe0 	bl	80036e4 <SX1276WriteBuffer>
}
 8004724:	bd10      	pop	{r4, pc}
	...

08004728 <SX1276Send>:
{
 8004728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800472a:	466b      	mov	r3, sp
    switch( SX1276.Settings.Modem )
 800472c:	4c3a      	ldr	r4, [pc, #232]	; (8004818 <SX1276Send+0xf0>)
{
 800472e:	71d9      	strb	r1, [r3, #7]
    switch( SX1276.Settings.Modem )
 8004730:	7965      	ldrb	r5, [r4, #5]
{
 8004732:	1dde      	adds	r6, r3, #7
 8004734:	0007      	movs	r7, r0
    switch( SX1276.Settings.Modem )
 8004736:	2d00      	cmp	r5, #0
 8004738:	d034      	beq.n	80047a4 <SX1276Send+0x7c>
 800473a:	2000      	movs	r0, #0
 800473c:	2d01      	cmp	r5, #1
 800473e:	d14e      	bne.n	80047de <SX1276Send+0xb6>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8004740:	0023      	movs	r3, r4
 8004742:	3355      	adds	r3, #85	; 0x55
 8004744:	781b      	ldrb	r3, [r3, #0]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8004746:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8004748:	2b00      	cmp	r3, #0
 800474a:	d058      	beq.n	80047fe <SX1276Send+0xd6>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800474c:	f7ff f83c 	bl	80037c8 <SX1276Read>
 8004750:	2341      	movs	r3, #65	; 0x41
 8004752:	4398      	bics	r0, r3
 8004754:	b2c1      	uxtb	r1, r0
 8004756:	2033      	movs	r0, #51	; 0x33
 8004758:	f7fe ffe3 	bl	8003722 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800475c:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800475e:	203b      	movs	r0, #59	; 0x3b
 8004760:	f7fe ffdf 	bl	8003722 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8004764:	0023      	movs	r3, r4
 8004766:	7831      	ldrb	r1, [r6, #0]
 8004768:	3364      	adds	r3, #100	; 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800476a:	2022      	movs	r0, #34	; 0x22
            SX1276.Settings.LoRaPacketHandler.Size = size;
 800476c:	7019      	strb	r1, [r3, #0]
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800476e:	f7fe ffd8 	bl	8003722 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8004772:	2100      	movs	r1, #0
 8004774:	200e      	movs	r0, #14
 8004776:	f7fe ffd4 	bl	8003722 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800477a:	2100      	movs	r1, #0
 800477c:	200d      	movs	r0, #13
 800477e:	f7fe ffd0 	bl	8003722 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8004782:	2001      	movs	r0, #1
 8004784:	f7ff f820 	bl	80037c8 <SX1276Read>
 8004788:	23f8      	movs	r3, #248	; 0xf8
 800478a:	4398      	bics	r0, r3
 800478c:	d104      	bne.n	8004798 <SX1276Send+0x70>
                SX1276SetStby( );
 800478e:	f7ff f9e1 	bl	8003b54 <SX1276SetStby>
                DelayMs( 1 );
 8004792:	2001      	movs	r0, #1
 8004794:	f00a fdf4 	bl	800f380 <HAL_Delay>
            SX1276WriteFifo( buffer, size );
 8004798:	0038      	movs	r0, r7
 800479a:	7831      	ldrb	r1, [r6, #0]
 800479c:	f7ff ffbc 	bl	8004718 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 80047a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
        break;
 80047a2:	e01c      	b.n	80047de <SX1276Send+0xb6>
            SX1276.Settings.FskPacketHandler.Size = size;
 80047a4:	7831      	ldrb	r1, [r6, #0]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80047a6:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 80047a8:	8761      	strh	r1, [r4, #58]	; 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 80047aa:	1ce3      	adds	r3, r4, #3
 80047ac:	7fdb      	ldrb	r3, [r3, #31]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d118      	bne.n	80047e4 <SX1276Send+0xbc>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 80047b2:	2101      	movs	r1, #1
 80047b4:	0030      	movs	r0, r6
 80047b6:	f7ff ffaf 	bl	8004718 <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 80047ba:	7832      	ldrb	r2, [r6, #0]
 80047bc:	1e53      	subs	r3, r2, #1
 80047be:	2b3f      	cmp	r3, #63	; 0x3f
 80047c0:	d814      	bhi.n	80047ec <SX1276Send+0xc4>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 80047c2:	0023      	movs	r3, r4
 80047c4:	333f      	adds	r3, #63	; 0x3f
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 80047c6:	0025      	movs	r5, r4
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 80047c8:	701a      	strb	r2, [r3, #0]
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 80047ca:	353f      	adds	r5, #63	; 0x3f
 80047cc:	0038      	movs	r0, r7
 80047ce:	7829      	ldrb	r1, [r5, #0]
 80047d0:	f7ff ffa2 	bl	8004718 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80047d4:	782b      	ldrb	r3, [r5, #0]
 80047d6:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 80047d8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80047da:	189b      	adds	r3, r3, r2
 80047dc:	87a3      	strh	r3, [r4, #60]	; 0x3c
    SX1276SetTx( txTimeout );
 80047de:	f7ff fadb 	bl	8003d98 <SX1276SetTx>
}
 80047e2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
                SX1276Write( REG_PAYLOADLENGTH, size );
 80047e4:	2032      	movs	r0, #50	; 0x32
 80047e6:	f7fe ff9c 	bl	8003722 <SX1276Write>
 80047ea:	e7e6      	b.n	80047ba <SX1276Send+0x92>
                memcpy1( RxTxBuffer, buffer, size );
 80047ec:	b292      	uxth	r2, r2
 80047ee:	0039      	movs	r1, r7
 80047f0:	480a      	ldr	r0, [pc, #40]	; (800481c <SX1276Send+0xf4>)
 80047f2:	f00a f8e6 	bl	800e9c2 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 80047f6:	0023      	movs	r3, r4
 80047f8:	2220      	movs	r2, #32
 80047fa:	333f      	adds	r3, #63	; 0x3f
 80047fc:	e7e3      	b.n	80047c6 <SX1276Send+0x9e>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80047fe:	f7fe ffe3 	bl	80037c8 <SX1276Read>
 8004802:	2341      	movs	r3, #65	; 0x41
 8004804:	0001      	movs	r1, r0
 8004806:	4399      	bics	r1, r3
 8004808:	4329      	orrs	r1, r5
 800480a:	b2c9      	uxtb	r1, r1
 800480c:	2033      	movs	r0, #51	; 0x33
 800480e:	f7fe ff88 	bl	8003722 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8004812:	211d      	movs	r1, #29
 8004814:	e7a3      	b.n	800475e <SX1276Send+0x36>
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	20001584 	.word	0x20001584
 800481c:	20000214 	.word	0x20000214

08004820 <SX1276ReadFifo>:
{
 8004820:	b510      	push	{r4, lr}
 8004822:	000a      	movs	r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 8004824:	0001      	movs	r1, r0
 8004826:	2000      	movs	r0, #0
 8004828:	f7fe ffae 	bl	8003788 <SX1276ReadBuffer>
}
 800482c:	bd10      	pop	{r4, pc}
	...

08004830 <SX1276OnDio0Irq>:
{
 8004830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    volatile uint8_t irqFlags = 0;
 8004832:	466b      	mov	r3, sp
 8004834:	1ddd      	adds	r5, r3, #7
 8004836:	2300      	movs	r3, #0
    switch( SX1276.Settings.State )
 8004838:	4c8c      	ldr	r4, [pc, #560]	; (8004a6c <SX1276OnDio0Irq+0x23c>)
    volatile uint8_t irqFlags = 0;
 800483a:	702b      	strb	r3, [r5, #0]
    switch( SX1276.Settings.State )
 800483c:	7923      	ldrb	r3, [r4, #4]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d003      	beq.n	800484a <SX1276OnDio0Irq+0x1a>
 8004842:	2b02      	cmp	r3, #2
 8004844:	d100      	bne.n	8004848 <SX1276OnDio0Irq+0x18>
 8004846:	e0fd      	b.n	8004a44 <SX1276OnDio0Irq+0x214>
}
 8004848:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            switch( SX1276.Settings.Modem )
 800484a:	7963      	ldrb	r3, [r4, #5]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d024      	beq.n	800489a <SX1276OnDio0Irq+0x6a>
 8004850:	2b01      	cmp	r3, #1
 8004852:	d1f9      	bne.n	8004848 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8004854:	2140      	movs	r1, #64	; 0x40
 8004856:	2012      	movs	r0, #18
 8004858:	f7fe ff63 	bl	8003722 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800485c:	2012      	movs	r0, #18
 800485e:	f7fe ffb3 	bl	80037c8 <SX1276Read>
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8004862:	2120      	movs	r1, #32
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8004864:	7028      	strb	r0, [r5, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8004866:	782b      	ldrb	r3, [r5, #0]
 8004868:	4e81      	ldr	r6, [pc, #516]	; (8004a70 <SX1276OnDio0Irq+0x240>)
 800486a:	4d82      	ldr	r5, [pc, #520]	; (8004a74 <SX1276OnDio0Irq+0x244>)
 800486c:	420b      	tst	r3, r1
 800486e:	d100      	bne.n	8004872 <SX1276OnDio0Irq+0x42>
 8004870:	e08d      	b.n	800498e <SX1276OnDio0Irq+0x15e>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8004872:	2012      	movs	r0, #18
 8004874:	f7fe ff55 	bl	8003722 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8004878:	0023      	movs	r3, r4
 800487a:	3356      	adds	r3, #86	; 0x56
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d100      	bne.n	8004884 <SX1276OnDio0Irq+0x54>
                            SX1276.Settings.State = RF_IDLE;
 8004882:	7123      	strb	r3, [r4, #4]
                        TimerStop( &RxTimeoutTimer );
 8004884:	0030      	movs	r0, r6
 8004886:	f009 ffa5 	bl	800e7d4 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800488a:	686b      	ldr	r3, [r5, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0db      	beq.n	8004848 <SX1276OnDio0Irq+0x18>
 8004890:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0d8      	beq.n	8004848 <SX1276OnDio0Irq+0x18>
                    RadioEvents->TxDone( );
 8004896:	4798      	blx	r3
}
 8004898:	e7d6      	b.n	8004848 <SX1276OnDio0Irq+0x18>
                if( SX1276.Settings.Fsk.CrcOn == true )
 800489a:	1d63      	adds	r3, r4, #5
 800489c:	7fdb      	ldrb	r3, [r3, #31]
 800489e:	4e76      	ldr	r6, [pc, #472]	; (8004a78 <SX1276OnDio0Irq+0x248>)
 80048a0:	4f74      	ldr	r7, [pc, #464]	; (8004a74 <SX1276OnDio0Irq+0x244>)
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d032      	beq.n	800490c <SX1276OnDio0Irq+0xdc>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 80048a6:	203f      	movs	r0, #63	; 0x3f
 80048a8:	f7fe ff8e 	bl	80037c8 <SX1276Read>
 80048ac:	7028      	strb	r0, [r5, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 80048ae:	782b      	ldrb	r3, [r5, #0]
 80048b0:	079b      	lsls	r3, r3, #30
 80048b2:	d42b      	bmi.n	800490c <SX1276OnDio0Irq+0xdc>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80048b4:	210b      	movs	r1, #11
 80048b6:	203e      	movs	r0, #62	; 0x3e
 80048b8:	f7fe ff33 	bl	8003722 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80048bc:	2110      	movs	r1, #16
 80048be:	203f      	movs	r0, #63	; 0x3f
 80048c0:	f7fe ff2f 	bl	8003722 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 80048c4:	486a      	ldr	r0, [pc, #424]	; (8004a70 <SX1276OnDio0Irq+0x240>)
 80048c6:	f009 ff85 	bl	800e7d4 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 80048ca:	1de3      	adds	r3, r4, #7
 80048cc:	7fdd      	ldrb	r5, [r3, #31]
 80048ce:	2d00      	cmp	r5, #0
 80048d0:	d10f      	bne.n	80048f2 <SX1276OnDio0Irq+0xc2>
                            TimerStop( &RxTimeoutSyncWord );
 80048d2:	0030      	movs	r0, r6
 80048d4:	f009 ff7e 	bl	800e7d4 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 80048d8:	7125      	strb	r5, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <SX1276OnDio0Irq+0xb8>
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d000      	beq.n	80048e8 <SX1276OnDio0Irq+0xb8>
                            RadioEvents->RxError( );
 80048e6:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80048e8:	2300      	movs	r3, #0
 80048ea:	8623      	strh	r3, [r4, #48]	; 0x30
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80048ec:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 80048ee:	8763      	strh	r3, [r4, #58]	; 0x3a
                        break;
 80048f0:	e7aa      	b.n	8004848 <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80048f2:	200d      	movs	r0, #13
 80048f4:	f7fe ff68 	bl	80037c8 <SX1276Read>
 80048f8:	2140      	movs	r1, #64	; 0x40
 80048fa:	4301      	orrs	r1, r0
 80048fc:	b2c9      	uxtb	r1, r1
 80048fe:	200d      	movs	r0, #13
 8004900:	f7fe ff0f 	bl	8003722 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 8004904:	0030      	movs	r0, r6
 8004906:	f009 feed 	bl	800e6e4 <TimerStart>
 800490a:	e7e6      	b.n	80048da <SX1276OnDio0Irq+0xaa>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800490c:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 800490e:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8004910:	000b      	movs	r3, r1
 8004912:	4d5a      	ldr	r5, [pc, #360]	; (8004a7c <SX1276OnDio0Irq+0x24c>)
 8004914:	4303      	orrs	r3, r0
 8004916:	d109      	bne.n	800492c <SX1276OnDio0Irq+0xfc>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8004918:	1ce3      	adds	r3, r4, #3
 800491a:	7fdb      	ldrb	r3, [r3, #31]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d124      	bne.n	800496a <SX1276OnDio0Irq+0x13a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8004920:	2101      	movs	r1, #1
 8004922:	4857      	ldr	r0, [pc, #348]	; (8004a80 <SX1276OnDio0Irq+0x250>)
 8004924:	f7ff ff7c 	bl	8004820 <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004928:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 800492a:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800492c:	1a09      	subs	r1, r1, r0
 800492e:	b2c9      	uxtb	r1, r1
 8004930:	1828      	adds	r0, r5, r0
 8004932:	f7ff ff75 	bl	8004820 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004936:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                TimerStop( &RxTimeoutTimer );
 8004938:	484d      	ldr	r0, [pc, #308]	; (8004a70 <SX1276OnDio0Irq+0x240>)
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800493a:	87a3      	strh	r3, [r4, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 800493c:	f009 ff4a 	bl	800e7d4 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8004940:	1de3      	adds	r3, r4, #7
 8004942:	7fdb      	ldrb	r3, [r3, #31]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d115      	bne.n	8004974 <SX1276OnDio0Irq+0x144>
                    TimerStop( &RxTimeoutSyncWord );
 8004948:	0030      	movs	r0, r6
                    SX1276.Settings.State = RF_IDLE;
 800494a:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 800494c:	f009 ff42 	bl	800e7d4 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0c8      	beq.n	80048e8 <SX1276OnDio0Irq+0xb8>
 8004956:	689e      	ldr	r6, [r3, #8]
 8004958:	2e00      	cmp	r6, #0
 800495a:	d0c5      	beq.n	80048e8 <SX1276OnDio0Irq+0xb8>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 800495c:	2232      	movs	r2, #50	; 0x32
 800495e:	2300      	movs	r3, #0
 8004960:	0028      	movs	r0, r5
 8004962:	56a2      	ldrsb	r2, [r4, r2]
 8004964:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8004966:	47b0      	blx	r6
 8004968:	e7be      	b.n	80048e8 <SX1276OnDio0Irq+0xb8>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800496a:	2032      	movs	r0, #50	; 0x32
 800496c:	f7fe ff2c 	bl	80037c8 <SX1276Read>
 8004970:	8760      	strh	r0, [r4, #58]	; 0x3a
 8004972:	e7d9      	b.n	8004928 <SX1276OnDio0Irq+0xf8>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8004974:	200d      	movs	r0, #13
 8004976:	f7fe ff27 	bl	80037c8 <SX1276Read>
 800497a:	2140      	movs	r1, #64	; 0x40
 800497c:	4301      	orrs	r1, r0
 800497e:	b2c9      	uxtb	r1, r1
 8004980:	200d      	movs	r0, #13
 8004982:	f7fe fece 	bl	8003722 <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 8004986:	0030      	movs	r0, r6
 8004988:	f009 feac 	bl	800e6e4 <TimerStart>
 800498c:	e7e0      	b.n	8004950 <SX1276OnDio0Irq+0x120>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 800498e:	2019      	movs	r0, #25
 8004990:	f7fe ff1a 	bl	80037c8 <SX1276Read>
 8004994:	0027      	movs	r7, r4
 8004996:	b240      	sxtb	r0, r0
 8004998:	3002      	adds	r0, #2
 800499a:	3760      	adds	r7, #96	; 0x60
 800499c:	1080      	asrs	r0, r0, #2
 800499e:	7038      	strb	r0, [r7, #0]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 80049a0:	201a      	movs	r0, #26
 80049a2:	f7fe ff11 	bl	80037c8 <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 80049a6:	2200      	movs	r2, #0
 80049a8:	0021      	movs	r1, r4
 80049aa:	b203      	sxth	r3, r0
 80049ac:	111b      	asrs	r3, r3, #4
 80049ae:	56ba      	ldrsb	r2, [r7, r2]
 80049b0:	b29f      	uxth	r7, r3
 80049b2:	4b34      	ldr	r3, [pc, #208]	; (8004a84 <SX1276OnDio0Irq+0x254>)
 80049b4:	b280      	uxth	r0, r0
 80049b6:	469c      	mov	ip, r3
 80049b8:	3162      	adds	r1, #98	; 0x62
 80049ba:	2a00      	cmp	r2, #0
 80049bc:	da39      	bge.n	8004a32 <SX1276OnDio0Irq+0x202>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80049be:	b293      	uxth	r3, r2
 80049c0:	68a2      	ldr	r2, [r4, #8]
 80049c2:	4562      	cmp	r2, ip
 80049c4:	d933      	bls.n	8004a2e <SX1276OnDio0Irq+0x1fe>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80049c6:	3b9d      	subs	r3, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 80049c8:	18c3      	adds	r3, r0, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 80049ca:	18fb      	adds	r3, r7, r3
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 80049cc:	2013      	movs	r0, #19
 80049ce:	0027      	movs	r7, r4
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 80049d0:	800b      	strh	r3, [r1, #0]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 80049d2:	f7fe fef9 	bl	80037c8 <SX1276Read>
 80049d6:	3764      	adds	r7, #100	; 0x64
 80049d8:	7038      	strb	r0, [r7, #0]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 80049da:	2010      	movs	r0, #16
 80049dc:	f7fe fef4 	bl	80037c8 <SX1276Read>
 80049e0:	0001      	movs	r1, r0
 80049e2:	200d      	movs	r0, #13
 80049e4:	f7fe fe9d 	bl	8003722 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 80049e8:	7839      	ldrb	r1, [r7, #0]
 80049ea:	4f24      	ldr	r7, [pc, #144]	; (8004a7c <SX1276OnDio0Irq+0x24c>)
 80049ec:	0038      	movs	r0, r7
 80049ee:	f7ff ff17 	bl	8004820 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 80049f2:	0023      	movs	r3, r4
 80049f4:	3356      	adds	r3, #86	; 0x56
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d100      	bne.n	80049fe <SX1276OnDio0Irq+0x1ce>
                        SX1276.Settings.State = RF_IDLE;
 80049fc:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 80049fe:	0030      	movs	r0, r6
 8004a00:	f009 fee8 	bl	800e7d4 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8004a04:	686b      	ldr	r3, [r5, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d100      	bne.n	8004a0c <SX1276OnDio0Irq+0x1dc>
 8004a0a:	e71d      	b.n	8004848 <SX1276OnDio0Irq+0x18>
 8004a0c:	689d      	ldr	r5, [r3, #8]
 8004a0e:	2d00      	cmp	r5, #0
 8004a10:	d100      	bne.n	8004a14 <SX1276OnDio0Irq+0x1e4>
 8004a12:	e719      	b.n	8004848 <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8004a14:	0023      	movs	r3, r4
 8004a16:	0022      	movs	r2, r4
 8004a18:	3360      	adds	r3, #96	; 0x60
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	3464      	adds	r4, #100	; 0x64
 8004a1e:	3262      	adds	r2, #98	; 0x62
 8004a20:	2100      	movs	r1, #0
 8004a22:	5e52      	ldrsh	r2, [r2, r1]
 8004a24:	0038      	movs	r0, r7
 8004a26:	7821      	ldrb	r1, [r4, #0]
 8004a28:	b25b      	sxtb	r3, r3
 8004a2a:	47a8      	blx	r5
 8004a2c:	e70c      	b.n	8004848 <SX1276OnDio0Irq+0x18>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8004a2e:	3ba4      	subs	r3, #164	; 0xa4
 8004a30:	e7ca      	b.n	80049c8 <SX1276OnDio0Irq+0x198>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004a32:	68a3      	ldr	r3, [r4, #8]
 8004a34:	4563      	cmp	r3, ip
 8004a36:	d902      	bls.n	8004a3e <SX1276OnDio0Irq+0x20e>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8004a38:	0003      	movs	r3, r0
 8004a3a:	3b9d      	subs	r3, #157	; 0x9d
 8004a3c:	e7c5      	b.n	80049ca <SX1276OnDio0Irq+0x19a>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8004a3e:	0003      	movs	r3, r0
 8004a40:	3ba4      	subs	r3, #164	; 0xa4
 8004a42:	e7c2      	b.n	80049ca <SX1276OnDio0Irq+0x19a>
            TimerStop( &TxTimeoutTimer );
 8004a44:	4810      	ldr	r0, [pc, #64]	; (8004a88 <SX1276OnDio0Irq+0x258>)
 8004a46:	f009 fec5 	bl	800e7d4 <TimerStop>
            switch( SX1276.Settings.Modem )
 8004a4a:	7963      	ldrb	r3, [r4, #5]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d103      	bne.n	8004a58 <SX1276OnDio0Irq+0x228>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8004a50:	2108      	movs	r1, #8
 8004a52:	2012      	movs	r0, #18
 8004a54:	f7fe fe65 	bl	8003722 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8004a5c:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <SX1276OnDio0Irq+0x244>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d100      	bne.n	8004a66 <SX1276OnDio0Irq+0x236>
 8004a64:	e6f0      	b.n	8004848 <SX1276OnDio0Irq+0x18>
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	e713      	b.n	8004892 <SX1276OnDio0Irq+0x62>
 8004a6a:	46c0      	nop			; (mov r8, r8)
 8004a6c:	20001584 	.word	0x20001584
 8004a70:	200015ec 	.word	0x200015ec
 8004a74:	2000020c 	.word	0x2000020c
 8004a78:	2000156c 	.word	0x2000156c
 8004a7c:	20000214 	.word	0x20000214
 8004a80:	200015be 	.word	0x200015be
 8004a84:	1f4add40 	.word	0x1f4add40
 8004a88:	20001554 	.word	0x20001554

08004a8c <SX1276OnDio1Irq>:
{
 8004a8c:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8004a8e:	4c30      	ldr	r4, [pc, #192]	; (8004b50 <SX1276OnDio1Irq+0xc4>)
 8004a90:	7925      	ldrb	r5, [r4, #4]
 8004a92:	2d01      	cmp	r5, #1
 8004a94:	d002      	beq.n	8004a9c <SX1276OnDio1Irq+0x10>
 8004a96:	2d02      	cmp	r5, #2
 8004a98:	d044      	beq.n	8004b24 <SX1276OnDio1Irq+0x98>
}
 8004a9a:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8004a9c:	7963      	ldrb	r3, [r4, #5]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d013      	beq.n	8004aca <SX1276OnDio1Irq+0x3e>
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d1f9      	bne.n	8004a9a <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutTimer );
 8004aa6:	482b      	ldr	r0, [pc, #172]	; (8004b54 <SX1276OnDio1Irq+0xc8>)
 8004aa8:	f009 fe94 	bl	800e7d4 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8004aac:	2180      	movs	r1, #128	; 0x80
 8004aae:	2012      	movs	r0, #18
 8004ab0:	f7fe fe37 	bl	8003722 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8004ab8:	4b27      	ldr	r3, [pc, #156]	; (8004b58 <SX1276OnDio1Irq+0xcc>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0ec      	beq.n	8004a9a <SX1276OnDio1Irq+0xe>
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0e9      	beq.n	8004a9a <SX1276OnDio1Irq+0xe>
                    RadioEvents->RxTimeout( );
 8004ac6:	4798      	blx	r3
 8004ac8:	e7e7      	b.n	8004a9a <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 8004aca:	4824      	ldr	r0, [pc, #144]	; (8004b5c <SX1276OnDio1Irq+0xd0>)
 8004acc:	f009 fe82 	bl	800e7d4 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8004ad0:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8004ad2:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	d107      	bne.n	8004ae8 <SX1276OnDio1Irq+0x5c>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8004ad8:	1ce3      	adds	r3, r4, #3
 8004ada:	7fdb      	ldrb	r3, [r3, #31]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d117      	bne.n	8004b10 <SX1276OnDio1Irq+0x84>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8004ae0:	0029      	movs	r1, r5
 8004ae2:	481f      	ldr	r0, [pc, #124]	; (8004b60 <SX1276OnDio1Irq+0xd4>)
 8004ae4:	f7ff fe9c 	bl	8004820 <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8004ae8:	0025      	movs	r5, r4
 8004aea:	353e      	adds	r5, #62	; 0x3e
 8004aec:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8004aee:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8004af0:	481c      	ldr	r0, [pc, #112]	; (8004b64 <SX1276OnDio1Irq+0xd8>)
 8004af2:	782b      	ldrb	r3, [r5, #0]
 8004af4:	1810      	adds	r0, r2, r0
 8004af6:	1a89      	subs	r1, r1, r2
 8004af8:	4299      	cmp	r1, r3
 8004afa:	db0e      	blt.n	8004b1a <SX1276OnDio1Irq+0x8e>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8004afc:	3b01      	subs	r3, #1
 8004afe:	b2d9      	uxtb	r1, r3
 8004b00:	f7ff fe8e 	bl	8004820 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8004b04:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8004b06:	782b      	ldrb	r3, [r5, #0]
 8004b08:	3a01      	subs	r2, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8004b0a:	189b      	adds	r3, r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8004b0c:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 8004b0e:	e7c4      	b.n	8004a9a <SX1276OnDio1Irq+0xe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8004b10:	2032      	movs	r0, #50	; 0x32
 8004b12:	f7fe fe59 	bl	80037c8 <SX1276Read>
 8004b16:	8760      	strh	r0, [r4, #58]	; 0x3a
 8004b18:	e7e6      	b.n	8004ae8 <SX1276OnDio1Irq+0x5c>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004b1a:	b2c9      	uxtb	r1, r1
 8004b1c:	f7ff fe80 	bl	8004820 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8004b20:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8004b22:	e7f3      	b.n	8004b0c <SX1276OnDio1Irq+0x80>
            switch( SX1276.Settings.Modem )
 8004b24:	7963      	ldrb	r3, [r4, #5]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1b7      	bne.n	8004a9a <SX1276OnDio1Irq+0xe>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8004b2a:	0025      	movs	r5, r4
 8004b2c:	353f      	adds	r5, #63	; 0x3f
 8004b2e:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8004b30:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8004b32:	480c      	ldr	r0, [pc, #48]	; (8004b64 <SX1276OnDio1Irq+0xd8>)
 8004b34:	7829      	ldrb	r1, [r5, #0]
 8004b36:	1810      	adds	r0, r2, r0
 8004b38:	1a9b      	subs	r3, r3, r2
 8004b3a:	428b      	cmp	r3, r1
 8004b3c:	dd04      	ble.n	8004b48 <SX1276OnDio1Irq+0xbc>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8004b3e:	f7ff fdeb 	bl	8004718 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8004b42:	782b      	ldrb	r3, [r5, #0]
 8004b44:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8004b46:	e7e0      	b.n	8004b0a <SX1276OnDio1Irq+0x7e>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004b48:	b2d9      	uxtb	r1, r3
 8004b4a:	f7ff fde5 	bl	8004718 <SX1276WriteFifo>
 8004b4e:	e7e7      	b.n	8004b20 <SX1276OnDio1Irq+0x94>
 8004b50:	20001584 	.word	0x20001584
 8004b54:	200015ec 	.word	0x200015ec
 8004b58:	2000020c 	.word	0x2000020c
 8004b5c:	2000156c 	.word	0x2000156c
 8004b60:	200015be 	.word	0x200015be
 8004b64:	20000214 	.word	0x20000214

08004b68 <SX1276SetMaxPayloadLength>:
{
 8004b68:	b570      	push	{r4, r5, r6, lr}
 8004b6a:	0004      	movs	r4, r0
 8004b6c:	000d      	movs	r5, r1
    SX1276SetModem( modem );
 8004b6e:	f7ff f983 	bl	8003e78 <SX1276SetModem>
    switch( modem )
 8004b72:	2c00      	cmp	r4, #0
 8004b74:	d002      	beq.n	8004b7c <SX1276SetMaxPayloadLength+0x14>
 8004b76:	2c01      	cmp	r4, #1
 8004b78:	d00a      	beq.n	8004b90 <SX1276SetMaxPayloadLength+0x28>
}
 8004b7a:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 8004b7c:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <SX1276SetMaxPayloadLength+0x30>)
 8004b7e:	3303      	adds	r3, #3
 8004b80:	7fdb      	ldrb	r3, [r3, #31]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f9      	bne.n	8004b7a <SX1276SetMaxPayloadLength+0x12>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8004b86:	0029      	movs	r1, r5
 8004b88:	2032      	movs	r0, #50	; 0x32
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8004b8a:	f7fe fdca 	bl	8003722 <SX1276Write>
}
 8004b8e:	e7f4      	b.n	8004b7a <SX1276SetMaxPayloadLength+0x12>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8004b90:	0029      	movs	r1, r5
 8004b92:	2023      	movs	r0, #35	; 0x23
 8004b94:	e7f9      	b.n	8004b8a <SX1276SetMaxPayloadLength+0x22>
 8004b96:	46c0      	nop			; (mov r8, r8)
 8004b98:	20001584 	.word	0x20001584

08004b9c <SX1276SetPublicNetwork>:
{
 8004b9c:	b510      	push	{r4, lr}
 8004b9e:	0004      	movs	r4, r0
    SX1276SetModem( MODEM_LORA );
 8004ba0:	2001      	movs	r0, #1
 8004ba2:	f7ff f969 	bl	8003e78 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8004ba6:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <SX1276SetPublicNetwork+0x20>)
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8004ba8:	2134      	movs	r1, #52	; 0x34
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8004baa:	335c      	adds	r3, #92	; 0x5c
 8004bac:	701c      	strb	r4, [r3, #0]
    if( enable == true )
 8004bae:	2c00      	cmp	r4, #0
 8004bb0:	d100      	bne.n	8004bb4 <SX1276SetPublicNetwork+0x18>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8004bb2:	2112      	movs	r1, #18
 8004bb4:	2039      	movs	r0, #57	; 0x39
 8004bb6:	f7fe fdb4 	bl	8003722 <SX1276Write>
}
 8004bba:	bd10      	pop	{r4, pc}
 8004bbc:	20001584 	.word	0x20001584

08004bc0 <SX1276OnTimeoutIrq>:
{
 8004bc0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8004bc2:	4c2c      	ldr	r4, [pc, #176]	; (8004c74 <SX1276OnTimeoutIrq+0xb4>)
 8004bc4:	7923      	ldrb	r3, [r4, #4]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d002      	beq.n	8004bd0 <SX1276OnTimeoutIrq+0x10>
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d02d      	beq.n	8004c2a <SX1276OnTimeoutIrq+0x6a>
}
 8004bce:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 8004bd0:	7963      	ldrb	r3, [r4, #5]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d11b      	bne.n	8004c0e <SX1276OnTimeoutIrq+0x4e>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8004bd6:	8623      	strh	r3, [r4, #48]	; 0x30
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8004bd8:	210b      	movs	r1, #11
 8004bda:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8004bdc:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8004bde:	8763      	strh	r3, [r4, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8004be0:	f7fe fd9f 	bl	8003722 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8004be4:	2110      	movs	r1, #16
 8004be6:	203f      	movs	r0, #63	; 0x3f
 8004be8:	f7fe fd9b 	bl	8003722 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8004bec:	1de3      	adds	r3, r4, #7
 8004bee:	7fdb      	ldrb	r3, [r3, #31]
 8004bf0:	4d21      	ldr	r5, [pc, #132]	; (8004c78 <SX1276OnTimeoutIrq+0xb8>)
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d014      	beq.n	8004c20 <SX1276OnTimeoutIrq+0x60>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8004bf6:	200d      	movs	r0, #13
 8004bf8:	f7fe fde6 	bl	80037c8 <SX1276Read>
 8004bfc:	2140      	movs	r1, #64	; 0x40
 8004bfe:	4301      	orrs	r1, r0
 8004c00:	b2c9      	uxtb	r1, r1
 8004c02:	200d      	movs	r0, #13
 8004c04:	f7fe fd8d 	bl	8003722 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 8004c08:	0028      	movs	r0, r5
 8004c0a:	f009 fd6b 	bl	800e6e4 <TimerStart>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8004c0e:	4b1b      	ldr	r3, [pc, #108]	; (8004c7c <SX1276OnTimeoutIrq+0xbc>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0db      	beq.n	8004bce <SX1276OnTimeoutIrq+0xe>
 8004c16:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0d8      	beq.n	8004bce <SX1276OnTimeoutIrq+0xe>
            RadioEvents->TxTimeout( );
 8004c1c:	4798      	blx	r3
}
 8004c1e:	e7d6      	b.n	8004bce <SX1276OnTimeoutIrq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 8004c20:	0028      	movs	r0, r5
                SX1276.Settings.State = RF_IDLE;
 8004c22:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 8004c24:	f009 fdd6 	bl	800e7d4 <TimerStop>
 8004c28:	e7f1      	b.n	8004c0e <SX1276OnTimeoutIrq+0x4e>
        SX1276Reset( );
 8004c2a:	f7fe fd33 	bl	8003694 <SX1276Reset>
        RxChainCalibration( );
 8004c2e:	f7fe fdd5 	bl	80037dc <RxChainCalibration>
    if( opMode == RF_OPMODE_SLEEP )
 8004c32:	f7fe ff37 	bl	8003aa4 <SX1276SetOpMode.part.0>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8004c36:	4e12      	ldr	r6, [pc, #72]	; (8004c80 <SX1276OnTimeoutIrq+0xc0>)
 8004c38:	0035      	movs	r5, r6
 8004c3a:	3648      	adds	r6, #72	; 0x48
 8004c3c:	3518      	adds	r5, #24
            SX1276SetModem( RadioRegsInit[i].Modem );
 8004c3e:	7828      	ldrb	r0, [r5, #0]
 8004c40:	f7ff f91a 	bl	8003e78 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8004c44:	78a9      	ldrb	r1, [r5, #2]
 8004c46:	7868      	ldrb	r0, [r5, #1]
 8004c48:	3503      	adds	r5, #3
 8004c4a:	f7fe fd6a 	bl	8003722 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8004c4e:	42b5      	cmp	r5, r6
 8004c50:	d1f5      	bne.n	8004c3e <SX1276OnTimeoutIrq+0x7e>
        SX1276SetModem( MODEM_FSK );
 8004c52:	2000      	movs	r0, #0
 8004c54:	f7ff f910 	bl	8003e78 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 8004c58:	0023      	movs	r3, r4
 8004c5a:	335c      	adds	r3, #92	; 0x5c
 8004c5c:	7818      	ldrb	r0, [r3, #0]
 8004c5e:	f7ff ff9d 	bl	8004b9c <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8004c62:	2300      	movs	r3, #0
 8004c64:	7123      	strb	r3, [r4, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8004c66:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <SX1276OnTimeoutIrq+0xbc>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0af      	beq.n	8004bce <SX1276OnTimeoutIrq+0xe>
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	e7d2      	b.n	8004c18 <SX1276OnTimeoutIrq+0x58>
 8004c72:	46c0      	nop			; (mov r8, r8)
 8004c74:	20001584 	.word	0x20001584
 8004c78:	2000156c 	.word	0x2000156c
 8004c7c:	2000020c 	.word	0x2000020c
 8004c80:	080107c0 	.word	0x080107c0

08004c84 <SX1276GetWakeupTime>:
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8004c84:	4b03      	ldr	r3, [pc, #12]	; (8004c94 <SX1276GetWakeupTime+0x10>)
{
 8004c86:	b510      	push	{r4, lr}
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	4798      	blx	r3
 8004c8e:	3002      	adds	r0, #2
}
 8004c90:	bd10      	pop	{r4, pc}
 8004c92:	46c0      	nop			; (mov r8, r8)
 8004c94:	2000020c 	.word	0x2000020c

08004c98 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8004c98:	2280      	movs	r2, #128	; 0x80
 8004c9a:	4b10      	ldr	r3, [pc, #64]	; (8004cdc <SystemInit+0x44>)
 8004c9c:	0052      	lsls	r2, r2, #1
 8004c9e:	6819      	ldr	r1, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8004ca4:	68da      	ldr	r2, [r3, #12]
 8004ca6:	490e      	ldr	r1, [pc, #56]	; (8004ce0 <SystemInit+0x48>)
 8004ca8:	400a      	ands	r2, r1
 8004caa:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	490d      	ldr	r1, [pc, #52]	; (8004ce4 <SystemInit+0x4c>)
 8004cb0:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004cb2:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004cb4:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	438a      	bics	r2, r1
 8004cba:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	490a      	ldr	r1, [pc, #40]	; (8004ce8 <SystemInit+0x50>)
 8004cc0:	400a      	ands	r2, r1
 8004cc2:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8004cc4:	68da      	ldr	r2, [r3, #12]
 8004cc6:	4909      	ldr	r1, [pc, #36]	; (8004cec <SystemInit+0x54>)
 8004cc8:	400a      	ands	r2, r1
 8004cca:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004ccc:	2200      	movs	r2, #0
 8004cce:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004cd0:	2280      	movs	r2, #128	; 0x80
 8004cd2:	4b07      	ldr	r3, [pc, #28]	; (8004cf0 <SystemInit+0x58>)
 8004cd4:	0512      	lsls	r2, r2, #20
 8004cd6:	609a      	str	r2, [r3, #8]
#endif
}
 8004cd8:	4770      	bx	lr
 8004cda:	46c0      	nop			; (mov r8, r8)
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	88ff400c 	.word	0x88ff400c
 8004ce4:	fef6fff6 	.word	0xfef6fff6
 8004ce8:	fffbffff 	.word	0xfffbffff
 8004cec:	ff02ffff 	.word	0xff02ffff
 8004cf0:	e000ed00 	.word	0xe000ed00

08004cf4 <HAL_Init>:
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	4a08      	ldr	r2, [pc, #32]	; (8004d18 <HAL_Init+0x24>)
{
 8004cf8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004cfa:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004cfc:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004cfe:	430b      	orrs	r3, r1
 8004d00:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004d02:	f00a fb3b 	bl	800f37c <HAL_InitTick>
 8004d06:	1e04      	subs	r4, r0, #0
 8004d08:	d103      	bne.n	8004d12 <HAL_Init+0x1e>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004d0a:	f00a fb3f 	bl	800f38c <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 8004d0e:	0020      	movs	r0, r4
 8004d10:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8004d12:	2401      	movs	r4, #1
 8004d14:	e7fb      	b.n	8004d0e <HAL_Init+0x1a>
 8004d16:	46c0      	nop			; (mov r8, r8)
 8004d18:	40022000 	.word	0x40022000

08004d1c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8004d1c:	4a02      	ldr	r2, [pc, #8]	; (8004d28 <HAL_IncTick+0xc>)
 8004d1e:	6813      	ldr	r3, [r2, #0]
 8004d20:	3301      	adds	r3, #1
 8004d22:	6013      	str	r3, [r2, #0]
}
 8004d24:	4770      	bx	lr
 8004d26:	46c0      	nop			; (mov r8, r8)
 8004d28:	20001604 	.word	0x20001604

08004d2c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004d2c:	4b01      	ldr	r3, [pc, #4]	; (8004d34 <HAL_GetTick+0x8>)
 8004d2e:	6818      	ldr	r0, [r3, #0]
}
 8004d30:	4770      	bx	lr
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	20001604 	.word	0x20001604

08004d38 <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004d38:	2101      	movs	r1, #1
 8004d3a:	4a02      	ldr	r2, [pc, #8]	; (8004d44 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8004d3c:	6853      	ldr	r3, [r2, #4]
 8004d3e:	438b      	bics	r3, r1
 8004d40:	6053      	str	r3, [r2, #4]
}
 8004d42:	4770      	bx	lr
 8004d44:	40015800 	.word	0x40015800

08004d48 <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8004d48:	2102      	movs	r1, #2
 8004d4a:	4a02      	ldr	r2, [pc, #8]	; (8004d54 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8004d4c:	6853      	ldr	r3, [r2, #4]
 8004d4e:	438b      	bics	r3, r1
 8004d50:	6053      	str	r3, [r2, #4]
}
 8004d52:	4770      	bx	lr
 8004d54:	40015800 	.word	0x40015800

08004d58 <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8004d58:	2104      	movs	r1, #4
 8004d5a:	4a02      	ldr	r2, [pc, #8]	; (8004d64 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8004d5c:	6853      	ldr	r3, [r2, #4]
 8004d5e:	438b      	bics	r3, r1
 8004d60:	6053      	str	r3, [r2, #4]
}
 8004d62:	4770      	bx	lr
 8004d64:	40015800 	.word	0x40015800

08004d68 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004d68:	4b08      	ldr	r3, [pc, #32]	; (8004d8c <ADC_DelayMicroSecond+0x24>)
{
 8004d6a:	b513      	push	{r0, r1, r4, lr}
 8004d6c:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004d6e:	4908      	ldr	r1, [pc, #32]	; (8004d90 <ADC_DelayMicroSecond+0x28>)
 8004d70:	6818      	ldr	r0, [r3, #0]
 8004d72:	f7fb f9e7 	bl	8000144 <__udivsi3>
 8004d76:	4344      	muls	r4, r0
 8004d78:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 8004d7a:	9b01      	ldr	r3, [sp, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d100      	bne.n	8004d82 <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 8004d80:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 8004d82:	9b01      	ldr	r3, [sp, #4]
 8004d84:	3b01      	subs	r3, #1
 8004d86:	9301      	str	r3, [sp, #4]
 8004d88:	e7f7      	b.n	8004d7a <ADC_DelayMicroSecond+0x12>
 8004d8a:	46c0      	nop			; (mov r8, r8)
 8004d8c:	20000044 	.word	0x20000044
 8004d90:	000f4240 	.word	0x000f4240

08004d94 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004d94:	2103      	movs	r1, #3
 8004d96:	6803      	ldr	r3, [r0, #0]
{
 8004d98:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004d9a:	689a      	ldr	r2, [r3, #8]
{
 8004d9c:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004d9e:	400a      	ands	r2, r1
 8004da0:	2a01      	cmp	r2, #1
 8004da2:	d104      	bne.n	8004dae <ADC_Enable+0x1a>
 8004da4:	6819      	ldr	r1, [r3, #0]
 8004da6:	4211      	tst	r1, r2
 8004da8:	d001      	beq.n	8004dae <ADC_Enable+0x1a>
  return HAL_OK;
 8004daa:	2000      	movs	r0, #0
}
 8004dac:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004dae:	6899      	ldr	r1, [r3, #8]
 8004db0:	4a13      	ldr	r2, [pc, #76]	; (8004e00 <ADC_Enable+0x6c>)
 8004db2:	4211      	tst	r1, r2
 8004db4:	d008      	beq.n	8004dc8 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004db6:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004db8:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dba:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004dc2:	4303      	orrs	r3, r0
 8004dc4:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8004dc6:	e7f1      	b.n	8004dac <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 8004dc8:	2501      	movs	r5, #1
 8004dca:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8004dcc:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 8004dce:	432a      	orrs	r2, r5
 8004dd0:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8004dd2:	f7ff ffc9 	bl	8004d68 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 8004dd6:	f7ff ffa9 	bl	8004d2c <HAL_GetTick>
 8004dda:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004ddc:	6823      	ldr	r3, [r4, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	422b      	tst	r3, r5
 8004de2:	d1e2      	bne.n	8004daa <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004de4:	f7ff ffa2 	bl	8004d2c <HAL_GetTick>
 8004de8:	1b80      	subs	r0, r0, r6
 8004dea:	280a      	cmp	r0, #10
 8004dec:	d9f6      	bls.n	8004ddc <ADC_Enable+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dee:	2310      	movs	r3, #16
 8004df0:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 8004df2:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004df4:	4313      	orrs	r3, r2
 8004df6:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004df8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004dfa:	431d      	orrs	r5, r3
 8004dfc:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 8004dfe:	e7d5      	b.n	8004dac <ADC_Enable+0x18>
 8004e00:	80000017 	.word	0x80000017

08004e04 <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004e04:	2103      	movs	r1, #3
 8004e06:	6803      	ldr	r3, [r0, #0]
{
 8004e08:	b570      	push	{r4, r5, r6, lr}
 8004e0a:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004e0c:	6898      	ldr	r0, [r3, #8]
 8004e0e:	4008      	ands	r0, r1
 8004e10:	2801      	cmp	r0, #1
 8004e12:	d001      	beq.n	8004e18 <ADC_Disable+0x14>
  return HAL_OK;
 8004e14:	2000      	movs	r0, #0
}
 8004e16:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	4202      	tst	r2, r0
 8004e1c:	d0fa      	beq.n	8004e14 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004e1e:	2205      	movs	r2, #5
 8004e20:	689d      	ldr	r5, [r3, #8]
 8004e22:	4015      	ands	r5, r2
 8004e24:	2d01      	cmp	r5, #1
 8004e26:	d119      	bne.n	8004e5c <ADC_Disable+0x58>
      __HAL_ADC_DISABLE(hadc);
 8004e28:	6898      	ldr	r0, [r3, #8]
 8004e2a:	3a03      	subs	r2, #3
 8004e2c:	4302      	orrs	r2, r0
 8004e2e:	609a      	str	r2, [r3, #8]
 8004e30:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8004e32:	f7ff ff7b 	bl	8004d2c <HAL_GetTick>
 8004e36:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004e38:	6823      	ldr	r3, [r4, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	422b      	tst	r3, r5
 8004e3e:	d0e9      	beq.n	8004e14 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004e40:	f7ff ff74 	bl	8004d2c <HAL_GetTick>
 8004e44:	1b80      	subs	r0, r0, r6
 8004e46:	280a      	cmp	r0, #10
 8004e48:	d9f6      	bls.n	8004e38 <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e4a:	2310      	movs	r3, #16
 8004e4c:	6d62      	ldr	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e4e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e50:	4313      	orrs	r3, r2
 8004e52:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e56:	431d      	orrs	r5, r3
 8004e58:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 8004e5a:	e7dc      	b.n	8004e16 <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e5c:	2310      	movs	r3, #16
 8004e5e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004e60:	4313      	orrs	r3, r2
 8004e62:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e66:	4303      	orrs	r3, r0
 8004e68:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8004e6a:	e7d4      	b.n	8004e16 <ADC_Disable+0x12>

08004e6c <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8004e6c:	2204      	movs	r2, #4
 8004e6e:	6803      	ldr	r3, [r0, #0]
{
 8004e70:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8004e72:	6899      	ldr	r1, [r3, #8]
{
 8004e74:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8004e76:	4211      	tst	r1, r2
 8004e78:	d101      	bne.n	8004e7e <ADC_ConversionStop+0x12>
  return HAL_OK;
 8004e7a:	2000      	movs	r0, #0
}
 8004e7c:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004e7e:	6899      	ldr	r1, [r3, #8]
 8004e80:	4211      	tst	r1, r2
 8004e82:	d006      	beq.n	8004e92 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8004e84:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004e86:	0792      	lsls	r2, r2, #30
 8004e88:	d403      	bmi.n	8004e92 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8004e8a:	2210      	movs	r2, #16
 8004e8c:	6899      	ldr	r1, [r3, #8]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004e92:	f7ff ff4b 	bl	8004d2c <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004e96:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 8004e98:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	4233      	tst	r3, r6
 8004ea0:	d0eb      	beq.n	8004e7a <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004ea2:	f7ff ff43 	bl	8004d2c <HAL_GetTick>
 8004ea6:	1b40      	subs	r0, r0, r5
 8004ea8:	280a      	cmp	r0, #10
 8004eaa:	d9f6      	bls.n	8004e9a <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eac:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eae:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eb0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004eb8:	4303      	orrs	r3, r0
 8004eba:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8004ebc:	e7de      	b.n	8004e7c <ADC_ConversionStop+0x10>

08004ebe <HAL_ADC_MspInit>:
}
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_ADC_Init>:
{
 8004ec0:	b570      	push	{r4, r5, r6, lr}
 8004ec2:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004ec4:	2001      	movs	r0, #1
  if(hadc == NULL)
 8004ec6:	2c00      	cmp	r4, #0
 8004ec8:	d01b      	beq.n	8004f02 <HAL_ADC_Init+0x42>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004eca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d106      	bne.n	8004ede <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8004ed0:	0022      	movs	r2, r4
 8004ed2:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8004ed4:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8004ed6:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8004ed8:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8004eda:	f7ff fff0 	bl	8004ebe <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004ede:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004ee0:	06db      	lsls	r3, r3, #27
 8004ee2:	d406      	bmi.n	8004ef2 <HAL_ADC_Init+0x32>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	2204      	movs	r2, #4
 8004ee8:	6899      	ldr	r1, [r3, #8]
 8004eea:	0008      	movs	r0, r1
 8004eec:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004eee:	4211      	tst	r1, r2
 8004ef0:	d008      	beq.n	8004f04 <HAL_ADC_Init+0x44>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ef2:	2310      	movs	r3, #16
 8004ef4:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8004ef6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8004efc:	2300      	movs	r3, #0
 8004efe:	3450      	adds	r4, #80	; 0x50
 8004f00:	7023      	strb	r3, [r4, #0]
}
 8004f02:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 8004f04:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004f06:	4955      	ldr	r1, [pc, #340]	; (800505c <HAL_ADC_Init+0x19c>)
 8004f08:	4011      	ands	r1, r2
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004f10:	2203      	movs	r2, #3
 8004f12:	6899      	ldr	r1, [r3, #8]
 8004f14:	4011      	ands	r1, r2
 8004f16:	4a52      	ldr	r2, [pc, #328]	; (8005060 <HAL_ADC_Init+0x1a0>)
 8004f18:	2901      	cmp	r1, #1
 8004f1a:	d102      	bne.n	8004f22 <HAL_ADC_Init+0x62>
 8004f1c:	681d      	ldr	r5, [r3, #0]
 8004f1e:	420d      	tst	r5, r1
 8004f20:	d119      	bne.n	8004f56 <HAL_ADC_Init+0x96>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004f22:	2680      	movs	r6, #128	; 0x80
 8004f24:	6861      	ldr	r1, [r4, #4]
 8004f26:	05f6      	lsls	r6, r6, #23
 8004f28:	004d      	lsls	r5, r1, #1
 8004f2a:	086d      	lsrs	r5, r5, #1
 8004f2c:	42b5      	cmp	r5, r6
 8004f2e:	d003      	beq.n	8004f38 <HAL_ADC_Init+0x78>
 8004f30:	2580      	movs	r5, #128	; 0x80
 8004f32:	062d      	lsls	r5, r5, #24
 8004f34:	42a9      	cmp	r1, r5
 8004f36:	d176      	bne.n	8005026 <HAL_ADC_Init+0x166>
 8004f38:	691d      	ldr	r5, [r3, #16]
 8004f3a:	00ad      	lsls	r5, r5, #2
 8004f3c:	08ad      	lsrs	r5, r5, #2
 8004f3e:	611d      	str	r5, [r3, #16]
 8004f40:	691d      	ldr	r5, [r3, #16]
 8004f42:	4329      	orrs	r1, r5
 8004f44:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8004f46:	2518      	movs	r5, #24
 8004f48:	68d9      	ldr	r1, [r3, #12]
 8004f4a:	43a9      	bics	r1, r5
 8004f4c:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8004f4e:	68d9      	ldr	r1, [r3, #12]
 8004f50:	68a5      	ldr	r5, [r4, #8]
 8004f52:	4329      	orrs	r1, r5
 8004f54:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8004f56:	6811      	ldr	r1, [r2, #0]
 8004f58:	4d42      	ldr	r5, [pc, #264]	; (8005064 <HAL_ADC_Init+0x1a4>)
 8004f5a:	4029      	ands	r1, r5
 8004f5c:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8004f5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f60:	6815      	ldr	r5, [r2, #0]
 8004f62:	0649      	lsls	r1, r1, #25
 8004f64:	4329      	orrs	r1, r5
 8004f66:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8004f68:	2280      	movs	r2, #128	; 0x80
 8004f6a:	6899      	ldr	r1, [r3, #8]
 8004f6c:	0552      	lsls	r2, r2, #21
 8004f6e:	4211      	tst	r1, r2
 8004f70:	d102      	bne.n	8004f78 <HAL_ADC_Init+0xb8>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004f72:	6899      	ldr	r1, [r3, #8]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	493b      	ldr	r1, [pc, #236]	; (8005068 <HAL_ADC_Init+0x1a8>)
 8004f7c:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004f7e:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004f80:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004f82:	68dd      	ldr	r5, [r3, #12]
 8004f84:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004f86:	2902      	cmp	r1, #2
 8004f88:	d100      	bne.n	8004f8c <HAL_ADC_Init+0xcc>
 8004f8a:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004f8c:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004f8e:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004f90:	4332      	orrs	r2, r6
 8004f92:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004f94:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004f96:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004f98:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004f9a:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004f9c:	69e5      	ldr	r5, [r4, #28]
 8004f9e:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004fa0:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004fa2:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004fa4:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004fa6:	0025      	movs	r5, r4
 8004fa8:	352c      	adds	r5, #44	; 0x2c
 8004faa:	782d      	ldrb	r5, [r5, #0]
 8004fac:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004fae:	432a      	orrs	r2, r5
 8004fb0:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004fb2:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004fb4:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004fb6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004fb8:	30ff      	adds	r0, #255	; 0xff
 8004fba:	4282      	cmp	r2, r0
 8004fbc:	d004      	beq.n	8004fc8 <HAL_ADC_Init+0x108>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004fbe:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004fc0:	68d8      	ldr	r0, [r3, #12]
 8004fc2:	432a      	orrs	r2, r5
 8004fc4:	4302      	orrs	r2, r0
 8004fc6:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004fc8:	1ca2      	adds	r2, r4, #2
 8004fca:	7fd2      	ldrb	r2, [r2, #31]
 8004fcc:	2a01      	cmp	r2, #1
 8004fce:	d106      	bne.n	8004fde <HAL_ADC_Init+0x11e>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004fd0:	2900      	cmp	r1, #0
 8004fd2:	d134      	bne.n	800503e <HAL_ADC_Init+0x17e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8004fd4:	2280      	movs	r2, #128	; 0x80
 8004fd6:	68d9      	ldr	r1, [r3, #12]
 8004fd8:	0252      	lsls	r2, r2, #9
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 8004fde:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004fe0:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 8004fe2:	2901      	cmp	r1, #1
 8004fe4:	d133      	bne.n	800504e <HAL_ADC_Init+0x18e>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004fe6:	4821      	ldr	r0, [pc, #132]	; (800506c <HAL_ADC_Init+0x1ac>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004fe8:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004fea:	4002      	ands	r2, r0
 8004fec:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004fee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004ff0:	6918      	ldr	r0, [r3, #16]
 8004ff2:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8004ff4:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8004ff6:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004ff8:	4302      	orrs	r2, r0
 8004ffa:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004ffc:	691a      	ldr	r2, [r3, #16]
 8004ffe:	4311      	orrs	r1, r2
 8005000:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8005002:	2107      	movs	r1, #7
 8005004:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8005006:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8005008:	438a      	bics	r2, r1
 800500a:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800500c:	695a      	ldr	r2, [r3, #20]
 800500e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005010:	430a      	orrs	r2, r1
 8005012:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8005014:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8005016:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8005018:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800501a:	4393      	bics	r3, r2
 800501c:	001a      	movs	r2, r3
 800501e:	2301      	movs	r3, #1
 8005020:	4313      	orrs	r3, r2
 8005022:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8005024:	e76d      	b.n	8004f02 <HAL_ADC_Init+0x42>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8005026:	691d      	ldr	r5, [r3, #16]
 8005028:	4e11      	ldr	r6, [pc, #68]	; (8005070 <HAL_ADC_Init+0x1b0>)
 800502a:	00ad      	lsls	r5, r5, #2
 800502c:	08ad      	lsrs	r5, r5, #2
 800502e:	611d      	str	r5, [r3, #16]
 8005030:	6815      	ldr	r5, [r2, #0]
 8005032:	4035      	ands	r5, r6
 8005034:	6015      	str	r5, [r2, #0]
 8005036:	6815      	ldr	r5, [r2, #0]
 8005038:	4329      	orrs	r1, r5
 800503a:	6011      	str	r1, [r2, #0]
 800503c:	e783      	b.n	8004f46 <HAL_ADC_Init+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800503e:	2120      	movs	r1, #32
 8005040:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005042:	4301      	orrs	r1, r0
 8005044:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005046:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005048:	430a      	orrs	r2, r1
 800504a:	65a2      	str	r2, [r4, #88]	; 0x58
 800504c:	e7c7      	b.n	8004fde <HAL_ADC_Init+0x11e>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800504e:	2101      	movs	r1, #1
 8005050:	420a      	tst	r2, r1
 8005052:	d0d6      	beq.n	8005002 <HAL_ADC_Init+0x142>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8005054:	691a      	ldr	r2, [r3, #16]
 8005056:	438a      	bics	r2, r1
 8005058:	611a      	str	r2, [r3, #16]
 800505a:	e7d2      	b.n	8005002 <HAL_ADC_Init+0x142>
 800505c:	fffffefd 	.word	0xfffffefd
 8005060:	40012708 	.word	0x40012708
 8005064:	fdffffff 	.word	0xfdffffff
 8005068:	fffe0219 	.word	0xfffe0219
 800506c:	fffffc03 	.word	0xfffffc03
 8005070:	ffc3ffff 	.word	0xffc3ffff

08005074 <HAL_ADC_MspDeInit>:
 8005074:	4770      	bx	lr
	...

08005078 <HAL_ADC_DeInit>:
{
 8005078:	b570      	push	{r4, r5, r6, lr}
 800507a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800507c:	2501      	movs	r5, #1
  if(hadc == NULL)
 800507e:	2800      	cmp	r0, #0
 8005080:	d011      	beq.n	80050a6 <HAL_ADC_DeInit+0x2e>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8005082:	2302      	movs	r3, #2
 8005084:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8005086:	4313      	orrs	r3, r2
 8005088:	6543      	str	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 800508a:	f7ff feef 	bl	8004e6c <ADC_ConversionStop>
 800508e:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 8005090:	d137      	bne.n	8005102 <HAL_ADC_DeInit+0x8a>
    tmp_hal_status = ADC_Disable(hadc);
 8005092:	0020      	movs	r0, r4
 8005094:	f7ff feb6 	bl	8004e04 <ADC_Disable>
 8005098:	0005      	movs	r5, r0
    if (tmp_hal_status != HAL_ERROR)
 800509a:	2801      	cmp	r0, #1
 800509c:	d105      	bne.n	80050aa <HAL_ADC_DeInit+0x32>
{
 800509e:	2501      	movs	r5, #1
  __HAL_UNLOCK(hadc);
 80050a0:	2300      	movs	r3, #0
 80050a2:	3450      	adds	r4, #80	; 0x50
 80050a4:	7023      	strb	r3, [r4, #0]
}
 80050a6:	0028      	movs	r0, r5
 80050a8:	bd70      	pop	{r4, r5, r6, pc}
      hadc->State = HAL_ADC_STATE_READY;
 80050aa:	2301      	movs	r3, #1
 80050ac:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 80050ae:	6823      	ldr	r3, [r4, #0]
 80050b0:	4915      	ldr	r1, [pc, #84]	; (8005108 <HAL_ADC_DeInit+0x90>)
 80050b2:	685a      	ldr	r2, [r3, #4]
    HAL_ADC_MspDeInit(hadc);
 80050b4:	0020      	movs	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 80050b6:	400a      	ands	r2, r1
 80050b8:	605a      	str	r2, [r3, #4]
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 80050ba:	4a14      	ldr	r2, [pc, #80]	; (800510c <HAL_ADC_DeInit+0x94>)
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 80050bc:	4914      	ldr	r1, [pc, #80]	; (8005110 <HAL_ADC_DeInit+0x98>)
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 80050be:	601a      	str	r2, [r3, #0]
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	400a      	ands	r2, r1
 80050c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	4912      	ldr	r1, [pc, #72]	; (8005114 <HAL_ADC_DeInit+0x9c>)
 80050ca:	400a      	ands	r2, r1
 80050cc:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 80050ce:	691a      	ldr	r2, [r3, #16]
 80050d0:	4911      	ldr	r1, [pc, #68]	; (8005118 <HAL_ADC_DeInit+0xa0>)
 80050d2:	400a      	ands	r2, r1
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 80050d4:	2107      	movs	r1, #7
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 80050d6:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 80050d8:	695a      	ldr	r2, [r3, #20]
 80050da:	438a      	bics	r2, r1
 80050dc:	615a      	str	r2, [r3, #20]
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 80050de:	6a1a      	ldr	r2, [r3, #32]
 80050e0:	490e      	ldr	r1, [pc, #56]	; (800511c <HAL_ADC_DeInit+0xa4>)
 80050e2:	400a      	ands	r2, r1
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 80050e4:	217f      	movs	r1, #127	; 0x7f
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 80050e6:	621a      	str	r2, [r3, #32]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 80050e8:	33b4      	adds	r3, #180	; 0xb4
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	438a      	bics	r2, r1
 80050ee:	601a      	str	r2, [r3, #0]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	438a      	bics	r2, r1
 80050f4:	601a      	str	r2, [r3, #0]
    HAL_ADC_MspDeInit(hadc);
 80050f6:	f7ff ffbd 	bl	8005074 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80050fa:	2300      	movs	r3, #0
 80050fc:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->State = HAL_ADC_STATE_RESET;
 80050fe:	6563      	str	r3, [r4, #84]	; 0x54
 8005100:	e7ce      	b.n	80050a0 <HAL_ADC_DeInit+0x28>
  if (tmp_hal_status != HAL_ERROR)
 8005102:	2801      	cmp	r0, #1
 8005104:	d0cb      	beq.n	800509e <HAL_ADC_DeInit+0x26>
 8005106:	e7d2      	b.n	80050ae <HAL_ADC_DeInit+0x36>
 8005108:	fffff760 	.word	0xfffff760
 800510c:	0000089f 	.word	0x0000089f
 8005110:	efffffff 	.word	0xefffffff
 8005114:	833e0200 	.word	0x833e0200
 8005118:	3ffffc02 	.word	0x3ffffc02
 800511c:	f000f000 	.word	0xf000f000

08005120 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005120:	6803      	ldr	r3, [r0, #0]
{
 8005122:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005124:	689b      	ldr	r3, [r3, #8]
{
 8005126:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8005128:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800512a:	075b      	lsls	r3, r3, #29
 800512c:	d41a      	bmi.n	8005164 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 800512e:	0025      	movs	r5, r4
 8005130:	3550      	adds	r5, #80	; 0x50
 8005132:	782b      	ldrb	r3, [r5, #0]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d015      	beq.n	8005164 <HAL_ADC_Start+0x44>
 8005138:	2301      	movs	r3, #1
 800513a:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800513c:	69e3      	ldr	r3, [r4, #28]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d111      	bne.n	8005166 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8005142:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005144:	4a0b      	ldr	r2, [pc, #44]	; (8005174 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 8005146:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8005148:	401a      	ands	r2, r3
 800514a:	2380      	movs	r3, #128	; 0x80
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005150:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8005152:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8005154:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 8005156:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005158:	6823      	ldr	r3, [r4, #0]
 800515a:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800515c:	6899      	ldr	r1, [r3, #8]
 800515e:	3a18      	subs	r2, #24
 8005160:	430a      	orrs	r2, r1
 8005162:	609a      	str	r2, [r3, #8]
}
 8005164:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8005166:	0020      	movs	r0, r4
 8005168:	f7ff fe14 	bl	8004d94 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800516c:	2800      	cmp	r0, #0
 800516e:	d0e8      	beq.n	8005142 <HAL_ADC_Start+0x22>
 8005170:	e7f8      	b.n	8005164 <HAL_ADC_Start+0x44>
 8005172:	46c0      	nop			; (mov r8, r8)
 8005174:	fffff0fe 	.word	0xfffff0fe

08005178 <HAL_ADC_PollForConversion>:
{
 8005178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800517a:	6946      	ldr	r6, [r0, #20]
{
 800517c:	0004      	movs	r4, r0
 800517e:	000d      	movs	r5, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005180:	2e08      	cmp	r6, #8
 8005182:	d00d      	beq.n	80051a0 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8005184:	6803      	ldr	r3, [r0, #0]
 8005186:	2001      	movs	r0, #1
 8005188:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800518a:	260c      	movs	r6, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800518c:	4203      	tst	r3, r0
 800518e:	d007      	beq.n	80051a0 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005190:	2320      	movs	r3, #32
 8005192:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 8005194:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005196:	4313      	orrs	r3, r2
 8005198:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 800519a:	2300      	movs	r3, #0
 800519c:	7023      	strb	r3, [r4, #0]
}
 800519e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 80051a0:	f7ff fdc4 	bl	8004d2c <HAL_GetTick>
 80051a4:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	4216      	tst	r6, r2
 80051ac:	d024      	beq.n	80051f8 <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80051ae:	2280      	movs	r2, #128	; 0x80
 80051b0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80051b2:	0092      	lsls	r2, r2, #2
 80051b4:	430a      	orrs	r2, r1
 80051b6:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80051b8:	22c0      	movs	r2, #192	; 0xc0
 80051ba:	68d9      	ldr	r1, [r3, #12]
 80051bc:	0112      	lsls	r2, r2, #4
 80051be:	4211      	tst	r1, r2
 80051c0:	d113      	bne.n	80051ea <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80051c2:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80051c4:	7fd2      	ldrb	r2, [r2, #31]
 80051c6:	2a00      	cmp	r2, #0
 80051c8:	d10f      	bne.n	80051ea <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	0712      	lsls	r2, r2, #28
 80051ce:	d50c      	bpl.n	80051ea <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80051d0:	689a      	ldr	r2, [r3, #8]
 80051d2:	0752      	lsls	r2, r2, #29
 80051d4:	d423      	bmi.n	800521e <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80051d6:	210c      	movs	r1, #12
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	438a      	bics	r2, r1
 80051dc:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 80051de:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80051e0:	4913      	ldr	r1, [pc, #76]	; (8005230 <HAL_ADC_PollForConversion+0xb8>)
 80051e2:	4011      	ands	r1, r2
 80051e4:	2201      	movs	r2, #1
 80051e6:	430a      	orrs	r2, r1
 80051e8:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 80051ea:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80051ec:	69a2      	ldr	r2, [r4, #24]
 80051ee:	4282      	cmp	r2, r0
 80051f0:	d1d5      	bne.n	800519e <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80051f2:	220c      	movs	r2, #12
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	e7d2      	b.n	800519e <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 80051f8:	1c6a      	adds	r2, r5, #1
 80051fa:	d0d5      	beq.n	80051a8 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80051fc:	2d00      	cmp	r5, #0
 80051fe:	d108      	bne.n	8005212 <HAL_ADC_PollForConversion+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005200:	2304      	movs	r3, #4
 8005202:	6d62      	ldr	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8005204:	3450      	adds	r4, #80	; 0x50
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005206:	4313      	orrs	r3, r2
 8005208:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 800520a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800520c:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 800520e:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8005210:	e7c5      	b.n	800519e <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005212:	f7ff fd8b 	bl	8004d2c <HAL_GetTick>
 8005216:	1bc0      	subs	r0, r0, r7
 8005218:	42a8      	cmp	r0, r5
 800521a:	d9c4      	bls.n	80051a6 <HAL_ADC_PollForConversion+0x2e>
 800521c:	e7f0      	b.n	8005200 <HAL_ADC_PollForConversion+0x88>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800521e:	2220      	movs	r2, #32
 8005220:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005222:	430a      	orrs	r2, r1
 8005224:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005226:	2201      	movs	r2, #1
 8005228:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800522a:	430a      	orrs	r2, r1
 800522c:	65a2      	str	r2, [r4, #88]	; 0x58
 800522e:	e7dc      	b.n	80051ea <HAL_ADC_PollForConversion+0x72>
 8005230:	fffffefe 	.word	0xfffffefe

08005234 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8005234:	6803      	ldr	r3, [r0, #0]
 8005236:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8005238:	4770      	bx	lr
	...

0800523c <HAL_ADC_ConfigChannel>:
{
 800523c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800523e:	0004      	movs	r4, r0
 8005240:	3450      	adds	r4, #80	; 0x50
 8005242:	7822      	ldrb	r2, [r4, #0]
{
 8005244:	0003      	movs	r3, r0
 8005246:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 8005248:	2002      	movs	r0, #2
 800524a:	2a01      	cmp	r2, #1
 800524c:	d00b      	beq.n	8005266 <HAL_ADC_ConfigChannel+0x2a>
 800524e:	3801      	subs	r0, #1
 8005250:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	6891      	ldr	r1, [r2, #8]
 8005256:	0749      	lsls	r1, r1, #29
 8005258:	d506      	bpl.n	8005268 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800525a:	2220      	movs	r2, #32
 800525c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800525e:	430a      	orrs	r2, r1
 8005260:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8005262:	2300      	movs	r3, #0
 8005264:	7023      	strb	r3, [r4, #0]
}
 8005266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (sConfig->Rank != ADC_RANK_NONE)
 8005268:	2380      	movs	r3, #128	; 0x80
 800526a:	6828      	ldr	r0, [r5, #0]
 800526c:	4e19      	ldr	r6, [pc, #100]	; (80052d4 <HAL_ADC_ConfigChannel+0x98>)
 800526e:	686f      	ldr	r7, [r5, #4]
 8005270:	0341      	lsls	r1, r0, #13
 8005272:	02db      	lsls	r3, r3, #11
 8005274:	0b49      	lsrs	r1, r1, #13
 8005276:	4003      	ands	r3, r0
 8005278:	42b7      	cmp	r7, r6
 800527a:	d019      	beq.n	80052b0 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800527c:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800527e:	4301      	orrs	r1, r0
 8005280:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8005282:	2b00      	cmp	r3, #0
 8005284:	d008      	beq.n	8005298 <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;   
 8005286:	2380      	movs	r3, #128	; 0x80
 8005288:	4a13      	ldr	r2, [pc, #76]	; (80052d8 <HAL_ADC_ConfigChannel+0x9c>)
 800528a:	041b      	lsls	r3, r3, #16
 800528c:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800528e:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 8005290:	430b      	orrs	r3, r1
 8005292:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8005294:	f7ff fd68 	bl	8004d68 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8005298:	682b      	ldr	r3, [r5, #0]
 800529a:	039b      	lsls	r3, r3, #14
 800529c:	d505      	bpl.n	80052aa <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 800529e:	2380      	movs	r3, #128	; 0x80
 80052a0:	4a0d      	ldr	r2, [pc, #52]	; (80052d8 <HAL_ADC_ConfigChannel+0x9c>)
 80052a2:	03db      	lsls	r3, r3, #15
 80052a4:	6811      	ldr	r1, [r2, #0]
 80052a6:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80052a8:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 80052aa:	2000      	movs	r0, #0
 80052ac:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80052ae:	e7da      	b.n	8005266 <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80052b0:	6a95      	ldr	r5, [r2, #40]	; 0x28
 80052b2:	438d      	bics	r5, r1
 80052b4:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d004      	beq.n	80052c4 <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80052ba:	4a07      	ldr	r2, [pc, #28]	; (80052d8 <HAL_ADC_ConfigChannel+0x9c>)
 80052bc:	4907      	ldr	r1, [pc, #28]	; (80052dc <HAL_ADC_ConfigChannel+0xa0>)
 80052be:	6813      	ldr	r3, [r2, #0]
 80052c0:	400b      	ands	r3, r1
 80052c2:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80052c4:	0383      	lsls	r3, r0, #14
 80052c6:	d5f0      	bpl.n	80052aa <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80052c8:	4a03      	ldr	r2, [pc, #12]	; (80052d8 <HAL_ADC_ConfigChannel+0x9c>)
 80052ca:	4905      	ldr	r1, [pc, #20]	; (80052e0 <HAL_ADC_ConfigChannel+0xa4>)
 80052cc:	6813      	ldr	r3, [r2, #0]
 80052ce:	400b      	ands	r3, r1
 80052d0:	e7ea      	b.n	80052a8 <HAL_ADC_ConfigChannel+0x6c>
 80052d2:	46c0      	nop			; (mov r8, r8)
 80052d4:	00001001 	.word	0x00001001
 80052d8:	40012708 	.word	0x40012708
 80052dc:	ff7fffff 	.word	0xff7fffff
 80052e0:	ffbfffff 	.word	0xffbfffff

080052e4 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80052e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80052e6:	0005      	movs	r5, r0
 80052e8:	3550      	adds	r5, #80	; 0x50
 80052ea:	782b      	ldrb	r3, [r5, #0]
{
 80052ec:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80052ee:	2002      	movs	r0, #2
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d044      	beq.n	800537e <HAL_ADCEx_Calibration_Start+0x9a>
 80052f4:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80052f6:	2203      	movs	r2, #3
  __HAL_LOCK(hadc);
 80052f8:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	6898      	ldr	r0, [r3, #8]
 80052fe:	4010      	ands	r0, r2
 8005300:	2801      	cmp	r0, #1
 8005302:	d109      	bne.n	8005318 <HAL_ADCEx_Calibration_Start+0x34>
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	4202      	tst	r2, r0
 8005308:	d006      	beq.n	8005318 <HAL_ADCEx_Calibration_Start+0x34>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800530a:	2320      	movs	r3, #32
 800530c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800530e:	4313      	orrs	r3, r2
 8005310:	6563      	str	r3, [r4, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005312:	2300      	movs	r3, #0
 8005314:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 8005316:	e032      	b.n	800537e <HAL_ADCEx_Calibration_Start+0x9a>
    ADC_STATE_CLR_SET(hadc->State, 
 8005318:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800531a:	4919      	ldr	r1, [pc, #100]	; (8005380 <HAL_ADCEx_Calibration_Start+0x9c>)
 800531c:	4011      	ands	r1, r2
 800531e:	2202      	movs	r2, #2
 8005320:	430a      	orrs	r2, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8005322:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 8005324:	6562      	str	r2, [r4, #84]	; 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8005326:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	438a      	bics	r2, r1
 800532c:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800532e:	2280      	movs	r2, #128	; 0x80
 8005330:	6899      	ldr	r1, [r3, #8]
 8005332:	0612      	lsls	r2, r2, #24
 8005334:	430a      	orrs	r2, r1
 8005336:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8005338:	f7ff fcf8 	bl	8004d2c <HAL_GetTick>
 800533c:	0007      	movs	r7, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	689a      	ldr	r2, [r3, #8]
 8005342:	2a00      	cmp	r2, #0
 8005344:	db0c      	blt.n	8005360 <HAL_ADCEx_Calibration_Start+0x7c>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8005346:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8005348:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800534a:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800534c:	430e      	orrs	r6, r1
 800534e:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8005350:	6d63      	ldr	r3, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005352:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8005354:	4393      	bics	r3, r2
 8005356:	001a      	movs	r2, r3
 8005358:	2301      	movs	r3, #1
 800535a:	4313      	orrs	r3, r2
 800535c:	6563      	str	r3, [r4, #84]	; 0x54
 800535e:	e7d8      	b.n	8005312 <HAL_ADCEx_Calibration_Start+0x2e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8005360:	f7ff fce4 	bl	8004d2c <HAL_GetTick>
 8005364:	1bc0      	subs	r0, r0, r7
 8005366:	280a      	cmp	r0, #10
 8005368:	d9e9      	bls.n	800533e <HAL_ADCEx_Calibration_Start+0x5a>
        ADC_STATE_CLR_SET(hadc->State,
 800536a:	2212      	movs	r2, #18
 800536c:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 800536e:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8005370:	4393      	bics	r3, r2
 8005372:	001a      	movs	r2, r3
 8005374:	2310      	movs	r3, #16
 8005376:	4313      	orrs	r3, r2
 8005378:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 800537a:	2300      	movs	r3, #0
 800537c:	702b      	strb	r3, [r5, #0]
}
 800537e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005380:	fffffefd 	.word	0xfffffefd

08005384 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005384:	b530      	push	{r4, r5, lr}
 8005386:	25ff      	movs	r5, #255	; 0xff
 8005388:	2403      	movs	r4, #3
 800538a:	002a      	movs	r2, r5
 800538c:	4004      	ands	r4, r0
 800538e:	00e4      	lsls	r4, r4, #3
 8005390:	40a2      	lsls	r2, r4
 8005392:	0189      	lsls	r1, r1, #6
 8005394:	4029      	ands	r1, r5
 8005396:	43d2      	mvns	r2, r2
 8005398:	40a1      	lsls	r1, r4
 800539a:	b2c3      	uxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800539c:	2800      	cmp	r0, #0
 800539e:	db0a      	blt.n	80053b6 <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80053a0:	24c0      	movs	r4, #192	; 0xc0
 80053a2:	4b0b      	ldr	r3, [pc, #44]	; (80053d0 <HAL_NVIC_SetPriority+0x4c>)
 80053a4:	0880      	lsrs	r0, r0, #2
 80053a6:	0080      	lsls	r0, r0, #2
 80053a8:	18c0      	adds	r0, r0, r3
 80053aa:	00a4      	lsls	r4, r4, #2
 80053ac:	5903      	ldr	r3, [r0, r4]
 80053ae:	401a      	ands	r2, r3
 80053b0:	4311      	orrs	r1, r2
 80053b2:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80053b4:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80053b6:	200f      	movs	r0, #15
 80053b8:	4003      	ands	r3, r0
 80053ba:	3b08      	subs	r3, #8
 80053bc:	4805      	ldr	r0, [pc, #20]	; (80053d4 <HAL_NVIC_SetPriority+0x50>)
 80053be:	089b      	lsrs	r3, r3, #2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	181b      	adds	r3, r3, r0
 80053c4:	69d8      	ldr	r0, [r3, #28]
 80053c6:	4002      	ands	r2, r0
 80053c8:	4311      	orrs	r1, r2
 80053ca:	61d9      	str	r1, [r3, #28]
 80053cc:	e7f2      	b.n	80053b4 <HAL_NVIC_SetPriority+0x30>
 80053ce:	46c0      	nop			; (mov r8, r8)
 80053d0:	e000e100 	.word	0xe000e100
 80053d4:	e000ed00 	.word	0xe000ed00

080053d8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80053d8:	2800      	cmp	r0, #0
 80053da:	db05      	blt.n	80053e8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053dc:	231f      	movs	r3, #31
 80053de:	4018      	ands	r0, r3
 80053e0:	3b1e      	subs	r3, #30
 80053e2:	4083      	lsls	r3, r0
 80053e4:	4a01      	ldr	r2, [pc, #4]	; (80053ec <HAL_NVIC_EnableIRQ+0x14>)
 80053e6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80053e8:	4770      	bx	lr
 80053ea:	46c0      	nop			; (mov r8, r8)
 80053ec:	e000e100 	.word	0xe000e100

080053f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80053f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f2:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80053f4:	2001      	movs	r0, #1
  if(hdma == NULL)
 80053f6:	2c00      	cmp	r4, #0
 80053f8:	d035      	beq.n	8005466 <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80053fa:	6825      	ldr	r5, [r4, #0]
 80053fc:	4b1a      	ldr	r3, [pc, #104]	; (8005468 <HAL_DMA_Init+0x78>)
 80053fe:	2114      	movs	r1, #20
 8005400:	18e8      	adds	r0, r5, r3
 8005402:	f7fa fe9f 	bl	8000144 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8005406:	4b19      	ldr	r3, [pc, #100]	; (800546c <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005408:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 800540a:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800540c:	2302      	movs	r3, #2
 800540e:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005410:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8005412:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005414:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005416:	4b16      	ldr	r3, [pc, #88]	; (8005470 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005418:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800541a:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 800541c:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800541e:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8005420:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005422:	433b      	orrs	r3, r7
 8005424:	6967      	ldr	r7, [r4, #20]
 8005426:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005428:	69a7      	ldr	r7, [r4, #24]
 800542a:	433b      	orrs	r3, r7
 800542c:	69e7      	ldr	r7, [r4, #28]
 800542e:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8005430:	6a27      	ldr	r7, [r4, #32]
 8005432:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8005434:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005436:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005438:	2380      	movs	r3, #128	; 0x80
 800543a:	01db      	lsls	r3, r3, #7
 800543c:	4299      	cmp	r1, r3
 800543e:	d00c      	beq.n	800545a <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005440:	251c      	movs	r5, #28
 8005442:	4028      	ands	r0, r5
 8005444:	3d0d      	subs	r5, #13
 8005446:	4085      	lsls	r5, r0
 8005448:	490a      	ldr	r1, [pc, #40]	; (8005474 <HAL_DMA_Init+0x84>)
 800544a:	680b      	ldr	r3, [r1, #0]
 800544c:	43ab      	bics	r3, r5
 800544e:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005450:	6863      	ldr	r3, [r4, #4]
 8005452:	680d      	ldr	r5, [r1, #0]
 8005454:	4083      	lsls	r3, r0
 8005456:	432b      	orrs	r3, r5
 8005458:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800545a:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800545c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800545e:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005460:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8005462:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8005464:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8005466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005468:	bffdfff8 	.word	0xbffdfff8
 800546c:	40020000 	.word	0x40020000
 8005470:	ffff800f 	.word	0xffff800f
 8005474:	400200a8 	.word	0x400200a8

08005478 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800547a:	1d45      	adds	r5, r0, #5
{
 800547c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 800547e:	7feb      	ldrb	r3, [r5, #31]
{
 8005480:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8005482:	2002      	movs	r0, #2
 8005484:	2b01      	cmp	r3, #1
 8005486:	d029      	beq.n	80054dc <HAL_DMA_Start_IT+0x64>
 8005488:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 800548a:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 800548c:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 800548e:	7ffb      	ldrb	r3, [r7, #31]
 8005490:	2600      	movs	r6, #0
 8005492:	469c      	mov	ip, r3
 8005494:	4660      	mov	r0, ip
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2801      	cmp	r0, #1
 800549a:	d12a      	bne.n	80054f2 <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800549c:	3001      	adds	r0, #1
 800549e:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80054a0:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054a2:	63e6      	str	r6, [r4, #60]	; 0x3c
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80054a4:	6c67      	ldr	r7, [r4, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 80054a6:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80054a8:	361c      	adds	r6, #28
 80054aa:	403e      	ands	r6, r7
    __HAL_DMA_DISABLE(hdma);
 80054ac:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80054ae:	40b3      	lsls	r3, r6
    __HAL_DMA_DISABLE(hdma);
 80054b0:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80054b2:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80054b4:	606b      	str	r3, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80054b6:	9b01      	ldr	r3, [sp, #4]
 80054b8:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054ba:	68a3      	ldr	r3, [r4, #8]
 80054bc:	2b10      	cmp	r3, #16
 80054be:	d10e      	bne.n	80054de <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80054c0:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80054c2:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80054c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00c      	beq.n	80054e4 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054ca:	230e      	movs	r3, #14
 80054cc:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80054ce:	4313      	orrs	r3, r2
 80054d0:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 80054d2:	2301      	movs	r3, #1
 80054d4:	6802      	ldr	r2, [r0, #0]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054da:	2000      	movs	r0, #0
}
 80054dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80054de:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80054e0:	60c2      	str	r2, [r0, #12]
 80054e2:	e7ef      	b.n	80054c4 <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054e4:	2204      	movs	r2, #4
 80054e6:	6803      	ldr	r3, [r0, #0]
 80054e8:	4393      	bics	r3, r2
 80054ea:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80054ec:	6802      	ldr	r2, [r0, #0]
 80054ee:	230a      	movs	r3, #10
 80054f0:	e7ed      	b.n	80054ce <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 80054f2:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 80054f4:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 80054f6:	e7f1      	b.n	80054dc <HAL_DMA_Start_IT+0x64>

080054f8 <HAL_DMA_Abort_IT>:
{
 80054f8:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80054fa:	1d84      	adds	r4, r0, #6
 80054fc:	7fe3      	ldrb	r3, [r4, #31]
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d004      	beq.n	800550c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005502:	2304      	movs	r3, #4
 8005504:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8005506:	3b03      	subs	r3, #3
}
 8005508:	0018      	movs	r0, r3
 800550a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800550c:	210e      	movs	r1, #14
 800550e:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005510:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	438a      	bics	r2, r1
 8005516:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8005518:	2201      	movs	r2, #1
 800551a:	6819      	ldr	r1, [r3, #0]
 800551c:	4391      	bics	r1, r2
 800551e:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005520:	231c      	movs	r3, #28
 8005522:	402b      	ands	r3, r5
 8005524:	0015      	movs	r5, r2
 8005526:	409d      	lsls	r5, r3
 8005528:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 800552a:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800552c:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800552e:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8005530:	2400      	movs	r4, #0
 8005532:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 8005534:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 8005536:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8005538:	42a2      	cmp	r2, r4
 800553a:	d0e5      	beq.n	8005508 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 800553c:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 800553e:	0023      	movs	r3, r4
 8005540:	e7e2      	b.n	8005508 <HAL_DMA_Abort_IT+0x10>

08005542 <HAL_DMA_IRQHandler>:
{
 8005542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8005544:	221c      	movs	r2, #28
 8005546:	2704      	movs	r7, #4
 8005548:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800554a:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800554c:	4032      	ands	r2, r6
 800554e:	003e      	movs	r6, r7
 8005550:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005552:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005554:	6803      	ldr	r3, [r0, #0]
 8005556:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8005558:	4235      	tst	r5, r6
 800555a:	d00d      	beq.n	8005578 <HAL_DMA_IRQHandler+0x36>
 800555c:	423c      	tst	r4, r7
 800555e:	d00b      	beq.n	8005578 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	0692      	lsls	r2, r2, #26
 8005564:	d402      	bmi.n	800556c <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	43ba      	bics	r2, r7
 800556a:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 800556c:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800556e:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8005570:	2b00      	cmp	r3, #0
 8005572:	d019      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8005574:	4798      	blx	r3
  return;
 8005576:	e017      	b.n	80055a8 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8005578:	2702      	movs	r7, #2
 800557a:	003e      	movs	r6, r7
 800557c:	4096      	lsls	r6, r2
 800557e:	4235      	tst	r5, r6
 8005580:	d013      	beq.n	80055aa <HAL_DMA_IRQHandler+0x68>
 8005582:	423c      	tst	r4, r7
 8005584:	d011      	beq.n	80055aa <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	0692      	lsls	r2, r2, #26
 800558a:	d406      	bmi.n	800559a <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800558c:	240a      	movs	r4, #10
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	43a2      	bics	r2, r4
 8005592:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005594:	2201      	movs	r2, #1
 8005596:	1d83      	adds	r3, r0, #6
 8005598:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 800559a:	2200      	movs	r2, #0
 800559c:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800559e:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 80055a0:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 80055a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d1e5      	bne.n	8005574 <HAL_DMA_IRQHandler+0x32>
}
 80055a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80055aa:	2608      	movs	r6, #8
 80055ac:	0037      	movs	r7, r6
 80055ae:	4097      	lsls	r7, r2
 80055b0:	423d      	tst	r5, r7
 80055b2:	d0f9      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x66>
 80055b4:	4234      	tst	r4, r6
 80055b6:	d0f7      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055b8:	250e      	movs	r5, #14
 80055ba:	681c      	ldr	r4, [r3, #0]
 80055bc:	43ac      	bics	r4, r5
 80055be:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80055c0:	2301      	movs	r3, #1
 80055c2:	001c      	movs	r4, r3
 80055c4:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 80055c6:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80055c8:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80055ca:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80055cc:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 80055ce:	2200      	movs	r2, #0
 80055d0:	1d43      	adds	r3, r0, #5
 80055d2:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 80055d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80055d6:	e7e5      	b.n	80055a4 <HAL_DMA_IRQHandler+0x62>

080055d8 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80055d8:	4a56      	ldr	r2, [pc, #344]	; (8005734 <HAL_GPIO_Init+0x15c>)
{
 80055da:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80055dc:	1882      	adds	r2, r0, r2
 80055de:	1e54      	subs	r4, r2, #1
 80055e0:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 80055e2:	2300      	movs	r3, #0
{
 80055e4:	b085      	sub	sp, #20
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80055e6:	3205      	adds	r2, #5
 80055e8:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 80055ea:	680a      	ldr	r2, [r1, #0]
 80055ec:	0014      	movs	r4, r2
 80055ee:	40dc      	lsrs	r4, r3
 80055f0:	d101      	bne.n	80055f6 <HAL_GPIO_Init+0x1e>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 80055f2:	b005      	add	sp, #20
 80055f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80055f6:	2501      	movs	r5, #1
 80055f8:	0014      	movs	r4, r2
 80055fa:	409d      	lsls	r5, r3
 80055fc:	402c      	ands	r4, r5
 80055fe:	9401      	str	r4, [sp, #4]
    if(iocurrent)
 8005600:	422a      	tst	r2, r5
 8005602:	d100      	bne.n	8005606 <HAL_GPIO_Init+0x2e>
 8005604:	e093      	b.n	800572e <HAL_GPIO_Init+0x156>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8005606:	684a      	ldr	r2, [r1, #4]
 8005608:	9200      	str	r2, [sp, #0]
 800560a:	2210      	movs	r2, #16
 800560c:	9e00      	ldr	r6, [sp, #0]
 800560e:	4396      	bics	r6, r2
 8005610:	2e02      	cmp	r6, #2
 8005612:	d10f      	bne.n	8005634 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3U];
 8005614:	08da      	lsrs	r2, r3, #3
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8005616:	2407      	movs	r4, #7
 8005618:	0092      	lsls	r2, r2, #2
 800561a:	1882      	adds	r2, r0, r2
        temp = GPIOx->AFR[position >> 3U];
 800561c:	6a17      	ldr	r7, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800561e:	9202      	str	r2, [sp, #8]
 8005620:	220f      	movs	r2, #15
 8005622:	401c      	ands	r4, r3
 8005624:	00a4      	lsls	r4, r4, #2
 8005626:	40a2      	lsls	r2, r4
 8005628:	4397      	bics	r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800562a:	690a      	ldr	r2, [r1, #16]
 800562c:	40a2      	lsls	r2, r4
 800562e:	4317      	orrs	r7, r2
        GPIOx->AFR[position >> 3U] = temp;
 8005630:	9a02      	ldr	r2, [sp, #8]
 8005632:	6217      	str	r7, [r2, #32]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005634:	2203      	movs	r2, #3
 8005636:	005c      	lsls	r4, r3, #1
 8005638:	40a2      	lsls	r2, r4
 800563a:	3e01      	subs	r6, #1
 800563c:	43d2      	mvns	r2, r2
 800563e:	2e01      	cmp	r6, #1
 8005640:	d80d      	bhi.n	800565e <HAL_GPIO_Init+0x86>
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005642:	68ce      	ldr	r6, [r1, #12]
        temp = GPIOx->OSPEEDR;
 8005644:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005646:	40a6      	lsls	r6, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005648:	4017      	ands	r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800564a:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800564c:	6086      	str	r6, [r0, #8]
        temp= GPIOx->OTYPER;
 800564e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005650:	43ae      	bics	r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005652:	9d00      	ldr	r5, [sp, #0]
 8005654:	06ed      	lsls	r5, r5, #27
 8005656:	0fed      	lsrs	r5, r5, #31
 8005658:	409d      	lsls	r5, r3
 800565a:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 800565c:	6045      	str	r5, [r0, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800565e:	2503      	movs	r5, #3
 8005660:	9e00      	ldr	r6, [sp, #0]
      temp = GPIOx->MODER;
 8005662:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005664:	402e      	ands	r6, r5
 8005666:	40a6      	lsls	r6, r4
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005668:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800566a:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 800566c:	6006      	str	r6, [r0, #0]
      temp = GPIOx->PUPDR;
 800566e:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005670:	4032      	ands	r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8005672:	688e      	ldr	r6, [r1, #8]
 8005674:	40a6      	lsls	r6, r4
 8005676:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8005678:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800567a:	9a00      	ldr	r2, [sp, #0]
 800567c:	00d2      	lsls	r2, r2, #3
 800567e:	d556      	bpl.n	800572e <HAL_GPIO_Init+0x156>
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8005680:	001e      	movs	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005682:	2701      	movs	r7, #1
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8005684:	402e      	ands	r6, r5
 8005686:	00b6      	lsls	r6, r6, #2
 8005688:	46b4      	mov	ip, r6
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800568a:	4c2b      	ldr	r4, [pc, #172]	; (8005738 <HAL_GPIO_Init+0x160>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800568c:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800568e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005690:	433a      	orrs	r2, r7
 8005692:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8005694:	4a29      	ldr	r2, [pc, #164]	; (800573c <HAL_GPIO_Init+0x164>)
 8005696:	089c      	lsrs	r4, r3, #2
 8005698:	00a4      	lsls	r4, r4, #2
 800569a:	18a4      	adds	r4, r4, r2
 800569c:	68a2      	ldr	r2, [r4, #8]
 800569e:	9202      	str	r2, [sp, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80056a0:	4662      	mov	r2, ip
 80056a2:	4096      	lsls	r6, r2
 80056a4:	9a02      	ldr	r2, [sp, #8]
 80056a6:	43b2      	bics	r2, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80056a8:	26a0      	movs	r6, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80056aa:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80056ac:	05f6      	lsls	r6, r6, #23
 80056ae:	2200      	movs	r2, #0
 80056b0:	42b0      	cmp	r0, r6
 80056b2:	d010      	beq.n	80056d6 <HAL_GPIO_Init+0xfe>
 80056b4:	4e22      	ldr	r6, [pc, #136]	; (8005740 <HAL_GPIO_Init+0x168>)
 80056b6:	003a      	movs	r2, r7
 80056b8:	42b0      	cmp	r0, r6
 80056ba:	d00c      	beq.n	80056d6 <HAL_GPIO_Init+0xfe>
 80056bc:	4e21      	ldr	r6, [pc, #132]	; (8005744 <HAL_GPIO_Init+0x16c>)
 80056be:	19fa      	adds	r2, r7, r7
 80056c0:	42b0      	cmp	r0, r6
 80056c2:	d008      	beq.n	80056d6 <HAL_GPIO_Init+0xfe>
 80056c4:	4e20      	ldr	r6, [pc, #128]	; (8005748 <HAL_GPIO_Init+0x170>)
 80056c6:	002a      	movs	r2, r5
 80056c8:	42b0      	cmp	r0, r6
 80056ca:	d004      	beq.n	80056d6 <HAL_GPIO_Init+0xfe>
 80056cc:	4d1f      	ldr	r5, [pc, #124]	; (800574c <HAL_GPIO_Init+0x174>)
 80056ce:	19d2      	adds	r2, r2, r7
 80056d0:	42a8      	cmp	r0, r5
 80056d2:	d000      	beq.n	80056d6 <HAL_GPIO_Init+0xfe>
 80056d4:	9a03      	ldr	r2, [sp, #12]
 80056d6:	4665      	mov	r5, ip
 80056d8:	40aa      	lsls	r2, r5
 80056da:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80056dc:	9f00      	ldr	r7, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80056de:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056e0:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 80056e2:	4a1b      	ldr	r2, [pc, #108]	; (8005750 <HAL_GPIO_Init+0x178>)
        temp &= ~((uint32_t)iocurrent);
 80056e4:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 80056e6:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 80056e8:	9d01      	ldr	r5, [sp, #4]
        temp &= ~((uint32_t)iocurrent);
 80056ea:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80056ec:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80056ee:	03ff      	lsls	r7, r7, #15
 80056f0:	d401      	bmi.n	80056f6 <HAL_GPIO_Init+0x11e>
        temp &= ~((uint32_t)iocurrent);
 80056f2:	0035      	movs	r5, r6
 80056f4:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 80056f6:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80056f8:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80056fa:	9d01      	ldr	r5, [sp, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80056fc:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 80056fe:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005700:	03bf      	lsls	r7, r7, #14
 8005702:	d401      	bmi.n	8005708 <HAL_GPIO_Init+0x130>
        temp &= ~((uint32_t)iocurrent);
 8005704:	0035      	movs	r5, r6
 8005706:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8005708:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800570a:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 800570c:	9d01      	ldr	r5, [sp, #4]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800570e:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8005710:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005712:	02ff      	lsls	r7, r7, #11
 8005714:	d401      	bmi.n	800571a <HAL_GPIO_Init+0x142>
        temp &= ~((uint32_t)iocurrent);
 8005716:	0035      	movs	r5, r6
 8005718:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 800571a:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800571c:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 800571e:	9e01      	ldr	r6, [sp, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005720:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8005722:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005724:	02bf      	lsls	r7, r7, #10
 8005726:	d401      	bmi.n	800572c <HAL_GPIO_Init+0x154>
        temp &= ~((uint32_t)iocurrent);
 8005728:	4025      	ands	r5, r4
 800572a:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 800572c:	60d6      	str	r6, [r2, #12]
    position++;
 800572e:	3301      	adds	r3, #1
 8005730:	e75b      	b.n	80055ea <HAL_GPIO_Init+0x12>
 8005732:	46c0      	nop			; (mov r8, r8)
 8005734:	afffe400 	.word	0xafffe400
 8005738:	40021000 	.word	0x40021000
 800573c:	40010000 	.word	0x40010000
 8005740:	50000400 	.word	0x50000400
 8005744:	50000800 	.word	0x50000800
 8005748:	50000c00 	.word	0x50000c00
 800574c:	50001000 	.word	0x50001000
 8005750:	40010400 	.word	0x40010400

08005754 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8005754:	2a00      	cmp	r2, #0
 8005756:	d001      	beq.n	800575c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005758:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800575a:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 800575c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800575e:	e7fc      	b.n	800575a <HAL_GPIO_WritePin+0x6>

08005760 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8005760:	4b04      	ldr	r3, [pc, #16]	; (8005774 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8005762:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8005764:	695a      	ldr	r2, [r3, #20]
 8005766:	4210      	tst	r0, r2
 8005768:	d002      	beq.n	8005770 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800576a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800576c:	f009 fe62 	bl	800f434 <HAL_GPIO_EXTI_Callback>
  }
}
 8005770:	bd10      	pop	{r4, pc}
 8005772:	46c0      	nop			; (mov r8, r8)
 8005774:	40010400 	.word	0x40010400

08005778 <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8005778:	2110      	movs	r1, #16
 800577a:	4a02      	ldr	r2, [pc, #8]	; (8005784 <HAL_PWR_DisablePVD+0xc>)
 800577c:	6813      	ldr	r3, [r2, #0]
 800577e:	438b      	bics	r3, r1
 8005780:	6013      	str	r3, [r2, #0]
}
 8005782:	4770      	bx	lr
 8005784:	40007000 	.word	0x40007000

08005788 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005788:	b510      	push	{r4, lr}

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800578a:	2403      	movs	r4, #3
  tmpreg = PWR->CR;
 800578c:	4a09      	ldr	r2, [pc, #36]	; (80057b4 <HAL_PWR_EnterSLEEPMode+0x2c>)
 800578e:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8005790:	43a3      	bics	r3, r4

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8005792:	4303      	orrs	r3, r0

  /* Store the new value */
  PWR->CR = tmpreg;
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005794:	2004      	movs	r0, #4
  PWR->CR = tmpreg;
 8005796:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005798:	4a07      	ldr	r2, [pc, #28]	; (80057b8 <HAL_PWR_EnterSLEEPMode+0x30>)
 800579a:	6913      	ldr	r3, [r2, #16]
 800579c:	4383      	bics	r3, r0
 800579e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80057a0:	2901      	cmp	r1, #1
 80057a2:	d102      	bne.n	80057aa <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80057a4:	bf30      	wfi
    __WFE();
    __WFE();
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 80057a6:	46c0      	nop			; (mov r8, r8)

}
 80057a8:	bd10      	pop	{r4, pc}
    __SEV();
 80057aa:	bf40      	sev
    __WFE();
 80057ac:	bf20      	wfe
    __WFE();
 80057ae:	bf20      	wfe
 80057b0:	e7f9      	b.n	80057a6 <HAL_PWR_EnterSLEEPMode+0x1e>
 80057b2:	46c0      	nop			; (mov r8, r8)
 80057b4:	40007000 	.word	0x40007000
 80057b8:	e000ed00 	.word	0xe000ed00

080057bc <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80057bc:	b510      	push	{r4, lr}

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80057be:	2403      	movs	r4, #3
  tmpreg = PWR->CR;
 80057c0:	4a0a      	ldr	r2, [pc, #40]	; (80057ec <HAL_PWR_EnterSTOPMode+0x30>)
 80057c2:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80057c4:	43a3      	bics	r3, r4

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80057c6:	4303      	orrs	r3, r0

  /* Store the new value */
  PWR->CR = tmpreg;
 80057c8:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80057ca:	2204      	movs	r2, #4
 80057cc:	4b08      	ldr	r3, [pc, #32]	; (80057f0 <HAL_PWR_EnterSTOPMode+0x34>)
 80057ce:	6918      	ldr	r0, [r3, #16]
 80057d0:	4302      	orrs	r2, r0
 80057d2:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80057d4:	2901      	cmp	r1, #1
 80057d6:	d105      	bne.n	80057e4 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80057d8:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80057da:	2104      	movs	r1, #4
 80057dc:	691a      	ldr	r2, [r3, #16]
 80057de:	438a      	bics	r2, r1
 80057e0:	611a      	str	r2, [r3, #16]

}
 80057e2:	bd10      	pop	{r4, pc}
    __SEV();
 80057e4:	bf40      	sev
    __WFE();
 80057e6:	bf20      	wfe
    __WFE();
 80057e8:	bf20      	wfe
 80057ea:	e7f6      	b.n	80057da <HAL_PWR_EnterSTOPMode+0x1e>
 80057ec:	40007000 	.word	0x40007000
 80057f0:	e000ed00 	.word	0xe000ed00

080057f4 <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 80057f4:	2380      	movs	r3, #128	; 0x80
 80057f6:	4a03      	ldr	r2, [pc, #12]	; (8005804 <HAL_PWREx_EnableFastWakeUp+0x10>)
 80057f8:	00db      	lsls	r3, r3, #3
 80057fa:	6811      	ldr	r1, [r2, #0]
 80057fc:	430b      	orrs	r3, r1
 80057fe:	6013      	str	r3, [r2, #0]
}
 8005800:	4770      	bx	lr
 8005802:	46c0      	nop			; (mov r8, r8)
 8005804:	40007000 	.word	0x40007000

08005808 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8005808:	2380      	movs	r3, #128	; 0x80
 800580a:	4a03      	ldr	r2, [pc, #12]	; (8005818 <HAL_PWREx_EnableUltraLowPower+0x10>)
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	6811      	ldr	r1, [r2, #0]
 8005810:	430b      	orrs	r3, r1
 8005812:	6013      	str	r3, [r2, #0]
}
 8005814:	4770      	bx	lr
 8005816:	46c0      	nop			; (mov r8, r8)
 8005818:	40007000 	.word	0x40007000

0800581c <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800581c:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 800581e:	4b19      	ldr	r3, [pc, #100]	; (8005884 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8005820:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8005822:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8005824:	400a      	ands	r2, r1
 8005826:	2a08      	cmp	r2, #8
 8005828:	d029      	beq.n	800587e <HAL_RCC_GetSysClockFreq+0x62>
 800582a:	2a0c      	cmp	r2, #12
 800582c:	d009      	beq.n	8005842 <HAL_RCC_GetSysClockFreq+0x26>
 800582e:	2a04      	cmp	r2, #4
 8005830:	d11d      	bne.n	800586e <HAL_RCC_GetSysClockFreq+0x52>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005832:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8005834:	4b14      	ldr	r3, [pc, #80]	; (8005888 <HAL_RCC_GetSysClockFreq+0x6c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005836:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8005838:	17c0      	asrs	r0, r0, #31
 800583a:	4018      	ands	r0, r3
 800583c:	4b13      	ldr	r3, [pc, #76]	; (800588c <HAL_RCC_GetSysClockFreq+0x70>)
 800583e:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8005840:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005842:	4813      	ldr	r0, [pc, #76]	; (8005890 <HAL_RCC_GetSysClockFreq+0x74>)
 8005844:	028a      	lsls	r2, r1, #10
 8005846:	0f12      	lsrs	r2, r2, #28
 8005848:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800584a:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800584c:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800584e:	0f89      	lsrs	r1, r1, #30
 8005850:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005852:	03c0      	lsls	r0, r0, #15
 8005854:	d504      	bpl.n	8005860 <HAL_RCC_GetSysClockFreq+0x44>
        pllvco = (HSE_VALUE * pllm) / plld;
 8005856:	480f      	ldr	r0, [pc, #60]	; (8005894 <HAL_RCC_GetSysClockFreq+0x78>)
         pllvco = (HSI_VALUE * pllm) / plld;
 8005858:	4350      	muls	r0, r2
 800585a:	f7fa fc73 	bl	8000144 <__udivsi3>
 800585e:	e7ef      	b.n	8005840 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	06db      	lsls	r3, r3, #27
 8005864:	d501      	bpl.n	800586a <HAL_RCC_GetSysClockFreq+0x4e>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8005866:	480c      	ldr	r0, [pc, #48]	; (8005898 <HAL_RCC_GetSysClockFreq+0x7c>)
 8005868:	e7f6      	b.n	8005858 <HAL_RCC_GetSysClockFreq+0x3c>
         pllvco = (HSI_VALUE * pllm) / plld;
 800586a:	4808      	ldr	r0, [pc, #32]	; (800588c <HAL_RCC_GetSysClockFreq+0x70>)
 800586c:	e7f4      	b.n	8005858 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800586e:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005870:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005872:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005874:	041b      	lsls	r3, r3, #16
 8005876:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005878:	3301      	adds	r3, #1
 800587a:	4098      	lsls	r0, r3
  return sysclockfreq;
 800587c:	e7e0      	b.n	8005840 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 800587e:	4805      	ldr	r0, [pc, #20]	; (8005894 <HAL_RCC_GetSysClockFreq+0x78>)
 8005880:	e7de      	b.n	8005840 <HAL_RCC_GetSysClockFreq+0x24>
 8005882:	46c0      	nop			; (mov r8, r8)
 8005884:	40021000 	.word	0x40021000
 8005888:	ff48e500 	.word	0xff48e500
 800588c:	00f42400 	.word	0x00f42400
 8005890:	080108b8 	.word	0x080108b8
 8005894:	007a1200 	.word	0x007a1200
 8005898:	003d0900 	.word	0x003d0900

0800589c <HAL_RCC_OscConfig>:
{
 800589c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800589e:	0005      	movs	r5, r0
 80058a0:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 80058a2:	2800      	cmp	r0, #0
 80058a4:	d058      	beq.n	8005958 <HAL_RCC_OscConfig+0xbc>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058a6:	230c      	movs	r3, #12
 80058a8:	4cb7      	ldr	r4, [pc, #732]	; (8005b88 <HAL_RCC_OscConfig+0x2ec>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058aa:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058ac:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058ae:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058b0:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058b2:	2380      	movs	r3, #128	; 0x80
 80058b4:	025b      	lsls	r3, r3, #9
 80058b6:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058b8:	07d2      	lsls	r2, r2, #31
 80058ba:	d441      	bmi.n	8005940 <HAL_RCC_OscConfig+0xa4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058bc:	682b      	ldr	r3, [r5, #0]
 80058be:	079b      	lsls	r3, r3, #30
 80058c0:	d500      	bpl.n	80058c4 <HAL_RCC_OscConfig+0x28>
 80058c2:	e08a      	b.n	80059da <HAL_RCC_OscConfig+0x13e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80058c4:	682b      	ldr	r3, [r5, #0]
 80058c6:	06db      	lsls	r3, r3, #27
 80058c8:	d528      	bpl.n	800591c <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80058ca:	2e00      	cmp	r6, #0
 80058cc:	d000      	beq.n	80058d0 <HAL_RCC_OscConfig+0x34>
 80058ce:	e0e2      	b.n	8005a96 <HAL_RCC_OscConfig+0x1fa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80058d0:	6823      	ldr	r3, [r4, #0]
 80058d2:	059b      	lsls	r3, r3, #22
 80058d4:	d502      	bpl.n	80058dc <HAL_RCC_OscConfig+0x40>
 80058d6:	69eb      	ldr	r3, [r5, #28]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d03d      	beq.n	8005958 <HAL_RCC_OscConfig+0xbc>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058dc:	6862      	ldr	r2, [r4, #4]
 80058de:	49ab      	ldr	r1, [pc, #684]	; (8005b8c <HAL_RCC_OscConfig+0x2f0>)
 80058e0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80058e2:	400a      	ands	r2, r1
 80058e4:	431a      	orrs	r2, r3
 80058e6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058e8:	6861      	ldr	r1, [r4, #4]
 80058ea:	6a2a      	ldr	r2, [r5, #32]
 80058ec:	0209      	lsls	r1, r1, #8
 80058ee:	0a09      	lsrs	r1, r1, #8
 80058f0:	0612      	lsls	r2, r2, #24
 80058f2:	430a      	orrs	r2, r1
 80058f4:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80058f6:	2280      	movs	r2, #128	; 0x80
 80058f8:	0b5b      	lsrs	r3, r3, #13
 80058fa:	3301      	adds	r3, #1
 80058fc:	0212      	lsls	r2, r2, #8
 80058fe:	409a      	lsls	r2, r3
 8005900:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005902:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8005904:	2003      	movs	r0, #3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005906:	060a      	lsls	r2, r1, #24
 8005908:	49a1      	ldr	r1, [pc, #644]	; (8005b90 <HAL_RCC_OscConfig+0x2f4>)
 800590a:	0f12      	lsrs	r2, r2, #28
 800590c:	5c8a      	ldrb	r2, [r1, r2]
 800590e:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005910:	4aa0      	ldr	r2, [pc, #640]	; (8005b94 <HAL_RCC_OscConfig+0x2f8>)
 8005912:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8005914:	f009 fd32 	bl	800f37c <HAL_InitTick>
        if(status != HAL_OK)
 8005918:	2800      	cmp	r0, #0
 800591a:	d134      	bne.n	8005986 <HAL_RCC_OscConfig+0xea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	071b      	lsls	r3, r3, #28
 8005920:	d500      	bpl.n	8005924 <HAL_RCC_OscConfig+0x88>
 8005922:	e0ef      	b.n	8005b04 <HAL_RCC_OscConfig+0x268>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005924:	682b      	ldr	r3, [r5, #0]
 8005926:	075b      	lsls	r3, r3, #29
 8005928:	d500      	bpl.n	800592c <HAL_RCC_OscConfig+0x90>
 800592a:	e111      	b.n	8005b50 <HAL_RCC_OscConfig+0x2b4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800592c:	682b      	ldr	r3, [r5, #0]
 800592e:	069b      	lsls	r3, r3, #26
 8005930:	d500      	bpl.n	8005934 <HAL_RCC_OscConfig+0x98>
 8005932:	e196      	b.n	8005c62 <HAL_RCC_OscConfig+0x3c6>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005934:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005936:	2b00      	cmp	r3, #0
 8005938:	d000      	beq.n	800593c <HAL_RCC_OscConfig+0xa0>
 800593a:	e1c5      	b.n	8005cc8 <HAL_RCC_OscConfig+0x42c>
  return HAL_OK;
 800593c:	2000      	movs	r0, #0
 800593e:	e022      	b.n	8005986 <HAL_RCC_OscConfig+0xea>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005940:	2e08      	cmp	r6, #8
 8005942:	d003      	beq.n	800594c <HAL_RCC_OscConfig+0xb0>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005944:	2e0c      	cmp	r6, #12
 8005946:	d109      	bne.n	800595c <HAL_RCC_OscConfig+0xc0>
 8005948:	2f00      	cmp	r7, #0
 800594a:	d007      	beq.n	800595c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800594c:	6823      	ldr	r3, [r4, #0]
 800594e:	039b      	lsls	r3, r3, #14
 8005950:	d5b4      	bpl.n	80058bc <HAL_RCC_OscConfig+0x20>
 8005952:	686b      	ldr	r3, [r5, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1b1      	bne.n	80058bc <HAL_RCC_OscConfig+0x20>
          return HAL_ERROR;
 8005958:	2001      	movs	r0, #1
 800595a:	e014      	b.n	8005986 <HAL_RCC_OscConfig+0xea>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800595c:	686a      	ldr	r2, [r5, #4]
 800595e:	429a      	cmp	r2, r3
 8005960:	d113      	bne.n	800598a <HAL_RCC_OscConfig+0xee>
 8005962:	6822      	ldr	r2, [r4, #0]
 8005964:	4313      	orrs	r3, r2
 8005966:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005968:	f7ff f9e0 	bl	8004d2c <HAL_GetTick>
 800596c:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800596e:	2280      	movs	r2, #128	; 0x80
 8005970:	6823      	ldr	r3, [r4, #0]
 8005972:	0292      	lsls	r2, r2, #10
 8005974:	4213      	tst	r3, r2
 8005976:	d1a1      	bne.n	80058bc <HAL_RCC_OscConfig+0x20>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005978:	f7ff f9d8 	bl	8004d2c <HAL_GetTick>
 800597c:	9b01      	ldr	r3, [sp, #4]
 800597e:	1ac0      	subs	r0, r0, r3
 8005980:	2864      	cmp	r0, #100	; 0x64
 8005982:	d9f4      	bls.n	800596e <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 8005984:	2003      	movs	r0, #3
}
 8005986:	b007      	add	sp, #28
 8005988:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800598a:	21a0      	movs	r1, #160	; 0xa0
 800598c:	02c9      	lsls	r1, r1, #11
 800598e:	428a      	cmp	r2, r1
 8005990:	d105      	bne.n	800599e <HAL_RCC_OscConfig+0x102>
 8005992:	2280      	movs	r2, #128	; 0x80
 8005994:	6821      	ldr	r1, [r4, #0]
 8005996:	02d2      	lsls	r2, r2, #11
 8005998:	430a      	orrs	r2, r1
 800599a:	6022      	str	r2, [r4, #0]
 800599c:	e7e1      	b.n	8005962 <HAL_RCC_OscConfig+0xc6>
 800599e:	6821      	ldr	r1, [r4, #0]
 80059a0:	487d      	ldr	r0, [pc, #500]	; (8005b98 <HAL_RCC_OscConfig+0x2fc>)
 80059a2:	4001      	ands	r1, r0
 80059a4:	6021      	str	r1, [r4, #0]
 80059a6:	6821      	ldr	r1, [r4, #0]
 80059a8:	400b      	ands	r3, r1
 80059aa:	9305      	str	r3, [sp, #20]
 80059ac:	9b05      	ldr	r3, [sp, #20]
 80059ae:	497b      	ldr	r1, [pc, #492]	; (8005b9c <HAL_RCC_OscConfig+0x300>)
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	400b      	ands	r3, r1
 80059b4:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059b6:	2a00      	cmp	r2, #0
 80059b8:	d1d6      	bne.n	8005968 <HAL_RCC_OscConfig+0xcc>
        tickstart = HAL_GetTick();
 80059ba:	f7ff f9b7 	bl	8004d2c <HAL_GetTick>
 80059be:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80059c0:	2280      	movs	r2, #128	; 0x80
 80059c2:	6823      	ldr	r3, [r4, #0]
 80059c4:	0292      	lsls	r2, r2, #10
 80059c6:	4213      	tst	r3, r2
 80059c8:	d100      	bne.n	80059cc <HAL_RCC_OscConfig+0x130>
 80059ca:	e777      	b.n	80058bc <HAL_RCC_OscConfig+0x20>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059cc:	f7ff f9ae 	bl	8004d2c <HAL_GetTick>
 80059d0:	9b01      	ldr	r3, [sp, #4]
 80059d2:	1ac0      	subs	r0, r0, r3
 80059d4:	2864      	cmp	r0, #100	; 0x64
 80059d6:	d9f3      	bls.n	80059c0 <HAL_RCC_OscConfig+0x124>
 80059d8:	e7d4      	b.n	8005984 <HAL_RCC_OscConfig+0xe8>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80059da:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 80059dc:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80059de:	4213      	tst	r3, r2
 80059e0:	d003      	beq.n	80059ea <HAL_RCC_OscConfig+0x14e>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80059e2:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 80059e4:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80059e6:	4311      	orrs	r1, r2
 80059e8:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059ea:	2e04      	cmp	r6, #4
 80059ec:	d003      	beq.n	80059f6 <HAL_RCC_OscConfig+0x15a>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80059ee:	2e0c      	cmp	r6, #12
 80059f0:	d123      	bne.n	8005a3a <HAL_RCC_OscConfig+0x19e>
 80059f2:	2f00      	cmp	r7, #0
 80059f4:	d121      	bne.n	8005a3a <HAL_RCC_OscConfig+0x19e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80059f6:	6822      	ldr	r2, [r4, #0]
 80059f8:	0752      	lsls	r2, r2, #29
 80059fa:	d501      	bpl.n	8005a00 <HAL_RCC_OscConfig+0x164>
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d0ab      	beq.n	8005958 <HAL_RCC_OscConfig+0xbc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a00:	6861      	ldr	r1, [r4, #4]
 8005a02:	692a      	ldr	r2, [r5, #16]
 8005a04:	4866      	ldr	r0, [pc, #408]	; (8005ba0 <HAL_RCC_OscConfig+0x304>)
 8005a06:	0212      	lsls	r2, r2, #8
 8005a08:	4001      	ands	r1, r0
 8005a0a:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005a0c:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a0e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005a10:	6822      	ldr	r2, [r4, #0]
 8005a12:	438a      	bics	r2, r1
 8005a14:	4313      	orrs	r3, r2
 8005a16:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a18:	f7ff ff00 	bl	800581c <HAL_RCC_GetSysClockFreq>
 8005a1c:	68e3      	ldr	r3, [r4, #12]
 8005a1e:	4a5c      	ldr	r2, [pc, #368]	; (8005b90 <HAL_RCC_OscConfig+0x2f4>)
 8005a20:	061b      	lsls	r3, r3, #24
 8005a22:	0f1b      	lsrs	r3, r3, #28
 8005a24:	5cd3      	ldrb	r3, [r2, r3]
 8005a26:	40d8      	lsrs	r0, r3
 8005a28:	4b5a      	ldr	r3, [pc, #360]	; (8005b94 <HAL_RCC_OscConfig+0x2f8>)
 8005a2a:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8005a2c:	2003      	movs	r0, #3
 8005a2e:	f009 fca5 	bl	800f37c <HAL_InitTick>
      if(status != HAL_OK)
 8005a32:	2800      	cmp	r0, #0
 8005a34:	d100      	bne.n	8005a38 <HAL_RCC_OscConfig+0x19c>
 8005a36:	e745      	b.n	80058c4 <HAL_RCC_OscConfig+0x28>
 8005a38:	e7a5      	b.n	8005986 <HAL_RCC_OscConfig+0xea>
      if(hsi_state != RCC_HSI_OFF)
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d019      	beq.n	8005a72 <HAL_RCC_OscConfig+0x1d6>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005a3e:	2109      	movs	r1, #9
 8005a40:	6822      	ldr	r2, [r4, #0]
 8005a42:	438a      	bics	r2, r1
 8005a44:	4313      	orrs	r3, r2
 8005a46:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005a48:	f7ff f970 	bl	8004d2c <HAL_GetTick>
 8005a4c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a4e:	2204      	movs	r2, #4
 8005a50:	6823      	ldr	r3, [r4, #0]
 8005a52:	4213      	tst	r3, r2
 8005a54:	d007      	beq.n	8005a66 <HAL_RCC_OscConfig+0x1ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a56:	6862      	ldr	r2, [r4, #4]
 8005a58:	692b      	ldr	r3, [r5, #16]
 8005a5a:	4951      	ldr	r1, [pc, #324]	; (8005ba0 <HAL_RCC_OscConfig+0x304>)
 8005a5c:	021b      	lsls	r3, r3, #8
 8005a5e:	400a      	ands	r2, r1
 8005a60:	4313      	orrs	r3, r2
 8005a62:	6063      	str	r3, [r4, #4]
 8005a64:	e72e      	b.n	80058c4 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a66:	f7ff f961 	bl	8004d2c <HAL_GetTick>
 8005a6a:	1bc0      	subs	r0, r0, r7
 8005a6c:	2802      	cmp	r0, #2
 8005a6e:	d9ee      	bls.n	8005a4e <HAL_RCC_OscConfig+0x1b2>
 8005a70:	e788      	b.n	8005984 <HAL_RCC_OscConfig+0xe8>
        __HAL_RCC_HSI_DISABLE();
 8005a72:	2201      	movs	r2, #1
 8005a74:	6823      	ldr	r3, [r4, #0]
 8005a76:	4393      	bics	r3, r2
 8005a78:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005a7a:	f7ff f957 	bl	8004d2c <HAL_GetTick>
 8005a7e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a80:	2204      	movs	r2, #4
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	4213      	tst	r3, r2
 8005a86:	d100      	bne.n	8005a8a <HAL_RCC_OscConfig+0x1ee>
 8005a88:	e71c      	b.n	80058c4 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a8a:	f7ff f94f 	bl	8004d2c <HAL_GetTick>
 8005a8e:	1bc0      	subs	r0, r0, r7
 8005a90:	2802      	cmp	r0, #2
 8005a92:	d9f5      	bls.n	8005a80 <HAL_RCC_OscConfig+0x1e4>
 8005a94:	e776      	b.n	8005984 <HAL_RCC_OscConfig+0xe8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005a96:	69eb      	ldr	r3, [r5, #28]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d020      	beq.n	8005ade <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_MSI_ENABLE();
 8005a9c:	2380      	movs	r3, #128	; 0x80
 8005a9e:	6822      	ldr	r2, [r4, #0]
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005aa6:	f7ff f941 	bl	8004d2c <HAL_GetTick>
 8005aaa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005aac:	2280      	movs	r2, #128	; 0x80
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	0092      	lsls	r2, r2, #2
 8005ab2:	4213      	tst	r3, r2
 8005ab4:	d00d      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x236>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ab6:	6863      	ldr	r3, [r4, #4]
 8005ab8:	4a34      	ldr	r2, [pc, #208]	; (8005b8c <HAL_RCC_OscConfig+0x2f0>)
 8005aba:	4013      	ands	r3, r2
 8005abc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ac2:	6862      	ldr	r2, [r4, #4]
 8005ac4:	6a2b      	ldr	r3, [r5, #32]
 8005ac6:	0212      	lsls	r2, r2, #8
 8005ac8:	061b      	lsls	r3, r3, #24
 8005aca:	0a12      	lsrs	r2, r2, #8
 8005acc:	4313      	orrs	r3, r2
 8005ace:	6063      	str	r3, [r4, #4]
 8005ad0:	e724      	b.n	800591c <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ad2:	f7ff f92b 	bl	8004d2c <HAL_GetTick>
 8005ad6:	1bc0      	subs	r0, r0, r7
 8005ad8:	2802      	cmp	r0, #2
 8005ada:	d9e7      	bls.n	8005aac <HAL_RCC_OscConfig+0x210>
 8005adc:	e752      	b.n	8005984 <HAL_RCC_OscConfig+0xe8>
        __HAL_RCC_MSI_DISABLE();
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	4a30      	ldr	r2, [pc, #192]	; (8005ba4 <HAL_RCC_OscConfig+0x308>)
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005ae6:	f7ff f921 	bl	8004d2c <HAL_GetTick>
 8005aea:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005aec:	2280      	movs	r2, #128	; 0x80
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	0092      	lsls	r2, r2, #2
 8005af2:	4213      	tst	r3, r2
 8005af4:	d100      	bne.n	8005af8 <HAL_RCC_OscConfig+0x25c>
 8005af6:	e711      	b.n	800591c <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005af8:	f7ff f918 	bl	8004d2c <HAL_GetTick>
 8005afc:	1bc0      	subs	r0, r0, r7
 8005afe:	2802      	cmp	r0, #2
 8005b00:	d9f4      	bls.n	8005aec <HAL_RCC_OscConfig+0x250>
 8005b02:	e73f      	b.n	8005984 <HAL_RCC_OscConfig+0xe8>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b04:	696a      	ldr	r2, [r5, #20]
 8005b06:	2301      	movs	r3, #1
 8005b08:	2a00      	cmp	r2, #0
 8005b0a:	d010      	beq.n	8005b2e <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_ENABLE();
 8005b0c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8005b12:	f7ff f90b 	bl	8004d2c <HAL_GetTick>
 8005b16:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b18:	2202      	movs	r2, #2
 8005b1a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005b1c:	4213      	tst	r3, r2
 8005b1e:	d000      	beq.n	8005b22 <HAL_RCC_OscConfig+0x286>
 8005b20:	e700      	b.n	8005924 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b22:	f7ff f903 	bl	8004d2c <HAL_GetTick>
 8005b26:	1bc0      	subs	r0, r0, r7
 8005b28:	2802      	cmp	r0, #2
 8005b2a:	d9f5      	bls.n	8005b18 <HAL_RCC_OscConfig+0x27c>
 8005b2c:	e72a      	b.n	8005984 <HAL_RCC_OscConfig+0xe8>
      __HAL_RCC_LSI_DISABLE();
 8005b2e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005b30:	439a      	bics	r2, r3
 8005b32:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8005b34:	f7ff f8fa 	bl	8004d2c <HAL_GetTick>
 8005b38:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005b3e:	4213      	tst	r3, r2
 8005b40:	d100      	bne.n	8005b44 <HAL_RCC_OscConfig+0x2a8>
 8005b42:	e6ef      	b.n	8005924 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b44:	f7ff f8f2 	bl	8004d2c <HAL_GetTick>
 8005b48:	1bc0      	subs	r0, r0, r7
 8005b4a:	2802      	cmp	r0, #2
 8005b4c:	d9f5      	bls.n	8005b3a <HAL_RCC_OscConfig+0x29e>
 8005b4e:	e719      	b.n	8005984 <HAL_RCC_OscConfig+0xe8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b50:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8005b52:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b54:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005b56:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8005b58:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b5a:	421a      	tst	r2, r3
 8005b5c:	d104      	bne.n	8005b68 <HAL_RCC_OscConfig+0x2cc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b5e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005b60:	4313      	orrs	r3, r2
 8005b62:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8005b64:	2301      	movs	r3, #1
 8005b66:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b68:	2280      	movs	r2, #128	; 0x80
 8005b6a:	4f0f      	ldr	r7, [pc, #60]	; (8005ba8 <HAL_RCC_OscConfig+0x30c>)
 8005b6c:	0052      	lsls	r2, r2, #1
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	4213      	tst	r3, r2
 8005b72:	d01b      	beq.n	8005bac <HAL_RCC_OscConfig+0x310>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b74:	2280      	movs	r2, #128	; 0x80
 8005b76:	68ab      	ldr	r3, [r5, #8]
 8005b78:	0052      	lsls	r2, r2, #1
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d12c      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x33c>
 8005b7e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005b80:	4313      	orrs	r3, r2
 8005b82:	6523      	str	r3, [r4, #80]	; 0x50
 8005b84:	e04d      	b.n	8005c22 <HAL_RCC_OscConfig+0x386>
 8005b86:	46c0      	nop			; (mov r8, r8)
 8005b88:	40021000 	.word	0x40021000
 8005b8c:	ffff1fff 	.word	0xffff1fff
 8005b90:	080108c1 	.word	0x080108c1
 8005b94:	20000044 	.word	0x20000044
 8005b98:	fffeffff 	.word	0xfffeffff
 8005b9c:	fffbffff 	.word	0xfffbffff
 8005ba0:	ffffe0ff 	.word	0xffffe0ff
 8005ba4:	fffffeff 	.word	0xfffffeff
 8005ba8:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bac:	2280      	movs	r2, #128	; 0x80
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	0052      	lsls	r2, r2, #1
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8005bb6:	f7ff f8b9 	bl	8004d2c <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bba:	2380      	movs	r3, #128	; 0x80
 8005bbc:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8005bbe:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bc0:	9303      	str	r3, [sp, #12]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	9a03      	ldr	r2, [sp, #12]
 8005bc6:	4213      	tst	r3, r2
 8005bc8:	d1d4      	bne.n	8005b74 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bca:	f7ff f8af 	bl	8004d2c <HAL_GetTick>
 8005bce:	9b02      	ldr	r3, [sp, #8]
 8005bd0:	1ac0      	subs	r0, r0, r3
 8005bd2:	2864      	cmp	r0, #100	; 0x64
 8005bd4:	d9f5      	bls.n	8005bc2 <HAL_RCC_OscConfig+0x326>
 8005bd6:	e6d5      	b.n	8005984 <HAL_RCC_OscConfig+0xe8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d116      	bne.n	8005c0a <HAL_RCC_OscConfig+0x36e>
 8005bdc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005bde:	4a6b      	ldr	r2, [pc, #428]	; (8005d8c <HAL_RCC_OscConfig+0x4f0>)
 8005be0:	4013      	ands	r3, r2
 8005be2:	6523      	str	r3, [r4, #80]	; 0x50
 8005be4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005be6:	4a6a      	ldr	r2, [pc, #424]	; (8005d90 <HAL_RCC_OscConfig+0x4f4>)
 8005be8:	4013      	ands	r3, r2
 8005bea:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8005bec:	f7ff f89e 	bl	8004d2c <HAL_GetTick>
 8005bf0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005bf2:	2280      	movs	r2, #128	; 0x80
 8005bf4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005bf6:	0092      	lsls	r2, r2, #2
 8005bf8:	4213      	tst	r3, r2
 8005bfa:	d01a      	beq.n	8005c32 <HAL_RCC_OscConfig+0x396>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bfc:	f7ff f896 	bl	8004d2c <HAL_GetTick>
 8005c00:	4b64      	ldr	r3, [pc, #400]	; (8005d94 <HAL_RCC_OscConfig+0x4f8>)
 8005c02:	1bc0      	subs	r0, r0, r7
 8005c04:	4298      	cmp	r0, r3
 8005c06:	d9f4      	bls.n	8005bf2 <HAL_RCC_OscConfig+0x356>
 8005c08:	e6bc      	b.n	8005984 <HAL_RCC_OscConfig+0xe8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c0a:	21a0      	movs	r1, #160	; 0xa0
 8005c0c:	00c9      	lsls	r1, r1, #3
 8005c0e:	428b      	cmp	r3, r1
 8005c10:	d118      	bne.n	8005c44 <HAL_RCC_OscConfig+0x3a8>
 8005c12:	2380      	movs	r3, #128	; 0x80
 8005c14:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	430b      	orrs	r3, r1
 8005c1a:	6523      	str	r3, [r4, #80]	; 0x50
 8005c1c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8005c22:	f7ff f883 	bl	8004d2c <HAL_GetTick>
 8005c26:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c28:	2280      	movs	r2, #128	; 0x80
 8005c2a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005c2c:	0092      	lsls	r2, r2, #2
 8005c2e:	4213      	tst	r3, r2
 8005c30:	d010      	beq.n	8005c54 <HAL_RCC_OscConfig+0x3b8>
    if(pwrclkchanged == SET)
 8005c32:	9b01      	ldr	r3, [sp, #4]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d000      	beq.n	8005c3a <HAL_RCC_OscConfig+0x39e>
 8005c38:	e678      	b.n	800592c <HAL_RCC_OscConfig+0x90>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c3c:	4a56      	ldr	r2, [pc, #344]	; (8005d98 <HAL_RCC_OscConfig+0x4fc>)
 8005c3e:	4013      	ands	r3, r2
 8005c40:	63a3      	str	r3, [r4, #56]	; 0x38
 8005c42:	e673      	b.n	800592c <HAL_RCC_OscConfig+0x90>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c44:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005c46:	4a51      	ldr	r2, [pc, #324]	; (8005d8c <HAL_RCC_OscConfig+0x4f0>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	6523      	str	r3, [r4, #80]	; 0x50
 8005c4c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005c4e:	4a50      	ldr	r2, [pc, #320]	; (8005d90 <HAL_RCC_OscConfig+0x4f4>)
 8005c50:	4013      	ands	r3, r2
 8005c52:	e796      	b.n	8005b82 <HAL_RCC_OscConfig+0x2e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c54:	f7ff f86a 	bl	8004d2c <HAL_GetTick>
 8005c58:	4b4e      	ldr	r3, [pc, #312]	; (8005d94 <HAL_RCC_OscConfig+0x4f8>)
 8005c5a:	1bc0      	subs	r0, r0, r7
 8005c5c:	4298      	cmp	r0, r3
 8005c5e:	d9e3      	bls.n	8005c28 <HAL_RCC_OscConfig+0x38c>
 8005c60:	e690      	b.n	8005984 <HAL_RCC_OscConfig+0xe8>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c62:	69a9      	ldr	r1, [r5, #24]
 8005c64:	2301      	movs	r3, #1
 8005c66:	4a4d      	ldr	r2, [pc, #308]	; (8005d9c <HAL_RCC_OscConfig+0x500>)
 8005c68:	2900      	cmp	r1, #0
 8005c6a:	d018      	beq.n	8005c9e <HAL_RCC_OscConfig+0x402>
        __HAL_RCC_HSI48_ENABLE();
 8005c6c:	68a1      	ldr	r1, [r4, #8]
 8005c6e:	4319      	orrs	r1, r3
 8005c70:	60a1      	str	r1, [r4, #8]
 8005c72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c74:	430b      	orrs	r3, r1
 8005c76:	6363      	str	r3, [r4, #52]	; 0x34
 8005c78:	2380      	movs	r3, #128	; 0x80
 8005c7a:	6a11      	ldr	r1, [r2, #32]
 8005c7c:	019b      	lsls	r3, r3, #6
 8005c7e:	430b      	orrs	r3, r1
 8005c80:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8005c82:	f7ff f853 	bl	8004d2c <HAL_GetTick>
 8005c86:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c88:	2202      	movs	r2, #2
 8005c8a:	68a3      	ldr	r3, [r4, #8]
 8005c8c:	4213      	tst	r3, r2
 8005c8e:	d000      	beq.n	8005c92 <HAL_RCC_OscConfig+0x3f6>
 8005c90:	e650      	b.n	8005934 <HAL_RCC_OscConfig+0x98>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c92:	f7ff f84b 	bl	8004d2c <HAL_GetTick>
 8005c96:	1bc0      	subs	r0, r0, r7
 8005c98:	2802      	cmp	r0, #2
 8005c9a:	d9f5      	bls.n	8005c88 <HAL_RCC_OscConfig+0x3ec>
 8005c9c:	e672      	b.n	8005984 <HAL_RCC_OscConfig+0xe8>
        __HAL_RCC_HSI48_DISABLE();
 8005c9e:	68a1      	ldr	r1, [r4, #8]
 8005ca0:	4399      	bics	r1, r3
 8005ca2:	60a1      	str	r1, [r4, #8]
 8005ca4:	6a13      	ldr	r3, [r2, #32]
 8005ca6:	493e      	ldr	r1, [pc, #248]	; (8005da0 <HAL_RCC_OscConfig+0x504>)
 8005ca8:	400b      	ands	r3, r1
 8005caa:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8005cac:	f7ff f83e 	bl	8004d2c <HAL_GetTick>
 8005cb0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	68a3      	ldr	r3, [r4, #8]
 8005cb6:	4213      	tst	r3, r2
 8005cb8:	d100      	bne.n	8005cbc <HAL_RCC_OscConfig+0x420>
 8005cba:	e63b      	b.n	8005934 <HAL_RCC_OscConfig+0x98>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cbc:	f7ff f836 	bl	8004d2c <HAL_GetTick>
 8005cc0:	1bc0      	subs	r0, r0, r7
 8005cc2:	2802      	cmp	r0, #2
 8005cc4:	d9f5      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x416>
 8005cc6:	e65d      	b.n	8005984 <HAL_RCC_OscConfig+0xe8>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cc8:	2e0c      	cmp	r6, #12
 8005cca:	d043      	beq.n	8005d54 <HAL_RCC_OscConfig+0x4b8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ccc:	4a35      	ldr	r2, [pc, #212]	; (8005da4 <HAL_RCC_OscConfig+0x508>)
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d12e      	bne.n	8005d30 <HAL_RCC_OscConfig+0x494>
        __HAL_RCC_PLL_DISABLE();
 8005cd2:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005cd4:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005cda:	f7ff f827 	bl	8004d2c <HAL_GetTick>
 8005cde:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005ce0:	04bf      	lsls	r7, r7, #18
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	423b      	tst	r3, r7
 8005ce6:	d11d      	bne.n	8005d24 <HAL_RCC_OscConfig+0x488>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ce8:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8005cea:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005cec:	68e2      	ldr	r2, [r4, #12]
 8005cee:	430b      	orrs	r3, r1
 8005cf0:	492d      	ldr	r1, [pc, #180]	; (8005da8 <HAL_RCC_OscConfig+0x50c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005cf2:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cf4:	400a      	ands	r2, r1
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005cfa:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8005d00:	2380      	movs	r3, #128	; 0x80
 8005d02:	6822      	ldr	r2, [r4, #0]
 8005d04:	045b      	lsls	r3, r3, #17
 8005d06:	4313      	orrs	r3, r2
 8005d08:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005d0a:	f7ff f80f 	bl	8004d2c <HAL_GetTick>
 8005d0e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005d10:	6823      	ldr	r3, [r4, #0]
 8005d12:	4233      	tst	r3, r6
 8005d14:	d000      	beq.n	8005d18 <HAL_RCC_OscConfig+0x47c>
 8005d16:	e611      	b.n	800593c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d18:	f7ff f808 	bl	8004d2c <HAL_GetTick>
 8005d1c:	1b40      	subs	r0, r0, r5
 8005d1e:	2802      	cmp	r0, #2
 8005d20:	d9f6      	bls.n	8005d10 <HAL_RCC_OscConfig+0x474>
 8005d22:	e62f      	b.n	8005984 <HAL_RCC_OscConfig+0xe8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d24:	f7ff f802 	bl	8004d2c <HAL_GetTick>
 8005d28:	1b80      	subs	r0, r0, r6
 8005d2a:	2802      	cmp	r0, #2
 8005d2c:	d9d9      	bls.n	8005ce2 <HAL_RCC_OscConfig+0x446>
 8005d2e:	e629      	b.n	8005984 <HAL_RCC_OscConfig+0xe8>
        __HAL_RCC_PLL_DISABLE();
 8005d30:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005d32:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8005d34:	4013      	ands	r3, r2
 8005d36:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005d38:	f7fe fff8 	bl	8004d2c <HAL_GetTick>
 8005d3c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005d3e:	04b6      	lsls	r6, r6, #18
 8005d40:	6823      	ldr	r3, [r4, #0]
 8005d42:	4233      	tst	r3, r6
 8005d44:	d100      	bne.n	8005d48 <HAL_RCC_OscConfig+0x4ac>
 8005d46:	e5f9      	b.n	800593c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d48:	f7fe fff0 	bl	8004d2c <HAL_GetTick>
 8005d4c:	1b40      	subs	r0, r0, r5
 8005d4e:	2802      	cmp	r0, #2
 8005d50:	d9f6      	bls.n	8005d40 <HAL_RCC_OscConfig+0x4a4>
 8005d52:	e617      	b.n	8005984 <HAL_RCC_OscConfig+0xe8>
        return HAL_ERROR;
 8005d54:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d100      	bne.n	8005d5c <HAL_RCC_OscConfig+0x4c0>
 8005d5a:	e614      	b.n	8005986 <HAL_RCC_OscConfig+0xea>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d5c:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8005d5e:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d60:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8005d62:	0252      	lsls	r2, r2, #9
 8005d64:	401a      	ands	r2, r3
 8005d66:	428a      	cmp	r2, r1
 8005d68:	d000      	beq.n	8005d6c <HAL_RCC_OscConfig+0x4d0>
 8005d6a:	e5f5      	b.n	8005958 <HAL_RCC_OscConfig+0xbc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005d6c:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d6e:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005d70:	0392      	lsls	r2, r2, #14
 8005d72:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d74:	428a      	cmp	r2, r1
 8005d76:	d000      	beq.n	8005d7a <HAL_RCC_OscConfig+0x4de>
 8005d78:	e5ee      	b.n	8005958 <HAL_RCC_OscConfig+0xbc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005d7a:	22c0      	movs	r2, #192	; 0xc0
 8005d7c:	0412      	lsls	r2, r2, #16
 8005d7e:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005d80:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d100      	bne.n	8005d88 <HAL_RCC_OscConfig+0x4ec>
 8005d86:	e5d9      	b.n	800593c <HAL_RCC_OscConfig+0xa0>
 8005d88:	e5e6      	b.n	8005958 <HAL_RCC_OscConfig+0xbc>
 8005d8a:	46c0      	nop			; (mov r8, r8)
 8005d8c:	fffffeff 	.word	0xfffffeff
 8005d90:	fffffbff 	.word	0xfffffbff
 8005d94:	00001388 	.word	0x00001388
 8005d98:	efffffff 	.word	0xefffffff
 8005d9c:	40010000 	.word	0x40010000
 8005da0:	ffffdfff 	.word	0xffffdfff
 8005da4:	feffffff 	.word	0xfeffffff
 8005da8:	ff02ffff 	.word	0xff02ffff

08005dac <HAL_RCC_ClockConfig>:
{
 8005dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dae:	1e04      	subs	r4, r0, #0
 8005db0:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8005db2:	d101      	bne.n	8005db8 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8005db4:	2001      	movs	r0, #1
}
 8005db6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005db8:	2201      	movs	r2, #1
 8005dba:	4d51      	ldr	r5, [pc, #324]	; (8005f00 <HAL_RCC_ClockConfig+0x154>)
 8005dbc:	9901      	ldr	r1, [sp, #4]
 8005dbe:	682b      	ldr	r3, [r5, #0]
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	428b      	cmp	r3, r1
 8005dc4:	d327      	bcc.n	8005e16 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dc6:	6822      	ldr	r2, [r4, #0]
 8005dc8:	0793      	lsls	r3, r2, #30
 8005dca:	d42f      	bmi.n	8005e2c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dcc:	07d3      	lsls	r3, r2, #31
 8005dce:	d435      	bmi.n	8005e3c <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	682a      	ldr	r2, [r5, #0]
 8005dd4:	9901      	ldr	r1, [sp, #4]
 8005dd6:	401a      	ands	r2, r3
 8005dd8:	428a      	cmp	r2, r1
 8005dda:	d900      	bls.n	8005dde <HAL_RCC_ClockConfig+0x32>
 8005ddc:	e081      	b.n	8005ee2 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dde:	6822      	ldr	r2, [r4, #0]
 8005de0:	4d48      	ldr	r5, [pc, #288]	; (8005f04 <HAL_RCC_ClockConfig+0x158>)
 8005de2:	0753      	lsls	r3, r2, #29
 8005de4:	d500      	bpl.n	8005de8 <HAL_RCC_ClockConfig+0x3c>
 8005de6:	e084      	b.n	8005ef2 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005de8:	0713      	lsls	r3, r2, #28
 8005dea:	d506      	bpl.n	8005dfa <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005dec:	68ea      	ldr	r2, [r5, #12]
 8005dee:	6923      	ldr	r3, [r4, #16]
 8005df0:	4945      	ldr	r1, [pc, #276]	; (8005f08 <HAL_RCC_ClockConfig+0x15c>)
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	400a      	ands	r2, r1
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005dfa:	f7ff fd0f 	bl	800581c <HAL_RCC_GetSysClockFreq>
 8005dfe:	68eb      	ldr	r3, [r5, #12]
 8005e00:	4a42      	ldr	r2, [pc, #264]	; (8005f0c <HAL_RCC_ClockConfig+0x160>)
 8005e02:	061b      	lsls	r3, r3, #24
 8005e04:	0f1b      	lsrs	r3, r3, #28
 8005e06:	5cd3      	ldrb	r3, [r2, r3]
 8005e08:	40d8      	lsrs	r0, r3
 8005e0a:	4b41      	ldr	r3, [pc, #260]	; (8005f10 <HAL_RCC_ClockConfig+0x164>)
 8005e0c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8005e0e:	2003      	movs	r0, #3
 8005e10:	f009 fab4 	bl	800f37c <HAL_InitTick>
  if(status != HAL_OK)
 8005e14:	e7cf      	b.n	8005db6 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e16:	682b      	ldr	r3, [r5, #0]
 8005e18:	9901      	ldr	r1, [sp, #4]
 8005e1a:	4393      	bics	r3, r2
 8005e1c:	430b      	orrs	r3, r1
 8005e1e:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e20:	682b      	ldr	r3, [r5, #0]
 8005e22:	4013      	ands	r3, r2
 8005e24:	9a01      	ldr	r2, [sp, #4]
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d1c4      	bne.n	8005db4 <HAL_RCC_ClockConfig+0x8>
 8005e2a:	e7cc      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e2c:	20f0      	movs	r0, #240	; 0xf0
 8005e2e:	4935      	ldr	r1, [pc, #212]	; (8005f04 <HAL_RCC_ClockConfig+0x158>)
 8005e30:	68cb      	ldr	r3, [r1, #12]
 8005e32:	4383      	bics	r3, r0
 8005e34:	68a0      	ldr	r0, [r4, #8]
 8005e36:	4303      	orrs	r3, r0
 8005e38:	60cb      	str	r3, [r1, #12]
 8005e3a:	e7c7      	b.n	8005dcc <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e3c:	4e31      	ldr	r6, [pc, #196]	; (8005f04 <HAL_RCC_ClockConfig+0x158>)
 8005e3e:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e40:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e42:	2a02      	cmp	r2, #2
 8005e44:	d119      	bne.n	8005e7a <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e46:	039b      	lsls	r3, r3, #14
 8005e48:	d5b4      	bpl.n	8005db4 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e4a:	2103      	movs	r1, #3
 8005e4c:	68f3      	ldr	r3, [r6, #12]
 8005e4e:	438b      	bics	r3, r1
 8005e50:	4313      	orrs	r3, r2
 8005e52:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8005e54:	f7fe ff6a 	bl	8004d2c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e58:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8005e5a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d119      	bne.n	8005e94 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e60:	220c      	movs	r2, #12
 8005e62:	68f3      	ldr	r3, [r6, #12]
 8005e64:	4013      	ands	r3, r2
 8005e66:	2b08      	cmp	r3, #8
 8005e68:	d0b2      	beq.n	8005dd0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e6a:	f7fe ff5f 	bl	8004d2c <HAL_GetTick>
 8005e6e:	4b29      	ldr	r3, [pc, #164]	; (8005f14 <HAL_RCC_ClockConfig+0x168>)
 8005e70:	1bc0      	subs	r0, r0, r7
 8005e72:	4298      	cmp	r0, r3
 8005e74:	d9f4      	bls.n	8005e60 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8005e76:	2003      	movs	r0, #3
 8005e78:	e79d      	b.n	8005db6 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e7a:	2a03      	cmp	r2, #3
 8005e7c:	d102      	bne.n	8005e84 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e7e:	019b      	lsls	r3, r3, #6
 8005e80:	d4e3      	bmi.n	8005e4a <HAL_RCC_ClockConfig+0x9e>
 8005e82:	e797      	b.n	8005db4 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005e84:	2a01      	cmp	r2, #1
 8005e86:	d102      	bne.n	8005e8e <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e88:	075b      	lsls	r3, r3, #29
 8005e8a:	d4de      	bmi.n	8005e4a <HAL_RCC_ClockConfig+0x9e>
 8005e8c:	e792      	b.n	8005db4 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005e8e:	059b      	lsls	r3, r3, #22
 8005e90:	d4db      	bmi.n	8005e4a <HAL_RCC_ClockConfig+0x9e>
 8005e92:	e78f      	b.n	8005db4 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e94:	2b03      	cmp	r3, #3
 8005e96:	d10b      	bne.n	8005eb0 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e98:	220c      	movs	r2, #12
 8005e9a:	68f3      	ldr	r3, [r6, #12]
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d096      	beq.n	8005dd0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ea2:	f7fe ff43 	bl	8004d2c <HAL_GetTick>
 8005ea6:	4b1b      	ldr	r3, [pc, #108]	; (8005f14 <HAL_RCC_ClockConfig+0x168>)
 8005ea8:	1bc0      	subs	r0, r0, r7
 8005eaa:	4298      	cmp	r0, r3
 8005eac:	d9f4      	bls.n	8005e98 <HAL_RCC_ClockConfig+0xec>
 8005eae:	e7e2      	b.n	8005e76 <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d010      	beq.n	8005ed6 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005eb4:	220c      	movs	r2, #12
 8005eb6:	68f3      	ldr	r3, [r6, #12]
 8005eb8:	4213      	tst	r3, r2
 8005eba:	d089      	beq.n	8005dd0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ebc:	f7fe ff36 	bl	8004d2c <HAL_GetTick>
 8005ec0:	4b14      	ldr	r3, [pc, #80]	; (8005f14 <HAL_RCC_ClockConfig+0x168>)
 8005ec2:	1bc0      	subs	r0, r0, r7
 8005ec4:	4298      	cmp	r0, r3
 8005ec6:	d9f5      	bls.n	8005eb4 <HAL_RCC_ClockConfig+0x108>
 8005ec8:	e7d5      	b.n	8005e76 <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eca:	f7fe ff2f 	bl	8004d2c <HAL_GetTick>
 8005ece:	4b11      	ldr	r3, [pc, #68]	; (8005f14 <HAL_RCC_ClockConfig+0x168>)
 8005ed0:	1bc0      	subs	r0, r0, r7
 8005ed2:	4298      	cmp	r0, r3
 8005ed4:	d8cf      	bhi.n	8005e76 <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ed6:	220c      	movs	r2, #12
 8005ed8:	68f3      	ldr	r3, [r6, #12]
 8005eda:	4013      	ands	r3, r2
 8005edc:	2b04      	cmp	r3, #4
 8005ede:	d1f4      	bne.n	8005eca <HAL_RCC_ClockConfig+0x11e>
 8005ee0:	e776      	b.n	8005dd0 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ee2:	682a      	ldr	r2, [r5, #0]
 8005ee4:	439a      	bics	r2, r3
 8005ee6:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ee8:	682a      	ldr	r2, [r5, #0]
 8005eea:	421a      	tst	r2, r3
 8005eec:	d100      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0x144>
 8005eee:	e776      	b.n	8005dde <HAL_RCC_ClockConfig+0x32>
 8005ef0:	e760      	b.n	8005db4 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ef2:	68eb      	ldr	r3, [r5, #12]
 8005ef4:	4908      	ldr	r1, [pc, #32]	; (8005f18 <HAL_RCC_ClockConfig+0x16c>)
 8005ef6:	400b      	ands	r3, r1
 8005ef8:	68e1      	ldr	r1, [r4, #12]
 8005efa:	430b      	orrs	r3, r1
 8005efc:	60eb      	str	r3, [r5, #12]
 8005efe:	e773      	b.n	8005de8 <HAL_RCC_ClockConfig+0x3c>
 8005f00:	40022000 	.word	0x40022000
 8005f04:	40021000 	.word	0x40021000
 8005f08:	ffffc7ff 	.word	0xffffc7ff
 8005f0c:	080108c1 	.word	0x080108c1
 8005f10:	20000044 	.word	0x20000044
 8005f14:	00001388 	.word	0x00001388
 8005f18:	fffff8ff 	.word	0xfffff8ff

08005f1c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f1c:	4b04      	ldr	r3, [pc, #16]	; (8005f30 <HAL_RCC_GetPCLK1Freq+0x14>)
 8005f1e:	4a05      	ldr	r2, [pc, #20]	; (8005f34 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	055b      	lsls	r3, r3, #21
 8005f24:	0f5b      	lsrs	r3, r3, #29
 8005f26:	5cd3      	ldrb	r3, [r2, r3]
 8005f28:	4a03      	ldr	r2, [pc, #12]	; (8005f38 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005f2a:	6810      	ldr	r0, [r2, #0]
 8005f2c:	40d8      	lsrs	r0, r3
}
 8005f2e:	4770      	bx	lr
 8005f30:	40021000 	.word	0x40021000
 8005f34:	080108d1 	.word	0x080108d1
 8005f38:	20000044 	.word	0x20000044

08005f3c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f3c:	4b04      	ldr	r3, [pc, #16]	; (8005f50 <HAL_RCC_GetPCLK2Freq+0x14>)
 8005f3e:	4a05      	ldr	r2, [pc, #20]	; (8005f54 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	049b      	lsls	r3, r3, #18
 8005f44:	0f5b      	lsrs	r3, r3, #29
 8005f46:	5cd3      	ldrb	r3, [r2, r3]
 8005f48:	4a03      	ldr	r2, [pc, #12]	; (8005f58 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005f4a:	6810      	ldr	r0, [r2, #0]
 8005f4c:	40d8      	lsrs	r0, r3
}
 8005f4e:	4770      	bx	lr
 8005f50:	40021000 	.word	0x40021000
 8005f54:	080108d1 	.word	0x080108d1
 8005f58:	20000044 	.word	0x20000044

08005f5c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f5c:	6803      	ldr	r3, [r0, #0]
{
 8005f5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f60:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f62:	069b      	lsls	r3, r3, #26
 8005f64:	d53f      	bpl.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f66:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8005f68:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f6a:	4c60      	ldr	r4, [pc, #384]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005f6c:	055b      	lsls	r3, r3, #21
 8005f6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8005f70:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f72:	421a      	tst	r2, r3
 8005f74:	d104      	bne.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f76:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f80:	2780      	movs	r7, #128	; 0x80
 8005f82:	4e5b      	ldr	r6, [pc, #364]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8005f84:	007f      	lsls	r7, r7, #1
 8005f86:	6833      	ldr	r3, [r6, #0]
 8005f88:	423b      	tst	r3, r7
 8005f8a:	d06e      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005f8c:	686b      	ldr	r3, [r5, #4]
 8005f8e:	22c0      	movs	r2, #192	; 0xc0
 8005f90:	20c0      	movs	r0, #192	; 0xc0
 8005f92:	001e      	movs	r6, r3
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005f94:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005f96:	0292      	lsls	r2, r2, #10
 8005f98:	0380      	lsls	r0, r0, #14
 8005f9a:	0017      	movs	r7, r2
 8005f9c:	4016      	ands	r6, r2
 8005f9e:	4003      	ands	r3, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005fa0:	4001      	ands	r1, r0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005fa2:	428b      	cmp	r3, r1
 8005fa4:	d000      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8005fa6:	e071      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x130>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005fa8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005faa:	001a      	movs	r2, r3
 8005fac:	403a      	ands	r2, r7

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005fae:	423b      	tst	r3, r7
 8005fb0:	d000      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8005fb2:	e074      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x142>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fb4:	6869      	ldr	r1, [r5, #4]
 8005fb6:	23c0      	movs	r3, #192	; 0xc0
 8005fb8:	000a      	movs	r2, r1
 8005fba:	029b      	lsls	r3, r3, #10
 8005fbc:	401a      	ands	r2, r3
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d107      	bne.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005fc2:	6823      	ldr	r3, [r4, #0]
 8005fc4:	484b      	ldr	r0, [pc, #300]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8005fc6:	4003      	ands	r3, r0
 8005fc8:	20c0      	movs	r0, #192	; 0xc0
 8005fca:	0380      	lsls	r0, r0, #14
 8005fcc:	4001      	ands	r1, r0
 8005fce:	430b      	orrs	r3, r1
 8005fd0:	6023      	str	r3, [r4, #0]
 8005fd2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005fd4:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005fd6:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fd8:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d103      	bne.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005fe0:	4a45      	ldr	r2, [pc, #276]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fe6:	682b      	ldr	r3, [r5, #0]
 8005fe8:	07da      	lsls	r2, r3, #31
 8005fea:	d506      	bpl.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fec:	2003      	movs	r0, #3
 8005fee:	493f      	ldr	r1, [pc, #252]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005ff0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005ff2:	4382      	bics	r2, r0
 8005ff4:	68a8      	ldr	r0, [r5, #8]
 8005ff6:	4302      	orrs	r2, r0
 8005ff8:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ffa:	079a      	lsls	r2, r3, #30
 8005ffc:	d506      	bpl.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ffe:	200c      	movs	r0, #12
 8006000:	493a      	ldr	r1, [pc, #232]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006002:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8006004:	4382      	bics	r2, r0
 8006006:	68e8      	ldr	r0, [r5, #12]
 8006008:	4302      	orrs	r2, r0
 800600a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800600c:	075a      	lsls	r2, r3, #29
 800600e:	d506      	bpl.n	800601e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006010:	4936      	ldr	r1, [pc, #216]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006012:	483a      	ldr	r0, [pc, #232]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8006014:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8006016:	4002      	ands	r2, r0
 8006018:	6928      	ldr	r0, [r5, #16]
 800601a:	4302      	orrs	r2, r0
 800601c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800601e:	071a      	lsls	r2, r3, #28
 8006020:	d506      	bpl.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006022:	4932      	ldr	r1, [pc, #200]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006024:	4836      	ldr	r0, [pc, #216]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006026:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8006028:	4002      	ands	r2, r0
 800602a:	6968      	ldr	r0, [r5, #20]
 800602c:	4302      	orrs	r2, r0
 800602e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006030:	05da      	lsls	r2, r3, #23
 8006032:	d506      	bpl.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006034:	492d      	ldr	r1, [pc, #180]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006036:	4833      	ldr	r0, [pc, #204]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006038:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800603a:	4002      	ands	r2, r0
 800603c:	69a8      	ldr	r0, [r5, #24]
 800603e:	4302      	orrs	r2, r0
 8006040:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006042:	065a      	lsls	r2, r3, #25
 8006044:	d506      	bpl.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006046:	4929      	ldr	r1, [pc, #164]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006048:	482f      	ldr	r0, [pc, #188]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800604a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800604c:	4002      	ands	r2, r0
 800604e:	6a28      	ldr	r0, [r5, #32]
 8006050:	4302      	orrs	r2, r0
 8006052:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8006054:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006056:	061b      	lsls	r3, r3, #24
 8006058:	d517      	bpl.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x12e>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800605a:	4a24      	ldr	r2, [pc, #144]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800605c:	492b      	ldr	r1, [pc, #172]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800605e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8006060:	400b      	ands	r3, r1
 8006062:	69e9      	ldr	r1, [r5, #28]
 8006064:	430b      	orrs	r3, r1
 8006066:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006068:	e00f      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x12e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800606a:	6833      	ldr	r3, [r6, #0]
 800606c:	433b      	orrs	r3, r7
 800606e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006070:	f7fe fe5c 	bl	8004d2c <HAL_GetTick>
 8006074:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006076:	6833      	ldr	r3, [r6, #0]
 8006078:	423b      	tst	r3, r7
 800607a:	d187      	bne.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800607c:	f7fe fe56 	bl	8004d2c <HAL_GetTick>
 8006080:	9b01      	ldr	r3, [sp, #4]
 8006082:	1ac0      	subs	r0, r0, r3
 8006084:	2864      	cmp	r0, #100	; 0x64
 8006086:	d9f6      	bls.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          return HAL_TIMEOUT;
 8006088:	2003      	movs	r0, #3
}
 800608a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800608c:	4296      	cmp	r6, r2
 800608e:	d000      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006090:	e78a      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006092:	6823      	ldr	r3, [r4, #0]
          return HAL_ERROR;
 8006094:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006096:	039b      	lsls	r3, r3, #14
 8006098:	d400      	bmi.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x140>
 800609a:	e785      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 800609c:	e7f5      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x12e>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800609e:	42b2      	cmp	r2, r6
 80060a0:	d100      	bne.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80060a2:	e787      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x58>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80060a4:	682b      	ldr	r3, [r5, #0]
 80060a6:	069b      	lsls	r3, r3, #26
 80060a8:	d400      	bmi.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x150>
 80060aa:	e783      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_BACKUPRESET_FORCE();
 80060ac:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80060ae:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 80060b0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80060b2:	0312      	lsls	r2, r2, #12
 80060b4:	4302      	orrs	r2, r0
 80060b6:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060b8:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80060ba:	4b12      	ldr	r3, [pc, #72]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060bc:	4814      	ldr	r0, [pc, #80]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80060be:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060c0:	4002      	ands	r2, r0
 80060c2:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 80060c4:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80060c6:	05cb      	lsls	r3, r1, #23
 80060c8:	d400      	bmi.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x170>
 80060ca:	e773      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x58>
        tickstart = HAL_GetTick();
 80060cc:	f7fe fe2e 	bl	8004d2c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060d0:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80060d2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060d4:	00bf      	lsls	r7, r7, #2
 80060d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80060d8:	423b      	tst	r3, r7
 80060da:	d000      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x182>
 80060dc:	e76a      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x58>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060de:	f7fe fe25 	bl	8004d2c <HAL_GetTick>
 80060e2:	4b0c      	ldr	r3, [pc, #48]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060e4:	1b80      	subs	r0, r0, r6
 80060e6:	4298      	cmp	r0, r3
 80060e8:	d9f5      	bls.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80060ea:	e7cd      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 80060ec:	40021000 	.word	0x40021000
 80060f0:	40007000 	.word	0x40007000
 80060f4:	ffcfffff 	.word	0xffcfffff
 80060f8:	efffffff 	.word	0xefffffff
 80060fc:	fffff3ff 	.word	0xfffff3ff
 8006100:	ffffcfff 	.word	0xffffcfff
 8006104:	fffcffff 	.word	0xfffcffff
 8006108:	fbffffff 	.word	0xfbffffff
 800610c:	fff3ffff 	.word	0xfff3ffff
 8006110:	fff7ffff 	.word	0xfff7ffff
 8006114:	00001388 	.word	0x00001388

08006118 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800611a:	2502      	movs	r5, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800611c:	1c46      	adds	r6, r0, #1
 800611e:	7ff3      	ldrb	r3, [r6, #31]
{
 8006120:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8006122:	0028      	movs	r0, r5
 8006124:	2b01      	cmp	r3, #1
 8006126:	d025      	beq.n	8006174 <HAL_RTC_DeactivateAlarm+0x5c>
 8006128:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800612a:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 800612c:	1967      	adds	r7, r4, r5
  __HAL_LOCK(hrtc);
 800612e:	77f3      	strb	r3, [r6, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006130:	77fd      	strb	r5, [r7, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006132:	6823      	ldr	r3, [r4, #0]
 8006134:	625a      	str	r2, [r3, #36]	; 0x24
 8006136:	3a77      	subs	r2, #119	; 0x77
 8006138:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800613a:	32ad      	adds	r2, #173	; 0xad
 800613c:	4291      	cmp	r1, r2
 800613e:	d12a      	bne.n	8006196 <HAL_RTC_DeactivateAlarm+0x7e>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006140:	689a      	ldr	r2, [r3, #8]
 8006142:	4922      	ldr	r1, [pc, #136]	; (80061cc <HAL_RTC_DeactivateAlarm+0xb4>)
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);

    tickstart = HAL_GetTick();

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006144:	3d01      	subs	r5, #1
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006146:	400a      	ands	r2, r1
 8006148:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	4920      	ldr	r1, [pc, #128]	; (80061d0 <HAL_RTC_DeactivateAlarm+0xb8>)
 800614e:	400a      	ands	r2, r1
 8006150:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8006152:	f7fe fdeb 	bl	8004d2c <HAL_GetTick>
 8006156:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	001a      	movs	r2, r3
 800615e:	402a      	ands	r2, r5
 8006160:	9201      	str	r2, [sp, #4]
 8006162:	422b      	tst	r3, r5
 8006164:	d007      	beq.n	8006176 <HAL_RTC_DeactivateAlarm+0x5e>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006166:	22ff      	movs	r2, #255	; 0xff
 8006168:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800616a:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800616c:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800616e:	2301      	movs	r3, #1
 8006170:	77fb      	strb	r3, [r7, #31]
  __HAL_UNLOCK(hrtc);
 8006172:	77f0      	strb	r0, [r6, #31]

  return HAL_OK;
}
 8006174:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006176:	f7fe fdd9 	bl	8004d2c <HAL_GetTick>
 800617a:	9b00      	ldr	r3, [sp, #0]
 800617c:	1ac0      	subs	r0, r0, r3
 800617e:	23fa      	movs	r3, #250	; 0xfa
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4298      	cmp	r0, r3
 8006184:	d9e8      	bls.n	8006158 <HAL_RTC_DeactivateAlarm+0x40>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006186:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006188:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800618a:	6823      	ldr	r3, [r4, #0]
 800618c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800618e:	77f8      	strb	r0, [r7, #31]
        __HAL_UNLOCK(hrtc);
 8006190:	9b01      	ldr	r3, [sp, #4]
 8006192:	77f3      	strb	r3, [r6, #31]
        return HAL_TIMEOUT;
 8006194:	e7ee      	b.n	8006174 <HAL_RTC_DeactivateAlarm+0x5c>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006196:	689a      	ldr	r2, [r3, #8]
 8006198:	490e      	ldr	r1, [pc, #56]	; (80061d4 <HAL_RTC_DeactivateAlarm+0xbc>)
 800619a:	400a      	ands	r2, r1
 800619c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800619e:	689a      	ldr	r2, [r3, #8]
 80061a0:	490d      	ldr	r1, [pc, #52]	; (80061d8 <HAL_RTC_DeactivateAlarm+0xc0>)
 80061a2:	400a      	ands	r2, r1
 80061a4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80061a6:	f7fe fdc1 	bl	8004d2c <HAL_GetTick>
 80061aa:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80061ac:	6823      	ldr	r3, [r4, #0]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	001a      	movs	r2, r3
 80061b2:	402a      	ands	r2, r5
 80061b4:	9201      	str	r2, [sp, #4]
 80061b6:	422b      	tst	r3, r5
 80061b8:	d1d5      	bne.n	8006166 <HAL_RTC_DeactivateAlarm+0x4e>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061ba:	f7fe fdb7 	bl	8004d2c <HAL_GetTick>
 80061be:	9b00      	ldr	r3, [sp, #0]
 80061c0:	1ac0      	subs	r0, r0, r3
 80061c2:	23fa      	movs	r3, #250	; 0xfa
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4298      	cmp	r0, r3
 80061c8:	d9f0      	bls.n	80061ac <HAL_RTC_DeactivateAlarm+0x94>
 80061ca:	e7dc      	b.n	8006186 <HAL_RTC_DeactivateAlarm+0x6e>
 80061cc:	fffffeff 	.word	0xfffffeff
 80061d0:	ffffefff 	.word	0xffffefff
 80061d4:	fffffdff 	.word	0xfffffdff
 80061d8:	ffffdfff 	.word	0xffffdfff

080061dc <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80061dc:	21a0      	movs	r1, #160	; 0xa0
 80061de:	6802      	ldr	r2, [r0, #0]
{
 80061e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80061e2:	68d3      	ldr	r3, [r2, #12]
{
 80061e4:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80061e6:	438b      	bics	r3, r1
 80061e8:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80061ea:	f7fe fd9f 	bl	8004d2c <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061ee:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 80061f0:	0005      	movs	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80061f2:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061f4:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80061f6:	6823      	ldr	r3, [r4, #0]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	4233      	tst	r3, r6
 80061fc:	d001      	beq.n	8006202 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80061fe:	2000      	movs	r0, #0
}
 8006200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006202:	f7fe fd93 	bl	8004d2c <HAL_GetTick>
 8006206:	1b40      	subs	r0, r0, r5
 8006208:	42b8      	cmp	r0, r7
 800620a:	d9f4      	bls.n	80061f6 <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 800620c:	2003      	movs	r0, #3
 800620e:	e7f7      	b.n	8006200 <HAL_RTC_WaitForSynchro+0x24>

08006210 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006212:	2440      	movs	r4, #64	; 0x40
 8006214:	6803      	ldr	r3, [r0, #0]
{
 8006216:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006218:	68da      	ldr	r2, [r3, #12]
 800621a:	4222      	tst	r2, r4
 800621c:	d001      	beq.n	8006222 <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800621e:	2000      	movs	r0, #0
}
 8006220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006222:	2201      	movs	r2, #1
 8006224:	4252      	negs	r2, r2
 8006226:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8006228:	f7fe fd80 	bl	8004d2c <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800622c:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 800622e:	0006      	movs	r6, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006230:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006232:	682b      	ldr	r3, [r5, #0]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	4223      	tst	r3, r4
 8006238:	d1f1      	bne.n	800621e <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800623a:	f7fe fd77 	bl	8004d2c <HAL_GetTick>
 800623e:	1b80      	subs	r0, r0, r6
 8006240:	42b8      	cmp	r0, r7
 8006242:	d9f6      	bls.n	8006232 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8006244:	2003      	movs	r0, #3
 8006246:	e7eb      	b.n	8006220 <RTC_EnterInitMode+0x10>

08006248 <HAL_RTC_Init>:
{
 8006248:	b570      	push	{r4, r5, r6, lr}
 800624a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800624c:	2501      	movs	r5, #1
  if (hrtc == NULL)
 800624e:	2800      	cmp	r0, #0
 8006250:	d01a      	beq.n	8006288 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006252:	1c86      	adds	r6, r0, #2
 8006254:	7ff3      	ldrb	r3, [r6, #31]
 8006256:	b2da      	uxtb	r2, r3
 8006258:	2b00      	cmp	r3, #0
 800625a:	d103      	bne.n	8006264 <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 800625c:	1943      	adds	r3, r0, r5
 800625e:	77da      	strb	r2, [r3, #31]
    HAL_RTC_MspInit(hrtc);
 8006260:	f009 f8ae 	bl	800f3c0 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006264:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006266:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006268:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800626a:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800626c:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800626e:	625a      	str	r2, [r3, #36]	; 0x24
 8006270:	3a77      	subs	r2, #119	; 0x77
 8006272:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006274:	f7ff ffcc 	bl	8006210 <RTC_EnterInitMode>
 8006278:	6823      	ldr	r3, [r4, #0]
 800627a:	1e05      	subs	r5, r0, #0
 800627c:	d006      	beq.n	800628c <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800627e:	22ff      	movs	r2, #255	; 0xff
 8006280:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006282:	2304      	movs	r3, #4
 8006284:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 8006286:	2501      	movs	r5, #1
}
 8006288:	0028      	movs	r0, r5
 800628a:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800628c:	689a      	ldr	r2, [r3, #8]
 800628e:	491b      	ldr	r1, [pc, #108]	; (80062fc <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006290:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006292:	400a      	ands	r2, r1
 8006294:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006296:	6862      	ldr	r2, [r4, #4]
 8006298:	6899      	ldr	r1, [r3, #8]
 800629a:	4302      	orrs	r2, r0
 800629c:	69a0      	ldr	r0, [r4, #24]
 800629e:	4302      	orrs	r2, r0
 80062a0:	430a      	orrs	r2, r1
 80062a2:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80062a4:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80062a6:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80062a8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80062aa:	68a2      	ldr	r2, [r4, #8]
 80062ac:	6919      	ldr	r1, [r3, #16]
 80062ae:	0412      	lsls	r2, r2, #16
 80062b0:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80062b2:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80062b4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80062b6:	68da      	ldr	r2, [r3, #12]
 80062b8:	438a      	bics	r2, r1
 80062ba:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80062bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062be:	397d      	subs	r1, #125	; 0x7d
 80062c0:	438a      	bics	r2, r1
 80062c2:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80062c4:	69e2      	ldr	r2, [r4, #28]
 80062c6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80062c8:	4302      	orrs	r2, r0
 80062ca:	430a      	orrs	r2, r1
 80062cc:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	069b      	lsls	r3, r3, #26
 80062d2:	d40c      	bmi.n	80062ee <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062d4:	0020      	movs	r0, r4
 80062d6:	f7ff ff81 	bl	80061dc <HAL_RTC_WaitForSynchro>
 80062da:	2800      	cmp	r0, #0
 80062dc:	d007      	beq.n	80062ee <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062de:	22ff      	movs	r2, #255	; 0xff
 80062e0:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 80062e2:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062e4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80062e6:	2304      	movs	r3, #4
 80062e8:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 80062ea:	77e5      	strb	r5, [r4, #31]
 80062ec:	e7cb      	b.n	8006286 <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062ee:	22ff      	movs	r2, #255	; 0xff
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80062f4:	2301      	movs	r3, #1
 80062f6:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 80062f8:	e7c6      	b.n	8006288 <HAL_RTC_Init+0x40>
 80062fa:	46c0      	nop			; (mov r8, r8)
 80062fc:	ff8fffbf 	.word	0xff8fffbf

08006300 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8006300:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8006302:	2809      	cmp	r0, #9
 8006304:	d803      	bhi.n	800630e <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	4318      	orrs	r0, r3
 800630a:	b2c0      	uxtb	r0, r0
}
 800630c:	4770      	bx	lr
    Param -= 10U;
 800630e:	380a      	subs	r0, #10
    bcdhigh++;
 8006310:	3301      	adds	r3, #1
    Param -= 10U;
 8006312:	b2c0      	uxtb	r0, r0
 8006314:	e7f5      	b.n	8006302 <RTC_ByteToBcd2+0x2>
	...

08006318 <HAL_RTC_SetTime>:
{
 8006318:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800631a:	1c43      	adds	r3, r0, #1
{
 800631c:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 800631e:	9302      	str	r3, [sp, #8]
{
 8006320:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8006322:	7fd9      	ldrb	r1, [r3, #31]
 8006324:	2302      	movs	r3, #2
{
 8006326:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 8006328:	001f      	movs	r7, r3
 800632a:	2901      	cmp	r1, #1
 800632c:	d038      	beq.n	80063a0 <HAL_RTC_SetTime+0x88>
 800632e:	2101      	movs	r1, #1
 8006330:	1840      	adds	r0, r0, r1
 8006332:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006334:	18e9      	adds	r1, r5, r3
 8006336:	77cb      	strb	r3, [r1, #31]
  if (Format == RTC_FORMAT_BIN)
 8006338:	682b      	ldr	r3, [r5, #0]
 800633a:	7820      	ldrb	r0, [r4, #0]
 800633c:	9301      	str	r3, [sp, #4]
 800633e:	7866      	ldrb	r6, [r4, #1]
 8006340:	2340      	movs	r3, #64	; 0x40
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006342:	9103      	str	r1, [sp, #12]
  if (Format == RTC_FORMAT_BIN)
 8006344:	2a00      	cmp	r2, #0
 8006346:	d12e      	bne.n	80063a6 <HAL_RTC_SetTime+0x8e>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006348:	9a01      	ldr	r2, [sp, #4]
 800634a:	6892      	ldr	r2, [r2, #8]
 800634c:	0011      	movs	r1, r2
 800634e:	4019      	ands	r1, r3
 8006350:	421a      	tst	r2, r3
 8006352:	d100      	bne.n	8006356 <HAL_RTC_SetTime+0x3e>
      sTime->TimeFormat = 0x00U;
 8006354:	70e1      	strb	r1, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006356:	f7ff ffd3 	bl	8006300 <RTC_ByteToBcd2>
 800635a:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800635c:	0030      	movs	r0, r6
 800635e:	f7ff ffcf 	bl	8006300 <RTC_ByteToBcd2>
 8006362:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006364:	78a0      	ldrb	r0, [r4, #2]
 8006366:	f7ff ffcb 	bl	8006300 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800636a:	78e3      	ldrb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800636c:	043f      	lsls	r7, r7, #16
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800636e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006370:	4303      	orrs	r3, r0
 8006372:	431f      	orrs	r7, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006374:	0236      	lsls	r6, r6, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006376:	23ca      	movs	r3, #202	; 0xca
 8006378:	9a01      	ldr	r2, [sp, #4]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800637a:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800637c:	6253      	str	r3, [r2, #36]	; 0x24
 800637e:	3b77      	subs	r3, #119	; 0x77
 8006380:	6253      	str	r3, [r2, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006382:	f7ff ff45 	bl	8006210 <RTC_EnterInitMode>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006386:	433e      	orrs	r6, r7
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006388:	682b      	ldr	r3, [r5, #0]
 800638a:	1e07      	subs	r7, r0, #0
 800638c:	d01a      	beq.n	80063c4 <HAL_RTC_SetTime+0xac>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800638e:	22ff      	movs	r2, #255	; 0xff
 8006390:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006392:	2304      	movs	r3, #4
 8006394:	9a03      	ldr	r2, [sp, #12]
 8006396:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8006398:	2300      	movs	r3, #0
 800639a:	9a02      	ldr	r2, [sp, #8]
 800639c:	77d3      	strb	r3, [r2, #31]
        return HAL_ERROR;
 800639e:	2701      	movs	r7, #1
}
 80063a0:	0038      	movs	r0, r7
 80063a2:	b005      	add	sp, #20
 80063a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80063a6:	9a01      	ldr	r2, [sp, #4]
 80063a8:	6892      	ldr	r2, [r2, #8]
 80063aa:	0011      	movs	r1, r2
 80063ac:	4019      	ands	r1, r3
 80063ae:	421a      	tst	r2, r3
 80063b0:	d100      	bne.n	80063b4 <HAL_RTC_SetTime+0x9c>
      sTime->TimeFormat = 0x00U;
 80063b2:	70e1      	strb	r1, [r4, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80063b4:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80063b6:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80063b8:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80063ba:	78e7      	ldrb	r7, [r4, #3]
              ((uint32_t)sTime->Seconds) | \
 80063bc:	78a0      	ldrb	r0, [r4, #2]
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80063be:	043f      	lsls	r7, r7, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80063c0:	4306      	orrs	r6, r0
 80063c2:	e7d8      	b.n	8006376 <HAL_RTC_SetTime+0x5e>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80063c4:	4815      	ldr	r0, [pc, #84]	; (800641c <HAL_RTC_SetTime+0x104>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80063c6:	4916      	ldr	r1, [pc, #88]	; (8006420 <HAL_RTC_SetTime+0x108>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80063c8:	4006      	ands	r6, r0
 80063ca:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80063cc:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80063ce:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80063d0:	400a      	ands	r2, r1
 80063d2:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80063d4:	68e2      	ldr	r2, [r4, #12]
 80063d6:	6899      	ldr	r1, [r3, #8]
 80063d8:	4302      	orrs	r2, r0
 80063da:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80063dc:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80063de:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80063e0:	68da      	ldr	r2, [r3, #12]
 80063e2:	438a      	bics	r2, r1
 80063e4:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	069b      	lsls	r3, r3, #26
 80063ea:	d40d      	bmi.n	8006408 <HAL_RTC_SetTime+0xf0>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80063ec:	0028      	movs	r0, r5
 80063ee:	f7ff fef5 	bl	80061dc <HAL_RTC_WaitForSynchro>
 80063f2:	2800      	cmp	r0, #0
 80063f4:	d008      	beq.n	8006408 <HAL_RTC_SetTime+0xf0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063f6:	22ff      	movs	r2, #255	; 0xff
 80063f8:	682b      	ldr	r3, [r5, #0]
 80063fa:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80063fc:	2304      	movs	r3, #4
 80063fe:	9a03      	ldr	r2, [sp, #12]
 8006400:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8006402:	9b02      	ldr	r3, [sp, #8]
 8006404:	77df      	strb	r7, [r3, #31]
 8006406:	e7ca      	b.n	800639e <HAL_RTC_SetTime+0x86>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006408:	22ff      	movs	r2, #255	; 0xff
 800640a:	682b      	ldr	r3, [r5, #0]
 800640c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800640e:	2301      	movs	r3, #1
 8006410:	9a03      	ldr	r2, [sp, #12]
 8006412:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8006414:	2300      	movs	r3, #0
 8006416:	9a02      	ldr	r2, [sp, #8]
 8006418:	77d3      	strb	r3, [r2, #31]
    return HAL_OK;
 800641a:	e7c1      	b.n	80063a0 <HAL_RTC_SetTime+0x88>
 800641c:	007f7f7f 	.word	0x007f7f7f
 8006420:	fffbffff 	.word	0xfffbffff

08006424 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 8006424:	2302      	movs	r3, #2
{
 8006426:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8006428:	1c47      	adds	r7, r0, #1
{
 800642a:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 800642c:	7ff9      	ldrb	r1, [r7, #31]
{
 800642e:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8006430:	001d      	movs	r5, r3
{
 8006432:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8006434:	2901      	cmp	r1, #1
 8006436:	d036      	beq.n	80064a6 <HAL_RTC_SetDate+0x82>
 8006438:	2101      	movs	r1, #1
 800643a:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800643c:	18c1      	adds	r1, r0, r3
 800643e:	77cb      	strb	r3, [r1, #31]
 8006440:	9101      	str	r1, [sp, #4]
 8006442:	7831      	ldrb	r1, [r6, #0]
 8006444:	78f0      	ldrb	r0, [r6, #3]
 8006446:	0349      	lsls	r1, r1, #13
 8006448:	7873      	ldrb	r3, [r6, #1]
 800644a:	78b5      	ldrb	r5, [r6, #2]
 800644c:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800644e:	2a00      	cmp	r2, #0
 8006450:	d14c      	bne.n	80064ec <HAL_RTC_SetDate+0xc8>
 8006452:	3210      	adds	r2, #16
 8006454:	4213      	tst	r3, r2
 8006456:	d002      	beq.n	800645e <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006458:	4393      	bics	r3, r2
 800645a:	330a      	adds	r3, #10
 800645c:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800645e:	f7ff ff4f 	bl	8006300 <RTC_ByteToBcd2>
 8006462:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006464:	7870      	ldrb	r0, [r6, #1]
 8006466:	f7ff ff4b 	bl	8006300 <RTC_ByteToBcd2>
 800646a:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800646c:	0028      	movs	r0, r5
 800646e:	f7ff ff47 	bl	8006300 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006472:	9b03      	ldr	r3, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006474:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006476:	041d      	lsls	r5, r3, #16
 8006478:	9b02      	ldr	r3, [sp, #8]
 800647a:	4318      	orrs	r0, r3
 800647c:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800647e:	22ca      	movs	r2, #202	; 0xca
 8006480:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006482:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006484:	625a      	str	r2, [r3, #36]	; 0x24
 8006486:	3a77      	subs	r2, #119	; 0x77
 8006488:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800648a:	f7ff fec1 	bl	8006210 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800648e:	432e      	orrs	r6, r5
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006490:	6823      	ldr	r3, [r4, #0]
 8006492:	1e05      	subs	r5, r0, #0
 8006494:	d00a      	beq.n	80064ac <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006496:	22ff      	movs	r2, #255	; 0xff
 8006498:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800649a:	2304      	movs	r3, #4
 800649c:	9a01      	ldr	r2, [sp, #4]
 800649e:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80064a0:	2300      	movs	r3, #0
 80064a2:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 80064a4:	2501      	movs	r5, #1
}
 80064a6:	0028      	movs	r0, r5
 80064a8:	b005      	add	sp, #20
 80064aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80064ac:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80064ae:	4812      	ldr	r0, [pc, #72]	; (80064f8 <HAL_RTC_SetDate+0xd4>)
 80064b0:	4006      	ands	r6, r0
 80064b2:	605e      	str	r6, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	438a      	bics	r2, r1
 80064b8:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	069b      	lsls	r3, r3, #26
 80064be:	d40c      	bmi.n	80064da <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064c0:	0020      	movs	r0, r4
 80064c2:	f7ff fe8b 	bl	80061dc <HAL_RTC_WaitForSynchro>
 80064c6:	2800      	cmp	r0, #0
 80064c8:	d007      	beq.n	80064da <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064ca:	22ff      	movs	r2, #255	; 0xff
 80064cc:	6823      	ldr	r3, [r4, #0]
 80064ce:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80064d0:	2304      	movs	r3, #4
 80064d2:	9a01      	ldr	r2, [sp, #4]
 80064d4:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 80064d6:	77fd      	strb	r5, [r7, #31]
 80064d8:	e7e4      	b.n	80064a4 <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064da:	22ff      	movs	r2, #255	; 0xff
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80064e0:	2301      	movs	r3, #1
 80064e2:	9a01      	ldr	r2, [sp, #4]
 80064e4:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80064e6:	2300      	movs	r3, #0
 80064e8:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 80064ea:	e7dc      	b.n	80064a6 <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80064ec:	9a02      	ldr	r2, [sp, #8]
 80064ee:	0400      	lsls	r0, r0, #16
 80064f0:	4310      	orrs	r0, r2
 80064f2:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 80064f4:	021e      	lsls	r6, r3, #8
 80064f6:	e7c2      	b.n	800647e <HAL_RTC_SetDate+0x5a>
 80064f8:	00ffff3f 	.word	0x00ffff3f

080064fc <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 80064fc:	2302      	movs	r3, #2
{
 80064fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006500:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8006502:	1c41      	adds	r1, r0, #1
 8006504:	7fce      	ldrb	r6, [r1, #31]
{
 8006506:	0004      	movs	r4, r0
 8006508:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 800650a:	0018      	movs	r0, r3
 800650c:	2e01      	cmp	r6, #1
 800650e:	d100      	bne.n	8006512 <HAL_RTC_SetAlarm_IT+0x16>
 8006510:	e095      	b.n	800663e <HAL_RTC_SetAlarm_IT+0x142>
 8006512:	3801      	subs	r0, #1
 8006514:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006516:	18e1      	adds	r1, r4, r3
 8006518:	77cb      	strb	r3, [r1, #31]
  if (Format == RTC_FORMAT_BIN)
 800651a:	7869      	ldrb	r1, [r5, #1]
 800651c:	6826      	ldr	r6, [r4, #0]
 800651e:	9101      	str	r1, [sp, #4]
 8006520:	7828      	ldrb	r0, [r5, #0]
 8006522:	78af      	ldrb	r7, [r5, #2]
 8006524:	333e      	adds	r3, #62	; 0x3e
 8006526:	2a00      	cmp	r2, #0
 8006528:	d165      	bne.n	80065f6 <HAL_RTC_SetAlarm_IT+0xfa>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800652a:	68b2      	ldr	r2, [r6, #8]
 800652c:	0011      	movs	r1, r2
 800652e:	4019      	ands	r1, r3
 8006530:	421a      	tst	r2, r3
 8006532:	d100      	bne.n	8006536 <HAL_RTC_SetAlarm_IT+0x3a>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006534:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006536:	f7ff fee3 	bl	8006300 <RTC_ByteToBcd2>
 800653a:	9002      	str	r0, [sp, #8]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800653c:	9801      	ldr	r0, [sp, #4]
 800653e:	f7ff fedf 	bl	8006300 <RTC_ByteToBcd2>
 8006542:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006544:	0038      	movs	r0, r7
 8006546:	f7ff fedb 	bl	8006300 <RTC_ByteToBcd2>
 800654a:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800654c:	1c6b      	adds	r3, r5, #1
 800654e:	7fd8      	ldrb	r0, [r3, #31]
 8006550:	f7ff fed6 	bl	8006300 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006554:	696a      	ldr	r2, [r5, #20]
 8006556:	69eb      	ldr	r3, [r5, #28]
 8006558:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800655a:	78ea      	ldrb	r2, [r5, #3]
 800655c:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800655e:	4313      	orrs	r3, r2
 8006560:	431f      	orrs	r7, r3
 8006562:	9b02      	ldr	r3, [sp, #8]
 8006564:	041b      	lsls	r3, r3, #16
 8006566:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006568:	9b01      	ldr	r3, [sp, #4]
 800656a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800656c:	431f      	orrs	r7, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800656e:	69aa      	ldr	r2, [r5, #24]
 8006570:	686b      	ldr	r3, [r5, #4]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006572:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006574:	4313      	orrs	r3, r2
 8006576:	9301      	str	r3, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006578:	23ca      	movs	r3, #202	; 0xca
  if (sAlarm->Alarm == RTC_ALARM_A)
 800657a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800657c:	6273      	str	r3, [r6, #36]	; 0x24
 800657e:	3b77      	subs	r3, #119	; 0x77
 8006580:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006582:	33ad      	adds	r3, #173	; 0xad
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006584:	4307      	orrs	r7, r0
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006586:	429a      	cmp	r2, r3
 8006588:	d15b      	bne.n	8006642 <HAL_RTC_SetAlarm_IT+0x146>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800658a:	68b3      	ldr	r3, [r6, #8]
 800658c:	4a41      	ldr	r2, [pc, #260]	; (8006694 <HAL_RTC_SetAlarm_IT+0x198>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800658e:	2501      	movs	r5, #1
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006590:	4013      	ands	r3, r2
 8006592:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006594:	68f2      	ldr	r2, [r6, #12]
 8006596:	4b40      	ldr	r3, [pc, #256]	; (8006698 <HAL_RTC_SetAlarm_IT+0x19c>)
 8006598:	b2d2      	uxtb	r2, r2
 800659a:	4313      	orrs	r3, r2
 800659c:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 800659e:	f7fe fbc5 	bl	8004d2c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80065a2:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 80065a4:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80065a6:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80065a8:	6823      	ldr	r3, [r4, #0]
 80065aa:	68da      	ldr	r2, [r3, #12]
 80065ac:	0011      	movs	r1, r2
 80065ae:	4029      	ands	r1, r5
 80065b0:	9103      	str	r1, [sp, #12]
 80065b2:	422a      	tst	r2, r5
 80065b4:	d034      	beq.n	8006620 <HAL_RTC_SetAlarm_IT+0x124>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80065b6:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80065b8:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80065ba:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80065bc:	2280      	movs	r2, #128	; 0x80
 80065be:	6899      	ldr	r1, [r3, #8]
 80065c0:	0052      	lsls	r2, r2, #1
 80065c2:	430a      	orrs	r2, r1
 80065c4:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80065c6:	2280      	movs	r2, #128	; 0x80
 80065c8:	6899      	ldr	r1, [r3, #8]
 80065ca:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80065cc:	430a      	orrs	r2, r1
 80065ce:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80065d0:	2280      	movs	r2, #128	; 0x80
 80065d2:	4b32      	ldr	r3, [pc, #200]	; (800669c <HAL_RTC_SetAlarm_IT+0x1a0>)
 80065d4:	0292      	lsls	r2, r2, #10
 80065d6:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 80065d8:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80065da:	4311      	orrs	r1, r2
 80065dc:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80065de:	6899      	ldr	r1, [r3, #8]
 80065e0:	430a      	orrs	r2, r1
 80065e2:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065e4:	22ff      	movs	r2, #255	; 0xff
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80065ea:	3afe      	subs	r2, #254	; 0xfe
 80065ec:	1ca3      	adds	r3, r4, #2
  __HAL_UNLOCK(hrtc);
 80065ee:	18a4      	adds	r4, r4, r2
  hrtc->State = HAL_RTC_STATE_READY;
 80065f0:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 80065f2:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 80065f4:	e023      	b.n	800663e <HAL_RTC_SetAlarm_IT+0x142>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80065f6:	68b2      	ldr	r2, [r6, #8]
 80065f8:	0011      	movs	r1, r2
 80065fa:	4019      	ands	r1, r3
 80065fc:	421a      	tst	r2, r3
 80065fe:	d100      	bne.n	8006602 <HAL_RTC_SetAlarm_IT+0x106>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006600:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006602:	69eb      	ldr	r3, [r5, #28]
 8006604:	696a      	ldr	r2, [r5, #20]
 8006606:	0400      	lsls	r0, r0, #16
 8006608:	4313      	orrs	r3, r2
 800660a:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800660c:	9b01      	ldr	r3, [sp, #4]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800660e:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006610:	0218      	lsls	r0, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006612:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006614:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006616:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006618:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800661a:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800661c:	7fd8      	ldrb	r0, [r3, #31]
 800661e:	e7a6      	b.n	800656e <HAL_RTC_SetAlarm_IT+0x72>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006620:	f7fe fb84 	bl	8004d2c <HAL_GetTick>
 8006624:	9b02      	ldr	r3, [sp, #8]
 8006626:	1ac0      	subs	r0, r0, r3
 8006628:	42b0      	cmp	r0, r6
 800662a:	d9bd      	bls.n	80065a8 <HAL_RTC_SetAlarm_IT+0xac>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800662c:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800662e:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006630:	6823      	ldr	r3, [r4, #0]
 8006632:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006634:	1ca3      	adds	r3, r4, #2
 8006636:	77d8      	strb	r0, [r3, #31]
        __HAL_UNLOCK(hrtc);
 8006638:	9b03      	ldr	r3, [sp, #12]
 800663a:	3401      	adds	r4, #1
 800663c:	77e3      	strb	r3, [r4, #31]
}
 800663e:	b005      	add	sp, #20
 8006640:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006642:	68b3      	ldr	r3, [r6, #8]
 8006644:	4a16      	ldr	r2, [pc, #88]	; (80066a0 <HAL_RTC_SetAlarm_IT+0x1a4>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006646:	2502      	movs	r5, #2
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006648:	4013      	ands	r3, r2
 800664a:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800664c:	68f2      	ldr	r2, [r6, #12]
 800664e:	4b15      	ldr	r3, [pc, #84]	; (80066a4 <HAL_RTC_SetAlarm_IT+0x1a8>)
 8006650:	b2d2      	uxtb	r2, r2
 8006652:	4313      	orrs	r3, r2
 8006654:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8006656:	f7fe fb69 	bl	8004d2c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800665a:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 800665c:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800665e:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	68da      	ldr	r2, [r3, #12]
 8006664:	0011      	movs	r1, r2
 8006666:	4029      	ands	r1, r5
 8006668:	9103      	str	r1, [sp, #12]
 800666a:	422a      	tst	r2, r5
 800666c:	d00b      	beq.n	8006686 <HAL_RTC_SetAlarm_IT+0x18a>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800666e:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006670:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006672:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006674:	2280      	movs	r2, #128	; 0x80
 8006676:	6899      	ldr	r1, [r3, #8]
 8006678:	0092      	lsls	r2, r2, #2
 800667a:	430a      	orrs	r2, r1
 800667c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800667e:	2280      	movs	r2, #128	; 0x80
 8006680:	6899      	ldr	r1, [r3, #8]
 8006682:	0192      	lsls	r2, r2, #6
 8006684:	e7a2      	b.n	80065cc <HAL_RTC_SetAlarm_IT+0xd0>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006686:	f7fe fb51 	bl	8004d2c <HAL_GetTick>
 800668a:	9b02      	ldr	r3, [sp, #8]
 800668c:	1ac0      	subs	r0, r0, r3
 800668e:	42b0      	cmp	r0, r6
 8006690:	d9e6      	bls.n	8006660 <HAL_RTC_SetAlarm_IT+0x164>
 8006692:	e7cb      	b.n	800662c <HAL_RTC_SetAlarm_IT+0x130>
 8006694:	fffffeff 	.word	0xfffffeff
 8006698:	fffffe7f 	.word	0xfffffe7f
 800669c:	40010400 	.word	0x40010400
 80066a0:	fffffdff 	.word	0xfffffdff
 80066a4:	fffffd7f 	.word	0xfffffd7f

080066a8 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80066a8:	0902      	lsrs	r2, r0, #4
{
 80066aa:	0003      	movs	r3, r0
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80066ac:	200a      	movs	r0, #10
 80066ae:	4350      	muls	r0, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80066b0:	220f      	movs	r2, #15
 80066b2:	4013      	ands	r3, r2
 80066b4:	18c0      	adds	r0, r0, r3
 80066b6:	b2c0      	uxtb	r0, r0
}
 80066b8:	4770      	bx	lr
	...

080066bc <HAL_RTC_GetTime>:
{
 80066bc:	b570      	push	{r4, r5, r6, lr}
 80066be:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80066c0:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80066c2:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80066c4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80066c6:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80066c8:	690b      	ldr	r3, [r1, #16]
 80066ca:	045b      	lsls	r3, r3, #17
 80066cc:	0c5b      	lsrs	r3, r3, #17
 80066ce:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80066d0:	680b      	ldr	r3, [r1, #0]
 80066d2:	490e      	ldr	r1, [pc, #56]	; (800670c <HAL_RTC_GetTime+0x50>)
 80066d4:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80066d6:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80066d8:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80066da:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80066dc:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80066de:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80066e0:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80066e2:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80066e4:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80066e6:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80066e8:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80066ea:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 80066ec:	2a00      	cmp	r2, #0
 80066ee:	d10a      	bne.n	8006706 <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80066f0:	f7ff ffda 	bl	80066a8 <RTC_Bcd2ToByte>
 80066f4:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80066f6:	0030      	movs	r0, r6
 80066f8:	f7ff ffd6 	bl	80066a8 <RTC_Bcd2ToByte>
 80066fc:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80066fe:	0028      	movs	r0, r5
 8006700:	f7ff ffd2 	bl	80066a8 <RTC_Bcd2ToByte>
 8006704:	70a0      	strb	r0, [r4, #2]
}
 8006706:	2000      	movs	r0, #0
 8006708:	bd70      	pop	{r4, r5, r6, pc}
 800670a:	46c0      	nop			; (mov r8, r8)
 800670c:	007f7f7f 	.word	0x007f7f7f

08006710 <HAL_RTC_GetDate>:
{
 8006710:	b570      	push	{r4, r5, r6, lr}
 8006712:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006714:	6803      	ldr	r3, [r0, #0]
 8006716:	490e      	ldr	r1, [pc, #56]	; (8006750 <HAL_RTC_GetDate+0x40>)
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800671c:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800671e:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006720:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006722:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006724:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006726:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006728:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800672a:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800672c:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800672e:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 8006730:	2a00      	cmp	r2, #0
 8006732:	d10a      	bne.n	800674a <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006734:	f7ff ffb8 	bl	80066a8 <RTC_Bcd2ToByte>
 8006738:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800673a:	0028      	movs	r0, r5
 800673c:	f7ff ffb4 	bl	80066a8 <RTC_Bcd2ToByte>
 8006740:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006742:	0030      	movs	r0, r6
 8006744:	f7ff ffb0 	bl	80066a8 <RTC_Bcd2ToByte>
 8006748:	70a0      	strb	r0, [r4, #2]
}
 800674a:	2000      	movs	r0, #0
 800674c:	bd70      	pop	{r4, r5, r6, pc}
 800674e:	46c0      	nop			; (mov r8, r8)
 8006750:	00ffff3f 	.word	0x00ffff3f

08006754 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006754:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8006756:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006758:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 800675a:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800675c:	600a      	str	r2, [r1, #0]
}
 800675e:	4770      	bx	lr

08006760 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006760:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8006762:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006764:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 8006766:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006768:	6808      	ldr	r0, [r1, #0]
}
 800676a:	4770      	bx	lr

0800676c <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800676c:	2202      	movs	r2, #2
{
 800676e:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 8006770:	1c41      	adds	r1, r0, #1
 8006772:	7fcc      	ldrb	r4, [r1, #31]
{
 8006774:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 8006776:	0010      	movs	r0, r2
 8006778:	2c01      	cmp	r4, #1
 800677a:	d010      	beq.n	800679e <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 800677c:	1898      	adds	r0, r3, r2
 800677e:	77c2      	strb	r2, [r0, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	32c8      	adds	r2, #200	; 0xc8
 8006784:	625a      	str	r2, [r3, #36]	; 0x24
 8006786:	3a77      	subs	r2, #119	; 0x77
 8006788:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800678a:	689c      	ldr	r4, [r3, #8]
 800678c:	3a33      	subs	r2, #51	; 0x33
 800678e:	4322      	orrs	r2, r4
 8006790:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006792:	22ff      	movs	r2, #255	; 0xff
 8006794:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006796:	2301      	movs	r3, #1
 8006798:	77c3      	strb	r3, [r0, #31]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800679a:	2000      	movs	r0, #0
 800679c:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 800679e:	bd10      	pop	{r4, pc}

080067a0 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80067a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a2:	0004      	movs	r4, r0
 80067a4:	000d      	movs	r5, r1
 80067a6:	0016      	movs	r6, r2
 80067a8:	001f      	movs	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067aa:	6822      	ldr	r2, [r4, #0]
 80067ac:	6893      	ldr	r3, [r2, #8]
 80067ae:	402b      	ands	r3, r5
 80067b0:	429d      	cmp	r5, r3
 80067b2:	d001      	beq.n	80067b8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80067b4:	2000      	movs	r0, #0
 80067b6:	e031      	b.n	800681c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 80067b8:	1c73      	adds	r3, r6, #1
 80067ba:	d0f7      	beq.n	80067ac <SPI_WaitFlagStateUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80067bc:	f7fe fab6 	bl	8004d2c <HAL_GetTick>
 80067c0:	1bc0      	subs	r0, r0, r7
 80067c2:	4286      	cmp	r6, r0
 80067c4:	d8f1      	bhi.n	80067aa <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067c6:	21e0      	movs	r1, #224	; 0xe0
 80067c8:	6823      	ldr	r3, [r4, #0]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	438a      	bics	r2, r1
 80067ce:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067d0:	2282      	movs	r2, #130	; 0x82
 80067d2:	6861      	ldr	r1, [r4, #4]
 80067d4:	0052      	lsls	r2, r2, #1
 80067d6:	4291      	cmp	r1, r2
 80067d8:	d10c      	bne.n	80067f4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x54>
 80067da:	2180      	movs	r1, #128	; 0x80
 80067dc:	68a2      	ldr	r2, [r4, #8]
 80067de:	0209      	lsls	r1, r1, #8
 80067e0:	428a      	cmp	r2, r1
 80067e2:	d003      	beq.n	80067ec <SPI_WaitFlagStateUntilTimeout.constprop.0+0x4c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067e4:	2180      	movs	r1, #128	; 0x80
 80067e6:	00c9      	lsls	r1, r1, #3
 80067e8:	428a      	cmp	r2, r1
 80067ea:	d103      	bne.n	80067f4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x54>
          __HAL_SPI_DISABLE(hspi);
 80067ec:	2140      	movs	r1, #64	; 0x40
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	438a      	bics	r2, r1
 80067f2:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067f4:	2180      	movs	r1, #128	; 0x80
 80067f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80067f8:	0189      	lsls	r1, r1, #6
 80067fa:	428a      	cmp	r2, r1
 80067fc:	d106      	bne.n	800680c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          SPI_RESET_CRC(hspi);
 80067fe:	6819      	ldr	r1, [r3, #0]
 8006800:	4807      	ldr	r0, [pc, #28]	; (8006820 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x80>)
 8006802:	4001      	ands	r1, r0
 8006804:	6019      	str	r1, [r3, #0]
 8006806:	6819      	ldr	r1, [r3, #0]
 8006808:	430a      	orrs	r2, r1
 800680a:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800680c:	0023      	movs	r3, r4
 800680e:	2201      	movs	r2, #1
 8006810:	3351      	adds	r3, #81	; 0x51
 8006812:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8006814:	2300      	movs	r3, #0
 8006816:	2003      	movs	r0, #3
 8006818:	3450      	adds	r4, #80	; 0x50
 800681a:	7023      	strb	r3, [r4, #0]
}
 800681c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800681e:	46c0      	nop			; (mov r8, r8)
 8006820:	ffffdfff 	.word	0xffffdfff

08006824 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006824:	0013      	movs	r3, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006826:	2282      	movs	r2, #130	; 0x82
{
 8006828:	b510      	push	{r4, lr}
 800682a:	0004      	movs	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800682c:	6840      	ldr	r0, [r0, #4]
 800682e:	0052      	lsls	r2, r2, #1
 8006830:	4290      	cmp	r0, r2
 8006832:	d108      	bne.n	8006846 <SPI_EndRxTxTransaction+0x22>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006834:	000a      	movs	r2, r1
 8006836:	2180      	movs	r1, #128	; 0x80
 8006838:	0020      	movs	r0, r4
 800683a:	f7ff ffb1 	bl	80067a0 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800683e:	2800      	cmp	r0, #0
 8006840:	d109      	bne.n	8006856 <SPI_EndRxTxTransaction+0x32>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8006842:	2000      	movs	r0, #0
}
 8006844:	bd10      	pop	{r4, pc}
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8006846:	0022      	movs	r2, r4
 8006848:	3251      	adds	r2, #81	; 0x51
 800684a:	7812      	ldrb	r2, [r2, #0]
 800684c:	2a05      	cmp	r2, #5
 800684e:	d1f8      	bne.n	8006842 <SPI_EndRxTxTransaction+0x1e>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006850:	000a      	movs	r2, r1
 8006852:	2101      	movs	r1, #1
 8006854:	e7f0      	b.n	8006838 <SPI_EndRxTxTransaction+0x14>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006856:	2320      	movs	r3, #32
 8006858:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 800685a:	2003      	movs	r0, #3
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800685c:	4313      	orrs	r3, r2
 800685e:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8006860:	e7f0      	b.n	8006844 <SPI_EndRxTxTransaction+0x20>

08006862 <HAL_SPI_MspInit>:
}
 8006862:	4770      	bx	lr

08006864 <HAL_SPI_Init>:
{
 8006864:	b570      	push	{r4, r5, r6, lr}
 8006866:	0004      	movs	r4, r0
    return HAL_ERROR;
 8006868:	2001      	movs	r0, #1
  if (hspi == NULL)
 800686a:	2c00      	cmp	r4, #0
 800686c:	d037      	beq.n	80068de <HAL_SPI_Init+0x7a>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800686e:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006870:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006872:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006874:	3551      	adds	r5, #81	; 0x51
 8006876:	782b      	ldrb	r3, [r5, #0]
 8006878:	b2da      	uxtb	r2, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d105      	bne.n	800688a <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 800687e:	0023      	movs	r3, r4
 8006880:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 8006882:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8006884:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8006886:	f7ff ffec 	bl	8006862 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800688a:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800688c:	2240      	movs	r2, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 800688e:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8006890:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006892:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8006894:	680b      	ldr	r3, [r1, #0]
 8006896:	4393      	bics	r3, r2
 8006898:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800689a:	6863      	ldr	r3, [r4, #4]
 800689c:	69a2      	ldr	r2, [r4, #24]
 800689e:	4303      	orrs	r3, r0
 80068a0:	68e0      	ldr	r0, [r4, #12]
 80068a2:	4303      	orrs	r3, r0
 80068a4:	6920      	ldr	r0, [r4, #16]
 80068a6:	4303      	orrs	r3, r0
 80068a8:	6960      	ldr	r0, [r4, #20]
 80068aa:	4303      	orrs	r3, r0
 80068ac:	69e0      	ldr	r0, [r4, #28]
 80068ae:	4303      	orrs	r3, r0
 80068b0:	6a20      	ldr	r0, [r4, #32]
 80068b2:	4303      	orrs	r3, r0
 80068b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80068b6:	4303      	orrs	r3, r0
 80068b8:	2080      	movs	r0, #128	; 0x80
 80068ba:	0080      	lsls	r0, r0, #2
 80068bc:	4010      	ands	r0, r2
 80068be:	4303      	orrs	r3, r0
 80068c0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80068c2:	2304      	movs	r3, #4
 80068c4:	0c12      	lsrs	r2, r2, #16
 80068c6:	401a      	ands	r2, r3
 80068c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068ca:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80068cc:	431a      	orrs	r2, r3
 80068ce:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068d0:	69cb      	ldr	r3, [r1, #28]
 80068d2:	4a03      	ldr	r2, [pc, #12]	; (80068e0 <HAL_SPI_Init+0x7c>)
 80068d4:	4013      	ands	r3, r2
 80068d6:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80068d8:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068da:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80068dc:	702b      	strb	r3, [r5, #0]
}
 80068de:	bd70      	pop	{r4, r5, r6, pc}
 80068e0:	fffff7ff 	.word	0xfffff7ff

080068e4 <HAL_SPI_TransmitReceive>:
{
 80068e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068e6:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 80068e8:	0003      	movs	r3, r0
 80068ea:	3350      	adds	r3, #80	; 0x50
{
 80068ec:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 80068ee:	781a      	ldrb	r2, [r3, #0]
{
 80068f0:	0004      	movs	r4, r0
 80068f2:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 80068f4:	2002      	movs	r0, #2
{
 80068f6:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 80068f8:	2a01      	cmp	r2, #1
 80068fa:	d100      	bne.n	80068fe <HAL_SPI_TransmitReceive+0x1a>
 80068fc:	e092      	b.n	8006a24 <HAL_SPI_TransmitReceive+0x140>
 80068fe:	2201      	movs	r2, #1
 8006900:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8006902:	f7fe fa13 	bl	8004d2c <HAL_GetTick>
  tmp_state           = hspi->State;
 8006906:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8006908:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 800690a:	3351      	adds	r3, #81	; 0x51
 800690c:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800690e:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8006910:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006912:	2b01      	cmp	r3, #1
 8006914:	d00a      	beq.n	800692c <HAL_SPI_TransmitReceive+0x48>
 8006916:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 8006918:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800691a:	005b      	lsls	r3, r3, #1
 800691c:	4299      	cmp	r1, r3
 800691e:	d000      	beq.n	8006922 <HAL_SPI_TransmitReceive+0x3e>
 8006920:	e079      	b.n	8006a16 <HAL_SPI_TransmitReceive+0x132>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006922:	68a3      	ldr	r3, [r4, #8]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d176      	bne.n	8006a16 <HAL_SPI_TransmitReceive+0x132>
 8006928:	2a04      	cmp	r2, #4
 800692a:	d174      	bne.n	8006a16 <HAL_SPI_TransmitReceive+0x132>
    errorcode = HAL_ERROR;
 800692c:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800692e:	2d00      	cmp	r5, #0
 8006930:	d071      	beq.n	8006a16 <HAL_SPI_TransmitReceive+0x132>
 8006932:	2f00      	cmp	r7, #0
 8006934:	d06f      	beq.n	8006a16 <HAL_SPI_TransmitReceive+0x132>
 8006936:	2e00      	cmp	r6, #0
 8006938:	d06d      	beq.n	8006a16 <HAL_SPI_TransmitReceive+0x132>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800693a:	0023      	movs	r3, r4
 800693c:	3351      	adds	r3, #81	; 0x51
 800693e:	781a      	ldrb	r2, [r3, #0]
 8006940:	2a04      	cmp	r2, #4
 8006942:	d001      	beq.n	8006948 <HAL_SPI_TransmitReceive+0x64>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006944:	2205      	movs	r2, #5
 8006946:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006948:	2300      	movs	r3, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800694a:	2240      	movs	r2, #64	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800694c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 800694e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006950:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006952:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8006954:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8006956:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006958:	6818      	ldr	r0, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800695a:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800695c:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800695e:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006960:	86a6      	strh	r6, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006962:	4210      	tst	r0, r2
 8006964:	d102      	bne.n	800696c <HAL_SPI_TransmitReceive+0x88>
    __HAL_SPI_ENABLE(hspi);
 8006966:	6818      	ldr	r0, [r3, #0]
 8006968:	4302      	orrs	r2, r0
 800696a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800696c:	2280      	movs	r2, #128	; 0x80
 800696e:	68e0      	ldr	r0, [r4, #12]
 8006970:	0112      	lsls	r2, r2, #4
 8006972:	4290      	cmp	r0, r2
 8006974:	d158      	bne.n	8006a28 <HAL_SPI_TransmitReceive+0x144>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006976:	2900      	cmp	r1, #0
 8006978:	d001      	beq.n	800697e <HAL_SPI_TransmitReceive+0x9a>
 800697a:	2e01      	cmp	r6, #1
 800697c:	d107      	bne.n	800698e <HAL_SPI_TransmitReceive+0xaa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800697e:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006980:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006982:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8006984:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006986:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006988:	3b01      	subs	r3, #1
 800698a:	b29b      	uxth	r3, r3
 800698c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800698e:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006990:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006992:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006994:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10e      	bne.n	80069b8 <HAL_SPI_TransmitReceive+0xd4>
 800699a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10b      	bne.n	80069b8 <HAL_SPI_TransmitReceive+0xd4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069a0:	0020      	movs	r0, r4
 80069a2:	9a01      	ldr	r2, [sp, #4]
 80069a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80069a6:	f7ff ff3d 	bl	8006824 <SPI_EndRxTxTransaction>
 80069aa:	2800      	cmp	r0, #0
 80069ac:	d100      	bne.n	80069b0 <HAL_SPI_TransmitReceive+0xcc>
 80069ae:	e083      	b.n	8006ab8 <HAL_SPI_TransmitReceive+0x1d4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069b0:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 80069b2:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069b4:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 80069b6:	e02e      	b.n	8006a16 <HAL_SPI_TransmitReceive+0x132>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069b8:	6821      	ldr	r1, [r4, #0]
 80069ba:	688b      	ldr	r3, [r1, #8]
 80069bc:	423b      	tst	r3, r7
 80069be:	d00e      	beq.n	80069de <HAL_SPI_TransmitReceive+0xfa>
 80069c0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00b      	beq.n	80069de <HAL_SPI_TransmitReceive+0xfa>
 80069c6:	2d01      	cmp	r5, #1
 80069c8:	d109      	bne.n	80069de <HAL_SPI_TransmitReceive+0xfa>
        txallowed = 0U;
 80069ca:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80069ce:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069d0:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069d2:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069d4:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80069d6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80069d8:	3b01      	subs	r3, #1
 80069da:	b29b      	uxth	r3, r3
 80069dc:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069de:	688b      	ldr	r3, [r1, #8]
 80069e0:	001a      	movs	r2, r3
 80069e2:	4032      	ands	r2, r6
 80069e4:	4233      	tst	r3, r6
 80069e6:	d00c      	beq.n	8006a02 <HAL_SPI_TransmitReceive+0x11e>
 80069e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d009      	beq.n	8006a02 <HAL_SPI_TransmitReceive+0x11e>
        txallowed = 1U;
 80069ee:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069f0:	68c9      	ldr	r1, [r1, #12]
 80069f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80069f4:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069f6:	3302      	adds	r3, #2
 80069f8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80069fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80069fc:	3b01      	subs	r3, #1
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a02:	f7fe f993 	bl	8004d2c <HAL_GetTick>
 8006a06:	9b01      	ldr	r3, [sp, #4]
 8006a08:	1ac0      	subs	r0, r0, r3
 8006a0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a0c:	4298      	cmp	r0, r3
 8006a0e:	d3c1      	bcc.n	8006994 <HAL_SPI_TransmitReceive+0xb0>
 8006a10:	3301      	adds	r3, #1
 8006a12:	d0bf      	beq.n	8006994 <HAL_SPI_TransmitReceive+0xb0>
        errorcode = HAL_TIMEOUT;
 8006a14:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8006a16:	0023      	movs	r3, r4
 8006a18:	2201      	movs	r2, #1
 8006a1a:	3351      	adds	r3, #81	; 0x51
 8006a1c:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8006a1e:	2300      	movs	r3, #0
 8006a20:	3450      	adds	r4, #80	; 0x50
 8006a22:	7023      	strb	r3, [r4, #0]
}
 8006a24:	b005      	add	sp, #20
 8006a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a28:	2900      	cmp	r1, #0
 8006a2a:	d001      	beq.n	8006a30 <HAL_SPI_TransmitReceive+0x14c>
 8006a2c:	2e01      	cmp	r6, #1
 8006a2e:	d108      	bne.n	8006a42 <HAL_SPI_TransmitReceive+0x15e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a30:	782a      	ldrb	r2, [r5, #0]
 8006a32:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a34:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006a36:	3301      	adds	r3, #1
 8006a38:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006a3a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8006a42:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a44:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a46:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a48:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d102      	bne.n	8006a54 <HAL_SPI_TransmitReceive+0x170>
 8006a4e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d0a5      	beq.n	80069a0 <HAL_SPI_TransmitReceive+0xbc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a54:	6823      	ldr	r3, [r4, #0]
 8006a56:	689a      	ldr	r2, [r3, #8]
 8006a58:	423a      	tst	r2, r7
 8006a5a:	d00f      	beq.n	8006a7c <HAL_SPI_TransmitReceive+0x198>
 8006a5c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8006a5e:	2a00      	cmp	r2, #0
 8006a60:	d00c      	beq.n	8006a7c <HAL_SPI_TransmitReceive+0x198>
 8006a62:	2d01      	cmp	r5, #1
 8006a64:	d10a      	bne.n	8006a7c <HAL_SPI_TransmitReceive+0x198>
        txallowed = 0U;
 8006a66:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a68:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006a6a:	7812      	ldrb	r2, [r2, #0]
 8006a6c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8006a6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006a70:	3301      	adds	r3, #1
 8006a72:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006a74:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006a76:	3b01      	subs	r3, #1
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	6899      	ldr	r1, [r3, #8]
 8006a80:	000a      	movs	r2, r1
 8006a82:	4032      	ands	r2, r6
 8006a84:	4231      	tst	r1, r6
 8006a86:	d00d      	beq.n	8006aa4 <HAL_SPI_TransmitReceive+0x1c0>
 8006a88:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8006a8a:	2900      	cmp	r1, #0
 8006a8c:	d00a      	beq.n	8006aa4 <HAL_SPI_TransmitReceive+0x1c0>
        txallowed = 1U;
 8006a8e:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006a94:	700b      	strb	r3, [r1, #0]
        hspi->pRxBuffPtr++;
 8006a96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a98:	3301      	adds	r3, #1
 8006a9a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006a9c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006aa4:	f7fe f942 	bl	8004d2c <HAL_GetTick>
 8006aa8:	9b01      	ldr	r3, [sp, #4]
 8006aaa:	1ac0      	subs	r0, r0, r3
 8006aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aae:	4298      	cmp	r0, r3
 8006ab0:	d3ca      	bcc.n	8006a48 <HAL_SPI_TransmitReceive+0x164>
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	d0c8      	beq.n	8006a48 <HAL_SPI_TransmitReceive+0x164>
 8006ab6:	e7ad      	b.n	8006a14 <HAL_SPI_TransmitReceive+0x130>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ab8:	68a3      	ldr	r3, [r4, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1ab      	bne.n	8006a16 <HAL_SPI_TransmitReceive+0x132>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006abe:	6823      	ldr	r3, [r4, #0]
 8006ac0:	9003      	str	r0, [sp, #12]
 8006ac2:	68da      	ldr	r2, [r3, #12]
 8006ac4:	9203      	str	r2, [sp, #12]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	9303      	str	r3, [sp, #12]
 8006aca:	9b03      	ldr	r3, [sp, #12]
 8006acc:	e7a3      	b.n	8006a16 <HAL_SPI_TransmitReceive+0x132>
	...

08006ad0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ad0:	6803      	ldr	r3, [r0, #0]
 8006ad2:	4907      	ldr	r1, [pc, #28]	; (8006af0 <UART_EndRxTransfer+0x20>)
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	400a      	ands	r2, r1
 8006ad8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ada:	689a      	ldr	r2, [r3, #8]
 8006adc:	3123      	adds	r1, #35	; 0x23
 8006ade:	31ff      	adds	r1, #255	; 0xff
 8006ae0:	438a      	bics	r2, r1
 8006ae2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ae4:	2320      	movs	r3, #32
 8006ae6:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	6603      	str	r3, [r0, #96]	; 0x60
}
 8006aec:	4770      	bx	lr
 8006aee:	46c0      	nop			; (mov r8, r8)
 8006af0:	fffffedf 	.word	0xfffffedf

08006af4 <HAL_UART_Transmit_DMA>:
{
 8006af4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006af6:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8006af8:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 8006afa:	0004      	movs	r4, r0
    return HAL_BUSY;
 8006afc:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8006afe:	2a20      	cmp	r2, #32
 8006b00:	d139      	bne.n	8006b76 <HAL_UART_Transmit_DMA+0x82>
      return HAL_ERROR;
 8006b02:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8006b04:	2900      	cmp	r1, #0
 8006b06:	d036      	beq.n	8006b76 <HAL_UART_Transmit_DMA+0x82>
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d034      	beq.n	8006b76 <HAL_UART_Transmit_DMA+0x82>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b0c:	2280      	movs	r2, #128	; 0x80
 8006b0e:	68a0      	ldr	r0, [r4, #8]
 8006b10:	0152      	lsls	r2, r2, #5
 8006b12:	4290      	cmp	r0, r2
 8006b14:	d106      	bne.n	8006b24 <HAL_UART_Transmit_DMA+0x30>
 8006b16:	6922      	ldr	r2, [r4, #16]
 8006b18:	2a00      	cmp	r2, #0
 8006b1a:	d103      	bne.n	8006b24 <HAL_UART_Transmit_DMA+0x30>
      if ((((uint32_t)pData) & 1) != 0)
 8006b1c:	3201      	adds	r2, #1
      return HAL_ERROR;
 8006b1e:	0010      	movs	r0, r2
      if ((((uint32_t)pData) & 1) != 0)
 8006b20:	4211      	tst	r1, r2
 8006b22:	d128      	bne.n	8006b76 <HAL_UART_Transmit_DMA+0x82>
    __HAL_LOCK(huart);
 8006b24:	0026      	movs	r6, r4
 8006b26:	3670      	adds	r6, #112	; 0x70
 8006b28:	7832      	ldrb	r2, [r6, #0]
    return HAL_BUSY;
 8006b2a:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8006b2c:	2a01      	cmp	r2, #1
 8006b2e:	d022      	beq.n	8006b76 <HAL_UART_Transmit_DMA+0x82>
    huart->TxXferSize  = Size;
 8006b30:	0022      	movs	r2, r4
    __HAL_LOCK(huart);
 8006b32:	2501      	movs	r5, #1
    huart->TxXferSize  = Size;
 8006b34:	3250      	adds	r2, #80	; 0x50
    __HAL_LOCK(huart);
 8006b36:	7035      	strb	r5, [r6, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b38:	2700      	movs	r7, #0
    huart->pTxBuffPtr  = pData;
 8006b3a:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006b3c:	8013      	strh	r3, [r2, #0]
    huart->TxXferCount = Size;
 8006b3e:	8053      	strh	r3, [r2, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b40:	2221      	movs	r2, #33	; 0x21
    if (huart->hdmatx != NULL)
 8006b42:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b44:	67e7      	str	r7, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b46:	6762      	str	r2, [r4, #116]	; 0x74
    if (huart->hdmatx != NULL)
 8006b48:	42b8      	cmp	r0, r7
 8006b4a:	d015      	beq.n	8006b78 <HAL_UART_Transmit_DMA+0x84>
 8006b4c:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferAbortCallback = NULL;
 8006b4e:	6387      	str	r7, [r0, #56]	; 0x38
 8006b50:	9201      	str	r2, [sp, #4]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006b52:	4a0e      	ldr	r2, [pc, #56]	; (8006b8c <HAL_UART_Transmit_DMA+0x98>)
 8006b54:	62c2      	str	r2, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006b56:	4a0e      	ldr	r2, [pc, #56]	; (8006b90 <HAL_UART_Transmit_DMA+0x9c>)
 8006b58:	6302      	str	r2, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006b5a:	4a0e      	ldr	r2, [pc, #56]	; (8006b94 <HAL_UART_Transmit_DMA+0xa0>)
 8006b5c:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006b5e:	9a01      	ldr	r2, [sp, #4]
 8006b60:	3228      	adds	r2, #40	; 0x28
 8006b62:	f7fe fc89 	bl	8005478 <HAL_DMA_Start_IT>
 8006b66:	42b8      	cmp	r0, r7
 8006b68:	d006      	beq.n	8006b78 <HAL_UART_Transmit_DMA+0x84>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006b6a:	2310      	movs	r3, #16
        return HAL_ERROR;
 8006b6c:	0028      	movs	r0, r5
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006b6e:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 8006b70:	18db      	adds	r3, r3, r3
        __HAL_UNLOCK(huart);
 8006b72:	7037      	strb	r7, [r6, #0]
        huart->gState = HAL_UART_STATE_READY;
 8006b74:	6763      	str	r3, [r4, #116]	; 0x74
}
 8006b76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006b78:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 8006b7a:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8006b80:	7030      	strb	r0, [r6, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b82:	6899      	ldr	r1, [r3, #8]
 8006b84:	1892      	adds	r2, r2, r2
 8006b86:	430a      	orrs	r2, r1
 8006b88:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8006b8a:	e7f4      	b.n	8006b76 <HAL_UART_Transmit_DMA+0x82>
 8006b8c:	08006b99 	.word	0x08006b99
 8006b90:	08006bcf 	.word	0x08006bcf
 8006b94:	08006bdb 	.word	0x08006bdb

08006b98 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006b98:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006b9a:	681b      	ldr	r3, [r3, #0]
{
 8006b9c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	2320      	movs	r3, #32
 8006ba2:	0011      	movs	r1, r2
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ba4:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006ba6:	4019      	ands	r1, r3
 8006ba8:	421a      	tst	r2, r3
 8006baa:	d10c      	bne.n	8006bc6 <UART_DMATransmitCplt+0x2e>
  {
    huart->TxXferCount = 0U;
 8006bac:	0003      	movs	r3, r0
 8006bae:	3352      	adds	r3, #82	; 0x52
 8006bb0:	8019      	strh	r1, [r3, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006bb2:	2180      	movs	r1, #128	; 0x80
 8006bb4:	6803      	ldr	r3, [r0, #0]
 8006bb6:	689a      	ldr	r2, [r3, #8]
 8006bb8:	438a      	bics	r2, r1
 8006bba:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bbc:	2240      	movs	r2, #64	; 0x40
 8006bbe:	6819      	ldr	r1, [r3, #0]
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006bc4:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8006bc6:	f008 ff15 	bl	800f9f4 <HAL_UART_TxCpltCallback>
}
 8006bca:	e7fb      	b.n	8006bc4 <UART_DMATransmitCplt+0x2c>

08006bcc <HAL_UART_TxHalfCpltCallback>:
 8006bcc:	4770      	bx	lr

08006bce <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006bce:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006bd0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8006bd2:	f7ff fffb 	bl	8006bcc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bd6:	bd10      	pop	{r4, pc}

08006bd8 <HAL_UART_ErrorCallback>:
 8006bd8:	4770      	bx	lr

08006bda <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bda:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bdc:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006bde:	6823      	ldr	r3, [r4, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006be0:	6f62      	ldr	r2, [r4, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006be2:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006be4:	6898      	ldr	r0, [r3, #8]
 8006be6:	0600      	lsls	r0, r0, #24
 8006be8:	d50b      	bpl.n	8006c02 <UART_DMAError+0x28>
 8006bea:	2a21      	cmp	r2, #33	; 0x21
 8006bec:	d109      	bne.n	8006c02 <UART_DMAError+0x28>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006bee:	0022      	movs	r2, r4
 8006bf0:	2000      	movs	r0, #0
 8006bf2:	3252      	adds	r2, #82	; 0x52
 8006bf4:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	30c0      	adds	r0, #192	; 0xc0
 8006bfa:	4382      	bics	r2, r0
 8006bfc:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006bfe:	2220      	movs	r2, #32
 8006c00:	6762      	str	r2, [r4, #116]	; 0x74
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	065b      	lsls	r3, r3, #25
 8006c06:	d508      	bpl.n	8006c1a <UART_DMAError+0x40>
 8006c08:	2922      	cmp	r1, #34	; 0x22
 8006c0a:	d106      	bne.n	8006c1a <UART_DMAError+0x40>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006c0c:	0023      	movs	r3, r4
 8006c0e:	2200      	movs	r2, #0
 8006c10:	335a      	adds	r3, #90	; 0x5a
    UART_EndRxTransfer(huart);
 8006c12:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 8006c14:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 8006c16:	f7ff ff5b 	bl	8006ad0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c1a:	2310      	movs	r3, #16
 8006c1c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c1e:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c20:	4313      	orrs	r3, r2
 8006c22:	67e3      	str	r3, [r4, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 8006c24:	f7ff ffd8 	bl	8006bd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c28:	bd10      	pop	{r4, pc}
	...

08006c2c <HAL_UART_IRQHandler>:
{
 8006c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c2e:	6803      	ldr	r3, [r0, #0]
{
 8006c30:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c32:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c34:	6819      	ldr	r1, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c36:	689f      	ldr	r7, [r3, #8]
  if (errorflags == 0U)
 8006c38:	0710      	lsls	r0, r2, #28
 8006c3a:	d10b      	bne.n	8006c54 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c3c:	2020      	movs	r0, #32
 8006c3e:	4202      	tst	r2, r0
 8006c40:	d100      	bne.n	8006c44 <HAL_UART_IRQHandler+0x18>
 8006c42:	e06b      	b.n	8006d1c <HAL_UART_IRQHandler+0xf0>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c44:	4201      	tst	r1, r0
 8006c46:	d100      	bne.n	8006c4a <HAL_UART_IRQHandler+0x1e>
 8006c48:	e068      	b.n	8006d1c <HAL_UART_IRQHandler+0xf0>
      if (huart->RxISR != NULL)
 8006c4a:	6e23      	ldr	r3, [r4, #96]	; 0x60
      huart->TxISR(huart);
 8006c4c:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d15a      	bne.n	8006d08 <HAL_UART_IRQHandler+0xdc>
 8006c52:	e05a      	b.n	8006d0a <HAL_UART_IRQHandler+0xde>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006c54:	2590      	movs	r5, #144	; 0x90
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006c56:	2001      	movs	r0, #1
 8006c58:	003e      	movs	r6, r7
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006c5a:	006d      	lsls	r5, r5, #1
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006c5c:	4006      	ands	r6, r0
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006c5e:	400d      	ands	r5, r1
 8006c60:	4335      	orrs	r5, r6
 8006c62:	d05b      	beq.n	8006d1c <HAL_UART_IRQHandler+0xf0>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c64:	4202      	tst	r2, r0
 8006c66:	d005      	beq.n	8006c74 <HAL_UART_IRQHandler+0x48>
 8006c68:	05cd      	lsls	r5, r1, #23
 8006c6a:	d503      	bpl.n	8006c74 <HAL_UART_IRQHandler+0x48>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c6c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c6e:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8006c70:	4328      	orrs	r0, r5
 8006c72:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c74:	2002      	movs	r0, #2
 8006c76:	4202      	tst	r2, r0
 8006c78:	d006      	beq.n	8006c88 <HAL_UART_IRQHandler+0x5c>
 8006c7a:	2e00      	cmp	r6, #0
 8006c7c:	d004      	beq.n	8006c88 <HAL_UART_IRQHandler+0x5c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c7e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c80:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8006c82:	1800      	adds	r0, r0, r0
 8006c84:	4328      	orrs	r0, r5
 8006c86:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c88:	2004      	movs	r0, #4
 8006c8a:	4202      	tst	r2, r0
 8006c8c:	d006      	beq.n	8006c9c <HAL_UART_IRQHandler+0x70>
 8006c8e:	2e00      	cmp	r6, #0
 8006c90:	d004      	beq.n	8006c9c <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c92:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c94:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8006c96:	3802      	subs	r0, #2
 8006c98:	4328      	orrs	r0, r5
 8006c9a:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c9c:	2008      	movs	r0, #8
 8006c9e:	4202      	tst	r2, r0
 8006ca0:	d007      	beq.n	8006cb2 <HAL_UART_IRQHandler+0x86>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ca2:	2520      	movs	r5, #32
 8006ca4:	400d      	ands	r5, r1
 8006ca6:	4335      	orrs	r5, r6
 8006ca8:	d003      	beq.n	8006cb2 <HAL_UART_IRQHandler+0x86>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006caa:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006cac:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006cae:	4318      	orrs	r0, r3
 8006cb0:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cb2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d028      	beq.n	8006d0a <HAL_UART_IRQHandler+0xde>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006cb8:	2320      	movs	r3, #32
 8006cba:	421a      	tst	r2, r3
 8006cbc:	d006      	beq.n	8006ccc <HAL_UART_IRQHandler+0xa0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006cbe:	4219      	tst	r1, r3
 8006cc0:	d004      	beq.n	8006ccc <HAL_UART_IRQHandler+0xa0>
        if (huart->RxISR != NULL)
 8006cc2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <HAL_UART_IRQHandler+0xa0>
          huart->RxISR(huart);
 8006cc8:	0020      	movs	r0, r4
 8006cca:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ccc:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8006cce:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cd0:	2640      	movs	r6, #64	; 0x40
 8006cd2:	6895      	ldr	r5, [r2, #8]
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8006cd4:	2208      	movs	r2, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cd6:	4035      	ands	r5, r6
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8006cd8:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 8006cda:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cdc:	431d      	orrs	r5, r3
 8006cde:	d019      	beq.n	8006d14 <HAL_UART_IRQHandler+0xe8>
        UART_EndRxTransfer(huart);
 8006ce0:	f7ff fef6 	bl	8006ad0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce4:	6823      	ldr	r3, [r4, #0]
 8006ce6:	689a      	ldr	r2, [r3, #8]
 8006ce8:	4232      	tst	r2, r6
 8006cea:	d00f      	beq.n	8006d0c <HAL_UART_IRQHandler+0xe0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cec:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8006cee:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cf0:	43b2      	bics	r2, r6
 8006cf2:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	d009      	beq.n	8006d0c <HAL_UART_IRQHandler+0xe0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cf8:	4b19      	ldr	r3, [pc, #100]	; (8006d60 <HAL_UART_IRQHandler+0x134>)
 8006cfa:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cfc:	f7fe fbfc 	bl	80054f8 <HAL_DMA_Abort_IT>
 8006d00:	2800      	cmp	r0, #0
 8006d02:	d002      	beq.n	8006d0a <HAL_UART_IRQHandler+0xde>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d04:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006d06:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006d08:	4798      	blx	r3
}
 8006d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8006d0c:	0020      	movs	r0, r4
 8006d0e:	f7ff ff63 	bl	8006bd8 <HAL_UART_ErrorCallback>
 8006d12:	e7fa      	b.n	8006d0a <HAL_UART_IRQHandler+0xde>
        HAL_UART_ErrorCallback(huart);
 8006d14:	f7ff ff60 	bl	8006bd8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d18:	67e5      	str	r5, [r4, #124]	; 0x7c
 8006d1a:	e7f6      	b.n	8006d0a <HAL_UART_IRQHandler+0xde>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d1c:	2080      	movs	r0, #128	; 0x80
 8006d1e:	0340      	lsls	r0, r0, #13
 8006d20:	4202      	tst	r2, r0
 8006d22:	d006      	beq.n	8006d32 <HAL_UART_IRQHandler+0x106>
 8006d24:	027d      	lsls	r5, r7, #9
 8006d26:	d504      	bpl.n	8006d32 <HAL_UART_IRQHandler+0x106>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d28:	6218      	str	r0, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8006d2a:	0020      	movs	r0, r4
 8006d2c:	f000 fa54 	bl	80071d8 <HAL_UARTEx_WakeupCallback>
    return;
 8006d30:	e7eb      	b.n	8006d0a <HAL_UART_IRQHandler+0xde>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006d32:	2080      	movs	r0, #128	; 0x80
 8006d34:	4202      	tst	r2, r0
 8006d36:	d003      	beq.n	8006d40 <HAL_UART_IRQHandler+0x114>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006d38:	4201      	tst	r1, r0
 8006d3a:	d001      	beq.n	8006d40 <HAL_UART_IRQHandler+0x114>
    if (huart->TxISR != NULL)
 8006d3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d3e:	e785      	b.n	8006c4c <HAL_UART_IRQHandler+0x20>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d40:	2040      	movs	r0, #64	; 0x40
 8006d42:	4202      	tst	r2, r0
 8006d44:	d0e1      	beq.n	8006d0a <HAL_UART_IRQHandler+0xde>
 8006d46:	4201      	tst	r1, r0
 8006d48:	d0df      	beq.n	8006d0a <HAL_UART_IRQHandler+0xde>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	4382      	bics	r2, r0
 8006d4e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d50:	2320      	movs	r3, #32
 8006d52:	6763      	str	r3, [r4, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d54:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d56:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8006d58:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8006d5a:	f008 fe4b 	bl	800f9f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d5e:	e7d4      	b.n	8006d0a <HAL_UART_IRQHandler+0xde>
 8006d60:	08006d65 	.word	0x08006d65

08006d64 <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d64:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8006d66:	2300      	movs	r3, #0
 8006d68:	0002      	movs	r2, r0
{
 8006d6a:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8006d6c:	325a      	adds	r2, #90	; 0x5a
 8006d6e:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8006d70:	3a08      	subs	r2, #8
 8006d72:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 8006d74:	f7ff ff30 	bl	8006bd8 <HAL_UART_ErrorCallback>
}
 8006d78:	bd10      	pop	{r4, pc}
	...

08006d7c <UART_SetConfig>:
{
 8006d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7e:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d80:	6925      	ldr	r5, [r4, #16]
 8006d82:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d84:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d86:	432a      	orrs	r2, r5
 8006d88:	6965      	ldr	r5, [r4, #20]
 8006d8a:	69c1      	ldr	r1, [r0, #28]
 8006d8c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d8e:	6818      	ldr	r0, [r3, #0]
 8006d90:	4d83      	ldr	r5, [pc, #524]	; (8006fa0 <UART_SetConfig+0x224>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d92:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d94:	4028      	ands	r0, r5
 8006d96:	4302      	orrs	r2, r0
 8006d98:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	4881      	ldr	r0, [pc, #516]	; (8006fa4 <UART_SetConfig+0x228>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d9e:	4d82      	ldr	r5, [pc, #520]	; (8006fa8 <UART_SetConfig+0x22c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006da0:	4002      	ands	r2, r0
 8006da2:	68e0      	ldr	r0, [r4, #12]
 8006da4:	4302      	orrs	r2, r0
 8006da6:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006da8:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006daa:	42ab      	cmp	r3, r5
 8006dac:	d001      	beq.n	8006db2 <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8006dae:	6a22      	ldr	r2, [r4, #32]
 8006db0:	4310      	orrs	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	4e7d      	ldr	r6, [pc, #500]	; (8006fac <UART_SetConfig+0x230>)
 8006db6:	4032      	ands	r2, r6
 8006db8:	4302      	orrs	r2, r0
 8006dba:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dbc:	4a7c      	ldr	r2, [pc, #496]	; (8006fb0 <UART_SetConfig+0x234>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d10f      	bne.n	8006de2 <UART_SetConfig+0x66>
 8006dc2:	2203      	movs	r2, #3
 8006dc4:	4b7b      	ldr	r3, [pc, #492]	; (8006fb4 <UART_SetConfig+0x238>)
 8006dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dc8:	4013      	ands	r3, r2
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	4a7a      	ldr	r2, [pc, #488]	; (8006fb8 <UART_SetConfig+0x23c>)
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d910      	bls.n	8006df4 <UART_SetConfig+0x78>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dd2:	2380      	movs	r3, #128	; 0x80
 8006dd4:	021b      	lsls	r3, r3, #8
 8006dd6:	4299      	cmp	r1, r3
 8006dd8:	d000      	beq.n	8006ddc <UART_SetConfig+0x60>
 8006dda:	e0b7      	b.n	8006f4c <UART_SetConfig+0x1d0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006ddc:	f7ff f8ae 	bl	8005f3c <HAL_RCC_GetPCLK2Freq>
 8006de0:	e0d1      	b.n	8006f86 <UART_SetConfig+0x20a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006de2:	4a76      	ldr	r2, [pc, #472]	; (8006fbc <UART_SetConfig+0x240>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d119      	bne.n	8006e1c <UART_SetConfig+0xa0>
 8006de8:	200c      	movs	r0, #12
 8006dea:	4b72      	ldr	r3, [pc, #456]	; (8006fb4 <UART_SetConfig+0x238>)
 8006dec:	4a72      	ldr	r2, [pc, #456]	; (8006fb8 <UART_SetConfig+0x23c>)
 8006dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df0:	3203      	adds	r2, #3
 8006df2:	4003      	ands	r3, r0
 8006df4:	5cd0      	ldrb	r0, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006df6:	2380      	movs	r3, #128	; 0x80
 8006df8:	021b      	lsls	r3, r3, #8
 8006dfa:	4299      	cmp	r1, r3
 8006dfc:	d000      	beq.n	8006e00 <UART_SetConfig+0x84>
 8006dfe:	e089      	b.n	8006f14 <UART_SetConfig+0x198>
    switch (clocksource)
 8006e00:	2808      	cmp	r0, #8
 8006e02:	d900      	bls.n	8006e06 <UART_SetConfig+0x8a>
 8006e04:	e083      	b.n	8006f0e <UART_SetConfig+0x192>
 8006e06:	f7f9 f989 	bl	800011c <__gnu_thumb1_case_shi>
 8006e0a:	00bc      	.short	0x00bc
 8006e0c:	005cffe9 	.word	0x005cffe9
 8006e10:	007a0082 	.word	0x007a0082
 8006e14:	00820082 	.word	0x00820082
 8006e18:	007d0082 	.word	0x007d0082
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e1c:	4a68      	ldr	r2, [pc, #416]	; (8006fc0 <UART_SetConfig+0x244>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d100      	bne.n	8006e24 <UART_SetConfig+0xa8>
 8006e22:	e0aa      	b.n	8006f7a <UART_SetConfig+0x1fe>
 8006e24:	4a67      	ldr	r2, [pc, #412]	; (8006fc4 <UART_SetConfig+0x248>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d100      	bne.n	8006e2c <UART_SetConfig+0xb0>
 8006e2a:	e0a6      	b.n	8006f7a <UART_SetConfig+0x1fe>
 8006e2c:	42ab      	cmp	r3, r5
 8006e2e:	d000      	beq.n	8006e32 <UART_SetConfig+0xb6>
 8006e30:	e0af      	b.n	8006f92 <UART_SetConfig+0x216>
 8006e32:	21c0      	movs	r1, #192	; 0xc0
 8006e34:	2080      	movs	r0, #128	; 0x80
 8006e36:	4a5f      	ldr	r2, [pc, #380]	; (8006fb4 <UART_SetConfig+0x238>)
 8006e38:	0109      	lsls	r1, r1, #4
 8006e3a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8006e3c:	0100      	lsls	r0, r0, #4
 8006e3e:	400b      	ands	r3, r1
 8006e40:	4283      	cmp	r3, r0
 8006e42:	d017      	beq.n	8006e74 <UART_SetConfig+0xf8>
 8006e44:	d807      	bhi.n	8006e56 <UART_SetConfig+0xda>
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00a      	beq.n	8006e60 <UART_SetConfig+0xe4>
 8006e4a:	2280      	movs	r2, #128	; 0x80
 8006e4c:	00d2      	lsls	r2, r2, #3
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d034      	beq.n	8006ebc <UART_SetConfig+0x140>
        ret = HAL_ERROR;
 8006e52:	2001      	movs	r0, #1
 8006e54:	e00a      	b.n	8006e6c <UART_SetConfig+0xf0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e56:	428b      	cmp	r3, r1
 8006e58:	d1fb      	bne.n	8006e52 <UART_SetConfig+0xd6>
 8006e5a:	2380      	movs	r3, #128	; 0x80
 8006e5c:	021b      	lsls	r3, r3, #8
 8006e5e:	e013      	b.n	8006e88 <UART_SetConfig+0x10c>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006e60:	f7ff f85c 	bl	8005f1c <HAL_RCC_GetPCLK1Freq>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8006e64:	0003      	movs	r3, r0
    if (lpuart_ker_ck_pres != 0U)
 8006e66:	2000      	movs	r0, #0
 8006e68:	4283      	cmp	r3, r0
 8006e6a:	d10d      	bne.n	8006e88 <UART_SetConfig+0x10c>
  huart->RxISR = NULL;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8006e70:	6663      	str	r3, [r4, #100]	; 0x64
}
 8006e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e74:	2010      	movs	r0, #16
 8006e76:	6813      	ldr	r3, [r2, #0]
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8006e78:	4a53      	ldr	r2, [pc, #332]	; (8006fc8 <UART_SetConfig+0x24c>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e7a:	4003      	ands	r3, r0
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8006e7c:	4258      	negs	r0, r3
 8006e7e:	4143      	adcs	r3, r0
 8006e80:	4852      	ldr	r0, [pc, #328]	; (8006fcc <UART_SetConfig+0x250>)
 8006e82:	425b      	negs	r3, r3
 8006e84:	4003      	ands	r3, r0
 8006e86:	189b      	adds	r3, r3, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e88:	2103      	movs	r1, #3
 8006e8a:	6862      	ldr	r2, [r4, #4]
 8006e8c:	4351      	muls	r1, r2
 8006e8e:	4299      	cmp	r1, r3
 8006e90:	d8df      	bhi.n	8006e52 <UART_SetConfig+0xd6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e92:	0311      	lsls	r1, r2, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e94:	4299      	cmp	r1, r3
 8006e96:	d3dc      	bcc.n	8006e52 <UART_SetConfig+0xd6>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8006e98:	2700      	movs	r7, #0
 8006e9a:	0856      	lsrs	r6, r2, #1
 8006e9c:	0e19      	lsrs	r1, r3, #24
 8006e9e:	0218      	lsls	r0, r3, #8
 8006ea0:	1980      	adds	r0, r0, r6
 8006ea2:	4179      	adcs	r1, r7
 8006ea4:	003b      	movs	r3, r7
 8006ea6:	f7f9 fb3b 	bl	8000520 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006eaa:	4b49      	ldr	r3, [pc, #292]	; (8006fd0 <UART_SetConfig+0x254>)
 8006eac:	18c2      	adds	r2, r0, r3
 8006eae:	4b49      	ldr	r3, [pc, #292]	; (8006fd4 <UART_SetConfig+0x258>)
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d8ce      	bhi.n	8006e52 <UART_SetConfig+0xd6>
          huart->Instance->BRR = usartdiv;
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	60d8      	str	r0, [r3, #12]
 8006eb8:	0038      	movs	r0, r7
 8006eba:	e7d7      	b.n	8006e6c <UART_SetConfig+0xf0>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8006ebc:	f7fe fcae 	bl	800581c <HAL_RCC_GetSysClockFreq>
 8006ec0:	e7d0      	b.n	8006e64 <UART_SetConfig+0xe8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ec2:	4b3c      	ldr	r3, [pc, #240]	; (8006fb4 <UART_SetConfig+0x238>)
 8006ec4:	6861      	ldr	r1, [r4, #4]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	2310      	movs	r3, #16
 8006eca:	0848      	lsrs	r0, r1, #1
 8006ecc:	421a      	tst	r2, r3
 8006ece:	d014      	beq.n	8006efa <UART_SetConfig+0x17e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8006ed0:	4b41      	ldr	r3, [pc, #260]	; (8006fd8 <UART_SetConfig+0x25c>)
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006ed2:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006ed4:	f7f9 f936 	bl	8000144 <__udivsi3>
 8006ed8:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8006eda:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006edc:	001a      	movs	r2, r3
 8006ede:	493f      	ldr	r1, [pc, #252]	; (8006fdc <UART_SetConfig+0x260>)
 8006ee0:	3a10      	subs	r2, #16
 8006ee2:	428a      	cmp	r2, r1
 8006ee4:	d8b5      	bhi.n	8006e52 <UART_SetConfig+0xd6>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ee6:	220f      	movs	r2, #15
 8006ee8:	0019      	movs	r1, r3
 8006eea:	4391      	bics	r1, r2
 8006eec:	000a      	movs	r2, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006eee:	071b      	lsls	r3, r3, #28
      huart->Instance->BRR = brrtemp;
 8006ef0:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ef2:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	60cb      	str	r3, [r1, #12]
 8006ef8:	e7b8      	b.n	8006e6c <UART_SetConfig+0xf0>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006efa:	4b39      	ldr	r3, [pc, #228]	; (8006fe0 <UART_SetConfig+0x264>)
 8006efc:	e7e9      	b.n	8006ed2 <UART_SetConfig+0x156>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006efe:	f7fe fc8d 	bl	800581c <HAL_RCC_GetSysClockFreq>
 8006f02:	e040      	b.n	8006f86 <UART_SetConfig+0x20a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006f04:	6863      	ldr	r3, [r4, #4]
 8006f06:	0858      	lsrs	r0, r3, #1
 8006f08:	2380      	movs	r3, #128	; 0x80
 8006f0a:	025b      	lsls	r3, r3, #9
 8006f0c:	e03e      	b.n	8006f8c <UART_SetConfig+0x210>
        ret = HAL_ERROR;
 8006f0e:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8006f10:	2300      	movs	r3, #0
 8006f12:	e7e3      	b.n	8006edc <UART_SetConfig+0x160>
    switch (clocksource)
 8006f14:	2808      	cmp	r0, #8
 8006f16:	d840      	bhi.n	8006f9a <UART_SetConfig+0x21e>
 8006f18:	f7f9 f8f6 	bl	8000108 <__gnu_thumb1_case_uqi>
 8006f1c:	3f1b1805 	.word	0x3f1b1805
 8006f20:	3f3f3f27 	.word	0x3f3f3f27
 8006f24:	2a          	.byte	0x2a
 8006f25:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006f26:	f7fe fff9 	bl	8005f1c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006f2a:	6863      	ldr	r3, [r4, #4]
 8006f2c:	085b      	lsrs	r3, r3, #1
 8006f2e:	6861      	ldr	r1, [r4, #4]
 8006f30:	1818      	adds	r0, r3, r0
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8006f32:	f7f9 f907 	bl	8000144 <__udivsi3>
 8006f36:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f38:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f3a:	001a      	movs	r2, r3
 8006f3c:	4927      	ldr	r1, [pc, #156]	; (8006fdc <UART_SetConfig+0x260>)
 8006f3e:	3a10      	subs	r2, #16
 8006f40:	428a      	cmp	r2, r1
 8006f42:	d900      	bls.n	8006f46 <UART_SetConfig+0x1ca>
 8006f44:	e785      	b.n	8006e52 <UART_SetConfig+0xd6>
      huart->Instance->BRR = usartdiv;
 8006f46:	6822      	ldr	r2, [r4, #0]
 8006f48:	60d3      	str	r3, [r2, #12]
 8006f4a:	e78f      	b.n	8006e6c <UART_SetConfig+0xf0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006f4c:	f7fe fff6 	bl	8005f3c <HAL_RCC_GetPCLK2Freq>
 8006f50:	e7eb      	b.n	8006f2a <UART_SetConfig+0x1ae>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f52:	4b18      	ldr	r3, [pc, #96]	; (8006fb4 <UART_SetConfig+0x238>)
 8006f54:	6861      	ldr	r1, [r4, #4]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	2310      	movs	r3, #16
 8006f5a:	0848      	lsrs	r0, r1, #1
 8006f5c:	421a      	tst	r2, r3
 8006f5e:	d002      	beq.n	8006f66 <UART_SetConfig+0x1ea>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8006f60:	4b19      	ldr	r3, [pc, #100]	; (8006fc8 <UART_SetConfig+0x24c>)
 8006f62:	18c0      	adds	r0, r0, r3
 8006f64:	e7e5      	b.n	8006f32 <UART_SetConfig+0x1b6>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006f66:	4b1f      	ldr	r3, [pc, #124]	; (8006fe4 <UART_SetConfig+0x268>)
 8006f68:	e7fb      	b.n	8006f62 <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006f6a:	f7fe fc57 	bl	800581c <HAL_RCC_GetSysClockFreq>
 8006f6e:	e7dc      	b.n	8006f2a <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006f70:	6863      	ldr	r3, [r4, #4]
 8006f72:	0858      	lsrs	r0, r3, #1
 8006f74:	2380      	movs	r3, #128	; 0x80
 8006f76:	021b      	lsls	r3, r3, #8
 8006f78:	e7d9      	b.n	8006f2e <UART_SetConfig+0x1b2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f7a:	2380      	movs	r3, #128	; 0x80
 8006f7c:	021b      	lsls	r3, r3, #8
 8006f7e:	4299      	cmp	r1, r3
 8006f80:	d1d1      	bne.n	8006f26 <UART_SetConfig+0x1aa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006f82:	f7fe ffcb 	bl	8005f1c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006f86:	6863      	ldr	r3, [r4, #4]
 8006f88:	0040      	lsls	r0, r0, #1
 8006f8a:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006f8c:	6861      	ldr	r1, [r4, #4]
 8006f8e:	18c0      	adds	r0, r0, r3
 8006f90:	e7a0      	b.n	8006ed4 <UART_SetConfig+0x158>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f92:	2380      	movs	r3, #128	; 0x80
 8006f94:	021b      	lsls	r3, r3, #8
 8006f96:	4299      	cmp	r1, r3
 8006f98:	d0b9      	beq.n	8006f0e <UART_SetConfig+0x192>
 8006f9a:	2001      	movs	r0, #1
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	e7cc      	b.n	8006f3a <UART_SetConfig+0x1be>
 8006fa0:	efff69f3 	.word	0xefff69f3
 8006fa4:	ffffcfff 	.word	0xffffcfff
 8006fa8:	40004800 	.word	0x40004800
 8006fac:	fffff4ff 	.word	0xfffff4ff
 8006fb0:	40013800 	.word	0x40013800
 8006fb4:	40021000 	.word	0x40021000
 8006fb8:	080108d9 	.word	0x080108d9
 8006fbc:	40004400 	.word	0x40004400
 8006fc0:	40004c00 	.word	0x40004c00
 8006fc4:	40005000 	.word	0x40005000
 8006fc8:	003d0900 	.word	0x003d0900
 8006fcc:	00b71b00 	.word	0x00b71b00
 8006fd0:	fffffd00 	.word	0xfffffd00
 8006fd4:	000ffcff 	.word	0x000ffcff
 8006fd8:	007a1200 	.word	0x007a1200
 8006fdc:	0000ffef 	.word	0x0000ffef
 8006fe0:	01e84800 	.word	0x01e84800
 8006fe4:	00f42400 	.word	0x00f42400

08006fe8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fe8:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8006fea:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fec:	07da      	lsls	r2, r3, #31
 8006fee:	d506      	bpl.n	8006ffe <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ff0:	6801      	ldr	r1, [r0, #0]
 8006ff2:	4c28      	ldr	r4, [pc, #160]	; (8007094 <UART_AdvFeatureConfig+0xac>)
 8006ff4:	684a      	ldr	r2, [r1, #4]
 8006ff6:	4022      	ands	r2, r4
 8006ff8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8006ffa:	4322      	orrs	r2, r4
 8006ffc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ffe:	079a      	lsls	r2, r3, #30
 8007000:	d506      	bpl.n	8007010 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007002:	6801      	ldr	r1, [r0, #0]
 8007004:	4c24      	ldr	r4, [pc, #144]	; (8007098 <UART_AdvFeatureConfig+0xb0>)
 8007006:	684a      	ldr	r2, [r1, #4]
 8007008:	4022      	ands	r2, r4
 800700a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800700c:	4322      	orrs	r2, r4
 800700e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007010:	075a      	lsls	r2, r3, #29
 8007012:	d506      	bpl.n	8007022 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007014:	6801      	ldr	r1, [r0, #0]
 8007016:	4c21      	ldr	r4, [pc, #132]	; (800709c <UART_AdvFeatureConfig+0xb4>)
 8007018:	684a      	ldr	r2, [r1, #4]
 800701a:	4022      	ands	r2, r4
 800701c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800701e:	4322      	orrs	r2, r4
 8007020:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007022:	071a      	lsls	r2, r3, #28
 8007024:	d506      	bpl.n	8007034 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007026:	6801      	ldr	r1, [r0, #0]
 8007028:	4c1d      	ldr	r4, [pc, #116]	; (80070a0 <UART_AdvFeatureConfig+0xb8>)
 800702a:	684a      	ldr	r2, [r1, #4]
 800702c:	4022      	ands	r2, r4
 800702e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007030:	4322      	orrs	r2, r4
 8007032:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007034:	06da      	lsls	r2, r3, #27
 8007036:	d506      	bpl.n	8007046 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007038:	6801      	ldr	r1, [r0, #0]
 800703a:	4c1a      	ldr	r4, [pc, #104]	; (80070a4 <UART_AdvFeatureConfig+0xbc>)
 800703c:	688a      	ldr	r2, [r1, #8]
 800703e:	4022      	ands	r2, r4
 8007040:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8007042:	4322      	orrs	r2, r4
 8007044:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007046:	069a      	lsls	r2, r3, #26
 8007048:	d506      	bpl.n	8007058 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800704a:	6801      	ldr	r1, [r0, #0]
 800704c:	4c16      	ldr	r4, [pc, #88]	; (80070a8 <UART_AdvFeatureConfig+0xc0>)
 800704e:	688a      	ldr	r2, [r1, #8]
 8007050:	4022      	ands	r2, r4
 8007052:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8007054:	4322      	orrs	r2, r4
 8007056:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007058:	065a      	lsls	r2, r3, #25
 800705a:	d510      	bpl.n	800707e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800705c:	6801      	ldr	r1, [r0, #0]
 800705e:	4d13      	ldr	r5, [pc, #76]	; (80070ac <UART_AdvFeatureConfig+0xc4>)
 8007060:	684a      	ldr	r2, [r1, #4]
 8007062:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8007064:	402a      	ands	r2, r5
 8007066:	4322      	orrs	r2, r4
 8007068:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800706a:	2280      	movs	r2, #128	; 0x80
 800706c:	0352      	lsls	r2, r2, #13
 800706e:	4294      	cmp	r4, r2
 8007070:	d105      	bne.n	800707e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007072:	684a      	ldr	r2, [r1, #4]
 8007074:	4c0e      	ldr	r4, [pc, #56]	; (80070b0 <UART_AdvFeatureConfig+0xc8>)
 8007076:	4022      	ands	r2, r4
 8007078:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800707a:	4322      	orrs	r2, r4
 800707c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800707e:	061b      	lsls	r3, r3, #24
 8007080:	d506      	bpl.n	8007090 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007082:	6802      	ldr	r2, [r0, #0]
 8007084:	490b      	ldr	r1, [pc, #44]	; (80070b4 <UART_AdvFeatureConfig+0xcc>)
 8007086:	6853      	ldr	r3, [r2, #4]
 8007088:	400b      	ands	r3, r1
 800708a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800708c:	430b      	orrs	r3, r1
 800708e:	6053      	str	r3, [r2, #4]
}
 8007090:	bd30      	pop	{r4, r5, pc}
 8007092:	46c0      	nop			; (mov r8, r8)
 8007094:	fffdffff 	.word	0xfffdffff
 8007098:	fffeffff 	.word	0xfffeffff
 800709c:	fffbffff 	.word	0xfffbffff
 80070a0:	ffff7fff 	.word	0xffff7fff
 80070a4:	ffffefff 	.word	0xffffefff
 80070a8:	ffffdfff 	.word	0xffffdfff
 80070ac:	ffefffff 	.word	0xffefffff
 80070b0:	ff9fffff 	.word	0xff9fffff
 80070b4:	fff7ffff 	.word	0xfff7ffff

080070b8 <UART_WaitOnFlagUntilTimeout>:
{
 80070b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ba:	0004      	movs	r4, r0
 80070bc:	000d      	movs	r5, r1
 80070be:	0017      	movs	r7, r2
 80070c0:	001e      	movs	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070c2:	6822      	ldr	r2, [r4, #0]
 80070c4:	69d3      	ldr	r3, [r2, #28]
 80070c6:	402b      	ands	r3, r5
 80070c8:	1b5b      	subs	r3, r3, r5
 80070ca:	4259      	negs	r1, r3
 80070cc:	414b      	adcs	r3, r1
 80070ce:	42bb      	cmp	r3, r7
 80070d0:	d001      	beq.n	80070d6 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80070d2:	2000      	movs	r0, #0
 80070d4:	e01b      	b.n	800710e <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 80070d6:	9b06      	ldr	r3, [sp, #24]
 80070d8:	3301      	adds	r3, #1
 80070da:	d0f3      	beq.n	80070c4 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070dc:	f7fd fe26 	bl	8004d2c <HAL_GetTick>
 80070e0:	9b06      	ldr	r3, [sp, #24]
 80070e2:	1b80      	subs	r0, r0, r6
 80070e4:	4298      	cmp	r0, r3
 80070e6:	d801      	bhi.n	80070ec <UART_WaitOnFlagUntilTimeout+0x34>
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1ea      	bne.n	80070c2 <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070ec:	6823      	ldr	r3, [r4, #0]
 80070ee:	4908      	ldr	r1, [pc, #32]	; (8007110 <UART_WaitOnFlagUntilTimeout+0x58>)
 80070f0:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 80070f2:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070f4:	400a      	ands	r2, r1
 80070f6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070f8:	689a      	ldr	r2, [r3, #8]
 80070fa:	31a3      	adds	r1, #163	; 0xa3
 80070fc:	31ff      	adds	r1, #255	; 0xff
 80070fe:	438a      	bics	r2, r1
 8007100:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8007102:	2320      	movs	r3, #32
 8007104:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007106:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8007108:	2300      	movs	r3, #0
 800710a:	3470      	adds	r4, #112	; 0x70
 800710c:	7023      	strb	r3, [r4, #0]
}
 800710e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007110:	fffffe5f 	.word	0xfffffe5f

08007114 <UART_CheckIdleState>:
{
 8007114:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007116:	2600      	movs	r6, #0
{
 8007118:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800711a:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800711c:	f7fd fe06 	bl	8004d2c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007120:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8007122:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	071b      	lsls	r3, r3, #28
 8007128:	d415      	bmi.n	8007156 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	075b      	lsls	r3, r3, #29
 8007130:	d50a      	bpl.n	8007148 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007132:	2180      	movs	r1, #128	; 0x80
 8007134:	4b0e      	ldr	r3, [pc, #56]	; (8007170 <UART_CheckIdleState+0x5c>)
 8007136:	2200      	movs	r2, #0
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	0020      	movs	r0, r4
 800713c:	002b      	movs	r3, r5
 800713e:	03c9      	lsls	r1, r1, #15
 8007140:	f7ff ffba 	bl	80070b8 <UART_WaitOnFlagUntilTimeout>
 8007144:	2800      	cmp	r0, #0
 8007146:	d111      	bne.n	800716c <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8007148:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800714a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800714c:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800714e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8007150:	3470      	adds	r4, #112	; 0x70
 8007152:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8007154:	e00b      	b.n	800716e <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007156:	2180      	movs	r1, #128	; 0x80
 8007158:	4b05      	ldr	r3, [pc, #20]	; (8007170 <UART_CheckIdleState+0x5c>)
 800715a:	0032      	movs	r2, r6
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	0389      	lsls	r1, r1, #14
 8007160:	0003      	movs	r3, r0
 8007162:	0020      	movs	r0, r4
 8007164:	f7ff ffa8 	bl	80070b8 <UART_WaitOnFlagUntilTimeout>
 8007168:	2800      	cmp	r0, #0
 800716a:	d0de      	beq.n	800712a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800716c:	2003      	movs	r0, #3
}
 800716e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8007170:	01ffffff 	.word	0x01ffffff

08007174 <HAL_UART_Init>:
{
 8007174:	b510      	push	{r4, lr}
 8007176:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8007178:	d101      	bne.n	800717e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800717a:	2001      	movs	r0, #1
}
 800717c:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800717e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8007180:	2b00      	cmp	r3, #0
 8007182:	d104      	bne.n	800718e <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8007184:	0002      	movs	r2, r0
 8007186:	3270      	adds	r2, #112	; 0x70
 8007188:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800718a:	f008 fc77 	bl	800fa7c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800718e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8007190:	2101      	movs	r1, #1
 8007192:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007194:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8007196:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007198:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800719a:	438b      	bics	r3, r1
 800719c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800719e:	f7ff fded 	bl	8006d7c <UART_SetConfig>
 80071a2:	2801      	cmp	r0, #1
 80071a4:	d0e9      	beq.n	800717a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80071ac:	0020      	movs	r0, r4
 80071ae:	f7ff ff1b 	bl	8006fe8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071b2:	6823      	ldr	r3, [r4, #0]
 80071b4:	4907      	ldr	r1, [pc, #28]	; (80071d4 <HAL_UART_Init+0x60>)
 80071b6:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80071b8:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071ba:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071bc:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071c0:	689a      	ldr	r2, [r3, #8]
 80071c2:	438a      	bics	r2, r1
 80071c4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80071c6:	2201      	movs	r2, #1
 80071c8:	6819      	ldr	r1, [r3, #0]
 80071ca:	430a      	orrs	r2, r1
 80071cc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80071ce:	f7ff ffa1 	bl	8007114 <UART_CheckIdleState>
 80071d2:	e7d3      	b.n	800717c <HAL_UART_Init+0x8>
 80071d4:	ffffb7ff 	.word	0xffffb7ff

080071d8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80071d8:	4770      	bx	lr

080071da <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 80071da:	780a      	ldrb	r2, [r1, #0]
 80071dc:	7803      	ldrb	r3, [r0, #0]
 80071de:	4053      	eors	r3, r2
 80071e0:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 80071e2:	784a      	ldrb	r2, [r1, #1]
 80071e4:	7843      	ldrb	r3, [r0, #1]
 80071e6:	4053      	eors	r3, r2
 80071e8:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 80071ea:	788a      	ldrb	r2, [r1, #2]
 80071ec:	7883      	ldrb	r3, [r0, #2]
 80071ee:	4053      	eors	r3, r2
 80071f0:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 80071f2:	78ca      	ldrb	r2, [r1, #3]
 80071f4:	78c3      	ldrb	r3, [r0, #3]
 80071f6:	4053      	eors	r3, r2
 80071f8:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 80071fa:	790a      	ldrb	r2, [r1, #4]
 80071fc:	7903      	ldrb	r3, [r0, #4]
 80071fe:	4053      	eors	r3, r2
 8007200:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8007202:	794a      	ldrb	r2, [r1, #5]
 8007204:	7943      	ldrb	r3, [r0, #5]
 8007206:	4053      	eors	r3, r2
 8007208:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800720a:	798a      	ldrb	r2, [r1, #6]
 800720c:	7983      	ldrb	r3, [r0, #6]
 800720e:	4053      	eors	r3, r2
 8007210:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8007212:	79ca      	ldrb	r2, [r1, #7]
 8007214:	79c3      	ldrb	r3, [r0, #7]
 8007216:	4053      	eors	r3, r2
 8007218:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800721a:	7a0a      	ldrb	r2, [r1, #8]
 800721c:	7a03      	ldrb	r3, [r0, #8]
 800721e:	4053      	eors	r3, r2
 8007220:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8007222:	7a4a      	ldrb	r2, [r1, #9]
 8007224:	7a43      	ldrb	r3, [r0, #9]
 8007226:	4053      	eors	r3, r2
 8007228:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800722a:	7a8a      	ldrb	r2, [r1, #10]
 800722c:	7a83      	ldrb	r3, [r0, #10]
 800722e:	4053      	eors	r3, r2
 8007230:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8007232:	7aca      	ldrb	r2, [r1, #11]
 8007234:	7ac3      	ldrb	r3, [r0, #11]
 8007236:	4053      	eors	r3, r2
 8007238:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800723a:	7b0a      	ldrb	r2, [r1, #12]
 800723c:	7b03      	ldrb	r3, [r0, #12]
 800723e:	4053      	eors	r3, r2
 8007240:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8007242:	7b4a      	ldrb	r2, [r1, #13]
 8007244:	7b43      	ldrb	r3, [r0, #13]
 8007246:	4053      	eors	r3, r2
 8007248:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800724a:	7b8a      	ldrb	r2, [r1, #14]
 800724c:	7b83      	ldrb	r3, [r0, #14]
 800724e:	4053      	eors	r3, r2
 8007250:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8007252:	7bca      	ldrb	r2, [r1, #15]
 8007254:	7bc3      	ldrb	r3, [r0, #15]
 8007256:	4053      	eors	r3, r2
 8007258:	73c3      	strb	r3, [r0, #15]
#endif
}
 800725a:	4770      	bx	lr

0800725c <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800725c:	b510      	push	{r4, lr}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800725e:	780b      	ldrb	r3, [r1, #0]
 8007260:	7814      	ldrb	r4, [r2, #0]
 8007262:	4063      	eors	r3, r4
 8007264:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8007266:	7854      	ldrb	r4, [r2, #1]
 8007268:	784b      	ldrb	r3, [r1, #1]
 800726a:	4063      	eors	r3, r4
 800726c:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800726e:	7894      	ldrb	r4, [r2, #2]
 8007270:	788b      	ldrb	r3, [r1, #2]
 8007272:	4063      	eors	r3, r4
 8007274:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8007276:	78d4      	ldrb	r4, [r2, #3]
 8007278:	78cb      	ldrb	r3, [r1, #3]
 800727a:	4063      	eors	r3, r4
 800727c:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800727e:	7914      	ldrb	r4, [r2, #4]
 8007280:	790b      	ldrb	r3, [r1, #4]
 8007282:	4063      	eors	r3, r4
 8007284:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8007286:	7954      	ldrb	r4, [r2, #5]
 8007288:	794b      	ldrb	r3, [r1, #5]
 800728a:	4063      	eors	r3, r4
 800728c:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800728e:	7994      	ldrb	r4, [r2, #6]
 8007290:	798b      	ldrb	r3, [r1, #6]
 8007292:	4063      	eors	r3, r4
 8007294:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8007296:	79d4      	ldrb	r4, [r2, #7]
 8007298:	79cb      	ldrb	r3, [r1, #7]
 800729a:	4063      	eors	r3, r4
 800729c:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800729e:	7a14      	ldrb	r4, [r2, #8]
 80072a0:	7a0b      	ldrb	r3, [r1, #8]
 80072a2:	4063      	eors	r3, r4
 80072a4:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 80072a6:	7a4b      	ldrb	r3, [r1, #9]
 80072a8:	7a54      	ldrb	r4, [r2, #9]
 80072aa:	4063      	eors	r3, r4
 80072ac:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 80072ae:	7a8b      	ldrb	r3, [r1, #10]
 80072b0:	7a94      	ldrb	r4, [r2, #10]
 80072b2:	4063      	eors	r3, r4
 80072b4:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 80072b6:	7ad4      	ldrb	r4, [r2, #11]
 80072b8:	7acb      	ldrb	r3, [r1, #11]
 80072ba:	4063      	eors	r3, r4
 80072bc:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 80072be:	7b14      	ldrb	r4, [r2, #12]
 80072c0:	7b0b      	ldrb	r3, [r1, #12]
 80072c2:	4063      	eors	r3, r4
 80072c4:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 80072c6:	7b54      	ldrb	r4, [r2, #13]
 80072c8:	7b4b      	ldrb	r3, [r1, #13]
 80072ca:	4063      	eors	r3, r4
 80072cc:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 80072ce:	7b94      	ldrb	r4, [r2, #14]
 80072d0:	7b8b      	ldrb	r3, [r1, #14]
 80072d2:	4063      	eors	r3, r4
 80072d4:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 80072d6:	7bcb      	ldrb	r3, [r1, #15]
 80072d8:	7bd2      	ldrb	r2, [r2, #15]
 80072da:	4053      	eors	r3, r2
 80072dc:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 80072de:	bd10      	pop	{r4, pc}

080072e0 <aes_set_key>:

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
    uint8_t cc, rc, hi;

    switch( keylen )
 80072e0:	000b      	movs	r3, r1
{
 80072e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072e4:	3b10      	subs	r3, #16
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	000e      	movs	r6, r1
 80072ea:	0014      	movs	r4, r2
 80072ec:	b087      	sub	sp, #28
 80072ee:	2b10      	cmp	r3, #16
 80072f0:	d805      	bhi.n	80072fe <aes_set_key+0x1e>
 80072f2:	2201      	movs	r2, #1
 80072f4:	409a      	lsls	r2, r3
 80072f6:	0013      	movs	r3, r2
 80072f8:	4a3a      	ldr	r2, [pc, #232]	; (80073e4 <aes_set_key+0x104>)
 80072fa:	4213      	tst	r3, r2
 80072fc:	d105      	bne.n	800730a <aes_set_key+0x2a>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 80072fe:	2300      	movs	r3, #0
        return ( uint8_t )-1;
 8007300:	20ff      	movs	r0, #255	; 0xff
        ctx->rnd = 0;
 8007302:	34f0      	adds	r4, #240	; 0xf0
 8007304:	7023      	strb	r3, [r4, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8007306:	b007      	add	sp, #28
 8007308:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while( nn-- )
 800730a:	2300      	movs	r3, #0
 800730c:	429e      	cmp	r6, r3
 800730e:	d153      	bne.n	80073b8 <aes_set_key+0xd8>
    hi = (keylen + 28) << 2;
 8007310:	0033      	movs	r3, r6
    ctx->rnd = (hi >> 4) - 1;
 8007312:	0022      	movs	r2, r4
    hi = (keylen + 28) << 2;
 8007314:	331c      	adds	r3, #28
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	b2db      	uxtb	r3, r3
 800731a:	9305      	str	r3, [sp, #20]
    ctx->rnd = (hi >> 4) - 1;
 800731c:	091b      	lsrs	r3, r3, #4
 800731e:	3b01      	subs	r3, #1
 8007320:	32f0      	adds	r2, #240	; 0xf0
 8007322:	7013      	strb	r3, [r2, #0]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007324:	2301      	movs	r3, #1
    ctx->rnd = (hi >> 4) - 1;
 8007326:	0035      	movs	r5, r6
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007328:	9304      	str	r3, [sp, #16]
        t0 = ctx->ksch[cc - 4];
 800732a:	1963      	adds	r3, r4, r5
 800732c:	1f1a      	subs	r2, r3, #4
 800732e:	7817      	ldrb	r7, [r2, #0]
        t1 = ctx->ksch[cc - 3];
 8007330:	1eda      	subs	r2, r3, #3
 8007332:	7812      	ldrb	r2, [r2, #0]
        if( cc % keylen == 0 )
 8007334:	0031      	movs	r1, r6
        t1 = ctx->ksch[cc - 3];
 8007336:	9201      	str	r2, [sp, #4]
        t2 = ctx->ksch[cc - 2];
 8007338:	1e9a      	subs	r2, r3, #2
        t3 = ctx->ksch[cc - 1];
 800733a:	3b01      	subs	r3, #1
        t2 = ctx->ksch[cc - 2];
 800733c:	7812      	ldrb	r2, [r2, #0]
        t3 = ctx->ksch[cc - 1];
 800733e:	781b      	ldrb	r3, [r3, #0]
        if( cc % keylen == 0 )
 8007340:	0028      	movs	r0, r5
        t2 = ctx->ksch[cc - 2];
 8007342:	9202      	str	r2, [sp, #8]
        t3 = ctx->ksch[cc - 1];
 8007344:	9303      	str	r3, [sp, #12]
        if( cc % keylen == 0 )
 8007346:	f7f8 ff83 	bl	8000250 <__aeabi_uidivmod>
 800734a:	b2c9      	uxtb	r1, r1
 800734c:	2900      	cmp	r1, #0
 800734e:	d137      	bne.n	80073c0 <aes_set_key+0xe0>
            t0 = s_box(t1) ^ rc;
 8007350:	4b25      	ldr	r3, [pc, #148]	; (80073e8 <aes_set_key+0x108>)
 8007352:	9a01      	ldr	r2, [sp, #4]
            t1 = s_box(t2);
 8007354:	9902      	ldr	r1, [sp, #8]
            t0 = s_box(t1) ^ rc;
 8007356:	5c9a      	ldrb	r2, [r3, r2]
 8007358:	9b04      	ldr	r3, [sp, #16]
 800735a:	405a      	eors	r2, r3
            t1 = s_box(t2);
 800735c:	4b22      	ldr	r3, [pc, #136]	; (80073e8 <aes_set_key+0x108>)
 800735e:	5c5b      	ldrb	r3, [r3, r1]
            t2 = s_box(t3);
 8007360:	9903      	ldr	r1, [sp, #12]
            t1 = s_box(t2);
 8007362:	9301      	str	r3, [sp, #4]
            t2 = s_box(t3);
 8007364:	4b20      	ldr	r3, [pc, #128]	; (80073e8 <aes_set_key+0x108>)
 8007366:	5c5b      	ldrb	r3, [r3, r1]
            rc = f2(rc);
 8007368:	211b      	movs	r1, #27
            t2 = s_box(t3);
 800736a:	9302      	str	r3, [sp, #8]
            t3 = s_box(tt);
 800736c:	4b1e      	ldr	r3, [pc, #120]	; (80073e8 <aes_set_key+0x108>)
 800736e:	5ddb      	ldrb	r3, [r3, r7]
            t0 = s_box(t1) ^ rc;
 8007370:	0017      	movs	r7, r2
            t3 = s_box(tt);
 8007372:	9303      	str	r3, [sp, #12]
            rc = f2(rc);
 8007374:	9b04      	ldr	r3, [sp, #16]
 8007376:	09db      	lsrs	r3, r3, #7
 8007378:	434b      	muls	r3, r1
 800737a:	9904      	ldr	r1, [sp, #16]
 800737c:	0049      	lsls	r1, r1, #1
 800737e:	404b      	eors	r3, r1
 8007380:	b2db      	uxtb	r3, r3
 8007382:	9304      	str	r3, [sp, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8007384:	1bab      	subs	r3, r5, r6
 8007386:	b2db      	uxtb	r3, r3
 8007388:	5ce2      	ldrb	r2, [r4, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800738a:	18e3      	adds	r3, r4, r3
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800738c:	4057      	eors	r7, r2
 800738e:	5567      	strb	r7, [r4, r5]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8007390:	785a      	ldrb	r2, [r3, #1]
 8007392:	9801      	ldr	r0, [sp, #4]
 8007394:	1961      	adds	r1, r4, r5
 8007396:	4050      	eors	r0, r2
 8007398:	7048      	strb	r0, [r1, #1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800739a:	789a      	ldrb	r2, [r3, #2]
 800739c:	9802      	ldr	r0, [sp, #8]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800739e:	3504      	adds	r5, #4
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 80073a0:	4050      	eors	r0, r2
 80073a2:	7088      	strb	r0, [r1, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80073a4:	78db      	ldrb	r3, [r3, #3]
 80073a6:	9a03      	ldr	r2, [sp, #12]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80073a8:	b2ed      	uxtb	r5, r5
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80073aa:	405a      	eors	r2, r3
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80073ac:	9b05      	ldr	r3, [sp, #20]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80073ae:	70ca      	strb	r2, [r1, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80073b0:	42ab      	cmp	r3, r5
 80073b2:	d8ba      	bhi.n	800732a <aes_set_key+0x4a>
    return 0;
 80073b4:	2000      	movs	r0, #0
 80073b6:	e7a6      	b.n	8007306 <aes_set_key+0x26>
        *d++ = *s++;
 80073b8:	5cc2      	ldrb	r2, [r0, r3]
 80073ba:	54e2      	strb	r2, [r4, r3]
 80073bc:	3301      	adds	r3, #1
 80073be:	e7a5      	b.n	800730c <aes_set_key+0x2c>
        else if( keylen > 24 && cc % keylen == 16 )
 80073c0:	2e18      	cmp	r6, #24
 80073c2:	d9df      	bls.n	8007384 <aes_set_key+0xa4>
 80073c4:	2910      	cmp	r1, #16
 80073c6:	d1dd      	bne.n	8007384 <aes_set_key+0xa4>
            t1 = s_box(t1);
 80073c8:	9a01      	ldr	r2, [sp, #4]
            t0 = s_box(t0);
 80073ca:	4b07      	ldr	r3, [pc, #28]	; (80073e8 <aes_set_key+0x108>)
 80073cc:	5ddf      	ldrb	r7, [r3, r7]
            t1 = s_box(t1);
 80073ce:	5c9b      	ldrb	r3, [r3, r2]
            t2 = s_box(t2);
 80073d0:	9a02      	ldr	r2, [sp, #8]
            t1 = s_box(t1);
 80073d2:	9301      	str	r3, [sp, #4]
            t2 = s_box(t2);
 80073d4:	4b04      	ldr	r3, [pc, #16]	; (80073e8 <aes_set_key+0x108>)
 80073d6:	5c9b      	ldrb	r3, [r3, r2]
            t3 = s_box(t3);
 80073d8:	9a03      	ldr	r2, [sp, #12]
            t2 = s_box(t2);
 80073da:	9302      	str	r3, [sp, #8]
            t3 = s_box(t3);
 80073dc:	4b02      	ldr	r3, [pc, #8]	; (80073e8 <aes_set_key+0x108>)
 80073de:	5c9b      	ldrb	r3, [r3, r2]
 80073e0:	9303      	str	r3, [sp, #12]
 80073e2:	e7cf      	b.n	8007384 <aes_set_key+0xa4>
 80073e4:	00010101 	.word	0x00010101
 80073e8:	08010ae9 	.word	0x08010ae9

080073ec <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
 80073ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ee:	b0a5      	sub	sp, #148	; 0x94
 80073f0:	0016      	movs	r6, r2
 80073f2:	911f      	str	r1, [sp, #124]	; 0x7c
    if( ctx->rnd )
 80073f4:	32f0      	adds	r2, #240	; 0xf0
 80073f6:	7812      	ldrb	r2, [r2, #0]
{
 80073f8:	0003      	movs	r3, r0
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
    }
    else
        return ( uint8_t )-1;
 80073fa:	20ff      	movs	r0, #255	; 0xff
    if( ctx->rnd )
 80073fc:	2a00      	cmp	r2, #0
 80073fe:	d100      	bne.n	8007402 <aes_encrypt+0x16>
 8007400:	e08a      	b.n	8007518 <aes_encrypt+0x12c>
        copy_and_key( s1, in, ctx->ksch );
 8007402:	0032      	movs	r2, r6
 8007404:	0019      	movs	r1, r3
 8007406:	a820      	add	r0, sp, #128	; 0x80
 8007408:	f7ff ff28 	bl	800725c <copy_and_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800740c:	2501      	movs	r5, #1
 800740e:	012a      	lsls	r2, r5, #4
 8007410:	18b3      	adds	r3, r6, r2
 8007412:	469c      	mov	ip, r3
 8007414:	ab20      	add	r3, sp, #128	; 0x80
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	9301      	str	r3, [sp, #4]
 800741a:	ab20      	add	r3, sp, #128	; 0x80
 800741c:	795b      	ldrb	r3, [r3, #5]
 800741e:	9302      	str	r3, [sp, #8]
 8007420:	ab20      	add	r3, sp, #128	; 0x80
 8007422:	7a9f      	ldrb	r7, [r3, #10]
 8007424:	4b91      	ldr	r3, [pc, #580]	; (800766c <aes_encrypt+0x280>)
 8007426:	5dda      	ldrb	r2, [r3, r7]
 8007428:	9203      	str	r2, [sp, #12]
 800742a:	aa20      	add	r2, sp, #128	; 0x80
 800742c:	7bd2      	ldrb	r2, [r2, #15]
 800742e:	9204      	str	r2, [sp, #16]
 8007430:	5c9a      	ldrb	r2, [r3, r2]
 8007432:	9205      	str	r2, [sp, #20]
 8007434:	9a01      	ldr	r2, [sp, #4]
 8007436:	5c98      	ldrb	r0, [r3, r2]
 8007438:	9a02      	ldr	r2, [sp, #8]
 800743a:	5c9a      	ldrb	r2, [r3, r2]
 800743c:	9206      	str	r2, [sp, #24]
 800743e:	aa20      	add	r2, sp, #128	; 0x80
 8007440:	7912      	ldrb	r2, [r2, #4]
 8007442:	9207      	str	r2, [sp, #28]
 8007444:	aa20      	add	r2, sp, #128	; 0x80
 8007446:	7a52      	ldrb	r2, [r2, #9]
 8007448:	9208      	str	r2, [sp, #32]
 800744a:	aa20      	add	r2, sp, #128	; 0x80
 800744c:	7b92      	ldrb	r2, [r2, #14]
 800744e:	9209      	str	r2, [sp, #36]	; 0x24
 8007450:	5c9a      	ldrb	r2, [r3, r2]
 8007452:	920a      	str	r2, [sp, #40]	; 0x28
 8007454:	aa20      	add	r2, sp, #128	; 0x80
 8007456:	78d2      	ldrb	r2, [r2, #3]
 8007458:	920b      	str	r2, [sp, #44]	; 0x2c
 800745a:	5c9a      	ldrb	r2, [r3, r2]
 800745c:	920c      	str	r2, [sp, #48]	; 0x30
 800745e:	9a07      	ldr	r2, [sp, #28]
 8007460:	5c9a      	ldrb	r2, [r3, r2]
 8007462:	920d      	str	r2, [sp, #52]	; 0x34
 8007464:	9a08      	ldr	r2, [sp, #32]
 8007466:	5c9a      	ldrb	r2, [r3, r2]
 8007468:	920e      	str	r2, [sp, #56]	; 0x38
 800746a:	aa20      	add	r2, sp, #128	; 0x80
 800746c:	7a12      	ldrb	r2, [r2, #8]
 800746e:	920f      	str	r2, [sp, #60]	; 0x3c
 8007470:	aa20      	add	r2, sp, #128	; 0x80
 8007472:	7b52      	ldrb	r2, [r2, #13]
 8007474:	9210      	str	r2, [sp, #64]	; 0x40
 8007476:	aa20      	add	r2, sp, #128	; 0x80
 8007478:	7892      	ldrb	r2, [r2, #2]
 800747a:	9211      	str	r2, [sp, #68]	; 0x44
 800747c:	5c9a      	ldrb	r2, [r3, r2]
 800747e:	9212      	str	r2, [sp, #72]	; 0x48
 8007480:	aa20      	add	r2, sp, #128	; 0x80
 8007482:	79d2      	ldrb	r2, [r2, #7]
 8007484:	9213      	str	r2, [sp, #76]	; 0x4c
 8007486:	5c9a      	ldrb	r2, [r3, r2]
 8007488:	9214      	str	r2, [sp, #80]	; 0x50
 800748a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800748c:	5c9a      	ldrb	r2, [r3, r2]
 800748e:	9215      	str	r2, [sp, #84]	; 0x54
 8007490:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007492:	5c9a      	ldrb	r2, [r3, r2]
 8007494:	9216      	str	r2, [sp, #88]	; 0x58
 8007496:	aa20      	add	r2, sp, #128	; 0x80
 8007498:	7b12      	ldrb	r2, [r2, #12]
 800749a:	9217      	str	r2, [sp, #92]	; 0x5c
 800749c:	aa20      	add	r2, sp, #128	; 0x80
 800749e:	7852      	ldrb	r2, [r2, #1]
 80074a0:	9218      	str	r2, [sp, #96]	; 0x60
 80074a2:	aa20      	add	r2, sp, #128	; 0x80
 80074a4:	7992      	ldrb	r2, [r2, #6]
 80074a6:	9219      	str	r2, [sp, #100]	; 0x64
 80074a8:	5c9a      	ldrb	r2, [r3, r2]
 80074aa:	921a      	str	r2, [sp, #104]	; 0x68
 80074ac:	aa20      	add	r2, sp, #128	; 0x80
 80074ae:	7ad2      	ldrb	r2, [r2, #11]
 80074b0:	921b      	str	r2, [sp, #108]	; 0x6c
 80074b2:	5c9a      	ldrb	r2, [r3, r2]
 80074b4:	921c      	str	r2, [sp, #112]	; 0x70
 80074b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80074b8:	5c9a      	ldrb	r2, [r3, r2]
 80074ba:	921d      	str	r2, [sp, #116]	; 0x74
 80074bc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80074be:	5c9b      	ldrb	r3, [r3, r2]
 80074c0:	931e      	str	r3, [sp, #120]	; 0x78
 80074c2:	0033      	movs	r3, r6
 80074c4:	33f0      	adds	r3, #240	; 0xf0
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	42ab      	cmp	r3, r5
 80074ca:	d827      	bhi.n	800751c <aes_encrypt+0x130>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 80074cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80074ce:	ab20      	add	r3, sp, #128	; 0x80
 80074d0:	711a      	strb	r2, [r3, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 80074d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 80074d4:	7018      	strb	r0, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 80074d6:	721a      	strb	r2, [r3, #8]
 80074d8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80074da:	981f      	ldr	r0, [sp, #124]	; 0x7c
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 80074dc:	731a      	strb	r2, [r3, #12]
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 80074de:	9a06      	ldr	r2, [sp, #24]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80074e0:	0019      	movs	r1, r3
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 80074e2:	705a      	strb	r2, [r3, #1]
 80074e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074e6:	715a      	strb	r2, [r3, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 80074e8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80074ea:	725a      	strb	r2, [r3, #9]
 80074ec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80074ee:	735a      	strb	r2, [r3, #13]
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 80074f0:	9a03      	ldr	r2, [sp, #12]
 80074f2:	709a      	strb	r2, [r3, #2]
 80074f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80074f6:	729a      	strb	r2, [r3, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 80074f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074fa:	719a      	strb	r2, [r3, #6]
 80074fc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80074fe:	739a      	strb	r2, [r3, #14]
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8007500:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007502:	73da      	strb	r2, [r3, #15]
 8007504:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007506:	72da      	strb	r2, [r3, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8007508:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800750a:	71da      	strb	r2, [r3, #7]
 800750c:	9a05      	ldr	r2, [sp, #20]
 800750e:	70da      	strb	r2, [r3, #3]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8007510:	4662      	mov	r2, ip
 8007512:	f7ff fea3 	bl	800725c <copy_and_key>
    return 0;
 8007516:	2000      	movs	r0, #0
}
 8007518:	b025      	add	sp, #148	; 0x94
 800751a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800751c:	4b54      	ldr	r3, [pc, #336]	; (8007670 <aes_encrypt+0x284>)
 800751e:	9c01      	ldr	r4, [sp, #4]
 8007520:	9905      	ldr	r1, [sp, #20]
 8007522:	9a03      	ldr	r2, [sp, #12]
 8007524:	5d1c      	ldrb	r4, [r3, r4]
 8007526:	404a      	eors	r2, r1
 8007528:	4054      	eors	r4, r2
 800752a:	9902      	ldr	r1, [sp, #8]
 800752c:	4a51      	ldr	r2, [pc, #324]	; (8007674 <aes_encrypt+0x288>)
        for( r = 1 ; r < ctx->rnd ; ++r )
 800752e:	3501      	adds	r5, #1
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8007530:	5c51      	ldrb	r1, [r2, r1]
        for( r = 1 ; r < ctx->rnd ; ++r )
 8007532:	b2ed      	uxtb	r5, r5
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8007534:	404c      	eors	r4, r1
 8007536:	a920      	add	r1, sp, #128	; 0x80
 8007538:	700c      	strb	r4, [r1, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800753a:	9c02      	ldr	r4, [sp, #8]
 800753c:	9905      	ldr	r1, [sp, #20]
 800753e:	5d1c      	ldrb	r4, [r3, r4]
 8007540:	4041      	eors	r1, r0
 8007542:	4061      	eors	r1, r4
 8007544:	5dd4      	ldrb	r4, [r2, r7]
 8007546:	4061      	eors	r1, r4
 8007548:	ac20      	add	r4, sp, #128	; 0x80
 800754a:	7061      	strb	r1, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800754c:	9906      	ldr	r1, [sp, #24]
 800754e:	4048      	eors	r0, r1
 8007550:	5dd9      	ldrb	r1, [r3, r7]
 8007552:	4048      	eors	r0, r1
 8007554:	9904      	ldr	r1, [sp, #16]
 8007556:	5c51      	ldrb	r1, [r2, r1]
 8007558:	4048      	eors	r0, r1
 800755a:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800755c:	9903      	ldr	r1, [sp, #12]
 800755e:	9806      	ldr	r0, [sp, #24]
 8007560:	4041      	eors	r1, r0
 8007562:	9801      	ldr	r0, [sp, #4]
 8007564:	5c10      	ldrb	r0, [r2, r0]
 8007566:	4041      	eors	r1, r0
 8007568:	9804      	ldr	r0, [sp, #16]
 800756a:	5c18      	ldrb	r0, [r3, r0]
 800756c:	4041      	eors	r1, r0
 800756e:	70e1      	strb	r1, [r4, #3]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8007570:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007572:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007574:	4041      	eors	r1, r0
 8007576:	9807      	ldr	r0, [sp, #28]
 8007578:	5c18      	ldrb	r0, [r3, r0]
 800757a:	4041      	eors	r1, r0
 800757c:	9808      	ldr	r0, [sp, #32]
 800757e:	5c10      	ldrb	r0, [r2, r0]
 8007580:	4041      	eors	r1, r0
 8007582:	7121      	strb	r1, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8007584:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007586:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007588:	4041      	eors	r1, r0
 800758a:	9808      	ldr	r0, [sp, #32]
 800758c:	5c18      	ldrb	r0, [r3, r0]
 800758e:	4041      	eors	r1, r0
 8007590:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007592:	5c10      	ldrb	r0, [r2, r0]
 8007594:	4041      	eors	r1, r0
 8007596:	7161      	strb	r1, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8007598:	980e      	ldr	r0, [sp, #56]	; 0x38
 800759a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800759c:	4041      	eors	r1, r0
 800759e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075a0:	5c18      	ldrb	r0, [r3, r0]
 80075a2:	4041      	eors	r1, r0
 80075a4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80075a6:	5c10      	ldrb	r0, [r2, r0]
 80075a8:	4041      	eors	r1, r0
 80075aa:	71a1      	strb	r1, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 80075ac:	980e      	ldr	r0, [sp, #56]	; 0x38
 80075ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80075b0:	4041      	eors	r1, r0
 80075b2:	9807      	ldr	r0, [sp, #28]
 80075b4:	5c10      	ldrb	r0, [r2, r0]
 80075b6:	4041      	eors	r1, r0
 80075b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80075ba:	5c18      	ldrb	r0, [r3, r0]
 80075bc:	4041      	eors	r1, r0
 80075be:	71e1      	strb	r1, [r4, #7]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 80075c0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80075c2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80075c4:	4041      	eors	r1, r0
 80075c6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80075c8:	5c18      	ldrb	r0, [r3, r0]
 80075ca:	4041      	eors	r1, r0
 80075cc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80075ce:	5c10      	ldrb	r0, [r2, r0]
 80075d0:	4041      	eors	r1, r0
 80075d2:	7221      	strb	r1, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 80075d4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80075d6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80075d8:	4041      	eors	r1, r0
 80075da:	9810      	ldr	r0, [sp, #64]	; 0x40
 80075dc:	5c18      	ldrb	r0, [r3, r0]
 80075de:	4041      	eors	r1, r0
 80075e0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80075e2:	5c10      	ldrb	r0, [r2, r0]
 80075e4:	4041      	eors	r1, r0
 80075e6:	7261      	strb	r1, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 80075e8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80075ea:	9915      	ldr	r1, [sp, #84]	; 0x54
 80075ec:	4041      	eors	r1, r0
 80075ee:	9811      	ldr	r0, [sp, #68]	; 0x44
 80075f0:	5c18      	ldrb	r0, [r3, r0]
 80075f2:	4041      	eors	r1, r0
 80075f4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80075f6:	5c10      	ldrb	r0, [r2, r0]
 80075f8:	4041      	eors	r1, r0
 80075fa:	72a1      	strb	r1, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 80075fc:	9816      	ldr	r0, [sp, #88]	; 0x58
 80075fe:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007600:	4041      	eors	r1, r0
 8007602:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007604:	5c10      	ldrb	r0, [r2, r0]
 8007606:	4041      	eors	r1, r0
 8007608:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800760a:	5c18      	ldrb	r0, [r3, r0]
 800760c:	4041      	eors	r1, r0
 800760e:	72e1      	strb	r1, [r4, #11]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8007610:	981c      	ldr	r0, [sp, #112]	; 0x70
 8007612:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007614:	4041      	eors	r1, r0
 8007616:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007618:	5c18      	ldrb	r0, [r3, r0]
 800761a:	4041      	eors	r1, r0
 800761c:	9818      	ldr	r0, [sp, #96]	; 0x60
 800761e:	5c10      	ldrb	r0, [r2, r0]
 8007620:	4041      	eors	r1, r0
 8007622:	7321      	strb	r1, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8007624:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007626:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007628:	4041      	eors	r1, r0
 800762a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800762c:	5c18      	ldrb	r0, [r3, r0]
 800762e:	4041      	eors	r1, r0
 8007630:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007632:	5c10      	ldrb	r0, [r2, r0]
 8007634:	4041      	eors	r1, r0
 8007636:	7361      	strb	r1, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8007638:	991d      	ldr	r1, [sp, #116]	; 0x74
 800763a:	981e      	ldr	r0, [sp, #120]	; 0x78
 800763c:	4041      	eors	r1, r0
 800763e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007640:	5c18      	ldrb	r0, [r3, r0]
 8007642:	4041      	eors	r1, r0
 8007644:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007646:	5c10      	ldrb	r0, [r2, r0]
 8007648:	4041      	eors	r1, r0
 800764a:	73a1      	strb	r1, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800764c:	981e      	ldr	r0, [sp, #120]	; 0x78
 800764e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007650:	4041      	eors	r1, r0
 8007652:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007654:	5c12      	ldrb	r2, [r2, r0]
    xor_block(d, k);
 8007656:	0020      	movs	r0, r4
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8007658:	404a      	eors	r2, r1
 800765a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800765c:	5c5b      	ldrb	r3, [r3, r1]
    xor_block(d, k);
 800765e:	4661      	mov	r1, ip
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8007660:	4053      	eors	r3, r2
 8007662:	73e3      	strb	r3, [r4, #15]
    xor_block(d, k);
 8007664:	f7ff fdb9 	bl	80071da <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8007668:	e6d1      	b.n	800740e <aes_encrypt+0x22>
 800766a:	46c0      	nop			; (mov r8, r8)
 800766c:	08010ae9 	.word	0x08010ae9
 8007670:	080109e9 	.word	0x080109e9
 8007674:	080108e9 	.word	0x080108e9

08007678 <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
 8007678:	b510      	push	{r4, lr}
 800767a:	0004      	movs	r4, r0
            memset1(ctx->X, 0, sizeof ctx->X);
 800767c:	2210      	movs	r2, #16
 800767e:	2100      	movs	r1, #0
 8007680:	30f1      	adds	r0, #241	; 0xf1
 8007682:	f007 f9b3 	bl	800e9ec <memset1>
            ctx->M_n = 0;
 8007686:	0023      	movs	r3, r4
 8007688:	2100      	movs	r1, #0
 800768a:	33fc      	adds	r3, #252	; 0xfc
        memset1(ctx->rijndael.ksch, '\0', 240);
 800768c:	22f0      	movs	r2, #240	; 0xf0
 800768e:	0020      	movs	r0, r4
            ctx->M_n = 0;
 8007690:	6199      	str	r1, [r3, #24]
        memset1(ctx->rijndael.ksch, '\0', 240);
 8007692:	f007 f9ab 	bl	800e9ec <memset1>
}
 8007696:	bd10      	pop	{r4, pc}

08007698 <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
 8007698:	b510      	push	{r4, lr}
 800769a:	0002      	movs	r2, r0
 800769c:	0008      	movs	r0, r1
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 800769e:	2110      	movs	r1, #16
 80076a0:	f7ff fe1e 	bl	80072e0 <aes_set_key>
}
 80076a4:	bd10      	pop	{r4, pc}

080076a6 <AES_CMAC_Update>:
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
 80076a6:	0003      	movs	r3, r0
{
 80076a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076aa:	0004      	movs	r4, r0
            if (ctx->M_n > 0) {
 80076ac:	33fc      	adds	r3, #252	; 0xfc
 80076ae:	6998      	ldr	r0, [r3, #24]
 80076b0:	1ca3      	adds	r3, r4, #2
{
 80076b2:	b087      	sub	sp, #28
 80076b4:	33ff      	adds	r3, #255	; 0xff
 80076b6:	000e      	movs	r6, r1
 80076b8:	0015      	movs	r5, r2
 80076ba:	9301      	str	r3, [sp, #4]
            if (ctx->M_n > 0) {
 80076bc:	2800      	cmp	r0, #0
 80076be:	d02a      	beq.n	8007716 <AES_CMAC_Update+0x70>
                  mlen = MIN(16 - ctx->M_n, len);
 80076c0:	2710      	movs	r7, #16
 80076c2:	1a3f      	subs	r7, r7, r0
 80076c4:	9700      	str	r7, [sp, #0]
 80076c6:	4297      	cmp	r7, r2
 80076c8:	d900      	bls.n	80076cc <AES_CMAC_Update+0x26>
 80076ca:	9200      	str	r2, [sp, #0]
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 80076cc:	466b      	mov	r3, sp
 80076ce:	881a      	ldrh	r2, [r3, #0]
 80076d0:	1ca3      	adds	r3, r4, #2
 80076d2:	33ff      	adds	r3, #255	; 0xff
 80076d4:	0031      	movs	r1, r6
 80076d6:	1818      	adds	r0, r3, r0
 80076d8:	f007 f973 	bl	800e9c2 <memcpy1>
                    ctx->M_n += mlen;
 80076dc:	0022      	movs	r2, r4
 80076de:	32fc      	adds	r2, #252	; 0xfc
 80076e0:	6991      	ldr	r1, [r2, #24]
 80076e2:	9b00      	ldr	r3, [sp, #0]
 80076e4:	185b      	adds	r3, r3, r1
 80076e6:	6193      	str	r3, [r2, #24]
                    if (ctx->M_n < 16 || len == mlen)
 80076e8:	2b0f      	cmp	r3, #15
 80076ea:	d91d      	bls.n	8007728 <AES_CMAC_Update+0x82>
 80076ec:	42af      	cmp	r7, r5
 80076ee:	d21b      	bcs.n	8007728 <AES_CMAC_Update+0x82>
 80076f0:	0023      	movs	r3, r4
 80076f2:	33f1      	adds	r3, #241	; 0xf1
 80076f4:	0018      	movs	r0, r3
 80076f6:	1ca1      	adds	r1, r4, #2
 80076f8:	31ff      	adds	r1, #255	; 0xff
                            return;
                   XOR(ctx->M_last, ctx->X);
 80076fa:	781a      	ldrb	r2, [r3, #0]
 80076fc:	7c1f      	ldrb	r7, [r3, #16]
 80076fe:	407a      	eors	r2, r7
 8007700:	701a      	strb	r2, [r3, #0]
 8007702:	3301      	adds	r3, #1
 8007704:	428b      	cmp	r3, r1
 8007706:	d1f8      	bne.n	80076fa <AES_CMAC_Update+0x54>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
 8007708:	0022      	movs	r2, r4
 800770a:	0001      	movs	r1, r0
 800770c:	f7ff fe6e 	bl	80073ec <aes_encrypt>
                    data += mlen;
 8007710:	9b00      	ldr	r3, [sp, #0]
 8007712:	18f6      	adds	r6, r6, r3
                    len -= mlen;
 8007714:	1aed      	subs	r5, r5, r3
            }
            while (len > 16) {      /* not last block */
 8007716:	2d10      	cmp	r5, #16
 8007718:	d808      	bhi.n	800772c <AES_CMAC_Update+0x86>

                    data += 16;
                    len -= 16;
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
 800771a:	0031      	movs	r1, r6
 800771c:	9801      	ldr	r0, [sp, #4]
 800771e:	b2aa      	uxth	r2, r5
            ctx->M_n = len;
 8007720:	34fc      	adds	r4, #252	; 0xfc
            memcpy1(ctx->M_last, data, len);
 8007722:	f007 f94e 	bl	800e9c2 <memcpy1>
            ctx->M_n = len;
 8007726:	61a5      	str	r5, [r4, #24]
}
 8007728:	b007      	add	sp, #28
 800772a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800772c:	0023      	movs	r3, r4
 800772e:	0032      	movs	r2, r6
 8007730:	1ca0      	adds	r0, r4, #2
 8007732:	33f1      	adds	r3, #241	; 0xf1
 8007734:	30ff      	adds	r0, #255	; 0xff
                    XOR(data, ctx->X);
 8007736:	7819      	ldrb	r1, [r3, #0]
 8007738:	7817      	ldrb	r7, [r2, #0]
 800773a:	3201      	adds	r2, #1
 800773c:	4079      	eors	r1, r7
 800773e:	7019      	strb	r1, [r3, #0]
 8007740:	3301      	adds	r3, #1
 8007742:	4283      	cmp	r3, r0
 8007744:	d1f7      	bne.n	8007736 <AES_CMAC_Update+0x90>
                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8007746:	0027      	movs	r7, r4
 8007748:	37f1      	adds	r7, #241	; 0xf1
 800774a:	2210      	movs	r2, #16
 800774c:	0039      	movs	r1, r7
 800774e:	a802      	add	r0, sp, #8
 8007750:	f007 f937 	bl	800e9c2 <memcpy1>
            aes_encrypt( in, in, &ctx->rijndael);
 8007754:	a902      	add	r1, sp, #8
 8007756:	0022      	movs	r2, r4
 8007758:	0008      	movs	r0, r1
 800775a:	f7ff fe47 	bl	80073ec <aes_encrypt>
                    memcpy1(&ctx->X[0], in, 16);
 800775e:	2210      	movs	r2, #16
 8007760:	0038      	movs	r0, r7
 8007762:	a902      	add	r1, sp, #8
 8007764:	f007 f92d 	bl	800e9c2 <memcpy1>
                    data += 16;
 8007768:	3610      	adds	r6, #16
                    len -= 16;
 800776a:	3d10      	subs	r5, #16
 800776c:	e7d3      	b.n	8007716 <AES_CMAC_Update+0x70>

0800776e <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
 800776e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007770:	000c      	movs	r4, r1
 8007772:	b089      	sub	sp, #36	; 0x24
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
 8007774:	2210      	movs	r2, #16
 8007776:	2100      	movs	r1, #0
{
 8007778:	0005      	movs	r5, r0
            memset1(K, '\0', 16);
 800777a:	4668      	mov	r0, sp
 800777c:	f007 f936 	bl	800e9ec <memset1>

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
 8007780:	0022      	movs	r2, r4
 8007782:	4669      	mov	r1, sp
 8007784:	4668      	mov	r0, sp
 8007786:	f7ff fe31 	bl	80073ec <aes_encrypt>

            if (K[0] & 0x80) {
 800778a:	466b      	mov	r3, sp
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	2b7f      	cmp	r3, #127	; 0x7f
 8007790:	d940      	bls.n	8007814 <AES_CMAC_Final+0xa6>
 8007792:	466b      	mov	r3, sp
                    LSHIFT(K, K);
 8007794:	2100      	movs	r1, #0
 8007796:	781a      	ldrb	r2, [r3, #0]
 8007798:	7858      	ldrb	r0, [r3, #1]
 800779a:	0052      	lsls	r2, r2, #1
 800779c:	09c0      	lsrs	r0, r0, #7
 800779e:	4302      	orrs	r2, r0
 80077a0:	3101      	adds	r1, #1
 80077a2:	701a      	strb	r2, [r3, #0]
 80077a4:	3301      	adds	r3, #1
 80077a6:	290f      	cmp	r1, #15
 80077a8:	d1f5      	bne.n	8007796 <AES_CMAC_Final+0x28>
 80077aa:	466b      	mov	r3, sp
 80077ac:	7bda      	ldrb	r2, [r3, #15]
                   K[15] ^= 0x87;
 80077ae:	2379      	movs	r3, #121	; 0x79
                    LSHIFT(K, K);
 80077b0:	0052      	lsls	r2, r2, #1
                   K[15] ^= 0x87;
 80077b2:	425b      	negs	r3, r3
 80077b4:	4053      	eors	r3, r2
            } else
                    LSHIFT(K, K);


            if (ctx->M_n == 16) {
 80077b6:	0020      	movs	r0, r4
                    LSHIFT(K, K);
 80077b8:	466a      	mov	r2, sp
            if (ctx->M_n == 16) {
 80077ba:	30fc      	adds	r0, #252	; 0xfc
 80077bc:	6986      	ldr	r6, [r0, #24]
                    LSHIFT(K, K);
 80077be:	73d3      	strb	r3, [r2, #15]
            if (ctx->M_n == 16) {
 80077c0:	2e10      	cmp	r6, #16
 80077c2:	d137      	bne.n	8007834 <AES_CMAC_Final+0xc6>
 80077c4:	466a      	mov	r2, sp
 80077c6:	1ca3      	adds	r3, r4, #2
 80077c8:	33ff      	adds	r3, #255	; 0xff
 80077ca:	3015      	adds	r0, #21
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);
 80077cc:	7819      	ldrb	r1, [r3, #0]
 80077ce:	7816      	ldrb	r6, [r2, #0]
 80077d0:	3201      	adds	r2, #1
 80077d2:	4071      	eors	r1, r6
 80077d4:	7019      	strb	r1, [r3, #0]
 80077d6:	3301      	adds	r3, #1
 80077d8:	4298      	cmp	r0, r3
 80077da:	d1f7      	bne.n	80077cc <AES_CMAC_Final+0x5e>
 80077dc:	0023      	movs	r3, r4
 80077de:	33f1      	adds	r3, #241	; 0xf1
 80077e0:	0019      	movs	r1, r3
 80077e2:	1ca0      	adds	r0, r4, #2
 80077e4:	30ff      	adds	r0, #255	; 0xff
   
                  XOR(K, ctx->M_last);


           }
           XOR(ctx->M_last, ctx->X);
 80077e6:	781a      	ldrb	r2, [r3, #0]
 80077e8:	7c1e      	ldrb	r6, [r3, #16]
 80077ea:	4072      	eors	r2, r6
 80077ec:	701a      	strb	r2, [r3, #0]
 80077ee:	3301      	adds	r3, #1
 80077f0:	4298      	cmp	r0, r3
 80077f2:	d1f8      	bne.n	80077e6 <AES_CMAC_Final+0x78>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 80077f4:	a804      	add	r0, sp, #16
 80077f6:	2210      	movs	r2, #16
 80077f8:	f007 f8e3 	bl	800e9c2 <memcpy1>
       aes_encrypt(in, digest, &ctx->rijndael);
 80077fc:	0022      	movs	r2, r4
 80077fe:	0029      	movs	r1, r5
 8007800:	a804      	add	r0, sp, #16
 8007802:	f7ff fdf3 	bl	80073ec <aes_encrypt>
           memset1(K, 0, sizeof K);
 8007806:	2210      	movs	r2, #16
 8007808:	2100      	movs	r1, #0
 800780a:	4668      	mov	r0, sp
 800780c:	f007 f8ee 	bl	800e9ec <memset1>

}
 8007810:	b009      	add	sp, #36	; 0x24
 8007812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007814:	466b      	mov	r3, sp
                    LSHIFT(K, K);
 8007816:	2100      	movs	r1, #0
 8007818:	781a      	ldrb	r2, [r3, #0]
 800781a:	7858      	ldrb	r0, [r3, #1]
 800781c:	0052      	lsls	r2, r2, #1
 800781e:	09c0      	lsrs	r0, r0, #7
 8007820:	4302      	orrs	r2, r0
 8007822:	3101      	adds	r1, #1
 8007824:	701a      	strb	r2, [r3, #0]
 8007826:	3301      	adds	r3, #1
 8007828:	290f      	cmp	r1, #15
 800782a:	d1f5      	bne.n	8007818 <AES_CMAC_Final+0xaa>
 800782c:	466b      	mov	r3, sp
 800782e:	7bdb      	ldrb	r3, [r3, #15]
 8007830:	005b      	lsls	r3, r3, #1
 8007832:	e7c0      	b.n	80077b6 <AES_CMAC_Final+0x48>
                  if (K[0] & 0x80) {
 8007834:	7813      	ldrb	r3, [r2, #0]
 8007836:	2b7f      	cmp	r3, #127	; 0x7f
 8007838:	d932      	bls.n	80078a0 <AES_CMAC_Final+0x132>
 800783a:	466b      	mov	r3, sp
                          LSHIFT(K, K);
 800783c:	2100      	movs	r1, #0
 800783e:	781a      	ldrb	r2, [r3, #0]
 8007840:	785f      	ldrb	r7, [r3, #1]
 8007842:	0052      	lsls	r2, r2, #1
 8007844:	09ff      	lsrs	r7, r7, #7
 8007846:	433a      	orrs	r2, r7
 8007848:	3101      	adds	r1, #1
 800784a:	701a      	strb	r2, [r3, #0]
 800784c:	3301      	adds	r3, #1
 800784e:	290f      	cmp	r1, #15
 8007850:	d1f5      	bne.n	800783e <AES_CMAC_Final+0xd0>
 8007852:	466b      	mov	r3, sp
 8007854:	7bda      	ldrb	r2, [r3, #15]
                          K[15] ^= 0x87;
 8007856:	2379      	movs	r3, #121	; 0x79
                          LSHIFT(K, K);
 8007858:	0052      	lsls	r2, r2, #1
                          K[15] ^= 0x87;
 800785a:	425b      	negs	r3, r3
 800785c:	4053      	eors	r3, r2
                           LSHIFT(K, K);
 800785e:	466a      	mov	r2, sp
 8007860:	73d3      	strb	r3, [r2, #15]
                   ctx->M_last[ctx->M_n] = 0x80;
 8007862:	2280      	movs	r2, #128	; 0x80
 8007864:	19a3      	adds	r3, r4, r6
 8007866:	33ff      	adds	r3, #255	; 0xff
 8007868:	1c77      	adds	r7, r6, #1
 800786a:	709a      	strb	r2, [r3, #2]
                   while (++ctx->M_n < 16)
 800786c:	0039      	movs	r1, r7
                         ctx->M_last[ctx->M_n] = 0;
 800786e:	2200      	movs	r2, #0
 8007870:	1ca3      	adds	r3, r4, #2
 8007872:	33ff      	adds	r3, #255	; 0xff
                   while (++ctx->M_n < 16)
 8007874:	290f      	cmp	r1, #15
 8007876:	d923      	bls.n	80078c0 <AES_CMAC_Final+0x152>
 8007878:	2200      	movs	r2, #0
 800787a:	2f10      	cmp	r7, #16
 800787c:	d801      	bhi.n	8007882 <AES_CMAC_Final+0x114>
 800787e:	320f      	adds	r2, #15
 8007880:	1b92      	subs	r2, r2, r6
 8007882:	19d2      	adds	r2, r2, r7
 8007884:	6182      	str	r2, [r0, #24]
 8007886:	0020      	movs	r0, r4
 8007888:	466a      	mov	r2, sp
 800788a:	3012      	adds	r0, #18
 800788c:	30ff      	adds	r0, #255	; 0xff
                  XOR(K, ctx->M_last);
 800788e:	7819      	ldrb	r1, [r3, #0]
 8007890:	7816      	ldrb	r6, [r2, #0]
 8007892:	3201      	adds	r2, #1
 8007894:	4071      	eors	r1, r6
 8007896:	7019      	strb	r1, [r3, #0]
 8007898:	3301      	adds	r3, #1
 800789a:	4298      	cmp	r0, r3
 800789c:	d1f7      	bne.n	800788e <AES_CMAC_Final+0x120>
 800789e:	e79d      	b.n	80077dc <AES_CMAC_Final+0x6e>
 80078a0:	466b      	mov	r3, sp
                           LSHIFT(K, K);
 80078a2:	2100      	movs	r1, #0
 80078a4:	781a      	ldrb	r2, [r3, #0]
 80078a6:	785f      	ldrb	r7, [r3, #1]
 80078a8:	0052      	lsls	r2, r2, #1
 80078aa:	09ff      	lsrs	r7, r7, #7
 80078ac:	433a      	orrs	r2, r7
 80078ae:	3101      	adds	r1, #1
 80078b0:	701a      	strb	r2, [r3, #0]
 80078b2:	3301      	adds	r3, #1
 80078b4:	290f      	cmp	r1, #15
 80078b6:	d1f5      	bne.n	80078a4 <AES_CMAC_Final+0x136>
 80078b8:	466b      	mov	r3, sp
 80078ba:	7bdb      	ldrb	r3, [r3, #15]
 80078bc:	005b      	lsls	r3, r3, #1
 80078be:	e7ce      	b.n	800785e <AES_CMAC_Final+0xf0>
                         ctx->M_last[ctx->M_n] = 0;
 80078c0:	545a      	strb	r2, [r3, r1]
 80078c2:	3101      	adds	r1, #1
 80078c4:	e7d6      	b.n	8007874 <AES_CMAC_Final+0x106>

080078c6 <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
    return;
}
 80078c6:	4770      	bx	lr

080078c8 <GetKeyByID>:
{
 80078c8:	b570      	push	{r4, r5, r6, lr}
 80078ca:	2200      	movs	r2, #0
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 80078cc:	2411      	movs	r4, #17
 80078ce:	4d09      	ldr	r5, [pc, #36]	; (80078f4 <GetKeyByID+0x2c>)
 80078d0:	0023      	movs	r3, r4
 80078d2:	4353      	muls	r3, r2
 80078d4:	5cee      	ldrb	r6, [r5, r3]
 80078d6:	4286      	cmp	r6, r0
 80078d8:	d107      	bne.n	80078ea <GetKeyByID+0x22>
            *keyItem = &( SeNvmCtx.KeyList[i] );
 80078da:	228b      	movs	r2, #139	; 0x8b
            return SECURE_ELEMENT_SUCCESS;
 80078dc:	2000      	movs	r0, #0
            *keyItem = &( SeNvmCtx.KeyList[i] );
 80078de:	0092      	lsls	r2, r2, #2
 80078e0:	189b      	adds	r3, r3, r2
 80078e2:	4a05      	ldr	r2, [pc, #20]	; (80078f8 <GetKeyByID+0x30>)
 80078e4:	189b      	adds	r3, r3, r2
 80078e6:	600b      	str	r3, [r1, #0]
}
 80078e8:	bd70      	pop	{r4, r5, r6, pc}
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80078ea:	3201      	adds	r2, #1
 80078ec:	2a18      	cmp	r2, #24
 80078ee:	d1ef      	bne.n	80078d0 <GetKeyByID+0x8>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80078f0:	2003      	movs	r0, #3
 80078f2:	e7f9      	b.n	80078e8 <GetKeyByID+0x20>
 80078f4:	20000544 	.word	0x20000544
 80078f8:	20000318 	.word	0x20000318

080078fc <ComputeCmac>:
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 80078fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078fe:	b089      	sub	sp, #36	; 0x24
 8007900:	0006      	movs	r6, r0
 8007902:	000f      	movs	r7, r1
    if( ( buffer == NULL ) || ( cmac == NULL ) )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8007904:	2402      	movs	r4, #2
{
 8007906:	9200      	str	r2, [sp, #0]
 8007908:	9301      	str	r3, [sp, #4]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800790a:	2900      	cmp	r1, #0
 800790c:	d024      	beq.n	8007958 <ComputeCmac+0x5c>
 800790e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007910:	2b00      	cmp	r3, #0
 8007912:	d021      	beq.n	8007958 <ComputeCmac+0x5c>
    }

    uint8_t Cmac[16];

    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 8007914:	4d12      	ldr	r5, [pc, #72]	; (8007960 <ComputeCmac+0x64>)
 8007916:	0028      	movs	r0, r5
 8007918:	f7ff feae 	bl	8007678 <AES_CMAC_Init>

    Key_t* keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800791c:	9801      	ldr	r0, [sp, #4]
 800791e:	a903      	add	r1, sp, #12
 8007920:	f7ff ffd2 	bl	80078c8 <GetKeyByID>
 8007924:	1e04      	subs	r4, r0, #0

    if( retval == SECURE_ELEMENT_SUCCESS )
 8007926:	d117      	bne.n	8007958 <ComputeCmac+0x5c>
    {
        AES_CMAC_SetKey( SeNvmCtx.AesCmacCtx, keyItem->KeyValue );
 8007928:	9b03      	ldr	r3, [sp, #12]
 800792a:	0028      	movs	r0, r5
 800792c:	1c59      	adds	r1, r3, #1
 800792e:	f7ff feb3 	bl	8007698 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 8007932:	2e00      	cmp	r6, #0
 8007934:	d004      	beq.n	8007940 <ComputeCmac+0x44>
        {
            AES_CMAC_Update( SeNvmCtx.AesCmacCtx, micBxBuffer, 16 );
 8007936:	2210      	movs	r2, #16
 8007938:	0031      	movs	r1, r6
 800793a:	0028      	movs	r0, r5
 800793c:	f7ff feb3 	bl	80076a6 <AES_CMAC_Update>
        }

        AES_CMAC_Update( SeNvmCtx.AesCmacCtx, buffer, size );
 8007940:	9a00      	ldr	r2, [sp, #0]
 8007942:	0039      	movs	r1, r7
 8007944:	0028      	movs	r0, r5
 8007946:	f7ff feae 	bl	80076a6 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, SeNvmCtx.AesCmacCtx );
 800794a:	0029      	movs	r1, r5
 800794c:	a804      	add	r0, sp, #16
 800794e:	f7ff ff0e 	bl	800776e <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 | ( uint32_t ) Cmac[0] );
 8007952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007954:	9a04      	ldr	r2, [sp, #16]
 8007956:	601a      	str	r2, [r3, #0]
    }

    return retval;
}
 8007958:	0020      	movs	r0, r4
 800795a:	b009      	add	sp, #36	; 0x24
 800795c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800795e:	46c0      	nop			; (mov r8, r8)
 8007960:	2000042c 	.word	0x2000042c

08007964 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit( SecureElementNvmEvent seNvmCtxChanged )
{
 8007964:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t itr = 0;
    uint8_t zeroKey[16] = { 0 };
 8007966:	2600      	movs	r6, #0
{
 8007968:	0005      	movs	r5, r0
    uint8_t zeroKey[16] = { 0 };
 800796a:	220c      	movs	r2, #12
 800796c:	0031      	movs	r1, r6
 800796e:	a801      	add	r0, sp, #4
 8007970:	9600      	str	r6, [sp, #0]
 8007972:	f008 f92c 	bl	800fbce <memset>

    // Initialize with defaults
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
 8007976:	238b      	movs	r3, #139	; 0x8b
    SeNvmCtx.KeyList[itr++].KeyID = GEN_APP_KEY;
 8007978:	2201      	movs	r2, #1
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
 800797a:	4c2f      	ldr	r4, [pc, #188]	; (8007a38 <SecureElementInit+0xd4>)
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	54e6      	strb	r6, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = GEN_APP_KEY;
 8007980:	4b2e      	ldr	r3, [pc, #184]	; (8007a3c <SecureElementInit+0xd8>)
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_3;
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_3;
    SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;

    // Set standard keys
    memcpy1( SeNvmCtx.KeyList[itr].KeyValue, zeroKey, KEY_SIZE );
 8007982:	4669      	mov	r1, sp
    SeNvmCtx.KeyList[itr++].KeyID = GEN_APP_KEY;
 8007984:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_KEY;
 8007986:	4b2e      	ldr	r3, [pc, #184]	; (8007a40 <SecureElementInit+0xdc>)
 8007988:	1892      	adds	r2, r2, r2
 800798a:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_INT_KEY;
 800798c:	4b2d      	ldr	r3, [pc, #180]	; (8007a44 <SecureElementInit+0xe0>)
 800798e:	3201      	adds	r2, #1
 8007990:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_ENC_KEY;
 8007992:	3311      	adds	r3, #17
 8007994:	3201      	adds	r2, #1
 8007996:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = F_NWK_S_INT_KEY;
 8007998:	4b2b      	ldr	r3, [pc, #172]	; (8007a48 <SecureElementInit+0xe4>)
 800799a:	3201      	adds	r2, #1
 800799c:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = S_NWK_S_INT_KEY;
 800799e:	4b2b      	ldr	r3, [pc, #172]	; (8007a4c <SecureElementInit+0xe8>)
 80079a0:	3201      	adds	r2, #1
 80079a2:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_S_ENC_KEY;
 80079a4:	4b2a      	ldr	r3, [pc, #168]	; (8007a50 <SecureElementInit+0xec>)
 80079a6:	3201      	adds	r2, #1
 80079a8:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = APP_S_KEY;
 80079aa:	3311      	adds	r3, #17
 80079ac:	3201      	adds	r2, #1
 80079ae:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_ROOT_KEY;
 80079b0:	4b28      	ldr	r3, [pc, #160]	; (8007a54 <SecureElementInit+0xf0>)
 80079b2:	3201      	adds	r2, #1
 80079b4:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KE_KEY;
 80079b6:	4b28      	ldr	r3, [pc, #160]	; (8007a58 <SecureElementInit+0xf4>)
 80079b8:	3276      	adds	r2, #118	; 0x76
 80079ba:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_0;
 80079bc:	4b27      	ldr	r3, [pc, #156]	; (8007a5c <SecureElementInit+0xf8>)
 80079be:	3201      	adds	r2, #1
 80079c0:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_0;
 80079c2:	3311      	adds	r3, #17
 80079c4:	3201      	adds	r2, #1
 80079c6:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_0;
 80079c8:	4b25      	ldr	r3, [pc, #148]	; (8007a60 <SecureElementInit+0xfc>)
 80079ca:	3201      	adds	r2, #1
 80079cc:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_1;
 80079ce:	4b25      	ldr	r3, [pc, #148]	; (8007a64 <SecureElementInit+0x100>)
 80079d0:	3201      	adds	r2, #1
 80079d2:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_1;
 80079d4:	4b24      	ldr	r3, [pc, #144]	; (8007a68 <SecureElementInit+0x104>)
 80079d6:	3201      	adds	r2, #1
 80079d8:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_1;
 80079da:	3311      	adds	r3, #17
 80079dc:	3201      	adds	r2, #1
 80079de:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_2;
 80079e0:	4b22      	ldr	r3, [pc, #136]	; (8007a6c <SecureElementInit+0x108>)
 80079e2:	3201      	adds	r2, #1
 80079e4:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_2;
 80079e6:	4b22      	ldr	r3, [pc, #136]	; (8007a70 <SecureElementInit+0x10c>)
 80079e8:	3201      	adds	r2, #1
 80079ea:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_2;
 80079ec:	4b21      	ldr	r3, [pc, #132]	; (8007a74 <SecureElementInit+0x110>)
 80079ee:	3201      	adds	r2, #1
 80079f0:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_3;
 80079f2:	3311      	adds	r3, #17
 80079f4:	3201      	adds	r2, #1
 80079f6:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_3;
 80079f8:	4b1f      	ldr	r3, [pc, #124]	; (8007a78 <SecureElementInit+0x114>)
 80079fa:	3201      	adds	r2, #1
 80079fc:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_3;
 80079fe:	4b1f      	ldr	r3, [pc, #124]	; (8007a7c <SecureElementInit+0x118>)
 8007a00:	3201      	adds	r2, #1
 8007a02:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;
 8007a04:	4b1e      	ldr	r3, [pc, #120]	; (8007a80 <SecureElementInit+0x11c>)
 8007a06:	3201      	adds	r2, #1
 8007a08:	54e2      	strb	r2, [r4, r3]
    memcpy1( SeNvmCtx.KeyList[itr].KeyValue, zeroKey, KEY_SIZE );
 8007a0a:	481e      	ldr	r0, [pc, #120]	; (8007a84 <SecureElementInit+0x120>)
 8007a0c:	3a7c      	subs	r2, #124	; 0x7c
 8007a0e:	f006 ffd8 	bl	800e9c2 <memcpy1>

    memset1( SeNvmCtx.DevEui, 0, SE_EUI_SIZE );
 8007a12:	2210      	movs	r2, #16
 8007a14:	0031      	movs	r1, r6
 8007a16:	0020      	movs	r0, r4
 8007a18:	f006 ffe8 	bl	800e9ec <memset1>
    memset1( SeNvmCtx.JoinEui, 0, SE_EUI_SIZE );
 8007a1c:	2210      	movs	r2, #16
 8007a1e:	0031      	movs	r1, r6
 8007a20:	4819      	ldr	r0, [pc, #100]	; (8007a88 <SecureElementInit+0x124>)
 8007a22:	f006 ffe3 	bl	800e9ec <memset1>

    // Assign callback
    if( seNvmCtxChanged != 0 )
 8007a26:	42b5      	cmp	r5, r6
 8007a28:	d100      	bne.n	8007a2c <SecureElementInit+0xc8>
    {
        SeNvmCtxChanged = seNvmCtxChanged;
    }
    else
    {
        SeNvmCtxChanged = DummyCB;
 8007a2a:	4d18      	ldr	r5, [pc, #96]	; (8007a8c <SecureElementInit+0x128>)
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8007a2c:	2000      	movs	r0, #0
 8007a2e:	4b18      	ldr	r3, [pc, #96]	; (8007a90 <SecureElementInit+0x12c>)
 8007a30:	601d      	str	r5, [r3, #0]
 8007a32:	b004      	add	sp, #16
 8007a34:	bd70      	pop	{r4, r5, r6, pc}
 8007a36:	46c0      	nop			; (mov r8, r8)
 8007a38:	20000318 	.word	0x20000318
 8007a3c:	0000023d 	.word	0x0000023d
 8007a40:	0000024e 	.word	0x0000024e
 8007a44:	0000025f 	.word	0x0000025f
 8007a48:	00000281 	.word	0x00000281
 8007a4c:	00000292 	.word	0x00000292
 8007a50:	000002a3 	.word	0x000002a3
 8007a54:	000002c5 	.word	0x000002c5
 8007a58:	000002d6 	.word	0x000002d6
 8007a5c:	000002e7 	.word	0x000002e7
 8007a60:	00000309 	.word	0x00000309
 8007a64:	0000031a 	.word	0x0000031a
 8007a68:	0000032b 	.word	0x0000032b
 8007a6c:	0000034d 	.word	0x0000034d
 8007a70:	0000035e 	.word	0x0000035e
 8007a74:	0000036f 	.word	0x0000036f
 8007a78:	00000391 	.word	0x00000391
 8007a7c:	000003a2 	.word	0x000003a2
 8007a80:	000003b3 	.word	0x000003b3
 8007a84:	200006cc 	.word	0x200006cc
 8007a88:	20000328 	.word	0x20000328
 8007a8c:	080078c7 	.word	0x080078c7
 8007a90:	20000314 	.word	0x20000314

08007a94 <SecureElementRestoreNvmCtx>:

SecureElementStatus_t SecureElementRestoreNvmCtx( void* seNvmCtx )
{
 8007a94:	0001      	movs	r1, r0
 8007a96:	b510      	push	{r4, lr}
        memcpy1( ( uint8_t* ) &SeNvmCtx, ( uint8_t* ) seNvmCtx, sizeof( SeNvmCtx ) );
        return SECURE_ELEMENT_SUCCESS;
    }
    else
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8007a98:	2002      	movs	r0, #2
    if( seNvmCtx != 0 )
 8007a9a:	2900      	cmp	r1, #0
 8007a9c:	d005      	beq.n	8007aaa <SecureElementRestoreNvmCtx+0x16>
        memcpy1( ( uint8_t* ) &SeNvmCtx, ( uint8_t* ) seNvmCtx, sizeof( SeNvmCtx ) );
 8007a9e:	22f1      	movs	r2, #241	; 0xf1
 8007aa0:	4802      	ldr	r0, [pc, #8]	; (8007aac <SecureElementRestoreNvmCtx+0x18>)
 8007aa2:	0092      	lsls	r2, r2, #2
 8007aa4:	f006 ff8d 	bl	800e9c2 <memcpy1>
        return SECURE_ELEMENT_SUCCESS;
 8007aa8:	2000      	movs	r0, #0
    }
}
 8007aaa:	bd10      	pop	{r4, pc}
 8007aac:	20000318 	.word	0x20000318

08007ab0 <SecureElementGetNvmCtx>:

void* SecureElementGetNvmCtx( size_t* seNvmCtxSize )
{
    *seNvmCtxSize = sizeof( SeNvmCtx );
 8007ab0:	23f1      	movs	r3, #241	; 0xf1
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	6003      	str	r3, [r0, #0]
    return &SeNvmCtx;
}
 8007ab6:	4801      	ldr	r0, [pc, #4]	; (8007abc <SecureElementGetNvmCtx+0xc>)
 8007ab8:	4770      	bx	lr
 8007aba:	46c0      	nop			; (mov r8, r8)
 8007abc:	20000318 	.word	0x20000318

08007ac0 <SecureElementComputeAesCmac>:

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 8007ac0:	b513      	push	{r0, r1, r4, lr}
 8007ac2:	0004      	movs	r4, r0
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
    {
        //Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8007ac4:	2003      	movs	r0, #3
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 8007ac6:	2b7e      	cmp	r3, #126	; 0x7e
 8007ac8:	d804      	bhi.n	8007ad4 <SecureElementComputeAesCmac+0x14>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8007aca:	9804      	ldr	r0, [sp, #16]
 8007acc:	9000      	str	r0, [sp, #0]
 8007ace:	0020      	movs	r0, r4
 8007ad0:	f7ff ff14 	bl	80078fc <ComputeCmac>
}
 8007ad4:	bd16      	pop	{r1, r2, r4, pc}

08007ad6 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac, KeyIdentifier_t keyID )
{
 8007ad6:	b530      	push	{r4, r5, lr}
 8007ad8:	0004      	movs	r4, r0
 8007ada:	0015      	movs	r5, r2
    if( buffer == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8007adc:	2002      	movs	r0, #2
{
 8007ade:	b085      	sub	sp, #20
    if( buffer == NULL )
 8007ae0:	2c00      	cmp	r4, #0
 8007ae2:	d00e      	beq.n	8007b02 <SecureElementVerifyAesCmac+0x2c>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
    uint32_t compCmac = 0;
 8007ae4:	2000      	movs	r0, #0
    retval = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8007ae6:	aa03      	add	r2, sp, #12
 8007ae8:	9200      	str	r2, [sp, #0]
 8007aea:	000a      	movs	r2, r1
 8007aec:	0021      	movs	r1, r4
    uint32_t compCmac = 0;
 8007aee:	9003      	str	r0, [sp, #12]
    retval = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8007af0:	f7ff ff04 	bl	80078fc <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8007af4:	2800      	cmp	r0, #0
 8007af6:	d104      	bne.n	8007b02 <SecureElementVerifyAesCmac+0x2c>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 8007af8:	9b03      	ldr	r3, [sp, #12]
 8007afa:	1b58      	subs	r0, r3, r5
 8007afc:	1e42      	subs	r2, r0, #1
 8007afe:	4190      	sbcs	r0, r2
        return SECURE_ELEMENT_ERROR_NPE;
 8007b00:	b2c0      	uxtb	r0, r0
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
    }

    return retval;
}
 8007b02:	b005      	add	sp, #20
 8007b04:	bd30      	pop	{r4, r5, pc}
	...

08007b08 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint8_t* encBuffer )
{
 8007b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	000e      	movs	r6, r1
 8007b0e:	0015      	movs	r5, r2
    if( buffer == NULL || encBuffer == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8007b10:	2402      	movs	r4, #2
{
 8007b12:	9000      	str	r0, [sp, #0]
 8007b14:	9301      	str	r3, [sp, #4]
    if( buffer == NULL || encBuffer == NULL )
 8007b16:	2800      	cmp	r0, #0
 8007b18:	d01d      	beq.n	8007b56 <SecureElementAesEncrypt+0x4e>
 8007b1a:	9b01      	ldr	r3, [sp, #4]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d01a      	beq.n	8007b56 <SecureElementAesEncrypt+0x4e>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 8007b20:	230f      	movs	r3, #15
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8007b22:	3403      	adds	r4, #3
    if( ( size % 16 ) != 0 )
 8007b24:	4019      	ands	r1, r3
 8007b26:	421e      	tst	r6, r3
 8007b28:	d115      	bne.n	8007b56 <SecureElementAesEncrypt+0x4e>
    }

    memset1( SeNvmCtx.AesContext.ksch, '\0', 240 );
 8007b2a:	4f11      	ldr	r7, [pc, #68]	; (8007b70 <SecureElementAesEncrypt+0x68>)
 8007b2c:	22f0      	movs	r2, #240	; 0xf0
 8007b2e:	0038      	movs	r0, r7
 8007b30:	f006 ff5c 	bl	800e9ec <memset1>

    Key_t* pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8007b34:	0028      	movs	r0, r5
 8007b36:	a903      	add	r1, sp, #12
 8007b38:	f7ff fec6 	bl	80078c8 <GetKeyByID>
 8007b3c:	1e04      	subs	r4, r0, #0

    if( retval == SECURE_ELEMENT_SUCCESS )
 8007b3e:	d10a      	bne.n	8007b56 <SecureElementAesEncrypt+0x4e>
    {
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
 8007b40:	9b03      	ldr	r3, [sp, #12]
 8007b42:	003a      	movs	r2, r7
 8007b44:	2110      	movs	r1, #16
 8007b46:	1c58      	adds	r0, r3, #1
 8007b48:	f7ff fbca 	bl	80072e0 <aes_set_key>

        uint8_t block = 0;

        while( size != 0 )
 8007b4c:	0035      	movs	r5, r6
 8007b4e:	1b70      	subs	r0, r6, r5
 8007b50:	b2c0      	uxtb	r0, r0
 8007b52:	2d00      	cmp	r5, #0
 8007b54:	d102      	bne.n	8007b5c <SecureElementAesEncrypt+0x54>
            block = block + 16;
            size = size - 16;
        }
    }
    return retval;
}
 8007b56:	0020      	movs	r0, r4
 8007b58:	b005      	add	sp, #20
 8007b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 8007b5c:	9b01      	ldr	r3, [sp, #4]
 8007b5e:	003a      	movs	r2, r7
 8007b60:	1819      	adds	r1, r3, r0
 8007b62:	9b00      	ldr	r3, [sp, #0]
            size = size - 16;
 8007b64:	3d10      	subs	r5, #16
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 8007b66:	1818      	adds	r0, r3, r0
 8007b68:	f7ff fc40 	bl	80073ec <aes_encrypt>
            size = size - 16;
 8007b6c:	b2ad      	uxth	r5, r5
 8007b6e:	e7ee      	b.n	8007b4e <SecureElementAesEncrypt+0x46>
 8007b70:	20000338 	.word	0x20000338

08007b74 <SecureElementSetKey.part.0>:
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 8007b74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007b76:	000c      	movs	r4, r1
 8007b78:	2500      	movs	r5, #0
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8007b7a:	2311      	movs	r3, #17
 8007b7c:	4a1d      	ldr	r2, [pc, #116]	; (8007bf4 <SecureElementSetKey.part.0+0x80>)
 8007b7e:	0019      	movs	r1, r3
 8007b80:	4369      	muls	r1, r5
 8007b82:	5c51      	ldrb	r1, [r2, r1]
 8007b84:	4281      	cmp	r1, r0
 8007b86:	d12f      	bne.n	8007be8 <SecureElementSetKey.part.0+0x74>
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 8007b88:	3880      	subs	r0, #128	; 0x80
 8007b8a:	b2c0      	uxtb	r0, r0
 8007b8c:	2101      	movs	r1, #1
 8007b8e:	2809      	cmp	r0, #9
 8007b90:	d802      	bhi.n	8007b98 <SecureElementSetKey.part.0+0x24>
 8007b92:	4b19      	ldr	r3, [pc, #100]	; (8007bf8 <SecureElementSetKey.part.0+0x84>)
 8007b94:	40c3      	lsrs	r3, r0
 8007b96:	4399      	bics	r1, r3
 8007b98:	2311      	movs	r3, #17
 8007b9a:	435d      	muls	r5, r3
 8007b9c:	4b17      	ldr	r3, [pc, #92]	; (8007bfc <SecureElementSetKey.part.0+0x88>)
 8007b9e:	4e18      	ldr	r6, [pc, #96]	; (8007c00 <SecureElementSetKey.part.0+0x8c>)
 8007ba0:	18ed      	adds	r5, r5, r3
 8007ba2:	4b18      	ldr	r3, [pc, #96]	; (8007c04 <SecureElementSetKey.part.0+0x90>)
 8007ba4:	18ed      	adds	r5, r5, r3
 8007ba6:	2900      	cmp	r1, #0
 8007ba8:	d115      	bne.n	8007bd6 <SecureElementSetKey.part.0+0x62>
                uint8_t decryptedKey[16] = { 0 };
 8007baa:	220c      	movs	r2, #12
 8007bac:	a801      	add	r0, sp, #4
 8007bae:	9100      	str	r1, [sp, #0]
 8007bb0:	f008 f80d 	bl	800fbce <memset>
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8007bb4:	466b      	mov	r3, sp
 8007bb6:	227f      	movs	r2, #127	; 0x7f
 8007bb8:	2110      	movs	r1, #16
 8007bba:	0020      	movs	r0, r4
 8007bbc:	f7ff ffa4 	bl	8007b08 <SecureElementAesEncrypt>
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, decryptedKey, KEY_SIZE );
 8007bc0:	2210      	movs	r2, #16
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8007bc2:	0004      	movs	r4, r0
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, decryptedKey, KEY_SIZE );
 8007bc4:	4669      	mov	r1, sp
 8007bc6:	0028      	movs	r0, r5
 8007bc8:	f006 fefb 	bl	800e9c2 <memcpy1>
                SeNvmCtxChanged( );
 8007bcc:	6833      	ldr	r3, [r6, #0]
 8007bce:	4798      	blx	r3
}
 8007bd0:	0020      	movs	r0, r4
 8007bd2:	b004      	add	sp, #16
 8007bd4:	bd70      	pop	{r4, r5, r6, pc}
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, key, KEY_SIZE );
 8007bd6:	0021      	movs	r1, r4
 8007bd8:	2210      	movs	r2, #16
 8007bda:	0028      	movs	r0, r5
 8007bdc:	f006 fef1 	bl	800e9c2 <memcpy1>
                SeNvmCtxChanged( );
 8007be0:	6833      	ldr	r3, [r6, #0]
 8007be2:	4798      	blx	r3
                return SECURE_ELEMENT_SUCCESS;
 8007be4:	2400      	movs	r4, #0
 8007be6:	e7f3      	b.n	8007bd0 <SecureElementSetKey.part.0+0x5c>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8007be8:	3501      	adds	r5, #1
 8007bea:	2d18      	cmp	r5, #24
 8007bec:	d1c7      	bne.n	8007b7e <SecureElementSetKey.part.0+0xa>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8007bee:	2403      	movs	r4, #3
 8007bf0:	e7ee      	b.n	8007bd0 <SecureElementSetKey.part.0+0x5c>
 8007bf2:	46c0      	nop			; (mov r8, r8)
 8007bf4:	20000544 	.word	0x20000544
 8007bf8:	00000249 	.word	0x00000249
 8007bfc:	0000022d 	.word	0x0000022d
 8007c00:	20000314 	.word	0x20000314
 8007c04:	20000318 	.word	0x20000318

08007c08 <SecureElementSetKey>:
{
 8007c08:	0003      	movs	r3, r0
 8007c0a:	b510      	push	{r4, lr}
        return SECURE_ELEMENT_ERROR_NPE;
 8007c0c:	2002      	movs	r0, #2
    if( key == NULL )
 8007c0e:	2900      	cmp	r1, #0
 8007c10:	d002      	beq.n	8007c18 <SecureElementSetKey+0x10>
 8007c12:	0018      	movs	r0, r3
 8007c14:	f7ff ffae 	bl	8007b74 <SecureElementSetKey.part.0>
}
 8007c18:	bd10      	pop	{r4, pc}

08007c1a <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( Version_t version, uint8_t* input, KeyIdentifier_t rootKeyID, KeyIdentifier_t targetKeyID )
{
 8007c1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c1c:	0004      	movs	r4, r0
 8007c1e:	000f      	movs	r7, r1
 8007c20:	0015      	movs	r5, r2
 8007c22:	001e      	movs	r6, r3
    if( input == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8007c24:	2002      	movs	r0, #2
{
 8007c26:	b085      	sub	sp, #20
    if( input == NULL )
 8007c28:	2900      	cmp	r1, #0
 8007c2a:	d00d      	beq.n	8007c48 <SecureElementDeriveAndStoreKey+0x2e>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
    uint8_t key[16] = { 0 };
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	220c      	movs	r2, #12
 8007c30:	a801      	add	r0, sp, #4
 8007c32:	9100      	str	r1, [sp, #0]
 8007c34:	f007 ffcb 	bl	800fbce <memset>

    // In case of MC_KE_KEY, prevent other keys than NwkKey or AppKey for LoRaWAN 1.1 or later
    if( targetKeyID == MC_KE_KEY )
 8007c38:	2e7f      	cmp	r6, #127	; 0x7f
 8007c3a:	d10a      	bne.n	8007c52 <SecureElementDeriveAndStoreKey+0x38>
    {
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 8007c3c:	2d00      	cmp	r5, #0
 8007c3e:	d105      	bne.n	8007c4c <SecureElementDeriveAndStoreKey+0x32>
 8007c40:	0224      	lsls	r4, r4, #8
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8007c42:	2003      	movs	r0, #3
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 8007c44:	0e24      	lsrs	r4, r4, #24
 8007c46:	d104      	bne.n	8007c52 <SecureElementDeriveAndStoreKey+0x38>
    {
        return retval;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8007c48:	b005      	add	sp, #20
 8007c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8007c4c:	2003      	movs	r0, #3
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 8007c4e:	2d02      	cmp	r5, #2
 8007c50:	d0fa      	beq.n	8007c48 <SecureElementDeriveAndStoreKey+0x2e>
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 8007c52:	466b      	mov	r3, sp
 8007c54:	002a      	movs	r2, r5
 8007c56:	2110      	movs	r1, #16
 8007c58:	0038      	movs	r0, r7
 8007c5a:	f7ff ff55 	bl	8007b08 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	d1f2      	bne.n	8007c48 <SecureElementDeriveAndStoreKey+0x2e>
    if( key == NULL )
 8007c62:	4669      	mov	r1, sp
 8007c64:	0030      	movs	r0, r6
 8007c66:	f7ff ff85 	bl	8007b74 <SecureElementSetKey.part.0>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8007c6a:	e7ed      	b.n	8007c48 <SecureElementDeriveAndStoreKey+0x2e>

08007c6c <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 8007c6c:	b513      	push	{r0, r1, r4, lr}
 8007c6e:	0004      	movs	r4, r0
    if( randomNum == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8007c70:	2002      	movs	r0, #2
    if( randomNum == NULL )
 8007c72:	2c00      	cmp	r4, #0
 8007c74:	d005      	beq.n	8007c82 <SecureElementRandomNumber+0x16>
    }
    *randomNum = Radio.Random( );
 8007c76:	4b03      	ldr	r3, [pc, #12]	; (8007c84 <SecureElementRandomNumber+0x18>)
 8007c78:	69db      	ldr	r3, [r3, #28]
 8007c7a:	9301      	str	r3, [sp, #4]
 8007c7c:	4798      	blx	r3
 8007c7e:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 8007c80:	2000      	movs	r0, #0
}
 8007c82:	bd16      	pop	{r1, r2, r4, pc}
 8007c84:	0801074c 	.word	0x0801074c

08007c88 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 8007c88:	0001      	movs	r1, r0
 8007c8a:	b510      	push	{r4, lr}
    if( devEui == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8007c8c:	2002      	movs	r0, #2
    if( devEui == NULL )
 8007c8e:	2900      	cmp	r1, #0
 8007c90:	d007      	beq.n	8007ca2 <SecureElementSetDevEui+0x1a>
    }
    memcpy1( SeNvmCtx.DevEui, devEui, SE_EUI_SIZE );
 8007c92:	4804      	ldr	r0, [pc, #16]	; (8007ca4 <SecureElementSetDevEui+0x1c>)
 8007c94:	2210      	movs	r2, #16
 8007c96:	f006 fe94 	bl	800e9c2 <memcpy1>
    SeNvmCtxChanged( );
 8007c9a:	4b03      	ldr	r3, [pc, #12]	; (8007ca8 <SecureElementSetDevEui+0x20>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4798      	blx	r3
    return SECURE_ELEMENT_SUCCESS;
 8007ca0:	2000      	movs	r0, #0
}
 8007ca2:	bd10      	pop	{r4, pc}
 8007ca4:	20000318 	.word	0x20000318
 8007ca8:	20000314 	.word	0x20000314

08007cac <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvmCtx.DevEui;
}
 8007cac:	4800      	ldr	r0, [pc, #0]	; (8007cb0 <SecureElementGetDevEui+0x4>)
 8007cae:	4770      	bx	lr
 8007cb0:	20000318 	.word	0x20000318

08007cb4 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 8007cb4:	0001      	movs	r1, r0
 8007cb6:	b510      	push	{r4, lr}
    if( joinEui == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8007cb8:	2002      	movs	r0, #2
    if( joinEui == NULL )
 8007cba:	2900      	cmp	r1, #0
 8007cbc:	d007      	beq.n	8007cce <SecureElementSetJoinEui+0x1a>
    }
    memcpy1( SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE );
 8007cbe:	4804      	ldr	r0, [pc, #16]	; (8007cd0 <SecureElementSetJoinEui+0x1c>)
 8007cc0:	2210      	movs	r2, #16
 8007cc2:	f006 fe7e 	bl	800e9c2 <memcpy1>
    SeNvmCtxChanged( );
 8007cc6:	4b03      	ldr	r3, [pc, #12]	; (8007cd4 <SecureElementSetJoinEui+0x20>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4798      	blx	r3
    return SECURE_ELEMENT_SUCCESS;
 8007ccc:	2000      	movs	r0, #0
}
 8007cce:	bd10      	pop	{r4, pc}
 8007cd0:	20000328 	.word	0x20000328
 8007cd4:	20000314 	.word	0x20000314

08007cd8 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvmCtx.JoinEui;
}
 8007cd8:	4800      	ldr	r0, [pc, #0]	; (8007cdc <SecureElementGetJoinEui+0x4>)
 8007cda:	4770      	bx	lr
 8007cdc:	20000328 	.word	0x20000328

08007ce0 <OnRadioRxError>:
#endif
}

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	4a08      	ldr	r2, [pc, #32]	; (8007d04 <OnRadioRxError+0x24>)
{
 8007ce4:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8007ce6:	7811      	ldrb	r1, [r2, #0]
 8007ce8:	430b      	orrs	r3, r1
 8007cea:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007cec:	23d2      	movs	r3, #210	; 0xd2
 8007cee:	4a06      	ldr	r2, [pc, #24]	; (8007d08 <OnRadioRxError+0x28>)
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	58d3      	ldr	r3, [r2, r3]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d003      	beq.n	8007d00 <OnRadioRxError+0x20>
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d000      	beq.n	8007d00 <OnRadioRxError+0x20>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007cfe:	4798      	blx	r3
    }
}
 8007d00:	bd10      	pop	{r4, pc}
 8007d02:	46c0      	nop			; (mov r8, r8)
 8007d04:	200006dc 	.word	0x200006dc
 8007d08:	200008bc 	.word	0x200008bc

08007d0c <UpdateRxSlotIdleState>:
#endif
}

static void UpdateRxSlotIdleState( void )
{
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8007d0c:	4a05      	ldr	r2, [pc, #20]	; (8007d24 <UpdateRxSlotIdleState+0x18>)
 8007d0e:	4b06      	ldr	r3, [pc, #24]	; (8007d28 <UpdateRxSlotIdleState+0x1c>)
 8007d10:	58d3      	ldr	r3, [r2, r3]
 8007d12:	33f0      	adds	r3, #240	; 0xf0
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	2b02      	cmp	r3, #2
 8007d18:	d000      	beq.n	8007d1c <UpdateRxSlotIdleState+0x10>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8007d1a:	2306      	movs	r3, #6
 8007d1c:	2190      	movs	r1, #144	; 0x90
 8007d1e:	00c9      	lsls	r1, r1, #3
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 8007d20:	5453      	strb	r3, [r2, r1]
 8007d22:	4770      	bx	lr
 8007d24:	200008bc 	.word	0x200008bc
 8007d28:	00000484 	.word	0x00000484

08007d2c <StopRetransmission>:
    return false;
}

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8007d2c:	4b11      	ldr	r3, [pc, #68]	; (8007d74 <StopRetransmission+0x48>)
 8007d2e:	4a12      	ldr	r2, [pc, #72]	; (8007d78 <StopRetransmission+0x4c>)
 8007d30:	5c9a      	ldrb	r2, [r3, r2]
 8007d32:	0792      	lsls	r2, r2, #30
 8007d34:	d503      	bpl.n	8007d3e <StopRetransmission+0x12>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8007d36:	4a11      	ldr	r2, [pc, #68]	; (8007d7c <StopRetransmission+0x50>)
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8007d38:	5c9a      	ldrb	r2, [r3, r2]
 8007d3a:	2a01      	cmp	r2, #1
 8007d3c:	d90a      	bls.n	8007d54 <StopRetransmission+0x28>
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 8007d3e:	4a10      	ldr	r2, [pc, #64]	; (8007d80 <StopRetransmission+0x54>)
 8007d40:	589a      	ldr	r2, [r3, r2]
 8007d42:	0011      	movs	r1, r2
 8007d44:	31f2      	adds	r1, #242	; 0xf2
 8007d46:	7809      	ldrb	r1, [r1, #0]
 8007d48:	2900      	cmp	r1, #0
 8007d4a:	d003      	beq.n	8007d54 <StopRetransmission+0x28>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 8007d4c:	32f4      	adds	r2, #244	; 0xf4
 8007d4e:	6811      	ldr	r1, [r2, #0]
 8007d50:	3101      	adds	r1, #1
 8007d52:	6011      	str	r1, [r2, #0]
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8007d54:	2182      	movs	r1, #130	; 0x82
 8007d56:	2200      	movs	r2, #0
 8007d58:	00c9      	lsls	r1, r1, #3
 8007d5a:	545a      	strb	r2, [r3, r1]
    MacCtx.NodeAckRequested = false;
 8007d5c:	4909      	ldr	r1, [pc, #36]	; (8007d84 <StopRetransmission+0x58>)
 8007d5e:	545a      	strb	r2, [r3, r1]
    MacCtx.AckTimeoutRetry = false;
 8007d60:	4909      	ldr	r1, [pc, #36]	; (8007d88 <StopRetransmission+0x5c>)
 8007d62:	545a      	strb	r2, [r3, r1]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007d64:	39d3      	subs	r1, #211	; 0xd3
 8007d66:	5858      	ldr	r0, [r3, r1]
 8007d68:	3202      	adds	r2, #2
 8007d6a:	4390      	bics	r0, r2
 8007d6c:	5058      	str	r0, [r3, r1]

    return true;
}
 8007d6e:	2001      	movs	r0, #1
 8007d70:	4770      	bx	lr
 8007d72:	46c0      	nop			; (mov r8, r8)
 8007d74:	200008bc 	.word	0x200008bc
 8007d78:	00000481 	.word	0x00000481
 8007d7c:	0000042d 	.word	0x0000042d
 8007d80:	00000484 	.word	0x00000484
 8007d84:	00000414 	.word	0x00000414
 8007d88:	00000413 	.word	0x00000413

08007d8c <CallNvmCtxCallback>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 8007d8c:	23d2      	movs	r3, #210	; 0xd2
 8007d8e:	4a05      	ldr	r2, [pc, #20]	; (8007da4 <CallNvmCtxCallback+0x18>)
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	58d3      	ldr	r3, [r2, r3]
{
 8007d94:	b510      	push	{r4, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d003      	beq.n	8007da2 <CallNvmCtxCallback+0x16>
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d000      	beq.n	8007da2 <CallNvmCtxCallback+0x16>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 8007da0:	4798      	blx	r3
    }
}
 8007da2:	bd10      	pop	{r4, pc}
 8007da4:	200008bc 	.word	0x200008bc

08007da8 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 8007da8:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 8007daa:	2000      	movs	r0, #0
 8007dac:	f7ff ffee 	bl	8007d8c <CallNvmCtxCallback>
}
 8007db0:	bd10      	pop	{r4, pc}

08007db2 <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 8007db2:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 8007db4:	2001      	movs	r0, #1
 8007db6:	f7ff ffe9 	bl	8007d8c <CallNvmCtxCallback>
}
 8007dba:	bd10      	pop	{r4, pc}

08007dbc <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 8007dbc:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 8007dbe:	2002      	movs	r0, #2
 8007dc0:	f7ff ffe4 	bl	8007d8c <CallNvmCtxCallback>
}
 8007dc4:	bd10      	pop	{r4, pc}

08007dc6 <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 8007dc6:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 8007dc8:	2003      	movs	r0, #3
 8007dca:	f7ff ffdf 	bl	8007d8c <CallNvmCtxCallback>
}
 8007dce:	bd10      	pop	{r4, pc}

08007dd0 <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 8007dd0:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 8007dd2:	2004      	movs	r0, #4
 8007dd4:	f7ff ffda 	bl	8007d8c <CallNvmCtxCallback>
}
 8007dd8:	bd10      	pop	{r4, pc}

08007dda <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
 8007dda:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 8007ddc:	2005      	movs	r0, #5
 8007dde:	f7ff ffd5 	bl	8007d8c <CallNvmCtxCallback>
}
 8007de2:	bd10      	pop	{r4, pc}

08007de4 <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
 8007de4:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 8007de6:	2006      	movs	r0, #6
 8007de8:	f7ff ffd0 	bl	8007d8c <CallNvmCtxCallback>
}
 8007dec:	bd10      	pop	{r4, pc}
	...

08007df0 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8007df0:	b507      	push	{r0, r1, r2, lr}
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8007df2:	4b0c      	ldr	r3, [pc, #48]	; (8007e24 <GetMaxAppPayloadWithoutFOptsLength+0x34>)
 8007df4:	4a0c      	ldr	r2, [pc, #48]	; (8007e28 <GetMaxAppPayloadWithoutFOptsLength+0x38>)
 8007df6:	4669      	mov	r1, sp
 8007df8:	58d3      	ldr	r3, [r2, r3]
 8007dfa:	2296      	movs	r2, #150	; 0x96
 8007dfc:	0052      	lsls	r2, r2, #1
 8007dfe:	5c9a      	ldrb	r2, [r3, r2]
    getPhy.Datarate = datarate;
 8007e00:	7048      	strb	r0, [r1, #1]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8007e02:	708a      	strb	r2, [r1, #2]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8007e04:	220d      	movs	r2, #13
 8007e06:	700a      	strb	r2, [r1, #0]
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 8007e08:	2240      	movs	r2, #64	; 0x40
 8007e0a:	32ff      	adds	r2, #255	; 0xff
 8007e0c:	5c9a      	ldrb	r2, [r3, r2]
 8007e0e:	2a00      	cmp	r2, #0
 8007e10:	d001      	beq.n	8007e16 <GetMaxAppPayloadWithoutFOptsLength+0x26>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8007e12:	220e      	movs	r2, #14
 8007e14:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8007e16:	4669      	mov	r1, sp
 8007e18:	7818      	ldrb	r0, [r3, #0]
 8007e1a:	f004 fdf7 	bl	800ca0c <RegionGetPhyParam>
    return phyParam.Value;
 8007e1e:	b2c0      	uxtb	r0, r0
}
 8007e20:	bd0e      	pop	{r1, r2, r3, pc}
 8007e22:	46c0      	nop			; (mov r8, r8)
 8007e24:	00000484 	.word	0x00000484
 8007e28:	200008bc 	.word	0x200008bc

08007e2c <OnAckTimeoutTimerEvent>:
{
 8007e2c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 8007e2e:	4810      	ldr	r0, [pc, #64]	; (8007e70 <OnAckTimeoutTimerEvent+0x44>)
 8007e30:	f006 fcd0 	bl	800e7d4 <TimerStop>
    if( MacCtx.NodeAckRequested == true )
 8007e34:	4b0f      	ldr	r3, [pc, #60]	; (8007e74 <OnAckTimeoutTimerEvent+0x48>)
 8007e36:	4a10      	ldr	r2, [pc, #64]	; (8007e78 <OnAckTimeoutTimerEvent+0x4c>)
 8007e38:	5c9a      	ldrb	r2, [r3, r2]
 8007e3a:	2a00      	cmp	r2, #0
 8007e3c:	d002      	beq.n	8007e44 <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 8007e3e:	2101      	movs	r1, #1
 8007e40:	4a0e      	ldr	r2, [pc, #56]	; (8007e7c <OnAckTimeoutTimerEvent+0x50>)
 8007e42:	5499      	strb	r1, [r3, r2]
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8007e44:	4a0e      	ldr	r2, [pc, #56]	; (8007e80 <OnAckTimeoutTimerEvent+0x54>)
 8007e46:	589a      	ldr	r2, [r3, r2]
 8007e48:	32f0      	adds	r2, #240	; 0xf0
 8007e4a:	7812      	ldrb	r2, [r2, #0]
 8007e4c:	2a02      	cmp	r2, #2
 8007e4e:	d104      	bne.n	8007e5a <OnAckTimeoutTimerEvent+0x2e>
        MacCtx.MacFlags.Bits.MacDone = 1;
 8007e50:	490c      	ldr	r1, [pc, #48]	; (8007e84 <OnAckTimeoutTimerEvent+0x58>)
 8007e52:	321e      	adds	r2, #30
 8007e54:	5c58      	ldrb	r0, [r3, r1]
 8007e56:	4302      	orrs	r2, r0
 8007e58:	545a      	strb	r2, [r3, r1]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007e5a:	22d2      	movs	r2, #210	; 0xd2
 8007e5c:	0092      	lsls	r2, r2, #2
 8007e5e:	589b      	ldr	r3, [r3, r2]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d003      	beq.n	8007e6c <OnAckTimeoutTimerEvent+0x40>
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d000      	beq.n	8007e6c <OnAckTimeoutTimerEvent+0x40>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007e6a:	4798      	blx	r3
}
 8007e6c:	bd10      	pop	{r4, pc}
 8007e6e:	46c0      	nop			; (mov r8, r8)
 8007e70:	20000cb4 	.word	0x20000cb4
 8007e74:	200008bc 	.word	0x200008bc
 8007e78:	00000414 	.word	0x00000414
 8007e7c:	00000413 	.word	0x00000413
 8007e80:	00000484 	.word	0x00000484
 8007e84:	00000481 	.word	0x00000481

08007e88 <PrepareRxDoneAbort>:
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8007e88:	22d0      	movs	r2, #208	; 0xd0
 8007e8a:	2380      	movs	r3, #128	; 0x80
{
 8007e8c:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8007e8e:	4c0a      	ldr	r4, [pc, #40]	; (8007eb8 <PrepareRxDoneAbort+0x30>)
 8007e90:	0092      	lsls	r2, r2, #2
 8007e92:	58a1      	ldr	r1, [r4, r2]
 8007e94:	430b      	orrs	r3, r1
 8007e96:	50a3      	str	r3, [r4, r2]
    if( MacCtx.NodeAckRequested == true )
 8007e98:	4b08      	ldr	r3, [pc, #32]	; (8007ebc <PrepareRxDoneAbort+0x34>)
 8007e9a:	5ce3      	ldrb	r3, [r4, r3]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d002      	beq.n	8007ea6 <PrepareRxDoneAbort+0x1e>
        OnAckTimeoutTimerEvent( NULL );
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	f7ff ffc3 	bl	8007e2c <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 8007ea6:	2322      	movs	r3, #34	; 0x22
 8007ea8:	4905      	ldr	r1, [pc, #20]	; (8007ec0 <PrepareRxDoneAbort+0x38>)
 8007eaa:	5c62      	ldrb	r2, [r4, r1]
 8007eac:	439a      	bics	r2, r3
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	5463      	strb	r3, [r4, r1]
    UpdateRxSlotIdleState( );
 8007eb2:	f7ff ff2b 	bl	8007d0c <UpdateRxSlotIdleState>
}
 8007eb6:	bd10      	pop	{r4, pc}
 8007eb8:	200008bc 	.word	0x200008bc
 8007ebc:	00000414 	.word	0x00000414
 8007ec0:	00000481 	.word	0x00000481

08007ec4 <HandleRadioRxErrorTimeout>:
{
 8007ec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8007ec6:	4c2c      	ldr	r4, [pc, #176]	; (8007f78 <HandleRadioRxErrorTimeout+0xb4>)
 8007ec8:	4f2c      	ldr	r7, [pc, #176]	; (8007f7c <HandleRadioRxErrorTimeout+0xb8>)
{
 8007eca:	9100      	str	r1, [sp, #0]
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8007ecc:	59e3      	ldr	r3, [r4, r7]
{
 8007ece:	0006      	movs	r6, r0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8007ed0:	33f0      	adds	r3, #240	; 0xf0
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d003      	beq.n	8007ee0 <HandleRadioRxErrorTimeout+0x1c>
        Radio.Sleep( );
 8007ed8:	4b29      	ldr	r3, [pc, #164]	; (8007f80 <HandleRadioRxErrorTimeout+0xbc>)
 8007eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007edc:	9301      	str	r3, [sp, #4]
 8007ede:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8007ee0:	f003 f8ec 	bl	800b0bc <LoRaMacClassBIsBeaconExpected>
 8007ee4:	1e05      	subs	r5, r0, #0
 8007ee6:	d005      	beq.n	8007ef4 <HandleRadioRxErrorTimeout+0x30>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8007ee8:	2002      	movs	r0, #2
 8007eea:	f003 f911 	bl	800b110 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8007eee:	2000      	movs	r0, #0
 8007ef0:	f002 fe58 	bl	800aba4 <LoRaMacClassBBeaconTimerEvent>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8007ef4:	59e3      	ldr	r3, [r4, r7]
 8007ef6:	33f0      	adds	r3, #240	; 0xf0
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d118      	bne.n	8007f30 <HandleRadioRxErrorTimeout+0x6c>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8007efe:	f003 f8eb 	bl	800b0d8 <LoRaMacClassBIsPingExpected>
 8007f02:	9001      	str	r0, [sp, #4]
 8007f04:	2800      	cmp	r0, #0
 8007f06:	d006      	beq.n	8007f16 <HandleRadioRxErrorTimeout+0x52>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8007f08:	2000      	movs	r0, #0
 8007f0a:	f003 f817 	bl	800af3c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8007f0e:	2000      	movs	r0, #0
 8007f10:	f002 fe08 	bl	800ab24 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8007f14:	9d01      	ldr	r5, [sp, #4]
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8007f16:	f003 f8e9 	bl	800b0ec <LoRaMacClassBIsMulticastExpected>
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	d008      	beq.n	8007f30 <HandleRadioRxErrorTimeout+0x6c>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8007f1e:	2000      	movs	r0, #0
 8007f20:	f003 f812 	bl	800af48 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8007f24:	2000      	movs	r0, #0
 8007f26:	f002 fe0f 	bl	800ab48 <LoRaMacClassBMulticastSlotTimerEvent>
    UpdateRxSlotIdleState( );
 8007f2a:	f7ff feef 	bl	8007d0c <UpdateRxSlotIdleState>
}
 8007f2e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    if( classBRx == false )
 8007f30:	2d00      	cmp	r5, #0
 8007f32:	d1fa      	bne.n	8007f2a <HandleRadioRxErrorTimeout+0x66>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8007f34:	2290      	movs	r2, #144	; 0x90
 8007f36:	00d2      	lsls	r2, r2, #3
 8007f38:	4b12      	ldr	r3, [pc, #72]	; (8007f84 <HandleRadioRxErrorTimeout+0xc0>)
 8007f3a:	5ca2      	ldrb	r2, [r4, r2]
 8007f3c:	5ce3      	ldrb	r3, [r4, r3]
 8007f3e:	2a00      	cmp	r2, #0
 8007f40:	d107      	bne.n	8007f52 <HandleRadioRxErrorTimeout+0x8e>
            if( MacCtx.NodeAckRequested == true )
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <HandleRadioRxErrorTimeout+0x86>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8007f46:	4b10      	ldr	r3, [pc, #64]	; (8007f88 <HandleRadioRxErrorTimeout+0xc4>)
 8007f48:	54e6      	strb	r6, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8007f4a:	0030      	movs	r0, r6
 8007f4c:	f003 ffda 	bl	800bf04 <LoRaMacConfirmQueueSetStatusCmn>
 8007f50:	e7eb      	b.n	8007f2a <HandleRadioRxErrorTimeout+0x66>
            if( MacCtx.NodeAckRequested == true )
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d002      	beq.n	8007f5c <HandleRadioRxErrorTimeout+0x98>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8007f56:	4b0c      	ldr	r3, [pc, #48]	; (8007f88 <HandleRadioRxErrorTimeout+0xc4>)
 8007f58:	9a00      	ldr	r2, [sp, #0]
 8007f5a:	54e2      	strb	r2, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8007f5c:	9800      	ldr	r0, [sp, #0]
 8007f5e:	f003 ffd1 	bl	800bf04 <LoRaMacConfirmQueueSetStatusCmn>
            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8007f62:	59e3      	ldr	r3, [r4, r7]
 8007f64:	33f0      	adds	r3, #240	; 0xf0
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	2b02      	cmp	r3, #2
 8007f6a:	d0de      	beq.n	8007f2a <HandleRadioRxErrorTimeout+0x66>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8007f6c:	2320      	movs	r3, #32
 8007f6e:	4a07      	ldr	r2, [pc, #28]	; (8007f8c <HandleRadioRxErrorTimeout+0xc8>)
 8007f70:	5ca1      	ldrb	r1, [r4, r2]
 8007f72:	430b      	orrs	r3, r1
 8007f74:	54a3      	strb	r3, [r4, r2]
 8007f76:	e7d8      	b.n	8007f2a <HandleRadioRxErrorTimeout+0x66>
 8007f78:	200008bc 	.word	0x200008bc
 8007f7c:	00000484 	.word	0x00000484
 8007f80:	0801074c 	.word	0x0801074c
 8007f84:	00000414 	.word	0x00000414
 8007f88:	0000043d 	.word	0x0000043d
 8007f8c:	00000481 	.word	0x00000481

08007f90 <ResetMacParameters>:
{
 8007f90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 8007f92:	22ea      	movs	r2, #234	; 0xea
 8007f94:	2500      	movs	r5, #0
 8007f96:	4c2c      	ldr	r4, [pc, #176]	; (8008048 <ResetMacParameters+0xb8>)
 8007f98:	4e2c      	ldr	r6, [pc, #176]	; (800804c <ResetMacParameters+0xbc>)
 8007f9a:	0052      	lsls	r2, r2, #1
 8007f9c:	59a3      	ldr	r3, [r4, r6]
    MacCtx.ChannelsNbTransCounter = 0;
 8007f9e:	492c      	ldr	r1, [pc, #176]	; (8008050 <ResetMacParameters+0xc0>)
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 8007fa0:	549d      	strb	r5, [r3, r2]
    MacCtx.NvmCtx->AdrAckCounter = 0;
 8007fa2:	001a      	movs	r2, r3
 8007fa4:	32f4      	adds	r2, #244	; 0xf4
 8007fa6:	6015      	str	r5, [r2, #0]
    MacCtx.ChannelsNbTransCounter = 0;
 8007fa8:	2282      	movs	r2, #130	; 0x82
 8007faa:	00d2      	lsls	r2, r2, #3
 8007fac:	50a1      	str	r1, [r4, r2]
    MacCtx.NvmCtx->MaxDCycle = 0;
 8007fae:	229e      	movs	r2, #158	; 0x9e
 8007fb0:	0052      	lsls	r2, r2, #1
 8007fb2:	549d      	strb	r5, [r3, r2]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 8007fb4:	3a3c      	subs	r2, #60	; 0x3c
 8007fb6:	3aff      	subs	r2, #255	; 0xff
 8007fb8:	4694      	mov	ip, r2
 8007fba:	4661      	mov	r1, ip
 8007fbc:	32c2      	adds	r2, #194	; 0xc2
 8007fbe:	32ff      	adds	r2, #255	; 0xff
 8007fc0:	5299      	strh	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8007fc2:	001a      	movs	r2, r3
 8007fc4:	8899      	ldrh	r1, [r3, #4]
 8007fc6:	32f8      	adds	r2, #248	; 0xf8
 8007fc8:	8011      	strh	r1, [r2, #0]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 8007fca:	1d99      	adds	r1, r3, #6
 8007fcc:	7fc9      	ldrb	r1, [r1, #31]
 8007fce:	3207      	adds	r2, #7
 8007fd0:	7691      	strb	r1, [r2, #26]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8007fd2:	0019      	movs	r1, r3
 8007fd4:	321d      	adds	r2, #29
 8007fd6:	3128      	adds	r1, #40	; 0x28
 8007fd8:	c981      	ldmia	r1!, {r0, r7}
 8007fda:	c281      	stmia	r2!, {r0, r7}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8007fdc:	c981      	ldmia	r1!, {r0, r7}
 8007fde:	c281      	stmia	r2!, {r0, r7}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 8007fe0:	8f19      	ldrh	r1, [r3, #56]	; 0x38
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 8007fe2:	3a30      	subs	r2, #48	; 0x30
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 8007fe4:	8611      	strh	r1, [r2, #48]	; 0x30
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 8007fe6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    params.NvmCtx = NULL;
 8007fe8:	9500      	str	r5, [sp, #0]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 8007fea:	6351      	str	r1, [r2, #52]	; 0x34
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8007fec:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007fee:	6391      	str	r1, [r2, #56]	; 0x38
    MacCtx.NodeAckRequested = false;
 8007ff0:	4a18      	ldr	r2, [pc, #96]	; (8008054 <ResetMacParameters+0xc4>)
    params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 8007ff2:	4661      	mov	r1, ip
    MacCtx.NodeAckRequested = false;
 8007ff4:	54a5      	strb	r5, [r4, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 8007ff6:	22e0      	movs	r2, #224	; 0xe0
 8007ff8:	0052      	lsls	r2, r2, #1
 8007ffa:	549d      	strb	r5, [r3, r2]
    params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 8007ffc:	466a      	mov	r2, sp
 8007ffe:	7111      	strb	r1, [r2, #4]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8008000:	7818      	ldrb	r0, [r3, #0]
 8008002:	4669      	mov	r1, sp
 8008004:	f004 fd15 	bl	800ca32 <RegionInitDefaults>
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 8008008:	229f      	movs	r2, #159	; 0x9f
    MacCtx.Channel = 0;
 800800a:	4b13      	ldr	r3, [pc, #76]	; (8008058 <ResetMacParameters+0xc8>)
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 800800c:	0052      	lsls	r2, r2, #1
    MacCtx.Channel = 0;
 800800e:	54e5      	strb	r5, [r4, r3]
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 8008010:	59a3      	ldr	r3, [r4, r6]
 8008012:	549d      	strb	r5, [r3, r2]
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8008014:	22f3      	movs	r2, #243	; 0xf3
 8008016:	0092      	lsls	r2, r2, #2
 8008018:	54a5      	strb	r5, [r4, r2]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 800801a:	001a      	movs	r2, r3
 800801c:	32fc      	adds	r2, #252	; 0xfc
 800801e:	6a11      	ldr	r1, [r2, #32]
 8008020:	22f4      	movs	r2, #244	; 0xf4
 8008022:	0092      	lsls	r2, r2, #2
 8008024:	50a1      	str	r1, [r4, r2]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8008026:	222e      	movs	r2, #46	; 0x2e
 8008028:	32ff      	adds	r2, #255	; 0xff
 800802a:	5c99      	ldrb	r1, [r3, r2]
 800802c:	22f7      	movs	r2, #247	; 0xf7
 800802e:	0092      	lsls	r2, r2, #2
 8008030:	54a1      	strb	r1, [r4, r2]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8008032:	2240      	movs	r2, #64	; 0x40
 8008034:	32ff      	adds	r2, #255	; 0xff
 8008036:	5c9a      	ldrb	r2, [r3, r2]
 8008038:	4b08      	ldr	r3, [pc, #32]	; (800805c <ResetMacParameters+0xcc>)
 800803a:	54e2      	strb	r2, [r4, r3]
    MacCtx.RxWindow2Config.RxContinuous = false;
 800803c:	2280      	movs	r2, #128	; 0x80
 800803e:	4b08      	ldr	r3, [pc, #32]	; (8008060 <ResetMacParameters+0xd0>)
 8008040:	0052      	lsls	r2, r2, #1
 8008042:	52e2      	strh	r2, [r4, r3]
}
 8008044:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008046:	46c0      	nop			; (mov r8, r8)
 8008048:	200008bc 	.word	0x200008bc
 800804c:	00000484 	.word	0x00000484
 8008050:	00010100 	.word	0x00010100
 8008054:	00000414 	.word	0x00000414
 8008058:	00000415 	.word	0x00000415
 800805c:	000003dd 	.word	0x000003dd
 8008060:	000003de 	.word	0x000003de

08008064 <OnRadioRxTimeout>:
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8008064:	2301      	movs	r3, #1
{
 8008066:	b507      	push	{r0, r1, r2, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8008068:	4a0d      	ldr	r2, [pc, #52]	; (80080a0 <OnRadioRxTimeout+0x3c>)
 800806a:	7811      	ldrb	r1, [r2, #0]
 800806c:	430b      	orrs	r3, r1
 800806e:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008070:	23d2      	movs	r3, #210	; 0xd2
 8008072:	4a0c      	ldr	r2, [pc, #48]	; (80080a4 <OnRadioRxTimeout+0x40>)
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	58d3      	ldr	r3, [r2, r3]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d003      	beq.n	8008084 <OnRadioRxTimeout+0x20>
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d000      	beq.n	8008084 <OnRadioRxTimeout+0x20>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008082:	4798      	blx	r3
    PRINTNOW(); PRINTF("PHY rxTimeOut\n\r" );
 8008084:	4668      	mov	r0, sp
 8008086:	f006 faa9 	bl	800e5dc <SysTimeGetMcuTime>
 800808a:	466b      	mov	r3, sp
 800808c:	9900      	ldr	r1, [sp, #0]
 800808e:	2204      	movs	r2, #4
 8008090:	5e9a      	ldrsh	r2, [r3, r2]
 8008092:	4805      	ldr	r0, [pc, #20]	; (80080a8 <OnRadioRxTimeout+0x44>)
 8008094:	f006 fc30 	bl	800e8f8 <TraceSend>
 8008098:	4804      	ldr	r0, [pc, #16]	; (80080ac <OnRadioRxTimeout+0x48>)
 800809a:	f006 fc2d 	bl	800e8f8 <TraceSend>
}
 800809e:	bd07      	pop	{r0, r1, r2, pc}
 80080a0:	200006dc 	.word	0x200006dc
 80080a4:	200008bc 	.word	0x200008bc
 80080a8:	08010db9 	.word	0x08010db9
 80080ac:	08010dc4 	.word	0x08010dc4

080080b0 <OnRadioTxTimeout>:
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 80080b0:	2304      	movs	r3, #4
{
 80080b2:	b507      	push	{r0, r1, r2, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 80080b4:	4a0d      	ldr	r2, [pc, #52]	; (80080ec <OnRadioTxTimeout+0x3c>)
 80080b6:	7811      	ldrb	r1, [r2, #0]
 80080b8:	430b      	orrs	r3, r1
 80080ba:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80080bc:	23d2      	movs	r3, #210	; 0xd2
 80080be:	4a0c      	ldr	r2, [pc, #48]	; (80080f0 <OnRadioTxTimeout+0x40>)
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	58d3      	ldr	r3, [r2, r3]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d003      	beq.n	80080d0 <OnRadioTxTimeout+0x20>
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d000      	beq.n	80080d0 <OnRadioTxTimeout+0x20>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80080ce:	4798      	blx	r3
    PRINTNOW(); PRINTF("PHY txTimeOut\n\r" );
 80080d0:	4668      	mov	r0, sp
 80080d2:	f006 fa83 	bl	800e5dc <SysTimeGetMcuTime>
 80080d6:	466b      	mov	r3, sp
 80080d8:	9900      	ldr	r1, [sp, #0]
 80080da:	2204      	movs	r2, #4
 80080dc:	5e9a      	ldrsh	r2, [r3, r2]
 80080de:	4805      	ldr	r0, [pc, #20]	; (80080f4 <OnRadioTxTimeout+0x44>)
 80080e0:	f006 fc0a 	bl	800e8f8 <TraceSend>
 80080e4:	4804      	ldr	r0, [pc, #16]	; (80080f8 <OnRadioTxTimeout+0x48>)
 80080e6:	f006 fc07 	bl	800e8f8 <TraceSend>
}
 80080ea:	bd07      	pop	{r0, r1, r2, pc}
 80080ec:	200006dc 	.word	0x200006dc
 80080f0:	200008bc 	.word	0x200008bc
 80080f4:	08010db9 	.word	0x08010db9
 80080f8:	08010dd4 	.word	0x08010dd4

080080fc <OnRadioRxDone>:
{
 80080fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080fe:	000e      	movs	r6, r1
 8008100:	0015      	movs	r5, r2
 8008102:	001c      	movs	r4, r3
 8008104:	0007      	movs	r7, r0
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8008106:	f006 fba2 	bl	800e84e <TimerGetCurrentTime>
 800810a:	4b11      	ldr	r3, [pc, #68]	; (8008150 <OnRadioRxDone+0x54>)
    LoRaMacRadioEvents.Events.RxDone = 1;
 800810c:	4a11      	ldr	r2, [pc, #68]	; (8008154 <OnRadioRxDone+0x58>)
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800810e:	6018      	str	r0, [r3, #0]
    RxDoneParams.Payload = payload;
 8008110:	605f      	str	r7, [r3, #4]
    RxDoneParams.Size = size;
 8008112:	811e      	strh	r6, [r3, #8]
    RxDoneParams.Rssi = rssi;
 8008114:	815d      	strh	r5, [r3, #10]
    RxDoneParams.Snr = snr;
 8008116:	731c      	strb	r4, [r3, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 8008118:	2308      	movs	r3, #8
 800811a:	7811      	ldrb	r1, [r2, #0]
 800811c:	430b      	orrs	r3, r1
 800811e:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008120:	23d2      	movs	r3, #210	; 0xd2
 8008122:	4a0d      	ldr	r2, [pc, #52]	; (8008158 <OnRadioRxDone+0x5c>)
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	58d3      	ldr	r3, [r2, r3]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d003      	beq.n	8008134 <OnRadioRxDone+0x38>
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d000      	beq.n	8008134 <OnRadioRxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008132:	4798      	blx	r3
    PRINTNOW(); PRINTF("PHY rxDone\n\r" );
 8008134:	4668      	mov	r0, sp
 8008136:	f006 fa51 	bl	800e5dc <SysTimeGetMcuTime>
 800813a:	466b      	mov	r3, sp
 800813c:	9900      	ldr	r1, [sp, #0]
 800813e:	2204      	movs	r2, #4
 8008140:	5e9a      	ldrsh	r2, [r3, r2]
 8008142:	4806      	ldr	r0, [pc, #24]	; (800815c <OnRadioRxDone+0x60>)
 8008144:	f006 fbd8 	bl	800e8f8 <TraceSend>
 8008148:	4805      	ldr	r0, [pc, #20]	; (8008160 <OnRadioRxDone+0x64>)
 800814a:	f006 fbd5 	bl	800e8f8 <TraceSend>
}
 800814e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008150:	2000160c 	.word	0x2000160c
 8008154:	200006dc 	.word	0x200006dc
 8008158:	200008bc 	.word	0x200008bc
 800815c:	08010db9 	.word	0x08010db9
 8008160:	08010de4 	.word	0x08010de4

08008164 <OnRadioTxDone>:
{
 8008164:	b530      	push	{r4, r5, lr}
 8008166:	b085      	sub	sp, #20
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8008168:	f006 fb71 	bl	800e84e <TimerGetCurrentTime>
    MacCtx.LastTxSysTime = SysTimeGet( );
 800816c:	466c      	mov	r4, sp
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800816e:	4b14      	ldr	r3, [pc, #80]	; (80081c0 <OnRadioTxDone+0x5c>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 8008170:	4d14      	ldr	r5, [pc, #80]	; (80081c4 <OnRadioTxDone+0x60>)
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8008172:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8008174:	0020      	movs	r0, r4
 8008176:	f006 fa09 	bl	800e58c <SysTimeGet>
 800817a:	23ce      	movs	r3, #206	; 0xce
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	18eb      	adds	r3, r5, r3
 8008180:	cc06      	ldmia	r4!, {r1, r2}
 8008182:	c306      	stmia	r3!, {r1, r2}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8008184:	2310      	movs	r3, #16
 8008186:	4a10      	ldr	r2, [pc, #64]	; (80081c8 <OnRadioTxDone+0x64>)
 8008188:	7811      	ldrb	r1, [r2, #0]
 800818a:	430b      	orrs	r3, r1
 800818c:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800818e:	23d2      	movs	r3, #210	; 0xd2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	58eb      	ldr	r3, [r5, r3]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d003      	beq.n	80081a0 <OnRadioTxDone+0x3c>
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d000      	beq.n	80081a0 <OnRadioTxDone+0x3c>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800819e:	4798      	blx	r3
    PRINTNOW(); PRINTF("PHY txDone\n\r" );
 80081a0:	ac02      	add	r4, sp, #8
 80081a2:	0020      	movs	r0, r4
 80081a4:	f006 fa1a 	bl	800e5dc <SysTimeGetMcuTime>
 80081a8:	2304      	movs	r3, #4
 80081aa:	5ee2      	ldrsh	r2, [r4, r3]
 80081ac:	9902      	ldr	r1, [sp, #8]
 80081ae:	4807      	ldr	r0, [pc, #28]	; (80081cc <OnRadioTxDone+0x68>)
 80081b0:	f006 fba2 	bl	800e8f8 <TraceSend>
 80081b4:	4806      	ldr	r0, [pc, #24]	; (80081d0 <OnRadioTxDone+0x6c>)
 80081b6:	f006 fb9f 	bl	800e8f8 <TraceSend>
}
 80081ba:	b005      	add	sp, #20
 80081bc:	bd30      	pop	{r4, r5, pc}
 80081be:	46c0      	nop			; (mov r8, r8)
 80081c0:	20001608 	.word	0x20001608
 80081c4:	200008bc 	.word	0x200008bc
 80081c8:	200006dc 	.word	0x200006dc
 80081cc:	08010db9 	.word	0x08010db9
 80081d0:	08010df1 	.word	0x08010df1

080081d4 <OpenContinuousRxCWindow>:
{
 80081d4:	b513      	push	{r0, r1, r4, lr}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80081d6:	4b0b      	ldr	r3, [pc, #44]	; (8008204 <OpenContinuousRxCWindow+0x30>)
 80081d8:	4c0b      	ldr	r4, [pc, #44]	; (8008208 <OpenContinuousRxCWindow+0x34>)
 80081da:	4a0c      	ldr	r2, [pc, #48]	; (800820c <OpenContinuousRxCWindow+0x38>)
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80081dc:	490c      	ldr	r1, [pc, #48]	; (8008210 <OpenContinuousRxCWindow+0x3c>)
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80081de:	52e2      	strh	r2, [r4, r3]
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80081e0:	4b0c      	ldr	r3, [pc, #48]	; (8008214 <OpenContinuousRxCWindow+0x40>)
 80081e2:	4a0d      	ldr	r2, [pc, #52]	; (8008218 <OpenContinuousRxCWindow+0x44>)
 80081e4:	58e3      	ldr	r3, [r4, r3]
 80081e6:	7818      	ldrb	r0, [r3, #0]
 80081e8:	f004 fc5c 	bl	800caa4 <RegionRxConfig>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	d008      	beq.n	8008202 <OpenContinuousRxCWindow+0x2e>
        Radio.Rx( 0 ); // Continuous mode
 80081f0:	4b0a      	ldr	r3, [pc, #40]	; (800821c <OpenContinuousRxCWindow+0x48>)
 80081f2:	2000      	movs	r0, #0
 80081f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f6:	9301      	str	r3, [sp, #4]
 80081f8:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80081fa:	4b09      	ldr	r3, [pc, #36]	; (8008220 <OpenContinuousRxCWindow+0x4c>)
 80081fc:	5ce2      	ldrb	r2, [r4, r3]
 80081fe:	338d      	adds	r3, #141	; 0x8d
 8008200:	54e2      	strb	r2, [r4, r3]
}
 8008202:	bd13      	pop	{r0, r1, r4, pc}
 8008204:	000003f2 	.word	0x000003f2
 8008208:	200008bc 	.word	0x200008bc
 800820c:	00000201 	.word	0x00000201
 8008210:	20000c9c 	.word	0x20000c9c
 8008214:	00000484 	.word	0x00000484
 8008218:	20000cdc 	.word	0x20000cdc
 800821c:	0801074c 	.word	0x0801074c
 8008220:	000003f3 	.word	0x000003f3

08008224 <SwitchClass>:
{
 8008224:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( MacCtx.NvmCtx->DeviceClass )
 8008226:	4e43      	ldr	r6, [pc, #268]	; (8008334 <SwitchClass+0x110>)
 8008228:	4f43      	ldr	r7, [pc, #268]	; (8008338 <SwitchClass+0x114>)
{
 800822a:	0005      	movs	r5, r0
    switch( MacCtx.NvmCtx->DeviceClass )
 800822c:	59f3      	ldr	r3, [r6, r7]
{
 800822e:	b085      	sub	sp, #20
    switch( MacCtx.NvmCtx->DeviceClass )
 8008230:	001a      	movs	r2, r3
 8008232:	32f0      	adds	r2, #240	; 0xf0
 8008234:	7814      	ldrb	r4, [r2, #0]
 8008236:	469c      	mov	ip, r3
 8008238:	2c01      	cmp	r4, #1
 800823a:	d068      	beq.n	800830e <SwitchClass+0xea>
 800823c:	2c02      	cmp	r4, #2
 800823e:	d100      	bne.n	8008242 <SwitchClass+0x1e>
 8008240:	e06e      	b.n	8008320 <SwitchClass+0xfc>
 8008242:	2c00      	cmp	r4, #0
 8008244:	d10e      	bne.n	8008264 <SwitchClass+0x40>
            if( deviceClass == CLASS_A )
 8008246:	2800      	cmp	r0, #0
 8008248:	d108      	bne.n	800825c <SwitchClass+0x38>
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 800824a:	331d      	adds	r3, #29
 800824c:	3234      	adds	r2, #52	; 0x34
 800824e:	33ff      	adds	r3, #255	; 0xff
 8008250:	cb03      	ldmia	r3!, {r0, r1}
 8008252:	c203      	stmia	r2!, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008254:	3403      	adds	r4, #3
}
 8008256:	0020      	movs	r0, r4
 8008258:	b005      	add	sp, #20
 800825a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_B )
 800825c:	2801      	cmp	r0, #1
 800825e:	d056      	beq.n	800830e <SwitchClass+0xea>
            if( deviceClass == CLASS_C )
 8008260:	2802      	cmp	r0, #2
 8008262:	d001      	beq.n	8008268 <SwitchClass+0x44>
    switch( MacCtx.NvmCtx->DeviceClass )
 8008264:	2403      	movs	r4, #3
 8008266:	e7f6      	b.n	8008256 <SwitchClass+0x32>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8008268:	7010      	strb	r0, [r2, #0]
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800826a:	21f3      	movs	r1, #243	; 0xf3
 800826c:	22f8      	movs	r2, #248	; 0xf8
 800826e:	0089      	lsls	r1, r1, #2
 8008270:	0092      	lsls	r2, r2, #2
 8008272:	18b2      	adds	r2, r6, r2
 8008274:	1871      	adds	r1, r6, r1
 8008276:	c989      	ldmia	r1!, {r0, r3, r7}
 8008278:	c289      	stmia	r2!, {r0, r3, r7}
 800827a:	c909      	ldmia	r1!, {r0, r3}
 800827c:	c209      	stmia	r2!, {r0, r3}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800827e:	4a2f      	ldr	r2, [pc, #188]	; (800833c <SwitchClass+0x118>)
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8008280:	4660      	mov	r0, ip
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8008282:	54b5      	strb	r5, [r6, r2]
 8008284:	0021      	movs	r1, r4
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8008286:	2528      	movs	r5, #40	; 0x28
 8008288:	3051      	adds	r0, #81	; 0x51
 800828a:	002a      	movs	r2, r5
 800828c:	434a      	muls	r2, r1
 800828e:	5c87      	ldrb	r7, [r0, r2]
 8008290:	2f00      	cmp	r7, #0
 8008292:	d038      	beq.n	8008306 <SwitchClass+0xe2>
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8008294:	4660      	mov	r0, ip
 8008296:	4462      	add	r2, ip
 8008298:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800829a:	30fc      	adds	r0, #252	; 0xfc
 800829c:	6281      	str	r1, [r0, #40]	; 0x28
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800829e:	3268      	adds	r2, #104	; 0x68
 80082a0:	7810      	ldrb	r0, [r2, #0]
 80082a2:	2294      	movs	r2, #148	; 0x94
 80082a4:	4663      	mov	r3, ip
 80082a6:	0052      	lsls	r2, r2, #1
 80082a8:	5498      	strb	r0, [r3, r2]
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80082aa:	4a25      	ldr	r2, [pc, #148]	; (8008340 <SwitchClass+0x11c>)
 80082ac:	5cb0      	ldrb	r0, [r6, r2]
 80082ae:	3a35      	subs	r2, #53	; 0x35
 80082b0:	54b0      	strb	r0, [r6, r2]
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 80082b2:	3204      	adds	r2, #4
 80082b4:	50b1      	str	r1, [r6, r2]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80082b6:	222e      	movs	r2, #46	; 0x2e
 80082b8:	32ff      	adds	r2, #255	; 0xff
 80082ba:	5c99      	ldrb	r1, [r3, r2]
 80082bc:	22fc      	movs	r2, #252	; 0xfc
 80082be:	0092      	lsls	r2, r2, #2
 80082c0:	54b1      	strb	r1, [r6, r2]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80082c2:	2240      	movs	r2, #64	; 0x40
 80082c4:	32ff      	adds	r2, #255	; 0xff
 80082c6:	5c9a      	ldrb	r2, [r3, r2]
 80082c8:	4b1e      	ldr	r3, [pc, #120]	; (8008344 <SwitchClass+0x120>)
 80082ca:	54f2      	strb	r2, [r6, r3]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 80082cc:	4b1e      	ldr	r3, [pc, #120]	; (8008348 <SwitchClass+0x124>)
 80082ce:	4a1f      	ldr	r2, [pc, #124]	; (800834c <SwitchClass+0x128>)
 80082d0:	52f2      	strh	r2, [r6, r3]
                MacCtx.NodeAckRequested = false;
 80082d2:	2200      	movs	r2, #0
 80082d4:	4b1e      	ldr	r3, [pc, #120]	; (8008350 <SwitchClass+0x12c>)
 80082d6:	54f2      	strb	r2, [r6, r3]
                Radio.Sleep( );
 80082d8:	4b1e      	ldr	r3, [pc, #120]	; (8008354 <SwitchClass+0x130>)
 80082da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082dc:	9303      	str	r3, [sp, #12]
 80082de:	4798      	blx	r3
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80082e0:	4b15      	ldr	r3, [pc, #84]	; (8008338 <SwitchClass+0x114>)
                                                 MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 80082e2:	2194      	movs	r1, #148	; 0x94
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80082e4:	58f3      	ldr	r3, [r6, r3]
                                                 MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 80082e6:	0049      	lsls	r1, r1, #1
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80082e8:	001a      	movs	r2, r3
 80082ea:	001d      	movs	r5, r3
 80082ec:	5659      	ldrsb	r1, [r3, r1]
 80082ee:	7818      	ldrb	r0, [r3, #0]
 80082f0:	4b19      	ldr	r3, [pc, #100]	; (8008358 <SwitchClass+0x134>)
 80082f2:	32ff      	adds	r2, #255	; 0xff
 80082f4:	7852      	ldrb	r2, [r2, #1]
 80082f6:	35fc      	adds	r5, #252	; 0xfc
 80082f8:	9300      	str	r3, [sp, #0]
 80082fa:	682b      	ldr	r3, [r5, #0]
 80082fc:	f004 fbc7 	bl	800ca8e <RegionComputeRxWindowParameters>
                OpenContinuousRxCWindow( );
 8008300:	f7ff ff68 	bl	80081d4 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 8008304:	e7a7      	b.n	8008256 <SwitchClass+0x32>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8008306:	3101      	adds	r1, #1
 8008308:	2904      	cmp	r1, #4
 800830a:	d1be      	bne.n	800828a <SwitchClass+0x66>
 800830c:	e7e1      	b.n	80082d2 <SwitchClass+0xae>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800830e:	0028      	movs	r0, r5
 8008310:	f003 f8f0 	bl	800b4f4 <LoRaMacClassBSwitchClass>
 8008314:	1e04      	subs	r4, r0, #0
            if( status == LORAMAC_STATUS_OK )
 8008316:	d19e      	bne.n	8008256 <SwitchClass+0x32>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8008318:	59f3      	ldr	r3, [r6, r7]
 800831a:	33f0      	adds	r3, #240	; 0xf0
 800831c:	701d      	strb	r5, [r3, #0]
 800831e:	e79a      	b.n	8008256 <SwitchClass+0x32>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008320:	2403      	movs	r4, #3
            if( deviceClass == CLASS_A )
 8008322:	2800      	cmp	r0, #0
 8008324:	d197      	bne.n	8008256 <SwitchClass+0x32>
                Radio.Sleep( );
 8008326:	4b0b      	ldr	r3, [pc, #44]	; (8008354 <SwitchClass+0x130>)
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8008328:	7010      	strb	r0, [r2, #0]
                Radio.Sleep( );
 800832a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                status = LORAMAC_STATUS_OK;
 800832c:	002c      	movs	r4, r5
                Radio.Sleep( );
 800832e:	9303      	str	r3, [sp, #12]
 8008330:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8008332:	e790      	b.n	8008256 <SwitchClass+0x32>
 8008334:	200008bc 	.word	0x200008bc
 8008338:	00000484 	.word	0x00000484
 800833c:	000003f3 	.word	0x000003f3
 8008340:	00000415 	.word	0x00000415
 8008344:	000003f1 	.word	0x000003f1
 8008348:	000003f2 	.word	0x000003f2
 800834c:	00000301 	.word	0x00000301
 8008350:	00000414 	.word	0x00000414
 8008354:	0801074c 	.word	0x0801074c
 8008358:	20000c9c 	.word	0x20000c9c

0800835c <RxWindowSetup.constprop.0>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 800835c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800835e:	000c      	movs	r4, r1
    TimerStop( rxTimer );
 8008360:	f006 fa38 	bl	800e7d4 <TimerStop>
    Radio.Standby( );
 8008364:	4e0c      	ldr	r6, [pc, #48]	; (8008398 <RxWindowSetup.constprop.0+0x3c>)
    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8008366:	4f0d      	ldr	r7, [pc, #52]	; (800839c <RxWindowSetup.constprop.0+0x40>)
    Radio.Standby( );
 8008368:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800836a:	9301      	str	r3, [sp, #4]
 800836c:	4798      	blx	r3
    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800836e:	4d0c      	ldr	r5, [pc, #48]	; (80083a0 <RxWindowSetup.constprop.0+0x44>)
 8008370:	0021      	movs	r1, r4
 8008372:	59eb      	ldr	r3, [r5, r7]
 8008374:	4a0b      	ldr	r2, [pc, #44]	; (80083a4 <RxWindowSetup.constprop.0+0x48>)
 8008376:	7818      	ldrb	r0, [r3, #0]
 8008378:	f004 fb94 	bl	800caa4 <RegionRxConfig>
 800837c:	2800      	cmp	r0, #0
 800837e:	d009      	beq.n	8008394 <RxWindowSetup.constprop.0+0x38>
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 8008380:	59eb      	ldr	r3, [r5, r7]
 8008382:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8008384:	33fc      	adds	r3, #252	; 0xfc
 8008386:	6898      	ldr	r0, [r3, #8]
 8008388:	9201      	str	r2, [sp, #4]
 800838a:	4790      	blx	r2
        MacCtx.RxSlot = rxConfig->RxSlot;
 800838c:	2390      	movs	r3, #144	; 0x90
 800838e:	7ce2      	ldrb	r2, [r4, #19]
 8008390:	00db      	lsls	r3, r3, #3
 8008392:	54ea      	strb	r2, [r5, r3]
}
 8008394:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008396:	46c0      	nop			; (mov r8, r8)
 8008398:	0801074c 	.word	0x0801074c
 800839c:	00000484 	.word	0x00000484
 80083a0:	200008bc 	.word	0x200008bc
 80083a4:	20000cdc 	.word	0x20000cdc

080083a8 <OnRxWindow1TimerEvent>:
{
 80083a8:	b510      	push	{r4, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80083aa:	4b0f      	ldr	r3, [pc, #60]	; (80083e8 <OnRxWindow1TimerEvent+0x40>)
 80083ac:	4a0f      	ldr	r2, [pc, #60]	; (80083ec <OnRxWindow1TimerEvent+0x44>)
 80083ae:	5c99      	ldrb	r1, [r3, r2]
 80083b0:	3a5d      	subs	r2, #93	; 0x5d
 80083b2:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 80083b4:	4a0e      	ldr	r2, [pc, #56]	; (80083f0 <OnRxWindow1TimerEvent+0x48>)
 80083b6:	589a      	ldr	r2, [r3, r2]
 80083b8:	0011      	movs	r1, r2
 80083ba:	31ff      	adds	r1, #255	; 0xff
 80083bc:	7e88      	ldrb	r0, [r1, #26]
 80083be:	490d      	ldr	r1, [pc, #52]	; (80083f4 <OnRxWindow1TimerEvent+0x4c>)
 80083c0:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80083c2:	212e      	movs	r1, #46	; 0x2e
 80083c4:	31ff      	adds	r1, #255	; 0xff
 80083c6:	5c50      	ldrb	r0, [r2, r1]
 80083c8:	21f2      	movs	r1, #242	; 0xf2
 80083ca:	0089      	lsls	r1, r1, #2
 80083cc:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80083ce:	2140      	movs	r1, #64	; 0x40
 80083d0:	31ff      	adds	r1, #255	; 0xff
 80083d2:	5c51      	ldrb	r1, [r2, r1]
 80083d4:	4a08      	ldr	r2, [pc, #32]	; (80083f8 <OnRxWindow1TimerEvent+0x50>)
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80083d6:	4809      	ldr	r0, [pc, #36]	; (80083fc <OnRxWindow1TimerEvent+0x54>)
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80083d8:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 80083da:	2100      	movs	r1, #0
 80083dc:	4a08      	ldr	r2, [pc, #32]	; (8008400 <OnRxWindow1TimerEvent+0x58>)
 80083de:	5299      	strh	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80083e0:	4908      	ldr	r1, [pc, #32]	; (8008404 <OnRxWindow1TimerEvent+0x5c>)
 80083e2:	f7ff ffbb 	bl	800835c <RxWindowSetup.constprop.0>
}
 80083e6:	bd10      	pop	{r4, pc}
 80083e8:	200008bc 	.word	0x200008bc
 80083ec:	00000415 	.word	0x00000415
 80083f0:	00000484 	.word	0x00000484
 80083f4:	000003bb 	.word	0x000003bb
 80083f8:	000003c9 	.word	0x000003c9
 80083fc:	20000c3c 	.word	0x20000c3c
 8008400:	000003ca 	.word	0x000003ca
 8008404:	20000c74 	.word	0x20000c74

08008408 <OnRxWindow2TimerEvent>:
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8008408:	2290      	movs	r2, #144	; 0x90
{
 800840a:	b510      	push	{r4, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800840c:	4b12      	ldr	r3, [pc, #72]	; (8008458 <OnRxWindow2TimerEvent+0x50>)
 800840e:	00d2      	lsls	r2, r2, #3
 8008410:	5c9a      	ldrb	r2, [r3, r2]
 8008412:	2a00      	cmp	r2, #0
 8008414:	d01e      	beq.n	8008454 <OnRxWindow2TimerEvent+0x4c>
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8008416:	4a11      	ldr	r2, [pc, #68]	; (800845c <OnRxWindow2TimerEvent+0x54>)
 8008418:	5c99      	ldrb	r1, [r3, r2]
 800841a:	3a49      	subs	r2, #73	; 0x49
 800841c:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 800841e:	4a10      	ldr	r2, [pc, #64]	; (8008460 <OnRxWindow2TimerEvent+0x58>)
 8008420:	589a      	ldr	r2, [r3, r2]
 8008422:	0011      	movs	r1, r2
 8008424:	31fc      	adds	r1, #252	; 0xfc
 8008426:	6a08      	ldr	r0, [r1, #32]
 8008428:	21f4      	movs	r1, #244	; 0xf4
 800842a:	0089      	lsls	r1, r1, #2
 800842c:	5058      	str	r0, [r3, r1]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800842e:	212e      	movs	r1, #46	; 0x2e
 8008430:	31ff      	adds	r1, #255	; 0xff
 8008432:	5c50      	ldrb	r0, [r2, r1]
 8008434:	21f7      	movs	r1, #247	; 0xf7
 8008436:	0089      	lsls	r1, r1, #2
 8008438:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800843a:	2140      	movs	r1, #64	; 0x40
 800843c:	31ff      	adds	r1, #255	; 0xff
 800843e:	5c51      	ldrb	r1, [r2, r1]
 8008440:	4a08      	ldr	r2, [pc, #32]	; (8008464 <OnRxWindow2TimerEvent+0x5c>)
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8008442:	4809      	ldr	r0, [pc, #36]	; (8008468 <OnRxWindow2TimerEvent+0x60>)
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8008444:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8008446:	2180      	movs	r1, #128	; 0x80
 8008448:	4a08      	ldr	r2, [pc, #32]	; (800846c <OnRxWindow2TimerEvent+0x64>)
 800844a:	0049      	lsls	r1, r1, #1
 800844c:	5299      	strh	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800844e:	4908      	ldr	r1, [pc, #32]	; (8008470 <OnRxWindow2TimerEvent+0x68>)
 8008450:	f7ff ff84 	bl	800835c <RxWindowSetup.constprop.0>
}
 8008454:	bd10      	pop	{r4, pc}
 8008456:	46c0      	nop			; (mov r8, r8)
 8008458:	200008bc 	.word	0x200008bc
 800845c:	00000415 	.word	0x00000415
 8008460:	00000484 	.word	0x00000484
 8008464:	000003dd 	.word	0x000003dd
 8008468:	20000c54 	.word	0x20000c54
 800846c:	000003de 	.word	0x000003de
 8008470:	20000c88 	.word	0x20000c88

08008474 <ProcessMacCommands.isra.0.constprop.0>:
    uint8_t status = 0;
 8008474:	2300      	movs	r3, #0
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8008476:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008478:	b097      	sub	sp, #92	; 0x5c
 800847a:	9208      	str	r2, [sp, #32]
    uint8_t status = 0;
 800847c:	220d      	movs	r2, #13
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 800847e:	0007      	movs	r7, r0
    while( macIndex < commandsSize )
 8008480:	001c      	movs	r4, r3
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8008482:	9105      	str	r1, [sp, #20]
    uint8_t status = 0;
 8008484:	a908      	add	r1, sp, #32
 8008486:	1852      	adds	r2, r2, r1
 8008488:	7013      	strb	r3, [r2, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800848a:	aa0c      	add	r2, sp, #48	; 0x30
 800848c:	8013      	strh	r3, [r2, #0]
    bool adrBlockFound = false;
 800848e:	9303      	str	r3, [sp, #12]
    while( macIndex < commandsSize )
 8008490:	9b05      	ldr	r3, [sp, #20]
 8008492:	429c      	cmp	r4, r3
 8008494:	d301      	bcc.n	800849a <ProcessMacCommands.isra.0.constprop.0+0x26>
}
 8008496:	b017      	add	sp, #92	; 0x5c
 8008498:	bdf0      	pop	{r4, r5, r6, r7, pc}
        switch( payload[macIndex++] )
 800849a:	5d38      	ldrb	r0, [r7, r4]
 800849c:	1c65      	adds	r5, r4, #1
 800849e:	3802      	subs	r0, #2
 80084a0:	b2ed      	uxtb	r5, r5
 80084a2:	2811      	cmp	r0, #17
 80084a4:	d8f7      	bhi.n	8008496 <ProcessMacCommands.isra.0.constprop.0+0x22>
 80084a6:	f7f7 fe39 	bl	800011c <__gnu_thumb1_case_shi>
 80084aa:	0012      	.short	0x0012
 80084ac:	00900029 	.word	0x00900029
 80084b0:	00f100a9 	.word	0x00f100a9
 80084b4:	01370109 	.word	0x01370109
 80084b8:	01a90159 	.word	0x01a90159
 80084bc:	fff6fff6 	.word	0xfff6fff6
 80084c0:	fff601e1 	.word	0xfff601e1
 80084c4:	0227fff6 	.word	0x0227fff6
 80084c8:	024d0232 	.word	0x024d0232
 80084cc:	025d      	.short	0x025d
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80084ce:	2003      	movs	r0, #3
 80084d0:	f003 fd34 	bl	800bf3c <LoRaMacConfirmQueueIsCmdActive>
 80084d4:	2800      	cmp	r0, #0
 80084d6:	d00f      	beq.n	80084f8 <ProcessMacCommands.isra.0.constprop.0+0x84>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80084d8:	2103      	movs	r1, #3
 80084da:	2000      	movs	r0, #0
 80084dc:	f003 fcd8 	bl	800be90 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80084e0:	228b      	movs	r2, #139	; 0x8b
 80084e2:	5d79      	ldrb	r1, [r7, r5]
 80084e4:	4bdc      	ldr	r3, [pc, #880]	; (8008858 <ProcessMacCommands.isra.0.constprop.0+0x3e4>)
 80084e6:	00d2      	lsls	r2, r2, #3
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80084e8:	1ce5      	adds	r5, r4, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80084ea:	3402      	adds	r4, #2
 80084ec:	5499      	strb	r1, [r3, r2]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80084ee:	b2e4      	uxtb	r4, r4
 80084f0:	5d39      	ldrb	r1, [r7, r4]
 80084f2:	4ada      	ldr	r2, [pc, #872]	; (800885c <ProcessMacCommands.isra.0.constprop.0+0x3e8>)
 80084f4:	b2ed      	uxtb	r5, r5
 80084f6:	5499      	strb	r1, [r3, r2]
                uint8_t eirpDwellTime = payload[macIndex++];
 80084f8:	002c      	movs	r4, r5
 80084fa:	e7c9      	b.n	8008490 <ProcessMacCommands.isra.0.constprop.0+0x1c>
                int8_t linkAdrDatarate = DR_0;
 80084fc:	2300      	movs	r3, #0
 80084fe:	aa08      	add	r2, sp, #32
 8008500:	7393      	strb	r3, [r2, #14]
                int8_t linkAdrTxPower = TX_POWER_0;
 8008502:	73d3      	strb	r3, [r2, #15]
                uint8_t linkAdrNbRep = 0;
 8008504:	ae0d      	add	r6, sp, #52	; 0x34
                uint8_t linkAdrNbBytesParsed = 0;
 8008506:	aa0e      	add	r2, sp, #56	; 0x38
                uint8_t linkAdrNbRep = 0;
 8008508:	7033      	strb	r3, [r6, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 800850a:	7013      	strb	r3, [r2, #0]
                if( adrBlockFound == false )
 800850c:	9b03      	ldr	r3, [sp, #12]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d158      	bne.n	80085c4 <ProcessMacCommands.isra.0.constprop.0+0x150>
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8008512:	9b05      	ldr	r3, [sp, #20]
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8008514:	3d01      	subs	r5, #1
 8008516:	a912      	add	r1, sp, #72	; 0x48
 8008518:	197d      	adds	r5, r7, r5
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800851a:	1b1b      	subs	r3, r3, r4
 800851c:	720b      	strb	r3, [r1, #8]
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800851e:	604d      	str	r5, [r1, #4]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8008520:	4bcd      	ldr	r3, [pc, #820]	; (8008858 <ProcessMacCommands.isra.0.constprop.0+0x3e4>)
 8008522:	4dcf      	ldr	r5, [pc, #828]	; (8008860 <ProcessMacCommands.isra.0.constprop.0+0x3ec>)
 8008524:	595b      	ldr	r3, [r3, r5]
 8008526:	0018      	movs	r0, r3
 8008528:	30f2      	adds	r0, #242	; 0xf2
 800852a:	7800      	ldrb	r0, [r0, #0]
 800852c:	7288      	strb	r0, [r1, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800852e:	2096      	movs	r0, #150	; 0x96
 8008530:	0040      	lsls	r0, r0, #1
 8008532:	5c18      	ldrb	r0, [r3, r0]
 8008534:	7248      	strb	r0, [r1, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008536:	0018      	movs	r0, r3
 8008538:	30f9      	adds	r0, #249	; 0xf9
 800853a:	7800      	ldrb	r0, [r0, #0]
 800853c:	72c8      	strb	r0, [r1, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800853e:	0018      	movs	r0, r3
 8008540:	30f8      	adds	r0, #248	; 0xf8
 8008542:	7800      	ldrb	r0, [r0, #0]
 8008544:	7308      	strb	r0, [r1, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8008546:	0018      	movs	r0, r3
 8008548:	30ff      	adds	r0, #255	; 0xff
 800854a:	7e40      	ldrb	r0, [r0, #25]
 800854c:	7348      	strb	r0, [r1, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 800854e:	20e8      	movs	r0, #232	; 0xe8
 8008550:	0040      	lsls	r0, r0, #1
 8008552:	5818      	ldr	r0, [r3, r0]
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	9201      	str	r2, [sp, #4]
 8008558:	469c      	mov	ip, r3
 800855a:	230f      	movs	r3, #15
 800855c:	aa08      	add	r2, sp, #32
 800855e:	189b      	adds	r3, r3, r2
 8008560:	220e      	movs	r2, #14
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8008562:	9012      	str	r0, [sp, #72]	; 0x48
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8008564:	a808      	add	r0, sp, #32
 8008566:	1812      	adds	r2, r2, r0
 8008568:	9600      	str	r6, [sp, #0]
 800856a:	4660      	mov	r0, ip
 800856c:	f004 fab3 	bl	800cad6 <RegionLinkAdrReq>
 8008570:	ab08      	add	r3, sp, #32
 8008572:	7358      	strb	r0, [r3, #13]
                    if( ( status & 0x07 ) == 0x07 )
 8008574:	43c0      	mvns	r0, r0
 8008576:	0743      	lsls	r3, r0, #29
 8008578:	d10d      	bne.n	8008596 <ProcessMacCommands.isra.0.constprop.0+0x122>
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 800857a:	4bb7      	ldr	r3, [pc, #732]	; (8008858 <ProcessMacCommands.isra.0.constprop.0+0x3e4>)
 800857c:	a908      	add	r1, sp, #32
 800857e:	595b      	ldr	r3, [r3, r5]
 8008580:	7b89      	ldrb	r1, [r1, #14]
 8008582:	001a      	movs	r2, r3
 8008584:	32f9      	adds	r2, #249	; 0xf9
 8008586:	7011      	strb	r1, [r2, #0]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 8008588:	a908      	add	r1, sp, #32
 800858a:	7bc9      	ldrb	r1, [r1, #15]
 800858c:	3a01      	subs	r2, #1
 800858e:	7011      	strb	r1, [r2, #0]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 8008590:	7832      	ldrb	r2, [r6, #0]
 8008592:	33ff      	adds	r3, #255	; 0xff
 8008594:	765a      	strb	r2, [r3, #25]
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8008596:	2600      	movs	r6, #0
 8008598:	e009      	b.n	80085ae <ProcessMacCommands.isra.0.constprop.0+0x13a>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800859a:	230d      	movs	r3, #13
 800859c:	a908      	add	r1, sp, #32
 800859e:	185b      	adds	r3, r3, r1
 80085a0:	2201      	movs	r2, #1
 80085a2:	0019      	movs	r1, r3
 80085a4:	2003      	movs	r0, #3
 80085a6:	f003 fb1d 	bl	800bbe4 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80085aa:	3601      	adds	r6, #1
 80085ac:	b2f6      	uxtb	r6, r6
 80085ae:	ab0e      	add	r3, sp, #56	; 0x38
 80085b0:	781d      	ldrb	r5, [r3, #0]
 80085b2:	2105      	movs	r1, #5
 80085b4:	0028      	movs	r0, r5
 80085b6:	f7f7 fdc5 	bl	8000144 <__udivsi3>
 80085ba:	b2c0      	uxtb	r0, r0
 80085bc:	4286      	cmp	r6, r0
 80085be:	d3ec      	bcc.n	800859a <ProcessMacCommands.isra.0.constprop.0+0x126>
                    macIndex += linkAdrNbBytesParsed - 1;
 80085c0:	1965      	adds	r5, r4, r5
 80085c2:	b2ed      	uxtb	r5, r5
                break;
 80085c4:	2301      	movs	r3, #1
 80085c6:	9303      	str	r3, [sp, #12]
 80085c8:	e796      	b.n	80084f8 <ProcessMacCommands.isra.0.constprop.0+0x84>
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 80085ca:	4aa3      	ldr	r2, [pc, #652]	; (8008858 <ProcessMacCommands.isra.0.constprop.0+0x3e4>)
 80085cc:	4ba4      	ldr	r3, [pc, #656]	; (8008860 <ProcessMacCommands.isra.0.constprop.0+0x3ec>)
 80085ce:	3402      	adds	r4, #2
 80085d0:	58d1      	ldr	r1, [r2, r3]
 80085d2:	220f      	movs	r2, #15
 80085d4:	5d7b      	ldrb	r3, [r7, r5]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80085d6:	2004      	movs	r0, #4
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 80085d8:	4013      	ands	r3, r2
 80085da:	322e      	adds	r2, #46	; 0x2e
 80085dc:	32ff      	adds	r2, #255	; 0xff
 80085de:	548b      	strb	r3, [r1, r2]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 80085e0:	3a3c      	subs	r2, #60	; 0x3c
 80085e2:	3aff      	subs	r2, #255	; 0xff
 80085e4:	409a      	lsls	r2, r3
 80085e6:	0013      	movs	r3, r2
 80085e8:	22e1      	movs	r2, #225	; 0xe1
 80085ea:	0052      	lsls	r2, r2, #1
 80085ec:	528b      	strh	r3, [r1, r2]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80085ee:	2200      	movs	r2, #0
 80085f0:	a90c      	add	r1, sp, #48	; 0x30
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 80085f2:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80085f4:	f003 faf6 	bl	800bbe4 <LoRaMacCommandsAddCmd>
                uint8_t delay = payload[macIndex++] & 0x0F;
 80085f8:	0025      	movs	r5, r4
}
 80085fa:	e77d      	b.n	80084f8 <ProcessMacCommands.isra.0.constprop.0+0x84>
                status = 0x07;
 80085fc:	2107      	movs	r1, #7
 80085fe:	ab08      	add	r3, sp, #32
 8008600:	7359      	strb	r1, [r3, #13]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8008602:	5d7b      	ldrb	r3, [r7, r5]
 8008604:	ae12      	add	r6, sp, #72	; 0x48
 8008606:	091a      	lsrs	r2, r3, #4
 8008608:	400a      	ands	r2, r1
 800860a:	7072      	strb	r2, [r6, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800860c:	220f      	movs	r2, #15
 800860e:	4013      	ands	r3, r2
 8008610:	7033      	strb	r3, [r6, #0]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008612:	1d22      	adds	r2, r4, #4
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8008614:	1ce3      	adds	r3, r4, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008616:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008618:	b2d2      	uxtb	r2, r2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800861a:	5cfb      	ldrb	r3, [r7, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800861c:	5cba      	ldrb	r2, [r7, r2]
 800861e:	1d65      	adds	r5, r4, #5
                macIndex++;
 8008620:	3402      	adds	r4, #2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008622:	0412      	lsls	r2, r2, #16
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8008624:	b2e4      	uxtb	r4, r4
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008626:	021b      	lsls	r3, r3, #8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008628:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800862a:	5d3a      	ldrb	r2, [r7, r4]
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 800862c:	4c8c      	ldr	r4, [pc, #560]	; (8008860 <ProcessMacCommands.isra.0.constprop.0+0x3ec>)
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800862e:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 8008630:	2264      	movs	r2, #100	; 0x64
 8008632:	4353      	muls	r3, r2
 8008634:	9313      	str	r3, [sp, #76]	; 0x4c
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8008636:	4b88      	ldr	r3, [pc, #544]	; (8008858 <ProcessMacCommands.isra.0.constprop.0+0x3e4>)
 8008638:	0031      	movs	r1, r6
 800863a:	591b      	ldr	r3, [r3, r4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800863c:	b2ed      	uxtb	r5, r5
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 800863e:	7818      	ldrb	r0, [r3, #0]
 8008640:	9304      	str	r3, [sp, #16]
 8008642:	f004 fa58 	bl	800caf6 <RegionRxParamSetupReq>
 8008646:	ab08      	add	r3, sp, #32
 8008648:	7358      	strb	r0, [r3, #13]
                if( ( status & 0x07 ) == 0x07 )
 800864a:	2307      	movs	r3, #7
 800864c:	4003      	ands	r3, r0
 800864e:	2b07      	cmp	r3, #7
 8008650:	d10f      	bne.n	8008672 <ProcessMacCommands.isra.0.constprop.0+0x1fe>
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8008652:	2190      	movs	r1, #144	; 0x90
 8008654:	4b80      	ldr	r3, [pc, #512]	; (8008858 <ProcessMacCommands.isra.0.constprop.0+0x3e4>)
 8008656:	7832      	ldrb	r2, [r6, #0]
 8008658:	591b      	ldr	r3, [r3, r4]
 800865a:	0049      	lsls	r1, r1, #1
 800865c:	545a      	strb	r2, [r3, r1]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800865e:	3108      	adds	r1, #8
 8008660:	545a      	strb	r2, [r3, r1]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8008662:	001a      	movs	r2, r3
 8008664:	6871      	ldr	r1, [r6, #4]
 8008666:	32fc      	adds	r2, #252	; 0xfc
 8008668:	6211      	str	r1, [r2, #32]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800866a:	6291      	str	r1, [r2, #40]	; 0x28
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800866c:	7872      	ldrb	r2, [r6, #1]
 800866e:	33ff      	adds	r3, #255	; 0xff
 8008670:	769a      	strb	r2, [r3, #26]
                macCmdPayload[0] = status;
 8008672:	a90c      	add	r1, sp, #48	; 0x30
 8008674:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8008676:	2201      	movs	r2, #1
 8008678:	2005      	movs	r0, #5
 800867a:	f003 fab3 	bl	800bbe4 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800867e:	2310      	movs	r3, #16
 8008680:	4975      	ldr	r1, [pc, #468]	; (8008858 <ProcessMacCommands.isra.0.constprop.0+0x3e4>)
 8008682:	4a78      	ldr	r2, [pc, #480]	; (8008864 <ProcessMacCommands.isra.0.constprop.0+0x3f0>)
 8008684:	5c88      	ldrb	r0, [r1, r2]
 8008686:	4303      	orrs	r3, r0
 8008688:	548b      	strb	r3, [r1, r2]
                break;
 800868a:	e735      	b.n	80084f8 <ProcessMacCommands.isra.0.constprop.0+0x84>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800868c:	23d2      	movs	r3, #210	; 0xd2
 800868e:	4a72      	ldr	r2, [pc, #456]	; (8008858 <ProcessMacCommands.isra.0.constprop.0+0x3e4>)
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	58d3      	ldr	r3, [r2, r3]
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8008694:	20ff      	movs	r0, #255	; 0xff
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8008696:	2b00      	cmp	r3, #0
 8008698:	d003      	beq.n	80086a2 <ProcessMacCommands.isra.0.constprop.0+0x22e>
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d000      	beq.n	80086a2 <ProcessMacCommands.isra.0.constprop.0+0x22e>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80086a0:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 80086a2:	ab08      	add	r3, sp, #32
 80086a4:	7418      	strb	r0, [r3, #16]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80086a6:	233f      	movs	r3, #63	; 0x3f
 80086a8:	9a08      	ldr	r2, [sp, #32]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80086aa:	2006      	movs	r0, #6
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80086ac:	4013      	ands	r3, r2
 80086ae:	aa08      	add	r2, sp, #32
 80086b0:	7453      	strb	r3, [r2, #17]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80086b2:	2202      	movs	r2, #2
 80086b4:	a90c      	add	r1, sp, #48	; 0x30
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80086b6:	f003 fa95 	bl	800bbe4 <LoRaMacCommandsAddCmd>
                break;
 80086ba:	e71d      	b.n	80084f8 <ProcessMacCommands.isra.0.constprop.0+0x84>
                status = 0x03;
 80086bc:	260d      	movs	r6, #13
 80086be:	ab08      	add	r3, sp, #32
 80086c0:	18f6      	adds	r6, r6, r3
 80086c2:	2303      	movs	r3, #3
 80086c4:	7033      	strb	r3, [r6, #0]
                newChannelReq.ChannelId = payload[macIndex++];
 80086c6:	5d7b      	ldrb	r3, [r7, r5]
 80086c8:	a90e      	add	r1, sp, #56	; 0x38
 80086ca:	710b      	strb	r3, [r1, #4]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80086cc:	1ce3      	adds	r3, r4, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	5cf8      	ldrb	r0, [r7, r3]
 80086d2:	1d23      	adds	r3, r4, #4
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	5cfb      	ldrb	r3, [r7, r3]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80086d8:	0200      	lsls	r0, r0, #8
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80086da:	041b      	lsls	r3, r3, #16
 80086dc:	4303      	orrs	r3, r0
                newChannelReq.ChannelId = payload[macIndex++];
 80086de:	1ca0      	adds	r0, r4, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80086e0:	b2c0      	uxtb	r0, r0
 80086e2:	5c38      	ldrb	r0, [r7, r0]
                chParam.DrRange.Value = payload[macIndex++];
 80086e4:	1da5      	adds	r5, r4, #6
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80086e6:	4303      	orrs	r3, r0
                chParam.Frequency *= 100;
 80086e8:	2064      	movs	r0, #100	; 0x64
 80086ea:	4343      	muls	r3, r0
 80086ec:	9312      	str	r3, [sp, #72]	; 0x48
                chParam.Rx1Frequency = 0;
 80086ee:	2300      	movs	r3, #0
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80086f0:	3405      	adds	r4, #5
                chParam.DrRange.Value = payload[macIndex++];
 80086f2:	b2e4      	uxtb	r4, r4
                chParam.Rx1Frequency = 0;
 80086f4:	9313      	str	r3, [sp, #76]	; 0x4c
                chParam.DrRange.Value = payload[macIndex++];
 80086f6:	5d3b      	ldrb	r3, [r7, r4]
                newChannelReq.NewChannel = &chParam;
 80086f8:	aa12      	add	r2, sp, #72	; 0x48
                chParam.DrRange.Value = payload[macIndex++];
 80086fa:	7213      	strb	r3, [r2, #8]
                newChannelReq.NewChannel = &chParam;
 80086fc:	920e      	str	r2, [sp, #56]	; 0x38
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 80086fe:	4b58      	ldr	r3, [pc, #352]	; (8008860 <ProcessMacCommands.isra.0.constprop.0+0x3ec>)
 8008700:	4a55      	ldr	r2, [pc, #340]	; (8008858 <ProcessMacCommands.isra.0.constprop.0+0x3e4>)
                chParam.DrRange.Value = payload[macIndex++];
 8008702:	b2ed      	uxtb	r5, r5
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8008704:	58d3      	ldr	r3, [r2, r3]
 8008706:	7818      	ldrb	r0, [r3, #0]
 8008708:	f004 f9ff 	bl	800cb0a <RegionNewChannelReq>
                macCmdPayload[0] = status;
 800870c:	a90c      	add	r1, sp, #48	; 0x30
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 800870e:	7030      	strb	r0, [r6, #0]
                macCmdPayload[0] = status;
 8008710:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8008712:	2201      	movs	r2, #1
 8008714:	2007      	movs	r0, #7
 8008716:	e7ce      	b.n	80086b6 <ProcessMacCommands.isra.0.constprop.0+0x242>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8008718:	230f      	movs	r3, #15
 800871a:	5d79      	ldrb	r1, [r7, r5]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 800871c:	4a4e      	ldr	r2, [pc, #312]	; (8008858 <ProcessMacCommands.isra.0.constprop.0+0x3e4>)
                uint8_t delay = payload[macIndex++] & 0x0F;
 800871e:	4019      	ands	r1, r3
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8008720:	4b4f      	ldr	r3, [pc, #316]	; (8008860 <ProcessMacCommands.isra.0.constprop.0+0x3ec>)
                uint8_t delay = payload[macIndex++] & 0x0F;
 8008722:	3402      	adds	r4, #2
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8008724:	58d2      	ldr	r2, [r2, r3]
                uint8_t delay = payload[macIndex++] & 0x0F;
 8008726:	b2e4      	uxtb	r4, r4
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8008728:	1c0b      	adds	r3, r1, #0
 800872a:	2900      	cmp	r1, #0
 800872c:	d100      	bne.n	8008730 <ProcessMacCommands.isra.0.constprop.0+0x2bc>
 800872e:	2301      	movs	r3, #1
 8008730:	b2d9      	uxtb	r1, r3
 8008732:	23fa      	movs	r3, #250	; 0xfa
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	434b      	muls	r3, r1
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8008738:	21fa      	movs	r1, #250	; 0xfa
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 800873a:	32fc      	adds	r2, #252	; 0xfc
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800873c:	0089      	lsls	r1, r1, #2
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 800873e:	60d3      	str	r3, [r2, #12]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8008740:	185b      	adds	r3, r3, r1
 8008742:	6113      	str	r3, [r2, #16]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8008744:	a90c      	add	r1, sp, #48	; 0x30
 8008746:	2200      	movs	r2, #0
 8008748:	2008      	movs	r0, #8
 800874a:	f003 fa4b 	bl	800bbe4 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800874e:	2310      	movs	r3, #16
 8008750:	4941      	ldr	r1, [pc, #260]	; (8008858 <ProcessMacCommands.isra.0.constprop.0+0x3e4>)
 8008752:	4a44      	ldr	r2, [pc, #272]	; (8008864 <ProcessMacCommands.isra.0.constprop.0+0x3f0>)
 8008754:	5c88      	ldrb	r0, [r1, r2]
 8008756:	4303      	orrs	r3, r0
 8008758:	548b      	strb	r3, [r1, r2]
 800875a:	e74d      	b.n	80085f8 <ProcessMacCommands.isra.0.constprop.0+0x184>
                uint8_t eirpDwellTime = payload[macIndex++];
 800875c:	3402      	adds	r4, #2
 800875e:	b2e3      	uxtb	r3, r4
 8008760:	9306      	str	r3, [sp, #24]
 8008762:	5d7b      	ldrb	r3, [r7, r5]
                txParamSetupReq.UplinkDwellTime = 0;
 8008764:	2200      	movs	r2, #0
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8008766:	0019      	movs	r1, r3
                txParamSetupReq.UplinkDwellTime = 0;
 8008768:	ac0d      	add	r4, sp, #52	; 0x34
 800876a:	7022      	strb	r2, [r4, #0]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800876c:	3220      	adds	r2, #32
 800876e:	4011      	ands	r1, r2
 8008770:	4213      	tst	r3, r2
 8008772:	d140      	bne.n	80087f6 <ProcessMacCommands.isra.0.constprop.0+0x382>
                txParamSetupReq.DownlinkDwellTime = 0;
 8008774:	7061      	strb	r1, [r4, #1]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8008776:	06da      	lsls	r2, r3, #27
 8008778:	d501      	bpl.n	800877e <ProcessMacCommands.isra.0.constprop.0+0x30a>
                    txParamSetupReq.UplinkDwellTime = 1;
 800877a:	2201      	movs	r2, #1
 800877c:	7022      	strb	r2, [r4, #0]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800877e:	220f      	movs	r2, #15
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8008780:	4d35      	ldr	r5, [pc, #212]	; (8008858 <ProcessMacCommands.isra.0.constprop.0+0x3e4>)
 8008782:	4e37      	ldr	r6, [pc, #220]	; (8008860 <ProcessMacCommands.isra.0.constprop.0+0x3ec>)
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8008784:	4013      	ands	r3, r2
 8008786:	70a3      	strb	r3, [r4, #2]
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8008788:	59ab      	ldr	r3, [r5, r6]
 800878a:	0021      	movs	r1, r4
 800878c:	7818      	ldrb	r0, [r3, #0]
 800878e:	f004 f9c6 	bl	800cb1e <RegionTxParamSetupReq>
 8008792:	1c43      	adds	r3, r0, #1
 8008794:	d02d      	beq.n	80087f2 <ProcessMacCommands.isra.0.constprop.0+0x37e>
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8008796:	59ab      	ldr	r3, [r5, r6]
 8008798:	8822      	ldrh	r2, [r4, #0]
 800879a:	9304      	str	r3, [sp, #16]
 800879c:	7823      	ldrb	r3, [r4, #0]
 800879e:	9307      	str	r3, [sp, #28]
 80087a0:	9b04      	ldr	r3, [sp, #16]
 80087a2:	33fe      	adds	r3, #254	; 0xfe
 80087a4:	85da      	strh	r2, [r3, #46]	; 0x2e
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80087a6:	9b04      	ldr	r3, [sp, #16]
 80087a8:	4a2f      	ldr	r2, [pc, #188]	; (8008868 <ProcessMacCommands.isra.0.constprop.0+0x3f4>)
 80087aa:	33fc      	adds	r3, #252	; 0xfc
 80087ac:	9309      	str	r3, [sp, #36]	; 0x24
 80087ae:	78a3      	ldrb	r3, [r4, #2]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 80087b0:	2400      	movs	r4, #0
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80087b2:	5cd0      	ldrb	r0, [r2, r3]
 80087b4:	f7f8 fe3e 	bl	8001434 <__aeabi_ui2f>
 80087b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80087ba:	aa08      	add	r2, sp, #32
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80087bc:	6358      	str	r0, [r3, #52]	; 0x34
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80087be:	2302      	movs	r3, #2
 80087c0:	7613      	strb	r3, [r2, #24]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80087c2:	0013      	movs	r3, r2
 80087c4:	9a07      	ldr	r2, [sp, #28]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80087c6:	a90e      	add	r1, sp, #56	; 0x38
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80087c8:	769a      	strb	r2, [r3, #26]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80087ca:	9b04      	ldr	r3, [sp, #16]
 80087cc:	7818      	ldrb	r0, [r3, #0]
 80087ce:	f004 f91d 	bl	800ca0c <RegionGetPhyParam>
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 80087d2:	59ab      	ldr	r3, [r5, r6]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80087d4:	9012      	str	r0, [sp, #72]	; 0x48
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 80087d6:	33f9      	adds	r3, #249	; 0xf9
 80087d8:	571c      	ldrsb	r4, [r3, r4]
 80087da:	1c02      	adds	r2, r0, #0
 80087dc:	b240      	sxtb	r0, r0
 80087de:	7819      	ldrb	r1, [r3, #0]
 80087e0:	42a0      	cmp	r0, r4
 80087e2:	da00      	bge.n	80087e6 <ProcessMacCommands.isra.0.constprop.0+0x372>
 80087e4:	1c0a      	adds	r2, r1, #0
 80087e6:	701a      	strb	r2, [r3, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80087e8:	2009      	movs	r0, #9
 80087ea:	2200      	movs	r2, #0
 80087ec:	a90c      	add	r1, sp, #48	; 0x30
 80087ee:	f003 f9f9 	bl	800bbe4 <LoRaMacCommandsAddCmd>
                uint8_t eirpDwellTime = payload[macIndex++];
 80087f2:	9d06      	ldr	r5, [sp, #24]
 80087f4:	e680      	b.n	80084f8 <ProcessMacCommands.isra.0.constprop.0+0x84>
                    txParamSetupReq.DownlinkDwellTime = 1;
 80087f6:	2201      	movs	r2, #1
 80087f8:	7062      	strb	r2, [r4, #1]
 80087fa:	e7bc      	b.n	8008776 <ProcessMacCommands.isra.0.constprop.0+0x302>
                status = 0x03;
 80087fc:	260d      	movs	r6, #13
 80087fe:	ab08      	add	r3, sp, #32
 8008800:	18f6      	adds	r6, r6, r3
 8008802:	2303      	movs	r3, #3
 8008804:	7033      	strb	r3, [r6, #0]
                dlChannelReq.ChannelId = payload[macIndex++];
 8008806:	5d7b      	ldrb	r3, [r7, r5]
 8008808:	a912      	add	r1, sp, #72	; 0x48
 800880a:	700b      	strb	r3, [r1, #0]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800880c:	1d22      	adds	r2, r4, #4
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800880e:	1ce3      	adds	r3, r4, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008810:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008812:	b2d2      	uxtb	r2, r2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008814:	5cfb      	ldrb	r3, [r7, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008816:	5cba      	ldrb	r2, [r7, r2]
 8008818:	1d65      	adds	r5, r4, #5
                dlChannelReq.ChannelId = payload[macIndex++];
 800881a:	3402      	adds	r4, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800881c:	0412      	lsls	r2, r2, #16
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800881e:	b2e4      	uxtb	r4, r4
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008820:	021b      	lsls	r3, r3, #8
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008822:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8008824:	5d3a      	ldrb	r2, [r7, r4]
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8008826:	4c0c      	ldr	r4, [pc, #48]	; (8008858 <ProcessMacCommands.isra.0.constprop.0+0x3e4>)
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008828:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 800882a:	2264      	movs	r2, #100	; 0x64
 800882c:	4353      	muls	r3, r2
 800882e:	604b      	str	r3, [r1, #4]
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8008830:	4b0b      	ldr	r3, [pc, #44]	; (8008860 <ProcessMacCommands.isra.0.constprop.0+0x3ec>)
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008832:	b2ed      	uxtb	r5, r5
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8008834:	58e3      	ldr	r3, [r4, r3]
 8008836:	7818      	ldrb	r0, [r3, #0]
 8008838:	f004 f97b 	bl	800cb32 <RegionDlChannelReq>
                macCmdPayload[0] = status;
 800883c:	a90c      	add	r1, sp, #48	; 0x30
 800883e:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8008840:	2201      	movs	r2, #1
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8008842:	7030      	strb	r0, [r6, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8008844:	200a      	movs	r0, #10
 8008846:	f003 f9cd 	bl	800bbe4 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800884a:	2310      	movs	r3, #16
 800884c:	4a05      	ldr	r2, [pc, #20]	; (8008864 <ProcessMacCommands.isra.0.constprop.0+0x3f0>)
 800884e:	5ca1      	ldrb	r1, [r4, r2]
 8008850:	430b      	orrs	r3, r1
 8008852:	54a3      	strb	r3, [r4, r2]
                break;
 8008854:	e650      	b.n	80084f8 <ProcessMacCommands.isra.0.constprop.0+0x84>
 8008856:	46c0      	nop			; (mov r8, r8)
 8008858:	200008bc 	.word	0x200008bc
 800885c:	00000459 	.word	0x00000459
 8008860:	00000484 	.word	0x00000484
 8008864:	00000481 	.word	0x00000481
 8008868:	08010be9 	.word	0x08010be9
                SysTime_t sysTime = { 0 };
 800886c:	231e      	movs	r3, #30
 800886e:	aa08      	add	r2, sp, #32
 8008870:	189b      	adds	r3, r3, r2
 8008872:	2200      	movs	r2, #0
 8008874:	801a      	strh	r2, [r3, #0]
                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8008876:	1ca3      	adds	r3, r4, #2
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8008878:	b2db      	uxtb	r3, r3
 800887a:	5cfe      	ldrb	r6, [r7, r3]
 800887c:	1ce3      	adds	r3, r4, #3
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800887e:	b2db      	uxtb	r3, r3
 8008880:	5cf9      	ldrb	r1, [r7, r3]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8008882:	0236      	lsls	r6, r6, #8
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8008884:	0409      	lsls	r1, r1, #16
 8008886:	430e      	orrs	r6, r1
 8008888:	1d23      	adds	r3, r4, #4
                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800888a:	5d79      	ldrb	r1, [r7, r5]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800888c:	b2db      	uxtb	r3, r3
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800888e:	430e      	orrs	r6, r1
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8008890:	5cf9      	ldrb	r1, [r7, r3]
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8008892:	23fa      	movs	r3, #250	; 0xfa
                gpsEpochTime.SubSeconds = payload[macIndex++];
 8008894:	1da5      	adds	r5, r4, #6
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8008896:	3405      	adds	r4, #5
                gpsEpochTime.SubSeconds = payload[macIndex++];
 8008898:	b2e4      	uxtb	r4, r4
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800889a:	5d3a      	ldrb	r2, [r7, r4]
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4353      	muls	r3, r2
 80088a0:	aa08      	add	r2, sp, #32
 80088a2:	121b      	asrs	r3, r3, #8
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80088a4:	0609      	lsls	r1, r1, #24
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80088a6:	8393      	strh	r3, [r2, #28]
                sysTimeCurrent = SysTimeGet( );
 80088a8:	a812      	add	r0, sp, #72	; 0x48
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80088aa:	430e      	orrs	r6, r1
                sysTimeCurrent = SysTimeGet( );
 80088ac:	f005 fe6e 	bl	800e58c <SysTimeGet>
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80088b0:	4b37      	ldr	r3, [pc, #220]	; (8008990 <ProcessMacCommands.isra.0.constprop.0+0x51c>)
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80088b2:	4c38      	ldr	r4, [pc, #224]	; (8008994 <ProcessMacCommands.isra.0.constprop.0+0x520>)
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80088b4:	18f1      	adds	r1, r6, r3
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80088b6:	23cf      	movs	r3, #207	; 0xcf
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	18e3      	adds	r3, r4, r3
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088c0:	9300      	str	r3, [sp, #0]
 80088c2:	23ce      	movs	r3, #206	; 0xce
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	58e3      	ldr	r3, [r4, r3]
 80088c8:	a810      	add	r0, sp, #64	; 0x40
 80088ca:	910e      	str	r1, [sp, #56]	; 0x38
 80088cc:	f005 fe2a 	bl	800e524 <SysTimeSub>
 80088d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80088d4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80088d6:	9300      	str	r3, [sp, #0]
 80088d8:	a80e      	add	r0, sp, #56	; 0x38
 80088da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088dc:	f005 fe08 	bl	800e4f0 <SysTimeAdd>
                SysTimeSet( sysTime );
 80088e0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80088e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80088e4:	f005 fe34 	bl	800e550 <SysTimeSet>
                LoRaMacClassBDeviceTimeAns( );
 80088e8:	f002 fd24 	bl	800b334 <LoRaMacClassBDeviceTimeAns>
                MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80088ec:	2387      	movs	r3, #135	; 0x87
 80088ee:	2201      	movs	r2, #1
 80088f0:	00db      	lsls	r3, r3, #3
                gpsEpochTime.SubSeconds = payload[macIndex++];
 80088f2:	b2ed      	uxtb	r5, r5
                MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80088f4:	54e2      	strb	r2, [r4, r3]
                break;
 80088f6:	e5ff      	b.n	80084f8 <ProcessMacCommands.isra.0.constprop.0+0x84>
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80088f8:	2390      	movs	r3, #144	; 0x90
 80088fa:	4a26      	ldr	r2, [pc, #152]	; (8008994 <ProcessMacCommands.isra.0.constprop.0+0x520>)
 80088fc:	00db      	lsls	r3, r3, #3
 80088fe:	5cd3      	ldrb	r3, [r2, r3]
 8008900:	3b04      	subs	r3, #4
 8008902:	2b01      	cmp	r3, #1
 8008904:	d800      	bhi.n	8008908 <ProcessMacCommands.isra.0.constprop.0+0x494>
 8008906:	e5f7      	b.n	80084f8 <ProcessMacCommands.isra.0.constprop.0+0x84>
                    LoRaMacClassBPingSlotInfoAns( );
 8008908:	f002 fc7c 	bl	800b204 <LoRaMacClassBPingSlotInfoAns>
 800890c:	e5f4      	b.n	80084f8 <ProcessMacCommands.isra.0.constprop.0+0x84>
                frequency = ( uint32_t )payload[macIndex++];
 800890e:	1ca3      	adds	r3, r4, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008910:	b2db      	uxtb	r3, r3
 8008912:	5cf9      	ldrb	r1, [r7, r3]
 8008914:	1ce3      	adds	r3, r4, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008916:	b2db      	uxtb	r3, r3
 8008918:	5cfb      	ldrb	r3, [r7, r3]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800891a:	0209      	lsls	r1, r1, #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800891c:	041b      	lsls	r3, r3, #16
 800891e:	4319      	orrs	r1, r3
                frequency *= 100;
 8008920:	2364      	movs	r3, #100	; 0x64
                frequency = ( uint32_t )payload[macIndex++];
 8008922:	5d7a      	ldrb	r2, [r7, r5]
                datarate = payload[macIndex++] & 0x0F;
 8008924:	1d65      	adds	r5, r4, #5
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008926:	3404      	adds	r4, #4
                datarate = payload[macIndex++] & 0x0F;
 8008928:	b2e4      	uxtb	r4, r4
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800892a:	4311      	orrs	r1, r2
                datarate = payload[macIndex++] & 0x0F;
 800892c:	5d38      	ldrb	r0, [r7, r4]
                frequency *= 100;
 800892e:	4359      	muls	r1, r3
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8008930:	3b55      	subs	r3, #85	; 0x55
 8008932:	4018      	ands	r0, r3
 8008934:	f002 fc7c 	bl	800b230 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8008938:	a90c      	add	r1, sp, #48	; 0x30
 800893a:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800893c:	2201      	movs	r2, #1
 800893e:	2011      	movs	r0, #17
                datarate = payload[macIndex++] & 0x0F;
 8008940:	b2ed      	uxtb	r5, r5
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8008942:	e6b8      	b.n	80086b6 <ProcessMacCommands.isra.0.constprop.0+0x242>
                beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8008944:	1ca3      	adds	r3, r4, #2
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8008946:	b2db      	uxtb	r3, r3
 8008948:	5cf8      	ldrb	r0, [r7, r3]
 800894a:	5d7b      	ldrb	r3, [r7, r5]
 800894c:	0200      	lsls	r0, r0, #8
 800894e:	4318      	orrs	r0, r3
                beaconTimingChannel = payload[macIndex++];
 8008950:	1d25      	adds	r5, r4, #4
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8008952:	4b11      	ldr	r3, [pc, #68]	; (8008998 <ProcessMacCommands.isra.0.constprop.0+0x524>)
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8008954:	3403      	adds	r4, #3
                beaconTimingChannel = payload[macIndex++];
 8008956:	b2e4      	uxtb	r4, r4
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8008958:	5d39      	ldrb	r1, [r7, r4]
 800895a:	681a      	ldr	r2, [r3, #0]
                beaconTimingChannel = payload[macIndex++];
 800895c:	b2ed      	uxtb	r5, r5
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800895e:	f002 fcb3 	bl	800b2c8 <LoRaMacClassBBeaconTimingAns>
                break;
 8008962:	e5c9      	b.n	80084f8 <ProcessMacCommands.isra.0.constprop.0+0x84>
                    frequency = ( uint32_t )payload[macIndex++];
 8008964:	5d7a      	ldrb	r2, [r7, r5]
 8008966:	1ca3      	adds	r3, r4, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008968:	1d25      	adds	r5, r4, #4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800896a:	3403      	adds	r4, #3
 800896c:	b2db      	uxtb	r3, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800896e:	b2e4      	uxtb	r4, r4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008970:	5cf8      	ldrb	r0, [r7, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008972:	5d3b      	ldrb	r3, [r7, r4]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008974:	0200      	lsls	r0, r0, #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008976:	041b      	lsls	r3, r3, #16
 8008978:	4318      	orrs	r0, r3
                    frequency *= 100;
 800897a:	2364      	movs	r3, #100	; 0x64
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800897c:	4310      	orrs	r0, r2
                    frequency *= 100;
 800897e:	4358      	muls	r0, r3
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8008980:	f002 fd2c 	bl	800b3dc <LoRaMacClassBBeaconFreqReq>
 8008984:	a90c      	add	r1, sp, #48	; 0x30
 8008986:	7008      	strb	r0, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8008988:	2201      	movs	r2, #1
 800898a:	2013      	movs	r0, #19
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800898c:	b2ed      	uxtb	r5, r5
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800898e:	e692      	b.n	80086b6 <ProcessMacCommands.isra.0.constprop.0+0x242>
 8008990:	12d53d80 	.word	0x12d53d80
 8008994:	200008bc 	.word	0x200008bc
 8008998:	2000160c 	.word	0x2000160c

0800899c <LoRaMacIsBusy>:
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800899c:	22d0      	movs	r2, #208	; 0xd0
 800899e:	4b06      	ldr	r3, [pc, #24]	; (80089b8 <LoRaMacIsBusy+0x1c>)
 80089a0:	0092      	lsls	r2, r2, #2
 80089a2:	589a      	ldr	r2, [r3, r2]
    return true;
 80089a4:	2001      	movs	r0, #1
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80089a6:	2a00      	cmp	r2, #0
 80089a8:	d105      	bne.n	80089b6 <LoRaMacIsBusy+0x1a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 80089aa:	4a04      	ldr	r2, [pc, #16]	; (80089bc <LoRaMacIsBusy+0x20>)
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80089ac:	5c98      	ldrb	r0, [r3, r2]
 80089ae:	3801      	subs	r0, #1
 80089b0:	1e43      	subs	r3, r0, #1
 80089b2:	4198      	sbcs	r0, r3
 80089b4:	b2c0      	uxtb	r0, r0
}
 80089b6:	4770      	bx	lr
 80089b8:	200008bc 	.word	0x200008bc
 80089bc:	00000482 	.word	0x00000482

080089c0 <PrepareFrame>:
{
 80089c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    MacCtx.PktBufferLen = 0;
 80089c2:	2500      	movs	r5, #0
{
 80089c4:	001f      	movs	r7, r3
 80089c6:	b087      	sub	sp, #28
 80089c8:	ab0c      	add	r3, sp, #48	; 0x30
    MacCtx.PktBufferLen = 0;
 80089ca:	4c57      	ldr	r4, [pc, #348]	; (8008b28 <PrepareFrame+0x168>)
{
 80089cc:	881e      	ldrh	r6, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80089ce:	4b57      	ldr	r3, [pc, #348]	; (8008b2c <PrepareFrame+0x16c>)
{
 80089d0:	9203      	str	r2, [sp, #12]
    MacCtx.NodeAckRequested = false;
 80089d2:	54e5      	strb	r5, [r4, r3]
        fBufferSize = 0;
 80089d4:	003b      	movs	r3, r7
 80089d6:	1e5a      	subs	r2, r3, #1
 80089d8:	4193      	sbcs	r3, r2
 80089da:	425b      	negs	r3, r3
 80089dc:	401e      	ands	r6, r3
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80089de:	0032      	movs	r2, r6
{
 80089e0:	9001      	str	r0, [sp, #4]
 80089e2:	9102      	str	r1, [sp, #8]
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80089e4:	4852      	ldr	r0, [pc, #328]	; (8008b30 <PrepareFrame+0x170>)
 80089e6:	0039      	movs	r1, r7
    MacCtx.PktBufferLen = 0;
 80089e8:	8025      	strh	r5, [r4, #0]
    uint32_t fCntUp = 0;
 80089ea:	9504      	str	r5, [sp, #16]
    size_t macCmdsSize = 0;
 80089ec:	9505      	str	r5, [sp, #20]
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80089ee:	f005 ffe8 	bl	800e9c2 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80089f2:	4b50      	ldr	r3, [pc, #320]	; (8008b34 <PrepareFrame+0x174>)
 80089f4:	b2f2      	uxtb	r2, r6
 80089f6:	54e2      	strb	r2, [r4, r3]
    MacCtx.PktBuffer[0] = macHdr->Value;
 80089f8:	9b01      	ldr	r3, [sp, #4]
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	70a3      	strb	r3, [r4, #2]
    switch( macHdr->Bits.MType )
 80089fe:	9b01      	ldr	r3, [sp, #4]
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	095b      	lsrs	r3, r3, #5
 8008a04:	2b04      	cmp	r3, #4
 8008a06:	d03b      	beq.n	8008a80 <PrepareFrame+0xc0>
 8008a08:	2b07      	cmp	r3, #7
 8008a0a:	d100      	bne.n	8008a0e <PrepareFrame+0x4e>
 8008a0c:	e07d      	b.n	8008b0a <PrepareFrame+0x14a>
 8008a0e:	2002      	movs	r0, #2
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d133      	bne.n	8008a7c <PrepareFrame+0xbc>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8008a14:	0026      	movs	r6, r4
 8008a16:	2304      	movs	r3, #4
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8008a18:	0027      	movs	r7, r4
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8008a1a:	36ff      	adds	r6, #255	; 0xff
 8008a1c:	7173      	strb	r3, [r6, #5]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8008a1e:	4b46      	ldr	r3, [pc, #280]	; (8008b38 <PrepareFrame+0x178>)
 8008a20:	37fc      	adds	r7, #252	; 0xfc
 8008a22:	60fb      	str	r3, [r7, #12]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8008a24:	23ff      	movs	r3, #255	; 0xff
 8008a26:	7373      	strb	r3, [r6, #13]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8008a28:	9b01      	ldr	r3, [sp, #4]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8008a2a:	9903      	ldr	r1, [sp, #12]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8008a2c:	781b      	ldrb	r3, [r3, #0]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 8008a2e:	4d43      	ldr	r5, [pc, #268]	; (8008b3c <PrepareFrame+0x17c>)
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8008a30:	73b3      	strb	r3, [r6, #14]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8008a32:	2394      	movs	r3, #148	; 0x94
 8008a34:	005b      	lsls	r3, r3, #1
 8008a36:	54e1      	strb	r1, [r4, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 8008a38:	5963      	ldr	r3, [r4, r5]
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8008a3a:	a804      	add	r0, sp, #16
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 8008a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a3e:	617b      	str	r3, [r7, #20]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8008a40:	9b02      	ldr	r3, [sp, #8]
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	7573      	strb	r3, [r6, #21]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8008a46:	2398      	movs	r3, #152	; 0x98
 8008a48:	005b      	lsls	r3, r3, #1
 8008a4a:	54e2      	strb	r2, [r4, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8008a4c:	4b38      	ldr	r3, [pc, #224]	; (8008b30 <PrepareFrame+0x170>)
 8008a4e:	633b      	str	r3, [r7, #48]	; 0x30
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8008a50:	f003 fc30 	bl	800c2b4 <LoRaMacCryptoGetFCntUp>
 8008a54:	0003      	movs	r3, r0
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8008a56:	2012      	movs	r0, #18
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10f      	bne.n	8008a7c <PrepareFrame+0xbc>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8008a5c:	0021      	movs	r1, r4
 8008a5e:	9a04      	ldr	r2, [sp, #16]
 8008a60:	31fe      	adds	r1, #254	; 0xfe
 8008a62:	830a      	strh	r2, [r1, #24]
            MacCtx.McpsConfirm.AckReceived = false;
 8008a64:	2188      	movs	r1, #136	; 0x88
 8008a66:	00c9      	lsls	r1, r1, #3
 8008a68:	5263      	strh	r3, [r4, r1]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8008a6a:	2389      	movs	r3, #137	; 0x89
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8008a6c:	a805      	add	r0, sp, #20
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8008a6e:	00db      	lsls	r3, r3, #3
 8008a70:	50e2      	str	r2, [r4, r3]
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8008a72:	f003 f963 	bl	800bd3c <LoRaMacCommandsGetSizeSerializedCmds>
 8008a76:	2800      	cmp	r0, #0
 8008a78:	d006      	beq.n	8008a88 <PrepareFrame+0xc8>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008a7a:	2013      	movs	r0, #19
}
 8008a7c:	b007      	add	sp, #28
 8008a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            MacCtx.NodeAckRequested = true;
 8008a80:	2301      	movs	r3, #1
 8008a82:	492a      	ldr	r1, [pc, #168]	; (8008b2c <PrepareFrame+0x16c>)
 8008a84:	5463      	strb	r3, [r4, r1]
 8008a86:	e7c5      	b.n	8008a14 <PrepareFrame+0x54>
            if( macCmdsSize > 0 )
 8008a88:	9b05      	ldr	r3, [sp, #20]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d101      	bne.n	8008a92 <PrepareFrame+0xd2>
    return LORAMAC_STATUS_OK;
 8008a8e:	2000      	movs	r0, #0
 8008a90:	e7f4      	b.n	8008a7c <PrepareFrame+0xbc>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 8008a92:	20f9      	movs	r0, #249	; 0xf9
 8008a94:	5963      	ldr	r3, [r4, r5]
 8008a96:	5618      	ldrsb	r0, [r3, r0]
 8008a98:	f7ff f9aa 	bl	8007df0 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8008a9c:	4b25      	ldr	r3, [pc, #148]	; (8008b34 <PrepareFrame+0x174>)
 8008a9e:	5ce3      	ldrb	r3, [r4, r3]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d01e      	beq.n	8008ae2 <PrepareFrame+0x122>
 8008aa4:	9b05      	ldr	r3, [sp, #20]
 8008aa6:	2b0f      	cmp	r3, #15
 8008aa8:	d811      	bhi.n	8008ace <PrepareFrame+0x10e>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8008aaa:	200f      	movs	r0, #15
 8008aac:	4a24      	ldr	r2, [pc, #144]	; (8008b40 <PrepareFrame+0x180>)
 8008aae:	a905      	add	r1, sp, #20
 8008ab0:	f003 f950 	bl	800bd54 <LoRaMacCommandsSerializeCmds>
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	d1e0      	bne.n	8008a7a <PrepareFrame+0xba>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8008ab8:	210f      	movs	r1, #15
 8008aba:	9b02      	ldr	r3, [sp, #8]
 8008abc:	9a05      	ldr	r2, [sp, #20]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	400a      	ands	r2, r1
 8008ac2:	438b      	bics	r3, r1
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	9a02      	ldr	r2, [sp, #8]
 8008ac8:	7013      	strb	r3, [r2, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8008aca:	7573      	strb	r3, [r6, #21]
 8008acc:	e7d6      	b.n	8008a7c <PrepareFrame+0xbc>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8008ace:	5962      	ldr	r2, [r4, r5]
 8008ad0:	a905      	add	r1, sp, #20
 8008ad2:	3241      	adds	r2, #65	; 0x41
 8008ad4:	32ff      	adds	r2, #255	; 0xff
 8008ad6:	f003 f93d 	bl	800bd54 <LoRaMacCommandsSerializeCmds>
 8008ada:	2800      	cmp	r0, #0
 8008adc:	d1cd      	bne.n	8008a7a <PrepareFrame+0xba>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8008ade:	300a      	adds	r0, #10
 8008ae0:	e7cc      	b.n	8008a7c <PrepareFrame+0xbc>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8008ae2:	5962      	ldr	r2, [r4, r5]
 8008ae4:	a905      	add	r1, sp, #20
 8008ae6:	3241      	adds	r2, #65	; 0x41
 8008ae8:	32ff      	adds	r2, #255	; 0xff
 8008aea:	f003 f933 	bl	800bd54 <LoRaMacCommandsSerializeCmds>
 8008aee:	2800      	cmp	r0, #0
 8008af0:	d1c3      	bne.n	8008a7a <PrepareFrame+0xba>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8008af2:	2394      	movs	r3, #148	; 0x94
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8008af4:	2298      	movs	r2, #152	; 0x98
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8008af6:	005b      	lsls	r3, r3, #1
 8008af8:	54e0      	strb	r0, [r4, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 8008afa:	5963      	ldr	r3, [r4, r5]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8008afc:	0052      	lsls	r2, r2, #1
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 8008afe:	3341      	adds	r3, #65	; 0x41
 8008b00:	33ff      	adds	r3, #255	; 0xff
 8008b02:	633b      	str	r3, [r7, #48]	; 0x30
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8008b04:	9b05      	ldr	r3, [sp, #20]
 8008b06:	54a3      	strb	r3, [r4, r2]
 8008b08:	e7b8      	b.n	8008a7c <PrepareFrame+0xbc>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8008b0a:	2f00      	cmp	r7, #0
 8008b0c:	d0bf      	beq.n	8008a8e <PrepareFrame+0xce>
 8008b0e:	2a00      	cmp	r2, #0
 8008b10:	d0bd      	beq.n	8008a8e <PrepareFrame+0xce>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8008b12:	480c      	ldr	r0, [pc, #48]	; (8008b44 <PrepareFrame+0x184>)
 8008b14:	0039      	movs	r1, r7
 8008b16:	b2f2      	uxtb	r2, r6
 8008b18:	f005 ff53 	bl	800e9c2 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8008b1c:	4b05      	ldr	r3, [pc, #20]	; (8008b34 <PrepareFrame+0x174>)
    return LORAMAC_STATUS_OK;
 8008b1e:	0028      	movs	r0, r5
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8008b20:	5ce3      	ldrb	r3, [r4, r3]
 8008b22:	3301      	adds	r3, #1
 8008b24:	8023      	strh	r3, [r4, #0]
 8008b26:	e7a9      	b.n	8008a7c <PrepareFrame+0xbc>
 8008b28:	200008bc 	.word	0x200008bc
 8008b2c:	00000414 	.word	0x00000414
 8008b30:	200009f4 	.word	0x200009f4
 8008b34:	00000237 	.word	0x00000237
 8008b38:	200008be 	.word	0x200008be
 8008b3c:	00000484 	.word	0x00000484
 8008b40:	200009d4 	.word	0x200009d4
 8008b44:	200008bf 	.word	0x200008bf

08008b48 <SendFrameOnChannel>:
    int8_t txPower = 0;
 8008b48:	2300      	movs	r3, #0
{
 8008b4a:	b5f0      	push	{r4, r5, r6, r7, lr}
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008b4c:	4c38      	ldr	r4, [pc, #224]	; (8008c30 <SendFrameOnChannel+0xe8>)
{
 8008b4e:	b089      	sub	sp, #36	; 0x24
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008b50:	4e38      	ldr	r6, [pc, #224]	; (8008c34 <SendFrameOnChannel+0xec>)
    int8_t txPower = 0;
 8008b52:	aa02      	add	r2, sp, #8
 8008b54:	71d3      	strb	r3, [r2, #7]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008b56:	59a3      	ldr	r3, [r4, r6]
    txConfig.Channel = channel;
 8008b58:	ad04      	add	r5, sp, #16
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008b5a:	001a      	movs	r2, r3
    txConfig.Channel = channel;
 8008b5c:	7028      	strb	r0, [r5, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008b5e:	32f9      	adds	r2, #249	; 0xf9
 8008b60:	7812      	ldrb	r2, [r2, #0]
{
 8008b62:	0007      	movs	r7, r0
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008b64:	706a      	strb	r2, [r5, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8008b66:	001a      	movs	r2, r3
 8008b68:	32f8      	adds	r2, #248	; 0xf8
 8008b6a:	7812      	ldrb	r2, [r2, #0]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8008b6c:	33fc      	adds	r3, #252	; 0xfc
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8008b6e:	70aa      	strb	r2, [r5, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8008b70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8008b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8008b74:	606a      	str	r2, [r5, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8008b76:	60ab      	str	r3, [r5, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8008b78:	8823      	ldrh	r3, [r4, #0]
 8008b7a:	81ab      	strh	r3, [r5, #12]
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8008b7c:	f002 fa9e 	bl	800b0bc <LoRaMacClassBIsBeaconExpected>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8008b80:	230e      	movs	r3, #14
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8008b82:	2800      	cmp	r0, #0
 8008b84:	d109      	bne.n	8008b9a <SendFrameOnChannel+0x52>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8008b86:	59a3      	ldr	r3, [r4, r6]
 8008b88:	33f0      	adds	r3, #240	; 0xf0
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d10d      	bne.n	8008bac <SendFrameOnChannel+0x64>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008b90:	f002 faa2 	bl	800b0d8 <LoRaMacClassBIsPingExpected>
 8008b94:	2800      	cmp	r0, #0
 8008b96:	d003      	beq.n	8008ba0 <SendFrameOnChannel+0x58>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8008b98:	230f      	movs	r3, #15
}
 8008b9a:	0018      	movs	r0, r3
 8008b9c:	b009      	add	sp, #36	; 0x24
 8008b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008ba0:	f002 faa4 	bl	800b0ec <LoRaMacClassBIsMulticastExpected>
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	d1f7      	bne.n	8008b98 <SendFrameOnChannel+0x50>
            LoRaMacClassBStopRxSlots( );
 8008ba8:	f002 fc64 	bl	800b474 <LoRaMacClassBStopRxSlots>
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8008bac:	59a3      	ldr	r3, [r4, r6]
 8008bae:	aa02      	add	r2, sp, #8
 8008bb0:	0029      	movs	r1, r5
 8008bb2:	7818      	ldrb	r0, [r3, #0]
 8008bb4:	3207      	adds	r2, #7
 8008bb6:	4b20      	ldr	r3, [pc, #128]	; (8008c38 <SendFrameOnChannel+0xf0>)
 8008bb8:	f003 ff80 	bl	800cabc <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008bbc:	2201      	movs	r2, #1
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008bbe:	2583      	movs	r5, #131	; 0x83
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008bc0:	4b1e      	ldr	r3, [pc, #120]	; (8008c3c <SendFrameOnChannel+0xf4>)
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008bc2:	00ed      	lsls	r5, r5, #3
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008bc4:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008bc6:	59a3      	ldr	r3, [r4, r6]
 8008bc8:	33f9      	adds	r3, #249	; 0xf9
 8008bca:	781a      	ldrb	r2, [r3, #0]
 8008bcc:	4b1c      	ldr	r3, [pc, #112]	; (8008c40 <SendFrameOnChannel+0xf8>)
 8008bce:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.TxPower = txPower;
 8008bd0:	ab02      	add	r3, sp, #8
 8008bd2:	79da      	ldrb	r2, [r3, #7]
 8008bd4:	4b1b      	ldr	r3, [pc, #108]	; (8008c44 <SendFrameOnChannel+0xfc>)
 8008bd6:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Channel = channel;
 8008bd8:	4b1b      	ldr	r3, [pc, #108]	; (8008c48 <SendFrameOnChannel+0x100>)
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008bda:	4a1c      	ldr	r2, [pc, #112]	; (8008c4c <SendFrameOnChannel+0x104>)
    MacCtx.McpsConfirm.Channel = channel;
 8008bdc:	50e7      	str	r7, [r4, r3]
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008bde:	5963      	ldr	r3, [r4, r5]
 8008be0:	50a3      	str	r3, [r4, r2]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008be2:	4a1b      	ldr	r2, [pc, #108]	; (8008c50 <SendFrameOnChannel+0x108>)
 8008be4:	50a3      	str	r3, [r4, r2]
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8008be6:	f002 fab7 	bl	800b158 <LoRaMacClassBIsBeaconModeActive>
 8008bea:	2800      	cmp	r0, #0
 8008bec:	d119      	bne.n	8008c22 <SendFrameOnChannel+0xda>
    LoRaMacClassBHaltBeaconing( );
 8008bee:	f002 fc59 	bl	800b4a4 <LoRaMacClassBHaltBeaconing>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008bf2:	21d0      	movs	r1, #208	; 0xd0
 8008bf4:	2202      	movs	r2, #2
 8008bf6:	4b0e      	ldr	r3, [pc, #56]	; (8008c30 <SendFrameOnChannel+0xe8>)
 8008bf8:	0089      	lsls	r1, r1, #2
 8008bfa:	5858      	ldr	r0, [r3, r1]
 8008bfc:	4302      	orrs	r2, r0
 8008bfe:	505a      	str	r2, [r3, r1]
    if( MacCtx.NodeAckRequested == false )
 8008c00:	4a14      	ldr	r2, [pc, #80]	; (8008c54 <SendFrameOnChannel+0x10c>)
 8008c02:	5c9a      	ldrb	r2, [r3, r2]
 8008c04:	2a00      	cmp	r2, #0
 8008c06:	d104      	bne.n	8008c12 <SendFrameOnChannel+0xca>
        MacCtx.ChannelsNbTransCounter++;
 8008c08:	2182      	movs	r1, #130	; 0x82
 8008c0a:	00c9      	lsls	r1, r1, #3
 8008c0c:	5c5a      	ldrb	r2, [r3, r1]
 8008c0e:	3201      	adds	r2, #1
 8008c10:	545a      	strb	r2, [r3, r1]
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8008c12:	7819      	ldrb	r1, [r3, #0]
 8008c14:	4b10      	ldr	r3, [pc, #64]	; (8008c58 <SendFrameOnChannel+0x110>)
 8008c16:	4811      	ldr	r0, [pc, #68]	; (8008c5c <SendFrameOnChannel+0x114>)
 8008c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c1a:	9301      	str	r3, [sp, #4]
 8008c1c:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	e7bb      	b.n	8008b9a <SendFrameOnChannel+0x52>
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8008c22:	5960      	ldr	r0, [r4, r5]
 8008c24:	f002 fbfe 	bl	800b424 <LoRaMacClassBIsUplinkCollision>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8008c28:	2310      	movs	r3, #16
        if( collisionTime > 0 )
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	d0df      	beq.n	8008bee <SendFrameOnChannel+0xa6>
 8008c2e:	e7b4      	b.n	8008b9a <SendFrameOnChannel+0x52>
 8008c30:	200008bc 	.word	0x200008bc
 8008c34:	00000484 	.word	0x00000484
 8008c38:	20000cd4 	.word	0x20000cd4
 8008c3c:	0000043d 	.word	0x0000043d
 8008c40:	0000043e 	.word	0x0000043e
 8008c44:	0000043f 	.word	0x0000043f
 8008c48:	0000044c 	.word	0x0000044c
 8008c4c:	00000444 	.word	0x00000444
 8008c50:	00000454 	.word	0x00000454
 8008c54:	00000414 	.word	0x00000414
 8008c58:	0801074c 	.word	0x0801074c
 8008c5c:	200008be 	.word	0x200008be

08008c60 <ScheduleTx>:
{
 8008c60:	b5f0      	push	{r4, r5, r6, r7, lr}
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 8008c62:	229f      	movs	r2, #159	; 0x9f
    TimerTime_t dutyCycleTimeOff = 0;
 8008c64:	2700      	movs	r7, #0
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 8008c66:	4c8c      	ldr	r4, [pc, #560]	; (8008e98 <ScheduleTx+0x238>)
 8008c68:	4e8c      	ldr	r6, [pc, #560]	; (8008e9c <ScheduleTx+0x23c>)
{
 8008c6a:	b08b      	sub	sp, #44	; 0x2c
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 8008c6c:	59a3      	ldr	r3, [r4, r6]
{
 8008c6e:	9002      	str	r0, [sp, #8]
    TimerTime_t dutyCycleTimeOff = 0;
 8008c70:	9704      	str	r7, [sp, #16]
    size_t macCmdsSize = 0;
 8008c72:	9705      	str	r7, [sp, #20]
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 8008c74:	0052      	lsls	r2, r2, #1
 8008c76:	5c99      	ldrb	r1, [r3, r2]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8008c78:	3296      	adds	r2, #150	; 0x96
 8008c7a:	5c9a      	ldrb	r2, [r3, r2]
 8008c7c:	ad07      	add	r5, sp, #28
 8008c7e:	1e50      	subs	r0, r2, #1
 8008c80:	4182      	sbcs	r2, r0
 8008c82:	702a      	strb	r2, [r5, #0]
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8008c84:	223e      	movs	r2, #62	; 0x3e
 8008c86:	32ff      	adds	r2, #255	; 0xff
 8008c88:	5c9a      	ldrb	r2, [r3, r2]
    calcBackOff.Channel = channel;
 8008c8a:	70e9      	strb	r1, [r5, #3]
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8008c8c:	70aa      	strb	r2, [r5, #2]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.NvmCtx->InitializationTime );
 8008c8e:	22e6      	movs	r2, #230	; 0xe6
 8008c90:	0052      	lsls	r2, r2, #1
 8008c92:	5898      	ldr	r0, [r3, r2]
 8008c94:	f005 fde1 	bl	800e85a <TimerGetElapsedTime>
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008c98:	2383      	movs	r3, #131	; 0x83
 8008c9a:	223e      	movs	r2, #62	; 0x3e
 8008c9c:	00db      	lsls	r3, r3, #3
 8008c9e:	58e3      	ldr	r3, [r4, r3]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.NvmCtx->InitializationTime );
 8008ca0:	6068      	str	r0, [r5, #4]
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008ca2:	60ab      	str	r3, [r5, #8]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 8008ca4:	4b7e      	ldr	r3, [pc, #504]	; (8008ea0 <ScheduleTx+0x240>)
    calcBackOff.LastTxIsJoinRequest = false;
 8008ca6:	706f      	strb	r7, [r5, #1]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 8008ca8:	5ce3      	ldrb	r3, [r4, r3]
 8008caa:	32ff      	adds	r2, #255	; 0xff
 8008cac:	9203      	str	r2, [sp, #12]
 8008cae:	075b      	lsls	r3, r3, #29
 8008cb0:	d506      	bpl.n	8008cc0 <ScheduleTx+0x60>
 8008cb2:	0038      	movs	r0, r7
 8008cb4:	f003 f942 	bl	800bf3c <LoRaMacConfirmQueueIsCmdActive>
 8008cb8:	42b8      	cmp	r0, r7
 8008cba:	d001      	beq.n	8008cc0 <ScheduleTx+0x60>
        calcBackOff.LastTxIsJoinRequest = true;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	706b      	strb	r3, [r5, #1]
    RegionCalcBackOff( MacCtx.NvmCtx->Region, &calcBackOff );
 8008cc0:	59a3      	ldr	r3, [r4, r6]
 8008cc2:	0029      	movs	r1, r5
 8008cc4:	7818      	ldrb	r0, [r3, #0]
 8008cc6:	f003 ff4a 	bl	800cb5e <RegionCalcBackOff>
    MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 8008cca:	22e1      	movs	r2, #225	; 0xe1
 8008ccc:	59a3      	ldr	r3, [r4, r6]
 8008cce:	0052      	lsls	r2, r2, #1
 8008cd0:	5a99      	ldrh	r1, [r3, r2]
 8008cd2:	2283      	movs	r2, #131	; 0x83
 8008cd4:	00d2      	lsls	r2, r2, #3
 8008cd6:	58a2      	ldr	r2, [r4, r2]
 8008cd8:	3901      	subs	r1, #1
 8008cda:	434a      	muls	r2, r1
 8008cdc:	21e4      	movs	r1, #228	; 0xe4
 8008cde:	0049      	lsls	r1, r1, #1
 8008ce0:	505a      	str	r2, [r3, r1]
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8008ce2:	9207      	str	r2, [sp, #28]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008ce4:	001a      	movs	r2, r3
 8008ce6:	32f9      	adds	r2, #249	; 0xf9
 8008ce8:	7812      	ldrb	r2, [r2, #0]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8008cea:	27ea      	movs	r7, #234	; 0xea
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008cec:	722a      	strb	r2, [r5, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8008cee:	223e      	movs	r2, #62	; 0x3e
 8008cf0:	32ff      	adds	r2, #255	; 0xff
 8008cf2:	5c9a      	ldrb	r2, [r3, r2]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8008cf4:	007f      	lsls	r7, r7, #1
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8008cf6:	72aa      	strb	r2, [r5, #10]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8008cf8:	5dda      	ldrb	r2, [r3, r7]
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &dutyCycleTimeOff, &MacCtx.NvmCtx->AggregatedTimeOff );
 8008cfa:	7818      	ldrb	r0, [r3, #0]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8008cfc:	1e51      	subs	r1, r2, #1
 8008cfe:	418a      	sbcs	r2, r1
 8008d00:	726a      	strb	r2, [r5, #9]
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 8008d02:	22e2      	movs	r2, #226	; 0xe2
 8008d04:	0052      	lsls	r2, r2, #1
 8008d06:	589a      	ldr	r2, [r3, r2]
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &dutyCycleTimeOff, &MacCtx.NvmCtx->AggregatedTimeOff );
 8008d08:	33c9      	adds	r3, #201	; 0xc9
 8008d0a:	33ff      	adds	r3, #255	; 0xff
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 8008d0c:	606a      	str	r2, [r5, #4]
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &dutyCycleTimeOff, &MacCtx.NvmCtx->AggregatedTimeOff );
 8008d0e:	0029      	movs	r1, r5
 8008d10:	9300      	str	r3, [sp, #0]
 8008d12:	4a64      	ldr	r2, [pc, #400]	; (8008ea4 <ScheduleTx+0x244>)
 8008d14:	ab04      	add	r3, sp, #16
 8008d16:	f003 ff29 	bl	800cb6c <RegionNextChannel>
 8008d1a:	1e05      	subs	r5, r0, #0
    if( status != LORAMAC_STATUS_OK )
 8008d1c:	d018      	beq.n	8008d50 <ScheduleTx+0xf0>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8008d1e:	280b      	cmp	r0, #11
 8008d20:	d113      	bne.n	8008d4a <ScheduleTx+0xea>
 8008d22:	9b02      	ldr	r3, [sp, #8]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d010      	beq.n	8008d4a <ScheduleTx+0xea>
            return LORAMAC_STATUS_OK;
 8008d28:	2500      	movs	r5, #0
            if( dutyCycleTimeOff != 0 )
 8008d2a:	9904      	ldr	r1, [sp, #16]
 8008d2c:	42a9      	cmp	r1, r5
 8008d2e:	d00c      	beq.n	8008d4a <ScheduleTx+0xea>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8008d30:	22d0      	movs	r2, #208	; 0xd0
 8008d32:	2320      	movs	r3, #32
 8008d34:	0092      	lsls	r2, r2, #2
 8008d36:	58a0      	ldr	r0, [r4, r2]
 8008d38:	4303      	orrs	r3, r0
 8008d3a:	50a3      	str	r3, [r4, r2]
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
 8008d3c:	4c5a      	ldr	r4, [pc, #360]	; (8008ea8 <ScheduleTx+0x248>)
 8008d3e:	0020      	movs	r0, r4
 8008d40:	f005 fd74 	bl	800e82c <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 8008d44:	0020      	movs	r0, r4
 8008d46:	f005 fccd 	bl	800e6e4 <TimerStart>
}
 8008d4a:	0028      	movs	r0, r5
 8008d4c:	b00b      	add	sp, #44	; 0x2c
 8008d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8008d50:	59a1      	ldr	r1, [r4, r6]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 8008d52:	202e      	movs	r0, #46	; 0x2e
 8008d54:	000b      	movs	r3, r1
 8008d56:	000a      	movs	r2, r1
 8008d58:	33ff      	adds	r3, #255	; 0xff
 8008d5a:	32f9      	adds	r2, #249	; 0xf9
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8008d5c:	780d      	ldrb	r5, [r1, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 8008d5e:	7e9b      	ldrb	r3, [r3, #26]
 8008d60:	7812      	ldrb	r2, [r2, #0]
 8008d62:	30ff      	adds	r0, #255	; 0xff
 8008d64:	5c09      	ldrb	r1, [r1, r0]
 8008d66:	b25b      	sxtb	r3, r3
 8008d68:	0028      	movs	r0, r5
 8008d6a:	b252      	sxtb	r2, r2
 8008d6c:	f003 ff13 	bl	800cb96 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8008d70:	22fc      	movs	r2, #252	; 0xfc
 8008d72:	4694      	mov	ip, r2
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8008d74:	59a3      	ldr	r3, [r4, r6]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8008d76:	b241      	sxtb	r1, r0
 8008d78:	449c      	add	ip, r3
 8008d7a:	33ff      	adds	r3, #255	; 0xff
 8008d7c:	785a      	ldrb	r2, [r3, #1]
 8008d7e:	4b4b      	ldr	r3, [pc, #300]	; (8008eac <ScheduleTx+0x24c>)
 8008d80:	0028      	movs	r0, r5
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	4663      	mov	r3, ip
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f003 fe81 	bl	800ca8e <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8008d8c:	59a3      	ldr	r3, [r4, r6]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 8008d8e:	2190      	movs	r1, #144	; 0x90
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8008d90:	001a      	movs	r2, r3
 8008d92:	001d      	movs	r5, r3
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 8008d94:	0049      	lsls	r1, r1, #1
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8008d96:	5659      	ldrsb	r1, [r3, r1]
 8008d98:	7818      	ldrb	r0, [r3, #0]
 8008d9a:	4b45      	ldr	r3, [pc, #276]	; (8008eb0 <ScheduleTx+0x250>)
 8008d9c:	32ff      	adds	r2, #255	; 0xff
 8008d9e:	7852      	ldrb	r2, [r2, #1]
 8008da0:	35fc      	adds	r5, #252	; 0xfc
 8008da2:	9300      	str	r3, [sp, #0]
 8008da4:	682b      	ldr	r3, [r5, #0]
 8008da6:	f003 fe72 	bl	800ca8e <RegionComputeRxWindowParameters>
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8008daa:	59a3      	ldr	r3, [r4, r6]
 8008dac:	5dda      	ldrb	r2, [r3, r7]
 8008dae:	2a00      	cmp	r2, #0
 8008db0:	d122      	bne.n	8008df8 <ScheduleTx+0x198>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008db2:	22f1      	movs	r2, #241	; 0xf1
 8008db4:	33fc      	adds	r3, #252	; 0xfc
 8008db6:	0092      	lsls	r2, r2, #2
 8008db8:	6959      	ldr	r1, [r3, #20]
 8008dba:	58a2      	ldr	r2, [r4, r2]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008dbc:	699b      	ldr	r3, [r3, #24]
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008dbe:	188a      	adds	r2, r1, r2
 8008dc0:	21ec      	movs	r1, #236	; 0xec
 8008dc2:	0089      	lsls	r1, r1, #2
 8008dc4:	5062      	str	r2, [r4, r1]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008dc6:	22f6      	movs	r2, #246	; 0xf6
 8008dc8:	0092      	lsls	r2, r2, #2
 8008dca:	58a2      	ldr	r2, [r4, r2]
 8008dcc:	189b      	adds	r3, r3, r2
 8008dce:	22ed      	movs	r2, #237	; 0xed
 8008dd0:	0092      	lsls	r2, r2, #2
 8008dd2:	50a3      	str	r3, [r4, r2]
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8008dd4:	4c30      	ldr	r4, [pc, #192]	; (8008e98 <ScheduleTx+0x238>)
 8008dd6:	4a37      	ldr	r2, [pc, #220]	; (8008eb4 <ScheduleTx+0x254>)
 8008dd8:	59a3      	ldr	r3, [r4, r6]
 8008dda:	26f9      	movs	r6, #249	; 0xf9
    switch( MacCtx.TxMsg.Type )
 8008ddc:	0025      	movs	r5, r4
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8008dde:	579e      	ldrsb	r6, [r3, r6]
    uint32_t fCntUp = 0;
 8008de0:	2300      	movs	r3, #0
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8008de2:	5ca7      	ldrb	r7, [r4, r2]
    switch( MacCtx.TxMsg.Type )
 8008de4:	35ff      	adds	r5, #255	; 0xff
    uint32_t fCntUp = 0;
 8008de6:	9306      	str	r3, [sp, #24]
    switch( MacCtx.TxMsg.Type )
 8008de8:	796b      	ldrb	r3, [r5, #5]
 8008dea:	9202      	str	r2, [sp, #8]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d024      	beq.n	8008e3a <ScheduleTx+0x1da>
 8008df0:	2b04      	cmp	r3, #4
 8008df2:	d02f      	beq.n	8008e54 <ScheduleTx+0x1f4>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8008df4:	2503      	movs	r5, #3
 8008df6:	e7a8      	b.n	8008d4a <ScheduleTx+0xea>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8008df8:	a805      	add	r0, sp, #20
 8008dfa:	f002 ff9f 	bl	800bd3c <LoRaMacCommandsGetSizeSerializedCmds>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008dfe:	2513      	movs	r5, #19
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8008e00:	2800      	cmp	r0, #0
 8008e02:	d1a2      	bne.n	8008d4a <ScheduleTx+0xea>
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8008e04:	20f9      	movs	r0, #249	; 0xf9
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8008e06:	4b2c      	ldr	r3, [pc, #176]	; (8008eb8 <ScheduleTx+0x258>)
 8008e08:	5ce5      	ldrb	r5, [r4, r3]
 8008e0a:	9b05      	ldr	r3, [sp, #20]
 8008e0c:	b2df      	uxtb	r7, r3
 8008e0e:	59a3      	ldr	r3, [r4, r6]
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8008e10:	19ef      	adds	r7, r5, r7
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8008e12:	5618      	ldrsb	r0, [r3, r0]
 8008e14:	f7fe ffec 	bl	8007df0 <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8008e18:	b280      	uxth	r0, r0
            return LORAMAC_STATUS_LENGTH_ERROR;
 8008e1a:	2508      	movs	r5, #8
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8008e1c:	42b8      	cmp	r0, r7
 8008e1e:	d200      	bcs.n	8008e22 <ScheduleTx+0x1c2>
 8008e20:	e793      	b.n	8008d4a <ScheduleTx+0xea>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008e22:	22f1      	movs	r2, #241	; 0xf1
 8008e24:	59a3      	ldr	r3, [r4, r6]
 8008e26:	0092      	lsls	r2, r2, #2
 8008e28:	33fc      	adds	r3, #252	; 0xfc
 8008e2a:	68d9      	ldr	r1, [r3, #12]
 8008e2c:	58a2      	ldr	r2, [r4, r2]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008e2e:	691b      	ldr	r3, [r3, #16]
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008e30:	188a      	adds	r2, r1, r2
 8008e32:	21ec      	movs	r1, #236	; 0xec
 8008e34:	0089      	lsls	r1, r1, #2
 8008e36:	5062      	str	r2, [r4, r1]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008e38:	e7c5      	b.n	8008dc6 <ScheduleTx+0x166>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8008e3a:	4820      	ldr	r0, [pc, #128]	; (8008ebc <ScheduleTx+0x25c>)
 8008e3c:	f003 fa9a 	bl	800c374 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8008e40:	2800      	cmp	r0, #0
 8008e42:	d126      	bne.n	8008e92 <ScheduleTx+0x232>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8008e44:	7b6b      	ldrb	r3, [r5, #13]
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8008e46:	8023      	strh	r3, [r4, #0]
    return SendFrameOnChannel( MacCtx.Channel );
 8008e48:	9b02      	ldr	r3, [sp, #8]
 8008e4a:	5ce0      	ldrb	r0, [r4, r3]
 8008e4c:	f7ff fe7c 	bl	8008b48 <SendFrameOnChannel>
 8008e50:	0005      	movs	r5, r0
 8008e52:	e77a      	b.n	8008d4a <ScheduleTx+0xea>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8008e54:	a806      	add	r0, sp, #24
 8008e56:	f003 fa2d 	bl	800c2b4 <LoRaMacCryptoGetFCntUp>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8008e5a:	2512      	movs	r5, #18
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	d000      	beq.n	8008e62 <ScheduleTx+0x202>
 8008e60:	e773      	b.n	8008d4a <ScheduleTx+0xea>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8008e62:	2382      	movs	r3, #130	; 0x82
 8008e64:	00db      	lsls	r3, r3, #3
 8008e66:	5ce3      	ldrb	r3, [r4, r3]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d103      	bne.n	8008e74 <ScheduleTx+0x214>
 8008e6c:	4b14      	ldr	r3, [pc, #80]	; (8008ec0 <ScheduleTx+0x260>)
 8008e6e:	5ce3      	ldrb	r3, [r4, r3]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d902      	bls.n	8008e7a <ScheduleTx+0x21a>
                fCntUp -= 1;
 8008e74:	9b06      	ldr	r3, [sp, #24]
 8008e76:	3b01      	subs	r3, #1
 8008e78:	9306      	str	r3, [sp, #24]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8008e7a:	003a      	movs	r2, r7
 8008e7c:	4b0f      	ldr	r3, [pc, #60]	; (8008ebc <ScheduleTx+0x25c>)
 8008e7e:	9806      	ldr	r0, [sp, #24]
 8008e80:	b2f1      	uxtb	r1, r6
 8008e82:	f003 faa7 	bl	800c3d4 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8008e86:	2800      	cmp	r0, #0
 8008e88:	d103      	bne.n	8008e92 <ScheduleTx+0x232>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8008e8a:	0023      	movs	r3, r4
 8008e8c:	33ff      	adds	r3, #255	; 0xff
 8008e8e:	7b5b      	ldrb	r3, [r3, #13]
 8008e90:	e7d9      	b.n	8008e46 <ScheduleTx+0x1e6>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8008e92:	2511      	movs	r5, #17
 8008e94:	e759      	b.n	8008d4a <ScheduleTx+0xea>
 8008e96:	46c0      	nop			; (mov r8, r8)
 8008e98:	200008bc 	.word	0x200008bc
 8008e9c:	00000484 	.word	0x00000484
 8008ea0:	00000481 	.word	0x00000481
 8008ea4:	20000cd1 	.word	0x20000cd1
 8008ea8:	20000c24 	.word	0x20000c24
 8008eac:	20000c74 	.word	0x20000c74
 8008eb0:	20000c88 	.word	0x20000c88
 8008eb4:	00000415 	.word	0x00000415
 8008eb8:	00000237 	.word	0x00000237
 8008ebc:	200009c4 	.word	0x200009c4
 8008ec0:	00000412 	.word	0x00000412

08008ec4 <OnTxDelayedTimerEvent>:
{
 8008ec4:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 8008ec6:	4811      	ldr	r0, [pc, #68]	; (8008f0c <OnTxDelayedTimerEvent+0x48>)
 8008ec8:	f005 fc84 	bl	800e7d4 <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8008ecc:	22d0      	movs	r2, #208	; 0xd0
 8008ece:	2320      	movs	r3, #32
 8008ed0:	4c0f      	ldr	r4, [pc, #60]	; (8008f10 <OnTxDelayedTimerEvent+0x4c>)
 8008ed2:	0092      	lsls	r2, r2, #2
 8008ed4:	58a1      	ldr	r1, [r4, r2]
    switch( ScheduleTx( true ) )
 8008ed6:	2001      	movs	r0, #1
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8008ed8:	4399      	bics	r1, r3
 8008eda:	50a1      	str	r1, [r4, r2]
    switch( ScheduleTx( true ) )
 8008edc:	f7ff fec0 	bl	8008c60 <ScheduleTx>
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	d012      	beq.n	8008f0a <OnTxDelayedTimerEvent+0x46>
 8008ee4:	280b      	cmp	r0, #11
 8008ee6:	d010      	beq.n	8008f0a <OnTxDelayedTimerEvent+0x46>
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8008ee8:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008eea:	4b0a      	ldr	r3, [pc, #40]	; (8008f14 <OnTxDelayedTimerEvent+0x50>)
 8008eec:	58e3      	ldr	r3, [r4, r3]
 8008eee:	33f9      	adds	r3, #249	; 0xf9
 8008ef0:	781a      	ldrb	r2, [r3, #0]
 8008ef2:	4b09      	ldr	r3, [pc, #36]	; (8008f18 <OnTxDelayedTimerEvent+0x54>)
 8008ef4:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8008ef6:	4b09      	ldr	r3, [pc, #36]	; (8008f1c <OnTxDelayedTimerEvent+0x58>)
 8008ef8:	5ce2      	ldrb	r2, [r4, r3]
 8008efa:	4b09      	ldr	r3, [pc, #36]	; (8008f20 <OnTxDelayedTimerEvent+0x5c>)
 8008efc:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8008efe:	4b09      	ldr	r3, [pc, #36]	; (8008f24 <OnTxDelayedTimerEvent+0x60>)
 8008f00:	54e0      	strb	r0, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8008f02:	f002 ffff 	bl	800bf04 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8008f06:	f7fe ff11 	bl	8007d2c <StopRetransmission>
}
 8008f0a:	bd10      	pop	{r4, pc}
 8008f0c:	20000c24 	.word	0x20000c24
 8008f10:	200008bc 	.word	0x200008bc
 8008f14:	00000484 	.word	0x00000484
 8008f18:	0000043e 	.word	0x0000043e
 8008f1c:	00000412 	.word	0x00000412
 8008f20:	00000441 	.word	0x00000441
 8008f24:	0000043d 	.word	0x0000043d

08008f28 <Send>:
{
 8008f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f2a:	b091      	sub	sp, #68	; 0x44
 8008f2c:	9306      	str	r3, [sp, #24]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008f2e:	4d42      	ldr	r5, [pc, #264]	; (8009038 <Send+0x110>)
 8008f30:	4b42      	ldr	r3, [pc, #264]	; (800903c <Send+0x114>)
{
 8008f32:	9104      	str	r1, [sp, #16]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008f34:	5959      	ldr	r1, [r3, r5]
{
 8008f36:	9205      	str	r2, [sp, #20]
 8008f38:	000b      	movs	r3, r1
 8008f3a:	466a      	mov	r2, sp
 8008f3c:	33f8      	adds	r3, #248	; 0xf8
 8008f3e:	881e      	ldrh	r6, [r3, #0]
 8008f40:	9003      	str	r0, [sp, #12]
 8008f42:	ba73      	rev16	r3, r6
 8008f44:	83d3      	strh	r3, [r2, #30]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8008f46:	000b      	movs	r3, r1
 8008f48:	33f4      	adds	r3, #244	; 0xf4
 8008f4a:	681c      	ldr	r4, [r3, #0]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8008f4c:	23ea      	movs	r3, #234	; 0xea
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8008f4e:	940a      	str	r4, [sp, #40]	; 0x28
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8008f50:	005b      	lsls	r3, r3, #1
 8008f52:	5ccb      	ldrb	r3, [r1, r3]
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8008f54:	2007      	movs	r0, #7
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d05f      	beq.n	800901a <Send+0xf2>
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 8008f5a:	239e      	movs	r3, #158	; 0x9e
 8008f5c:	005b      	lsls	r3, r3, #1
 8008f5e:	5ccb      	ldrb	r3, [r1, r3]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d102      	bne.n	8008f6a <Send+0x42>
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 8008f64:	22e4      	movs	r2, #228	; 0xe4
 8008f66:	0052      	lsls	r2, r2, #1
 8008f68:	508b      	str	r3, [r1, r2]
    fCtrl.Value = 0;
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	ab09      	add	r3, sp, #36	; 0x24
 8008f6e:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 8008f70:	000a      	movs	r2, r1
 8008f72:	32f2      	adds	r2, #242	; 0xf2
 8008f74:	7812      	ldrb	r2, [r2, #0]
 8008f76:	4694      	mov	ip, r2
 8008f78:	01d2      	lsls	r2, r2, #7
 8008f7a:	701a      	strb	r2, [r3, #0]
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8008f7c:	000a      	movs	r2, r1
 8008f7e:	32f0      	adds	r2, #240	; 0xf0
 8008f80:	7810      	ldrb	r0, [r2, #0]
 8008f82:	781a      	ldrb	r2, [r3, #0]
 8008f84:	3801      	subs	r0, #1
 8008f86:	4247      	negs	r7, r0
 8008f88:	4178      	adcs	r0, r7
 8008f8a:	2710      	movs	r7, #16
 8008f8c:	0100      	lsls	r0, r0, #4
 8008f8e:	43ba      	bics	r2, r7
 8008f90:	4302      	orrs	r2, r0
 8008f92:	701a      	strb	r2, [r3, #0]
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 8008f94:	22e0      	movs	r2, #224	; 0xe0
 8008f96:	0052      	lsls	r2, r2, #1
 8008f98:	5c8a      	ldrb	r2, [r1, r2]
 8008f9a:	2a00      	cmp	r2, #0
 8008f9c:	d003      	beq.n	8008fa6 <Send+0x7e>
        fCtrl.Bits.Ack = 1;
 8008f9e:	2220      	movs	r2, #32
 8008fa0:	7818      	ldrb	r0, [r3, #0]
 8008fa2:	4302      	orrs	r2, r0
 8008fa4:	701a      	strb	r2, [r3, #0]
    adrNext.Version = MacCtx.NvmCtx->Version;
 8008fa6:	23e8      	movs	r3, #232	; 0xe8
 8008fa8:	005b      	lsls	r3, r3, #1
 8008faa:	58cb      	ldr	r3, [r1, r3]
 8008fac:	a80b      	add	r0, sp, #44	; 0x2c
 8008fae:	930b      	str	r3, [sp, #44]	; 0x2c
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8008fb0:	4663      	mov	r3, ip
 8008fb2:	7143      	strb	r3, [r0, #5]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8008fb4:	23fd      	movs	r3, #253	; 0xfd
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8008fb6:	6084      	str	r4, [r0, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8008fb8:	4c20      	ldr	r4, [pc, #128]	; (800903c <Send+0x114>)
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	58e3      	ldr	r3, [r4, r3]
    adrNext.UpdateChanMask = true;
 8008fbe:	2701      	movs	r7, #1
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8008fc0:	930e      	str	r3, [sp, #56]	; 0x38
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008fc2:	ba73      	rev16	r3, r6
 8008fc4:	8203      	strh	r3, [r0, #16]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8008fc6:	2396      	movs	r3, #150	; 0x96
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8008fc8:	000a      	movs	r2, r1
    adrNext.UpdateChanMask = true;
 8008fca:	7107      	strb	r7, [r0, #4]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8008fcc:	005b      	lsls	r3, r3, #1
 8008fce:	5ccb      	ldrb	r3, [r1, r3]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8008fd0:	32f8      	adds	r2, #248	; 0xf8
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8008fd2:	7483      	strb	r3, [r0, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 8008fd4:	780b      	ldrb	r3, [r1, #0]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8008fd6:	31f9      	adds	r1, #249	; 0xf9
    adrNext.Region = MacCtx.NvmCtx->Region;
 8008fd8:	74c3      	strb	r3, [r0, #19]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8008fda:	ab0a      	add	r3, sp, #40	; 0x28
 8008fdc:	f001 fd2e 	bl	800aa3c <LoRaMacAdrCalcNext>
 8008fe0:	ab06      	add	r3, sp, #24
 8008fe2:	4038      	ands	r0, r7
 8008fe4:	7b1f      	ldrb	r7, [r3, #12]
 8008fe6:	2340      	movs	r3, #64	; 0x40
 8008fe8:	0180      	lsls	r0, r0, #6
 8008fea:	439f      	bics	r7, r3
 8008fec:	4307      	orrs	r7, r0
 8008fee:	ab06      	add	r3, sp, #24
 8008ff0:	731f      	strb	r7, [r3, #12]
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8008ff2:	9b06      	ldr	r3, [sp, #24]
 8008ff4:	9a04      	ldr	r2, [sp, #16]
 8008ff6:	9300      	str	r3, [sp, #0]
 8008ff8:	9803      	ldr	r0, [sp, #12]
 8008ffa:	9b05      	ldr	r3, [sp, #20]
 8008ffc:	a909      	add	r1, sp, #36	; 0x24
 8008ffe:	f7ff fcdf 	bl	80089c0 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8009002:	2800      	cmp	r0, #0
 8009004:	d001      	beq.n	800900a <Send+0xe2>
 8009006:	280a      	cmp	r0, #10
 8009008:	d104      	bne.n	8009014 <Send+0xec>
        status = ScheduleTx( false );
 800900a:	2000      	movs	r0, #0
 800900c:	f7ff fe28 	bl	8008c60 <ScheduleTx>
    if( status != LORAMAC_STATUS_OK )
 8009010:	2800      	cmp	r0, #0
 8009012:	d004      	beq.n	800901e <Send+0xf6>
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 8009014:	5963      	ldr	r3, [r4, r5]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 8009016:	33f8      	adds	r3, #248	; 0xf8
 8009018:	801e      	strh	r6, [r3, #0]
}
 800901a:	b011      	add	sp, #68	; 0x44
 800901c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MacCtx.NvmCtx->SrvAckRequested = false;
 800901e:	22e0      	movs	r2, #224	; 0xe0
 8009020:	5963      	ldr	r3, [r4, r5]
 8009022:	0052      	lsls	r2, r2, #1
 8009024:	5498      	strb	r0, [r3, r2]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 8009026:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009028:	33f4      	adds	r3, #244	; 0xf4
 800902a:	601a      	str	r2, [r3, #0]
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800902c:	f002 fe56 	bl	800bcdc <LoRaMacCommandsRemoveNoneStickyCmds>
 8009030:	2800      	cmp	r0, #0
 8009032:	d0f2      	beq.n	800901a <Send+0xf2>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009034:	2013      	movs	r0, #19
 8009036:	e7f0      	b.n	800901a <Send+0xf2>
 8009038:	00000484 	.word	0x00000484
 800903c:	200008bc 	.word	0x200008bc

08009040 <SendReJoinReq>:
{
 8009040:	b570      	push	{r4, r5, r6, lr}
 8009042:	0005      	movs	r5, r0
    macHdr.Value = 0;
 8009044:	2400      	movs	r4, #0
    bool allowDelayedTx = true;
 8009046:	2001      	movs	r0, #1
    switch( joinReqType )
 8009048:	2dff      	cmp	r5, #255	; 0xff
 800904a:	d11a      	bne.n	8009082 <SendReJoinReq+0x42>
            SwitchClass( CLASS_A );
 800904c:	0020      	movs	r0, r4
 800904e:	f7ff f8e9 	bl	8008224 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8009052:	4b0d      	ldr	r3, [pc, #52]	; (8009088 <SendReJoinReq+0x48>)
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8009054:	490d      	ldr	r1, [pc, #52]	; (800908c <SendReJoinReq+0x4c>)
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8009056:	001a      	movs	r2, r3
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8009058:	33fc      	adds	r3, #252	; 0xfc
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800905a:	32ff      	adds	r2, #255	; 0xff
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800905c:	60d9      	str	r1, [r3, #12]
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800905e:	7154      	strb	r4, [r2, #5]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8009060:	7355      	strb	r5, [r2, #13]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8009062:	7394      	strb	r4, [r2, #14]
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8009064:	f7fe fe38 	bl	8007cd8 <SecureElementGetJoinEui>
 8009068:	2208      	movs	r2, #8
 800906a:	0001      	movs	r1, r0
 800906c:	4808      	ldr	r0, [pc, #32]	; (8009090 <SendReJoinReq+0x50>)
 800906e:	f005 fca8 	bl	800e9c2 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8009072:	f7fe fe1b 	bl	8007cac <SecureElementGetDevEui>
 8009076:	2208      	movs	r2, #8
 8009078:	0001      	movs	r1, r0
 800907a:	4806      	ldr	r0, [pc, #24]	; (8009094 <SendReJoinReq+0x54>)
 800907c:	f005 fca1 	bl	800e9c2 <memcpy1>
            allowDelayedTx = false;
 8009080:	0020      	movs	r0, r4
    status = ScheduleTx( allowDelayedTx );
 8009082:	f7ff fded 	bl	8008c60 <ScheduleTx>
}
 8009086:	bd70      	pop	{r4, r5, r6, pc}
 8009088:	200008bc 	.word	0x200008bc
 800908c:	200008be 	.word	0x200008be
 8009090:	200009ca 	.word	0x200009ca
 8009094:	200009d2 	.word	0x200009d2

08009098 <SetTxContinuousWave>:
{
 8009098:	b510      	push	{r4, lr}
    continuousWave.Channel = MacCtx.Channel;
 800909a:	4b13      	ldr	r3, [pc, #76]	; (80090e8 <SetTxContinuousWave+0x50>)
 800909c:	4c13      	ldr	r4, [pc, #76]	; (80090ec <SetTxContinuousWave+0x54>)
{
 800909e:	b086      	sub	sp, #24
    continuousWave.Channel = MacCtx.Channel;
 80090a0:	5ce3      	ldrb	r3, [r4, r3]
 80090a2:	aa02      	add	r2, sp, #8
 80090a4:	7013      	strb	r3, [r2, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80090a6:	4b12      	ldr	r3, [pc, #72]	; (80090f0 <SetTxContinuousWave+0x58>)
 80090a8:	a902      	add	r1, sp, #8
 80090aa:	58e3      	ldr	r3, [r4, r3]
 80090ac:	001a      	movs	r2, r3
 80090ae:	32f9      	adds	r2, #249	; 0xf9
 80090b0:	7812      	ldrb	r2, [r2, #0]
 80090b2:	704a      	strb	r2, [r1, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 80090b4:	001a      	movs	r2, r3
 80090b6:	32f8      	adds	r2, #248	; 0xf8
 80090b8:	7812      	ldrb	r2, [r2, #0]
 80090ba:	708a      	strb	r2, [r1, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 80090bc:	001a      	movs	r2, r3
 80090be:	32fc      	adds	r2, #252	; 0xfc
 80090c0:	6b51      	ldr	r1, [r2, #52]	; 0x34
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 80090c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 80090c4:	9103      	str	r1, [sp, #12]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 80090c6:	9201      	str	r2, [sp, #4]
 80090c8:	9204      	str	r2, [sp, #16]
    continuousWave.Timeout = timeout;
 80090ca:	aa02      	add	r2, sp, #8
    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 80090cc:	0011      	movs	r1, r2
    continuousWave.Timeout = timeout;
 80090ce:	8190      	strh	r0, [r2, #12]
    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 80090d0:	7818      	ldrb	r0, [r3, #0]
 80090d2:	f003 fd59 	bl	800cb88 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80090d6:	22d0      	movs	r2, #208	; 0xd0
 80090d8:	2302      	movs	r3, #2
}
 80090da:	2000      	movs	r0, #0
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80090dc:	0092      	lsls	r2, r2, #2
 80090de:	58a1      	ldr	r1, [r4, r2]
 80090e0:	430b      	orrs	r3, r1
 80090e2:	50a3      	str	r3, [r4, r2]
}
 80090e4:	b006      	add	sp, #24
 80090e6:	bd10      	pop	{r4, pc}
 80090e8:	00000415 	.word	0x00000415
 80090ec:	200008bc 	.word	0x200008bc
 80090f0:	00000484 	.word	0x00000484

080090f4 <SetTxContinuousWave1>:
{
 80090f4:	0003      	movs	r3, r0
 80090f6:	0008      	movs	r0, r1
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80090f8:	b251      	sxtb	r1, r2
 80090fa:	4a07      	ldr	r2, [pc, #28]	; (8009118 <SetTxContinuousWave1+0x24>)
{
 80090fc:	b510      	push	{r4, lr}
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80090fe:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8009100:	001a      	movs	r2, r3
 8009102:	47a0      	blx	r4
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009104:	22d0      	movs	r2, #208	; 0xd0
 8009106:	2302      	movs	r3, #2
 8009108:	4904      	ldr	r1, [pc, #16]	; (800911c <SetTxContinuousWave1+0x28>)
 800910a:	0092      	lsls	r2, r2, #2
 800910c:	5888      	ldr	r0, [r1, r2]
 800910e:	4303      	orrs	r3, r0
 8009110:	508b      	str	r3, [r1, r2]
}
 8009112:	2000      	movs	r0, #0
 8009114:	bd10      	pop	{r4, pc}
 8009116:	46c0      	nop			; (mov r8, r8)
 8009118:	0801074c 	.word	0x0801074c
 800911c:	200008bc 	.word	0x200008bc

08009120 <GetCtxs>:
{
 8009120:	b513      	push	{r0, r1, r4, lr}
    Contexts.MacNvmCtx = &NvmMacCtx;
 8009122:	4b14      	ldr	r3, [pc, #80]	; (8009174 <GetCtxs+0x54>)
 8009124:	4c14      	ldr	r4, [pc, #80]	; (8009178 <GetCtxs+0x58>)
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 8009126:	4815      	ldr	r0, [pc, #84]	; (800917c <GetCtxs+0x5c>)
    Contexts.MacNvmCtx = &NvmMacCtx;
 8009128:	6023      	str	r3, [r4, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 800912a:	23ee      	movs	r3, #238	; 0xee
 800912c:	005b      	lsls	r3, r3, #1
 800912e:	6063      	str	r3, [r4, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 8009130:	f003 f8b8 	bl	800c2a4 <LoRaMacCryptoGetNvmCtx>
    GetNvmCtxParams_t params ={ 0 };
 8009134:	2300      	movs	r3, #0
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 8009136:	4a12      	ldr	r2, [pc, #72]	; (8009180 <GetCtxs+0x60>)
    GetNvmCtxParams_t params ={ 0 };
 8009138:	9301      	str	r3, [sp, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800913a:	4b12      	ldr	r3, [pc, #72]	; (8009184 <GetCtxs+0x64>)
 800913c:	a901      	add	r1, sp, #4
 800913e:	58d3      	ldr	r3, [r2, r3]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 8009140:	6120      	str	r0, [r4, #16]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 8009142:	7818      	ldrb	r0, [r3, #0]
 8009144:	f003 fc7c 	bl	800ca40 <RegionGetNvmCtx>
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 8009148:	9b01      	ldr	r3, [sp, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800914a:	60a0      	str	r0, [r4, #8]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 800914c:	480e      	ldr	r0, [pc, #56]	; (8009188 <GetCtxs+0x68>)
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 800914e:	60e3      	str	r3, [r4, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 8009150:	f7fe fcae 	bl	8007ab0 <SecureElementGetNvmCtx>
 8009154:	61a0      	str	r0, [r4, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 8009156:	480d      	ldr	r0, [pc, #52]	; (800918c <GetCtxs+0x6c>)
 8009158:	f002 fd3e 	bl	800bbd8 <LoRaMacCommandsGetNvmCtx>
 800915c:	6220      	str	r0, [r4, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 800915e:	480c      	ldr	r0, [pc, #48]	; (8009190 <GetCtxs+0x70>)
 8009160:	f001 fee4 	bl	800af2c <LoRaMacClassBGetNvmCtx>
 8009164:	62a0      	str	r0, [r4, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 8009166:	480b      	ldr	r0, [pc, #44]	; (8009194 <GetCtxs+0x74>)
 8009168:	f002 fe56 	bl	800be18 <LoRaMacConfirmQueueGetNvmCtx>
 800916c:	6320      	str	r0, [r4, #48]	; 0x30
}
 800916e:	0020      	movs	r0, r4
 8009170:	bd16      	pop	{r1, r2, r4, pc}
 8009172:	46c0      	nop			; (mov r8, r8)
 8009174:	200006e0 	.word	0x200006e0
 8009178:	2000161c 	.word	0x2000161c
 800917c:	20001630 	.word	0x20001630
 8009180:	200008bc 	.word	0x200008bc
 8009184:	00000484 	.word	0x00000484
 8009188:	20001638 	.word	0x20001638
 800918c:	20001640 	.word	0x20001640
 8009190:	20001648 	.word	0x20001648
 8009194:	20001650 	.word	0x20001650

08009198 <RestoreCtxs>:
{
 8009198:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800919a:	0004      	movs	r4, r0
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800919c:	2503      	movs	r5, #3
    if( contexts == NULL )
 800919e:	2800      	cmp	r0, #0
 80091a0:	d01f      	beq.n	80091e2 <RestoreCtxs+0x4a>
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80091a2:	23d0      	movs	r3, #208	; 0xd0
 80091a4:	4e1d      	ldr	r6, [pc, #116]	; (800921c <RestoreCtxs+0x84>)
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	58f3      	ldr	r3, [r6, r3]
        return LORAMAC_STATUS_BUSY;
 80091aa:	3d02      	subs	r5, #2
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80091ac:	42ab      	cmp	r3, r5
 80091ae:	d118      	bne.n	80091e2 <RestoreCtxs+0x4a>
    if( contexts->MacNvmCtx != NULL )
 80091b0:	6801      	ldr	r1, [r0, #0]
 80091b2:	2900      	cmp	r1, #0
 80091b4:	d004      	beq.n	80091c0 <RestoreCtxs+0x28>
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 80091b6:	6843      	ldr	r3, [r0, #4]
 80091b8:	4819      	ldr	r0, [pc, #100]	; (8009220 <RestoreCtxs+0x88>)
 80091ba:	b29a      	uxth	r2, r3
 80091bc:	f005 fc01 	bl	800e9c2 <memcpy1>
    params.Type = INIT_TYPE_RESTORE_CTX;
 80091c0:	2302      	movs	r3, #2
 80091c2:	466a      	mov	r2, sp
 80091c4:	7113      	strb	r3, [r2, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 80091c6:	68a3      	ldr	r3, [r4, #8]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80091c8:	4669      	mov	r1, sp
    params.NvmCtx = contexts->RegionNvmCtx;
 80091ca:	9300      	str	r3, [sp, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80091cc:	4b15      	ldr	r3, [pc, #84]	; (8009224 <RestoreCtxs+0x8c>)
 80091ce:	58f3      	ldr	r3, [r6, r3]
 80091d0:	7818      	ldrb	r0, [r3, #0]
 80091d2:	f003 fc2e 	bl	800ca32 <RegionInitDefaults>
    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 80091d6:	69a0      	ldr	r0, [r4, #24]
 80091d8:	f7fe fc5c 	bl	8007a94 <SecureElementRestoreNvmCtx>
 80091dc:	2800      	cmp	r0, #0
 80091de:	d002      	beq.n	80091e6 <RestoreCtxs+0x4e>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80091e0:	2511      	movs	r5, #17
}
 80091e2:	0028      	movs	r0, r5
 80091e4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 80091e6:	6920      	ldr	r0, [r4, #16]
 80091e8:	f003 f84e 	bl	800c288 <LoRaMacCryptoRestoreNvmCtx>
 80091ec:	2800      	cmp	r0, #0
 80091ee:	d1f7      	bne.n	80091e0 <RestoreCtxs+0x48>
    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 80091f0:	6a20      	ldr	r0, [r4, #32]
 80091f2:	f002 fce3 	bl	800bbbc <LoRaMacCommandsRestoreNvmCtx>
 80091f6:	1e05      	subs	r5, r0, #0
 80091f8:	d10b      	bne.n	8009212 <RestoreCtxs+0x7a>
    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 80091fa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80091fc:	f001 fe88 	bl	800af10 <LoRaMacClassBRestoreNvmCtx>
 8009200:	2800      	cmp	r0, #0
 8009202:	d008      	beq.n	8009216 <RestoreCtxs+0x7e>
    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 8009204:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009206:	f002 fdf9 	bl	800bdfc <LoRaMacConfirmQueueRestoreNvmCtx>
 800920a:	2800      	cmp	r0, #0
 800920c:	d1e9      	bne.n	80091e2 <RestoreCtxs+0x4a>
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 800920e:	3515      	adds	r5, #21
 8009210:	e7e7      	b.n	80091e2 <RestoreCtxs+0x4a>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009212:	2513      	movs	r5, #19
 8009214:	e7e5      	b.n	80091e2 <RestoreCtxs+0x4a>
        return LORAMAC_STATUS_CLASS_B_ERROR;
 8009216:	2514      	movs	r5, #20
 8009218:	e7e3      	b.n	80091e2 <RestoreCtxs+0x4a>
 800921a:	46c0      	nop			; (mov r8, r8)
 800921c:	200008bc 	.word	0x200008bc
 8009220:	200006e0 	.word	0x200006e0
 8009224:	00000484 	.word	0x00000484

08009228 <DetermineFrameType>:
{
 8009228:	0003      	movs	r3, r0
 800922a:	b510      	push	{r4, lr}
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800922c:	2003      	movs	r0, #3
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00d      	beq.n	800924e <DetermineFrameType+0x26>
 8009232:	2900      	cmp	r1, #0
 8009234:	d00b      	beq.n	800924e <DetermineFrameType+0x26>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8009236:	7b1c      	ldrb	r4, [r3, #12]
 8009238:	300c      	adds	r0, #12
 800923a:	0022      	movs	r2, r4
 800923c:	4002      	ands	r2, r0
 800923e:	4204      	tst	r4, r0
 8009240:	d006      	beq.n	8009250 <DetermineFrameType+0x28>
 8009242:	1c58      	adds	r0, r3, #1
 8009244:	7fc0      	ldrb	r0, [r0, #31]
 8009246:	2800      	cmp	r0, #0
 8009248:	d002      	beq.n	8009250 <DetermineFrameType+0x28>
        *fType = FRAME_TYPE_A;
 800924a:	2000      	movs	r0, #0
 800924c:	7008      	strb	r0, [r1, #0]
}
 800924e:	bd10      	pop	{r4, pc}
    else if( macMsg->FRMPayloadSize == 0 )
 8009250:	0018      	movs	r0, r3
 8009252:	3028      	adds	r0, #40	; 0x28
 8009254:	7800      	ldrb	r0, [r0, #0]
 8009256:	2800      	cmp	r0, #0
 8009258:	d102      	bne.n	8009260 <DetermineFrameType+0x38>
        *fType = FRAME_TYPE_B;
 800925a:	2301      	movs	r3, #1
        *fType = FRAME_TYPE_C;
 800925c:	700b      	strb	r3, [r1, #0]
 800925e:	e7f6      	b.n	800924e <DetermineFrameType+0x26>
        return LORAMAC_STATUS_ERROR;
 8009260:	2017      	movs	r0, #23
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8009262:	2a00      	cmp	r2, #0
 8009264:	d1f3      	bne.n	800924e <DetermineFrameType+0x26>
 8009266:	3301      	adds	r3, #1
 8009268:	7fd8      	ldrb	r0, [r3, #31]
 800926a:	2800      	cmp	r0, #0
 800926c:	d101      	bne.n	8009272 <DetermineFrameType+0x4a>
        *fType = FRAME_TYPE_C;
 800926e:	2302      	movs	r3, #2
 8009270:	e7f4      	b.n	800925c <DetermineFrameType+0x34>
        *fType = FRAME_TYPE_D;
 8009272:	2303      	movs	r3, #3
    return LORAMAC_STATUS_OK;
 8009274:	0010      	movs	r0, r2
        *fType = FRAME_TYPE_D;
 8009276:	700b      	strb	r3, [r1, #0]
 8009278:	e7e9      	b.n	800924e <DetermineFrameType+0x26>
	...

0800927c <LoRaMacProcess>:
{
 800927c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800927e:	b0ad      	sub	sp, #180	; 0xb4
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009280:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009284:	b672      	cpsid	i
    LoRaMacRadioEvents.Value = 0;
 8009286:	2000      	movs	r0, #0
    events = LoRaMacRadioEvents;
 8009288:	4ac9      	ldr	r2, [pc, #804]	; (80095b0 <LoRaMacProcess+0x334>)
 800928a:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800928c:	6010      	str	r0, [r2, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800928e:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 8009292:	4283      	cmp	r3, r0
 8009294:	d100      	bne.n	8009298 <LoRaMacProcess+0x1c>
 8009296:	e0e7      	b.n	8009468 <LoRaMacProcess+0x1ec>
        if( events.Events.TxDone == 1 )
 8009298:	b2da      	uxtb	r2, r3
 800929a:	9206      	str	r2, [sp, #24]
 800929c:	06db      	lsls	r3, r3, #27
 800929e:	d55e      	bpl.n	800935e <LoRaMacProcess+0xe2>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80092a0:	4cc4      	ldr	r4, [pc, #784]	; (80095b4 <LoRaMacProcess+0x338>)
 80092a2:	4dc5      	ldr	r5, [pc, #788]	; (80095b8 <LoRaMacProcess+0x33c>)
 80092a4:	5963      	ldr	r3, [r4, r5]
 80092a6:	33f0      	adds	r3, #240	; 0xf0
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d003      	beq.n	80092b6 <LoRaMacProcess+0x3a>
        Radio.Sleep( );
 80092ae:	4bc3      	ldr	r3, [pc, #780]	; (80095bc <LoRaMacProcess+0x340>)
 80092b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092b2:	9303      	str	r3, [sp, #12]
 80092b4:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 80092b6:	23ec      	movs	r3, #236	; 0xec
 80092b8:	4ec1      	ldr	r6, [pc, #772]	; (80095c0 <LoRaMacProcess+0x344>)
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	58e1      	ldr	r1, [r4, r3]
 80092be:	0030      	movs	r0, r6
 80092c0:	f005 fab4 	bl	800e82c <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 80092c4:	0030      	movs	r0, r6
 80092c6:	f005 fa0d 	bl	800e6e4 <TimerStart>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 80092ca:	23ed      	movs	r3, #237	; 0xed
 80092cc:	4ebd      	ldr	r6, [pc, #756]	; (80095c4 <LoRaMacProcess+0x348>)
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	0030      	movs	r0, r6
 80092d2:	58e1      	ldr	r1, [r4, r3]
 80092d4:	f005 faaa 	bl	800e82c <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer2 );
 80092d8:	0030      	movs	r0, r6
 80092da:	f005 fa03 	bl	800e6e4 <TimerStart>
    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 80092de:	5963      	ldr	r3, [r4, r5]
 80092e0:	4eb9      	ldr	r6, [pc, #740]	; (80095c8 <LoRaMacProcess+0x34c>)
 80092e2:	001a      	movs	r2, r3
 80092e4:	32f0      	adds	r2, #240	; 0xf0
 80092e6:	7812      	ldrb	r2, [r2, #0]
 80092e8:	2a02      	cmp	r2, #2
 80092ea:	d002      	beq.n	80092f2 <LoRaMacProcess+0x76>
 80092ec:	5da2      	ldrb	r2, [r4, r6]
 80092ee:	2a00      	cmp	r2, #0
 80092f0:	d011      	beq.n	8009316 <LoRaMacProcess+0x9a>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 80092f2:	2216      	movs	r2, #22
 80092f4:	a914      	add	r1, sp, #80	; 0x50
 80092f6:	700a      	strb	r2, [r1, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80092f8:	7818      	ldrb	r0, [r3, #0]
 80092fa:	f003 fb87 	bl	800ca0c <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 80092fe:	23ed      	movs	r3, #237	; 0xed
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	4fb2      	ldr	r7, [pc, #712]	; (80095cc <LoRaMacProcess+0x350>)
 8009304:	58e1      	ldr	r1, [r4, r3]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009306:	9016      	str	r0, [sp, #88]	; 0x58
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8009308:	1809      	adds	r1, r1, r0
 800930a:	0038      	movs	r0, r7
 800930c:	f005 fa8e 	bl	800e82c <TimerSetValue>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8009310:	0038      	movs	r0, r7
 8009312:	f005 f9e7 	bl	800e6e4 <TimerStart>
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 8009316:	219f      	movs	r1, #159	; 0x9f
    txDone.Channel = MacCtx.Channel;
 8009318:	2048      	movs	r0, #72	; 0x48
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 800931a:	4aad      	ldr	r2, [pc, #692]	; (80095d0 <LoRaMacProcess+0x354>)
 800931c:	5963      	ldr	r3, [r4, r5]
 800931e:	5ca2      	ldrb	r2, [r4, r2]
 8009320:	0049      	lsls	r1, r1, #1
 8009322:	545a      	strb	r2, [r3, r1]
    txDone.Channel = MacCtx.Channel;
 8009324:	a90e      	add	r1, sp, #56	; 0x38
 8009326:	1809      	adds	r1, r1, r0
 8009328:	700a      	strb	r2, [r1, #0]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800932a:	22ea      	movs	r2, #234	; 0xea
 800932c:	0052      	lsls	r2, r2, #1
 800932e:	5c9a      	ldrb	r2, [r3, r2]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8009330:	4fa8      	ldr	r7, [pc, #672]	; (80095d4 <LoRaMacProcess+0x358>)
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8009332:	1e51      	subs	r1, r2, #1
 8009334:	418a      	sbcs	r2, r1
 8009336:	3001      	adds	r0, #1
 8009338:	a90e      	add	r1, sp, #56	; 0x38
 800933a:	1809      	adds	r1, r1, r0
 800933c:	700a      	strb	r2, [r1, #0]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800933e:	683a      	ldr	r2, [r7, #0]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 8009340:	7818      	ldrb	r0, [r3, #0]
 8009342:	a920      	add	r1, sp, #128	; 0x80
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8009344:	9221      	str	r2, [sp, #132]	; 0x84
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 8009346:	f003 fb6d 	bl	800ca24 <RegionSetBandTxDone>
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 800934a:	23e2      	movs	r3, #226	; 0xe2
 800934c:	5962      	ldr	r2, [r4, r5]
 800934e:	6839      	ldr	r1, [r7, #0]
 8009350:	005b      	lsls	r3, r3, #1
 8009352:	50d1      	str	r1, [r2, r3]
    if( MacCtx.NodeAckRequested == false )
 8009354:	5da3      	ldrb	r3, [r4, r6]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d101      	bne.n	800935e <LoRaMacProcess+0xe2>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800935a:	4a9f      	ldr	r2, [pc, #636]	; (80095d8 <LoRaMacProcess+0x35c>)
 800935c:	54a3      	strb	r3, [r4, r2]
        if( events.Events.RxDone == 1 )
 800935e:	9b06      	ldr	r3, [sp, #24]
 8009360:	071b      	lsls	r3, r3, #28
 8009362:	d552      	bpl.n	800940a <LoRaMacProcess+0x18e>
    uint8_t *payload = RxDoneParams.Payload;
 8009364:	4b9d      	ldr	r3, [pc, #628]	; (80095dc <LoRaMacProcess+0x360>)
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8009366:	4c93      	ldr	r4, [pc, #588]	; (80095b4 <LoRaMacProcess+0x338>)
    uint16_t size = RxDoneParams.Size;
 8009368:	891a      	ldrh	r2, [r3, #8]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800936a:	4e93      	ldr	r6, [pc, #588]	; (80095b8 <LoRaMacProcess+0x33c>)
    uint16_t size = RxDoneParams.Size;
 800936c:	9204      	str	r2, [sp, #16]
    int16_t rssi = RxDoneParams.Rssi;
 800936e:	210a      	movs	r1, #10
 8009370:	5e5a      	ldrsh	r2, [r3, r1]
    uint8_t *payload = RxDoneParams.Payload;
 8009372:	685f      	ldr	r7, [r3, #4]
    int16_t rssi = RxDoneParams.Rssi;
 8009374:	9207      	str	r2, [sp, #28]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8009376:	59a2      	ldr	r2, [r4, r6]
    int8_t snr = RxDoneParams.Snr;
 8009378:	7b1b      	ldrb	r3, [r3, #12]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800937a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    int8_t snr = RxDoneParams.Snr;
 800937c:	b25b      	sxtb	r3, r3
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800937e:	920b      	str	r2, [sp, #44]	; 0x2c
    MacCtx.McpsConfirm.AckReceived = false;
 8009380:	2288      	movs	r2, #136	; 0x88
    int8_t snr = RxDoneParams.Snr;
 8009382:	9305      	str	r3, [sp, #20]
    uint32_t downLinkCounter = 0;
 8009384:	2300      	movs	r3, #0
    MacCtx.McpsConfirm.AckReceived = false;
 8009386:	00d2      	lsls	r2, r2, #3
 8009388:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.Rssi = rssi;
 800938a:	9907      	ldr	r1, [sp, #28]
 800938c:	4a94      	ldr	r2, [pc, #592]	; (80095e0 <LoRaMacProcess+0x364>)
    uint32_t downLinkCounter = 0;
 800938e:	9313      	str	r3, [sp, #76]	; 0x4c
    MacCtx.McpsIndication.Rssi = rssi;
 8009390:	52a1      	strh	r1, [r4, r2]
    MacCtx.McpsIndication.Snr = snr;
 8009392:	9905      	ldr	r1, [sp, #20]
 8009394:	4a93      	ldr	r2, [pc, #588]	; (80095e4 <LoRaMacProcess+0x368>)
 8009396:	54a1      	strb	r1, [r4, r2]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 8009398:	3254      	adds	r2, #84	; 0x54
 800939a:	5ca2      	ldrb	r2, [r4, r2]
 800939c:	4992      	ldr	r1, [pc, #584]	; (80095e8 <LoRaMacProcess+0x36c>)
 800939e:	5462      	strb	r2, [r4, r1]
    MacCtx.McpsIndication.Multicast = 0;
 80093a0:	4a92      	ldr	r2, [pc, #584]	; (80095ec <LoRaMacProcess+0x370>)
 80093a2:	52a3      	strh	r3, [r4, r2]
    MacCtx.McpsIndication.FramePending = 0;
 80093a4:	4a92      	ldr	r2, [pc, #584]	; (80095f0 <LoRaMacProcess+0x374>)
 80093a6:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 80093a8:	4a92      	ldr	r2, [pc, #584]	; (80095f4 <LoRaMacProcess+0x378>)
 80093aa:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 80093ac:	3204      	adds	r2, #4
 80093ae:	52a3      	strh	r3, [r4, r2]
    MacCtx.McpsIndication.AckReceived = false;
 80093b0:	4a91      	ldr	r2, [pc, #580]	; (80095f8 <LoRaMacProcess+0x37c>)
 80093b2:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 80093b4:	3202      	adds	r2, #2
 80093b6:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80093b8:	4a90      	ldr	r2, [pc, #576]	; (80095fc <LoRaMacProcess+0x380>)
 80093ba:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 80093bc:	4a90      	ldr	r2, [pc, #576]	; (8009600 <LoRaMacProcess+0x384>)
 80093be:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 80093c0:	3204      	adds	r2, #4
 80093c2:	54a3      	strb	r3, [r4, r2]
    Radio.Sleep( );
 80093c4:	4b7d      	ldr	r3, [pc, #500]	; (80095bc <LoRaMacProcess+0x340>)
 80093c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c8:	9303      	str	r3, [sp, #12]
 80093ca:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 80093cc:	487d      	ldr	r0, [pc, #500]	; (80095c4 <LoRaMacProcess+0x348>)
 80093ce:	f005 fa01 	bl	800e7d4 <TimerStop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 80093d2:	0038      	movs	r0, r7
 80093d4:	9904      	ldr	r1, [sp, #16]
 80093d6:	f001 fdbd 	bl	800af54 <LoRaMacClassBRxBeacon>
 80093da:	4b83      	ldr	r3, [pc, #524]	; (80095e8 <LoRaMacProcess+0x36c>)
 80093dc:	1e05      	subs	r5, r0, #0
 80093de:	930a      	str	r3, [sp, #40]	; 0x28
 80093e0:	4b82      	ldr	r3, [pc, #520]	; (80095ec <LoRaMacProcess+0x370>)
 80093e2:	9603      	str	r6, [sp, #12]
 80093e4:	930c      	str	r3, [sp, #48]	; 0x30
 80093e6:	4b82      	ldr	r3, [pc, #520]	; (80095f0 <LoRaMacProcess+0x374>)
 80093e8:	930d      	str	r3, [sp, #52]	; 0x34
 80093ea:	4b82      	ldr	r3, [pc, #520]	; (80095f4 <LoRaMacProcess+0x378>)
 80093ec:	9308      	str	r3, [sp, #32]
 80093ee:	4b82      	ldr	r3, [pc, #520]	; (80095f8 <LoRaMacProcess+0x37c>)
 80093f0:	930e      	str	r3, [sp, #56]	; 0x38
 80093f2:	4b82      	ldr	r3, [pc, #520]	; (80095fc <LoRaMacProcess+0x380>)
 80093f4:	9309      	str	r3, [sp, #36]	; 0x24
 80093f6:	4b82      	ldr	r3, [pc, #520]	; (8009600 <LoRaMacProcess+0x384>)
 80093f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80093fa:	d100      	bne.n	80093fe <LoRaMacProcess+0x182>
 80093fc:	e112      	b.n	8009624 <LoRaMacProcess+0x3a8>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 80093fe:	4b81      	ldr	r3, [pc, #516]	; (8009604 <LoRaMacProcess+0x388>)
 8009400:	9a07      	ldr	r2, [sp, #28]
 8009402:	52e2      	strh	r2, [r4, r3]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8009404:	9a05      	ldr	r2, [sp, #20]
 8009406:	3302      	adds	r3, #2
 8009408:	54e2      	strb	r2, [r4, r3]
        if( events.Events.TxTimeout == 1 )
 800940a:	9b06      	ldr	r3, [sp, #24]
 800940c:	075b      	lsls	r3, r3, #29
 800940e:	d51d      	bpl.n	800944c <LoRaMacProcess+0x1d0>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8009410:	4c68      	ldr	r4, [pc, #416]	; (80095b4 <LoRaMacProcess+0x338>)
 8009412:	4b69      	ldr	r3, [pc, #420]	; (80095b8 <LoRaMacProcess+0x33c>)
 8009414:	58e3      	ldr	r3, [r4, r3]
 8009416:	33f0      	adds	r3, #240	; 0xf0
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	2b02      	cmp	r3, #2
 800941c:	d003      	beq.n	8009426 <LoRaMacProcess+0x1aa>
        Radio.Sleep( );
 800941e:	4b67      	ldr	r3, [pc, #412]	; (80095bc <LoRaMacProcess+0x340>)
 8009420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009422:	9303      	str	r3, [sp, #12]
 8009424:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8009426:	f7fe fc71 	bl	8007d0c <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800942a:	2002      	movs	r0, #2
 800942c:	4b6a      	ldr	r3, [pc, #424]	; (80095d8 <LoRaMacProcess+0x35c>)
 800942e:	54e0      	strb	r0, [r4, r3]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8009430:	f002 fd68 	bl	800bf04 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8009434:	4b64      	ldr	r3, [pc, #400]	; (80095c8 <LoRaMacProcess+0x34c>)
 8009436:	5ce3      	ldrb	r3, [r4, r3]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d002      	beq.n	8009442 <LoRaMacProcess+0x1c6>
        MacCtx.AckTimeoutRetry = true;
 800943c:	2201      	movs	r2, #1
 800943e:	4b72      	ldr	r3, [pc, #456]	; (8009608 <LoRaMacProcess+0x38c>)
 8009440:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009442:	2320      	movs	r3, #32
 8009444:	4a71      	ldr	r2, [pc, #452]	; (800960c <LoRaMacProcess+0x390>)
 8009446:	5ca1      	ldrb	r1, [r4, r2]
 8009448:	430b      	orrs	r3, r1
 800944a:	54a3      	strb	r3, [r4, r2]
        if( events.Events.RxError == 1 )
 800944c:	9b06      	ldr	r3, [sp, #24]
 800944e:	079b      	lsls	r3, r3, #30
 8009450:	d503      	bpl.n	800945a <LoRaMacProcess+0x1de>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8009452:	2106      	movs	r1, #6
 8009454:	2005      	movs	r0, #5
 8009456:	f7fe fd35 	bl	8007ec4 <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
 800945a:	9b06      	ldr	r3, [sp, #24]
 800945c:	07db      	lsls	r3, r3, #31
 800945e:	d503      	bpl.n	8009468 <LoRaMacProcess+0x1ec>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8009460:	2104      	movs	r1, #4
 8009462:	2003      	movs	r0, #3
 8009464:	f7fe fd2e 	bl	8007ec4 <HandleRadioRxErrorTimeout>
    LoRaMacClassBProcess( );
 8009468:	f002 f8d2 	bl	800b610 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800946c:	4d67      	ldr	r5, [pc, #412]	; (800960c <LoRaMacProcess+0x390>)
 800946e:	4c51      	ldr	r4, [pc, #324]	; (80095b4 <LoRaMacProcess+0x338>)
 8009470:	5d62      	ldrb	r2, [r4, r5]
 8009472:	0693      	lsls	r3, r2, #26
 8009474:	d56c      	bpl.n	8009550 <LoRaMacProcess+0x2d4>
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8009476:	21d0      	movs	r1, #208	; 0xd0
    MacCtx.AllowRequests = requestState;
 8009478:	2300      	movs	r3, #0
 800947a:	4865      	ldr	r0, [pc, #404]	; (8009610 <LoRaMacProcess+0x394>)
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800947c:	0089      	lsls	r1, r1, #2
    MacCtx.AllowRequests = requestState;
 800947e:	5423      	strb	r3, [r4, r0]
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8009480:	5863      	ldr	r3, [r4, r1]
 8009482:	9003      	str	r0, [sp, #12]
 8009484:	0618      	lsls	r0, r3, #24
 8009486:	d502      	bpl.n	800948e <LoRaMacProcess+0x212>
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009488:	2082      	movs	r0, #130	; 0x82
 800948a:	4383      	bics	r3, r0
 800948c:	5063      	str	r3, [r4, r1]

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800948e:	2305      	movs	r3, #5
 8009490:	421a      	tst	r2, r3
 8009492:	d100      	bne.n	8009496 <LoRaMacProcess+0x21a>
 8009494:	e310      	b.n	8009ab8 <LoRaMacProcess+0x83c>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009496:	200b      	movs	r0, #11
 8009498:	f002 fd50 	bl	800bf3c <LoRaMacConfirmQueueIsCmdActive>
 800949c:	2800      	cmp	r0, #0
 800949e:	d100      	bne.n	80094a2 <LoRaMacProcess+0x226>
 80094a0:	e30a      	b.n	8009ab8 <LoRaMacProcess+0x83c>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 80094a2:	5d63      	ldrb	r3, [r4, r5]
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80094a4:	07da      	lsls	r2, r3, #31
 80094a6:	d500      	bpl.n	80094aa <LoRaMacProcess+0x22e>
 80094a8:	e306      	b.n	8009ab8 <LoRaMacProcess+0x83c>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80094aa:	075b      	lsls	r3, r3, #29
 80094ac:	d400      	bmi.n	80094b0 <LoRaMacProcess+0x234>
 80094ae:	e31a      	b.n	8009ae6 <LoRaMacProcess+0x86a>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80094b0:	22d0      	movs	r2, #208	; 0xd0
 80094b2:	2302      	movs	r3, #2
 80094b4:	0092      	lsls	r2, r2, #2
 80094b6:	58a1      	ldr	r1, [r4, r2]
 80094b8:	4399      	bics	r1, r3
 80094ba:	50a1      	str	r1, [r4, r2]
    if( MacCtx.MacState == LORAMAC_IDLE )
 80094bc:	23d0      	movs	r3, #208	; 0xd0
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	58e3      	ldr	r3, [r4, r3]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d141      	bne.n	800954a <LoRaMacProcess+0x2ce>
 80094c6:	5d67      	ldrb	r7, [r4, r5]
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80094c8:	3301      	adds	r3, #1
 80094ca:	0039      	movs	r1, r7
 80094cc:	4019      	ands	r1, r3
 80094ce:	421f      	tst	r7, r3
 80094d0:	d002      	beq.n	80094d8 <LoRaMacProcess+0x25c>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 80094d2:	003a      	movs	r2, r7
 80094d4:	439a      	bics	r2, r3
 80094d6:	5562      	strb	r2, [r4, r5]
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80094d8:	2204      	movs	r2, #4
 80094da:	5d63      	ldrb	r3, [r4, r5]
 80094dc:	4213      	tst	r3, r2
 80094de:	d001      	beq.n	80094e4 <LoRaMacProcess+0x268>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80094e0:	4393      	bics	r3, r2
 80094e2:	5563      	strb	r3, [r4, r5]
    MacCtx.AllowRequests = requestState;
 80094e4:	2301      	movs	r3, #1
 80094e6:	9a03      	ldr	r2, [sp, #12]
 80094e8:	54a3      	strb	r3, [r4, r2]
        if( reqEvents.Bits.McpsReq == 1 )
 80094ea:	2900      	cmp	r1, #0
 80094ec:	d005      	beq.n	80094fa <LoRaMacProcess+0x27e>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 80094ee:	23d1      	movs	r3, #209	; 0xd1
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	58e3      	ldr	r3, [r4, r3]
 80094f4:	4847      	ldr	r0, [pc, #284]	; (8009614 <LoRaMacProcess+0x398>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 80094fa:	2604      	movs	r6, #4
 80094fc:	4237      	tst	r7, r6
 80094fe:	d009      	beq.n	8009514 <LoRaMacProcess+0x298>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8009500:	4845      	ldr	r0, [pc, #276]	; (8009618 <LoRaMacProcess+0x39c>)
 8009502:	f002 fd33 	bl	800bf6c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8009506:	f002 fd5d 	bl	800bfc4 <LoRaMacConfirmQueueGetCnt>
 800950a:	2800      	cmp	r0, #0
 800950c:	d002      	beq.n	8009514 <LoRaMacProcess+0x298>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800950e:	5d63      	ldrb	r3, [r4, r5]
 8009510:	431e      	orrs	r6, r3
 8009512:	5566      	strb	r6, [r4, r5]
        LoRaMacClassBResumeBeaconing( );
 8009514:	f001 fe42 	bl	800b19c <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 8009518:	2220      	movs	r2, #32
 800951a:	5d63      	ldrb	r3, [r4, r5]
 800951c:	4393      	bics	r3, r2
 800951e:	5563      	strb	r3, [r4, r5]
    if( MacCtx.MacState == LORAMAC_IDLE )
 8009520:	23d0      	movs	r3, #208	; 0xd0
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	58e3      	ldr	r3, [r4, r3]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d10f      	bne.n	800954a <LoRaMacProcess+0x2ce>
        bool isStickyMacCommandPending = false;
 800952a:	2648      	movs	r6, #72	; 0x48
 800952c:	aa0e      	add	r2, sp, #56	; 0x38
 800952e:	1992      	adds	r2, r2, r6
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8009530:	a820      	add	r0, sp, #128	; 0x80
        bool isStickyMacCommandPending = false;
 8009532:	7013      	strb	r3, [r2, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8009534:	f002 fc34 	bl	800bda0 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 8009538:	ab0e      	add	r3, sp, #56	; 0x38
 800953a:	199b      	adds	r3, r3, r6
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d003      	beq.n	800954a <LoRaMacProcess+0x2ce>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8009542:	2310      	movs	r3, #16
 8009544:	5d62      	ldrb	r2, [r4, r5]
 8009546:	4313      	orrs	r3, r2
 8009548:	5563      	strb	r3, [r4, r5]
    MacCtx.AllowRequests = requestState;
 800954a:	2301      	movs	r3, #1
 800954c:	9a03      	ldr	r2, [sp, #12]
 800954e:	54a3      	strb	r3, [r4, r2]
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8009550:	2208      	movs	r2, #8
 8009552:	5d63      	ldrb	r3, [r4, r5]
 8009554:	4213      	tst	r3, r2
 8009556:	d007      	beq.n	8009568 <LoRaMacProcess+0x2ec>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8009558:	4393      	bics	r3, r2
 800955a:	5563      	strb	r3, [r4, r5]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 800955c:	23d1      	movs	r3, #209	; 0xd1
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	58e3      	ldr	r3, [r4, r3]
 8009562:	482e      	ldr	r0, [pc, #184]	; (800961c <LoRaMacProcess+0x3a0>)
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8009568:	2610      	movs	r6, #16
 800956a:	5d63      	ldrb	r3, [r4, r5]
 800956c:	4233      	tst	r3, r6
 800956e:	d00a      	beq.n	8009586 <LoRaMacProcess+0x30a>
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8009570:	2306      	movs	r3, #6
 8009572:	a820      	add	r0, sp, #128	; 0x80
 8009574:	8003      	strh	r3, [r0, #0]
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 8009576:	23d1      	movs	r3, #209	; 0xd1
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	58e3      	ldr	r3, [r4, r3]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 8009580:	5d63      	ldrb	r3, [r4, r5]
 8009582:	43b3      	bics	r3, r6
 8009584:	5563      	strb	r3, [r4, r5]
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009586:	2202      	movs	r2, #2
 8009588:	5d63      	ldrb	r3, [r4, r5]
 800958a:	4213      	tst	r3, r2
 800958c:	d007      	beq.n	800959e <LoRaMacProcess+0x322>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800958e:	4393      	bics	r3, r2
 8009590:	5563      	strb	r3, [r4, r5]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 8009592:	23d1      	movs	r3, #209	; 0xd1
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	58e3      	ldr	r3, [r4, r3]
 8009598:	4821      	ldr	r0, [pc, #132]	; (8009620 <LoRaMacProcess+0x3a4>)
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	4798      	blx	r3
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800959e:	2390      	movs	r3, #144	; 0x90
 80095a0:	00db      	lsls	r3, r3, #3
 80095a2:	5ce3      	ldrb	r3, [r4, r3]
 80095a4:	2b02      	cmp	r3, #2
 80095a6:	d101      	bne.n	80095ac <LoRaMacProcess+0x330>
        OpenContinuousRxCWindow( );
 80095a8:	f7fe fe14 	bl	80081d4 <OpenContinuousRxCWindow>
}
 80095ac:	b02d      	add	sp, #180	; 0xb4
 80095ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095b0:	200006dc 	.word	0x200006dc
 80095b4:	200008bc 	.word	0x200008bc
 80095b8:	00000484 	.word	0x00000484
 80095bc:	0801074c 	.word	0x0801074c
 80095c0:	20000c3c 	.word	0x20000c3c
 80095c4:	20000c54 	.word	0x20000c54
 80095c8:	00000414 	.word	0x00000414
 80095cc:	20000cb4 	.word	0x20000cb4
 80095d0:	00000415 	.word	0x00000415
 80095d4:	20001608 	.word	0x20001608
 80095d8:	0000043d 	.word	0x0000043d
 80095dc:	2000160c 	.word	0x2000160c
 80095e0:	0000042a 	.word	0x0000042a
 80095e4:	0000042c 	.word	0x0000042c
 80095e8:	0000042d 	.word	0x0000042d
 80095ec:	0000041e 	.word	0x0000041e
 80095f0:	00000421 	.word	0x00000421
 80095f4:	00000424 	.word	0x00000424
 80095f8:	0000042e 	.word	0x0000042e
 80095fc:	0000041c 	.word	0x0000041c
 8009600:	00000434 	.word	0x00000434
 8009604:	00000476 	.word	0x00000476
 8009608:	00000413 	.word	0x00000413
 800960c:	00000481 	.word	0x00000481
 8009610:	00000482 	.word	0x00000482
 8009614:	20000cf8 	.word	0x20000cf8
 8009618:	20000d0c 	.word	0x20000d0c
 800961c:	20000d20 	.word	0x20000d20
 8009620:	20000cd8 	.word	0x20000cd8
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8009624:	9b03      	ldr	r3, [sp, #12]
 8009626:	58e3      	ldr	r3, [r4, r3]
 8009628:	9307      	str	r3, [sp, #28]
 800962a:	33f0      	adds	r3, #240	; 0xf0
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	2b01      	cmp	r3, #1
 8009630:	d10c      	bne.n	800964c <LoRaMacProcess+0x3d0>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009632:	f001 fd51 	bl	800b0d8 <LoRaMacClassBIsPingExpected>
 8009636:	1e06      	subs	r6, r0, #0
 8009638:	d018      	beq.n	800966c <LoRaMacProcess+0x3f0>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800963a:	0028      	movs	r0, r5
 800963c:	f001 fc7e 	bl	800af3c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8009640:	0028      	movs	r0, r5
 8009642:	f001 fa6f 	bl	800ab24 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8009646:	2304      	movs	r3, #4
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8009648:	4abf      	ldr	r2, [pc, #764]	; (8009948 <LoRaMacProcess+0x6cc>)
 800964a:	54a3      	strb	r3, [r4, r2]
    macHdr.Value = payload[pktHeaderLen++];
 800964c:	783b      	ldrb	r3, [r7, #0]
 800964e:	0958      	lsrs	r0, r3, #5
 8009650:	3801      	subs	r0, #1
 8009652:	9307      	str	r3, [sp, #28]
    switch( macHdr.Bits.MType )
 8009654:	2806      	cmp	r0, #6
 8009656:	d900      	bls.n	800965a <LoRaMacProcess+0x3de>
 8009658:	e220      	b.n	8009a9c <LoRaMacProcess+0x820>
 800965a:	f7f6 fd69 	bl	8000130 <__gnu_thumb1_case_uhi>
 800965e:	0013      	.short	0x0013
 8009660:	009b021f 	.word	0x009b021f
 8009664:	0098021f 	.word	0x0098021f
 8009668:	020f021f 	.word	0x020f021f
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800966c:	f001 fd3e 	bl	800b0ec <LoRaMacClassBIsMulticastExpected>
 8009670:	2800      	cmp	r0, #0
 8009672:	d0eb      	beq.n	800964c <LoRaMacProcess+0x3d0>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009674:	0030      	movs	r0, r6
 8009676:	f001 fc67 	bl	800af48 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800967a:	0030      	movs	r0, r6
 800967c:	f001 fa64 	bl	800ab48 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8009680:	2305      	movs	r3, #5
 8009682:	e7e1      	b.n	8009648 <LoRaMacProcess+0x3cc>
            macMsgJoinAccept.BufSize = size;
 8009684:	466b      	mov	r3, sp
 8009686:	7c1e      	ldrb	r6, [r3, #16]
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8009688:	9b03      	ldr	r3, [sp, #12]
            macMsgJoinAccept.Buffer = payload;
 800968a:	ad16      	add	r5, sp, #88	; 0x58
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 800968c:	58e3      	ldr	r3, [r4, r3]
            macMsgJoinAccept.Buffer = payload;
 800968e:	9716      	str	r7, [sp, #88]	; 0x58
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8009690:	9304      	str	r3, [sp, #16]
 8009692:	23ea      	movs	r3, #234	; 0xea
 8009694:	9a04      	ldr	r2, [sp, #16]
            macMsgJoinAccept.BufSize = size;
 8009696:	712e      	strb	r6, [r5, #4]
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8009698:	005b      	lsls	r3, r3, #1
 800969a:	5cd7      	ldrb	r7, [r2, r3]
 800969c:	2f00      	cmp	r7, #0
 800969e:	d006      	beq.n	80096ae <LoRaMacProcess+0x432>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80096a0:	2101      	movs	r1, #1
 80096a2:	4aaa      	ldr	r2, [pc, #680]	; (800994c <LoRaMacProcess+0x6d0>)
 80096a4:	4baa      	ldr	r3, [pc, #680]	; (8009950 <LoRaMacProcess+0x6d4>)
 80096a6:	54d1      	strb	r1, [r2, r3]
                PrepareRxDoneAbort( );
 80096a8:	f7fe fbee 	bl	8007e88 <PrepareRxDoneAbort>
                return;
 80096ac:	e6ad      	b.n	800940a <LoRaMacProcess+0x18e>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 80096ae:	f7fe fb13 	bl	8007cd8 <SecureElementGetJoinEui>
 80096b2:	002a      	movs	r2, r5
 80096b4:	0001      	movs	r1, r0
 80096b6:	20ff      	movs	r0, #255	; 0xff
 80096b8:	f002 ffa4 	bl	800c604 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 80096bc:	2800      	cmp	r0, #0
 80096be:	d15e      	bne.n	800977e <LoRaMacProcess+0x502>
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 80096c0:	7aaa      	ldrb	r2, [r5, #10]
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80096c2:	7ae9      	ldrb	r1, [r5, #11]
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 80096c4:	9b03      	ldr	r3, [sp, #12]
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80096c6:	0409      	lsls	r1, r1, #16
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 80096c8:	0212      	lsls	r2, r2, #8
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 80096ca:	58e3      	ldr	r3, [r4, r3]
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80096cc:	430a      	orrs	r2, r1
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 80096ce:	7a69      	ldrb	r1, [r5, #9]
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80096d0:	430a      	orrs	r2, r1
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 80096d2:	0019      	movs	r1, r3
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80096d4:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 80096d6:	68ea      	ldr	r2, [r5, #12]
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 80096d8:	31ff      	adds	r1, #255	; 0xff
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 80096da:	64da      	str	r2, [r3, #76]	; 0x4c
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 80096dc:	7c2a      	ldrb	r2, [r5, #16]
 80096de:	0652      	lsls	r2, r2, #25
 80096e0:	0f52      	lsrs	r2, r2, #29
 80096e2:	768a      	strb	r2, [r1, #26]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80096e4:	2190      	movs	r1, #144	; 0x90
 80096e6:	7c2a      	ldrb	r2, [r5, #16]
 80096e8:	0049      	lsls	r1, r1, #1
 80096ea:	0712      	lsls	r2, r2, #28
 80096ec:	0f12      	lsrs	r2, r2, #28
 80096ee:	545a      	strb	r2, [r3, r1]
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80096f0:	3108      	adds	r1, #8
 80096f2:	545a      	strb	r2, [r3, r1]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 80096f4:	0019      	movs	r1, r3
 80096f6:	7c6a      	ldrb	r2, [r5, #17]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 80096f8:	31fc      	adds	r1, #252	; 0xfc
 80096fa:	2a00      	cmp	r2, #0
 80096fc:	d03d      	beq.n	800977a <LoRaMacProcess+0x4fe>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 80096fe:	60ca      	str	r2, [r1, #12]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 8009700:	22fa      	movs	r2, #250	; 0xfa
 8009702:	68c8      	ldr	r0, [r1, #12]
 8009704:	0092      	lsls	r2, r2, #2
 8009706:	4342      	muls	r2, r0
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8009708:	20fa      	movs	r0, #250	; 0xfa
 800970a:	0080      	lsls	r0, r0, #2
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 800970c:	60ca      	str	r2, [r1, #12]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800970e:	1812      	adds	r2, r2, r0
 8009710:	610a      	str	r2, [r1, #16]
                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 8009712:	22e9      	movs	r2, #233	; 0xe9
 8009714:	2500      	movs	r5, #0
 8009716:	0052      	lsls	r2, r2, #1
 8009718:	549d      	strb	r5, [r3, r2]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800971a:	a914      	add	r1, sp, #80	; 0x50
 800971c:	3aa1      	subs	r2, #161	; 0xa1
                applyCFList.Size = size - 17;
 800971e:	3e11      	subs	r6, #17
 8009720:	710e      	strb	r6, [r1, #4]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8009722:	a80e      	add	r0, sp, #56	; 0x38
 8009724:	3aff      	subs	r2, #255	; 0xff
 8009726:	1812      	adds	r2, r2, r0
                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 8009728:	7818      	ldrb	r0, [r3, #0]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800972a:	9214      	str	r2, [sp, #80]	; 0x50
                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 800972c:	f003 f99e 	bl	800ca6c <RegionApplyCFList>
                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 8009730:	9b03      	ldr	r3, [sp, #12]
 8009732:	2102      	movs	r1, #2
 8009734:	58e2      	ldr	r2, [r4, r3]
 8009736:	23ea      	movs	r3, #234	; 0xea
 8009738:	005b      	lsls	r3, r3, #1
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800973a:	0028      	movs	r0, r5
                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 800973c:	54d1      	strb	r1, [r2, r3]
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800973e:	f002 fbfd 	bl	800bf3c <LoRaMacConfirmQueueIsCmdActive>
 8009742:	42a8      	cmp	r0, r5
 8009744:	d003      	beq.n	800974e <LoRaMacProcess+0x4d2>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8009746:	0029      	movs	r1, r5
 8009748:	0028      	movs	r0, r5
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800974a:	f002 fba1 	bl	800be90 <LoRaMacConfirmQueueSetStatus>
    if( MacCtx.NodeAckRequested == true )
 800974e:	4c7f      	ldr	r4, [pc, #508]	; (800994c <LoRaMacProcess+0x6d0>)
 8009750:	4b80      	ldr	r3, [pc, #512]	; (8009954 <LoRaMacProcess+0x6d8>)
 8009752:	5ce3      	ldrb	r3, [r4, r3]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d100      	bne.n	800975a <LoRaMacProcess+0x4de>
 8009758:	e1a6      	b.n	8009aa8 <LoRaMacProcess+0x82c>
        if( MacCtx.McpsConfirm.AckReceived == true )
 800975a:	2388      	movs	r3, #136	; 0x88
 800975c:	00db      	lsls	r3, r3, #3
 800975e:	5ce3      	ldrb	r3, [r4, r3]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d002      	beq.n	800976a <LoRaMacProcess+0x4ee>
            OnAckTimeoutTimerEvent( NULL );
 8009764:	2000      	movs	r0, #0
 8009766:	f7fe fb61 	bl	8007e2c <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.MacDone = 1;
 800976a:	2320      	movs	r3, #32
 800976c:	4a7a      	ldr	r2, [pc, #488]	; (8009958 <LoRaMacProcess+0x6dc>)
 800976e:	5ca1      	ldrb	r1, [r4, r2]
 8009770:	430b      	orrs	r3, r1
 8009772:	54a3      	strb	r3, [r4, r2]
    UpdateRxSlotIdleState( );
 8009774:	f7fe faca 	bl	8007d0c <UpdateRxSlotIdleState>
 8009778:	e647      	b.n	800940a <LoRaMacProcess+0x18e>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 800977a:	2201      	movs	r2, #1
 800977c:	e7bf      	b.n	80096fe <LoRaMacProcess+0x482>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800977e:	0038      	movs	r0, r7
 8009780:	f002 fbdc 	bl	800bf3c <LoRaMacConfirmQueueIsCmdActive>
 8009784:	2800      	cmp	r0, #0
 8009786:	d0e2      	beq.n	800974e <LoRaMacProcess+0x4d2>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8009788:	0039      	movs	r1, r7
 800978a:	2007      	movs	r0, #7
 800978c:	e7dd      	b.n	800974a <LoRaMacProcess+0x4ce>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800978e:	2301      	movs	r3, #1
 8009790:	4a72      	ldr	r2, [pc, #456]	; (800995c <LoRaMacProcess+0x6e0>)
 8009792:	54a3      	strb	r3, [r4, r2]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009794:	222e      	movs	r2, #46	; 0x2e
 8009796:	4d6d      	ldr	r5, [pc, #436]	; (800994c <LoRaMacProcess+0x6d0>)
 8009798:	9b03      	ldr	r3, [sp, #12]
 800979a:	32ff      	adds	r2, #255	; 0xff
 800979c:	58eb      	ldr	r3, [r5, r3]
 800979e:	a911      	add	r1, sp, #68	; 0x44
 80097a0:	5c9a      	ldrb	r2, [r3, r2]
 80097a2:	708a      	strb	r2, [r1, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 80097a4:	2284      	movs	r2, #132	; 0x84
 80097a6:	00d2      	lsls	r2, r2, #3
 80097a8:	5caa      	ldrb	r2, [r5, r2]
 80097aa:	704a      	strb	r2, [r1, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 80097ac:	220d      	movs	r2, #13
 80097ae:	700a      	strb	r2, [r1, #0]
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 80097b0:	2240      	movs	r2, #64	; 0x40
 80097b2:	32ff      	adds	r2, #255	; 0xff
 80097b4:	5c9a      	ldrb	r2, [r3, r2]
 80097b6:	2a00      	cmp	r2, #0
 80097b8:	d001      	beq.n	80097be <LoRaMacProcess+0x542>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80097ba:	220e      	movs	r2, #14
 80097bc:	700a      	strb	r2, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80097be:	7818      	ldrb	r0, [r3, #0]
 80097c0:	f003 f924 	bl	800ca0c <RegionGetPhyParam>
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 80097c4:	9a04      	ldr	r2, [sp, #16]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80097c6:	9012      	str	r0, [sp, #72]	; 0x48
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 80097c8:	3a0d      	subs	r2, #13
 80097ca:	1c13      	adds	r3, r2, #0
 80097cc:	0412      	lsls	r2, r2, #16
 80097ce:	d500      	bpl.n	80097d2 <LoRaMacProcess+0x556>
 80097d0:	2300      	movs	r3, #0
 80097d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80097d4:	b21b      	sxth	r3, r3
 80097d6:	b212      	sxth	r2, r2
 80097d8:	4293      	cmp	r3, r2
 80097da:	dd00      	ble.n	80097de <LoRaMacProcess+0x562>
 80097dc:	e760      	b.n	80096a0 <LoRaMacProcess+0x424>
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 80097de:	22ff      	movs	r2, #255	; 0xff
            macMsgData.BufSize = size;
 80097e0:	9b04      	ldr	r3, [sp, #16]
            macMsgData.Buffer = payload;
 80097e2:	ac20      	add	r4, sp, #128	; 0x80
            macMsgData.BufSize = size;
 80097e4:	7123      	strb	r3, [r4, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 80097e6:	4b5e      	ldr	r3, [pc, #376]	; (8009960 <LoRaMacProcess+0x6e4>)
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 80097e8:	0020      	movs	r0, r4
            macMsgData.FRMPayload = MacCtx.RxPayload;
 80097ea:	9329      	str	r3, [sp, #164]	; 0xa4
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 80097ec:	ab2a      	add	r3, sp, #168	; 0xa8
            macMsgData.Buffer = payload;
 80097ee:	9720      	str	r7, [sp, #128]	; 0x80
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 80097f0:	701a      	strb	r2, [r3, #0]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 80097f2:	f003 f807 	bl	800c804 <LoRaMacParserData>
 80097f6:	2800      	cmp	r0, #0
 80097f8:	d000      	beq.n	80097fc <LoRaMacProcess+0x580>
 80097fa:	e751      	b.n	80096a0 <LoRaMacProcess+0x424>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 80097fc:	4b59      	ldr	r3, [pc, #356]	; (8009964 <LoRaMacProcess+0x6e8>)
 80097fe:	68a2      	ldr	r2, [r4, #8]
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8009800:	0020      	movs	r0, r4
 8009802:	a914      	add	r1, sp, #80	; 0x50
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8009804:	50ea      	str	r2, [r5, r3]
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8009806:	f7ff fd0f 	bl	8009228 <DetermineFrameType>
 800980a:	1e06      	subs	r6, r0, #0
 800980c:	d000      	beq.n	8009810 <LoRaMacProcess+0x594>
 800980e:	e747      	b.n	80096a0 <LoRaMacProcess+0x424>
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8009810:	9b03      	ldr	r3, [sp, #12]
 8009812:	68a1      	ldr	r1, [r4, #8]
 8009814:	58ea      	ldr	r2, [r5, r3]
 8009816:	0004      	movs	r4, r0
 8009818:	0013      	movs	r3, r2
            downLinkCounter = 0;
 800981a:	9013      	str	r0, [sp, #76]	; 0x4c
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800981c:	3354      	adds	r3, #84	; 0x54
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800981e:	6818      	ldr	r0, [r3, #0]
 8009820:	9004      	str	r0, [sp, #16]
 8009822:	4288      	cmp	r0, r1
 8009824:	d131      	bne.n	800988a <LoRaMacProcess+0x60e>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8009826:	1ed8      	subs	r0, r3, #3
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8009828:	7800      	ldrb	r0, [r0, #0]
 800982a:	2800      	cmp	r0, #0
 800982c:	d02d      	beq.n	800988a <LoRaMacProcess+0x60e>
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 800982e:	2328      	movs	r3, #40	; 0x28
 8009830:	4363      	muls	r3, r4
 8009832:	18d3      	adds	r3, r2, r3
 8009834:	0019      	movs	r1, r3
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 8009836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 8009838:	3152      	adds	r1, #82	; 0x52
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 800983a:	681b      	ldr	r3, [r3, #0]
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 800983c:	780c      	ldrb	r4, [r1, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 800983e:	9313      	str	r3, [sp, #76]	; 0x4c
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8009840:	0013      	movs	r3, r2
 8009842:	33f0      	adds	r3, #240	; 0xf0
 8009844:	781b      	ldrb	r3, [r3, #0]
                    multicast = 1;
 8009846:	2601      	movs	r6, #1
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8009848:	2b02      	cmp	r3, #2
 800984a:	d103      	bne.n	8009854 <LoRaMacProcess+0x5d8>
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800984c:	2103      	movs	r1, #3
 800984e:	4b3f      	ldr	r3, [pc, #252]	; (800994c <LoRaMacProcess+0x6d0>)
 8009850:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009852:	5419      	strb	r1, [r3, r0]
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8009854:	2315      	movs	r3, #21
 8009856:	a911      	add	r1, sp, #68	; 0x44
 8009858:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800985a:	7810      	ldrb	r0, [r2, #0]
 800985c:	f003 f8d6 	bl	800ca0c <RegionGetPhyParam>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 8009860:	4a3a      	ldr	r2, [pc, #232]	; (800994c <LoRaMacProcess+0x6d0>)
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009862:	9012      	str	r0, [sp, #72]	; 0x48
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 8009864:	b281      	uxth	r1, r0
 8009866:	9803      	ldr	r0, [sp, #12]
 8009868:	ab14      	add	r3, sp, #80	; 0x50
 800986a:	5812      	ldr	r2, [r2, r0]
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	920b      	str	r2, [sp, #44]	; 0x2c
 8009870:	22e9      	movs	r2, #233	; 0xe9
 8009872:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009874:	0052      	lsls	r2, r2, #1
 8009876:	5c85      	ldrb	r5, [r0, r2]
    switch( addrID )
 8009878:	4f35      	ldr	r7, [pc, #212]	; (8009950 <LoRaMacProcess+0x6d4>)
 800987a:	2c04      	cmp	r4, #4
 800987c:	d850      	bhi.n	8009920 <LoRaMacProcess+0x6a4>
 800987e:	0020      	movs	r0, r4
 8009880:	f7f6 fc42 	bl	8000108 <__gnu_thumb1_case_uqi>
 8009884:	42400a44 	.word	0x42400a44
 8009888:	38          	.byte	0x38
 8009889:	00          	.byte	0x00
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800988a:	3401      	adds	r4, #1
 800988c:	3328      	adds	r3, #40	; 0x28
 800988e:	2c04      	cmp	r4, #4
 8009890:	d1c5      	bne.n	800981e <LoRaMacProcess+0x5a2>
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8009892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009894:	9304      	str	r3, [sp, #16]
 8009896:	e7dd      	b.n	8009854 <LoRaMacProcess+0x5d8>
            *fCntID = MC_FCNT_DOWN_1;
 8009898:	2505      	movs	r5, #5
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800989a:	2256      	movs	r2, #86	; 0x56
 800989c:	ab0e      	add	r3, sp, #56	; 0x38
 800989e:	189b      	adds	r3, r3, r2
 80098a0:	881a      	ldrh	r2, [r3, #0]
 80098a2:	0028      	movs	r0, r5
 80098a4:	ab13      	add	r3, sp, #76	; 0x4c
 80098a6:	f002 fd13 	bl	800c2d0 <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80098aa:	2800      	cmp	r0, #0
 80098ac:	d03b      	beq.n	8009926 <LoRaMacProcess+0x6aa>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 80098ae:	2807      	cmp	r0, #7
 80098b0:	d130      	bne.n	8009914 <LoRaMacProcess+0x698>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 80098b2:	2308      	movs	r3, #8
 80098b4:	4a25      	ldr	r2, [pc, #148]	; (800994c <LoRaMacProcess+0x6d0>)
 80098b6:	55d3      	strb	r3, [r2, r7]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 80098b8:	0013      	movs	r3, r2
 80098ba:	9a03      	ldr	r2, [sp, #12]
 80098bc:	589b      	ldr	r3, [r3, r2]
 80098be:	22e9      	movs	r2, #233	; 0xe9
 80098c0:	0052      	lsls	r2, r2, #1
 80098c2:	5c9a      	ldrb	r2, [r3, r2]
 80098c4:	2a00      	cmp	r2, #0
 80098c6:	d10f      	bne.n	80098e8 <LoRaMacProcess+0x66c>
 80098c8:	9907      	ldr	r1, [sp, #28]
 80098ca:	321f      	adds	r2, #31
 80098cc:	4391      	bics	r1, r2
 80098ce:	000a      	movs	r2, r1
 80098d0:	29a0      	cmp	r1, #160	; 0xa0
 80098d2:	d109      	bne.n	80098e8 <LoRaMacProcess+0x66c>
 80098d4:	3239      	adds	r2, #57	; 0x39
 80098d6:	32ff      	adds	r2, #255	; 0xff
 80098d8:	5899      	ldr	r1, [r3, r2]
 80098da:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80098dc:	4291      	cmp	r1, r2
 80098de:	d103      	bne.n	80098e8 <LoRaMacProcess+0x66c>
                        MacCtx.NvmCtx->SrvAckRequested = true;
 80098e0:	22e0      	movs	r2, #224	; 0xe0
 80098e2:	2101      	movs	r1, #1
 80098e4:	0052      	lsls	r2, r2, #1
 80098e6:	5499      	strb	r1, [r3, r2]
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80098e8:	2386      	movs	r3, #134	; 0x86
 80098ea:	4a18      	ldr	r2, [pc, #96]	; (800994c <LoRaMacProcess+0x6d0>)
 80098ec:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80098ee:	00db      	lsls	r3, r3, #3
 80098f0:	50d1      	str	r1, [r2, r3]
                PrepareRxDoneAbort( );
 80098f2:	e6d9      	b.n	80096a8 <LoRaMacProcess+0x42c>
            if( lrWanVersion.Fields.Minor == 1 )
 80098f4:	2d01      	cmp	r5, #1
 80098f6:	d10b      	bne.n	8009910 <LoRaMacProcess+0x694>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d001      	beq.n	8009900 <LoRaMacProcess+0x684>
 80098fc:	2b03      	cmp	r3, #3
 80098fe:	d1cc      	bne.n	800989a <LoRaMacProcess+0x61e>
                    *fCntID = A_FCNT_DOWN;
 8009900:	2502      	movs	r5, #2
 8009902:	e7ca      	b.n	800989a <LoRaMacProcess+0x61e>
            *fCntID = MC_FCNT_DOWN_2;
 8009904:	2506      	movs	r5, #6
            break;
 8009906:	e7c8      	b.n	800989a <LoRaMacProcess+0x61e>
            *fCntID = MC_FCNT_DOWN_3;
 8009908:	2507      	movs	r5, #7
            break;
 800990a:	e7c6      	b.n	800989a <LoRaMacProcess+0x61e>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800990c:	2504      	movs	r5, #4
 800990e:	e7c4      	b.n	800989a <LoRaMacProcess+0x61e>
                *fCntID = FCNT_DOWN;
 8009910:	2503      	movs	r5, #3
 8009912:	e7c2      	b.n	800989a <LoRaMacProcess+0x61e>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8009914:	2808      	cmp	r0, #8
 8009916:	d103      	bne.n	8009920 <LoRaMacProcess+0x6a4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8009918:	220a      	movs	r2, #10
 800991a:	4b0c      	ldr	r3, [pc, #48]	; (800994c <LoRaMacProcess+0x6d0>)
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800991c:	55da      	strb	r2, [r3, r7]
 800991e:	e7e3      	b.n	80098e8 <LoRaMacProcess+0x66c>
 8009920:	2201      	movs	r2, #1
 8009922:	4b0a      	ldr	r3, [pc, #40]	; (800994c <LoRaMacProcess+0x6d0>)
 8009924:	e7fa      	b.n	800991c <LoRaMacProcess+0x6a0>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8009926:	ab20      	add	r3, sp, #128	; 0x80
 8009928:	9300      	str	r3, [sp, #0]
 800992a:	002a      	movs	r2, r5
 800992c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800992e:	0020      	movs	r0, r4
 8009930:	9904      	ldr	r1, [sp, #16]
 8009932:	f002 fdad 	bl	800c490 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8009936:	4b05      	ldr	r3, [pc, #20]	; (800994c <LoRaMacProcess+0x6d0>)
 8009938:	2800      	cmp	r0, #0
 800993a:	d015      	beq.n	8009968 <LoRaMacProcess+0x6ec>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800993c:	3802      	subs	r0, #2
 800993e:	1e42      	subs	r2, r0, #1
 8009940:	4190      	sbcs	r0, r2
 8009942:	300b      	adds	r0, #11
 8009944:	55d8      	strb	r0, [r3, r7]
 8009946:	e6af      	b.n	80096a8 <LoRaMacProcess+0x42c>
 8009948:	0000042d 	.word	0x0000042d
 800994c:	200008bc 	.word	0x200008bc
 8009950:	0000041d 	.word	0x0000041d
 8009954:	00000414 	.word	0x00000414
 8009958:	00000481 	.word	0x00000481
 800995c:	0000041c 	.word	0x0000041c
 8009960:	20000af4 	.word	0x20000af4
 8009964:	00000434 	.word	0x00000434
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8009968:	2154      	movs	r1, #84	; 0x54
            MacCtx.McpsIndication.Multicast = multicast;
 800996a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800996c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
            MacCtx.McpsIndication.Multicast = multicast;
 800996e:	549e      	strb	r6, [r3, r2]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8009970:	aa0e      	add	r2, sp, #56	; 0x38
 8009972:	1852      	adds	r2, r2, r1
 8009974:	7812      	ldrb	r2, [r2, #0]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009976:	55d8      	strb	r0, [r3, r7]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8009978:	06d1      	lsls	r1, r2, #27
 800997a:	0fc9      	lsrs	r1, r1, #31
 800997c:	5519      	strb	r1, [r3, r4]
            MacCtx.McpsIndication.Buffer = NULL;
 800997e:	9908      	ldr	r1, [sp, #32]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8009980:	9c13      	ldr	r4, [sp, #76]	; 0x4c
            MacCtx.McpsIndication.Buffer = NULL;
 8009982:	5058      	str	r0, [r3, r1]
            MacCtx.McpsIndication.BufferSize = 0;
 8009984:	2185      	movs	r1, #133	; 0x85
 8009986:	00c9      	lsls	r1, r1, #3
 8009988:	5458      	strb	r0, [r3, r1]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800998a:	3108      	adds	r1, #8
 800998c:	505c      	str	r4, [r3, r1]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800998e:	0692      	lsls	r2, r2, #26
 8009990:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009992:	0fd2      	lsrs	r2, r2, #31
 8009994:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009996:	499b      	ldr	r1, [pc, #620]	; (8009c04 <LoRaMacProcess+0x988>)
 8009998:	5458      	strb	r0, [r3, r1]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800999a:	3103      	adds	r1, #3
 800999c:	545a      	strb	r2, [r3, r1]
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800999e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099a0:	5c99      	ldrb	r1, [r3, r2]
 80099a2:	2901      	cmp	r1, #1
 80099a4:	d803      	bhi.n	80099ae <LoRaMacProcess+0x732>
                MacCtx.NvmCtx->AdrAckCounter = 0;
 80099a6:	9a03      	ldr	r2, [sp, #12]
 80099a8:	589b      	ldr	r3, [r3, r2]
 80099aa:	33f4      	adds	r3, #244	; 0xf4
 80099ac:	6018      	str	r0, [r3, #0]
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 80099ae:	2302      	movs	r3, #2
 80099b0:	4c95      	ldr	r4, [pc, #596]	; (8009c08 <LoRaMacProcess+0x98c>)
 80099b2:	ad20      	add	r5, sp, #128	; 0x80
            if( multicast == 1 )
 80099b4:	2e01      	cmp	r6, #1
 80099b6:	d015      	beq.n	80099e4 <LoRaMacProcess+0x768>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 80099b8:	9b03      	ldr	r3, [sp, #12]
 80099ba:	9807      	ldr	r0, [sp, #28]
 80099bc:	58e2      	ldr	r2, [r4, r3]
 80099be:	231f      	movs	r3, #31
 80099c0:	4398      	bics	r0, r3
 80099c2:	0003      	movs	r3, r0
 80099c4:	20e0      	movs	r0, #224	; 0xe0
 80099c6:	0040      	lsls	r0, r0, #1
 80099c8:	2ba0      	cmp	r3, #160	; 0xa0
 80099ca:	d124      	bne.n	8009a16 <LoRaMacProcess+0x79a>
                    MacCtx.NvmCtx->SrvAckRequested = true;
 80099cc:	3b9f      	subs	r3, #159	; 0x9f
 80099ce:	5413      	strb	r3, [r2, r0]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 80099d0:	33d2      	adds	r3, #210	; 0xd2
 80099d2:	33ff      	adds	r3, #255	; 0xff
 80099d4:	5cd3      	ldrb	r3, [r2, r3]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d103      	bne.n	80099e2 <LoRaMacProcess+0x766>
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 80099da:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80099dc:	33d9      	adds	r3, #217	; 0xd9
 80099de:	33ff      	adds	r3, #255	; 0xff
 80099e0:	50d0      	str	r0, [r2, r3]
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80099e2:	2301      	movs	r3, #1
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80099e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099e6:	54a3      	strb	r3, [r4, r2]
            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 80099e8:	4b88      	ldr	r3, [pc, #544]	; (8009c0c <LoRaMacProcess+0x990>)
 80099ea:	5ce2      	ldrb	r2, [r4, r3]
 80099ec:	7b2b      	ldrb	r3, [r5, #12]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80099ee:	2901      	cmp	r1, #1
 80099f0:	d805      	bhi.n	80099fe <LoRaMacProcess+0x782>
        if( request == MCPS_CONFIRMED )
 80099f2:	2a01      	cmp	r2, #1
 80099f4:	d101      	bne.n	80099fa <LoRaMacProcess+0x77e>
            if( fCtrl.Bits.Ack == 1 )
 80099f6:	069b      	lsls	r3, r3, #26
 80099f8:	d501      	bpl.n	80099fe <LoRaMacProcess+0x782>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80099fa:	f002 f983 	bl	800bd04 <LoRaMacCommandsRemoveStickyAnsCmds>
            switch( fType )
 80099fe:	ab14      	add	r3, sp, #80	; 0x50
 8009a00:	7818      	ldrb	r0, [r3, #0]
 8009a02:	2803      	cmp	r0, #3
 8009a04:	d835      	bhi.n	8009a72 <LoRaMacProcess+0x7f6>
 8009a06:	2749      	movs	r7, #73	; 0x49
 8009a08:	ab0e      	add	r3, sp, #56	; 0x38
 8009a0a:	4e81      	ldr	r6, [pc, #516]	; (8009c10 <LoRaMacProcess+0x994>)
 8009a0c:	18ff      	adds	r7, r7, r3
 8009a0e:	f7f6 fb7b 	bl	8000108 <__gnu_thumb1_case_uqi>
 8009a12:	1c05      	.short	0x1c05
 8009a14:	0c2b      	.short	0x0c2b
                    MacCtx.NvmCtx->SrvAckRequested = false;
 8009a16:	2300      	movs	r3, #0
 8009a18:	5413      	strb	r3, [r2, r0]
 8009a1a:	e7e3      	b.n	80099e4 <LoRaMacProcess+0x768>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 8009a1c:	7b29      	ldrb	r1, [r5, #12]
 8009a1e:	9a05      	ldr	r2, [sp, #20]
 8009a20:	0709      	lsls	r1, r1, #28
 8009a22:	0f09      	lsrs	r1, r1, #28
 8009a24:	a824      	add	r0, sp, #144	; 0x90
 8009a26:	f7fe fd25 	bl	8008474 <ProcessMacCommands.isra.0.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009a2a:	7ffb      	ldrb	r3, [r7, #31]
 8009a2c:	55a3      	strb	r3, [r4, r6]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8009a2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009a30:	9304      	str	r3, [sp, #16]
 8009a32:	9a04      	ldr	r2, [sp, #16]
 8009a34:	9b08      	ldr	r3, [sp, #32]
 8009a36:	50e2      	str	r2, [r4, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8009a38:	ab2a      	add	r3, sp, #168	; 0xa8
 8009a3a:	781a      	ldrb	r2, [r3, #0]
 8009a3c:	2385      	movs	r3, #133	; 0x85
 8009a3e:	00db      	lsls	r3, r3, #3
 8009a40:	54e2      	strb	r2, [r4, r3]
                    MacCtx.McpsIndication.RxData = true;
 8009a42:	2201      	movs	r2, #1
 8009a44:	4b73      	ldr	r3, [pc, #460]	; (8009c14 <LoRaMacProcess+0x998>)
 8009a46:	54e2      	strb	r2, [r4, r3]
                    break;
 8009a48:	e008      	b.n	8009a5c <LoRaMacProcess+0x7e0>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 8009a4a:	7b29      	ldrb	r1, [r5, #12]
 8009a4c:	9a05      	ldr	r2, [sp, #20]
 8009a4e:	0709      	lsls	r1, r1, #28
 8009a50:	0f09      	lsrs	r1, r1, #28
 8009a52:	a824      	add	r0, sp, #144	; 0x90
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 8009a54:	f7fe fd0e 	bl	8008474 <ProcessMacCommands.isra.0.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009a58:	7ffb      	ldrb	r3, [r7, #31]
 8009a5a:	55a3      	strb	r3, [r4, r6]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8009a5c:	2302      	movs	r3, #2
 8009a5e:	4a6e      	ldr	r2, [pc, #440]	; (8009c18 <LoRaMacProcess+0x99c>)
 8009a60:	5ca1      	ldrb	r1, [r4, r2]
 8009a62:	430b      	orrs	r3, r1
 8009a64:	54a3      	strb	r3, [r4, r2]
            break;
 8009a66:	e672      	b.n	800974e <LoRaMacProcess+0x4d2>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 8009a68:	ab2a      	add	r3, sp, #168	; 0xa8
 8009a6a:	7819      	ldrb	r1, [r3, #0]
 8009a6c:	9a05      	ldr	r2, [sp, #20]
 8009a6e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009a70:	e7f0      	b.n	8009a54 <LoRaMacProcess+0x7d8>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	55e3      	strb	r3, [r4, r7]
                    PrepareRxDoneAbort( );
 8009a76:	f7fe fa07 	bl	8007e88 <PrepareRxDoneAbort>
                    break;
 8009a7a:	e7ef      	b.n	8009a5c <LoRaMacProcess+0x7e0>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8009a7c:	9e04      	ldr	r6, [sp, #16]
 8009a7e:	4d67      	ldr	r5, [pc, #412]	; (8009c1c <LoRaMacProcess+0x9a0>)
 8009a80:	3e01      	subs	r6, #1
 8009a82:	b2b2      	uxth	r2, r6
 8009a84:	0028      	movs	r0, r5
 8009a86:	1c79      	adds	r1, r7, #1
 8009a88:	f004 ff9b 	bl	800e9c2 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	4a64      	ldr	r2, [pc, #400]	; (8009c20 <LoRaMacProcess+0x9a4>)
 8009a90:	52a3      	strh	r3, [r4, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8009a92:	4b64      	ldr	r3, [pc, #400]	; (8009c24 <LoRaMacProcess+0x9a8>)
 8009a94:	50e5      	str	r5, [r4, r3]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8009a96:	3304      	adds	r3, #4
 8009a98:	54e6      	strb	r6, [r4, r3]
 8009a9a:	e7df      	b.n	8009a5c <LoRaMacProcess+0x7e0>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	4b62      	ldr	r3, [pc, #392]	; (8009c28 <LoRaMacProcess+0x9ac>)
 8009aa0:	54e2      	strb	r2, [r4, r3]
            PrepareRxDoneAbort( );
 8009aa2:	f7fe f9f1 	bl	8007e88 <PrepareRxDoneAbort>
            break;
 8009aa6:	e652      	b.n	800974e <LoRaMacProcess+0x4d2>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8009aa8:	9b03      	ldr	r3, [sp, #12]
 8009aaa:	58e3      	ldr	r3, [r4, r3]
 8009aac:	33f0      	adds	r3, #240	; 0xf0
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	2b02      	cmp	r3, #2
 8009ab2:	d000      	beq.n	8009ab6 <LoRaMacProcess+0x83a>
 8009ab4:	e659      	b.n	800976a <LoRaMacProcess+0x4ee>
 8009ab6:	e655      	b.n	8009764 <LoRaMacProcess+0x4e8>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009ab8:	2704      	movs	r7, #4
 8009aba:	5d63      	ldrb	r3, [r4, r5]
 8009abc:	423b      	tst	r3, r7
 8009abe:	d012      	beq.n	8009ae6 <LoRaMacProcess+0x86a>
        if( ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 8009ac0:	2000      	movs	r0, #0
 8009ac2:	26d0      	movs	r6, #208	; 0xd0
 8009ac4:	f002 fa3a 	bl	800bf3c <LoRaMacConfirmQueueIsCmdActive>
 8009ac8:	00b6      	lsls	r6, r6, #2
 8009aca:	2800      	cmp	r0, #0
 8009acc:	d035      	beq.n	8009b3a <LoRaMacProcess+0x8be>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8009ace:	2000      	movs	r0, #0
 8009ad0:	f002 f9fa 	bl	800bec8 <LoRaMacConfirmQueueGetStatus>
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	d102      	bne.n	8009ade <LoRaMacProcess+0x862>
                MacCtx.ChannelsNbTransCounter = 0;
 8009ad8:	2382      	movs	r3, #130	; 0x82
 8009ada:	00db      	lsls	r3, r3, #3
 8009adc:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009ade:	2302      	movs	r3, #2
 8009ae0:	59a2      	ldr	r2, [r4, r6]
 8009ae2:	439a      	bics	r2, r3
 8009ae4:	51a2      	str	r2, [r4, r6]
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009ae6:	5d62      	ldrb	r2, [r4, r5]
 8009ae8:	07d3      	lsls	r3, r2, #31
 8009aea:	d400      	bmi.n	8009aee <LoRaMacProcess+0x872>
 8009aec:	e4e6      	b.n	80094bc <LoRaMacProcess+0x240>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8009aee:	4b47      	ldr	r3, [pc, #284]	; (8009c0c <LoRaMacProcess+0x990>)
 8009af0:	5ce3      	ldrb	r3, [r4, r3]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d001      	beq.n	8009afa <LoRaMacProcess+0x87e>
 8009af6:	2b03      	cmp	r3, #3
 8009af8:	d12a      	bne.n	8009b50 <LoRaMacProcess+0x8d4>
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 8009afa:	4b4c      	ldr	r3, [pc, #304]	; (8009c2c <LoRaMacProcess+0x9b0>)
    if( MacCtx.ChannelsNbTransCounter >=
 8009afc:	2082      	movs	r0, #130	; 0x82
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 8009afe:	58e3      	ldr	r3, [r4, r3]
    if( MacCtx.ChannelsNbTransCounter >=
 8009b00:	00c0      	lsls	r0, r0, #3
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 8009b02:	0019      	movs	r1, r3
 8009b04:	31ff      	adds	r1, #255	; 0xff
    if( MacCtx.ChannelsNbTransCounter >=
 8009b06:	5c20      	ldrb	r0, [r4, r0]
 8009b08:	7e49      	ldrb	r1, [r1, #25]
 8009b0a:	4288      	cmp	r0, r1
 8009b0c:	d209      	bcs.n	8009b22 <LoRaMacProcess+0x8a6>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009b0e:	0792      	lsls	r2, r2, #30
 8009b10:	d555      	bpl.n	8009bbe <LoRaMacProcess+0x942>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8009b12:	33f0      	adds	r3, #240	; 0xf0
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d003      	beq.n	8009b22 <LoRaMacProcess+0x8a6>
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 8009b1a:	4b45      	ldr	r3, [pc, #276]	; (8009c30 <LoRaMacProcess+0x9b4>)
 8009b1c:	5ce3      	ldrb	r3, [r4, r3]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d14d      	bne.n	8009bbe <LoRaMacProcess+0x942>
            TimerStop( &MacCtx.TxDelayedTimer );
 8009b22:	4844      	ldr	r0, [pc, #272]	; (8009c34 <LoRaMacProcess+0x9b8>)
 8009b24:	f004 fe56 	bl	800e7d4 <TimerStop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009b28:	22d0      	movs	r2, #208	; 0xd0
 8009b2a:	2320      	movs	r3, #32
 8009b2c:	0092      	lsls	r2, r2, #2
 8009b2e:	58a1      	ldr	r1, [r4, r2]
 8009b30:	4399      	bics	r1, r3
 8009b32:	50a1      	str	r1, [r4, r2]
            StopRetransmission( );
 8009b34:	f7fe f8fa 	bl	8007d2c <StopRetransmission>
 8009b38:	e4c0      	b.n	80094bc <LoRaMacProcess+0x240>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8009b3a:	0038      	movs	r0, r7
 8009b3c:	f002 f9fe 	bl	800bf3c <LoRaMacConfirmQueueIsCmdActive>
 8009b40:	2800      	cmp	r0, #0
 8009b42:	d1cc      	bne.n	8009ade <LoRaMacProcess+0x862>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8009b44:	2005      	movs	r0, #5
 8009b46:	f002 f9f9 	bl	800bf3c <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	d1c7      	bne.n	8009ade <LoRaMacProcess+0x862>
 8009b4e:	e7ca      	b.n	8009ae6 <LoRaMacProcess+0x86a>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d134      	bne.n	8009bbe <LoRaMacProcess+0x942>
            if( MacCtx.AckTimeoutRetry == true )
 8009b54:	4b38      	ldr	r3, [pc, #224]	; (8009c38 <LoRaMacProcess+0x9bc>)
 8009b56:	5ce1      	ldrb	r1, [r4, r3]
 8009b58:	2900      	cmp	r1, #0
 8009b5a:	d100      	bne.n	8009b5e <LoRaMacProcess+0x8e2>
 8009b5c:	e4ae      	b.n	80094bc <LoRaMacProcess+0x240>
    if( MacCtx.AckTimeoutRetriesCounter >=
 8009b5e:	4e37      	ldr	r6, [pc, #220]	; (8009c3c <LoRaMacProcess+0x9c0>)
        MacCtx.AckTimeoutRetries )
 8009b60:	4837      	ldr	r0, [pc, #220]	; (8009c40 <LoRaMacProcess+0x9c4>)
    if( MacCtx.AckTimeoutRetriesCounter >=
 8009b62:	5da3      	ldrb	r3, [r4, r6]
        MacCtx.AckTimeoutRetries )
 8009b64:	5c20      	ldrb	r0, [r4, r0]
 8009b66:	9604      	str	r6, [sp, #16]
    if( MacCtx.AckTimeoutRetriesCounter >=
 8009b68:	4283      	cmp	r3, r0
 8009b6a:	d205      	bcs.n	8009b78 <LoRaMacProcess+0x8fc>
    return false;
 8009b6c:	2100      	movs	r1, #0
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009b6e:	0792      	lsls	r2, r2, #30
 8009b70:	d502      	bpl.n	8009b78 <LoRaMacProcess+0x8fc>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8009b72:	2288      	movs	r2, #136	; 0x88
 8009b74:	00d2      	lsls	r2, r2, #3
 8009b76:	5ca1      	ldrb	r1, [r4, r2]
                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 8009b78:	27e9      	movs	r7, #233	; 0xe9
 8009b7a:	4e2c      	ldr	r6, [pc, #176]	; (8009c2c <LoRaMacProcess+0x9b0>)
 8009b7c:	007f      	lsls	r7, r7, #1
 8009b7e:	59a2      	ldr	r2, [r4, r6]
 8009b80:	5dd7      	ldrb	r7, [r2, r7]
 8009b82:	2f00      	cmp	r7, #0
 8009b84:	d13b      	bne.n	8009bfe <LoRaMacProcess+0x982>
                    if( stopRetransmission == false )
 8009b86:	2900      	cmp	r1, #0
 8009b88:	d123      	bne.n	8009bd2 <LoRaMacProcess+0x956>
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8009b8a:	4283      	cmp	r3, r0
 8009b8c:	d217      	bcs.n	8009bbe <LoRaMacProcess+0x942>
        MacCtx.AckTimeoutRetriesCounter++;
 8009b8e:	9904      	ldr	r1, [sp, #16]
 8009b90:	3301      	adds	r3, #1
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	5463      	strb	r3, [r4, r1]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8009b96:	07db      	lsls	r3, r3, #31
 8009b98:	d511      	bpl.n	8009bbe <LoRaMacProcess+0x942>
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8009b9a:	2322      	movs	r3, #34	; 0x22
 8009b9c:	a916      	add	r1, sp, #88	; 0x58
 8009b9e:	700b      	strb	r3, [r1, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8009ba0:	330b      	adds	r3, #11
 8009ba2:	33ff      	adds	r3, #255	; 0xff
 8009ba4:	5cd3      	ldrb	r3, [r2, r3]
 8009ba6:	708b      	strb	r3, [r1, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009ba8:	0013      	movs	r3, r2
 8009baa:	33f9      	adds	r3, #249	; 0xf9
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	704b      	strb	r3, [r1, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009bb0:	7810      	ldrb	r0, [r2, #0]
 8009bb2:	f002 ff2b 	bl	800ca0c <RegionGetPhyParam>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 8009bb6:	59a3      	ldr	r3, [r4, r6]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009bb8:	9020      	str	r0, [sp, #128]	; 0x80
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 8009bba:	33f9      	adds	r3, #249	; 0xf9
 8009bbc:	7018      	strb	r0, [r3, #0]
            MacCtx.MacFlags.Bits.MacDone = 0;
 8009bbe:	2220      	movs	r2, #32
            MacCtx.AckTimeoutRetry = false;
 8009bc0:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
 8009bc2:	5d63      	ldrb	r3, [r4, r5]
 8009bc4:	4393      	bics	r3, r2
 8009bc6:	5563      	strb	r3, [r4, r5]
            MacCtx.AckTimeoutRetry = false;
 8009bc8:	4b1b      	ldr	r3, [pc, #108]	; (8009c38 <LoRaMacProcess+0x9bc>)
 8009bca:	54e0      	strb	r0, [r4, r3]
            OnTxDelayedTimerEvent( NULL );
 8009bcc:	f7ff f97a 	bl	8008ec4 <OnTxDelayedTimerEvent>
 8009bd0:	e474      	b.n	80094bc <LoRaMacProcess+0x240>
    if( MacCtx.McpsConfirm.AckReceived == false )
 8009bd2:	2788      	movs	r7, #136	; 0x88
 8009bd4:	00ff      	lsls	r7, r7, #3
 8009bd6:	5de6      	ldrb	r6, [r4, r7]
 8009bd8:	2e00      	cmp	r6, #0
 8009bda:	d10b      	bne.n	8009bf4 <LoRaMacProcess+0x978>
        params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	a920      	add	r1, sp, #128	; 0x80
 8009be0:	710b      	strb	r3, [r1, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 8009be2:	4b18      	ldr	r3, [pc, #96]	; (8009c44 <LoRaMacProcess+0x9c8>)
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8009be4:	7810      	ldrb	r0, [r2, #0]
        params.NvmCtx = Contexts.RegionNvmCtx;
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	9320      	str	r3, [sp, #128]	; 0x80
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8009bea:	f002 ff22 	bl	800ca32 <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 8009bee:	4b16      	ldr	r3, [pc, #88]	; (8009c48 <LoRaMacProcess+0x9cc>)
        MacCtx.McpsConfirm.AckReceived = false;
 8009bf0:	55e6      	strb	r6, [r4, r7]
        MacCtx.NodeAckRequested = false;
 8009bf2:	54e6      	strb	r6, [r4, r3]
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8009bf4:	9b04      	ldr	r3, [sp, #16]
 8009bf6:	5ce2      	ldrb	r2, [r4, r3]
 8009bf8:	4b14      	ldr	r3, [pc, #80]	; (8009c4c <LoRaMacProcess+0x9d0>)
 8009bfa:	54e2      	strb	r2, [r4, r3]
        if( stopRetransmission == true )
 8009bfc:	e791      	b.n	8009b22 <LoRaMacProcess+0x8a6>
 8009bfe:	2900      	cmp	r1, #0
 8009c00:	d0dd      	beq.n	8009bbe <LoRaMacProcess+0x942>
 8009c02:	e78e      	b.n	8009b22 <LoRaMacProcess+0x8a6>
 8009c04:	0000043d 	.word	0x0000043d
 8009c08:	200008bc 	.word	0x200008bc
 8009c0c:	0000043c 	.word	0x0000043c
 8009c10:	0000041f 	.word	0x0000041f
 8009c14:	00000429 	.word	0x00000429
 8009c18:	00000481 	.word	0x00000481
 8009c1c:	20000af4 	.word	0x20000af4
 8009c20:	0000041c 	.word	0x0000041c
 8009c24:	00000424 	.word	0x00000424
 8009c28:	0000041d 	.word	0x0000041d
 8009c2c:	00000484 	.word	0x00000484
 8009c30:	0000042d 	.word	0x0000042d
 8009c34:	20000c24 	.word	0x20000c24
 8009c38:	00000413 	.word	0x00000413
 8009c3c:	00000412 	.word	0x00000412
 8009c40:	00000411 	.word	0x00000411
 8009c44:	2000161c 	.word	0x2000161c
 8009c48:	00000414 	.word	0x00000414
 8009c4c:	00000441 	.word	0x00000441

08009c50 <LoRaMacInitialization>:
    return 0;
}


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8009c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c52:	b091      	sub	sp, #68	; 0x44
 8009c54:	0007      	movs	r7, r0
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009c56:	2603      	movs	r6, #3
{
 8009c58:	9100      	str	r1, [sp, #0]
 8009c5a:	9201      	str	r2, [sp, #4]
    if( ( primitives == NULL ) ||
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d100      	bne.n	8009c62 <LoRaMacInitialization+0x12>
 8009c60:	e15e      	b.n	8009f20 <LoRaMacInitialization+0x2d0>
 8009c62:	2900      	cmp	r1, #0
 8009c64:	d100      	bne.n	8009c68 <LoRaMacInitialization+0x18>
 8009c66:	e15b      	b.n	8009f20 <LoRaMacInitialization+0x2d0>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8009c68:	6803      	ldr	r3, [r0, #0]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d100      	bne.n	8009c70 <LoRaMacInitialization+0x20>
 8009c6e:	e157      	b.n	8009f20 <LoRaMacInitialization+0x2d0>
 8009c70:	6843      	ldr	r3, [r0, #4]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d100      	bne.n	8009c78 <LoRaMacInitialization+0x28>
 8009c76:	e153      	b.n	8009f20 <LoRaMacInitialization+0x2d0>
        ( primitives->MacMcpsIndication == NULL ) ||
 8009c78:	6883      	ldr	r3, [r0, #8]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d100      	bne.n	8009c80 <LoRaMacInitialization+0x30>
 8009c7e:	e14f      	b.n	8009f20 <LoRaMacInitialization+0x2d0>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8009c80:	68c3      	ldr	r3, [r0, #12]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d100      	bne.n	8009c88 <LoRaMacInitialization+0x38>
 8009c86:	e14b      	b.n	8009f20 <LoRaMacInitialization+0x2d0>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8009c88:	0010      	movs	r0, r2
 8009c8a:	f002 feba 	bl	800ca02 <RegionIsActive>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8009c8e:	3606      	adds	r6, #6
    if( RegionIsActive( region ) == false )
 8009c90:	2800      	cmp	r0, #0
 8009c92:	d100      	bne.n	8009c96 <LoRaMacInitialization+0x46>
 8009c94:	e144      	b.n	8009f20 <LoRaMacInitialization+0x2d0>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 8009c96:	0038      	movs	r0, r7
 8009c98:	49c3      	ldr	r1, [pc, #780]	; (8009fa8 <LoRaMacInitialization+0x358>)
 8009c9a:	f002 f897 	bl	800bdcc <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 8009c9e:	22ee      	movs	r2, #238	; 0xee
 8009ca0:	4ec2      	ldr	r6, [pc, #776]	; (8009fac <LoRaMacInitialization+0x35c>)
 8009ca2:	2100      	movs	r1, #0
 8009ca4:	0030      	movs	r0, r6
 8009ca6:	0052      	lsls	r2, r2, #1
 8009ca8:	f004 fea0 	bl	800e9ec <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8009cac:	2291      	movs	r2, #145	; 0x91
 8009cae:	4cc0      	ldr	r4, [pc, #768]	; (8009fb0 <LoRaMacInitialization+0x360>)
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	0020      	movs	r0, r4
 8009cb4:	00d2      	lsls	r2, r2, #3
 8009cb6:	f004 fe99 	bl	800e9ec <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8009cba:	2001      	movs	r0, #1
 8009cbc:	4bbd      	ldr	r3, [pc, #756]	; (8009fb4 <LoRaMacInitialization+0x364>)
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.NvmCtx->Region = region;
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 8009cbe:	2100      	movs	r1, #0
    MacCtx.AckTimeoutRetriesCounter = 1;
 8009cc0:	54e0      	strb	r0, [r4, r3]
    MacCtx.AckTimeoutRetries = 1;
 8009cc2:	4bbd      	ldr	r3, [pc, #756]	; (8009fb8 <LoRaMacInitialization+0x368>)
    Version_t lrWanVersion;
    lrWanVersion.Fields.Major    = 1;
    lrWanVersion.Fields.Minor    = 0;
    lrWanVersion.Fields.Revision = 3;
    lrWanVersion.Fields.Rfu      = 0;
    MacCtx.NvmCtx->Version = lrWanVersion;
 8009cc4:	4abd      	ldr	r2, [pc, #756]	; (8009fbc <LoRaMacInitialization+0x36c>)
    MacCtx.AckTimeoutRetries = 1;
 8009cc6:	54e0      	strb	r0, [r4, r3]
    MacCtx.NvmCtx->Region = region;
 8009cc8:	9b01      	ldr	r3, [sp, #4]
    MacCtx.NvmCtx = &NvmMacCtx;
 8009cca:	4dbd      	ldr	r5, [pc, #756]	; (8009fc0 <LoRaMacInitialization+0x370>)
    MacCtx.NvmCtx->Region = region;
 8009ccc:	7033      	strb	r3, [r6, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 8009cce:	0033      	movs	r3, r6
 8009cd0:	33f0      	adds	r3, #240	; 0xf0
 8009cd2:	7019      	strb	r1, [r3, #0]
    MacCtx.NvmCtx->RepeaterSupport = false;
 8009cd4:	2340      	movs	r3, #64	; 0x40
 8009cd6:	33ff      	adds	r3, #255	; 0xff
 8009cd8:	54f1      	strb	r1, [r6, r3]
    MacCtx.NvmCtx->Version = lrWanVersion;
 8009cda:	3391      	adds	r3, #145	; 0x91
 8009cdc:	50f2      	str	r2, [r6, r3]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8009cde:	aa02      	add	r2, sp, #8
 8009ce0:	3bc2      	subs	r3, #194	; 0xc2
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009ce2:	0011      	movs	r1, r2
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8009ce4:	3bff      	subs	r3, #255	; 0xff
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009ce6:	9801      	ldr	r0, [sp, #4]
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8009ce8:	7013      	strb	r3, [r2, #0]
    MacCtx.NvmCtx = &NvmMacCtx;
 8009cea:	5166      	str	r6, [r4, r5]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009cec:	f002 fe8e 	bl	800ca0c <RegionGetPhyParam>
 8009cf0:	9003      	str	r0, [sp, #12]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 8009cf2:	1e42      	subs	r2, r0, #1
 8009cf4:	4190      	sbcs	r0, r2
 8009cf6:	223e      	movs	r2, #62	; 0x3e
 8009cf8:	5963      	ldr	r3, [r4, r5]
 8009cfa:	32ff      	adds	r2, #255	; 0xff
 8009cfc:	5498      	strb	r0, [r3, r2]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8009cfe:	3a34      	subs	r2, #52	; 0x34
 8009d00:	3aff      	subs	r2, #255	; 0xff
 8009d02:	ae02      	add	r6, sp, #8
 8009d04:	7032      	strb	r2, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d06:	0031      	movs	r1, r6
 8009d08:	7818      	ldrb	r0, [r3, #0]
 8009d0a:	f002 fe7f 	bl	800ca0c <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;

    getPhy.Attribute = PHY_DEF_TX_DR;
 8009d0e:	2206      	movs	r2, #6
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 8009d10:	5963      	ldr	r3, [r4, r5]
    getPhy.Attribute = PHY_DEF_TX_DR;
 8009d12:	ae02      	add	r6, sp, #8
 8009d14:	7032      	strb	r2, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d16:	0031      	movs	r1, r6
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 8009d18:	7118      	strb	r0, [r3, #4]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d1a:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d1c:	7818      	ldrb	r0, [r3, #0]
 8009d1e:	f002 fe75 	bl	800ca0c <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8009d22:	2210      	movs	r2, #16
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 8009d24:	5963      	ldr	r3, [r4, r5]
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8009d26:	ae02      	add	r6, sp, #8
 8009d28:	7032      	strb	r2, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d2a:	0031      	movs	r1, r6
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 8009d2c:	7158      	strb	r0, [r3, #5]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d2e:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d30:	7818      	ldrb	r0, [r3, #0]
 8009d32:	f002 fe6b 	bl	800ca0c <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8009d36:	2211      	movs	r2, #17
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8009d38:	5963      	ldr	r3, [r4, r5]
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8009d3a:	ae02      	add	r6, sp, #8
 8009d3c:	7032      	strb	r2, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d3e:	0031      	movs	r1, r6
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8009d40:	6118      	str	r0, [r3, #16]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d42:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d44:	7818      	ldrb	r0, [r3, #0]
 8009d46:	f002 fe61 	bl	800ca0c <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8009d4a:	2212      	movs	r2, #18
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8009d4c:	5963      	ldr	r3, [r4, r5]
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8009d4e:	ae02      	add	r6, sp, #8
 8009d50:	7032      	strb	r2, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d52:	0031      	movs	r1, r6
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8009d54:	6158      	str	r0, [r3, #20]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d56:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d58:	7818      	ldrb	r0, [r3, #0]
 8009d5a:	f002 fe57 	bl	800ca0c <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8009d5e:	2213      	movs	r2, #19
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8009d60:	5963      	ldr	r3, [r4, r5]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8009d62:	ae02      	add	r6, sp, #8
 8009d64:	7032      	strb	r2, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d66:	0031      	movs	r1, r6
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8009d68:	6198      	str	r0, [r3, #24]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8009d6a:	2614      	movs	r6, #20
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d6c:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d6e:	7818      	ldrb	r0, [r3, #0]
 8009d70:	f002 fe4c 	bl	800ca0c <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8009d74:	5963      	ldr	r3, [r4, r5]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8009d76:	aa02      	add	r2, sp, #8
 8009d78:	7016      	strb	r6, [r2, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d7a:	0011      	movs	r1, r2
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8009d7c:	61d8      	str	r0, [r3, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d7e:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d80:	7818      	ldrb	r0, [r3, #0]
 8009d82:	f002 fe43 	bl	800ca0c <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8009d86:	2217      	movs	r2, #23
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8009d88:	5963      	ldr	r3, [r4, r5]
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8009d8a:	a902      	add	r1, sp, #8
 8009d8c:	700a      	strb	r2, [r1, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8009d8e:	6218      	str	r0, [r3, #32]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d90:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d92:	7818      	ldrb	r0, [r3, #0]
 8009d94:	f002 fe3a 	bl	800ca0c <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8009d98:	5963      	ldr	r3, [r4, r5]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8009d9a:	a902      	add	r1, sp, #8
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8009d9c:	1d9a      	adds	r2, r3, #6
 8009d9e:	77d0      	strb	r0, [r2, #31]
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8009da0:	2218      	movs	r2, #24
 8009da2:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009da4:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009da6:	7818      	ldrb	r0, [r3, #0]
 8009da8:	f002 fe30 	bl	800ca0c <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8009dac:	2219      	movs	r2, #25
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8009dae:	5963      	ldr	r3, [r4, r5]
    getPhy.Attribute = PHY_DEF_RX2_DR;
 8009db0:	a902      	add	r1, sp, #8
 8009db2:	700a      	strb	r2, [r1, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8009db4:	6298      	str	r0, [r3, #40]	; 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8009db6:	6318      	str	r0, [r3, #48]	; 0x30
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009db8:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009dba:	7818      	ldrb	r0, [r3, #0]
 8009dbc:	f002 fe26 	bl	800ca0c <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8009dc0:	5963      	ldr	r3, [r4, r5]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009dc2:	9003      	str	r0, [sp, #12]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8009dc4:	001a      	movs	r2, r3
 8009dc6:	b2c0      	uxtb	r0, r0
 8009dc8:	322c      	adds	r2, #44	; 0x2c
 8009dca:	7010      	strb	r0, [r2, #0]
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8009dcc:	7210      	strb	r0, [r2, #8]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8009dce:	221e      	movs	r2, #30
 8009dd0:	a902      	add	r1, sp, #8
 8009dd2:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009dd4:	7818      	ldrb	r0, [r3, #0]
 8009dd6:	f002 fe19 	bl	800ca0c <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8009dda:	5963      	ldr	r3, [r4, r5]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8009ddc:	a902      	add	r1, sp, #8
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8009dde:	001a      	movs	r2, r3
 8009de0:	3238      	adds	r2, #56	; 0x38
 8009de2:	7010      	strb	r0, [r2, #0]
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8009de4:	221f      	movs	r2, #31
 8009de6:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009de8:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009dea:	7818      	ldrb	r0, [r3, #0]
 8009dec:	f002 fe0e 	bl	800ca0c <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8009df0:	5963      	ldr	r3, [r4, r5]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8009df2:	a902      	add	r1, sp, #8
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8009df4:	001a      	movs	r2, r3
 8009df6:	3239      	adds	r2, #57	; 0x39
 8009df8:	7010      	strb	r0, [r2, #0]
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8009dfa:	2220      	movs	r2, #32
 8009dfc:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009dfe:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009e00:	7818      	ldrb	r0, [r3, #0]
 8009e02:	f002 fe03 	bl	800ca0c <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8009e06:	2221      	movs	r2, #33	; 0x21
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 8009e08:	5963      	ldr	r3, [r4, r5]
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8009e0a:	a902      	add	r1, sp, #8
 8009e0c:	700a      	strb	r2, [r1, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 8009e0e:	63d8      	str	r0, [r3, #60]	; 0x3c
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009e10:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009e12:	7818      	ldrb	r0, [r3, #0]
 8009e14:	f002 fdfa 	bl	800ca0c <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8009e18:	220b      	movs	r2, #11
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 8009e1a:	5963      	ldr	r3, [r4, r5]
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8009e1c:	a902      	add	r1, sp, #8
 8009e1e:	700a      	strb	r2, [r1, #0]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 8009e20:	6418      	str	r0, [r3, #64]	; 0x40
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009e22:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009e24:	7818      	ldrb	r0, [r3, #0]
 8009e26:	f002 fdf1 	bl	800ca0c <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;
 8009e2a:	23fd      	movs	r3, #253	; 0xfd
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	52e0      	strh	r0, [r4, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8009e30:	230c      	movs	r3, #12
 8009e32:	aa02      	add	r2, sp, #8
 8009e34:	7013      	strb	r3, [r2, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009e36:	5963      	ldr	r3, [r4, r5]
 8009e38:	0011      	movs	r1, r2
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009e3a:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009e3c:	7818      	ldrb	r0, [r3, #0]
 8009e3e:	f002 fde5 	bl	800ca0c <RegionGetPhyParam>
    MacCtx.AdrAckDelay = phyParam.Value;
 8009e42:	4b60      	ldr	r3, [pc, #384]	; (8009fc4 <LoRaMacInitialization+0x374>)
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009e44:	9003      	str	r0, [sp, #12]
    MacCtx.AdrAckDelay = phyParam.Value;
 8009e46:	52e0      	strh	r0, [r4, r3]

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 8009e48:	2001      	movs	r0, #1
 8009e4a:	5963      	ldr	r3, [r4, r5]
 8009e4c:	1d5a      	adds	r2, r3, #5
 8009e4e:	77d0      	strb	r0, [r2, #31]
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 20;
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 8009e50:	2206      	movs	r2, #6
 8009e52:	731a      	strb	r2, [r3, #12]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 8009e54:	001a      	movs	r2, r3
 8009e56:	32fc      	adds	r2, #252	; 0xfc
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 20;
 8009e58:	609e      	str	r6, [r3, #8]
    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 8009e5a:	6016      	str	r6, [r2, #0]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 8009e5c:	001e      	movs	r6, r3
 8009e5e:	36ff      	adds	r6, #255	; 0xff
 8009e60:	0031      	movs	r1, r6
 8009e62:	2606      	movs	r6, #6
 8009e64:	704e      	strb	r6, [r1, #1]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 8009e66:	691e      	ldr	r6, [r3, #16]
 8009e68:	6096      	str	r6, [r2, #8]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 8009e6a:	695e      	ldr	r6, [r3, #20]
 8009e6c:	60d6      	str	r6, [r2, #12]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 8009e6e:	699e      	ldr	r6, [r3, #24]
 8009e70:	6116      	str	r6, [r2, #16]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 8009e72:	69de      	ldr	r6, [r3, #28]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 8009e74:	6a1b      	ldr	r3, [r3, #32]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 8009e76:	6156      	str	r6, [r2, #20]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 8009e78:	6193      	str	r3, [r2, #24]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 8009e7a:	7648      	strb	r0, [r1, #25]
 8009e7c:	0006      	movs	r6, r0

    ResetMacParameters( );
 8009e7e:	f7fe f887 	bl	8007f90 <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 8009e82:	5963      	ldr	r3, [r4, r5]

    MacCtx.MacPrimitives = primitives;
    MacCtx.MacCallbacks = callbacks;
    MacCtx.MacFlags.Value = 0;
 8009e84:	2100      	movs	r1, #0
    MacCtx.NvmCtx->PublicNetwork = true;
 8009e86:	001a      	movs	r2, r3
 8009e88:	32f1      	adds	r2, #241	; 0xf1
 8009e8a:	7016      	strb	r6, [r2, #0]
    MacCtx.MacPrimitives = primitives;
 8009e8c:	22d1      	movs	r2, #209	; 0xd1
    MacCtx.NvmCtx->PublicNetwork = true;
 8009e8e:	0030      	movs	r0, r6
    MacCtx.MacPrimitives = primitives;
 8009e90:	0092      	lsls	r2, r2, #2
    MacCtx.MacCallbacks = callbacks;
 8009e92:	9e00      	ldr	r6, [sp, #0]
    MacCtx.MacPrimitives = primitives;
 8009e94:	50a7      	str	r7, [r4, r2]
    MacCtx.MacCallbacks = callbacks;
 8009e96:	3204      	adds	r2, #4
 8009e98:	50a6      	str	r6, [r4, r2]
    MacCtx.MacFlags.Value = 0;
 8009e9a:	4a4b      	ldr	r2, [pc, #300]	; (8009fc8 <LoRaMacInitialization+0x378>)
 8009e9c:	54a1      	strb	r1, [r4, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 8009e9e:	3a42      	subs	r2, #66	; 0x42
 8009ea0:	3aff      	subs	r2, #255	; 0xff
 8009ea2:	50a0      	str	r0, [r4, r2]

    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 8009ea4:	3a7d      	subs	r2, #125	; 0x7d
 8009ea6:	3aff      	subs	r2, #255	; 0xff
 8009ea8:	5099      	str	r1, [r3, r2]
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 8009eaa:	3204      	adds	r2, #4
 8009eac:	5099      	str	r1, [r3, r2]

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8009eae:	4847      	ldr	r0, [pc, #284]	; (8009fcc <LoRaMacInitialization+0x37c>)
 8009eb0:	4947      	ldr	r1, [pc, #284]	; (8009fd0 <LoRaMacInitialization+0x380>)
 8009eb2:	f004 fc0f 	bl	800e6d4 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8009eb6:	4947      	ldr	r1, [pc, #284]	; (8009fd4 <LoRaMacInitialization+0x384>)
 8009eb8:	4847      	ldr	r0, [pc, #284]	; (8009fd8 <LoRaMacInitialization+0x388>)
 8009eba:	f004 fc0b 	bl	800e6d4 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8009ebe:	4947      	ldr	r1, [pc, #284]	; (8009fdc <LoRaMacInitialization+0x38c>)
 8009ec0:	4847      	ldr	r0, [pc, #284]	; (8009fe0 <LoRaMacInitialization+0x390>)
 8009ec2:	f004 fc07 	bl	800e6d4 <TimerInit>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8009ec6:	4947      	ldr	r1, [pc, #284]	; (8009fe4 <LoRaMacInitialization+0x394>)
 8009ec8:	4847      	ldr	r0, [pc, #284]	; (8009fe8 <LoRaMacInitialization+0x398>)
 8009eca:	f004 fc03 	bl	800e6d4 <TimerInit>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = TimerGetCurrentTime( );
 8009ece:	5966      	ldr	r6, [r4, r5]
 8009ed0:	f004 fcbd 	bl	800e84e <TimerGetCurrentTime>
 8009ed4:	23e6      	movs	r3, #230	; 0xe6
 8009ed6:	005b      	lsls	r3, r3, #1
 8009ed8:	50f0      	str	r0, [r6, r3]

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8009eda:	4a44      	ldr	r2, [pc, #272]	; (8009fec <LoRaMacInitialization+0x39c>)
 8009edc:	3381      	adds	r3, #129	; 0x81
 8009ede:	33ff      	adds	r3, #255	; 0xff
 8009ee0:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8009ee2:	4a43      	ldr	r2, [pc, #268]	; (8009ff0 <LoRaMacInitialization+0x3a0>)
 8009ee4:	3308      	adds	r3, #8
 8009ee6:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8009ee8:	4a42      	ldr	r2, [pc, #264]	; (8009ff4 <LoRaMacInitialization+0x3a4>)
 8009eea:	3308      	adds	r3, #8
 8009eec:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8009eee:	4a42      	ldr	r2, [pc, #264]	; (8009ff8 <LoRaMacInitialization+0x3a8>)
 8009ef0:	3b0c      	subs	r3, #12
 8009ef2:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
    Radio.Init( &MacCtx.RadioEvents );
 8009ef4:	4f41      	ldr	r7, [pc, #260]	; (8009ffc <LoRaMacInitialization+0x3ac>)
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8009ef6:	4a42      	ldr	r2, [pc, #264]	; (800a000 <LoRaMacInitialization+0x3b0>)
 8009ef8:	3308      	adds	r3, #8
 8009efa:	50e2      	str	r2, [r4, r3]
    Radio.Init( &MacCtx.RadioEvents );
 8009efc:	68ba      	ldr	r2, [r7, #8]
 8009efe:	4841      	ldr	r0, [pc, #260]	; (800a004 <LoRaMacInitialization+0x3b4>)
 8009f00:	9201      	str	r2, [sp, #4]
 8009f02:	4790      	blx	r2

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_INIT;
 8009f04:	2300      	movs	r3, #0
 8009f06:	a906      	add	r1, sp, #24
 8009f08:	710b      	strb	r3, [r1, #4]
    params.NvmCtx = NULL;
 8009f0a:	9306      	str	r3, [sp, #24]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8009f0c:	5963      	ldr	r3, [r4, r5]
 8009f0e:	7818      	ldrb	r0, [r3, #0]
 8009f10:	f002 fd8f 	bl	800ca32 <RegionInitDefaults>

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 8009f14:	483c      	ldr	r0, [pc, #240]	; (800a008 <LoRaMacInitialization+0x3b8>)
 8009f16:	f7fd fd25 	bl	8007964 <SecureElementInit>
 8009f1a:	2800      	cmp	r0, #0
 8009f1c:	d003      	beq.n	8009f26 <LoRaMacInitialization+0x2d6>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8009f1e:	2611      	movs	r6, #17
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );

    return LORAMAC_STATUS_OK;
}
 8009f20:	0030      	movs	r0, r6
 8009f22:	b011      	add	sp, #68	; 0x44
 8009f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 8009f26:	4839      	ldr	r0, [pc, #228]	; (800a00c <LoRaMacInitialization+0x3bc>)
 8009f28:	f002 f97c 	bl	800c224 <LoRaMacCryptoInit>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	d1f6      	bne.n	8009f1e <LoRaMacInitialization+0x2ce>
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 8009f30:	4837      	ldr	r0, [pc, #220]	; (800a010 <LoRaMacInitialization+0x3c0>)
 8009f32:	f001 fe31 	bl	800bb98 <LoRaMacCommandsInit>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009f36:	2613      	movs	r6, #19
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	d1f1      	bne.n	8009f20 <LoRaMacInitialization+0x2d0>
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8009f3c:	5960      	ldr	r0, [r4, r5]
 8009f3e:	3050      	adds	r0, #80	; 0x50
 8009f40:	f002 fa04 	bl	800c34c <LoRaMacCryptoSetMulticastReference>
 8009f44:	1e06      	subs	r6, r0, #0
 8009f46:	d1ea      	bne.n	8009f1e <LoRaMacInitialization+0x2ce>
    srand1( Radio.Random( ) );
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	9301      	str	r3, [sp, #4]
 8009f4c:	4798      	blx	r3
 8009f4e:	f004 fd27 	bl	800e9a0 <srand1>
    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 8009f52:	5963      	ldr	r3, [r4, r5]
 8009f54:	33f1      	adds	r3, #241	; 0xf1
 8009f56:	7818      	ldrb	r0, [r3, #0]
 8009f58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f5a:	9301      	str	r3, [sp, #4]
 8009f5c:	4798      	blx	r3
    Radio.Sleep( );
 8009f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f60:	9301      	str	r3, [sp, #4]
 8009f62:	4798      	blx	r3
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 8009f64:	9b00      	ldr	r3, [sp, #0]
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 8009f66:	a904      	add	r1, sp, #16
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 8009f68:	685b      	ldr	r3, [r3, #4]
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 8009f6a:	a808      	add	r0, sp, #32
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 8009f6c:	9301      	str	r3, [sp, #4]
 8009f6e:	9304      	str	r3, [sp, #16]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 8009f70:	9b00      	ldr	r3, [sp, #0]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	9300      	str	r3, [sp, #0]
 8009f76:	9305      	str	r3, [sp, #20]
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8009f78:	4b26      	ldr	r3, [pc, #152]	; (800a014 <LoRaMacInitialization+0x3c4>)
 8009f7a:	9308      	str	r3, [sp, #32]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8009f7c:	4b26      	ldr	r3, [pc, #152]	; (800a018 <LoRaMacInitialization+0x3c8>)
 8009f7e:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8009f80:	4b26      	ldr	r3, [pc, #152]	; (800a01c <LoRaMacInitialization+0x3cc>)
 8009f82:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8009f84:	4b26      	ldr	r3, [pc, #152]	; (800a020 <LoRaMacInitialization+0x3d0>)
 8009f86:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 8009f88:	5963      	ldr	r3, [r4, r5]
 8009f8a:	001a      	movs	r2, r3
 8009f8c:	324c      	adds	r2, #76	; 0x4c
 8009f8e:	920c      	str	r2, [sp, #48]	; 0x30
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 8009f90:	32ac      	adds	r2, #172	; 0xac
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 8009f92:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 8009f94:	920e      	str	r2, [sp, #56]	; 0x38
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 8009f96:	3350      	adds	r3, #80	; 0x50
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 8009f98:	4a22      	ldr	r2, [pc, #136]	; (800a024 <LoRaMacInitialization+0x3d4>)
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 8009f9a:	930f      	str	r3, [sp, #60]	; 0x3c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 8009f9c:	f000 ff82 	bl	800aea4 <LoRaMacClassBInit>
    MacCtx.AllowRequests = requestState;
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	4b21      	ldr	r3, [pc, #132]	; (800a028 <LoRaMacInitialization+0x3d8>)
 8009fa4:	54e2      	strb	r2, [r4, r3]
    return LORAMAC_STATUS_OK;
 8009fa6:	e7bb      	b.n	8009f20 <LoRaMacInitialization+0x2d0>
 8009fa8:	08007de5 	.word	0x08007de5
 8009fac:	200006e0 	.word	0x200006e0
 8009fb0:	200008bc 	.word	0x200008bc
 8009fb4:	00000412 	.word	0x00000412
 8009fb8:	00000411 	.word	0x00000411
 8009fbc:	01000300 	.word	0x01000300
 8009fc0:	00000484 	.word	0x00000484
 8009fc4:	000003f6 	.word	0x000003f6
 8009fc8:	00000481 	.word	0x00000481
 8009fcc:	20000c24 	.word	0x20000c24
 8009fd0:	08008ec5 	.word	0x08008ec5
 8009fd4:	080083a9 	.word	0x080083a9
 8009fd8:	20000c3c 	.word	0x20000c3c
 8009fdc:	08008409 	.word	0x08008409
 8009fe0:	20000c54 	.word	0x20000c54
 8009fe4:	08007e2d 	.word	0x08007e2d
 8009fe8:	20000cb4 	.word	0x20000cb4
 8009fec:	08008165 	.word	0x08008165
 8009ff0:	080080fd 	.word	0x080080fd
 8009ff4:	08007ce1 	.word	0x08007ce1
 8009ff8:	080080b1 	.word	0x080080b1
 8009ffc:	0801074c 	.word	0x0801074c
 800a000:	08008065 	.word	0x08008065
 800a004:	20000c08 	.word	0x20000c08
 800a008:	08007dc7 	.word	0x08007dc7
 800a00c:	08007dbd 	.word	0x08007dbd
 800a010:	08007dd1 	.word	0x08007dd1
 800a014:	20000d20 	.word	0x20000d20
 800a018:	20000cd8 	.word	0x20000cd8
 800a01c:	20000d0c 	.word	0x20000d0c
 800a020:	20000d3d 	.word	0x20000d3d
 800a024:	08007ddb 	.word	0x08007ddb
 800a028:	00000482 	.word	0x00000482

0800a02c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 800a02c:	23d0      	movs	r3, #208	; 0xd0
 800a02e:	2000      	movs	r0, #0
 800a030:	4a01      	ldr	r2, [pc, #4]	; (800a038 <LoRaMacStart+0xc>)
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	50d0      	str	r0, [r2, r3]
    return LORAMAC_STATUS_OK;
}
 800a036:	4770      	bx	lr
 800a038:	200008bc 	.word	0x200008bc

0800a03c <LoRaMacQueryTxPossible>:
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800a03c:	4a2a      	ldr	r2, [pc, #168]	; (800a0e8 <LoRaMacQueryTxPossible+0xac>)
 800a03e:	4b2b      	ldr	r3, [pc, #172]	; (800a0ec <LoRaMacQueryTxPossible+0xb0>)
{
 800a040:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800a042:	58d3      	ldr	r3, [r2, r3]
{
 800a044:	b089      	sub	sp, #36	; 0x24
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800a046:	001a      	movs	r2, r3
{
 800a048:	0005      	movs	r5, r0
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800a04a:	4668      	mov	r0, sp
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800a04c:	32f4      	adds	r2, #244	; 0xf4
 800a04e:	6816      	ldr	r6, [r2, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
    size_t macCmdsSize = 0;
 800a050:	2700      	movs	r7, #0
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800a052:	9601      	str	r6, [sp, #4]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800a054:	795a      	ldrb	r2, [r3, #5]
{
 800a056:	000c      	movs	r4, r1
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800a058:	7082      	strb	r2, [r0, #2]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800a05a:	466a      	mov	r2, sp
 800a05c:	7918      	ldrb	r0, [r3, #4]
 800a05e:	3203      	adds	r2, #3
 800a060:	7010      	strb	r0, [r2, #0]
    size_t macCmdsSize = 0;
 800a062:	9702      	str	r7, [sp, #8]

    if( txInfo == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a064:	2003      	movs	r0, #3
    if( txInfo == NULL )
 800a066:	42b9      	cmp	r1, r7
 800a068:	d036      	beq.n	800a0d8 <LoRaMacQueryTxPossible+0x9c>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 800a06a:	21e8      	movs	r1, #232	; 0xe8
 800a06c:	a803      	add	r0, sp, #12
    adrNext.UpdateChanMask = false;
 800a06e:	7107      	strb	r7, [r0, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800a070:	001f      	movs	r7, r3
    adrNext.Version = MacCtx.NvmCtx->Version;
 800a072:	0049      	lsls	r1, r1, #1
 800a074:	5859      	ldr	r1, [r3, r1]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800a076:	37f2      	adds	r7, #242	; 0xf2
    adrNext.Version = MacCtx.NvmCtx->Version;
 800a078:	9103      	str	r1, [sp, #12]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800a07a:	783f      	ldrb	r7, [r7, #0]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800a07c:	6086      	str	r6, [r0, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800a07e:	26fd      	movs	r6, #253	; 0xfd
 800a080:	4919      	ldr	r1, [pc, #100]	; (800a0e8 <LoRaMacQueryTxPossible+0xac>)
 800a082:	00b6      	lsls	r6, r6, #2
 800a084:	5989      	ldr	r1, [r1, r6]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800a086:	7147      	strb	r7, [r0, #5]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800a088:	9106      	str	r1, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800a08a:	0019      	movs	r1, r3
 800a08c:	31f8      	adds	r1, #248	; 0xf8
 800a08e:	8809      	ldrh	r1, [r1, #0]
 800a090:	ba49      	rev16	r1, r1
 800a092:	8201      	strh	r1, [r0, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a094:	2196      	movs	r1, #150	; 0x96
 800a096:	0049      	lsls	r1, r1, #1
 800a098:	5c59      	ldrb	r1, [r3, r1]
 800a09a:	7481      	strb	r1, [r0, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800a09c:	4669      	mov	r1, sp
    adrNext.Region = MacCtx.NvmCtx->Region;
 800a09e:	781b      	ldrb	r3, [r3, #0]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800a0a0:	3102      	adds	r1, #2
    adrNext.Region = MacCtx.NvmCtx->Region;
 800a0a2:	74c3      	strb	r3, [r0, #19]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800a0a4:	ab01      	add	r3, sp, #4
 800a0a6:	f000 fcc9 	bl	800aa3c <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800a0aa:	466b      	mov	r3, sp
 800a0ac:	2002      	movs	r0, #2
 800a0ae:	5618      	ldrsb	r0, [r3, r0]
 800a0b0:	f7fd fe9e 	bl	8007df0 <GetMaxAppPayloadWithoutFOptsLength>
 800a0b4:	7060      	strb	r0, [r4, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a0b6:	a802      	add	r0, sp, #8
 800a0b8:	f001 fe40 	bl	800bd3c <LoRaMacCommandsGetSizeSerializedCmds>
 800a0bc:	2800      	cmp	r0, #0
 800a0be:	d111      	bne.n	800a0e4 <LoRaMacQueryTxPossible+0xa8>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800a0c0:	9b02      	ldr	r3, [sp, #8]
 800a0c2:	2b0f      	cmp	r3, #15
 800a0c4:	d80a      	bhi.n	800a0dc <LoRaMacQueryTxPossible+0xa0>
 800a0c6:	7862      	ldrb	r2, [r4, #1]
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d807      	bhi.n	800a0dc <LoRaMacQueryTxPossible+0xa0>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800a0cc:	1ad1      	subs	r1, r2, r3

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800a0ce:	18ed      	adds	r5, r5, r3
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800a0d0:	7021      	strb	r1, [r4, #0]
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800a0d2:	42aa      	cmp	r2, r5
 800a0d4:	d200      	bcs.n	800a0d8 <LoRaMacQueryTxPossible+0x9c>
        {
            return LORAMAC_STATUS_OK;
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 800a0d6:	3008      	adds	r0, #8
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800a0d8:	b009      	add	sp, #36	; 0x24
 800a0da:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800a0dc:	2300      	movs	r3, #0
        return LORAMAC_STATUS_LENGTH_ERROR;
 800a0de:	2008      	movs	r0, #8
        txInfo->MaxPossibleApplicationDataSize = 0;
 800a0e0:	7023      	strb	r3, [r4, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800a0e2:	e7f9      	b.n	800a0d8 <LoRaMacQueryTxPossible+0x9c>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a0e4:	2013      	movs	r0, #19
 800a0e6:	e7f7      	b.n	800a0d8 <LoRaMacQueryTxPossible+0x9c>
 800a0e8:	200008bc 	.word	0x200008bc
 800a0ec:	00000484 	.word	0x00000484

0800a0f0 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 800a0f0:	b513      	push	{r0, r1, r4, lr}
 800a0f2:	0004      	movs	r4, r0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a0f4:	2003      	movs	r0, #3
    if( mibGet == NULL )
 800a0f6:	2c00      	cmp	r4, #0
 800a0f8:	d026      	beq.n	800a148 <LoRaMacMibGetRequestConfirm+0x58>
    }

    switch( mibGet->Type )
 800a0fa:	7820      	ldrb	r0, [r4, #0]
 800a0fc:	2834      	cmp	r0, #52	; 0x34
 800a0fe:	d900      	bls.n	800a102 <LoRaMacMibGetRequestConfirm+0x12>
 800a100:	e0cc      	b.n	800a29c <LoRaMacMibGetRequestConfirm+0x1ac>
 800a102:	f7f6 f801 	bl	8000108 <__gnu_thumb1_case_uqi>
 800a106:	221b      	.short	0x221b
 800a108:	38302d29 	.word	0x38302d29
 800a10c:	cbcbcb3e 	.word	0xcbcbcb3e
 800a110:	cbcbcbcb 	.word	0xcbcbcbcb
 800a114:	cbcbcbcb 	.word	0xcbcbcbcb
 800a118:	cbcbcbcb 	.word	0xcbcbcbcb
 800a11c:	cbcbcbcb 	.word	0xcbcbcbcb
 800a120:	43cbcbcb 	.word	0x43cbcbcb
 800a124:	60594e48 	.word	0x60594e48
 800a128:	74766e68 	.word	0x74766e68
 800a12c:	8a847e78 	.word	0x8a847e78
 800a130:	a19c9690 	.word	0xa19c9690
 800a134:	b6b0a6ab 	.word	0xb6b0a6ab
 800a138:	c6bc      	.short	0xc6bc
 800a13a:	c3          	.byte	0xc3
 800a13b:	00          	.byte	0x00
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 800a13c:	4a59      	ldr	r2, [pc, #356]	; (800a2a4 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800a13e:	4b5a      	ldr	r3, [pc, #360]	; (800a2a8 <LoRaMacMibGetRequestConfirm+0x1b8>)
 800a140:	58d3      	ldr	r3, [r2, r3]
 800a142:	33f0      	adds	r3, #240	; 0xf0
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800a148:	bd16      	pop	{r1, r2, r4, pc}
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 800a14a:	4b57      	ldr	r3, [pc, #348]	; (800a2a8 <LoRaMacMibGetRequestConfirm+0x1b8>)
 800a14c:	4a55      	ldr	r2, [pc, #340]	; (800a2a4 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800a14e:	58d2      	ldr	r2, [r2, r3]
 800a150:	23ea      	movs	r3, #234	; 0xea
 800a152:	005b      	lsls	r3, r3, #1
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800a154:	5cd3      	ldrb	r3, [r2, r3]
 800a156:	e00b      	b.n	800a170 <LoRaMacMibGetRequestConfirm+0x80>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800a158:	f7fd fda8 	bl	8007cac <SecureElementGetDevEui>
            mibGet->Param.Contexts = GetCtxs( );
 800a15c:	6060      	str	r0, [r4, #4]
 800a15e:	e008      	b.n	800a172 <LoRaMacMibGetRequestConfirm+0x82>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800a160:	f7fd fdba 	bl	8007cd8 <SecureElementGetJoinEui>
 800a164:	e7fa      	b.n	800a15c <LoRaMacMibGetRequestConfirm+0x6c>
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 800a166:	4a4f      	ldr	r2, [pc, #316]	; (800a2a4 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800a168:	4b4f      	ldr	r3, [pc, #316]	; (800a2a8 <LoRaMacMibGetRequestConfirm+0x1b8>)
 800a16a:	58d3      	ldr	r3, [r2, r3]
 800a16c:	33f2      	adds	r3, #242	; 0xf2
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a172:	2000      	movs	r0, #0
            break;
 800a174:	e7e8      	b.n	800a148 <LoRaMacMibGetRequestConfirm+0x58>
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 800a176:	4a4b      	ldr	r2, [pc, #300]	; (800a2a4 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800a178:	4b4b      	ldr	r3, [pc, #300]	; (800a2a8 <LoRaMacMibGetRequestConfirm+0x1b8>)
 800a17a:	58d3      	ldr	r3, [r2, r3]
 800a17c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 800a17e:	6063      	str	r3, [r4, #4]
 800a180:	e7f7      	b.n	800a172 <LoRaMacMibGetRequestConfirm+0x82>
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 800a182:	4a48      	ldr	r2, [pc, #288]	; (800a2a4 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800a184:	4b48      	ldr	r3, [pc, #288]	; (800a2a8 <LoRaMacMibGetRequestConfirm+0x1b8>)
 800a186:	58d3      	ldr	r3, [r2, r3]
 800a188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a18a:	e7f8      	b.n	800a17e <LoRaMacMibGetRequestConfirm+0x8e>
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 800a18c:	4a45      	ldr	r2, [pc, #276]	; (800a2a4 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800a18e:	4b46      	ldr	r3, [pc, #280]	; (800a2a8 <LoRaMacMibGetRequestConfirm+0x1b8>)
 800a190:	58d3      	ldr	r3, [r2, r3]
 800a192:	33f1      	adds	r3, #241	; 0xf1
 800a194:	e7eb      	b.n	800a16e <LoRaMacMibGetRequestConfirm+0x7e>
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800a196:	4b44      	ldr	r3, [pc, #272]	; (800a2a8 <LoRaMacMibGetRequestConfirm+0x1b8>)
 800a198:	4a42      	ldr	r2, [pc, #264]	; (800a2a4 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800a19a:	58d2      	ldr	r2, [r2, r3]
 800a19c:	2340      	movs	r3, #64	; 0x40
 800a19e:	33ff      	adds	r3, #255	; 0xff
 800a1a0:	e7d8      	b.n	800a154 <LoRaMacMibGetRequestConfirm+0x64>
            getPhy.Attribute = PHY_CHANNELS;
 800a1a2:	231d      	movs	r3, #29
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800a1a4:	466a      	mov	r2, sp
 800a1a6:	7013      	strb	r3, [r2, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a1a8:	4a3e      	ldr	r2, [pc, #248]	; (800a2a4 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800a1aa:	4b3f      	ldr	r3, [pc, #252]	; (800a2a8 <LoRaMacMibGetRequestConfirm+0x1b8>)
 800a1ac:	4669      	mov	r1, sp
 800a1ae:	58d3      	ldr	r3, [r2, r3]
 800a1b0:	7818      	ldrb	r0, [r3, #0]
 800a1b2:	f002 fc2b 	bl	800ca0c <RegionGetPhyParam>
 800a1b6:	e7d1      	b.n	800a15c <LoRaMacMibGetRequestConfirm+0x6c>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 800a1b8:	4a3a      	ldr	r2, [pc, #232]	; (800a2a4 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800a1ba:	4b3b      	ldr	r3, [pc, #236]	; (800a2a8 <LoRaMacMibGetRequestConfirm+0x1b8>)
 800a1bc:	3404      	adds	r4, #4
 800a1be:	58d3      	ldr	r3, [r2, r3]
 800a1c0:	331d      	adds	r3, #29
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 800a1c2:	33ff      	adds	r3, #255	; 0xff
 800a1c4:	e004      	b.n	800a1d0 <LoRaMacMibGetRequestConfirm+0xe0>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 800a1c6:	4a37      	ldr	r2, [pc, #220]	; (800a2a4 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800a1c8:	4b37      	ldr	r3, [pc, #220]	; (800a2a8 <LoRaMacMibGetRequestConfirm+0x1b8>)
 800a1ca:	3404      	adds	r4, #4
 800a1cc:	58d3      	ldr	r3, [r2, r3]
 800a1ce:	3328      	adds	r3, #40	; 0x28
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 800a1d0:	cb06      	ldmia	r3!, {r1, r2}
 800a1d2:	c406      	stmia	r4!, {r1, r2}
            break;
 800a1d4:	e7cd      	b.n	800a172 <LoRaMacMibGetRequestConfirm+0x82>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 800a1d6:	4a33      	ldr	r2, [pc, #204]	; (800a2a4 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800a1d8:	4b33      	ldr	r3, [pc, #204]	; (800a2a8 <LoRaMacMibGetRequestConfirm+0x1b8>)
 800a1da:	3404      	adds	r4, #4
 800a1dc:	58d3      	ldr	r3, [r2, r3]
 800a1de:	3325      	adds	r3, #37	; 0x25
 800a1e0:	e7ef      	b.n	800a1c2 <LoRaMacMibGetRequestConfirm+0xd2>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 800a1e2:	4a30      	ldr	r2, [pc, #192]	; (800a2a4 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800a1e4:	4b30      	ldr	r3, [pc, #192]	; (800a2a8 <LoRaMacMibGetRequestConfirm+0x1b8>)
 800a1e6:	3404      	adds	r4, #4
 800a1e8:	58d3      	ldr	r3, [r2, r3]
 800a1ea:	3330      	adds	r3, #48	; 0x30
 800a1ec:	e7f0      	b.n	800a1d0 <LoRaMacMibGetRequestConfirm+0xe0>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800a1ee:	231b      	movs	r3, #27
 800a1f0:	e7d8      	b.n	800a1a4 <LoRaMacMibGetRequestConfirm+0xb4>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800a1f2:	231a      	movs	r3, #26
 800a1f4:	e7d6      	b.n	800a1a4 <LoRaMacMibGetRequestConfirm+0xb4>
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800a1f6:	4a2b      	ldr	r2, [pc, #172]	; (800a2a4 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800a1f8:	4b2b      	ldr	r3, [pc, #172]	; (800a2a8 <LoRaMacMibGetRequestConfirm+0x1b8>)
 800a1fa:	58d3      	ldr	r3, [r2, r3]
 800a1fc:	33ff      	adds	r3, #255	; 0xff
 800a1fe:	7e5b      	ldrb	r3, [r3, #25]
 800a200:	e7b6      	b.n	800a170 <LoRaMacMibGetRequestConfirm+0x80>
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 800a202:	4a28      	ldr	r2, [pc, #160]	; (800a2a4 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800a204:	4b28      	ldr	r3, [pc, #160]	; (800a2a8 <LoRaMacMibGetRequestConfirm+0x1b8>)
 800a206:	58d3      	ldr	r3, [r2, r3]
 800a208:	33fc      	adds	r3, #252	; 0xfc
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	e7b7      	b.n	800a17e <LoRaMacMibGetRequestConfirm+0x8e>
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 800a20e:	4a25      	ldr	r2, [pc, #148]	; (800a2a4 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800a210:	4b25      	ldr	r3, [pc, #148]	; (800a2a8 <LoRaMacMibGetRequestConfirm+0x1b8>)
 800a212:	58d3      	ldr	r3, [r2, r3]
 800a214:	33fc      	adds	r3, #252	; 0xfc
 800a216:	68db      	ldr	r3, [r3, #12]
 800a218:	e7b1      	b.n	800a17e <LoRaMacMibGetRequestConfirm+0x8e>
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 800a21a:	4a22      	ldr	r2, [pc, #136]	; (800a2a4 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800a21c:	4b22      	ldr	r3, [pc, #136]	; (800a2a8 <LoRaMacMibGetRequestConfirm+0x1b8>)
 800a21e:	58d3      	ldr	r3, [r2, r3]
 800a220:	33fc      	adds	r3, #252	; 0xfc
 800a222:	691b      	ldr	r3, [r3, #16]
 800a224:	e7ab      	b.n	800a17e <LoRaMacMibGetRequestConfirm+0x8e>
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 800a226:	4a1f      	ldr	r2, [pc, #124]	; (800a2a4 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800a228:	4b1f      	ldr	r3, [pc, #124]	; (800a2a8 <LoRaMacMibGetRequestConfirm+0x1b8>)
 800a22a:	58d3      	ldr	r3, [r2, r3]
 800a22c:	33fc      	adds	r3, #252	; 0xfc
 800a22e:	695b      	ldr	r3, [r3, #20]
 800a230:	e7a5      	b.n	800a17e <LoRaMacMibGetRequestConfirm+0x8e>
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 800a232:	4a1c      	ldr	r2, [pc, #112]	; (800a2a4 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800a234:	4b1c      	ldr	r3, [pc, #112]	; (800a2a8 <LoRaMacMibGetRequestConfirm+0x1b8>)
 800a236:	58d3      	ldr	r3, [r2, r3]
 800a238:	33fc      	adds	r3, #252	; 0xfc
 800a23a:	699b      	ldr	r3, [r3, #24]
 800a23c:	e79f      	b.n	800a17e <LoRaMacMibGetRequestConfirm+0x8e>
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800a23e:	4a19      	ldr	r2, [pc, #100]	; (800a2a4 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800a240:	4b19      	ldr	r3, [pc, #100]	; (800a2a8 <LoRaMacMibGetRequestConfirm+0x1b8>)
 800a242:	58d3      	ldr	r3, [r2, r3]
 800a244:	795b      	ldrb	r3, [r3, #5]
 800a246:	e793      	b.n	800a170 <LoRaMacMibGetRequestConfirm+0x80>
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800a248:	4a16      	ldr	r2, [pc, #88]	; (800a2a4 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800a24a:	4b17      	ldr	r3, [pc, #92]	; (800a2a8 <LoRaMacMibGetRequestConfirm+0x1b8>)
 800a24c:	58d3      	ldr	r3, [r2, r3]
 800a24e:	33f9      	adds	r3, #249	; 0xf9
 800a250:	e78d      	b.n	800a16e <LoRaMacMibGetRequestConfirm+0x7e>
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800a252:	4a14      	ldr	r2, [pc, #80]	; (800a2a4 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800a254:	4b14      	ldr	r3, [pc, #80]	; (800a2a8 <LoRaMacMibGetRequestConfirm+0x1b8>)
 800a256:	58d3      	ldr	r3, [r2, r3]
 800a258:	791b      	ldrb	r3, [r3, #4]
 800a25a:	e789      	b.n	800a170 <LoRaMacMibGetRequestConfirm+0x80>
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800a25c:	4a11      	ldr	r2, [pc, #68]	; (800a2a4 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800a25e:	4b12      	ldr	r3, [pc, #72]	; (800a2a8 <LoRaMacMibGetRequestConfirm+0x1b8>)
 800a260:	58d3      	ldr	r3, [r2, r3]
 800a262:	33f8      	adds	r3, #248	; 0xf8
 800a264:	e783      	b.n	800a16e <LoRaMacMibGetRequestConfirm+0x7e>
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 800a266:	4a0f      	ldr	r2, [pc, #60]	; (800a2a4 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800a268:	4b0f      	ldr	r3, [pc, #60]	; (800a2a8 <LoRaMacMibGetRequestConfirm+0x1b8>)
 800a26a:	58d3      	ldr	r3, [r2, r3]
 800a26c:	33fc      	adds	r3, #252	; 0xfc
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	e785      	b.n	800a17e <LoRaMacMibGetRequestConfirm+0x8e>
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 800a272:	4a0c      	ldr	r2, [pc, #48]	; (800a2a4 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800a274:	4b0c      	ldr	r3, [pc, #48]	; (800a2a8 <LoRaMacMibGetRequestConfirm+0x1b8>)
 800a276:	58d3      	ldr	r3, [r2, r3]
 800a278:	33ff      	adds	r3, #255	; 0xff
 800a27a:	785b      	ldrb	r3, [r3, #1]
 800a27c:	e778      	b.n	800a170 <LoRaMacMibGetRequestConfirm+0x80>
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800a27e:	4a09      	ldr	r2, [pc, #36]	; (800a2a4 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800a280:	4b09      	ldr	r3, [pc, #36]	; (800a2a8 <LoRaMacMibGetRequestConfirm+0x1b8>)
 800a282:	58d3      	ldr	r3, [r2, r3]
 800a284:	33fc      	adds	r3, #252	; 0xfc
 800a286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800a288:	6063      	str	r3, [r4, #4]
 800a28a:	e772      	b.n	800a172 <LoRaMacMibGetRequestConfirm+0x82>
            mibGet->Param.Contexts = GetCtxs( );
 800a28c:	f7fe ff48 	bl	8009120 <GetCtxs>
 800a290:	e764      	b.n	800a15c <LoRaMacMibGetRequestConfirm+0x6c>
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800a292:	4a04      	ldr	r2, [pc, #16]	; (800a2a4 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800a294:	4b04      	ldr	r3, [pc, #16]	; (800a2a8 <LoRaMacMibGetRequestConfirm+0x1b8>)
 800a296:	58d3      	ldr	r3, [r2, r3]
 800a298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a29a:	e7f5      	b.n	800a288 <LoRaMacMibGetRequestConfirm+0x198>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800a29c:	0020      	movs	r0, r4
 800a29e:	f000 ff95 	bl	800b1cc <LoRaMacClassBMibGetRequestConfirm>
            break;
 800a2a2:	e751      	b.n	800a148 <LoRaMacMibGetRequestConfirm+0x58>
 800a2a4:	200008bc 	.word	0x200008bc
 800a2a8:	00000484 	.word	0x00000484

0800a2ac <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800a2ac:	b570      	push	{r4, r5, r6, lr}
 800a2ae:	0004      	movs	r4, r0
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a2b0:	2503      	movs	r5, #3
{
 800a2b2:	b088      	sub	sp, #32
    if( mibSet == NULL )
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	d079      	beq.n	800a3ac <LoRaMacMibSetRequestConfirm+0x100>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800a2b8:	23d0      	movs	r3, #208	; 0xd0
 800a2ba:	4e93      	ldr	r6, [pc, #588]	; (800a508 <LoRaMacMibSetRequestConfirm+0x25c>)
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	58f3      	ldr	r3, [r6, r3]
    {
        return LORAMAC_STATUS_BUSY;
 800a2c0:	3d02      	subs	r5, #2
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800a2c2:	079b      	lsls	r3, r3, #30
 800a2c4:	d472      	bmi.n	800a3ac <LoRaMacMibSetRequestConfirm+0x100>
    }

    switch( mibSet->Type )
 800a2c6:	7800      	ldrb	r0, [r0, #0]
 800a2c8:	2835      	cmp	r0, #53	; 0x35
 800a2ca:	d900      	bls.n	800a2ce <LoRaMacMibSetRequestConfirm+0x22>
 800a2cc:	e225      	b.n	800a71a <LoRaMacMibSetRequestConfirm+0x46e>
 800a2ce:	f7f5 ff2f 	bl	8000130 <__gnu_thumb1_case_uhi>
 800a2d2:	0036      	.short	0x0036
 800a2d4:	0045003b 	.word	0x0045003b
 800a2d8:	00540050 	.word	0x00540050
 800a2dc:	005f005a 	.word	0x005f005a
 800a2e0:	00700064 	.word	0x00700064
 800a2e4:	007a0075 	.word	0x007a0075
 800a2e8:	0084007f 	.word	0x0084007f
 800a2ec:	008e0089 	.word	0x008e0089
 800a2f0:	00980093 	.word	0x00980093
 800a2f4:	00a2009d 	.word	0x00a2009d
 800a2f8:	00ac00a7 	.word	0x00ac00a7
 800a2fc:	00b600b1 	.word	0x00b600b1
 800a300:	00c000bb 	.word	0x00c000bb
 800a304:	00ca00c5 	.word	0x00ca00c5
 800a308:	00d500cf 	.word	0x00d500cf
 800a30c:	00e500db 	.word	0x00e500db
 800a310:	00ec0224 	.word	0x00ec0224
 800a314:	01210105 	.word	0x01210105
 800a318:	017e015b 	.word	0x017e015b
 800a31c:	01830170 	.word	0x01830170
 800a320:	0193018d 	.word	0x0193018d
 800a324:	019f0199 	.word	0x019f0199
 800a328:	01ab01a5 	.word	0x01ab01a5
 800a32c:	01e401bd 	.word	0x01e401bd
 800a330:	01f601d2 	.word	0x01f601d2
 800a334:	020401fd 	.word	0x020401fd
 800a338:	020f020a 	.word	0x020f020a
 800a33c:	0216      	.short	0x0216
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800a33e:	7920      	ldrb	r0, [r4, #4]
 800a340:	f7fd ff70 	bl	8008224 <SwitchClass>
            }
            break;
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800a344:	0005      	movs	r5, r0
            break;
 800a346:	e00f      	b.n	800a368 <LoRaMacMibSetRequestConfirm+0xbc>
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800a348:	7923      	ldrb	r3, [r4, #4]
 800a34a:	2b02      	cmp	r3, #2
 800a34c:	d00b      	beq.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 800a34e:	4a6f      	ldr	r2, [pc, #444]	; (800a50c <LoRaMacMibSetRequestConfirm+0x260>)
 800a350:	58b1      	ldr	r1, [r6, r2]
 800a352:	22ea      	movs	r2, #234	; 0xea
 800a354:	0052      	lsls	r2, r2, #1
 800a356:	548b      	strb	r3, [r1, r2]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a358:	2500      	movs	r5, #0
            break;
 800a35a:	e005      	b.n	800a368 <LoRaMacMibSetRequestConfirm+0xbc>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800a35c:	6860      	ldr	r0, [r4, #4]
 800a35e:	f7fd fc93 	bl	8007c88 <SecureElementSetDevEui>
 800a362:	2800      	cmp	r0, #0
 800a364:	d0f8      	beq.n	800a358 <LoRaMacMibSetRequestConfirm+0xac>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a366:	2503      	movs	r5, #3
        }
    }
    EventRegionNvmCtxChanged( );
 800a368:	f7fd fd23 	bl	8007db2 <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 800a36c:	f7fd fd1c 	bl	8007da8 <EventMacNvmCtxChanged>
    return status;
 800a370:	e01c      	b.n	800a3ac <LoRaMacMibSetRequestConfirm+0x100>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800a372:	6860      	ldr	r0, [r4, #4]
 800a374:	f7fd fc9e 	bl	8007cb4 <SecureElementSetJoinEui>
 800a378:	e7f3      	b.n	800a362 <LoRaMacMibSetRequestConfirm+0xb6>
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 800a37a:	4b64      	ldr	r3, [pc, #400]	; (800a50c <LoRaMacMibSetRequestConfirm+0x260>)
 800a37c:	7922      	ldrb	r2, [r4, #4]
 800a37e:	58f3      	ldr	r3, [r6, r3]
 800a380:	33f2      	adds	r3, #242	; 0xf2
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 800a382:	701a      	strb	r2, [r3, #0]
 800a384:	e7e8      	b.n	800a358 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 800a386:	4b61      	ldr	r3, [pc, #388]	; (800a50c <LoRaMacMibSetRequestConfirm+0x260>)
 800a388:	6862      	ldr	r2, [r4, #4]
 800a38a:	58f3      	ldr	r3, [r6, r3]
 800a38c:	649a      	str	r2, [r3, #72]	; 0x48
 800a38e:	e7e3      	b.n	800a358 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 800a390:	4b5e      	ldr	r3, [pc, #376]	; (800a50c <LoRaMacMibSetRequestConfirm+0x260>)
 800a392:	6862      	ldr	r2, [r4, #4]
 800a394:	58f3      	ldr	r3, [r6, r3]
 800a396:	64da      	str	r2, [r3, #76]	; 0x4c
 800a398:	e7de      	b.n	800a358 <LoRaMacMibSetRequestConfirm+0xac>
            if( mibSet->Param.GenAppKey != NULL )
 800a39a:	6861      	ldr	r1, [r4, #4]
 800a39c:	2900      	cmp	r1, #0
 800a39e:	d0e2      	beq.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( GEN_APP_KEY, mibSet->Param.GenAppKey ) )
 800a3a0:	2001      	movs	r0, #1
 800a3a2:	f002 f91b 	bl	800c5dc <LoRaMacCryptoSetKey>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a3a6:	2511      	movs	r5, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( GEN_APP_KEY, mibSet->Param.GenAppKey ) )
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	d0d5      	beq.n	800a358 <LoRaMacMibSetRequestConfirm+0xac>
}
 800a3ac:	0028      	movs	r0, r5
 800a3ae:	b008      	add	sp, #32
 800a3b0:	bd70      	pop	{r4, r5, r6, pc}
            if( mibSet->Param.AppKey != NULL )
 800a3b2:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800a3b4:	2000      	movs	r0, #0
            if( mibSet->Param.AppKey != NULL )
 800a3b6:	2900      	cmp	r1, #0
 800a3b8:	d1f3      	bne.n	800a3a2 <LoRaMacMibSetRequestConfirm+0xf6>
 800a3ba:	e7d4      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.NwkKey != NULL )
 800a3bc:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800a3be:	2002      	movs	r0, #2
            if( mibSet->Param.NwkKey != NULL )
 800a3c0:	2900      	cmp	r1, #0
 800a3c2:	d1ee      	bne.n	800a3a2 <LoRaMacMibSetRequestConfirm+0xf6>
 800a3c4:	e7cf      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.JSIntKey != NULL )
 800a3c6:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
 800a3c8:	2003      	movs	r0, #3
            if( mibSet->Param.JSIntKey != NULL )
 800a3ca:	2900      	cmp	r1, #0
 800a3cc:	d1e9      	bne.n	800a3a2 <LoRaMacMibSetRequestConfirm+0xf6>
 800a3ce:	e7ca      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.JSEncKey != NULL )
 800a3d0:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
 800a3d2:	2004      	movs	r0, #4
            if( mibSet->Param.JSEncKey != NULL )
 800a3d4:	2900      	cmp	r1, #0
 800a3d6:	d1e4      	bne.n	800a3a2 <LoRaMacMibSetRequestConfirm+0xf6>
 800a3d8:	e7c5      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.FNwkSIntKey != NULL )
 800a3da:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
 800a3dc:	2005      	movs	r0, #5
            if( mibSet->Param.FNwkSIntKey != NULL )
 800a3de:	2900      	cmp	r1, #0
 800a3e0:	d1df      	bne.n	800a3a2 <LoRaMacMibSetRequestConfirm+0xf6>
 800a3e2:	e7c0      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.SNwkSIntKey != NULL )
 800a3e4:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
 800a3e6:	2006      	movs	r0, #6
            if( mibSet->Param.SNwkSIntKey != NULL )
 800a3e8:	2900      	cmp	r1, #0
 800a3ea:	d1da      	bne.n	800a3a2 <LoRaMacMibSetRequestConfirm+0xf6>
 800a3ec:	e7bb      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.NwkSEncKey != NULL )
 800a3ee:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
 800a3f0:	2007      	movs	r0, #7
            if( mibSet->Param.NwkSEncKey != NULL )
 800a3f2:	2900      	cmp	r1, #0
 800a3f4:	d1d5      	bne.n	800a3a2 <LoRaMacMibSetRequestConfirm+0xf6>
 800a3f6:	e7b6      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.AppSKey != NULL )
 800a3f8:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800a3fa:	2008      	movs	r0, #8
            if( mibSet->Param.AppSKey != NULL )
 800a3fc:	2900      	cmp	r1, #0
 800a3fe:	d1d0      	bne.n	800a3a2 <LoRaMacMibSetRequestConfirm+0xf6>
 800a400:	e7b1      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McKEKey != NULL )
 800a402:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800a404:	207f      	movs	r0, #127	; 0x7f
            if( mibSet->Param.McKEKey != NULL )
 800a406:	2900      	cmp	r1, #0
 800a408:	d1cb      	bne.n	800a3a2 <LoRaMacMibSetRequestConfirm+0xf6>
 800a40a:	e7ac      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McKey0 != NULL )
 800a40c:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800a40e:	2080      	movs	r0, #128	; 0x80
            if( mibSet->Param.McKey0 != NULL )
 800a410:	2900      	cmp	r1, #0
 800a412:	d1c6      	bne.n	800a3a2 <LoRaMacMibSetRequestConfirm+0xf6>
 800a414:	e7a7      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McAppSKey0 != NULL )
 800a416:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800a418:	2081      	movs	r0, #129	; 0x81
            if( mibSet->Param.McAppSKey0 != NULL )
 800a41a:	2900      	cmp	r1, #0
 800a41c:	d1c1      	bne.n	800a3a2 <LoRaMacMibSetRequestConfirm+0xf6>
 800a41e:	e7a2      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800a420:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800a422:	2082      	movs	r0, #130	; 0x82
            if( mibSet->Param.McNwkSKey0 != NULL )
 800a424:	2900      	cmp	r1, #0
 800a426:	d1bc      	bne.n	800a3a2 <LoRaMacMibSetRequestConfirm+0xf6>
 800a428:	e79d      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McKey1 != NULL )
 800a42a:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
 800a42c:	2083      	movs	r0, #131	; 0x83
            if( mibSet->Param.McKey1 != NULL )
 800a42e:	2900      	cmp	r1, #0
 800a430:	d1b7      	bne.n	800a3a2 <LoRaMacMibSetRequestConfirm+0xf6>
 800a432:	e798      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McAppSKey1 != NULL )
 800a434:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
 800a436:	2084      	movs	r0, #132	; 0x84
            if( mibSet->Param.McAppSKey1 != NULL )
 800a438:	2900      	cmp	r1, #0
 800a43a:	d1b2      	bne.n	800a3a2 <LoRaMacMibSetRequestConfirm+0xf6>
 800a43c:	e793      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McNwkSKey1 != NULL )
 800a43e:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
 800a440:	2085      	movs	r0, #133	; 0x85
            if( mibSet->Param.McNwkSKey1 != NULL )
 800a442:	2900      	cmp	r1, #0
 800a444:	d1ad      	bne.n	800a3a2 <LoRaMacMibSetRequestConfirm+0xf6>
 800a446:	e78e      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McKey2 != NULL )
 800a448:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
 800a44a:	2086      	movs	r0, #134	; 0x86
            if( mibSet->Param.McKey2 != NULL )
 800a44c:	2900      	cmp	r1, #0
 800a44e:	d1a8      	bne.n	800a3a2 <LoRaMacMibSetRequestConfirm+0xf6>
 800a450:	e789      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McAppSKey2 != NULL )
 800a452:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
 800a454:	2087      	movs	r0, #135	; 0x87
            if( mibSet->Param.McAppSKey2 != NULL )
 800a456:	2900      	cmp	r1, #0
 800a458:	d1a3      	bne.n	800a3a2 <LoRaMacMibSetRequestConfirm+0xf6>
 800a45a:	e784      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McNwkSKey2 != NULL )
 800a45c:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
 800a45e:	2088      	movs	r0, #136	; 0x88
            if( mibSet->Param.McNwkSKey2 != NULL )
 800a460:	2900      	cmp	r1, #0
 800a462:	d19e      	bne.n	800a3a2 <LoRaMacMibSetRequestConfirm+0xf6>
 800a464:	e77f      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McKey3 != NULL )
 800a466:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
 800a468:	2089      	movs	r0, #137	; 0x89
            if( mibSet->Param.McKey3 != NULL )
 800a46a:	2900      	cmp	r1, #0
 800a46c:	d199      	bne.n	800a3a2 <LoRaMacMibSetRequestConfirm+0xf6>
 800a46e:	e77a      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McAppSKey3 != NULL )
 800a470:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
 800a472:	208a      	movs	r0, #138	; 0x8a
            if( mibSet->Param.McAppSKey3 != NULL )
 800a474:	2900      	cmp	r1, #0
 800a476:	d000      	beq.n	800a47a <LoRaMacMibSetRequestConfirm+0x1ce>
 800a478:	e793      	b.n	800a3a2 <LoRaMacMibSetRequestConfirm+0xf6>
 800a47a:	e774      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McNwkSKey3 != NULL )
 800a47c:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
 800a47e:	208b      	movs	r0, #139	; 0x8b
            if( mibSet->Param.McNwkSKey3 != NULL )
 800a480:	2900      	cmp	r1, #0
 800a482:	d000      	beq.n	800a486 <LoRaMacMibSetRequestConfirm+0x1da>
 800a484:	e78d      	b.n	800a3a2 <LoRaMacMibSetRequestConfirm+0xf6>
 800a486:	e76e      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800a488:	4b20      	ldr	r3, [pc, #128]	; (800a50c <LoRaMacMibSetRequestConfirm+0x260>)
 800a48a:	7920      	ldrb	r0, [r4, #4]
 800a48c:	58f3      	ldr	r3, [r6, r3]
 800a48e:	33f1      	adds	r3, #241	; 0xf1
 800a490:	7018      	strb	r0, [r3, #0]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800a492:	4b1f      	ldr	r3, [pc, #124]	; (800a510 <LoRaMacMibSetRequestConfirm+0x264>)
 800a494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a496:	9303      	str	r3, [sp, #12]
 800a498:	4798      	blx	r3
            break;
 800a49a:	e75d      	b.n	800a358 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800a49c:	4b1b      	ldr	r3, [pc, #108]	; (800a50c <LoRaMacMibSetRequestConfirm+0x260>)
 800a49e:	7921      	ldrb	r1, [r4, #4]
 800a4a0:	58f2      	ldr	r2, [r6, r3]
 800a4a2:	2340      	movs	r3, #64	; 0x40
 800a4a4:	33ff      	adds	r3, #255	; 0xff
 800a4a6:	54d1      	strb	r1, [r2, r3]
            break;
 800a4a8:	e756      	b.n	800a358 <LoRaMacMibSetRequestConfirm+0xac>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800a4aa:	7a23      	ldrb	r3, [r4, #8]
 800a4ac:	aa02      	add	r2, sp, #8
 800a4ae:	7313      	strb	r3, [r2, #12]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800a4b0:	222e      	movs	r2, #46	; 0x2e
 800a4b2:	4d16      	ldr	r5, [pc, #88]	; (800a50c <LoRaMacMibSetRequestConfirm+0x260>)
 800a4b4:	32ff      	adds	r2, #255	; 0xff
 800a4b6:	5973      	ldr	r3, [r6, r5]
 800a4b8:	a902      	add	r1, sp, #8
 800a4ba:	5c9a      	ldrb	r2, [r3, r2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800a4bc:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800a4be:	734a      	strb	r2, [r1, #13]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800a4c0:	2207      	movs	r2, #7
 800a4c2:	a905      	add	r1, sp, #20
 800a4c4:	f002 fac6 	bl	800ca54 <RegionVerify>
 800a4c8:	2800      	cmp	r0, #0
 800a4ca:	d100      	bne.n	800a4ce <LoRaMacMibSetRequestConfirm+0x222>
 800a4cc:	e74b      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800a4ce:	5973      	ldr	r3, [r6, r5]
 800a4d0:	331d      	adds	r3, #29
 800a4d2:	33ff      	adds	r3, #255	; 0xff
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800a4d4:	3404      	adds	r4, #4
 800a4d6:	cc06      	ldmia	r4!, {r1, r2}
 800a4d8:	c306      	stmia	r3!, {r1, r2}
 800a4da:	e73d      	b.n	800a358 <LoRaMacMibSetRequestConfirm+0xac>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800a4dc:	7a23      	ldrb	r3, [r4, #8]
 800a4de:	aa02      	add	r2, sp, #8
 800a4e0:	7313      	strb	r3, [r2, #12]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800a4e2:	222e      	movs	r2, #46	; 0x2e
 800a4e4:	4d09      	ldr	r5, [pc, #36]	; (800a50c <LoRaMacMibSetRequestConfirm+0x260>)
 800a4e6:	32ff      	adds	r2, #255	; 0xff
 800a4e8:	5973      	ldr	r3, [r6, r5]
 800a4ea:	a902      	add	r1, sp, #8
 800a4ec:	5c9a      	ldrb	r2, [r3, r2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800a4ee:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800a4f0:	734a      	strb	r2, [r1, #13]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800a4f2:	2207      	movs	r2, #7
 800a4f4:	a905      	add	r1, sp, #20
 800a4f6:	f002 faad 	bl	800ca54 <RegionVerify>
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	d100      	bne.n	800a500 <LoRaMacMibSetRequestConfirm+0x254>
 800a4fe:	e732      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800a500:	5973      	ldr	r3, [r6, r5]
 800a502:	3328      	adds	r3, #40	; 0x28
 800a504:	e7e6      	b.n	800a4d4 <LoRaMacMibSetRequestConfirm+0x228>
 800a506:	46c0      	nop			; (mov r8, r8)
 800a508:	200008bc 	.word	0x200008bc
 800a50c:	00000484 	.word	0x00000484
 800a510:	0801074c 	.word	0x0801074c
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800a514:	7a23      	ldrb	r3, [r4, #8]
 800a516:	aa02      	add	r2, sp, #8
 800a518:	7313      	strb	r3, [r2, #12]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800a51a:	222e      	movs	r2, #46	; 0x2e
 800a51c:	4d81      	ldr	r5, [pc, #516]	; (800a724 <LoRaMacMibSetRequestConfirm+0x478>)
 800a51e:	32ff      	adds	r2, #255	; 0xff
 800a520:	5973      	ldr	r3, [r6, r5]
 800a522:	a902      	add	r1, sp, #8
 800a524:	5c9a      	ldrb	r2, [r3, r2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800a526:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800a528:	734a      	strb	r2, [r1, #13]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800a52a:	2207      	movs	r2, #7
 800a52c:	a905      	add	r1, sp, #20
 800a52e:	f002 fa91 	bl	800ca54 <RegionVerify>
 800a532:	2800      	cmp	r0, #0
 800a534:	d100      	bne.n	800a538 <LoRaMacMibSetRequestConfirm+0x28c>
 800a536:	e716      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800a538:	5972      	ldr	r2, [r6, r5]
 800a53a:	3404      	adds	r4, #4
 800a53c:	0013      	movs	r3, r2
 800a53e:	3325      	adds	r3, #37	; 0x25
 800a540:	33ff      	adds	r3, #255	; 0xff
 800a542:	cc03      	ldmia	r4!, {r0, r1}
 800a544:	c303      	stmia	r3!, {r0, r1}
                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800a546:	3b3c      	subs	r3, #60	; 0x3c
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	2b02      	cmp	r3, #2
 800a54c:	d000      	beq.n	800a550 <LoRaMacMibSetRequestConfirm+0x2a4>
 800a54e:	e703      	b.n	800a358 <LoRaMacMibSetRequestConfirm+0xac>
 800a550:	33d3      	adds	r3, #211	; 0xd3
 800a552:	33ff      	adds	r3, #255	; 0xff
 800a554:	5cd3      	ldrb	r3, [r2, r3]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d100      	bne.n	800a55c <LoRaMacMibSetRequestConfirm+0x2b0>
 800a55a:	e6fd      	b.n	800a358 <LoRaMacMibSetRequestConfirm+0xac>
                    Radio.Sleep( );
 800a55c:	4b72      	ldr	r3, [pc, #456]	; (800a728 <LoRaMacMibSetRequestConfirm+0x47c>)
 800a55e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a560:	9303      	str	r3, [sp, #12]
 800a562:	4798      	blx	r3
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800a564:	5973      	ldr	r3, [r6, r5]
                                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 800a566:	2194      	movs	r1, #148	; 0x94
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800a568:	001a      	movs	r2, r3
 800a56a:	001c      	movs	r4, r3
                                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 800a56c:	0049      	lsls	r1, r1, #1
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800a56e:	5659      	ldrsb	r1, [r3, r1]
 800a570:	7818      	ldrb	r0, [r3, #0]
 800a572:	4b6e      	ldr	r3, [pc, #440]	; (800a72c <LoRaMacMibSetRequestConfirm+0x480>)
 800a574:	32ff      	adds	r2, #255	; 0xff
 800a576:	7852      	ldrb	r2, [r2, #1]
 800a578:	34fc      	adds	r4, #252	; 0xfc
 800a57a:	9300      	str	r3, [sp, #0]
 800a57c:	6823      	ldr	r3, [r4, #0]
 800a57e:	f002 fa86 	bl	800ca8e <RegionComputeRxWindowParameters>
                    OpenContinuousRxCWindow( );
 800a582:	f7fd fe27 	bl	80081d4 <OpenContinuousRxCWindow>
 800a586:	e6e7      	b.n	800a358 <LoRaMacMibSetRequestConfirm+0xac>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800a588:	7a23      	ldrb	r3, [r4, #8]
 800a58a:	aa02      	add	r2, sp, #8
 800a58c:	7313      	strb	r3, [r2, #12]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800a58e:	222e      	movs	r2, #46	; 0x2e
 800a590:	4d64      	ldr	r5, [pc, #400]	; (800a724 <LoRaMacMibSetRequestConfirm+0x478>)
 800a592:	32ff      	adds	r2, #255	; 0xff
 800a594:	5973      	ldr	r3, [r6, r5]
 800a596:	a902      	add	r1, sp, #8
 800a598:	5c9a      	ldrb	r2, [r3, r2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800a59a:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800a59c:	734a      	strb	r2, [r1, #13]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800a59e:	2207      	movs	r2, #7
 800a5a0:	a905      	add	r1, sp, #20
 800a5a2:	f002 fa57 	bl	800ca54 <RegionVerify>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	d100      	bne.n	800a5ac <LoRaMacMibSetRequestConfirm+0x300>
 800a5aa:	e6dc      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800a5ac:	5973      	ldr	r3, [r6, r5]
 800a5ae:	3330      	adds	r3, #48	; 0x30
 800a5b0:	e790      	b.n	800a4d4 <LoRaMacMibSetRequestConfirm+0x228>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800a5b2:	6863      	ldr	r3, [r4, #4]
 800a5b4:	a906      	add	r1, sp, #24
 800a5b6:	9306      	str	r3, [sp, #24]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800a5b8:	2301      	movs	r3, #1
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800a5ba:	710b      	strb	r3, [r1, #4]
            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 800a5bc:	4b59      	ldr	r3, [pc, #356]	; (800a724 <LoRaMacMibSetRequestConfirm+0x478>)
 800a5be:	58f3      	ldr	r3, [r6, r3]
 800a5c0:	7818      	ldrb	r0, [r3, #0]
 800a5c2:	f002 fa5a 	bl	800ca7a <RegionChanMaskSet>
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	d000      	beq.n	800a5cc <LoRaMacMibSetRequestConfirm+0x320>
 800a5ca:	e6c5      	b.n	800a358 <LoRaMacMibSetRequestConfirm+0xac>
 800a5cc:	e6cb      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800a5ce:	6863      	ldr	r3, [r4, #4]
 800a5d0:	a906      	add	r1, sp, #24
 800a5d2:	9306      	str	r3, [sp, #24]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	e7f0      	b.n	800a5ba <LoRaMacMibSetRequestConfirm+0x30e>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800a5d8:	7922      	ldrb	r2, [r4, #4]
 800a5da:	1e53      	subs	r3, r2, #1
 800a5dc:	2b0e      	cmp	r3, #14
 800a5de:	d900      	bls.n	800a5e2 <LoRaMacMibSetRequestConfirm+0x336>
 800a5e0:	e6c1      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800a5e2:	4b50      	ldr	r3, [pc, #320]	; (800a724 <LoRaMacMibSetRequestConfirm+0x478>)
 800a5e4:	58f3      	ldr	r3, [r6, r3]
 800a5e6:	33ff      	adds	r3, #255	; 0xff
 800a5e8:	765a      	strb	r2, [r3, #25]
 800a5ea:	e6b5      	b.n	800a358 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800a5ec:	4b4d      	ldr	r3, [pc, #308]	; (800a724 <LoRaMacMibSetRequestConfirm+0x478>)
 800a5ee:	6862      	ldr	r2, [r4, #4]
 800a5f0:	58f3      	ldr	r3, [r6, r3]
 800a5f2:	33fc      	adds	r3, #252	; 0xfc
 800a5f4:	609a      	str	r2, [r3, #8]
 800a5f6:	e6af      	b.n	800a358 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800a5f8:	4b4a      	ldr	r3, [pc, #296]	; (800a724 <LoRaMacMibSetRequestConfirm+0x478>)
 800a5fa:	6862      	ldr	r2, [r4, #4]
 800a5fc:	58f3      	ldr	r3, [r6, r3]
 800a5fe:	33fc      	adds	r3, #252	; 0xfc
 800a600:	60da      	str	r2, [r3, #12]
 800a602:	e6a9      	b.n	800a358 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800a604:	4b47      	ldr	r3, [pc, #284]	; (800a724 <LoRaMacMibSetRequestConfirm+0x478>)
 800a606:	6862      	ldr	r2, [r4, #4]
 800a608:	58f3      	ldr	r3, [r6, r3]
 800a60a:	33fc      	adds	r3, #252	; 0xfc
 800a60c:	611a      	str	r2, [r3, #16]
 800a60e:	e6a3      	b.n	800a358 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800a610:	4b44      	ldr	r3, [pc, #272]	; (800a724 <LoRaMacMibSetRequestConfirm+0x478>)
 800a612:	6862      	ldr	r2, [r4, #4]
 800a614:	58f3      	ldr	r3, [r6, r3]
 800a616:	33fc      	adds	r3, #252	; 0xfc
 800a618:	615a      	str	r2, [r3, #20]
 800a61a:	e69d      	b.n	800a358 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800a61c:	4b41      	ldr	r3, [pc, #260]	; (800a724 <LoRaMacMibSetRequestConfirm+0x478>)
 800a61e:	6862      	ldr	r2, [r4, #4]
 800a620:	58f3      	ldr	r3, [r6, r3]
 800a622:	33fc      	adds	r3, #252	; 0xfc
 800a624:	619a      	str	r2, [r3, #24]
 800a626:	e697      	b.n	800a358 <LoRaMacMibSetRequestConfirm+0xac>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800a628:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 800a62a:	4c3e      	ldr	r4, [pc, #248]	; (800a724 <LoRaMacMibSetRequestConfirm+0x478>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800a62c:	aa02      	add	r2, sp, #8
 800a62e:	7313      	strb	r3, [r2, #12]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 800a630:	5933      	ldr	r3, [r6, r4]
 800a632:	2206      	movs	r2, #6
 800a634:	7818      	ldrb	r0, [r3, #0]
 800a636:	a905      	add	r1, sp, #20
 800a638:	f002 fa0c 	bl	800ca54 <RegionVerify>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	d100      	bne.n	800a642 <LoRaMacMibSetRequestConfirm+0x396>
 800a640:	e691      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 800a642:	aa02      	add	r2, sp, #8
 800a644:	5933      	ldr	r3, [r6, r4]
 800a646:	7b12      	ldrb	r2, [r2, #12]
 800a648:	715a      	strb	r2, [r3, #5]
 800a64a:	e685      	b.n	800a358 <LoRaMacMibSetRequestConfirm+0xac>
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a64c:	2296      	movs	r2, #150	; 0x96
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800a64e:	7923      	ldrb	r3, [r4, #4]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a650:	4c34      	ldr	r4, [pc, #208]	; (800a724 <LoRaMacMibSetRequestConfirm+0x478>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800a652:	ad05      	add	r5, sp, #20
 800a654:	702b      	strb	r3, [r5, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a656:	5933      	ldr	r3, [r6, r4]
 800a658:	0052      	lsls	r2, r2, #1
 800a65a:	5c9a      	ldrb	r2, [r3, r2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800a65c:	0029      	movs	r1, r5
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a65e:	70aa      	strb	r2, [r5, #2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800a660:	7818      	ldrb	r0, [r3, #0]
 800a662:	2205      	movs	r2, #5
 800a664:	f002 f9f6 	bl	800ca54 <RegionVerify>
 800a668:	2800      	cmp	r0, #0
 800a66a:	d100      	bne.n	800a66e <LoRaMacMibSetRequestConfirm+0x3c2>
 800a66c:	e67b      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800a66e:	5933      	ldr	r3, [r6, r4]
 800a670:	782a      	ldrb	r2, [r5, #0]
 800a672:	33f9      	adds	r3, #249	; 0xf9
 800a674:	e685      	b.n	800a382 <LoRaMacMibSetRequestConfirm+0xd6>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800a676:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 800a678:	4c2a      	ldr	r4, [pc, #168]	; (800a724 <LoRaMacMibSetRequestConfirm+0x478>)
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800a67a:	aa02      	add	r2, sp, #8
 800a67c:	7313      	strb	r3, [r2, #12]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 800a67e:	5933      	ldr	r3, [r6, r4]
 800a680:	220a      	movs	r2, #10
 800a682:	7818      	ldrb	r0, [r3, #0]
 800a684:	a905      	add	r1, sp, #20
 800a686:	f002 f9e5 	bl	800ca54 <RegionVerify>
 800a68a:	2800      	cmp	r0, #0
 800a68c:	d100      	bne.n	800a690 <LoRaMacMibSetRequestConfirm+0x3e4>
 800a68e:	e66a      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 800a690:	aa02      	add	r2, sp, #8
 800a692:	5933      	ldr	r3, [r6, r4]
 800a694:	7b12      	ldrb	r2, [r2, #12]
 800a696:	711a      	strb	r2, [r3, #4]
 800a698:	e65e      	b.n	800a358 <LoRaMacMibSetRequestConfirm+0xac>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800a69a:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 800a69c:	4c21      	ldr	r4, [pc, #132]	; (800a724 <LoRaMacMibSetRequestConfirm+0x478>)
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800a69e:	aa02      	add	r2, sp, #8
 800a6a0:	7313      	strb	r3, [r2, #12]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 800a6a2:	5933      	ldr	r3, [r6, r4]
 800a6a4:	2209      	movs	r2, #9
 800a6a6:	7818      	ldrb	r0, [r3, #0]
 800a6a8:	a905      	add	r1, sp, #20
 800a6aa:	f002 f9d3 	bl	800ca54 <RegionVerify>
 800a6ae:	2800      	cmp	r0, #0
 800a6b0:	d100      	bne.n	800a6b4 <LoRaMacMibSetRequestConfirm+0x408>
 800a6b2:	e658      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 800a6b4:	5933      	ldr	r3, [r6, r4]
 800a6b6:	aa02      	add	r2, sp, #8
 800a6b8:	7b12      	ldrb	r2, [r2, #12]
 800a6ba:	33f8      	adds	r3, #248	; 0xf8
 800a6bc:	e661      	b.n	800a382 <LoRaMacMibSetRequestConfirm+0xd6>
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800a6be:	4b19      	ldr	r3, [pc, #100]	; (800a724 <LoRaMacMibSetRequestConfirm+0x478>)
 800a6c0:	6862      	ldr	r2, [r4, #4]
 800a6c2:	58f3      	ldr	r3, [r6, r3]
 800a6c4:	609a      	str	r2, [r3, #8]
 800a6c6:	33fc      	adds	r3, #252	; 0xfc
 800a6c8:	601a      	str	r2, [r3, #0]
            break;
 800a6ca:	e645      	b.n	800a358 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800a6cc:	4b15      	ldr	r3, [pc, #84]	; (800a724 <LoRaMacMibSetRequestConfirm+0x478>)
 800a6ce:	7922      	ldrb	r2, [r4, #4]
 800a6d0:	58f3      	ldr	r3, [r6, r3]
 800a6d2:	731a      	strb	r2, [r3, #12]
 800a6d4:	33ff      	adds	r3, #255	; 0xff
 800a6d6:	705a      	strb	r2, [r3, #1]
            break;
 800a6d8:	e63e      	b.n	800a358 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800a6da:	4b12      	ldr	r3, [pc, #72]	; (800a724 <LoRaMacMibSetRequestConfirm+0x478>)
 800a6dc:	6862      	ldr	r2, [r4, #4]
 800a6de:	58f3      	ldr	r3, [r6, r3]
 800a6e0:	33fc      	adds	r3, #252	; 0xfc
 800a6e2:	639a      	str	r2, [r3, #56]	; 0x38
 800a6e4:	e638      	b.n	800a358 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800a6e6:	4b0f      	ldr	r3, [pc, #60]	; (800a724 <LoRaMacMibSetRequestConfirm+0x478>)
 800a6e8:	6862      	ldr	r2, [r4, #4]
 800a6ea:	58f3      	ldr	r3, [r6, r3]
 800a6ec:	641a      	str	r2, [r3, #64]	; 0x40
 800a6ee:	e633      	b.n	800a358 <LoRaMacMibSetRequestConfirm+0xac>
            if( mibSet->Param.Contexts != 0 )
 800a6f0:	6860      	ldr	r0, [r4, #4]
 800a6f2:	2800      	cmp	r0, #0
 800a6f4:	d100      	bne.n	800a6f8 <LoRaMacMibSetRequestConfirm+0x44c>
 800a6f6:	e636      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
                status = RestoreCtxs( mibSet->Param.Contexts );
 800a6f8:	f7fe fd4e 	bl	8009198 <RestoreCtxs>
 800a6fc:	e622      	b.n	800a344 <LoRaMacMibSetRequestConfirm+0x98>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800a6fe:	79a3      	ldrb	r3, [r4, #6]
 800a700:	2b01      	cmp	r3, #1
 800a702:	d900      	bls.n	800a706 <LoRaMacMibSetRequestConfirm+0x45a>
 800a704:	e62f      	b.n	800a366 <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 800a706:	4b07      	ldr	r3, [pc, #28]	; (800a724 <LoRaMacMibSetRequestConfirm+0x478>)
 800a708:	6861      	ldr	r1, [r4, #4]
 800a70a:	58f2      	ldr	r2, [r6, r3]
 800a70c:	23e8      	movs	r3, #232	; 0xe8
 800a70e:	005b      	lsls	r3, r3, #1
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800a710:	6860      	ldr	r0, [r4, #4]
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 800a712:	50d1      	str	r1, [r2, r3]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800a714:	f001 fdb0 	bl	800c278 <LoRaMacCryptoSetLrWanVersion>
 800a718:	e645      	b.n	800a3a6 <LoRaMacMibSetRequestConfirm+0xfa>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800a71a:	0020      	movs	r0, r4
 800a71c:	f000 fd62 	bl	800b1e4 <LoRaMacMibClassBSetRequestConfirm>
 800a720:	e610      	b.n	800a344 <LoRaMacMibSetRequestConfirm+0x98>
 800a722:	46c0      	nop			; (mov r8, r8)
 800a724:	00000484 	.word	0x00000484
 800a728:	0801074c 	.word	0x0801074c
 800a72c:	20000c9c 	.word	0x20000c9c

0800a730 <LoRaMacMlmeRequest>:

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800a730:	2300      	movs	r3, #0
{
 800a732:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a734:	b085      	sub	sp, #20
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800a736:	aa02      	add	r2, sp, #8
{
 800a738:	0004      	movs	r4, r0

    if( mlmeRequest == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a73a:	2703      	movs	r7, #3
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800a73c:	8013      	strh	r3, [r2, #0]
    if( mlmeRequest == NULL )
 800a73e:	4298      	cmp	r0, r3
 800a740:	d004      	beq.n	800a74c <LoRaMacMlmeRequest+0x1c>
    }
    if( LoRaMacIsBusy( ) == true )
 800a742:	f7fe f92b 	bl	800899c <LoRaMacIsBusy>
 800a746:	2800      	cmp	r0, #0
 800a748:	d003      	beq.n	800a752 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800a74a:	2701      	movs	r7, #1
    {
        LoRaMacConfirmQueueAdd( &queueElement );
        EventMacNvmCtxChanged( );
    }
    return status;
}
 800a74c:	0038      	movs	r0, r7
 800a74e:	b005      	add	sp, #20
 800a750:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800a752:	f001 fc3d 	bl	800bfd0 <LoRaMacConfirmQueueIsFull>
 800a756:	2800      	cmp	r0, #0
 800a758:	d1f7      	bne.n	800a74a <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800a75a:	f001 fc33 	bl	800bfc4 <LoRaMacConfirmQueueGetCnt>
 800a75e:	1e01      	subs	r1, r0, #0
 800a760:	d103      	bne.n	800a76a <LoRaMacMlmeRequest+0x3a>
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800a762:	2214      	movs	r2, #20
 800a764:	484a      	ldr	r0, [pc, #296]	; (800a890 <LoRaMacMlmeRequest+0x160>)
 800a766:	f004 f941 	bl	800e9ec <memset1>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a76a:	2301      	movs	r3, #1
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800a76c:	2104      	movs	r1, #4
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a76e:	4d49      	ldr	r5, [pc, #292]	; (800a894 <LoRaMacMlmeRequest+0x164>)
 800a770:	4a49      	ldr	r2, [pc, #292]	; (800a898 <LoRaMacMlmeRequest+0x168>)
    queueElement.Request = mlmeRequest->Type;
 800a772:	ae03      	add	r6, sp, #12
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a774:	54ab      	strb	r3, [r5, r2]
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800a776:	4a49      	ldr	r2, [pc, #292]	; (800a89c <LoRaMacMlmeRequest+0x16c>)
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a778:	7073      	strb	r3, [r6, #1]
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800a77a:	5ca8      	ldrb	r0, [r5, r2]
 800a77c:	9200      	str	r2, [sp, #0]
 800a77e:	4301      	orrs	r1, r0
 800a780:	54a9      	strb	r1, [r5, r2]
    queueElement.RestrictCommonReadyToHandle = false;
 800a782:	2100      	movs	r1, #0
    queueElement.Request = mlmeRequest->Type;
 800a784:	7820      	ldrb	r0, [r4, #0]
    queueElement.RestrictCommonReadyToHandle = false;
 800a786:	70f1      	strb	r1, [r6, #3]
    queueElement.Request = mlmeRequest->Type;
 800a788:	7030      	strb	r0, [r6, #0]
    switch( mlmeRequest->Type )
 800a78a:	280d      	cmp	r0, #13
 800a78c:	d900      	bls.n	800a790 <LoRaMacMlmeRequest+0x60>
 800a78e:	e07d      	b.n	800a88c <LoRaMacMlmeRequest+0x15c>
 800a790:	f7f5 fcba 	bl	8000108 <__gnu_thumb1_case_uqi>
 800a794:	3b7c7c07 	.word	0x3b7c7c07
 800a798:	7c7c504a 	.word	0x7c7c504a
 800a79c:	707c567c 	.word	0x707c567c
 800a7a0:	6c5a      	.short	0x6c5a
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800a7a2:	23d0      	movs	r3, #208	; 0xd0
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	58ea      	ldr	r2, [r5, r3]
 800a7a8:	2320      	movs	r3, #32
 800a7aa:	0011      	movs	r1, r2
 800a7ac:	4019      	ands	r1, r3
 800a7ae:	9101      	str	r1, [sp, #4]
 800a7b0:	421a      	tst	r2, r3
 800a7b2:	d1ca      	bne.n	800a74a <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( );
 800a7b4:	f7fd fbec 	bl	8007f90 <ResetMacParameters>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800a7b8:	2104      	movs	r1, #4
 800a7ba:	4b39      	ldr	r3, [pc, #228]	; (800a8a0 <LoRaMacMlmeRequest+0x170>)
 800a7bc:	5661      	ldrsb	r1, [r4, r1]
 800a7be:	58ef      	ldr	r7, [r5, r3]
 800a7c0:	9a01      	ldr	r2, [sp, #4]
 800a7c2:	7838      	ldrb	r0, [r7, #0]
 800a7c4:	f002 f9bf 	bl	800cb46 <RegionAlternateDr>
 800a7c8:	003b      	movs	r3, r7
 800a7ca:	33f9      	adds	r3, #249	; 0xf9
 800a7cc:	7018      	strb	r0, [r3, #0]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800a7ce:	2307      	movs	r3, #7
            status = SendReJoinReq( JOIN_REQ );
 800a7d0:	20ff      	movs	r0, #255	; 0xff
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800a7d2:	7073      	strb	r3, [r6, #1]
            status = SendReJoinReq( JOIN_REQ );
 800a7d4:	f7fe fc34 	bl	8009040 <SendReJoinReq>
 800a7d8:	1e07      	subs	r7, r0, #0
            if( status != LORAMAC_STATUS_OK )
 800a7da:	d01e      	beq.n	800a81a <LoRaMacMlmeRequest+0xea>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800a7dc:	2104      	movs	r1, #4
 800a7de:	4b30      	ldr	r3, [pc, #192]	; (800a8a0 <LoRaMacMlmeRequest+0x170>)
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	58ee      	ldr	r6, [r5, r3]
 800a7e4:	5661      	ldrsb	r1, [r4, r1]
 800a7e6:	7830      	ldrb	r0, [r6, #0]
 800a7e8:	f002 f9ad 	bl	800cb46 <RegionAlternateDr>
 800a7ec:	36f9      	adds	r6, #249	; 0xf9
 800a7ee:	7030      	strb	r0, [r6, #0]
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800a7f0:	f001 fbe8 	bl	800bfc4 <LoRaMacConfirmQueueGetCnt>
 800a7f4:	2800      	cmp	r0, #0
 800a7f6:	d1a9      	bne.n	800a74c <LoRaMacMlmeRequest+0x1c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800a7f8:	2204      	movs	r2, #4
            MacCtx.NodeAckRequested = false;
 800a7fa:	4b2a      	ldr	r3, [pc, #168]	; (800a8a4 <LoRaMacMlmeRequest+0x174>)
 800a7fc:	54e8      	strb	r0, [r5, r3]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800a7fe:	9b00      	ldr	r3, [sp, #0]
 800a800:	5ceb      	ldrb	r3, [r5, r3]
 800a802:	4393      	bics	r3, r2
 800a804:	9a00      	ldr	r2, [sp, #0]
 800a806:	54ab      	strb	r3, [r5, r2]
 800a808:	e7a0      	b.n	800a74c <LoRaMacMlmeRequest+0x1c>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800a80a:	2200      	movs	r2, #0
 800a80c:	2002      	movs	r0, #2
 800a80e:	a902      	add	r1, sp, #8
 800a810:	f001 f9e8 	bl	800bbe4 <LoRaMacCommandsAddCmd>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a814:	2713      	movs	r7, #19
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800a816:	2800      	cmp	r0, #0
 800a818:	d1ea      	bne.n	800a7f0 <LoRaMacMlmeRequest+0xc0>
        LoRaMacConfirmQueueAdd( &queueElement );
 800a81a:	0030      	movs	r0, r6
 800a81c:	f001 fb04 	bl	800be28 <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 800a820:	2700      	movs	r7, #0
 800a822:	f7fd fac1 	bl	8007da8 <EventMacNvmCtxChanged>
 800a826:	e791      	b.n	800a74c <LoRaMacMlmeRequest+0x1c>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800a828:	88a0      	ldrh	r0, [r4, #4]
 800a82a:	f7fe fc35 	bl	8009098 <SetTxContinuousWave>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800a82e:	1e07      	subs	r7, r0, #0
    if( status != LORAMAC_STATUS_OK )
 800a830:	d1de      	bne.n	800a7f0 <LoRaMacMlmeRequest+0xc0>
 800a832:	e7f2      	b.n	800a81a <LoRaMacMlmeRequest+0xea>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800a834:	7b22      	ldrb	r2, [r4, #12]
 800a836:	88a0      	ldrh	r0, [r4, #4]
 800a838:	68a1      	ldr	r1, [r4, #8]
 800a83a:	f7fe fc5b 	bl	80090f4 <SetTxContinuousWave1>
 800a83e:	e7f6      	b.n	800a82e <LoRaMacMlmeRequest+0xfe>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800a840:	2200      	movs	r2, #0
 800a842:	200d      	movs	r0, #13
 800a844:	a902      	add	r1, sp, #8
 800a846:	e7e3      	b.n	800a810 <LoRaMacMlmeRequest+0xe0>
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800a848:	4b15      	ldr	r3, [pc, #84]	; (800a8a0 <LoRaMacMlmeRequest+0x170>)
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800a84a:	2702      	movs	r7, #2
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800a84c:	58eb      	ldr	r3, [r5, r3]
 800a84e:	33f0      	adds	r3, #240	; 0xf0
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d1cc      	bne.n	800a7f0 <LoRaMacMlmeRequest+0xc0>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800a856:	7924      	ldrb	r4, [r4, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800a858:	0760      	lsls	r0, r4, #29
 800a85a:	0f40      	lsrs	r0, r0, #29
 800a85c:	f000 fc8c 	bl	800b178 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800a860:	ab02      	add	r3, sp, #8
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800a862:	2201      	movs	r2, #1
 800a864:	0019      	movs	r1, r3
 800a866:	2010      	movs	r0, #16
                macCmdPayload[0] = value;
 800a868:	701c      	strb	r4, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800a86a:	e7d1      	b.n	800a810 <LoRaMacMlmeRequest+0xe0>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800a86c:	2200      	movs	r2, #0
 800a86e:	2012      	movs	r0, #18
 800a870:	a902      	add	r1, sp, #8
 800a872:	e7cd      	b.n	800a810 <LoRaMacMlmeRequest+0xe0>
            queueElement.RestrictCommonReadyToHandle = true;
 800a874:	70f3      	strb	r3, [r6, #3]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800a876:	f000 fc63 	bl	800b140 <LoRaMacClassBIsAcquisitionInProgress>
                status = LORAMAC_STATUS_BUSY;
 800a87a:	2701      	movs	r7, #1
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800a87c:	1e04      	subs	r4, r0, #0
 800a87e:	d1b7      	bne.n	800a7f0 <LoRaMacMlmeRequest+0xc0>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800a880:	f000 fc46 	bl	800b110 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800a884:	0020      	movs	r0, r4
 800a886:	f000 f98d 	bl	800aba4 <LoRaMacClassBBeaconTimerEvent>
    if( status != LORAMAC_STATUS_OK )
 800a88a:	e7c6      	b.n	800a81a <LoRaMacMlmeRequest+0xea>
    queueElement.RestrictCommonReadyToHandle = false;
 800a88c:	2702      	movs	r7, #2
 800a88e:	e7af      	b.n	800a7f0 <LoRaMacMlmeRequest+0xc0>
 800a890:	20000d0c 	.word	0x20000d0c
 800a894:	200008bc 	.word	0x200008bc
 800a898:	00000451 	.word	0x00000451
 800a89c:	00000481 	.word	0x00000481
 800a8a0:	00000484 	.word	0x00000484
 800a8a4:	00000414 	.word	0x00000414

0800a8a8 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest )
{
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8ac:	b089      	sub	sp, #36	; 0x24
 800a8ae:	0004      	movs	r4, r0
 800a8b0:	9302      	str	r3, [sp, #8]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800a8b2:	4298      	cmp	r0, r3
 800a8b4:	d103      	bne.n	800a8be <LoRaMacMcpsRequest+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a8b6:	2503      	movs	r5, #3
        }
    }

    EventMacNvmCtxChanged( );
    return status;
}
 800a8b8:	0028      	movs	r0, r5
 800a8ba:	b009      	add	sp, #36	; 0x24
 800a8bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacIsBusy( ) == true )
 800a8be:	f7fe f86d 	bl	800899c <LoRaMacIsBusy>
        return LORAMAC_STATUS_BUSY;
 800a8c2:	2501      	movs	r5, #1
    if( LoRaMacIsBusy( ) == true )
 800a8c4:	1e06      	subs	r6, r0, #0
 800a8c6:	9001      	str	r0, [sp, #4]
 800a8c8:	d1f6      	bne.n	800a8b8 <LoRaMacMcpsRequest+0x10>
    macHdr.Value = 0;
 800a8ca:	ab04      	add	r3, sp, #16
 800a8cc:	7018      	strb	r0, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800a8ce:	0001      	movs	r1, r0
 800a8d0:	2214      	movs	r2, #20
 800a8d2:	4846      	ldr	r0, [pc, #280]	; (800a9ec <LoRaMacMcpsRequest+0x144>)
 800a8d4:	f004 f88a 	bl	800e9ec <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a8d8:	4f45      	ldr	r7, [pc, #276]	; (800a9f0 <LoRaMacMcpsRequest+0x148>)
 800a8da:	4b46      	ldr	r3, [pc, #280]	; (800a9f4 <LoRaMacMcpsRequest+0x14c>)
 800a8dc:	54fd      	strb	r5, [r7, r3]
    MacCtx.AckTimeoutRetriesCounter = 1;
 800a8de:	4b46      	ldr	r3, [pc, #280]	; (800a9f8 <LoRaMacMcpsRequest+0x150>)
 800a8e0:	54fd      	strb	r5, [r7, r3]
    switch( mcpsRequest->Type )
 800a8e2:	7823      	ldrb	r3, [r4, #0]
 800a8e4:	42ab      	cmp	r3, r5
 800a8e6:	d05b      	beq.n	800a9a0 <LoRaMacMcpsRequest+0xf8>
 800a8e8:	2b03      	cmp	r3, #3
 800a8ea:	d067      	beq.n	800a9bc <LoRaMacMcpsRequest+0x114>
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d174      	bne.n	800a9da <LoRaMacMcpsRequest+0x132>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800a8f0:	221f      	movs	r2, #31
            MacCtx.AckTimeoutRetries = 1;
 800a8f2:	4b42      	ldr	r3, [pc, #264]	; (800a9fc <LoRaMacMcpsRequest+0x154>)
 800a8f4:	54fd      	strb	r5, [r7, r3]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800a8f6:	ab04      	add	r3, sp, #16
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	401a      	ands	r2, r3
 800a8fc:	2340      	movs	r3, #64	; 0x40
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800a8fe:	4313      	orrs	r3, r2
 800a900:	aa04      	add	r2, sp, #16
 800a902:	7013      	strb	r3, [r2, #0]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800a904:	7923      	ldrb	r3, [r4, #4]
 800a906:	9301      	str	r3, [sp, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800a908:	68a3      	ldr	r3, [r4, #8]
 800a90a:	9303      	str	r3, [sp, #12]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800a90c:	89a3      	ldrh	r3, [r4, #12]
 800a90e:	9302      	str	r3, [sp, #8]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800a910:	230e      	movs	r3, #14
            readyToSend = true;
 800a912:	2601      	movs	r6, #1
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800a914:	56e3      	ldrsb	r3, [r4, r3]
 800a916:	9300      	str	r3, [sp, #0]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800a918:	2202      	movs	r2, #2
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a91a:	4d39      	ldr	r5, [pc, #228]	; (800aa00 <LoRaMacMcpsRequest+0x158>)
    getPhy.Attribute = PHY_MIN_TX_DR;
 800a91c:	ab04      	add	r3, sp, #16
 800a91e:	711a      	strb	r2, [r3, #4]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a920:	597b      	ldr	r3, [r7, r5]
 800a922:	322b      	adds	r2, #43	; 0x2b
 800a924:	32ff      	adds	r2, #255	; 0xff
 800a926:	5c9a      	ldrb	r2, [r3, r2]
 800a928:	a904      	add	r1, sp, #16
 800a92a:	718a      	strb	r2, [r1, #6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a92c:	7818      	ldrb	r0, [r3, #0]
 800a92e:	a905      	add	r1, sp, #20
 800a930:	f002 f86c 	bl	800ca0c <RegionGetPhyParam>
 800a934:	9006      	str	r0, [sp, #24]
    if( readyToSend == true )
 800a936:	2e00      	cmp	r6, #0
 800a938:	d056      	beq.n	800a9e8 <LoRaMacMcpsRequest+0x140>
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 800a93a:	597b      	ldr	r3, [r7, r5]
 800a93c:	001a      	movs	r2, r3
 800a93e:	32f2      	adds	r2, #242	; 0xf2
 800a940:	7812      	ldrb	r2, [r2, #0]
 800a942:	2a00      	cmp	r2, #0
 800a944:	d118      	bne.n	800a978 <LoRaMacMcpsRequest+0xd0>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800a946:	9900      	ldr	r1, [sp, #0]
 800a948:	1c02      	adds	r2, r0, #0
 800a94a:	b240      	sxtb	r0, r0
            verify.DatarateParams.Datarate = datarate;
 800a94c:	ae07      	add	r6, sp, #28
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800a94e:	4288      	cmp	r0, r1
 800a950:	da01      	bge.n	800a956 <LoRaMacMcpsRequest+0xae>
 800a952:	466a      	mov	r2, sp
 800a954:	7812      	ldrb	r2, [r2, #0]
            verify.DatarateParams.Datarate = datarate;
 800a956:	7032      	strb	r2, [r6, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a958:	2296      	movs	r2, #150	; 0x96
 800a95a:	0052      	lsls	r2, r2, #1
 800a95c:	5c9a      	ldrb	r2, [r3, r2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800a95e:	0031      	movs	r1, r6
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a960:	70b2      	strb	r2, [r6, #2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800a962:	7818      	ldrb	r0, [r3, #0]
 800a964:	2205      	movs	r2, #5
 800a966:	f002 f875 	bl	800ca54 <RegionVerify>
 800a96a:	2800      	cmp	r0, #0
 800a96c:	d0a3      	beq.n	800a8b6 <LoRaMacMcpsRequest+0xe>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800a96e:	4b20      	ldr	r3, [pc, #128]	; (800a9f0 <LoRaMacMcpsRequest+0x148>)
 800a970:	7832      	ldrb	r2, [r6, #0]
 800a972:	595b      	ldr	r3, [r3, r5]
 800a974:	33f9      	adds	r3, #249	; 0xf9
 800a976:	701a      	strb	r2, [r3, #0]
        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 800a978:	9b02      	ldr	r3, [sp, #8]
 800a97a:	9a03      	ldr	r2, [sp, #12]
 800a97c:	9901      	ldr	r1, [sp, #4]
 800a97e:	a804      	add	r0, sp, #16
 800a980:	f7fe fad2 	bl	8008f28 <Send>
 800a984:	4b1a      	ldr	r3, [pc, #104]	; (800a9f0 <LoRaMacMcpsRequest+0x148>)
 800a986:	1e05      	subs	r5, r0, #0
        if( status == LORAMAC_STATUS_OK )
 800a988:	d12a      	bne.n	800a9e0 <LoRaMacMcpsRequest+0x138>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800a98a:	7821      	ldrb	r1, [r4, #0]
 800a98c:	4a1d      	ldr	r2, [pc, #116]	; (800aa04 <LoRaMacMcpsRequest+0x15c>)
 800a98e:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800a990:	2201      	movs	r2, #1
 800a992:	491d      	ldr	r1, [pc, #116]	; (800aa08 <LoRaMacMcpsRequest+0x160>)
 800a994:	5c58      	ldrb	r0, [r3, r1]
 800a996:	4302      	orrs	r2, r0
 800a998:	545a      	strb	r2, [r3, r1]
    EventMacNvmCtxChanged( );
 800a99a:	f7fd fa05 	bl	8007da8 <EventMacNvmCtxChanged>
    return status;
 800a99e:	e78b      	b.n	800a8b8 <LoRaMacMcpsRequest+0x10>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800a9a0:	7be2      	ldrb	r2, [r4, #15]
 800a9a2:	1c13      	adds	r3, r2, #0
 800a9a4:	2a08      	cmp	r2, #8
 800a9a6:	d900      	bls.n	800a9aa <LoRaMacMcpsRequest+0x102>
 800a9a8:	2308      	movs	r3, #8
 800a9aa:	4a14      	ldr	r2, [pc, #80]	; (800a9fc <LoRaMacMcpsRequest+0x154>)
 800a9ac:	54bb      	strb	r3, [r7, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800a9ae:	221f      	movs	r2, #31
 800a9b0:	ab04      	add	r3, sp, #16
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	401a      	ands	r2, r3
 800a9b6:	2380      	movs	r3, #128	; 0x80
 800a9b8:	425b      	negs	r3, r3
 800a9ba:	e7a0      	b.n	800a8fe <LoRaMacMcpsRequest+0x56>
            MacCtx.AckTimeoutRetries = 1;
 800a9bc:	4b0f      	ldr	r3, [pc, #60]	; (800a9fc <LoRaMacMcpsRequest+0x154>)
 800a9be:	54fd      	strb	r5, [r7, r3]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800a9c0:	ab04      	add	r3, sp, #16
 800a9c2:	781a      	ldrb	r2, [r3, #0]
 800a9c4:	2320      	movs	r3, #32
 800a9c6:	425b      	negs	r3, r3
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	aa04      	add	r2, sp, #16
 800a9cc:	7013      	strb	r3, [r2, #0]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800a9ce:	6863      	ldr	r3, [r4, #4]
 800a9d0:	9303      	str	r3, [sp, #12]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800a9d2:	8923      	ldrh	r3, [r4, #8]
 800a9d4:	9302      	str	r3, [sp, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800a9d6:	230a      	movs	r3, #10
 800a9d8:	e79b      	b.n	800a912 <LoRaMacMcpsRequest+0x6a>
    switch( mcpsRequest->Type )
 800a9da:	9600      	str	r6, [sp, #0]
 800a9dc:	9601      	str	r6, [sp, #4]
 800a9de:	e79b      	b.n	800a918 <LoRaMacMcpsRequest+0x70>
            MacCtx.NodeAckRequested = false;
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	4a0a      	ldr	r2, [pc, #40]	; (800aa0c <LoRaMacMcpsRequest+0x164>)
 800a9e4:	5499      	strb	r1, [r3, r2]
 800a9e6:	e7d8      	b.n	800a99a <LoRaMacMcpsRequest+0xf2>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800a9e8:	2502      	movs	r5, #2
 800a9ea:	e7d6      	b.n	800a99a <LoRaMacMcpsRequest+0xf2>
 800a9ec:	20000cf8 	.word	0x20000cf8
 800a9f0:	200008bc 	.word	0x200008bc
 800a9f4:	0000043d 	.word	0x0000043d
 800a9f8:	00000412 	.word	0x00000412
 800a9fc:	00000411 	.word	0x00000411
 800aa00:	00000484 	.word	0x00000484
 800aa04:	0000043c 	.word	0x0000043c
 800aa08:	00000481 	.word	0x00000481
 800aa0c:	00000414 	.word	0x00000414

0800aa10 <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800aa10:	b573      	push	{r0, r1, r4, r5, r6, lr}
    VerifyParams_t verify;

    verify.DutyCycle = enable;

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 800aa12:	4e08      	ldr	r6, [pc, #32]	; (800aa34 <LoRaMacTestSetDutyCycleOn+0x24>)
 800aa14:	4d08      	ldr	r5, [pc, #32]	; (800aa38 <LoRaMacTestSetDutyCycleOn+0x28>)
    verify.DutyCycle = enable;
 800aa16:	a901      	add	r1, sp, #4
    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 800aa18:	5973      	ldr	r3, [r6, r5]
{
 800aa1a:	0004      	movs	r4, r0
    verify.DutyCycle = enable;
 800aa1c:	7008      	strb	r0, [r1, #0]
    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 800aa1e:	220f      	movs	r2, #15
 800aa20:	7818      	ldrb	r0, [r3, #0]
 800aa22:	f002 f817 	bl	800ca54 <RegionVerify>
 800aa26:	2800      	cmp	r0, #0
 800aa28:	d003      	beq.n	800aa32 <LoRaMacTestSetDutyCycleOn+0x22>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
 800aa2a:	233e      	movs	r3, #62	; 0x3e
 800aa2c:	5972      	ldr	r2, [r6, r5]
 800aa2e:	33ff      	adds	r3, #255	; 0xff
 800aa30:	54d4      	strb	r4, [r2, r3]
    }
}
 800aa32:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 800aa34:	200008bc 	.word	0x200008bc
 800aa38:	00000484 	.word	0x00000484

0800aa3c <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800aa3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( adrNext->Version.Fields.Minor == 0 )
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800aa3e:	2500      	movs	r5, #0
{
 800aa40:	b08b      	sub	sp, #44	; 0x2c
 800aa42:	9104      	str	r1, [sp, #16]
 800aa44:	9205      	str	r2, [sp, #20]
 800aa46:	001e      	movs	r6, r3
    if( adrNext->Version.Fields.Minor == 0 )
 800aa48:	7883      	ldrb	r3, [r0, #2]
{
 800aa4a:	0004      	movs	r4, r0
    if( adrNext->Version.Fields.Minor == 0 )
 800aa4c:	42ab      	cmp	r3, r5
 800aa4e:	d12b      	bne.n	800aaa8 <LoRaMacAdrCalcNext+0x6c>
    int8_t datarate = adrNext->Datarate;
 800aa50:	2310      	movs	r3, #16
 800aa52:	56c3      	ldrsb	r3, [r0, r3]
 800aa54:	9301      	str	r3, [sp, #4]
    int8_t txPower = adrNext->TxPower;
 800aa56:	2311      	movs	r3, #17
 800aa58:	56c3      	ldrsb	r3, [r0, r3]
    int8_t datarate = adrNext->Datarate;
 800aa5a:	9f01      	ldr	r7, [sp, #4]
    int8_t txPower = adrNext->TxPower;
 800aa5c:	9303      	str	r3, [sp, #12]
    *adrAckCounter = adrNext->AdrAckCounter;
 800aa5e:	6883      	ldr	r3, [r0, #8]
 800aa60:	6033      	str	r3, [r6, #0]
    if( adrNext->AdrEnabled == true )
 800aa62:	7945      	ldrb	r5, [r0, #5]
 800aa64:	2d00      	cmp	r5, #0
 800aa66:	d01a      	beq.n	800aa9e <LoRaMacAdrCalcNext+0x62>
        getPhy.Attribute = PHY_MIN_TX_DR;
 800aa68:	2302      	movs	r3, #2
 800aa6a:	aa06      	add	r2, sp, #24
 800aa6c:	7013      	strb	r3, [r2, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800aa6e:	7c83      	ldrb	r3, [r0, #18]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800aa70:	0011      	movs	r1, r2
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800aa72:	7093      	strb	r3, [r2, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800aa74:	7cc0      	ldrb	r0, [r0, #19]
 800aa76:	f001 ffc9 	bl	800ca0c <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 800aa7a:	b243      	sxtb	r3, r0
 800aa7c:	9302      	str	r3, [sp, #8]
        datarate = MAX( datarate, minTxDatarate );
 800aa7e:	466b      	mov	r3, sp
 800aa80:	9a02      	ldr	r2, [sp, #8]
 800aa82:	791f      	ldrb	r7, [r3, #4]
 800aa84:	9b01      	ldr	r3, [sp, #4]
 800aa86:	4293      	cmp	r3, r2
 800aa88:	da01      	bge.n	800aa8e <LoRaMacAdrCalcNext+0x52>
 800aa8a:	466b      	mov	r3, sp
 800aa8c:	7a1f      	ldrb	r7, [r3, #8]
        if( datarate == minTxDatarate )
 800aa8e:	9b01      	ldr	r3, [sp, #4]
 800aa90:	9a02      	ldr	r2, [sp, #8]
        datarate = MAX( datarate, minTxDatarate );
 800aa92:	b27f      	sxtb	r7, r7
        if( datarate == minTxDatarate )
 800aa94:	4293      	cmp	r3, r2
 800aa96:	dc0a      	bgt.n	800aaae <LoRaMacAdrCalcNext+0x72>
            *adrAckCounter = 0;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	6033      	str	r3, [r6, #0]
                        adrAckReq = false;
 800aa9c:	2500      	movs	r5, #0
    *drOut = datarate;
 800aa9e:	9b04      	ldr	r3, [sp, #16]
    *txPowOut = txPower;
 800aaa0:	9a03      	ldr	r2, [sp, #12]
    *drOut = datarate;
 800aaa2:	701f      	strb	r7, [r3, #0]
    *txPowOut = txPower;
 800aaa4:	9b05      	ldr	r3, [sp, #20]
 800aaa6:	701a      	strb	r2, [r3, #0]
}
 800aaa8:	0028      	movs	r0, r5
 800aaaa:	b00b      	add	sp, #44	; 0x2c
 800aaac:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800aaae:	2500      	movs	r5, #0
 800aab0:	89a1      	ldrh	r1, [r4, #12]
 800aab2:	68a2      	ldr	r2, [r4, #8]
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800aab4:	89e3      	ldrh	r3, [r4, #14]
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800aab6:	428a      	cmp	r2, r1
 800aab8:	416d      	adcs	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800aaba:	185b      	adds	r3, r3, r1
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800aabc:	b2ed      	uxtb	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d3ed      	bcc.n	800aa9e <LoRaMacAdrCalcNext+0x62>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800aac2:	2308      	movs	r3, #8
 800aac4:	aa06      	add	r2, sp, #24
 800aac6:	7013      	strb	r3, [r2, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800aac8:	0011      	movs	r1, r2
 800aaca:	7ce0      	ldrb	r0, [r4, #19]
 800aacc:	f001 ff9e 	bl	800ca0c <RegionGetPhyParam>
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800aad0:	89e1      	ldrh	r1, [r4, #14]
                txPower = phyParam.Value;
 800aad2:	b243      	sxtb	r3, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800aad4:	68a0      	ldr	r0, [r4, #8]
                txPower = phyParam.Value;
 800aad6:	9303      	str	r3, [sp, #12]
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800aad8:	f7f5 fbba 	bl	8000250 <__aeabi_uidivmod>
 800aadc:	000e      	movs	r6, r1
 800aade:	2901      	cmp	r1, #1
 800aae0:	d1dd      	bne.n	800aa9e <LoRaMacAdrCalcNext+0x62>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800aae2:	2322      	movs	r3, #34	; 0x22
 800aae4:	aa06      	add	r2, sp, #24
                    getPhy.Datarate = datarate;
 800aae6:	7057      	strb	r7, [r2, #1]
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800aae8:	7013      	strb	r3, [r2, #0]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800aaea:	7ca3      	ldrb	r3, [r4, #18]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800aaec:	0011      	movs	r1, r2
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800aaee:	7093      	strb	r3, [r2, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800aaf0:	7ce0      	ldrb	r0, [r4, #19]
 800aaf2:	f001 ff8b 	bl	800ca0c <RegionGetPhyParam>
                    if( datarate == minTxDatarate )
 800aaf6:	9b02      	ldr	r3, [sp, #8]
                    datarate = phyParam.Value;
 800aaf8:	b247      	sxtb	r7, r0
                    if( datarate == minTxDatarate )
 800aafa:	42bb      	cmp	r3, r7
 800aafc:	d1cf      	bne.n	800aa9e <LoRaMacAdrCalcNext+0x62>
                        if( adrNext->UpdateChanMask == true )
 800aafe:	7925      	ldrb	r5, [r4, #4]
 800ab00:	2d00      	cmp	r5, #0
 800ab02:	d0cc      	beq.n	800aa9e <LoRaMacAdrCalcNext+0x62>
                            params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 800ab04:	a908      	add	r1, sp, #32
 800ab06:	710e      	strb	r6, [r1, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 800ab08:	7ce0      	ldrb	r0, [r4, #19]
 800ab0a:	f001 ff92 	bl	800ca32 <RegionInitDefaults>
 800ab0e:	e7c5      	b.n	800aa9c <LoRaMacAdrCalcNext+0x60>

0800ab10 <NvmContextChange>:
/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void NvmContextChange( void )
{
    if( Ctx.LoRaMacClassBNvmEvent != NULL )
 800ab10:	4b03      	ldr	r3, [pc, #12]	; (800ab20 <NvmContextChange+0x10>)
{
 800ab12:	b510      	push	{r4, lr}
    if( Ctx.LoRaMacClassBNvmEvent != NULL )
 800ab14:	33b8      	adds	r3, #184	; 0xb8
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d000      	beq.n	800ab1e <NvmContextChange+0xe>
    {
        Ctx.LoRaMacClassBNvmEvent( );
 800ab1c:	4798      	blx	r3
    }
}
 800ab1e:	bd10      	pop	{r4, pc}
 800ab20:	20001654 	.word	0x20001654

0800ab24 <LoRaMacClassBPingSlotTimerEvent>:
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
#ifdef LORAMAC_CLASSB_ENABLED
    LoRaMacClassBEvents.Events.PingSlot = 1;
 800ab24:	2302      	movs	r3, #2
 800ab26:	4a06      	ldr	r2, [pc, #24]	; (800ab40 <LoRaMacClassBPingSlotTimerEvent+0x1c>)
{
 800ab28:	b510      	push	{r4, lr}
    LoRaMacClassBEvents.Events.PingSlot = 1;
 800ab2a:	7811      	ldrb	r1, [r2, #0]
 800ab2c:	430b      	orrs	r3, r1
 800ab2e:	7013      	strb	r3, [r2, #0]

    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
 800ab30:	4b04      	ldr	r3, [pc, #16]	; (800ab44 <LoRaMacClassBPingSlotTimerEvent+0x20>)
 800ab32:	3394      	adds	r3, #148	; 0x94
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d000      	beq.n	800ab3c <LoRaMacClassBPingSlotTimerEvent+0x18>
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
 800ab3a:	4798      	blx	r3
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800ab3c:	bd10      	pop	{r4, pc}
 800ab3e:	46c0      	nop			; (mov r8, r8)
 800ab40:	20000d44 	.word	0x20000d44
 800ab44:	20001654 	.word	0x20001654

0800ab48 <LoRaMacClassBMulticastSlotTimerEvent>:
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
#ifdef LORAMAC_CLASSB_ENABLED
    LoRaMacClassBEvents.Events.MulticastSlot = 1;
 800ab48:	2304      	movs	r3, #4
 800ab4a:	4a06      	ldr	r2, [pc, #24]	; (800ab64 <LoRaMacClassBMulticastSlotTimerEvent+0x1c>)
{
 800ab4c:	b510      	push	{r4, lr}
    LoRaMacClassBEvents.Events.MulticastSlot = 1;
 800ab4e:	7811      	ldrb	r1, [r2, #0]
 800ab50:	430b      	orrs	r3, r1
 800ab52:	7013      	strb	r3, [r2, #0]

    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
 800ab54:	4b04      	ldr	r3, [pc, #16]	; (800ab68 <LoRaMacClassBMulticastSlotTimerEvent+0x20>)
 800ab56:	3394      	adds	r3, #148	; 0x94
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d000      	beq.n	800ab60 <LoRaMacClassBMulticastSlotTimerEvent+0x18>
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
 800ab5e:	4798      	blx	r3
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800ab60:	bd10      	pop	{r4, pc}
 800ab62:	46c0      	nop			; (mov r8, r8)
 800ab64:	20000d44 	.word	0x20000d44
 800ab68:	20001654 	.word	0x20001654

0800ab6c <CalcDownlinkFrequency>:
{
 800ab6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    getPhy.Attribute = PHY_BEACON_CHANNEL_FREQ;
 800ab6e:	2330      	movs	r3, #48	; 0x30
 800ab70:	466a      	mov	r2, sp
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800ab72:	4d0b      	ldr	r5, [pc, #44]	; (800aba0 <CalcDownlinkFrequency+0x34>)
    getPhy.Attribute = PHY_BEACON_CHANNEL_FREQ;
 800ab74:	7013      	strb	r3, [r2, #0]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800ab76:	35ac      	adds	r5, #172	; 0xac
 800ab78:	682b      	ldr	r3, [r5, #0]
{
 800ab7a:	0006      	movs	r6, r0
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800ab7c:	4669      	mov	r1, sp
 800ab7e:	7818      	ldrb	r0, [r3, #0]
 800ab80:	f001 ff44 	bl	800ca0c <RegionGetPhyParam>
    getPhy.Attribute = PHY_BEACON_CHANNEL_STEPWIDTH;
 800ab84:	466a      	mov	r2, sp
 800ab86:	2333      	movs	r3, #51	; 0x33
 800ab88:	7013      	strb	r3, [r2, #0]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800ab8a:	682b      	ldr	r3, [r5, #0]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800ab8c:	0004      	movs	r4, r0
 800ab8e:	9001      	str	r0, [sp, #4]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800ab90:	4669      	mov	r1, sp
 800ab92:	7818      	ldrb	r0, [r3, #0]
 800ab94:	f001 ff3a 	bl	800ca0c <RegionGetPhyParam>
    return frequency + ( channel * stepwidth );
 800ab98:	4370      	muls	r0, r6
 800ab9a:	1900      	adds	r0, r0, r4
}
 800ab9c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800ab9e:	46c0      	nop			; (mov r8, r8)
 800aba0:	20001654 	.word	0x20001654

0800aba4 <LoRaMacClassBBeaconTimerEvent>:
{
 800aba4:	b510      	push	{r4, lr}
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
 800aba6:	f003 fe52 	bl	800e84e <TimerGetCurrentTime>
 800abaa:	4c08      	ldr	r4, [pc, #32]	; (800abcc <LoRaMacClassBBeaconTimerEvent+0x28>)
 800abac:	6420      	str	r0, [r4, #64]	; 0x40
    TimerStop( &Ctx.BeaconTimer );
 800abae:	4808      	ldr	r0, [pc, #32]	; (800abd0 <LoRaMacClassBBeaconTimerEvent+0x2c>)
 800abb0:	f003 fe10 	bl	800e7d4 <TimerStop>
    LoRaMacClassBEvents.Events.Beacon = 1;
 800abb4:	2301      	movs	r3, #1
 800abb6:	4a07      	ldr	r2, [pc, #28]	; (800abd4 <LoRaMacClassBBeaconTimerEvent+0x30>)
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
 800abb8:	3494      	adds	r4, #148	; 0x94
    LoRaMacClassBEvents.Events.Beacon = 1;
 800abba:	7811      	ldrb	r1, [r2, #0]
 800abbc:	430b      	orrs	r3, r1
 800abbe:	7013      	strb	r3, [r2, #0]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
 800abc0:	6823      	ldr	r3, [r4, #0]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d000      	beq.n	800abc8 <LoRaMacClassBBeaconTimerEvent+0x24>
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
 800abc6:	4798      	blx	r3
}
 800abc8:	bd10      	pop	{r4, pc}
 800abca:	46c0      	nop			; (mov r8, r8)
 800abcc:	20001654 	.word	0x20001654
 800abd0:	2000169c 	.word	0x2000169c
 800abd4:	20000d44 	.word	0x20000d44

0800abd8 <CalcNextSlotTime>:
{
 800abd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abda:	b085      	sub	sp, #20
 800abdc:	9303      	str	r3, [sp, #12]
 800abde:	0004      	movs	r4, r0
 800abe0:	9202      	str	r2, [sp, #8]
 800abe2:	9101      	str	r1, [sp, #4]
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800abe4:	f003 fe33 	bl	800e84e <TimerGetCurrentTime>
    slotTime = ( ( currentTime - SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) ) % CLASSB_BEACON_INTERVAL );
 800abe8:	4e1d      	ldr	r6, [pc, #116]	; (800ac60 <CalcNextSlotTime+0x88>)
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800abea:	0005      	movs	r5, r0
    slotTime = ( ( currentTime - SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) ) % CLASSB_BEACON_INTERVAL );
 800abec:	6a31      	ldr	r1, [r6, #32]
 800abee:	69f0      	ldr	r0, [r6, #28]
 800abf0:	f003 fd03 	bl	800e5fa <SysTimeToMs>
 800abf4:	21fa      	movs	r1, #250	; 0xfa
 800abf6:	1a28      	subs	r0, r5, r0
 800abf8:	0249      	lsls	r1, r1, #9
 800abfa:	f7f5 fb29 	bl	8000250 <__aeabi_uidivmod>
    slotTime += slotOffset * CLASSB_PING_SLOT_WINDOW;
 800abfe:	271e      	movs	r7, #30
 800ac00:	0020      	movs	r0, r4
 800ac02:	4378      	muls	r0, r7
 800ac04:	4b17      	ldr	r3, [pc, #92]	; (800ac64 <CalcNextSlotTime+0x8c>)
 800ac06:	18c0      	adds	r0, r0, r3
 800ac08:	1940      	adds	r0, r0, r5
    uint8_t currentPingSlot = 0;
 800ac0a:	2300      	movs	r3, #0
    slotTime += slotOffset * CLASSB_PING_SLOT_WINDOW;
 800ac0c:	1a44      	subs	r4, r0, r1
    if( slotTime < currentTime )
 800ac0e:	42a5      	cmp	r5, r4
 800ac10:	d90b      	bls.n	800ac2a <CalcNextSlotTime+0x52>
        currentPingSlot = ( ( currentTime - slotTime ) /
 800ac12:	1a08      	subs	r0, r1, r0
                          ( pingPeriod * CLASSB_PING_SLOT_WINDOW ) ) + 1;
 800ac14:	9901      	ldr	r1, [sp, #4]
        currentPingSlot = ( ( currentTime - slotTime ) /
 800ac16:	1940      	adds	r0, r0, r5
                          ( pingPeriod * CLASSB_PING_SLOT_WINDOW ) ) + 1;
 800ac18:	4379      	muls	r1, r7
        currentPingSlot = ( ( currentTime - slotTime ) /
 800ac1a:	f7f5 fa93 	bl	8000144 <__udivsi3>
        slotTime += ( ( TimerTime_t )( currentPingSlot * pingPeriod ) *
 800ac1e:	9901      	ldr	r1, [sp, #4]
        currentPingSlot = ( ( currentTime - slotTime ) /
 800ac20:	3001      	adds	r0, #1
 800ac22:	b2c3      	uxtb	r3, r0
        slotTime += ( ( TimerTime_t )( currentPingSlot * pingPeriod ) *
 800ac24:	4359      	muls	r1, r3
 800ac26:	434f      	muls	r7, r1
 800ac28:	19e4      	adds	r4, r4, r7
    if( currentPingSlot < pingNb )
 800ac2a:	9a02      	ldr	r2, [sp, #8]
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d302      	bcc.n	800ac36 <CalcNextSlotTime+0x5e>
    return false;
 800ac30:	2000      	movs	r0, #0
}
 800ac32:	b005      	add	sp, #20
 800ac34:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( slotTime <= ( SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - CLASSB_BEACON_GUARD - CLASSB_PING_SLOT_WINDOW ) )
 800ac36:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800ac38:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800ac3a:	f003 fcde 	bl	800e5fa <SysTimeToMs>
 800ac3e:	4b0a      	ldr	r3, [pc, #40]	; (800ac68 <CalcNextSlotTime+0x90>)
 800ac40:	18c0      	adds	r0, r0, r3
 800ac42:	42a0      	cmp	r0, r4
 800ac44:	d3f4      	bcc.n	800ac30 <CalcNextSlotTime+0x58>
            slotTime -= Radio.GetWakeupTime( );
 800ac46:	4b09      	ldr	r3, [pc, #36]	; (800ac6c <CalcNextSlotTime+0x94>)
            slotTime -= currentTime;
 800ac48:	1b65      	subs	r5, r4, r5
            slotTime -= Radio.GetWakeupTime( );
 800ac4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac4c:	9301      	str	r3, [sp, #4]
 800ac4e:	4798      	blx	r3
            slotTime = TimerTempCompensation( slotTime, Ctx.BeaconCtx.Temperature );
 800ac50:	6931      	ldr	r1, [r6, #16]
            slotTime -= Radio.GetWakeupTime( );
 800ac52:	1a28      	subs	r0, r5, r0
            slotTime = TimerTempCompensation( slotTime, Ctx.BeaconCtx.Temperature );
 800ac54:	f003 fe10 	bl	800e878 <TimerTempCompensation>
            *timeOffset = slotTime;
 800ac58:	9b03      	ldr	r3, [sp, #12]
 800ac5a:	6018      	str	r0, [r3, #0]
            return true;
 800ac5c:	2001      	movs	r0, #1
 800ac5e:	e7e8      	b.n	800ac32 <CalcNextSlotTime+0x5a>
 800ac60:	20001654 	.word	0x20001654
 800ac64:	00000848 	.word	0x00000848
 800ac68:	fffff42a 	.word	0xfffff42a
 800ac6c:	0801074c 	.word	0x0801074c

0800ac70 <ComputePingOffset>:
{
 800ac70:	b570      	push	{r4, r5, r6, lr}
 800ac72:	0006      	movs	r6, r0
 800ac74:	0015      	movs	r5, r2
 800ac76:	b088      	sub	sp, #32
    memset1( buffer, 0, 16 );
 800ac78:	4668      	mov	r0, sp
 800ac7a:	2210      	movs	r2, #16
 800ac7c:	2100      	movs	r1, #0
{
 800ac7e:	001c      	movs	r4, r3
    memset1( buffer, 0, 16 );
 800ac80:	f003 feb4 	bl	800e9ec <memset1>
    memset1( cipher, 0, 16 );
 800ac84:	a804      	add	r0, sp, #16
 800ac86:	2210      	movs	r2, #16
 800ac88:	2100      	movs	r1, #0
 800ac8a:	f003 feaf 	bl	800e9ec <memset1>
    SecureElementAesEncrypt( buffer, 16, SLOT_RAND_ZERO_KEY, cipher );
 800ac8e:	228c      	movs	r2, #140	; 0x8c
 800ac90:	ab04      	add	r3, sp, #16
 800ac92:	2110      	movs	r1, #16
 800ac94:	4668      	mov	r0, sp
    buffer[0] = ( time ) & 0xFF;
 800ac96:	9600      	str	r6, [sp, #0]
    buffer[4] = ( address ) & 0xFF;
 800ac98:	9501      	str	r5, [sp, #4]
    SecureElementAesEncrypt( buffer, 16, SLOT_RAND_ZERO_KEY, cipher );
 800ac9a:	f7fc ff35 	bl	8007b08 <SecureElementAesEncrypt>
    result = ( ( ( uint32_t ) cipher[0] ) + ( ( ( uint32_t ) cipher[1] ) * 256 ) );
 800ac9e:	466b      	mov	r3, sp
 800aca0:	7c58      	ldrb	r0, [r3, #17]
 800aca2:	7c1b      	ldrb	r3, [r3, #16]
 800aca4:	0200      	lsls	r0, r0, #8
    *pingOffset = ( uint16_t )( result % pingPeriod );
 800aca6:	0021      	movs	r1, r4
    result = ( ( ( uint32_t ) cipher[0] ) + ( ( ( uint32_t ) cipher[1] ) * 256 ) );
 800aca8:	18c0      	adds	r0, r0, r3
    *pingOffset = ( uint16_t )( result % pingPeriod );
 800acaa:	f7f5 fad1 	bl	8000250 <__aeabi_uidivmod>
 800acae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acb0:	8019      	strh	r1, [r3, #0]
}
 800acb2:	b008      	add	sp, #32
 800acb4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800acb8 <BeaconCrc>:
{
 800acb8:	0002      	movs	r2, r0
 800acba:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( buffer == NULL )
 800acbc:	2800      	cmp	r0, #0
 800acbe:	d018      	beq.n	800acf2 <BeaconCrc+0x3a>
 800acc0:	2300      	movs	r3, #0
        crc ^= ( uint16_t ) buffer[i] << 8;
 800acc2:	2708      	movs	r7, #8
    uint16_t crc = 0x0000;
 800acc4:	0018      	movs	r0, r3
        crc ^= ( uint16_t ) buffer[i] << 8;
 800acc6:	5cd4      	ldrb	r4, [r2, r3]
 800acc8:	0224      	lsls	r4, r4, #8
 800acca:	4060      	eors	r0, r4
 800accc:	003c      	movs	r4, r7
            crc = ( crc & 0x8000 ) ? ( crc << 1 ) ^ polynom : ( crc << 1 );
 800acce:	b205      	sxth	r5, r0
 800acd0:	46ac      	mov	ip, r5
 800acd2:	4666      	mov	r6, ip
 800acd4:	0045      	lsls	r5, r0, #1
 800acd6:	b2a8      	uxth	r0, r5
 800acd8:	2e00      	cmp	r6, #0
 800acda:	da02      	bge.n	800ace2 <BeaconCrc+0x2a>
 800acdc:	4805      	ldr	r0, [pc, #20]	; (800acf4 <BeaconCrc+0x3c>)
 800acde:	4045      	eors	r5, r0
 800ace0:	b2a8      	uxth	r0, r5
        for( uint16_t j = 0; j < 8; ++j )
 800ace2:	3c01      	subs	r4, #1
 800ace4:	b2a4      	uxth	r4, r4
 800ace6:	2c00      	cmp	r4, #0
 800ace8:	d1f1      	bne.n	800acce <BeaconCrc+0x16>
    for( uint16_t i = 0; i < length; ++i )
 800acea:	3301      	adds	r3, #1
 800acec:	b29c      	uxth	r4, r3
 800acee:	42a1      	cmp	r1, r4
 800acf0:	d8e9      	bhi.n	800acc6 <BeaconCrc+0xe>
}
 800acf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acf4:	00001021 	.word	0x00001021

0800acf8 <CalcDownlinkChannelAndFrequency.constprop.0>:
static uint32_t CalcDownlinkChannelAndFrequency( uint32_t devAddr, TimerTime_t beaconTime, TimerTime_t beaconInterval )
 800acf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    getPhy.Attribute = PHY_BEACON_NB_CHANNELS;
 800acfa:	2334      	movs	r3, #52	; 0x34
 800acfc:	466a      	mov	r2, sp
 800acfe:	7013      	strb	r3, [r2, #0]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800ad00:	4b0b      	ldr	r3, [pc, #44]	; (800ad30 <CalcDownlinkChannelAndFrequency.constprop.0+0x38>)
static uint32_t CalcDownlinkChannelAndFrequency( uint32_t devAddr, TimerTime_t beaconTime, TimerTime_t beaconInterval )
 800ad02:	0005      	movs	r5, r0
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800ad04:	33ac      	adds	r3, #172	; 0xac
 800ad06:	681b      	ldr	r3, [r3, #0]
static uint32_t CalcDownlinkChannelAndFrequency( uint32_t devAddr, TimerTime_t beaconTime, TimerTime_t beaconInterval )
 800ad08:	000c      	movs	r4, r1
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800ad0a:	7818      	ldrb	r0, [r3, #0]
 800ad0c:	4669      	mov	r1, sp
 800ad0e:	f001 fe7d 	bl	800ca0c <RegionGetPhyParam>
    if( nbChannels > 1 )
 800ad12:	b2c2      	uxtb	r2, r0
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800ad14:	0003      	movs	r3, r0
    uint32_t channel = 0;
 800ad16:	2100      	movs	r1, #0
    if( nbChannels > 1 )
 800ad18:	2a01      	cmp	r2, #1
 800ad1a:	d904      	bls.n	800ad26 <CalcDownlinkChannelAndFrequency.constprop.0+0x2e>
        channel = devAddr + ( beaconTime / ( beaconInterval / 1000 ) );
 800ad1c:	09e0      	lsrs	r0, r4, #7
 800ad1e:	1940      	adds	r0, r0, r5
        channel = channel % nbChannels;
 800ad20:	b2d9      	uxtb	r1, r3
 800ad22:	f7f5 fa95 	bl	8000250 <__aeabi_uidivmod>
    frequency = CalcDownlinkFrequency( channel );
 800ad26:	b2c8      	uxtb	r0, r1
 800ad28:	f7ff ff20 	bl	800ab6c <CalcDownlinkFrequency>
}
 800ad2c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800ad2e:	46c0      	nop			; (mov r8, r8)
 800ad30:	20001654 	.word	0x20001654

0800ad34 <RxBeaconSetup>:
{
 800ad34:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t windowTimeout = Ctx.BeaconCtx.SymbolTimeout;
 800ad36:	4c2a      	ldr	r4, [pc, #168]	; (800ade0 <RxBeaconSetup+0xac>)
{
 800ad38:	0007      	movs	r7, r0
    uint16_t windowTimeout = Ctx.BeaconCtx.SymbolTimeout;
 800ad3a:	8e26      	ldrh	r6, [r4, #48]	; 0x30
{
 800ad3c:	0008      	movs	r0, r1
 800ad3e:	b08d      	sub	sp, #52	; 0x34
    if( activateDefaultChannel == true )
 800ad40:	2900      	cmp	r1, #0
 800ad42:	d048      	beq.n	800add6 <RxBeaconSetup+0xa2>
        frequency = CalcDownlinkFrequency( 0 );
 800ad44:	2000      	movs	r0, #0
 800ad46:	f7ff ff11 	bl	800ab6c <CalcDownlinkFrequency>
    if( Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq == 1 )
 800ad4a:	0023      	movs	r3, r4
 800ad4c:	33bc      	adds	r3, #188	; 0xbc
 800ad4e:	681b      	ldr	r3, [r3, #0]
        frequency = CalcDownlinkChannelAndFrequency( 0, Ctx.BeaconCtx.BeaconTime.Seconds + ( CLASSB_BEACON_INTERVAL / 1000 ),
 800ad50:	0005      	movs	r5, r0
    if( Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq == 1 )
 800ad52:	7b1a      	ldrb	r2, [r3, #12]
 800ad54:	07d2      	lsls	r2, r2, #31
 800ad56:	d500      	bpl.n	800ad5a <RxBeaconSetup+0x26>
        frequency = Ctx.NvmCtx->BeaconCtx.Frequency;
 800ad58:	691d      	ldr	r5, [r3, #16]
    if( Ctx.BeaconCtx.Ctrl.BeaconChannelSet == 1 )
 800ad5a:	2208      	movs	r2, #8
 800ad5c:	7b23      	ldrb	r3, [r4, #12]
 800ad5e:	4213      	tst	r3, r2
 800ad60:	d007      	beq.n	800ad72 <RxBeaconSetup+0x3e>
        Ctx.BeaconCtx.Ctrl.BeaconChannelSet = 0;
 800ad62:	4393      	bics	r3, r2
 800ad64:	7323      	strb	r3, [r4, #12]
        frequency = CalcDownlinkFrequency( Ctx.BeaconCtx.BeaconTimingChannel );
 800ad66:	0023      	movs	r3, r4
 800ad68:	3338      	adds	r3, #56	; 0x38
 800ad6a:	7818      	ldrb	r0, [r3, #0]
 800ad6c:	f7ff fefe 	bl	800ab6c <CalcDownlinkFrequency>
 800ad70:	0005      	movs	r5, r0
    if( ( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 1 ) || ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) )
 800ad72:	2312      	movs	r3, #18
 800ad74:	7b22      	ldrb	r2, [r4, #12]
 800ad76:	421a      	tst	r2, r3
 800ad78:	d017      	beq.n	800adaa <RxBeaconSetup+0x76>
        getPhy.Attribute = PHY_BEACON_CHANNEL_DR;
 800ad7a:	0026      	movs	r6, r4
 800ad7c:	a902      	add	r1, sp, #8
 800ad7e:	36ac      	adds	r6, #172	; 0xac
 800ad80:	3320      	adds	r3, #32
 800ad82:	700b      	strb	r3, [r1, #0]
        phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800ad84:	6833      	ldr	r3, [r6, #0]
 800ad86:	7818      	ldrb	r0, [r3, #0]
 800ad88:	f001 fe40 	bl	800ca0c <RegionGetPhyParam>
                                        Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 800ad8c:	0023      	movs	r3, r4
 800ad8e:	33b0      	adds	r3, #176	; 0xb0
 800ad90:	681b      	ldr	r3, [r3, #0]
        phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800ad92:	9003      	str	r0, [sp, #12]
        RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 800ad94:	b241      	sxtb	r1, r0
 800ad96:	6830      	ldr	r0, [r6, #0]
 800ad98:	ae07      	add	r6, sp, #28
 800ad9a:	7a1a      	ldrb	r2, [r3, #8]
 800ad9c:	7800      	ldrb	r0, [r0, #0]
 800ad9e:	9600      	str	r6, [sp, #0]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	f001 fe74 	bl	800ca8e <RegionComputeRxWindowParameters>
        windowTimeout = beaconRxConfig.WindowTimeout;
 800ada6:	68b6      	ldr	r6, [r6, #8]
 800ada8:	b2b6      	uxth	r6, r6
    rxBeaconSetup.SymbolTimeout = windowTimeout;
 800adaa:	a904      	add	r1, sp, #16
 800adac:	800e      	strh	r6, [r1, #0]
    RegionRxBeaconSetup( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &rxBeaconSetup, &Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 800adae:	0026      	movs	r6, r4
 800adb0:	369c      	adds	r6, #156	; 0x9c
 800adb2:	6833      	ldr	r3, [r6, #0]
    rxBeaconSetup.RxTime = rxTime;
 800adb4:	604f      	str	r7, [r1, #4]
    RegionRxBeaconSetup( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &rxBeaconSetup, &Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 800adb6:	1d1a      	adds	r2, r3, #4
 800adb8:	0023      	movs	r3, r4
 800adba:	33ac      	adds	r3, #172	; 0xac
 800adbc:	681b      	ldr	r3, [r3, #0]
    rxBeaconSetup.Frequency = frequency;
 800adbe:	608d      	str	r5, [r1, #8]
    RegionRxBeaconSetup( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &rxBeaconSetup, &Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 800adc0:	7818      	ldrb	r0, [r3, #0]
 800adc2:	f001 fef5 	bl	800cbb0 <RegionRxBeaconSetup>
    Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Frequency = frequency;
 800adc6:	3498      	adds	r4, #152	; 0x98
 800adc8:	6823      	ldr	r3, [r4, #0]
    Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Datarate = Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate;
 800adca:	6832      	ldr	r2, [r6, #0]
    Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Frequency = frequency;
 800adcc:	60dd      	str	r5, [r3, #12]
    Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Datarate = Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate;
 800adce:	7912      	ldrb	r2, [r2, #4]
 800add0:	741a      	strb	r2, [r3, #16]
}
 800add2:	b00d      	add	sp, #52	; 0x34
 800add4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        frequency = CalcDownlinkChannelAndFrequency( 0, Ctx.BeaconCtx.BeaconTime.Seconds + ( CLASSB_BEACON_INTERVAL / 1000 ),
 800add6:	6961      	ldr	r1, [r4, #20]
 800add8:	3180      	adds	r1, #128	; 0x80
 800adda:	f7ff ff8d 	bl	800acf8 <CalcDownlinkChannelAndFrequency.constprop.0>
 800adde:	e7b4      	b.n	800ad4a <RxBeaconSetup+0x16>
 800ade0:	20001654 	.word	0x20001654

0800ade4 <InitClassB>:
{
 800ade4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LoRaMacClassBEvents.Value = 0;
 800ade6:	2500      	movs	r5, #0
 800ade8:	4817      	ldr	r0, [pc, #92]	; (800ae48 <InitClassB+0x64>)
    memset1( ( uint8_t* ) &NvmCtx, 0, sizeof( LoRaMacClassBNvmCtx_t ) );
 800adea:	2214      	movs	r2, #20
 800adec:	0029      	movs	r1, r5
    LoRaMacClassBEvents.Value = 0;
 800adee:	c020      	stmia	r0!, {r5}
    memset1( ( uint8_t* ) &NvmCtx, 0, sizeof( LoRaMacClassBNvmCtx_t ) );
 800adf0:	f003 fdfc 	bl	800e9ec <memset1>
    memset1( ( uint8_t* ) &Ctx.PingSlotCtx, 0, sizeof( PingSlotContext_t ) );
 800adf4:	4c15      	ldr	r4, [pc, #84]	; (800ae4c <InitClassB+0x68>)
 800adf6:	220c      	movs	r2, #12
 800adf8:	0029      	movs	r1, r5
 800adfa:	0020      	movs	r0, r4
 800adfc:	f003 fdf6 	bl	800e9ec <memset1>
    memset1( ( uint8_t* ) &Ctx.BeaconCtx, 0, sizeof( BeaconContext_t ) );
 800ae00:	2238      	movs	r2, #56	; 0x38
 800ae02:	0029      	movs	r1, r5
 800ae04:	4812      	ldr	r0, [pc, #72]	; (800ae50 <InitClassB+0x6c>)
 800ae06:	f003 fdf1 	bl	800e9ec <memset1>
    Ctx.BeaconCtx.Temperature = 25.0;
 800ae0a:	4b12      	ldr	r3, [pc, #72]	; (800ae54 <InitClassB+0x70>)
 800ae0c:	6123      	str	r3, [r4, #16]
    if( ( callbacks != NULL ) && ( callbacks->GetTemperatureLevel != NULL ) )
 800ae0e:	0023      	movs	r3, r4
 800ae10:	3390      	adds	r3, #144	; 0x90
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	42ab      	cmp	r3, r5
 800ae16:	d003      	beq.n	800ae20 <InitClassB+0x3c>
        beaconCtx->Temperature = (float) callbacks->GetTemperatureLevel( );
 800ae18:	4798      	blx	r3
 800ae1a:	f7f6 fb0b 	bl	8001434 <__aeabi_ui2f>
 800ae1e:	6120      	str	r0, [r4, #16]
    getPhy.Attribute = PHY_PING_SLOT_CHANNEL_DR;
 800ae20:	466a      	mov	r2, sp
 800ae22:	2335      	movs	r3, #53	; 0x35
 800ae24:	7013      	strb	r3, [r2, #0]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800ae26:	0023      	movs	r3, r4
 800ae28:	33ac      	adds	r3, #172	; 0xac
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4669      	mov	r1, sp
 800ae2e:	7818      	ldrb	r0, [r3, #0]
 800ae30:	f001 fdec 	bl	800ca0c <RegionGetPhyParam>
    Ctx.NvmCtx->PingSlotCtx.Datarate = (int8_t)( phyParam.Value );
 800ae34:	0023      	movs	r3, r4
 800ae36:	33bc      	adds	r3, #188	; 0xbc
 800ae38:	681b      	ldr	r3, [r3, #0]
    Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 800ae3a:	1da2      	adds	r2, r4, #6
    Ctx.NvmCtx->PingSlotCtx.Datarate = (int8_t)( phyParam.Value );
 800ae3c:	7218      	strb	r0, [r3, #8]
    Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 800ae3e:	2300      	movs	r3, #0
    Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800ae40:	3446      	adds	r4, #70	; 0x46
    Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 800ae42:	87d3      	strh	r3, [r2, #62]	; 0x3e
    Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800ae44:	7023      	strb	r3, [r4, #0]
}
 800ae46:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800ae48:	20000d44 	.word	0x20000d44
 800ae4c:	20001654 	.word	0x20001654
 800ae50:	20001660 	.word	0x20001660
 800ae54:	41c80000 	.word	0x41c80000

0800ae58 <InitClassBDefaults>:
{
 800ae58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    LoRaMacClassBBeaconNvmCtx_t beaconCtx = Ctx.NvmCtx->BeaconCtx;
 800ae5a:	4e11      	ldr	r6, [pc, #68]	; (800aea0 <InitClassBDefaults+0x48>)
 800ae5c:	36bc      	adds	r6, #188	; 0xbc
 800ae5e:	6833      	ldr	r3, [r6, #0]
 800ae60:	691f      	ldr	r7, [r3, #16]
    LoRaMacClassBPingSlotNvmCtx_t pingSlotCtx = Ctx.NvmCtx->PingSlotCtx;
 800ae62:	685a      	ldr	r2, [r3, #4]
    LoRaMacClassBBeaconNvmCtx_t beaconCtx = Ctx.NvmCtx->BeaconCtx;
 800ae64:	7b1d      	ldrb	r5, [r3, #12]
    LoRaMacClassBPingSlotNvmCtx_t pingSlotCtx = Ctx.NvmCtx->PingSlotCtx;
 800ae66:	781c      	ldrb	r4, [r3, #0]
 800ae68:	7a1b      	ldrb	r3, [r3, #8]
 800ae6a:	9200      	str	r2, [sp, #0]
 800ae6c:	b25b      	sxtb	r3, r3
 800ae6e:	9301      	str	r3, [sp, #4]
    InitClassB( );
 800ae70:	f7ff ffb8 	bl	800ade4 <InitClassB>
    Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq = beaconCtx.Ctrl.CustomFreq;
 800ae74:	2101      	movs	r1, #1
    Ctx.NvmCtx->BeaconCtx.Frequency = beaconCtx.Frequency;
 800ae76:	6833      	ldr	r3, [r6, #0]
    LoRaMacClassBBeaconNvmCtx_t beaconCtx = Ctx.NvmCtx->BeaconCtx;
 800ae78:	07ed      	lsls	r5, r5, #31
    Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq = beaconCtx.Ctrl.CustomFreq;
 800ae7a:	7b1a      	ldrb	r2, [r3, #12]
    LoRaMacClassBPingSlotNvmCtx_t pingSlotCtx = Ctx.NvmCtx->PingSlotCtx;
 800ae7c:	07a4      	lsls	r4, r4, #30
    Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq = beaconCtx.Ctrl.CustomFreq;
 800ae7e:	438a      	bics	r2, r1
    LoRaMacClassBPingSlotNvmCtx_t pingSlotCtx = Ctx.NvmCtx->PingSlotCtx;
 800ae80:	0fe4      	lsrs	r4, r4, #31
    LoRaMacClassBBeaconNvmCtx_t beaconCtx = Ctx.NvmCtx->BeaconCtx;
 800ae82:	0fed      	lsrs	r5, r5, #31
    Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq = beaconCtx.Ctrl.CustomFreq;
 800ae84:	4315      	orrs	r5, r2
    Ctx.NvmCtx->PingSlotCtx.Ctrl.CustomFreq = pingSlotCtx.Ctrl.CustomFreq;
 800ae86:	0062      	lsls	r2, r4, #1
 800ae88:	781c      	ldrb	r4, [r3, #0]
 800ae8a:	1849      	adds	r1, r1, r1
 800ae8c:	438c      	bics	r4, r1
 800ae8e:	4314      	orrs	r4, r2
    Ctx.NvmCtx->PingSlotCtx.Frequency = pingSlotCtx.Frequency;
 800ae90:	9a00      	ldr	r2, [sp, #0]
    Ctx.NvmCtx->BeaconCtx.Frequency = beaconCtx.Frequency;
 800ae92:	611f      	str	r7, [r3, #16]
    Ctx.NvmCtx->PingSlotCtx.Frequency = pingSlotCtx.Frequency;
 800ae94:	605a      	str	r2, [r3, #4]
    Ctx.NvmCtx->PingSlotCtx.Datarate = pingSlotCtx.Datarate;
 800ae96:	9a01      	ldr	r2, [sp, #4]
    Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq = beaconCtx.Ctrl.CustomFreq;
 800ae98:	731d      	strb	r5, [r3, #12]
    Ctx.NvmCtx->PingSlotCtx.Ctrl.CustomFreq = pingSlotCtx.Ctrl.CustomFreq;
 800ae9a:	701c      	strb	r4, [r3, #0]
    Ctx.NvmCtx->PingSlotCtx.Datarate = pingSlotCtx.Datarate;
 800ae9c:	721a      	strb	r2, [r3, #8]
}
 800ae9e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800aea0:	20001654 	.word	0x20001654

0800aea4 <LoRaMacClassBInit>:
{
 800aea4:	b570      	push	{r4, r5, r6, lr}
    Ctx.LoRaMacClassBCallbacks = *callbacks;
 800aea6:	4c12      	ldr	r4, [pc, #72]	; (800aef0 <LoRaMacClassBInit+0x4c>)
 800aea8:	0023      	movs	r3, r4
 800aeaa:	3390      	adds	r3, #144	; 0x90
 800aeac:	c960      	ldmia	r1!, {r5, r6}
 800aeae:	c360      	stmia	r3!, {r5, r6}
    Ctx.LoRaMacClassBParams = *classBParams;
 800aeb0:	0021      	movs	r1, r4
 800aeb2:	3198      	adds	r1, #152	; 0x98
 800aeb4:	000b      	movs	r3, r1
 800aeb6:	c862      	ldmia	r0!, {r1, r5, r6}
 800aeb8:	c362      	stmia	r3!, {r1, r5, r6}
 800aeba:	c862      	ldmia	r0!, {r1, r5, r6}
 800aebc:	c362      	stmia	r3!, {r1, r5, r6}
 800aebe:	c822      	ldmia	r0!, {r1, r5}
 800aec0:	c322      	stmia	r3!, {r1, r5}
    Ctx.NvmCtx = &NvmCtx;
 800aec2:	0021      	movs	r1, r4
 800aec4:	4b0b      	ldr	r3, [pc, #44]	; (800aef4 <LoRaMacClassBInit+0x50>)
 800aec6:	31bc      	adds	r1, #188	; 0xbc
 800aec8:	3304      	adds	r3, #4
 800aeca:	600b      	str	r3, [r1, #0]
    TimerInit( &Ctx.BeaconTimer, LoRaMacClassBBeaconTimerEvent );
 800aecc:	480a      	ldr	r0, [pc, #40]	; (800aef8 <LoRaMacClassBInit+0x54>)
 800aece:	490b      	ldr	r1, [pc, #44]	; (800aefc <LoRaMacClassBInit+0x58>)
    Ctx.LoRaMacClassBNvmEvent = classBNvmCtxChanged;
 800aed0:	34b8      	adds	r4, #184	; 0xb8
 800aed2:	6022      	str	r2, [r4, #0]
    TimerInit( &Ctx.BeaconTimer, LoRaMacClassBBeaconTimerEvent );
 800aed4:	f003 fbfe 	bl	800e6d4 <TimerInit>
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
 800aed8:	4909      	ldr	r1, [pc, #36]	; (800af00 <LoRaMacClassBInit+0x5c>)
 800aeda:	480a      	ldr	r0, [pc, #40]	; (800af04 <LoRaMacClassBInit+0x60>)
 800aedc:	f003 fbfa 	bl	800e6d4 <TimerInit>
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );
 800aee0:	4909      	ldr	r1, [pc, #36]	; (800af08 <LoRaMacClassBInit+0x64>)
 800aee2:	480a      	ldr	r0, [pc, #40]	; (800af0c <LoRaMacClassBInit+0x68>)
 800aee4:	f003 fbf6 	bl	800e6d4 <TimerInit>
    InitClassB( );
 800aee8:	f7ff ff7c 	bl	800ade4 <InitClassB>
}
 800aeec:	bd70      	pop	{r4, r5, r6, pc}
 800aeee:	46c0      	nop			; (mov r8, r8)
 800aef0:	20001654 	.word	0x20001654
 800aef4:	20000d44 	.word	0x20000d44
 800aef8:	2000169c 	.word	0x2000169c
 800aefc:	0800aba5 	.word	0x0800aba5
 800af00:	0800ab25 	.word	0x0800ab25
 800af04:	200016b4 	.word	0x200016b4
 800af08:	0800ab49 	.word	0x0800ab49
 800af0c:	200016cc 	.word	0x200016cc

0800af10 <LoRaMacClassBRestoreNvmCtx>:
{
 800af10:	0001      	movs	r1, r0
        return false;
 800af12:	2000      	movs	r0, #0
{
 800af14:	b510      	push	{r4, lr}
    if( classBNvmCtx != NULL )
 800af16:	4281      	cmp	r1, r0
 800af18:	d005      	beq.n	800af26 <LoRaMacClassBRestoreNvmCtx+0x16>
        memcpy1( ( uint8_t* ) &NvmCtx, ( uint8_t* ) classBNvmCtx, sizeof( NvmCtx ) );
 800af1a:	4803      	ldr	r0, [pc, #12]	; (800af28 <LoRaMacClassBRestoreNvmCtx+0x18>)
 800af1c:	2214      	movs	r2, #20
 800af1e:	3004      	adds	r0, #4
 800af20:	f003 fd4f 	bl	800e9c2 <memcpy1>
        return true;
 800af24:	2001      	movs	r0, #1
}
 800af26:	bd10      	pop	{r4, pc}
 800af28:	20000d44 	.word	0x20000d44

0800af2c <LoRaMacClassBGetNvmCtx>:
    *classBNvmCtxSize = sizeof( NvmCtx );
 800af2c:	2314      	movs	r3, #20
 800af2e:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
 800af30:	4801      	ldr	r0, [pc, #4]	; (800af38 <LoRaMacClassBGetNvmCtx+0xc>)
}
 800af32:	3004      	adds	r0, #4
 800af34:	4770      	bx	lr
 800af36:	46c0      	nop			; (mov r8, r8)
 800af38:	20000d44 	.word	0x20000d44

0800af3c <LoRaMacClassBSetPingSlotState>:
    Ctx.PingSlotState = pingSlotState;
 800af3c:	4b01      	ldr	r3, [pc, #4]	; (800af44 <LoRaMacClassBSetPingSlotState+0x8>)
 800af3e:	3345      	adds	r3, #69	; 0x45
 800af40:	7018      	strb	r0, [r3, #0]
}
 800af42:	4770      	bx	lr
 800af44:	20001654 	.word	0x20001654

0800af48 <LoRaMacClassBSetMulticastSlotState>:
    Ctx.MulticastSlotState = multicastSlotState;
 800af48:	4b01      	ldr	r3, [pc, #4]	; (800af50 <LoRaMacClassBSetMulticastSlotState+0x8>)
 800af4a:	3346      	adds	r3, #70	; 0x46
 800af4c:	7018      	strb	r0, [r3, #0]
}
 800af4e:	4770      	bx	lr
 800af50:	20001654 	.word	0x20001654

0800af54 <LoRaMacClassBRxBeacon>:
    uint16_t crc0 = 0;
    uint16_t crc1 = 0;
    uint16_t beaconCrc0 = 0;
    uint16_t beaconCrc1 = 0;

    getPhy.Attribute = PHY_BEACON_FORMAT;
 800af54:	2331      	movs	r3, #49	; 0x31
{
 800af56:	b5f0      	push	{r4, r5, r6, r7, lr}
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800af58:	4c55      	ldr	r4, [pc, #340]	; (800b0b0 <LoRaMacClassBRxBeacon+0x15c>)
{
 800af5a:	b08d      	sub	sp, #52	; 0x34
 800af5c:	9105      	str	r1, [sp, #20]
    getPhy.Attribute = PHY_BEACON_FORMAT;
 800af5e:	a906      	add	r1, sp, #24
 800af60:	700b      	strb	r3, [r1, #0]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800af62:	0023      	movs	r3, r4
 800af64:	33ac      	adds	r3, #172	; 0xac
 800af66:	681b      	ldr	r3, [r3, #0]
{
 800af68:	0005      	movs	r5, r0
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800af6a:	7818      	ldrb	r0, [r3, #0]
 800af6c:	f001 fd4e 	bl	800ca0c <RegionGetPhyParam>

    // Verify if we are in the state where we expect a beacon
    if( ( Ctx.BeaconState == BEACON_STATE_RX ) || ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) )
 800af70:	0023      	movs	r3, r4
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800af72:	9007      	str	r0, [sp, #28]
    if( ( Ctx.BeaconState == BEACON_STATE_RX ) || ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) )
 800af74:	3344      	adds	r3, #68	; 0x44
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	2b09      	cmp	r3, #9
 800af7a:	d004      	beq.n	800af86 <LoRaMacClassBRxBeacon+0x32>
 800af7c:	7b23      	ldrb	r3, [r4, #12]
    bool beaconProcessed = false;
 800af7e:	2600      	movs	r6, #0
    if( ( Ctx.BeaconState == BEACON_STATE_RX ) || ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) )
 800af80:	06db      	lsls	r3, r3, #27
 800af82:	d400      	bmi.n	800af86 <LoRaMacClassBRxBeacon+0x32>
 800af84:	e091      	b.n	800b0aa <LoRaMacClassBRxBeacon+0x156>
    {
        if( size == phyParam.BeaconFormat.BeaconSize )
 800af86:	ab07      	add	r3, sp, #28
 800af88:	781a      	ldrb	r2, [r3, #0]
 800af8a:	9905      	ldr	r1, [sp, #20]
 800af8c:	428a      	cmp	r2, r1
 800af8e:	d000      	beq.n	800af92 <LoRaMacClassBRxBeacon+0x3e>
 800af90:	e081      	b.n	800b096 <LoRaMacClassBRxBeacon+0x142>
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800af92:	785e      	ldrb	r6, [r3, #1]
 800af94:	789b      	ldrb	r3, [r3, #2]
            // Field RFU1 and RFU2 have variable sizes. It depends on the region specific implementation

            // Read CRC1 field from the frame
            beaconCrc0 = ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4] ) & 0x00FF;
            beaconCrc0 |= ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4 + 1] << 8 ) & 0xFF00;
            crc0 = BeaconCrc( payload, phyParam.BeaconFormat.Rfu1Size + 4 );
 800af96:	1d31      	adds	r1, r6, #4
 800af98:	0028      	movs	r0, r5
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800af9a:	9304      	str	r3, [sp, #16]
            crc0 = BeaconCrc( payload, phyParam.BeaconFormat.Rfu1Size + 4 );
 800af9c:	f7ff fe8c 	bl	800acb8 <BeaconCrc>
            beaconCrc0 |= ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4 + 1] << 8 ) & 0xFF00;
 800afa0:	19a9      	adds	r1, r5, r6
 800afa2:	794a      	ldrb	r2, [r1, #5]
 800afa4:	790b      	ldrb	r3, [r1, #4]
 800afa6:	0212      	lsls	r2, r2, #8
    bool beaconProcessed = false;
 800afa8:	2700      	movs	r7, #0

            // Validate the first crc of the beacon frame
            if( crc0 == beaconCrc0 )
 800afaa:	4313      	orrs	r3, r2
 800afac:	4283      	cmp	r3, r0
 800afae:	d117      	bne.n	800afe0 <LoRaMacClassBRxBeacon+0x8c>
            {
                // Read Time field from the frame
                Ctx.BeaconCtx.BeaconTime.Seconds  = ( ( uint32_t )payload[phyParam.BeaconFormat.Rfu1Size] ) & 0x000000FF;
 800afb0:	5daa      	ldrb	r2, [r5, r6]
 800afb2:	6162      	str	r2, [r4, #20]
                Ctx.BeaconCtx.BeaconTime.Seconds |= ( ( uint32_t )( payload[phyParam.BeaconFormat.Rfu1Size + 1] << 8 ) ) & 0x0000FF00;
 800afb4:	784b      	ldrb	r3, [r1, #1]
 800afb6:	021b      	lsls	r3, r3, #8
 800afb8:	431a      	orrs	r2, r3
 800afba:	6162      	str	r2, [r4, #20]
                Ctx.BeaconCtx.BeaconTime.Seconds |= ( ( uint32_t )( payload[phyParam.BeaconFormat.Rfu1Size + 2] << 16 ) ) & 0x00FF0000;
 800afbc:	788b      	ldrb	r3, [r1, #2]
 800afbe:	041b      	lsls	r3, r3, #16
 800afc0:	4313      	orrs	r3, r2
 800afc2:	6163      	str	r3, [r4, #20]
                Ctx.BeaconCtx.BeaconTime.Seconds |= ( ( uint32_t )( payload[phyParam.BeaconFormat.Rfu1Size + 3] << 24 ) ) & 0xFF000000;
 800afc4:	78ca      	ldrb	r2, [r1, #3]
                Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
 800afc6:	8327      	strh	r7, [r4, #24]
                Ctx.BeaconCtx.BeaconTime.Seconds |= ( ( uint32_t )( payload[phyParam.BeaconFormat.Rfu1Size + 3] << 24 ) ) & 0xFF000000;
 800afc8:	0612      	lsls	r2, r2, #24
 800afca:	4313      	orrs	r3, r2
 800afcc:	6163      	str	r3, [r4, #20]
                Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Time = Ctx.BeaconCtx.BeaconTime;
 800afce:	0023      	movs	r3, r4
 800afd0:	0022      	movs	r2, r4
 800afd2:	3398      	adds	r3, #152	; 0x98
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	3214      	adds	r2, #20
 800afd8:	3304      	adds	r3, #4
 800afda:	ca03      	ldmia	r2!, {r0, r1}
 800afdc:	c303      	stmia	r3!, {r0, r1}
                beaconProcessed = true;
 800afde:	3701      	adds	r7, #1
            }

            // Read CRC2 field from the frame
            beaconCrc1 = ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2 + 7 + phyParam.BeaconFormat.Rfu2Size] ) & 0x00FF;
 800afe0:	0033      	movs	r3, r6
 800afe2:	9a04      	ldr	r2, [sp, #16]
 800afe4:	330d      	adds	r3, #13
 800afe6:	189b      	adds	r3, r3, r2
 800afe8:	9302      	str	r3, [sp, #8]
            beaconCrc1 |= ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2 + 7 + phyParam.BeaconFormat.Rfu2Size + 1] << 8 ) & 0xFF00;
            crc1 = BeaconCrc( &payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2], 7 + phyParam.BeaconFormat.Rfu2Size );
 800afea:	1db3      	adds	r3, r6, #6
 800afec:	18eb      	adds	r3, r5, r3
 800afee:	9303      	str	r3, [sp, #12]
 800aff0:	1dd1      	adds	r1, r2, #7
 800aff2:	9803      	ldr	r0, [sp, #12]
 800aff4:	f7ff fe60 	bl	800acb8 <BeaconCrc>
            beaconCrc1 |= ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2 + 7 + phyParam.BeaconFormat.Rfu2Size + 1] << 8 ) & 0xFF00;
 800aff8:	9b02      	ldr	r3, [sp, #8]
 800affa:	18eb      	adds	r3, r5, r3
 800affc:	785a      	ldrb	r2, [r3, #1]
 800affe:	9b02      	ldr	r3, [sp, #8]
 800b000:	0212      	lsls	r2, r2, #8
 800b002:	5ceb      	ldrb	r3, [r5, r3]

            // Validate the second crc of the beacon frame
            if( crc1 == beaconCrc1 )
 800b004:	4313      	orrs	r3, r2
 800b006:	4283      	cmp	r3, r0
 800b008:	d10b      	bne.n	800b022 <LoRaMacClassBRxBeacon+0xce>
            {
                // Read GwSpecific field from the frame
                // The GwSpecific field contains 1 byte InfoDesc and 6 bytes Info
                Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.InfoDesc = payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2];
 800b00a:	0023      	movs	r3, r4
 800b00c:	3398      	adds	r3, #152	; 0x98
 800b00e:	6818      	ldr	r0, [r3, #0]
 800b010:	9b03      	ldr	r3, [sp, #12]
                memcpy1( Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.Info, &payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2 + 1], 6 );
 800b012:	1df1      	adds	r1, r6, #7
                Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.InfoDesc = payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2];
 800b014:	781b      	ldrb	r3, [r3, #0]
                memcpy1( Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.Info, &payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2 + 1], 6 );
 800b016:	2206      	movs	r2, #6
                Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.InfoDesc = payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2];
 800b018:	7543      	strb	r3, [r0, #21]
                memcpy1( Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.Info, &payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2 + 1], 6 );
 800b01a:	1869      	adds	r1, r5, r1
 800b01c:	3016      	adds	r0, #22
 800b01e:	f003 fcd0 	bl	800e9c2 <memcpy1>
            }

            // Reset beacon variables, if one of the crc is valid
            if( beaconProcessed == true )
 800b022:	2f00      	cmp	r7, #0
 800b024:	d037      	beq.n	800b096 <LoRaMacClassBRxBeacon+0x142>
            {
                TimerTime_t time = Radio.TimeOnAir( MODEM_LORA, size );
 800b026:	466b      	mov	r3, sp
 800b028:	7d19      	ldrb	r1, [r3, #20]
 800b02a:	4b22      	ldr	r3, [pc, #136]	; (800b0b4 <LoRaMacClassBRxBeacon+0x160>)
 800b02c:	2001      	movs	r0, #1
 800b02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                SysTime_t timeOnAir;
                timeOnAir.Seconds = time / 1000;
                timeOnAir.SubSeconds = time - timeOnAir.Seconds * 1000;
 800b030:	ae08      	add	r6, sp, #32
                TimerTime_t time = Radio.TimeOnAir( MODEM_LORA, size );
 800b032:	9302      	str	r3, [sp, #8]
 800b034:	4798      	blx	r3
                timeOnAir.Seconds = time / 1000;
 800b036:	21fa      	movs	r1, #250	; 0xfa
 800b038:	0089      	lsls	r1, r1, #2
                TimerTime_t time = Radio.TimeOnAir( MODEM_LORA, size );
 800b03a:	0005      	movs	r5, r0
                timeOnAir.Seconds = time / 1000;
 800b03c:	f7f5 f882 	bl	8000144 <__udivsi3>
 800b040:	0003      	movs	r3, r0
                timeOnAir.SubSeconds = time - timeOnAir.Seconds * 1000;
 800b042:	20fa      	movs	r0, #250	; 0xfa

                Ctx.BeaconCtx.LastBeaconRx = Ctx.BeaconCtx.BeaconTime;
 800b044:	0022      	movs	r2, r4
 800b046:	0021      	movs	r1, r4
                timeOnAir.SubSeconds = time - timeOnAir.Seconds * 1000;
 800b048:	0080      	lsls	r0, r0, #2
 800b04a:	4358      	muls	r0, r3
 800b04c:	1a2d      	subs	r5, r5, r0
 800b04e:	80b5      	strh	r5, [r6, #4]
                Ctx.BeaconCtx.LastBeaconRx = Ctx.BeaconCtx.BeaconTime;
 800b050:	321c      	adds	r2, #28
 800b052:	3114      	adds	r1, #20
 800b054:	c921      	ldmia	r1!, {r0, r5}
 800b056:	c221      	stmia	r2!, {r0, r5}
                Ctx.BeaconCtx.LastBeaconRx.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800b058:	4917      	ldr	r1, [pc, #92]	; (800b0b8 <LoRaMacClassBRxBeacon+0x164>)
 800b05a:	69e2      	ldr	r2, [r4, #28]

                // Update system time.
                SysTimeSet( SysTimeAdd( Ctx.BeaconCtx.LastBeaconRx, timeOnAir ) );
 800b05c:	a80a      	add	r0, sp, #40	; 0x28
                Ctx.BeaconCtx.LastBeaconRx.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800b05e:	1851      	adds	r1, r2, r1
                SysTimeSet( SysTimeAdd( Ctx.BeaconCtx.LastBeaconRx, timeOnAir ) );
 800b060:	9a09      	ldr	r2, [sp, #36]	; 0x24
                Ctx.BeaconCtx.LastBeaconRx.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800b062:	61e1      	str	r1, [r4, #28]
                SysTimeSet( SysTimeAdd( Ctx.BeaconCtx.LastBeaconRx, timeOnAir ) );
 800b064:	9200      	str	r2, [sp, #0]
 800b066:	6a22      	ldr	r2, [r4, #32]
 800b068:	f003 fa42 	bl	800e4f0 <SysTimeAdd>
 800b06c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b06e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b070:	f003 fa6e 	bl	800e550 <SysTimeSet>

                Ctx.BeaconCtx.Ctrl.BeaconAcquired = 1;
                Ctx.BeaconCtx.Ctrl.BeaconMode = 1;
 800b074:	2303      	movs	r3, #3
 800b076:	7b22      	ldrb	r2, [r4, #12]
                ResetWindowTimeout( );
                Ctx.BeaconState = BEACON_STATE_LOCKED;

                LoRaMacClassBBeaconTimerEvent( NULL );
 800b078:	2000      	movs	r0, #0
                Ctx.BeaconCtx.Ctrl.BeaconMode = 1;
 800b07a:	439a      	bics	r2, r3
 800b07c:	4313      	orrs	r3, r2
 800b07e:	7323      	strb	r3, [r4, #12]
    Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 800b080:	2308      	movs	r3, #8
 800b082:	8623      	strh	r3, [r4, #48]	; 0x30
    Ctx.PingSlotCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 800b084:	80e3      	strh	r3, [r4, #6]
    Ctx.BeaconCtx.BeaconWindowMovement  = CLASSB_WINDOW_MOVE_DEFAULT;
 800b086:	3b06      	subs	r3, #6
 800b088:	6363      	str	r3, [r4, #52]	; 0x34
                Ctx.BeaconState = BEACON_STATE_LOCKED;
 800b08a:	0023      	movs	r3, r4
 800b08c:	2205      	movs	r2, #5
 800b08e:	3344      	adds	r3, #68	; 0x44
 800b090:	701a      	strb	r2, [r3, #0]
                LoRaMacClassBBeaconTimerEvent( NULL );
 800b092:	f7ff fd87 	bl	800aba4 <LoRaMacClassBBeaconTimerEvent>
            }
        }

        if( Ctx.BeaconState == BEACON_STATE_RX )
 800b096:	3444      	adds	r4, #68	; 0x44
 800b098:	7823      	ldrb	r3, [r4, #0]
        // If it receives a frame which is
        // 1. not a beacon or
        // 2. a beacon with a crc fail
        // the MAC shall ignore the frame completely. Thus, the function must always return true, even if no
        // valid beacon has been received.
        beaconProcessed = true;
 800b09a:	2601      	movs	r6, #1
        if( Ctx.BeaconState == BEACON_STATE_RX )
 800b09c:	2b09      	cmp	r3, #9
 800b09e:	d104      	bne.n	800b0aa <LoRaMacClassBRxBeacon+0x156>
            Ctx.BeaconState = BEACON_STATE_TIMEOUT;
 800b0a0:	3b07      	subs	r3, #7
            LoRaMacClassBBeaconTimerEvent( NULL );
 800b0a2:	2000      	movs	r0, #0
            Ctx.BeaconState = BEACON_STATE_TIMEOUT;
 800b0a4:	7023      	strb	r3, [r4, #0]
            LoRaMacClassBBeaconTimerEvent( NULL );
 800b0a6:	f7ff fd7d 	bl	800aba4 <LoRaMacClassBBeaconTimerEvent>
    }
    return beaconProcessed;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800b0aa:	0030      	movs	r0, r6
 800b0ac:	b00d      	add	sp, #52	; 0x34
 800b0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0b0:	20001654 	.word	0x20001654
 800b0b4:	0801074c 	.word	0x0801074c
 800b0b8:	12d53d80 	.word	0x12d53d80

0800b0bc <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
#ifdef LORAMAC_CLASSB_ENABLED
    if( ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) ||
 800b0bc:	4b05      	ldr	r3, [pc, #20]	; (800b0d4 <LoRaMacClassBIsBeaconExpected+0x18>)
        ( Ctx.BeaconState == BEACON_STATE_RX ) )
    {
        return true;
 800b0be:	2001      	movs	r0, #1
    if( ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) ||
 800b0c0:	7b1a      	ldrb	r2, [r3, #12]
 800b0c2:	06d2      	lsls	r2, r2, #27
 800b0c4:	d405      	bmi.n	800b0d2 <LoRaMacClassBIsBeaconExpected+0x16>
        ( Ctx.BeaconState == BEACON_STATE_RX ) )
 800b0c6:	3344      	adds	r3, #68	; 0x44
    if( ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) ||
 800b0c8:	7818      	ldrb	r0, [r3, #0]
 800b0ca:	3809      	subs	r0, #9
 800b0cc:	4243      	negs	r3, r0
 800b0ce:	4158      	adcs	r0, r3
 800b0d0:	b2c0      	uxtb	r0, r0
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800b0d2:	4770      	bx	lr
 800b0d4:	20001654 	.word	0x20001654

0800b0d8 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
#ifdef LORAMAC_CLASSB_ENABLED
    if( Ctx.PingSlotState == PINGSLOT_STATE_RX )
 800b0d8:	4b03      	ldr	r3, [pc, #12]	; (800b0e8 <LoRaMacClassBIsPingExpected+0x10>)
 800b0da:	3345      	adds	r3, #69	; 0x45
 800b0dc:	7818      	ldrb	r0, [r3, #0]
 800b0de:	3803      	subs	r0, #3
 800b0e0:	4243      	negs	r3, r0
 800b0e2:	4158      	adcs	r0, r3
 800b0e4:	b2c0      	uxtb	r0, r0
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800b0e6:	4770      	bx	lr
 800b0e8:	20001654 	.word	0x20001654

0800b0ec <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
#ifdef LORAMAC_CLASSB_ENABLED
    if( Ctx.MulticastSlotState == PINGSLOT_STATE_RX )
 800b0ec:	4b03      	ldr	r3, [pc, #12]	; (800b0fc <LoRaMacClassBIsMulticastExpected+0x10>)
 800b0ee:	3346      	adds	r3, #70	; 0x46
 800b0f0:	7818      	ldrb	r0, [r3, #0]
 800b0f2:	3803      	subs	r0, #3
 800b0f4:	4243      	negs	r3, r0
 800b0f6:	4158      	adcs	r0, r3
 800b0f8:	b2c0      	uxtb	r0, r0
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800b0fa:	4770      	bx	lr
 800b0fc:	20001654 	.word	0x20001654

0800b100 <LoRaMacClassBIsAcquisitionPending>:

bool LoRaMacClassBIsAcquisitionPending( void )
{
#ifdef LORAMAC_CLASSB_ENABLED
    if( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 )
 800b100:	4b02      	ldr	r3, [pc, #8]	; (800b10c <LoRaMacClassBIsAcquisitionPending+0xc>)
 800b102:	7b18      	ldrb	r0, [r3, #12]
 800b104:	06c0      	lsls	r0, r0, #27
 800b106:	0fc0      	lsrs	r0, r0, #31
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800b108:	4770      	bx	lr
 800b10a:	46c0      	nop			; (mov r8, r8)
 800b10c:	20001654 	.word	0x20001654

0800b110 <LoRaMacClassBSetBeaconState>:
{
 800b110:	b510      	push	{r4, lr}
 800b112:	4c0a      	ldr	r4, [pc, #40]	; (800b13c <LoRaMacClassBSetBeaconState+0x2c>)
    if( beaconState == BEACON_STATE_ACQUISITION )
 800b114:	2800      	cmp	r0, #0
 800b116:	d10b      	bne.n	800b130 <LoRaMacClassBSetBeaconState+0x20>
        if( ( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 ) &&
 800b118:	7b23      	ldrb	r3, [r4, #12]
            Ctx.BeaconState = BEACON_STATE_ACQUISITION_BY_TIME;
 800b11a:	3444      	adds	r4, #68	; 0x44
        if( ( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 ) &&
 800b11c:	075b      	lsls	r3, r3, #29
 800b11e:	d504      	bpl.n	800b12a <LoRaMacClassBSetBeaconState+0x1a>
            ( LoRaMacClassBIsAcquisitionPending( ) == false ) )
 800b120:	f7ff ffee 	bl	800b100 <LoRaMacClassBIsAcquisitionPending>
            Ctx.BeaconState = BEACON_STATE_ACQUISITION_BY_TIME;
 800b124:	2301      	movs	r3, #1
        if( ( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 ) &&
 800b126:	2800      	cmp	r0, #0
 800b128:	d000      	beq.n	800b12c <LoRaMacClassBSetBeaconState+0x1c>
           Ctx.BeaconState = beaconState;
 800b12a:	2300      	movs	r3, #0
 800b12c:	7023      	strb	r3, [r4, #0]
}
 800b12e:	bd10      	pop	{r4, pc}
        if( ( Ctx.BeaconState != BEACON_STATE_ACQUISITION ) &&
 800b130:	3444      	adds	r4, #68	; 0x44
 800b132:	7823      	ldrb	r3, [r4, #0]
 800b134:	2b01      	cmp	r3, #1
 800b136:	d9fa      	bls.n	800b12e <LoRaMacClassBSetBeaconState+0x1e>
            Ctx.BeaconState = beaconState;
 800b138:	7020      	strb	r0, [r4, #0]
}
 800b13a:	e7f8      	b.n	800b12e <LoRaMacClassBSetBeaconState+0x1e>
 800b13c:	20001654 	.word	0x20001654

0800b140 <LoRaMacClassBIsAcquisitionInProgress>:
{
 800b140:	b510      	push	{r4, lr}
    if( Ctx.BeaconState == BEACON_STATE_ACQUISITION_BY_TIME )
 800b142:	4b04      	ldr	r3, [pc, #16]	; (800b154 <LoRaMacClassBIsAcquisitionInProgress+0x14>)
 800b144:	3344      	adds	r3, #68	; 0x44
 800b146:	781b      	ldrb	r3, [r3, #0]
        return true;
 800b148:	0018      	movs	r0, r3
    if( Ctx.BeaconState == BEACON_STATE_ACQUISITION_BY_TIME )
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d001      	beq.n	800b152 <LoRaMacClassBIsAcquisitionInProgress+0x12>
    if( LoRaMacClassBIsAcquisitionPending( ) == true )
 800b14e:	f7ff ffd7 	bl	800b100 <LoRaMacClassBIsAcquisitionPending>
}
 800b152:	bd10      	pop	{r4, pc}
 800b154:	20001654 	.word	0x20001654

0800b158 <LoRaMacClassBIsBeaconModeActive>:

bool LoRaMacClassBIsBeaconModeActive( void )
{
#ifdef LORAMAC_CLASSB_ENABLED
    if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) ||
 800b158:	2201      	movs	r2, #1
 800b15a:	4b06      	ldr	r3, [pc, #24]	; (800b174 <LoRaMacClassBIsBeaconModeActive+0x1c>)
        ( Ctx.BeaconState == BEACON_STATE_ACQUISITION_BY_TIME ) )
    {
        return true;
 800b15c:	0010      	movs	r0, r2
    if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) ||
 800b15e:	7b19      	ldrb	r1, [r3, #12]
 800b160:	4211      	tst	r1, r2
 800b162:	d105      	bne.n	800b170 <LoRaMacClassBIsBeaconModeActive+0x18>
        ( Ctx.BeaconState == BEACON_STATE_ACQUISITION_BY_TIME ) )
 800b164:	3344      	adds	r3, #68	; 0x44
    if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) ||
 800b166:	7818      	ldrb	r0, [r3, #0]
 800b168:	3801      	subs	r0, #1
 800b16a:	4243      	negs	r3, r0
 800b16c:	4158      	adcs	r0, r3
 800b16e:	b2c0      	uxtb	r0, r0
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800b170:	4770      	bx	lr
 800b172:	46c0      	nop			; (mov r8, r8)
 800b174:	20001654 	.word	0x20001654

0800b178 <LoRaMacClassBSetPingSlotInfo>:
    return 128 / ( 1 << periodicity );
 800b178:	2180      	movs	r1, #128	; 0x80
 800b17a:	4101      	asrs	r1, r0
    return CLASSB_BEACON_WINDOW_SLOTS / pingNb;
 800b17c:	2080      	movs	r0, #128	; 0x80

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
 800b17e:	4b06      	ldr	r3, [pc, #24]	; (800b198 <LoRaMacClassBSetPingSlotInfo+0x20>)
{
 800b180:	b510      	push	{r4, lr}
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
 800b182:	33bc      	adds	r3, #188	; 0xbc
 800b184:	681c      	ldr	r4, [r3, #0]
    return CLASSB_BEACON_WINDOW_SLOTS / pingNb;
 800b186:	0140      	lsls	r0, r0, #5
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
 800b188:	7061      	strb	r1, [r4, #1]
    return CLASSB_BEACON_WINDOW_SLOTS / pingNb;
 800b18a:	b2c9      	uxtb	r1, r1
 800b18c:	f7f5 f864 	bl	8000258 <__divsi3>
    Ctx.NvmCtx->PingSlotCtx.PingPeriod = CalcPingPeriod( Ctx.NvmCtx->PingSlotCtx.PingNb );
 800b190:	8060      	strh	r0, [r4, #2]
    NvmContextChange( );
 800b192:	f7ff fcbd 	bl	800ab10 <NvmContextChange>
#endif // LORAMAC_CLASSB_ENABLED
}
 800b196:	bd10      	pop	{r4, pc}
 800b198:	20001654 	.word	0x20001654

0800b19c <LoRaMacClassBResumeBeaconing>:
}

void LoRaMacClassBResumeBeaconing( void )
{
#ifdef LORAMAC_CLASSB_ENABLED
    if( Ctx.BeaconState == BEACON_STATE_HALT )
 800b19c:	490a      	ldr	r1, [pc, #40]	; (800b1c8 <LoRaMacClassBResumeBeaconing+0x2c>)
{
 800b19e:	b510      	push	{r4, lr}
    if( Ctx.BeaconState == BEACON_STATE_HALT )
 800b1a0:	000a      	movs	r2, r1
 800b1a2:	3244      	adds	r2, #68	; 0x44
 800b1a4:	7813      	ldrb	r3, [r2, #0]
 800b1a6:	2b06      	cmp	r3, #6
 800b1a8:	d10c      	bne.n	800b1c4 <LoRaMacClassBResumeBeaconing+0x28>
    {
        Ctx.BeaconCtx.Ctrl.ResumeBeaconing = 1;
 800b1aa:	7b08      	ldrb	r0, [r1, #12]
 800b1ac:	331a      	adds	r3, #26
 800b1ae:	4303      	orrs	r3, r0
 800b1b0:	730b      	strb	r3, [r1, #12]

        // Set default state
        Ctx.BeaconState = BEACON_STATE_LOCKED;
 800b1b2:	2105      	movs	r1, #5
 800b1b4:	7011      	strb	r1, [r2, #0]

        if( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 0 )
 800b1b6:	079b      	lsls	r3, r3, #30
 800b1b8:	d401      	bmi.n	800b1be <LoRaMacClassBResumeBeaconing+0x22>
        {
            // Set the default state for beacon less operation
            Ctx.BeaconState = BEACON_STATE_REACQUISITION;
 800b1ba:	2304      	movs	r3, #4
 800b1bc:	7013      	strb	r3, [r2, #0]
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
 800b1be:	2000      	movs	r0, #0
 800b1c0:	f7ff fcf0 	bl	800aba4 <LoRaMacClassBBeaconTimerEvent>
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800b1c4:	bd10      	pop	{r4, pc}
 800b1c6:	46c0      	nop			; (mov r8, r8)
 800b1c8:	20001654 	.word	0x20001654

0800b1cc <LoRaMacClassBMibGetRequestConfirm>:
LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
#ifdef LORAMAC_CLASSB_ENABLED
    LoRaMacStatus_t status;

    switch( mibGet->Type )
 800b1cc:	7803      	ldrb	r3, [r0, #0]
 800b1ce:	2b42      	cmp	r3, #66	; 0x42
 800b1d0:	d104      	bne.n	800b1dc <LoRaMacClassBMibGetRequestConfirm+0x10>
    {
        case MIB_PING_SLOT_DATARATE:
        {
            mibGet->Param.PingSlotDatarate = Ctx.NvmCtx->PingSlotCtx.Datarate;
 800b1d2:	4b03      	ldr	r3, [pc, #12]	; (800b1e0 <LoRaMacClassBMibGetRequestConfirm+0x14>)
 800b1d4:	33bc      	adds	r3, #188	; 0xbc
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	7a1b      	ldrb	r3, [r3, #8]
 800b1da:	7103      	strb	r3, [r0, #4]
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 800b1dc:	2002      	movs	r0, #2
 800b1de:	4770      	bx	lr
 800b1e0:	20001654 	.word	0x20001654

0800b1e4 <LoRaMacMibClassBSetRequestConfirm>:
LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
#ifdef LORAMAC_CLASSB_ENABLED
    LoRaMacStatus_t status;

    switch( mibSet->Type )
 800b1e4:	7803      	ldrb	r3, [r0, #0]
{
 800b1e6:	b510      	push	{r4, lr}
    switch( mibSet->Type )
 800b1e8:	2b42      	cmp	r3, #66	; 0x42
 800b1ea:	d106      	bne.n	800b1fa <LoRaMacMibClassBSetRequestConfirm+0x16>
    {
        case MIB_PING_SLOT_DATARATE:
        {
            Ctx.NvmCtx->PingSlotCtx.Datarate = mibSet->Param.PingSlotDatarate;
 800b1ec:	4b04      	ldr	r3, [pc, #16]	; (800b200 <LoRaMacMibClassBSetRequestConfirm+0x1c>)
 800b1ee:	7902      	ldrb	r2, [r0, #4]
 800b1f0:	33bc      	adds	r3, #188	; 0xbc
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	721a      	strb	r2, [r3, #8]
            NvmContextChange( );
 800b1f6:	f7ff fc8b 	bl	800ab10 <NvmContextChange>
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 800b1fa:	2002      	movs	r0, #2
 800b1fc:	bd10      	pop	{r4, pc}
 800b1fe:	46c0      	nop			; (mov r8, r8)
 800b200:	20001654 	.word	0x20001654

0800b204 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 800b204:	b510      	push	{r4, lr}
#ifdef LORAMAC_CLASSB_ENABLED
    if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800b206:	200c      	movs	r0, #12
 800b208:	f000 fe98 	bl	800bf3c <LoRaMacConfirmQueueIsCmdActive>
 800b20c:	2800      	cmp	r0, #0
 800b20e:	d00c      	beq.n	800b22a <LoRaMacClassBPingSlotInfoAns+0x26>
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800b210:	210c      	movs	r1, #12
 800b212:	2000      	movs	r0, #0
 800b214:	f000 fe3c 	bl	800be90 <LoRaMacConfirmQueueSetStatus>
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
 800b218:	4b04      	ldr	r3, [pc, #16]	; (800b22c <LoRaMacClassBPingSlotInfoAns+0x28>)
 800b21a:	33bc      	adds	r3, #188	; 0xbc
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	2301      	movs	r3, #1
 800b220:	7811      	ldrb	r1, [r2, #0]
 800b222:	430b      	orrs	r3, r1
 800b224:	7013      	strb	r3, [r2, #0]
        NvmContextChange( );
 800b226:	f7ff fc73 	bl	800ab10 <NvmContextChange>
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800b22a:	bd10      	pop	{r4, pc}
 800b22c:	20001654 	.word	0x20001654

0800b230 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 800b230:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b232:	b085      	sub	sp, #20
 800b234:	1e0e      	subs	r6, r1, #0
 800b236:	4f23      	ldr	r7, [pc, #140]	; (800b2c4 <LoRaMacClassBPingSlotChannelReq+0x94>)
 800b238:	9001      	str	r0, [sp, #4]
#ifdef LORAMAC_CLASSB_ENABLED
    uint8_t status = 0x03;
    VerifyParams_t verify;
    bool isCustomFreq = false;

    if( frequency != 0 )
 800b23a:	d02a      	beq.n	800b292 <LoRaMacClassBPingSlotChannelReq+0x62>
 800b23c:	003b      	movs	r3, r7
 800b23e:	33ac      	adds	r3, #172	; 0xac
 800b240:	681b      	ldr	r3, [r3, #0]
    {
        isCustomFreq = true;
        verify.Frequency = frequency;
 800b242:	9103      	str	r1, [sp, #12]
        if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_FREQUENCY ) == false )
 800b244:	2200      	movs	r2, #0
 800b246:	7818      	ldrb	r0, [r3, #0]
 800b248:	a903      	add	r1, sp, #12
 800b24a:	f001 fc03 	bl	800ca54 <RegionVerify>
    uint8_t status = 0x03;
 800b24e:	2403      	movs	r4, #3
        if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_FREQUENCY ) == false )
 800b250:	1e05      	subs	r5, r0, #0
 800b252:	d101      	bne.n	800b258 <LoRaMacClassBPingSlotChannelReq+0x28>
        isCustomFreq = true;
 800b254:	3501      	adds	r5, #1
        {
            status &= 0xFE; // Channel frequency KO
 800b256:	3c01      	subs	r4, #1
        }
    }

    verify.DatarateParams.Datarate = datarate;
 800b258:	466b      	mov	r3, sp
 800b25a:	791b      	ldrb	r3, [r3, #4]
    verify.DatarateParams.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;

    if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_RX_DR ) == false )
 800b25c:	a903      	add	r1, sp, #12
    verify.DatarateParams.Datarate = datarate;
 800b25e:	b25b      	sxtb	r3, r3
 800b260:	9301      	str	r3, [sp, #4]
 800b262:	9a01      	ldr	r2, [sp, #4]
 800b264:	ab02      	add	r3, sp, #8
 800b266:	711a      	strb	r2, [r3, #4]
    verify.DatarateParams.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 800b268:	003b      	movs	r3, r7
 800b26a:	33b0      	adds	r3, #176	; 0xb0
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	aa02      	add	r2, sp, #8
 800b270:	3335      	adds	r3, #53	; 0x35
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	7153      	strb	r3, [r2, #5]
    if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_RX_DR ) == false )
 800b276:	003b      	movs	r3, r7
 800b278:	33ac      	adds	r3, #172	; 0xac
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	2207      	movs	r2, #7
 800b27e:	7818      	ldrb	r0, [r3, #0]
 800b280:	f001 fbe8 	bl	800ca54 <RegionVerify>
 800b284:	2302      	movs	r3, #2
 800b286:	2800      	cmp	r0, #0
 800b288:	d106      	bne.n	800b298 <LoRaMacClassBPingSlotChannelReq+0x68>
    {
        status &= 0xFD; // Datarate range KO
 800b28a:	439c      	bics	r4, r3

    return status;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 800b28c:	0020      	movs	r0, r4
 800b28e:	b005      	add	sp, #20
 800b290:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bool isCustomFreq = false;
 800b292:	000d      	movs	r5, r1
    uint8_t status = 0x03;
 800b294:	2403      	movs	r4, #3
 800b296:	e7df      	b.n	800b258 <LoRaMacClassBPingSlotChannelReq+0x28>
    if( status == 0x03 )
 800b298:	2c03      	cmp	r4, #3
 800b29a:	d110      	bne.n	800b2be <LoRaMacClassBPingSlotChannelReq+0x8e>
        if( isCustomFreq == true )
 800b29c:	37bc      	adds	r7, #188	; 0xbc
 800b29e:	683a      	ldr	r2, [r7, #0]
 800b2a0:	7811      	ldrb	r1, [r2, #0]
 800b2a2:	2d00      	cmp	r5, #0
 800b2a4:	d007      	beq.n	800b2b6 <LoRaMacClassBPingSlotChannelReq+0x86>
            Ctx.NvmCtx->PingSlotCtx.Ctrl.CustomFreq = 1;
 800b2a6:	430b      	orrs	r3, r1
 800b2a8:	7013      	strb	r3, [r2, #0]
            Ctx.NvmCtx->PingSlotCtx.Frequency = frequency;
 800b2aa:	6056      	str	r6, [r2, #4]
        Ctx.NvmCtx->PingSlotCtx.Datarate = datarate;
 800b2ac:	9b01      	ldr	r3, [sp, #4]
 800b2ae:	7213      	strb	r3, [r2, #8]
        NvmContextChange( );
 800b2b0:	f7ff fc2e 	bl	800ab10 <NvmContextChange>
 800b2b4:	e7ea      	b.n	800b28c <LoRaMacClassBPingSlotChannelReq+0x5c>
            Ctx.NvmCtx->PingSlotCtx.Ctrl.CustomFreq = 0;
 800b2b6:	4399      	bics	r1, r3
 800b2b8:	7011      	strb	r1, [r2, #0]
            Ctx.NvmCtx->PingSlotCtx.Frequency = 0;
 800b2ba:	6055      	str	r5, [r2, #4]
 800b2bc:	e7f6      	b.n	800b2ac <LoRaMacClassBPingSlotChannelReq+0x7c>
 800b2be:	001c      	movs	r4, r3
 800b2c0:	e7e4      	b.n	800b28c <LoRaMacClassBPingSlotChannelReq+0x5c>
 800b2c2:	46c0      	nop			; (mov r8, r8)
 800b2c4:	20001654 	.word	0x20001654

0800b2c8 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.BeaconCtx.BeaconTimingDelay = ( CLASSB_BEACON_DELAY_BEACON_TIMING_ANS * beaconTimingDelay );
 800b2c8:	231e      	movs	r3, #30
{
 800b2ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
    Ctx.BeaconCtx.BeaconTimingDelay = ( CLASSB_BEACON_DELAY_BEACON_TIMING_ANS * beaconTimingDelay );
 800b2cc:	4c18      	ldr	r4, [pc, #96]	; (800b330 <LoRaMacClassBBeaconTimingAns+0x68>)
 800b2ce:	4343      	muls	r3, r0
    Ctx.BeaconCtx.BeaconTimingChannel = beaconTimingChannel;
 800b2d0:	0025      	movs	r5, r4

    if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800b2d2:	200d      	movs	r0, #13
    Ctx.BeaconCtx.BeaconTimingChannel = beaconTimingChannel;
 800b2d4:	3538      	adds	r5, #56	; 0x38
{
 800b2d6:	0016      	movs	r6, r2
    Ctx.BeaconCtx.BeaconTimingDelay = ( CLASSB_BEACON_DELAY_BEACON_TIMING_ANS * beaconTimingDelay );
 800b2d8:	63e3      	str	r3, [r4, #60]	; 0x3c
    Ctx.BeaconCtx.BeaconTimingChannel = beaconTimingChannel;
 800b2da:	7029      	strb	r1, [r5, #0]
    if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800b2dc:	f000 fe2e 	bl	800bf3c <LoRaMacConfirmQueueIsCmdActive>
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	d013      	beq.n	800b30c <LoRaMacClassBBeaconTimingAns+0x44>
    {
        if( Ctx.BeaconCtx.BeaconTimingDelay > CLASSB_BEACON_INTERVAL )
 800b2e4:	23fa      	movs	r3, #250	; 0xfa
 800b2e6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b2e8:	025b      	lsls	r3, r3, #9
 800b2ea:	4299      	cmp	r1, r3
 800b2ec:	d90f      	bls.n	800b30e <LoRaMacClassBBeaconTimingAns+0x46>
        {
            // We missed the beacon already
            Ctx.BeaconCtx.BeaconTimingDelay = 0;
 800b2ee:	2300      	movs	r3, #0
            Ctx.BeaconCtx.BeaconTimingChannel = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND, MLME_BEACON_TIMING );
 800b2f0:	210d      	movs	r1, #13
 800b2f2:	2010      	movs	r0, #16
            Ctx.BeaconCtx.BeaconTimingDelay = 0;
 800b2f4:	63e3      	str	r3, [r4, #60]	; 0x3c
            Ctx.BeaconCtx.BeaconTimingChannel = 0;
 800b2f6:	702b      	strb	r3, [r5, #0]
        else
        {
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
            Ctx.BeaconCtx.Ctrl.BeaconChannelSet = 1;
            Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( lastRxDone + Ctx.BeaconCtx.BeaconTimingDelay );
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800b2f8:	f000 fdca 	bl	800be90 <LoRaMacConfirmQueueSetStatus>
        }

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
 800b2fc:	0023      	movs	r3, r4
 800b2fe:	33a0      	adds	r3, #160	; 0xa0
 800b300:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b302:	681b      	ldr	r3, [r3, #0]
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
 800b304:	3438      	adds	r4, #56	; 0x38
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
 800b306:	60da      	str	r2, [r3, #12]
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
 800b308:	7822      	ldrb	r2, [r4, #0]
 800b30a:	741a      	strb	r2, [r3, #16]
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800b30c:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 800b30e:	230c      	movs	r3, #12
            Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( lastRxDone + Ctx.BeaconCtx.BeaconTimingDelay );
 800b310:	466d      	mov	r5, sp
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 800b312:	7b22      	ldrb	r2, [r4, #12]
            Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( lastRxDone + Ctx.BeaconCtx.BeaconTimingDelay );
 800b314:	0028      	movs	r0, r5
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 800b316:	439a      	bics	r2, r3
 800b318:	4313      	orrs	r3, r2
            Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( lastRxDone + Ctx.BeaconCtx.BeaconTimingDelay );
 800b31a:	1989      	adds	r1, r1, r6
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 800b31c:	7323      	strb	r3, [r4, #12]
            Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( lastRxDone + Ctx.BeaconCtx.BeaconTimingDelay );
 800b31e:	f003 f98b 	bl	800e638 <SysTimeFromMs>
 800b322:	0023      	movs	r3, r4
 800b324:	3324      	adds	r3, #36	; 0x24
 800b326:	cd06      	ldmia	r5!, {r1, r2}
 800b328:	c306      	stmia	r3!, {r1, r2}
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800b32a:	2000      	movs	r0, #0
 800b32c:	210d      	movs	r1, #13
 800b32e:	e7e3      	b.n	800b2f8 <LoRaMacClassBBeaconTimingAns+0x30>
 800b330:	20001654 	.word	0x20001654

0800b334 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 800b334:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b336:	b08b      	sub	sp, #44	; 0x2c
#ifdef LORAMAC_CLASSB_ENABLED

    SysTime_t nextBeacon = SysTimeGet( );
 800b338:	ae06      	add	r6, sp, #24
 800b33a:	0030      	movs	r0, r6
 800b33c:	f003 f926 	bl	800e58c <SysTimeGet>
 800b340:	9c06      	ldr	r4, [sp, #24]
    uint32_t currentTimeMs = SysTimeToMs( nextBeacon );
 800b342:	6871      	ldr	r1, [r6, #4]
 800b344:	0020      	movs	r0, r4
 800b346:	f003 f958 	bl	800e5fa <SysTimeToMs>

    nextBeacon.Seconds = nextBeacon.Seconds + ( 128 - ( nextBeacon.Seconds % 128 ) );
 800b34a:	237f      	movs	r3, #127	; 0x7f
 800b34c:	439c      	bics	r4, r3
 800b34e:	0023      	movs	r3, r4
 800b350:	9403      	str	r4, [sp, #12]
    nextBeacon.SubSeconds = 0;

    Ctx.BeaconCtx.NextBeaconRx = nextBeacon;
 800b352:	4c20      	ldr	r4, [pc, #128]	; (800b3d4 <LoRaMacClassBDeviceTimeAns+0xa0>)
    nextBeacon.Seconds = nextBeacon.Seconds + ( 128 - ( nextBeacon.Seconds % 128 ) );
 800b354:	3380      	adds	r3, #128	; 0x80
    Ctx.BeaconCtx.NextBeaconRx = nextBeacon;
 800b356:	2500      	movs	r5, #0
 800b358:	9306      	str	r3, [sp, #24]
 800b35a:	0023      	movs	r3, r4
 800b35c:	80b5      	strh	r5, [r6, #4]
 800b35e:	3324      	adds	r3, #36	; 0x24
 800b360:	ce06      	ldmia	r6!, {r1, r2}
 800b362:	c306      	stmia	r3!, {r1, r2}
    Ctx.BeaconCtx.LastBeaconRx = SysTimeSub( Ctx.BeaconCtx.NextBeaconRx, ( SysTime_t ){ .Seconds = CLASSB_BEACON_INTERVAL / 1000, .SubSeconds = 0 } );
 800b364:	ab08      	add	r3, sp, #32
 800b366:	809d      	strh	r5, [r3, #4]
 800b368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b36a:	ae04      	add	r6, sp, #16
 800b36c:	9300      	str	r3, [sp, #0]
 800b36e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b370:	2380      	movs	r3, #128	; 0x80
 800b372:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    uint32_t currentTimeMs = SysTimeToMs( nextBeacon );
 800b374:	0007      	movs	r7, r0
    Ctx.BeaconCtx.LastBeaconRx = SysTimeSub( Ctx.BeaconCtx.NextBeaconRx, ( SysTime_t ){ .Seconds = CLASSB_BEACON_INTERVAL / 1000, .SubSeconds = 0 } );
 800b376:	0030      	movs	r0, r6
 800b378:	f003 f8d4 	bl	800e524 <SysTimeSub>
 800b37c:	0023      	movs	r3, r4
 800b37e:	331c      	adds	r3, #28

    if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800b380:	2009      	movs	r0, #9
    Ctx.BeaconCtx.LastBeaconRx = SysTimeSub( Ctx.BeaconCtx.NextBeaconRx, ( SysTime_t ){ .Seconds = CLASSB_BEACON_INTERVAL / 1000, .SubSeconds = 0 } );
 800b382:	ce06      	ldmia	r6!, {r1, r2}
 800b384:	c306      	stmia	r3!, {r1, r2}
    if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800b386:	f000 fdd9 	bl	800bf3c <LoRaMacConfirmQueueIsCmdActive>
 800b38a:	42a8      	cmp	r0, r5
 800b38c:	d00d      	beq.n	800b3aa <LoRaMacClassBDeviceTimeAns+0x76>
    {
        if( currentTimeMs > SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) )
 800b38e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b390:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b392:	f003 f932 	bl	800e5fa <SysTimeToMs>
 800b396:	42b8      	cmp	r0, r7
 800b398:	d209      	bcs.n	800b3ae <LoRaMacClassBDeviceTimeAns+0x7a>
            // We missed the beacon already
            Ctx.BeaconCtx.LastBeaconRx.Seconds = 0;
            Ctx.BeaconCtx.LastBeaconRx.SubSeconds = 0;
            Ctx.BeaconCtx.NextBeaconRx.Seconds = 0;
            Ctx.BeaconCtx.NextBeaconRx.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND, MLME_DEVICE_TIME );
 800b39a:	2109      	movs	r1, #9
 800b39c:	2010      	movs	r0, #16
            Ctx.BeaconCtx.LastBeaconRx.Seconds = 0;
 800b39e:	61e5      	str	r5, [r4, #28]
            Ctx.BeaconCtx.LastBeaconRx.SubSeconds = 0;
 800b3a0:	8425      	strh	r5, [r4, #32]
            Ctx.BeaconCtx.NextBeaconRx.Seconds = 0;
 800b3a2:	6265      	str	r5, [r4, #36]	; 0x24
            Ctx.BeaconCtx.NextBeaconRx.SubSeconds = 0;
 800b3a4:	8525      	strh	r5, [r4, #40]	; 0x28
        {
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
            Ctx.BeaconCtx.BeaconTimingDelay = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTimeMs;
            Ctx.BeaconCtx.BeaconTime.Seconds = nextBeacon.Seconds - UNIX_GPS_EPOCH_OFFSET - 128;
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800b3a6:	f000 fd73 	bl	800be90 <LoRaMacConfirmQueueSetStatus>
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800b3aa:	b00b      	add	sp, #44	; 0x2c
 800b3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 800b3ae:	2304      	movs	r3, #4
 800b3b0:	7b22      	ldrb	r2, [r4, #12]
            Ctx.BeaconCtx.BeaconTimingDelay = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTimeMs;
 800b3b2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 800b3b4:	4313      	orrs	r3, r2
            Ctx.BeaconCtx.BeaconTimingDelay = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTimeMs;
 800b3b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 800b3b8:	7323      	strb	r3, [r4, #12]
            Ctx.BeaconCtx.BeaconTimingDelay = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTimeMs;
 800b3ba:	f003 f91e 	bl	800e5fa <SysTimeToMs>
            Ctx.BeaconCtx.BeaconTime.Seconds = nextBeacon.Seconds - UNIX_GPS_EPOCH_OFFSET - 128;
 800b3be:	4a06      	ldr	r2, [pc, #24]	; (800b3d8 <LoRaMacClassBDeviceTimeAns+0xa4>)
 800b3c0:	9b03      	ldr	r3, [sp, #12]
 800b3c2:	4694      	mov	ip, r2
            Ctx.BeaconCtx.BeaconTimingDelay = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTimeMs;
 800b3c4:	1bc7      	subs	r7, r0, r7
            Ctx.BeaconCtx.BeaconTime.Seconds = nextBeacon.Seconds - UNIX_GPS_EPOCH_OFFSET - 128;
 800b3c6:	4463      	add	r3, ip
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800b3c8:	2109      	movs	r1, #9
 800b3ca:	0028      	movs	r0, r5
            Ctx.BeaconCtx.BeaconTimingDelay = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTimeMs;
 800b3cc:	63e7      	str	r7, [r4, #60]	; 0x3c
            Ctx.BeaconCtx.BeaconTime.Seconds = nextBeacon.Seconds - UNIX_GPS_EPOCH_OFFSET - 128;
 800b3ce:	6163      	str	r3, [r4, #20]
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
 800b3d0:	8325      	strh	r5, [r4, #24]
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800b3d2:	e7e8      	b.n	800b3a6 <LoRaMacClassBDeviceTimeAns+0x72>
 800b3d4:	20001654 	.word	0x20001654
 800b3d8:	ed2ac280 	.word	0xed2ac280

0800b3dc <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 800b3dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3de:	1e06      	subs	r6, r0, #0
 800b3e0:	4d0f      	ldr	r5, [pc, #60]	; (800b420 <LoRaMacClassBBeaconFreqReq+0x44>)
#ifdef LORAMAC_CLASSB_ENABLED
    VerifyParams_t verify;

    if( frequency != 0 )
 800b3e2:	d015      	beq.n	800b410 <LoRaMacClassBBeaconFreqReq+0x34>
    {
        verify.Frequency = frequency;

        if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_FREQUENCY ) == true )
 800b3e4:	002b      	movs	r3, r5
 800b3e6:	33ac      	adds	r3, #172	; 0xac
 800b3e8:	681b      	ldr	r3, [r3, #0]
        verify.Frequency = frequency;
 800b3ea:	9001      	str	r0, [sp, #4]
        if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_FREQUENCY ) == true )
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	7818      	ldrb	r0, [r3, #0]
 800b3f0:	a901      	add	r1, sp, #4
 800b3f2:	f001 fb2f 	bl	800ca54 <RegionVerify>
 800b3f6:	1e04      	subs	r4, r0, #0
 800b3f8:	d008      	beq.n	800b40c <LoRaMacClassBBeaconFreqReq+0x30>
        {
            Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq = 1;
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	35bc      	adds	r5, #188	; 0xbc
 800b3fe:	682b      	ldr	r3, [r5, #0]
 800b400:	7b19      	ldrb	r1, [r3, #12]
            Ctx.NvmCtx->BeaconCtx.Frequency = frequency;
 800b402:	611e      	str	r6, [r3, #16]
            Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq = 1;
 800b404:	430a      	orrs	r2, r1
 800b406:	731a      	strb	r2, [r3, #12]
        }
    }
    else
    {
        Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq = 0;
        NvmContextChange( );
 800b408:	f7ff fb82 	bl	800ab10 <NvmContextChange>
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800b40c:	0020      	movs	r0, r4
 800b40e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        Ctx.NvmCtx->BeaconCtx.Ctrl.CustomFreq = 0;
 800b410:	2401      	movs	r4, #1
 800b412:	35bc      	adds	r5, #188	; 0xbc
 800b414:	682a      	ldr	r2, [r5, #0]
 800b416:	7b13      	ldrb	r3, [r2, #12]
 800b418:	43a3      	bics	r3, r4
 800b41a:	7313      	strb	r3, [r2, #12]
 800b41c:	e7f4      	b.n	800b408 <LoRaMacClassBBeaconFreqReq+0x2c>
 800b41e:	46c0      	nop			; (mov r8, r8)
 800b420:	20001654 	.word	0x20001654

0800b424 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 800b424:	b570      	push	{r4, r5, r6, lr}
 800b426:	0005      	movs	r5, r0
#ifdef LORAMAC_CLASSB_ENABLED
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800b428:	f003 fa11 	bl	800e84e <TimerGetCurrentTime>
    TimerTime_t beaconReserved = 0;
    TimerTime_t nextBeacon = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx );
 800b42c:	4e0d      	ldr	r6, [pc, #52]	; (800b464 <LoRaMacClassBIsUplinkCollision+0x40>)
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800b42e:	0004      	movs	r4, r0
    TimerTime_t nextBeacon = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx );
 800b430:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800b432:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800b434:	f003 f8e1 	bl	800e5fa <SysTimeToMs>
 800b438:	0002      	movs	r2, r0

    beaconReserved = nextBeacon -
                     CLASSB_BEACON_GUARD -
                     Ctx.LoRaMacClassBParams.LoRaMacParams->ReceiveDelay1 -
 800b43a:	36b0      	adds	r6, #176	; 0xb0
 800b43c:	6831      	ldr	r1, [r6, #0]
    beaconReserved = nextBeacon -
 800b43e:	690b      	ldr	r3, [r1, #16]
 800b440:	6948      	ldr	r0, [r1, #20]
 800b442:	1818      	adds	r0, r3, r0
 800b444:	4b08      	ldr	r3, [pc, #32]	; (800b468 <LoRaMacClassBIsUplinkCollision+0x44>)
 800b446:	1a1b      	subs	r3, r3, r0
 800b448:	1b5b      	subs	r3, r3, r5
 800b44a:	189b      	adds	r3, r3, r2
    // Check if the next beacon will be received during the next uplink.
    if( ( currentTime >= beaconReserved ) && ( currentTime < ( nextBeacon + CLASSB_BEACON_RESERVED ) ) )
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
 800b44c:	2000      	movs	r0, #0
    if( ( currentTime >= beaconReserved ) && ( currentTime < ( nextBeacon + CLASSB_BEACON_RESERVED ) ) )
 800b44e:	429c      	cmp	r4, r3
 800b450:	d307      	bcc.n	800b462 <LoRaMacClassBIsUplinkCollision+0x3e>
 800b452:	4906      	ldr	r1, [pc, #24]	; (800b46c <LoRaMacClassBIsUplinkCollision+0x48>)
        return CLASSB_BEACON_RESERVED;
 800b454:	4b06      	ldr	r3, [pc, #24]	; (800b470 <LoRaMacClassBIsUplinkCollision+0x4c>)
    if( ( currentTime >= beaconReserved ) && ( currentTime < ( nextBeacon + CLASSB_BEACON_RESERVED ) ) )
 800b456:	1852      	adds	r2, r2, r1
        return CLASSB_BEACON_RESERVED;
 800b458:	4294      	cmp	r4, r2
 800b45a:	4140      	adcs	r0, r0
 800b45c:	4240      	negs	r0, r0
 800b45e:	4018      	ands	r0, r3
 800b460:	1840      	adds	r0, r0, r1
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 800b462:	bd70      	pop	{r4, r5, r6, pc}
 800b464:	20001654 	.word	0x20001654
 800b468:	fffff448 	.word	0xfffff448
 800b46c:	00000848 	.word	0x00000848
 800b470:	fffff7b8 	.word	0xfffff7b8

0800b474 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 800b474:	b510      	push	{r4, lr}
#ifdef LORAMAC_CLASSB_ENABLED
    TimerStop( &Ctx.PingSlotTimer );
 800b476:	4808      	ldr	r0, [pc, #32]	; (800b498 <LoRaMacClassBStopRxSlots+0x24>)
 800b478:	f003 f9ac 	bl	800e7d4 <TimerStop>
    TimerStop( &Ctx.MulticastSlotTimer );
 800b47c:	4807      	ldr	r0, [pc, #28]	; (800b49c <LoRaMacClassBStopRxSlots+0x28>)
 800b47e:	f003 f9a9 	bl	800e7d4 <TimerStop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b482:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b486:	b672      	cpsid	i

    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
 800b488:	2006      	movs	r0, #6
 800b48a:	4a05      	ldr	r2, [pc, #20]	; (800b4a0 <LoRaMacClassBStopRxSlots+0x2c>)
 800b48c:	7813      	ldrb	r3, [r2, #0]
 800b48e:	4383      	bics	r3, r0
 800b490:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b492:	f381 8810 	msr	PRIMASK, r1
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800b496:	bd10      	pop	{r4, pc}
 800b498:	200016b4 	.word	0x200016b4
 800b49c:	200016cc 	.word	0x200016cc
 800b4a0:	20000d44 	.word	0x20000d44

0800b4a4 <LoRaMacClassBHaltBeaconing>:
{
 800b4a4:	b510      	push	{r4, lr}
    if( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 )
 800b4a6:	4c10      	ldr	r4, [pc, #64]	; (800b4e8 <LoRaMacClassBHaltBeaconing+0x44>)
 800b4a8:	7b23      	ldrb	r3, [r4, #12]
 800b4aa:	07db      	lsls	r3, r3, #31
 800b4ac:	d51b      	bpl.n	800b4e6 <LoRaMacClassBHaltBeaconing+0x42>
        if( ( Ctx.BeaconState == BEACON_STATE_TIMEOUT ) ||
 800b4ae:	0023      	movs	r3, r4
 800b4b0:	2208      	movs	r2, #8
 800b4b2:	3344      	adds	r3, #68	; 0x44
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	4393      	bics	r3, r2
 800b4b8:	2b02      	cmp	r3, #2
 800b4ba:	d102      	bne.n	800b4c2 <LoRaMacClassBHaltBeaconing+0x1e>
            LoRaMacClassBBeaconTimerEvent( NULL );
 800b4bc:	2000      	movs	r0, #0
 800b4be:	f7ff fb71 	bl	800aba4 <LoRaMacClassBBeaconTimerEvent>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4c2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b4c6:	b672      	cpsid	i
        LoRaMacClassBEvents.Events.Beacon = 0;
 800b4c8:	2001      	movs	r0, #1
 800b4ca:	4a08      	ldr	r2, [pc, #32]	; (800b4ec <LoRaMacClassBHaltBeaconing+0x48>)
 800b4cc:	7813      	ldrb	r3, [r2, #0]
 800b4ce:	4383      	bics	r3, r0
 800b4d0:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4d2:	f381 8810 	msr	PRIMASK, r1
        TimerStop( &Ctx.BeaconTimer );
 800b4d6:	4806      	ldr	r0, [pc, #24]	; (800b4f0 <LoRaMacClassBHaltBeaconing+0x4c>)
 800b4d8:	f003 f97c 	bl	800e7d4 <TimerStop>
        Ctx.BeaconState = BEACON_STATE_HALT;
 800b4dc:	2306      	movs	r3, #6
 800b4de:	3444      	adds	r4, #68	; 0x44
 800b4e0:	7023      	strb	r3, [r4, #0]
        LoRaMacClassBStopRxSlots( );
 800b4e2:	f7ff ffc7 	bl	800b474 <LoRaMacClassBStopRxSlots>
}
 800b4e6:	bd10      	pop	{r4, pc}
 800b4e8:	20001654 	.word	0x20001654
 800b4ec:	20000d44 	.word	0x20000d44
 800b4f0:	2000169c 	.word	0x2000169c

0800b4f4 <LoRaMacClassBSwitchClass>:
{
 800b4f4:	b510      	push	{r4, lr}
 800b4f6:	0004      	movs	r4, r0
    if( nextClass == CLASS_B )
 800b4f8:	2801      	cmp	r0, #1
 800b4fa:	d10c      	bne.n	800b516 <LoRaMacClassBSwitchClass+0x22>
        if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) && ( Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned == 1 ) )
 800b4fc:	4b0a      	ldr	r3, [pc, #40]	; (800b528 <LoRaMacClassBSwitchClass+0x34>)
 800b4fe:	7b1a      	ldrb	r2, [r3, #12]
 800b500:	4202      	tst	r2, r0
 800b502:	d00f      	beq.n	800b524 <LoRaMacClassBSwitchClass+0x30>
 800b504:	33bc      	adds	r3, #188	; 0xbc
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	7818      	ldrb	r0, [r3, #0]
 800b50a:	4004      	ands	r4, r0
            return LORAMAC_STATUS_OK;
 800b50c:	4260      	negs	r0, r4
 800b50e:	4144      	adcs	r4, r0
 800b510:	0064      	lsls	r4, r4, #1
}
 800b512:	0020      	movs	r0, r4
 800b514:	bd10      	pop	{r4, pc}
    if( nextClass == CLASS_A )
 800b516:	2800      	cmp	r0, #0
 800b518:	d104      	bne.n	800b524 <LoRaMacClassBSwitchClass+0x30>
        LoRaMacClassBHaltBeaconing( );
 800b51a:	f7ff ffc3 	bl	800b4a4 <LoRaMacClassBHaltBeaconing>
        InitClassBDefaults( );
 800b51e:	f7ff fc9b 	bl	800ae58 <InitClassBDefaults>
        return LORAMAC_STATUS_OK;
 800b522:	e7f6      	b.n	800b512 <LoRaMacClassBSwitchClass+0x1e>
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b524:	2402      	movs	r4, #2
 800b526:	e7f4      	b.n	800b512 <LoRaMacClassBSwitchClass+0x1e>
 800b528:	20001654 	.word	0x20001654

0800b52c <LoRaMacClassBStartRxSlots>:

void LoRaMacClassBStartRxSlots( void )
{
 800b52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifdef LORAMAC_CLASSB_ENABLED
    if( Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned == 1 )
 800b52e:	4c0f      	ldr	r4, [pc, #60]	; (800b56c <LoRaMacClassBStartRxSlots+0x40>)
 800b530:	2501      	movs	r5, #1
 800b532:	0023      	movs	r3, r4
 800b534:	33bc      	adds	r3, #188	; 0xbc
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	422b      	tst	r3, r5
 800b53c:	d015      	beq.n	800b56a <LoRaMacClassBStartRxSlots+0x3e>
    {
        Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800b53e:	0023      	movs	r3, r4
 800b540:	2600      	movs	r6, #0
        TimerSetValue( &Ctx.PingSlotTimer, 1 );
 800b542:	4f0b      	ldr	r7, [pc, #44]	; (800b570 <LoRaMacClassBStartRxSlots+0x44>)
        Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800b544:	3345      	adds	r3, #69	; 0x45
        TimerSetValue( &Ctx.PingSlotTimer, 1 );
 800b546:	0029      	movs	r1, r5
 800b548:	0038      	movs	r0, r7
        Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800b54a:	701e      	strb	r6, [r3, #0]
        TimerStart( &Ctx.PingSlotTimer );

        Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800b54c:	3446      	adds	r4, #70	; 0x46
        TimerSetValue( &Ctx.PingSlotTimer, 1 );
 800b54e:	f003 f96d 	bl	800e82c <TimerSetValue>
        TimerStart( &Ctx.PingSlotTimer );
 800b552:	0038      	movs	r0, r7
 800b554:	f003 f8c6 	bl	800e6e4 <TimerStart>
        Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800b558:	7026      	strb	r6, [r4, #0]
        TimerSetValue( &Ctx.MulticastSlotTimer, 1 );
 800b55a:	4c06      	ldr	r4, [pc, #24]	; (800b574 <LoRaMacClassBStartRxSlots+0x48>)
 800b55c:	0029      	movs	r1, r5
 800b55e:	0020      	movs	r0, r4
 800b560:	f003 f964 	bl	800e82c <TimerSetValue>
        TimerStart( &Ctx.MulticastSlotTimer );
 800b564:	0020      	movs	r0, r4
 800b566:	f003 f8bd 	bl	800e6e4 <TimerStart>
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800b56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b56c:	20001654 	.word	0x20001654
 800b570:	200016b4 	.word	0x200016b4
 800b574:	200016cc 	.word	0x200016cc

0800b578 <UpdateBeaconState>:
{
 800b578:	b5f0      	push	{r4, r5, r6, r7, lr}
    beaconEventTime = CalcDelayForNextBeacon( currentTime, SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) );
 800b57a:	4c22      	ldr	r4, [pc, #136]	; (800b604 <UpdateBeaconState+0x8c>)
{
 800b57c:	b085      	sub	sp, #20
 800b57e:	9001      	str	r0, [sp, #4]
 800b580:	9100      	str	r1, [sp, #0]
    beaconEventTime = CalcDelayForNextBeacon( currentTime, SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) );
 800b582:	69e0      	ldr	r0, [r4, #28]
 800b584:	6a21      	ldr	r1, [r4, #32]
{
 800b586:	0015      	movs	r5, r2
    beaconEventTime = CalcDelayForNextBeacon( currentTime, SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) );
 800b588:	f003 f837 	bl	800e5fa <SysTimeToMs>
    nextBeaconRxTime = ( ( currentTime - lastBeaconRx ) % CLASSB_BEACON_INTERVAL );
 800b58c:	21fa      	movs	r1, #250	; 0xfa
    return ( CLASSB_BEACON_INTERVAL - nextBeaconRxTime );
 800b58e:	27fa      	movs	r7, #250	; 0xfa
    nextBeaconRxTime = ( ( currentTime - lastBeaconRx ) % CLASSB_BEACON_INTERVAL );
 800b590:	1a28      	subs	r0, r5, r0
 800b592:	0249      	lsls	r1, r1, #9
 800b594:	f7f4 fe5c 	bl	8000250 <__aeabi_uidivmod>
    return ( CLASSB_BEACON_INTERVAL - nextBeaconRxTime );
 800b598:	027f      	lsls	r7, r7, #9
 800b59a:	1a7f      	subs	r7, r7, r1
    Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( currentTime + beaconEventTime );
 800b59c:	ae02      	add	r6, sp, #8
 800b59e:	0030      	movs	r0, r6
 800b5a0:	19e9      	adds	r1, r5, r7
 800b5a2:	f003 f849 	bl	800e638 <SysTimeFromMs>
 800b5a6:	0023      	movs	r3, r4
 800b5a8:	3324      	adds	r3, #36	; 0x24
 800b5aa:	ce06      	ldmia	r6!, {r1, r2}
 800b5ac:	c306      	stmia	r3!, {r1, r2}
    beaconEventTime = TimerTempCompensation( beaconEventTime, Ctx.BeaconCtx.Temperature );
 800b5ae:	0038      	movs	r0, r7
 800b5b0:	6921      	ldr	r1, [r4, #16]
 800b5b2:	f003 f961 	bl	800e878 <TimerTempCompensation>
    if( beaconEventTime > windowMovement )
 800b5b6:	9b00      	ldr	r3, [sp, #0]
    beaconEventTime = TimerTempCompensation( beaconEventTime, Ctx.BeaconCtx.Temperature );
 800b5b8:	0006      	movs	r6, r0
    if( beaconEventTime > windowMovement )
 800b5ba:	4298      	cmp	r0, r3
 800b5bc:	d900      	bls.n	800b5c0 <UpdateBeaconState+0x48>
        beaconEventTime -= windowMovement;
 800b5be:	1ac6      	subs	r6, r0, r3
    Ctx.BeaconCtx.NextBeaconRxAdjusted = currentTime + beaconEventTime;
 800b5c0:	1975      	adds	r5, r6, r5
 800b5c2:	62e5      	str	r5, [r4, #44]	; 0x2c
    LoRaMacClassBStartRxSlots( );
 800b5c4:	f7ff ffb2 	bl	800b52c <LoRaMacClassBStartRxSlots>
    if( Ctx.BeaconCtx.Ctrl.ResumeBeaconing == 0 )
 800b5c8:	7b23      	ldrb	r3, [r4, #12]
 800b5ca:	069b      	lsls	r3, r3, #26
 800b5cc:	d40e      	bmi.n	800b5ec <UpdateBeaconState+0x74>
        Ctx.LoRaMacClassBParams.MlmeIndication->MlmeIndication = MLME_BEACON;
 800b5ce:	0023      	movs	r3, r4
 800b5d0:	220a      	movs	r2, #10
 800b5d2:	3398      	adds	r3, #152	; 0x98
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	701a      	strb	r2, [r3, #0]
        Ctx.LoRaMacClassBParams.MlmeIndication->Status = status;
 800b5d8:	9a01      	ldr	r2, [sp, #4]
 800b5da:	705a      	strb	r2, [r3, #1]
        Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeInd = 1;
 800b5dc:	0023      	movs	r3, r4
 800b5de:	33a4      	adds	r3, #164	; 0xa4
 800b5e0:	6819      	ldr	r1, [r3, #0]
 800b5e2:	2328      	movs	r3, #40	; 0x28
 800b5e4:	780a      	ldrb	r2, [r1, #0]
 800b5e6:	439a      	bics	r2, r3
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	700b      	strb	r3, [r1, #0]
    Ctx.BeaconCtx.Ctrl.ResumeBeaconing = 0;
 800b5ec:	2220      	movs	r2, #32
 800b5ee:	7b23      	ldrb	r3, [r4, #12]
 800b5f0:	4393      	bics	r3, r2
 800b5f2:	7323      	strb	r3, [r4, #12]
    if( timeGuard > CLASSB_BEACON_GUARD )
 800b5f4:	4b04      	ldr	r3, [pc, #16]	; (800b608 <UpdateBeaconState+0x90>)
 800b5f6:	429e      	cmp	r6, r3
 800b5f8:	d901      	bls.n	800b5fe <UpdateBeaconState+0x86>
        timeGuard -= CLASSB_BEACON_GUARD;
 800b5fa:	4b04      	ldr	r3, [pc, #16]	; (800b60c <UpdateBeaconState+0x94>)
 800b5fc:	18f6      	adds	r6, r6, r3
}
 800b5fe:	0030      	movs	r0, r6
 800b600:	b005      	add	sp, #20
 800b602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b604:	20001654 	.word	0x20001654
 800b608:	00000bb8 	.word	0x00000bb8
 800b60c:	fffff448 	.word	0xfffff448

0800b610 <LoRaMacClassBProcess>:
    }
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBProcess( void )
{
 800b610:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b612:	b087      	sub	sp, #28
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b614:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b618:	b672      	cpsid	i
#ifdef LORAMAC_CLASSB_ENABLED
    LoRaMacClassBEvents_t events;

    CRITICAL_SECTION_BEGIN( );
    events = LoRaMacClassBEvents;
    LoRaMacClassBEvents.Value = 0;
 800b61a:	2100      	movs	r1, #0
    events = LoRaMacClassBEvents;
 800b61c:	4dc2      	ldr	r5, [pc, #776]	; (800b928 <LoRaMacClassBProcess+0x318>)
 800b61e:	682b      	ldr	r3, [r5, #0]
    LoRaMacClassBEvents.Value = 0;
 800b620:	6029      	str	r1, [r5, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b622:	f382 8810 	msr	PRIMASK, r2
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800b626:	428b      	cmp	r3, r1
 800b628:	d100      	bne.n	800b62c <LoRaMacClassBProcess+0x1c>
 800b62a:	e23f      	b.n	800baac <LoRaMacClassBProcess+0x49c>
    {
        if( events.Events.Beacon == 1 )
 800b62c:	b2da      	uxtb	r2, r3
 800b62e:	9202      	str	r2, [sp, #8]
 800b630:	07db      	lsls	r3, r3, #31
 800b632:	d55a      	bpl.n	800b6ea <LoRaMacClassBProcess+0xda>
    TimerTime_t currentTime = Ctx.BeaconCtx.TimeStamp;
 800b634:	4cbd      	ldr	r4, [pc, #756]	; (800b92c <LoRaMacClassBProcess+0x31c>)
    switch( Ctx.BeaconState )
 800b636:	0023      	movs	r3, r4
 800b638:	3344      	adds	r3, #68	; 0x44
 800b63a:	7818      	ldrb	r0, [r3, #0]
    TimerTime_t currentTime = Ctx.BeaconCtx.TimeStamp;
 800b63c:	6c26      	ldr	r6, [r4, #64]	; 0x40
    switch( Ctx.BeaconState )
 800b63e:	280a      	cmp	r0, #10
 800b640:	d900      	bls.n	800b644 <LoRaMacClassBProcess+0x34>
 800b642:	e16c      	b.n	800b91e <LoRaMacClassBProcess+0x30e>
 800b644:	f7f4 fd74 	bl	8000130 <__gnu_thumb1_case_uhi>
 800b648:	000b00ae 	.word	0x000b00ae
 800b64c:	016b00c2 	.word	0x016b00c2
 800b650:	00fe00de 	.word	0x00fe00de
 800b654:	0120016b 	.word	0x0120016b
 800b658:	016b0140 	.word	0x016b0140
 800b65c:	0147      	.short	0x0147
            if( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 )
 800b65e:	7b23      	ldrb	r3, [r4, #12]
 800b660:	2210      	movs	r2, #16
 800b662:	001f      	movs	r7, r3
 800b664:	4017      	ands	r7, r2
 800b666:	4213      	tst	r3, r2
 800b668:	d007      	beq.n	800b67a <LoRaMacClassBProcess+0x6a>
                Radio.Sleep();
 800b66a:	4bb1      	ldr	r3, [pc, #708]	; (800b930 <LoRaMacClassBProcess+0x320>)
                Ctx.BeaconState = BEACON_STATE_LOST;
 800b66c:	3444      	adds	r4, #68	; 0x44
                Radio.Sleep();
 800b66e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b670:	9303      	str	r3, [sp, #12]
 800b672:	4798      	blx	r3
                Ctx.BeaconState = BEACON_STATE_LOST;
 800b674:	230a      	movs	r3, #10
 800b676:	7023      	strb	r3, [r4, #0]
    if( activateTimer == true )
 800b678:	e092      	b.n	800b7a0 <LoRaMacClassBProcess+0x190>
    Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 800b67a:	2108      	movs	r1, #8
 800b67c:	8621      	strh	r1, [r4, #48]	; 0x30
    Ctx.PingSlotCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 800b67e:	80e1      	strh	r1, [r4, #6]
    Ctx.BeaconCtx.BeaconWindowMovement  = CLASSB_WINDOW_MOVE_DEFAULT;
 800b680:	3906      	subs	r1, #6
                if( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 )
 800b682:	2004      	movs	r0, #4
    Ctx.BeaconCtx.BeaconWindowMovement  = CLASSB_WINDOW_MOVE_DEFAULT;
 800b684:	6361      	str	r1, [r4, #52]	; 0x34
                if( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 )
 800b686:	0019      	movs	r1, r3
 800b688:	4001      	ands	r1, r0
 800b68a:	4203      	tst	r3, r0
 800b68c:	d100      	bne.n	800b690 <LoRaMacClassBProcess+0x80>
 800b68e:	e082      	b.n	800b796 <LoRaMacClassBProcess+0x186>
                    if( Ctx.BeaconCtx.BeaconTimingDelay > 0 )
 800b690:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b692:	2900      	cmp	r1, #0
 800b694:	d022      	beq.n	800b6dc <LoRaMacClassBProcess+0xcc>
                        if( SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) > currentTime )
 800b696:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b698:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b69a:	f002 ffae 	bl	800e5fa <SysTimeToMs>
 800b69e:	4286      	cmp	r6, r0
 800b6a0:	d213      	bcs.n	800b6ca <LoRaMacClassBProcess+0xba>
                            beaconEventTime = TimerTempCompensation( SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTime, Ctx.BeaconCtx.Temperature );
 800b6a2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b6a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b6a6:	f002 ffa8 	bl	800e5fa <SysTimeToMs>
 800b6aa:	6921      	ldr	r1, [r4, #16]
 800b6ac:	1b80      	subs	r0, r0, r6
 800b6ae:	f003 f8e3 	bl	800e878 <TimerTempCompensation>
 800b6b2:	0006      	movs	r6, r0
                        Ctx.BeaconCtx.BeaconTimingDelay = 0;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	63e3      	str	r3, [r4, #60]	; 0x3c
        TimerSetValue( &Ctx.BeaconTimer, beaconEventTime );
 800b6b8:	4c9e      	ldr	r4, [pc, #632]	; (800b934 <LoRaMacClassBProcess+0x324>)
 800b6ba:	0031      	movs	r1, r6
 800b6bc:	0020      	movs	r0, r4
 800b6be:	f003 f8b5 	bl	800e82c <TimerSetValue>
        TimerStart( &Ctx.BeaconTimer );
 800b6c2:	0020      	movs	r0, r4
 800b6c4:	f003 f80e 	bl	800e6e4 <TimerStart>
 800b6c8:	e00f      	b.n	800b6ea <LoRaMacClassBProcess+0xda>
                            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 0;
 800b6ca:	220c      	movs	r2, #12
 800b6cc:	7b23      	ldrb	r3, [r4, #12]
    TimerTime_t beaconEventTime = 1;
 800b6ce:	2601      	movs	r6, #1
                            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 0;
 800b6d0:	4393      	bics	r3, r2
 800b6d2:	7323      	strb	r3, [r4, #12]
                            Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 800b6d4:	0023      	movs	r3, r4
 800b6d6:	3344      	adds	r3, #68	; 0x44
 800b6d8:	701f      	strb	r7, [r3, #0]
 800b6da:	e7eb      	b.n	800b6b4 <LoRaMacClassBProcess+0xa4>
                        Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 0;
 800b6dc:	2014      	movs	r0, #20
 800b6de:	4383      	bics	r3, r0
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	7323      	strb	r3, [r4, #12]
            RxBeaconSetup( CLASSB_BEACON_RESERVED, false );
 800b6e4:	4894      	ldr	r0, [pc, #592]	; (800b938 <LoRaMacClassBProcess+0x328>)
 800b6e6:	f7ff fb25 	bl	800ad34 <RxBeaconSetup>
        {
            LoRaMacClassBProcessBeacon( );
        }
        if( events.Events.PingSlot == 1 )
 800b6ea:	9b02      	ldr	r3, [sp, #8]
 800b6ec:	079b      	lsls	r3, r3, #30
 800b6ee:	d400      	bmi.n	800b6f2 <LoRaMacClassBProcess+0xe2>
 800b6f0:	e167      	b.n	800b9c2 <LoRaMacClassBProcess+0x3b2>
    switch( Ctx.PingSlotState )
 800b6f2:	4c8e      	ldr	r4, [pc, #568]	; (800b92c <LoRaMacClassBProcess+0x31c>)
    TimerTime_t pingSlotTime = 0;
 800b6f4:	2300      	movs	r3, #0
    switch( Ctx.PingSlotState )
 800b6f6:	0026      	movs	r6, r4
    TimerTime_t pingSlotTime = 0;
 800b6f8:	9305      	str	r3, [sp, #20]
    switch( Ctx.PingSlotState )
 800b6fa:	3645      	adds	r6, #69	; 0x45
 800b6fc:	7831      	ldrb	r1, [r6, #0]
 800b6fe:	2901      	cmp	r1, #1
 800b700:	d014      	beq.n	800b72c <LoRaMacClassBProcess+0x11c>
 800b702:	2902      	cmp	r1, #2
 800b704:	d100      	bne.n	800b708 <LoRaMacClassBProcess+0xf8>
 800b706:	e11f      	b.n	800b948 <LoRaMacClassBProcess+0x338>
 800b708:	4299      	cmp	r1, r3
 800b70a:	d000      	beq.n	800b70e <LoRaMacClassBProcess+0xfe>
 800b70c:	e1dd      	b.n	800baca <LoRaMacClassBProcess+0x4ba>
            ComputePingOffset( Ctx.BeaconCtx.BeaconTime.Seconds,
 800b70e:	0023      	movs	r3, r4
 800b710:	0022      	movs	r2, r4
 800b712:	33bc      	adds	r3, #188	; 0xbc
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4889      	ldr	r0, [pc, #548]	; (800b93c <LoRaMacClassBProcess+0x32c>)
 800b718:	32a8      	adds	r2, #168	; 0xa8
 800b71a:	6812      	ldr	r2, [r2, #0]
 800b71c:	885b      	ldrh	r3, [r3, #2]
 800b71e:	9000      	str	r0, [sp, #0]
 800b720:	6812      	ldr	r2, [r2, #0]
 800b722:	6960      	ldr	r0, [r4, #20]
 800b724:	f7ff faa4 	bl	800ac70 <ComputePingOffset>
            Ctx.PingSlotState = PINGSLOT_STATE_SET_TIMER;
 800b728:	2301      	movs	r3, #1
 800b72a:	7033      	strb	r3, [r6, #0]
            if( CalcNextSlotTime( Ctx.PingSlotCtx.PingOffset, Ctx.NvmCtx->PingSlotCtx.PingPeriod, Ctx.NvmCtx->PingSlotCtx.PingNb, &pingSlotTime ) == true )
 800b72c:	0026      	movs	r6, r4
 800b72e:	36bc      	adds	r6, #188	; 0xbc
 800b730:	6833      	ldr	r3, [r6, #0]
 800b732:	88a0      	ldrh	r0, [r4, #4]
 800b734:	785a      	ldrb	r2, [r3, #1]
 800b736:	8859      	ldrh	r1, [r3, #2]
 800b738:	ab05      	add	r3, sp, #20
 800b73a:	f7ff fa4d 	bl	800abd8 <CalcNextSlotTime>
 800b73e:	2800      	cmp	r0, #0
 800b740:	d100      	bne.n	800b744 <LoRaMacClassBProcess+0x134>
 800b742:	e13e      	b.n	800b9c2 <LoRaMacClassBProcess+0x3b2>
                if( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 1 )
 800b744:	7b23      	ldrb	r3, [r4, #12]
 800b746:	079b      	lsls	r3, r3, #30
 800b748:	d518      	bpl.n	800b77c <LoRaMacClassBProcess+0x16c>
                                                     Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 800b74a:	0023      	movs	r3, r4
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 800b74c:	0020      	movs	r0, r4
 800b74e:	6831      	ldr	r1, [r6, #0]
 800b750:	002e      	movs	r6, r5
                                                     Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 800b752:	33b0      	adds	r3, #176	; 0xb0
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 800b754:	30ac      	adds	r0, #172	; 0xac
                                                     Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 800b756:	681b      	ldr	r3, [r3, #0]
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 800b758:	6800      	ldr	r0, [r0, #0]
 800b75a:	7a09      	ldrb	r1, [r1, #8]
 800b75c:	3618      	adds	r6, #24
 800b75e:	7a1a      	ldrb	r2, [r3, #8]
 800b760:	7800      	ldrb	r0, [r0, #0]
 800b762:	9600      	str	r6, [sp, #0]
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	b249      	sxtb	r1, r1
 800b768:	f001 f991 	bl	800ca8e <RegionComputeRxWindowParameters>
                    Ctx.PingSlotCtx.SymbolTimeout = pingSlotRxConfig.WindowTimeout;
 800b76c:	6a2b      	ldr	r3, [r5, #32]
                    if( ( int32_t )pingSlotTime > pingSlotRxConfig.WindowOffset )
 800b76e:	9a05      	ldr	r2, [sp, #20]
                    Ctx.PingSlotCtx.SymbolTimeout = pingSlotRxConfig.WindowTimeout;
 800b770:	80e3      	strh	r3, [r4, #6]
                    if( ( int32_t )pingSlotTime > pingSlotRxConfig.WindowOffset )
 800b772:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b774:	4293      	cmp	r3, r2
 800b776:	da01      	bge.n	800b77c <LoRaMacClassBProcess+0x16c>
                        pingSlotTime += pingSlotRxConfig.WindowOffset;
 800b778:	189b      	adds	r3, r3, r2
 800b77a:	9305      	str	r3, [sp, #20]
                Ctx.PingSlotState = PINGSLOT_STATE_IDLE;
 800b77c:	2202      	movs	r2, #2
 800b77e:	4b6b      	ldr	r3, [pc, #428]	; (800b92c <LoRaMacClassBProcess+0x31c>)
                TimerSetValue( &Ctx.PingSlotTimer, pingSlotTime );
 800b780:	4c6f      	ldr	r4, [pc, #444]	; (800b940 <LoRaMacClassBProcess+0x330>)
                Ctx.PingSlotState = PINGSLOT_STATE_IDLE;
 800b782:	3345      	adds	r3, #69	; 0x45
                TimerSetValue( &Ctx.PingSlotTimer, pingSlotTime );
 800b784:	9905      	ldr	r1, [sp, #20]
                Ctx.PingSlotState = PINGSLOT_STATE_IDLE;
 800b786:	701a      	strb	r2, [r3, #0]
                TimerSetValue( &Ctx.PingSlotTimer, CLASSB_PING_SLOT_WINDOW );
 800b788:	0020      	movs	r0, r4
 800b78a:	f003 f84f 	bl	800e82c <TimerSetValue>
                TimerStart( &Ctx.PingSlotTimer );
 800b78e:	0020      	movs	r0, r4
 800b790:	f002 ffa8 	bl	800e6e4 <TimerStart>
 800b794:	e115      	b.n	800b9c2 <LoRaMacClassBProcess+0x3b2>
                    Ctx.BeaconCtx.NextBeaconRx.Seconds = 0;
 800b796:	6261      	str	r1, [r4, #36]	; 0x24
                    Ctx.BeaconCtx.NextBeaconRx.SubSeconds = 0;
 800b798:	8521      	strh	r1, [r4, #40]	; 0x28
                    Ctx.BeaconCtx.BeaconTimingDelay = 0;
 800b79a:	63e1      	str	r1, [r4, #60]	; 0x3c
                    Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 800b79c:	3444      	adds	r4, #68	; 0x44
 800b79e:	7021      	strb	r1, [r4, #0]
    TimerTime_t beaconEventTime = 1;
 800b7a0:	2601      	movs	r6, #1
 800b7a2:	e789      	b.n	800b6b8 <LoRaMacClassBProcess+0xa8>
            if( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 )
 800b7a4:	7b22      	ldrb	r2, [r4, #12]
 800b7a6:	2310      	movs	r3, #16
 800b7a8:	0010      	movs	r0, r2
 800b7aa:	4018      	ands	r0, r3
 800b7ac:	421a      	tst	r2, r3
 800b7ae:	d000      	beq.n	800b7b2 <LoRaMacClassBProcess+0x1a2>
 800b7b0:	e75b      	b.n	800b66a <LoRaMacClassBProcess+0x5a>
    Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 800b7b2:	2108      	movs	r1, #8
                beaconEventTime = CLASSB_BEACON_INTERVAL;
 800b7b4:	26fa      	movs	r6, #250	; 0xfa
    Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 800b7b6:	8621      	strh	r1, [r4, #48]	; 0x30
    Ctx.PingSlotCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 800b7b8:	80e1      	strh	r1, [r4, #6]
    Ctx.BeaconCtx.BeaconWindowMovement  = CLASSB_WINDOW_MOVE_DEFAULT;
 800b7ba:	3906      	subs	r1, #6
 800b7bc:	6361      	str	r1, [r4, #52]	; 0x34
                Ctx.BeaconCtx.Ctrl.AcquisitionPending = 1;
 800b7be:	4313      	orrs	r3, r2
                RxBeaconSetup( 0, true );
 800b7c0:	3901      	subs	r1, #1
                Ctx.BeaconCtx.Ctrl.AcquisitionPending = 1;
 800b7c2:	7323      	strb	r3, [r4, #12]
                beaconEventTime = CLASSB_BEACON_INTERVAL;
 800b7c4:	0276      	lsls	r6, r6, #9
                RxBeaconSetup( 0, true );
 800b7c6:	f7ff fab5 	bl	800ad34 <RxBeaconSetup>
    if( activateTimer == true )
 800b7ca:	e775      	b.n	800b6b8 <LoRaMacClassBProcess+0xa8>
            Ctx.BeaconCtx.BeaconTime.Seconds += ( CLASSB_BEACON_INTERVAL / 1000 );
 800b7cc:	6963      	ldr	r3, [r4, #20]
    if( Ctx.BeaconCtx.BeaconWindowMovement > CLASSB_WINDOW_MOVE_EXPANSION_MAX )
 800b7ce:	2280      	movs	r2, #128	; 0x80
            Ctx.BeaconCtx.BeaconTime.Seconds += ( CLASSB_BEACON_INTERVAL / 1000 );
 800b7d0:	3380      	adds	r3, #128	; 0x80
 800b7d2:	6163      	str	r3, [r4, #20]
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	8323      	strh	r3, [r4, #24]
    Ctx.BeaconCtx.BeaconWindowMovement *= CLASSB_WINDOW_MOVE_EXPANSION_FACTOR;
 800b7d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    if( Ctx.BeaconCtx.BeaconWindowMovement > CLASSB_WINDOW_MOVE_EXPANSION_MAX )
 800b7da:	0052      	lsls	r2, r2, #1
    Ctx.BeaconCtx.BeaconWindowMovement *= CLASSB_WINDOW_MOVE_EXPANSION_FACTOR;
 800b7dc:	005b      	lsls	r3, r3, #1
    if( Ctx.BeaconCtx.BeaconWindowMovement > CLASSB_WINDOW_MOVE_EXPANSION_MAX )
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d821      	bhi.n	800b826 <LoRaMacClassBProcess+0x216>
    Ctx.BeaconCtx.BeaconWindowMovement *= CLASSB_WINDOW_MOVE_EXPANSION_FACTOR;
 800b7e2:	6363      	str	r3, [r4, #52]	; 0x34
    Ctx.BeaconCtx.SymbolTimeout *= CLASSB_BEACON_SYMBOL_TO_EXPANSION_FACTOR;
 800b7e4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800b7e6:	005b      	lsls	r3, r3, #1
 800b7e8:	b29b      	uxth	r3, r3
    if( Ctx.BeaconCtx.SymbolTimeout > CLASSB_BEACON_SYMBOL_TO_EXPANSION_MAX )
 800b7ea:	2bff      	cmp	r3, #255	; 0xff
 800b7ec:	d81d      	bhi.n	800b82a <LoRaMacClassBProcess+0x21a>
        Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_EXPANSION_MAX;
 800b7ee:	8623      	strh	r3, [r4, #48]	; 0x30
    Ctx.PingSlotCtx.SymbolTimeout *= CLASSB_BEACON_SYMBOL_TO_EXPANSION_FACTOR;
 800b7f0:	88e3      	ldrh	r3, [r4, #6]
 800b7f2:	005b      	lsls	r3, r3, #1
 800b7f4:	b29b      	uxth	r3, r3
    if( Ctx.PingSlotCtx.SymbolTimeout > CLASSB_PING_SLOT_SYMBOL_TO_EXPANSION_MAX )
 800b7f6:	2b1e      	cmp	r3, #30
 800b7f8:	d819      	bhi.n	800b82e <LoRaMacClassBProcess+0x21e>
        Ctx.PingSlotCtx.SymbolTimeout = CLASSB_PING_SLOT_SYMBOL_TO_EXPANSION_MAX;
 800b7fa:	80e3      	strh	r3, [r4, #6]
            Ctx.BeaconState = BEACON_STATE_REACQUISITION;
 800b7fc:	0023      	movs	r3, r4
 800b7fe:	2204      	movs	r2, #4
 800b800:	3344      	adds	r3, #68	; 0x44
 800b802:	701a      	strb	r2, [r3, #0]
            Ctx.BeaconCtx.Ctrl.BeaconAcquired = 0;
 800b804:	2202      	movs	r2, #2
 800b806:	7b23      	ldrb	r3, [r4, #12]
            if( ( currentTime - SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) ) > CLASSB_MAX_BEACON_LESS_PERIOD )
 800b808:	69e0      	ldr	r0, [r4, #28]
            Ctx.BeaconCtx.Ctrl.BeaconAcquired = 0;
 800b80a:	4393      	bics	r3, r2
            if( ( currentTime - SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) ) > CLASSB_MAX_BEACON_LESS_PERIOD )
 800b80c:	6a21      	ldr	r1, [r4, #32]
            Ctx.BeaconCtx.Ctrl.BeaconAcquired = 0;
 800b80e:	7323      	strb	r3, [r4, #12]
            if( ( currentTime - SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) ) > CLASSB_MAX_BEACON_LESS_PERIOD )
 800b810:	0027      	movs	r7, r4
 800b812:	f002 fef2 	bl	800e5fa <SysTimeToMs>
 800b816:	4b4b      	ldr	r3, [pc, #300]	; (800b944 <LoRaMacClassBProcess+0x334>)
 800b818:	1a30      	subs	r0, r6, r0
 800b81a:	3744      	adds	r7, #68	; 0x44
 800b81c:	4298      	cmp	r0, r3
 800b81e:	d908      	bls.n	800b832 <LoRaMacClassBProcess+0x222>
                Ctx.BeaconState = BEACON_STATE_LOST;
 800b820:	230a      	movs	r3, #10
 800b822:	703b      	strb	r3, [r7, #0]
    if( activateTimer == true )
 800b824:	e7bc      	b.n	800b7a0 <LoRaMacClassBProcess+0x190>
        Ctx.BeaconCtx.BeaconWindowMovement = CLASSB_WINDOW_MOVE_EXPANSION_MAX;
 800b826:	6362      	str	r2, [r4, #52]	; 0x34
 800b828:	e7dc      	b.n	800b7e4 <LoRaMacClassBProcess+0x1d4>
        Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_EXPANSION_MAX;
 800b82a:	23ff      	movs	r3, #255	; 0xff
 800b82c:	e7df      	b.n	800b7ee <LoRaMacClassBProcess+0x1de>
        Ctx.PingSlotCtx.SymbolTimeout = CLASSB_PING_SLOT_SYMBOL_TO_EXPANSION_MAX;
 800b82e:	231e      	movs	r3, #30
 800b830:	e7e3      	b.n	800b7fa <LoRaMacClassBProcess+0x1ea>
                beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_LOST,
 800b832:	0032      	movs	r2, r6
 800b834:	200f      	movs	r0, #15
 800b836:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b838:	f7ff fe9e 	bl	800b578 <UpdateBeaconState>
                Ctx.BeaconState = BEACON_STATE_IDLE;
 800b83c:	2307      	movs	r3, #7
                beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_LOST,
 800b83e:	0006      	movs	r6, r0
                Ctx.BeaconState = BEACON_STATE_IDLE;
 800b840:	703b      	strb	r3, [r7, #0]
    if( activateTimer == true )
 800b842:	e739      	b.n	800b6b8 <LoRaMacClassBProcess+0xa8>
            Ctx.BeaconCtx.Ctrl.AcquisitionPending = 0;
 800b844:	2210      	movs	r2, #16
 800b846:	7b23      	ldrb	r3, [r4, #12]
            beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED,
 800b848:	2100      	movs	r1, #0
            Ctx.BeaconCtx.Ctrl.AcquisitionPending = 0;
 800b84a:	4393      	bics	r3, r2
            beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED,
 800b84c:	200e      	movs	r0, #14
 800b84e:	0032      	movs	r2, r6
            Ctx.BeaconCtx.Ctrl.AcquisitionPending = 0;
 800b850:	7323      	strb	r3, [r4, #12]
            beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED,
 800b852:	f7ff fe91 	bl	800b578 <UpdateBeaconState>
            if( Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeReq == 1 )
 800b856:	0023      	movs	r3, r4
 800b858:	33a4      	adds	r3, #164	; 0xa4
 800b85a:	681b      	ldr	r3, [r3, #0]
            beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED,
 800b85c:	0006      	movs	r6, r0
            if( Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeReq == 1 )
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	075b      	lsls	r3, r3, #29
 800b862:	d50d      	bpl.n	800b880 <LoRaMacClassBProcess+0x270>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true )
 800b864:	200b      	movs	r0, #11
 800b866:	f000 fb69 	bl	800bf3c <LoRaMacConfirmQueueIsCmdActive>
 800b86a:	2800      	cmp	r0, #0
 800b86c:	d008      	beq.n	800b880 <LoRaMacClassBProcess+0x270>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_ACQUISITION );
 800b86e:	210b      	movs	r1, #11
 800b870:	2000      	movs	r0, #0
 800b872:	f000 fb0d 	bl	800be90 <LoRaMacConfirmQueueSetStatus>
                    Ctx.LoRaMacClassBParams.MlmeConfirm->TxTimeOnAir = 0;
 800b876:	0023      	movs	r3, r4
 800b878:	2200      	movs	r2, #0
 800b87a:	33a0      	adds	r3, #160	; 0xa0
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	605a      	str	r2, [r3, #4]
            Ctx.BeaconState = BEACON_STATE_IDLE;
 800b880:	2307      	movs	r3, #7
 800b882:	3444      	adds	r4, #68	; 0x44
 800b884:	7023      	strb	r3, [r4, #0]
    if( activateTimer == true )
 800b886:	e717      	b.n	800b6b8 <LoRaMacClassBProcess+0xa8>
    if( ( callbacks != NULL ) && ( callbacks->GetTemperatureLevel != NULL ) )
 800b888:	0023      	movs	r3, r4
 800b88a:	3390      	adds	r3, #144	; 0x90
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d003      	beq.n	800b89a <LoRaMacClassBProcess+0x28a>
        beaconCtx->Temperature = (float) callbacks->GetTemperatureLevel( );
 800b892:	4798      	blx	r3
 800b894:	f7f5 fdce 	bl	8001434 <__aeabi_ui2f>
 800b898:	6120      	str	r0, [r4, #16]
            beaconEventTime = Ctx.BeaconCtx.NextBeaconRxAdjusted - Radio.GetWakeupTime( );
 800b89a:	4b25      	ldr	r3, [pc, #148]	; (800b930 <LoRaMacClassBProcess+0x320>)
 800b89c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b89e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8a0:	9303      	str	r3, [sp, #12]
 800b8a2:	4798      	blx	r3
 800b8a4:	1a36      	subs	r6, r6, r0
            currentTime = TimerGetCurrentTime( );
 800b8a6:	f002 ffd2 	bl	800e84e <TimerGetCurrentTime>
            if( beaconEventTime > currentTime )
 800b8aa:	0023      	movs	r3, r4
 800b8ac:	3344      	adds	r3, #68	; 0x44
 800b8ae:	4286      	cmp	r6, r0
 800b8b0:	d907      	bls.n	800b8c2 <LoRaMacClassBProcess+0x2b2>
                Ctx.BeaconState = BEACON_STATE_GUARD;
 800b8b2:	2208      	movs	r2, #8
                beaconEventTime -= currentTime;
 800b8b4:	1a30      	subs	r0, r6, r0
                beaconEventTime = TimerTempCompensation( beaconEventTime, Ctx.BeaconCtx.Temperature );
 800b8b6:	6921      	ldr	r1, [r4, #16]
                Ctx.BeaconState = BEACON_STATE_GUARD;
 800b8b8:	701a      	strb	r2, [r3, #0]
                beaconEventTime = TimerTempCompensation( beaconEventTime, Ctx.BeaconCtx.Temperature );
 800b8ba:	f002 ffdd 	bl	800e878 <TimerTempCompensation>
 800b8be:	0006      	movs	r6, r0
    if( activateTimer == true )
 800b8c0:	e6fa      	b.n	800b6b8 <LoRaMacClassBProcess+0xa8>
                Ctx.BeaconState = BEACON_STATE_REACQUISITION;
 800b8c2:	2204      	movs	r2, #4
 800b8c4:	701a      	strb	r2, [r3, #0]
    if( activateTimer == true )
 800b8c6:	e76b      	b.n	800b7a0 <LoRaMacClassBProcess+0x190>
            Ctx.BeaconState = BEACON_STATE_RX;
 800b8c8:	2309      	movs	r3, #9
 800b8ca:	3444      	adds	r4, #68	; 0x44
 800b8cc:	7023      	strb	r3, [r4, #0]
            LoRaMacClassBStopRxSlots( );
 800b8ce:	f7ff fdd1 	bl	800b474 <LoRaMacClassBStopRxSlots>
            RxBeaconSetup( CLASSB_BEACON_RESERVED, false );
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	e706      	b.n	800b6e4 <LoRaMacClassBProcess+0xd4>
            if( Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeReq == 1 )
 800b8d6:	0023      	movs	r3, r4
 800b8d8:	33a4      	adds	r3, #164	; 0xa4
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	781a      	ldrb	r2, [r3, #0]
 800b8de:	0752      	lsls	r2, r2, #29
 800b8e0:	d513      	bpl.n	800b90a <LoRaMacClassBProcess+0x2fa>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true )
 800b8e2:	200b      	movs	r0, #11
 800b8e4:	f000 fb2a 	bl	800bf3c <LoRaMacConfirmQueueIsCmdActive>
 800b8e8:	2800      	cmp	r0, #0
 800b8ea:	d003      	beq.n	800b8f4 <LoRaMacClassBProcess+0x2e4>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND, MLME_BEACON_ACQUISITION );
 800b8ec:	210b      	movs	r1, #11
 800b8ee:	2010      	movs	r0, #16
 800b8f0:	f000 face 	bl	800be90 <LoRaMacConfirmQueueSetStatus>
            LoRaMacClassBStopRxSlots( );
 800b8f4:	f7ff fdbe 	bl	800b474 <LoRaMacClassBStopRxSlots>
            InitClassBDefaults( );
 800b8f8:	f7ff faae 	bl	800ae58 <InitClassBDefaults>
            Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MacDone = 1;
 800b8fc:	2320      	movs	r3, #32
 800b8fe:	34a4      	adds	r4, #164	; 0xa4
 800b900:	6822      	ldr	r2, [r4, #0]
 800b902:	7811      	ldrb	r1, [r2, #0]
 800b904:	430b      	orrs	r3, r1
 800b906:	7013      	strb	r3, [r2, #0]
    if( activateTimer == true )
 800b908:	e6ef      	b.n	800b6ea <LoRaMacClassBProcess+0xda>
                Ctx.LoRaMacClassBParams.MlmeIndication->MlmeIndication = MLME_BEACON_LOST;
 800b90a:	0022      	movs	r2, r4
 800b90c:	210e      	movs	r1, #14
 800b90e:	3298      	adds	r2, #152	; 0x98
 800b910:	6812      	ldr	r2, [r2, #0]
 800b912:	8011      	strh	r1, [r2, #0]
                Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeInd = 1;
 800b914:	2208      	movs	r2, #8
 800b916:	7819      	ldrb	r1, [r3, #0]
 800b918:	430a      	orrs	r2, r1
 800b91a:	701a      	strb	r2, [r3, #0]
 800b91c:	e7ea      	b.n	800b8f4 <LoRaMacClassBProcess+0x2e4>
            Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 800b91e:	2300      	movs	r3, #0
 800b920:	3444      	adds	r4, #68	; 0x44
 800b922:	7023      	strb	r3, [r4, #0]
    if( activateTimer == true )
 800b924:	e6e1      	b.n	800b6ea <LoRaMacClassBProcess+0xda>
 800b926:	46c0      	nop			; (mov r8, r8)
 800b928:	20000d44 	.word	0x20000d44
 800b92c:	20001654 	.word	0x20001654
 800b930:	0801074c 	.word	0x0801074c
 800b934:	2000169c 	.word	0x2000169c
 800b938:	00000848 	.word	0x00000848
 800b93c:	20001658 	.word	0x20001658
 800b940:	200016b4 	.word	0x200016b4
 800b944:	006ddd00 	.word	0x006ddd00
            uint32_t frequency = Ctx.NvmCtx->PingSlotCtx.Frequency;
 800b948:	0023      	movs	r3, r4
 800b94a:	33bc      	adds	r3, #188	; 0xbc
 800b94c:	681b      	ldr	r3, [r3, #0]
            if( Ctx.NvmCtx->PingSlotCtx.Ctrl.CustomFreq == 0 )
 800b94e:	781a      	ldrb	r2, [r3, #0]
 800b950:	420a      	tst	r2, r1
 800b952:	d100      	bne.n	800b956 <LoRaMacClassBProcess+0x346>
 800b954:	e0ac      	b.n	800bab0 <LoRaMacClassBProcess+0x4a0>
            uint32_t frequency = Ctx.NvmCtx->PingSlotCtx.Frequency;
 800b956:	6858      	ldr	r0, [r3, #4]
            if( Ctx.MulticastSlotState != PINGSLOT_STATE_RX )
 800b958:	0023      	movs	r3, r4
 800b95a:	3346      	adds	r3, #70	; 0x46
 800b95c:	781a      	ldrb	r2, [r3, #0]
 800b95e:	0023      	movs	r3, r4
 800b960:	3345      	adds	r3, #69	; 0x45
 800b962:	2a03      	cmp	r2, #3
 800b964:	d100      	bne.n	800b968 <LoRaMacClassBProcess+0x358>
 800b966:	e0ab      	b.n	800bac0 <LoRaMacClassBProcess+0x4b0>
                Ctx.PingSlotState = PINGSLOT_STATE_RX;
 800b968:	2203      	movs	r2, #3
 800b96a:	701a      	strb	r2, [r3, #0]
                pingSlotRxConfig.Datarate = Ctx.NvmCtx->PingSlotCtx.Datarate;
 800b96c:	0023      	movs	r3, r4
                pingSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 800b96e:	0026      	movs	r6, r4
                pingSlotRxConfig.Datarate = Ctx.NvmCtx->PingSlotCtx.Datarate;
 800b970:	33bc      	adds	r3, #188	; 0xbc
 800b972:	681b      	ldr	r3, [r3, #0]
                pingSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 800b974:	36b0      	adds	r6, #176	; 0xb0
                pingSlotRxConfig.Datarate = Ctx.NvmCtx->PingSlotCtx.Datarate;
 800b976:	7a1b      	ldrb	r3, [r3, #8]
                pingSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 800b978:	002f      	movs	r7, r5
                pingSlotRxConfig.Datarate = Ctx.NvmCtx->PingSlotCtx.Datarate;
 800b97a:	766b      	strb	r3, [r5, #25]
                pingSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 800b97c:	6833      	ldr	r3, [r6, #0]
 800b97e:	3728      	adds	r7, #40	; 0x28
 800b980:	001a      	movs	r2, r3
 800b982:	3235      	adds	r2, #53	; 0x35
 800b984:	7812      	ldrb	r2, [r2, #0]
                pingSlotRxConfig.RepeaterSupport = Ctx.LoRaMacClassBParams.LoRaMacParams->RepeaterSupport;
 800b986:	3340      	adds	r3, #64	; 0x40
                pingSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 800b988:	703a      	strb	r2, [r7, #0]
                pingSlotRxConfig.RepeaterSupport = Ctx.LoRaMacClassBParams.LoRaMacParams->RepeaterSupport;
 800b98a:	002a      	movs	r2, r5
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	3229      	adds	r2, #41	; 0x29
 800b990:	7013      	strb	r3, [r2, #0]
                pingSlotRxConfig.RxContinuous = false;
 800b992:	2380      	movs	r3, #128	; 0x80
 800b994:	00db      	lsls	r3, r3, #3
 800b996:	856b      	strh	r3, [r5, #42]	; 0x2a
                RegionRxConfig( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &pingSlotRxConfig, ( int8_t* )&Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 800b998:	0023      	movs	r3, r4
 800b99a:	0029      	movs	r1, r5
 800b99c:	339c      	adds	r3, #156	; 0x9c
 800b99e:	34ac      	adds	r4, #172	; 0xac
 800b9a0:	681a      	ldr	r2, [r3, #0]
 800b9a2:	6823      	ldr	r3, [r4, #0]
                pingSlotRxConfig.Frequency = frequency;
 800b9a4:	61e8      	str	r0, [r5, #28]
                RegionRxConfig( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &pingSlotRxConfig, ( int8_t* )&Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 800b9a6:	7818      	ldrb	r0, [r3, #0]
 800b9a8:	3204      	adds	r2, #4
 800b9aa:	3118      	adds	r1, #24
 800b9ac:	f001 f87a 	bl	800caa4 <RegionRxConfig>
                if( pingSlotRxConfig.RxContinuous == false )
 800b9b0:	4b70      	ldr	r3, [pc, #448]	; (800bb74 <LoRaMacClassBProcess+0x564>)
 800b9b2:	78ba      	ldrb	r2, [r7, #2]
                    Radio.Rx( 0 ); // Continuous mode
 800b9b4:	2000      	movs	r0, #0
 800b9b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                if( pingSlotRxConfig.RxContinuous == false )
 800b9b8:	2a00      	cmp	r2, #0
 800b9ba:	d101      	bne.n	800b9c0 <LoRaMacClassBProcess+0x3b0>
                    Radio.Rx( Ctx.LoRaMacClassBParams.LoRaMacParams->MaxRxWindow );
 800b9bc:	6832      	ldr	r2, [r6, #0]
 800b9be:	68d0      	ldr	r0, [r2, #12]
                    Radio.Rx( 0 ); // Continuous mode
 800b9c0:	4798      	blx	r3
        {
            LoRaMacClassBProcessPingSlot( );
        }
        if( events.Events.MulticastSlot == 1 )
 800b9c2:	9b02      	ldr	r3, [sp, #8]
 800b9c4:	075b      	lsls	r3, r3, #29
 800b9c6:	d571      	bpl.n	800baac <LoRaMacClassBProcess+0x49c>
    MulticastCtx_t *cur = Ctx.LoRaMacClassBParams.MulticastChannels;
 800b9c8:	4e6b      	ldr	r6, [pc, #428]	; (800bb78 <LoRaMacClassBProcess+0x568>)
    TimerTime_t slotTime = 0;
 800b9ca:	2100      	movs	r1, #0
    MulticastCtx_t *cur = Ctx.LoRaMacClassBParams.MulticastChannels;
 800b9cc:	0033      	movs	r3, r6
 800b9ce:	33b4      	adds	r3, #180	; 0xb4
 800b9d0:	681c      	ldr	r4, [r3, #0]
    TimerTime_t slotTime = 0;
 800b9d2:	9105      	str	r1, [sp, #20]
    if( cur == NULL )
 800b9d4:	428c      	cmp	r4, r1
 800b9d6:	d069      	beq.n	800baac <LoRaMacClassBProcess+0x49c>
    if( Ctx.MulticastSlotState == PINGSLOT_STATE_RX )
 800b9d8:	0032      	movs	r2, r6
 800b9da:	3246      	adds	r2, #70	; 0x46
 800b9dc:	7813      	ldrb	r3, [r2, #0]
 800b9de:	2b03      	cmp	r3, #3
 800b9e0:	d064      	beq.n	800baac <LoRaMacClassBProcess+0x49c>
    switch( Ctx.MulticastSlotState )
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d017      	beq.n	800ba16 <LoRaMacClassBProcess+0x406>
 800b9e6:	2b02      	cmp	r3, #2
 800b9e8:	d100      	bne.n	800b9ec <LoRaMacClassBProcess+0x3dc>
 800b9ea:	e070      	b.n	800bace <LoRaMacClassBProcess+0x4be>
 800b9ec:	428b      	cmp	r3, r1
 800b9ee:	d000      	beq.n	800b9f2 <LoRaMacClassBProcess+0x3e2>
 800b9f0:	e0be      	b.n	800bb70 <LoRaMacClassBProcess+0x560>
 800b9f2:	0027      	movs	r7, r4
 800b9f4:	37a0      	adds	r7, #160	; 0xa0
                ComputePingOffset( Ctx.BeaconCtx.BeaconTime.Seconds,
 800b9f6:	0022      	movs	r2, r4
 800b9f8:	3224      	adds	r2, #36	; 0x24
 800b9fa:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800b9fc:	9200      	str	r2, [sp, #0]
 800b9fe:	6862      	ldr	r2, [r4, #4]
 800ba00:	2100      	movs	r1, #0
 800ba02:	6970      	ldr	r0, [r6, #20]
                cur++;
 800ba04:	3428      	adds	r4, #40	; 0x28
                ComputePingOffset( Ctx.BeaconCtx.BeaconTime.Seconds,
 800ba06:	f7ff f933 	bl	800ac70 <ComputePingOffset>
            for( uint8_t i = 0; i < 4; i++ )
 800ba0a:	42a7      	cmp	r7, r4
 800ba0c:	d1f3      	bne.n	800b9f6 <LoRaMacClassBProcess+0x3e6>
            Ctx.MulticastSlotState = PINGSLOT_STATE_SET_TIMER;
 800ba0e:	0033      	movs	r3, r6
 800ba10:	2201      	movs	r2, #1
 800ba12:	3346      	adds	r3, #70	; 0x46
 800ba14:	701a      	strb	r2, [r3, #0]
            cur = Ctx.LoRaMacClassBParams.MulticastChannels;
 800ba16:	0033      	movs	r3, r6
            Ctx.PingSlotCtx.NextMulticastChannel = NULL;
 800ba18:	2400      	movs	r4, #0
            cur = Ctx.LoRaMacClassBParams.MulticastChannels;
 800ba1a:	33b4      	adds	r3, #180	; 0xb4
 800ba1c:	681b      	ldr	r3, [r3, #0]
            Ctx.PingSlotCtx.NextMulticastChannel = NULL;
 800ba1e:	60b4      	str	r4, [r6, #8]
            for( uint8_t i = 0; i < 4; i++ )
 800ba20:	001e      	movs	r6, r3
 800ba22:	33c0      	adds	r3, #192	; 0xc0
 800ba24:	3620      	adds	r6, #32
 800ba26:	9302      	str	r3, [sp, #8]
 800ba28:	0037      	movs	r7, r6
                if( CalcNextSlotTime( cur->PingOffset, cur->PingPeriod, cur->PingNb, &slotTime ) == true )
 800ba2a:	7832      	ldrb	r2, [r6, #0]
 800ba2c:	8871      	ldrh	r1, [r6, #2]
 800ba2e:	88b0      	ldrh	r0, [r6, #4]
 800ba30:	ab05      	add	r3, sp, #20
 800ba32:	3f20      	subs	r7, #32
 800ba34:	f7ff f8d0 	bl	800abd8 <CalcNextSlotTime>
 800ba38:	2800      	cmp	r0, #0
 800ba3a:	d007      	beq.n	800ba4c <LoRaMacClassBProcess+0x43c>
                    if( ( multicastSlotTime == 0 ) || ( multicastSlotTime > slotTime ) )
 800ba3c:	9b05      	ldr	r3, [sp, #20]
 800ba3e:	2c00      	cmp	r4, #0
 800ba40:	d001      	beq.n	800ba46 <LoRaMacClassBProcess+0x436>
 800ba42:	42a3      	cmp	r3, r4
 800ba44:	d202      	bcs.n	800ba4c <LoRaMacClassBProcess+0x43c>
                        multicastSlotTime = slotTime;
 800ba46:	001c      	movs	r4, r3
                        Ctx.PingSlotCtx.NextMulticastChannel = cur;
 800ba48:	4b4b      	ldr	r3, [pc, #300]	; (800bb78 <LoRaMacClassBProcess+0x568>)
 800ba4a:	609f      	str	r7, [r3, #8]
            for( uint8_t i = 0; i < 4; i++ )
 800ba4c:	9b02      	ldr	r3, [sp, #8]
 800ba4e:	3628      	adds	r6, #40	; 0x28
 800ba50:	42b3      	cmp	r3, r6
 800ba52:	d1e9      	bne.n	800ba28 <LoRaMacClassBProcess+0x418>
            if( Ctx.PingSlotCtx.NextMulticastChannel != NULL )
 800ba54:	4e48      	ldr	r6, [pc, #288]	; (800bb78 <LoRaMacClassBProcess+0x568>)
 800ba56:	68b3      	ldr	r3, [r6, #8]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d027      	beq.n	800baac <LoRaMacClassBProcess+0x49c>
                if( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 1 )
 800ba5c:	7b33      	ldrb	r3, [r6, #12]
 800ba5e:	079b      	lsls	r3, r3, #30
 800ba60:	d514      	bpl.n	800ba8c <LoRaMacClassBProcess+0x47c>
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 800ba62:	0031      	movs	r1, r6
                                                    Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 800ba64:	0033      	movs	r3, r6
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 800ba66:	0030      	movs	r0, r6
 800ba68:	002f      	movs	r7, r5
 800ba6a:	31bc      	adds	r1, #188	; 0xbc
 800ba6c:	6809      	ldr	r1, [r1, #0]
                                                    Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 800ba6e:	33b0      	adds	r3, #176	; 0xb0
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 800ba70:	30ac      	adds	r0, #172	; 0xac
                                                    Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 800ba72:	681b      	ldr	r3, [r3, #0]
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 800ba74:	6800      	ldr	r0, [r0, #0]
 800ba76:	7a09      	ldrb	r1, [r1, #8]
 800ba78:	372c      	adds	r7, #44	; 0x2c
 800ba7a:	7a1a      	ldrb	r2, [r3, #8]
 800ba7c:	7800      	ldrb	r0, [r0, #0]
 800ba7e:	9700      	str	r7, [sp, #0]
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	b249      	sxtb	r1, r1
 800ba84:	f001 f803 	bl	800ca8e <RegionComputeRxWindowParameters>
                    Ctx.PingSlotCtx.SymbolTimeout = multicastSlotRxConfig.WindowTimeout;
 800ba88:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ba8a:	80f3      	strh	r3, [r6, #6]
                if( ( int32_t )multicastSlotTime > multicastSlotRxConfig.WindowOffset )
 800ba8c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800ba8e:	42a3      	cmp	r3, r4
 800ba90:	da00      	bge.n	800ba94 <LoRaMacClassBProcess+0x484>
                    multicastSlotTime += multicastSlotRxConfig.WindowOffset;
 800ba92:	18e4      	adds	r4, r4, r3
                Ctx.MulticastSlotState = PINGSLOT_STATE_IDLE;
 800ba94:	2202      	movs	r2, #2
                TimerSetValue( &Ctx.MulticastSlotTimer, multicastSlotTime );
 800ba96:	4d39      	ldr	r5, [pc, #228]	; (800bb7c <LoRaMacClassBProcess+0x56c>)
                Ctx.MulticastSlotState = PINGSLOT_STATE_IDLE;
 800ba98:	4b37      	ldr	r3, [pc, #220]	; (800bb78 <LoRaMacClassBProcess+0x568>)
                TimerSetValue( &Ctx.MulticastSlotTimer, multicastSlotTime );
 800ba9a:	0028      	movs	r0, r5
                Ctx.MulticastSlotState = PINGSLOT_STATE_IDLE;
 800ba9c:	3346      	adds	r3, #70	; 0x46
                TimerSetValue( &Ctx.MulticastSlotTimer, multicastSlotTime );
 800ba9e:	0021      	movs	r1, r4
                Ctx.MulticastSlotState = PINGSLOT_STATE_IDLE;
 800baa0:	701a      	strb	r2, [r3, #0]
                TimerSetValue( &Ctx.MulticastSlotTimer, multicastSlotTime );
 800baa2:	f002 fec3 	bl	800e82c <TimerSetValue>
                TimerStart( &Ctx.MulticastSlotTimer );
 800baa6:	0028      	movs	r0, r5
                TimerStart( &Ctx.MulticastSlotTimer );
 800baa8:	f002 fe1c 	bl	800e6e4 <TimerStart>
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800baac:	b007      	add	sp, #28
 800baae:	bdf0      	pop	{r4, r5, r6, r7, pc}
                frequency = CalcDownlinkChannelAndFrequency( *Ctx.LoRaMacClassBParams.LoRaMacDevAddr, Ctx.BeaconCtx.BeaconTime.Seconds, CLASSB_BEACON_INTERVAL );
 800bab0:	0023      	movs	r3, r4
 800bab2:	33a8      	adds	r3, #168	; 0xa8
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	6961      	ldr	r1, [r4, #20]
 800bab8:	6818      	ldr	r0, [r3, #0]
 800baba:	f7ff f91d 	bl	800acf8 <CalcDownlinkChannelAndFrequency.constprop.0>
 800babe:	e74b      	b.n	800b958 <LoRaMacClassBProcess+0x348>
                Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800bac0:	2200      	movs	r2, #0
                TimerSetValue( &Ctx.PingSlotTimer, CLASSB_PING_SLOT_WINDOW );
 800bac2:	211e      	movs	r1, #30
 800bac4:	4c2e      	ldr	r4, [pc, #184]	; (800bb80 <LoRaMacClassBProcess+0x570>)
                Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800bac6:	701a      	strb	r2, [r3, #0]
                TimerSetValue( &Ctx.PingSlotTimer, CLASSB_PING_SLOT_WINDOW );
 800bac8:	e65e      	b.n	800b788 <LoRaMacClassBProcess+0x178>
            Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800baca:	7033      	strb	r3, [r6, #0]
}
 800bacc:	e779      	b.n	800b9c2 <LoRaMacClassBProcess+0x3b2>
            if( Ctx.PingSlotCtx.NextMulticastChannel == NULL )
 800bace:	68b3      	ldr	r3, [r6, #8]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d107      	bne.n	800bae4 <LoRaMacClassBProcess+0x4d4>
                TimerSetValue( &Ctx.MulticastSlotTimer, 1 );
 800bad4:	4c29      	ldr	r4, [pc, #164]	; (800bb7c <LoRaMacClassBProcess+0x56c>)
 800bad6:	2101      	movs	r1, #1
 800bad8:	0020      	movs	r0, r4
                Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800bada:	7013      	strb	r3, [r2, #0]
                TimerSetValue( &Ctx.MulticastSlotTimer, 1 );
 800badc:	f002 fea6 	bl	800e82c <TimerSetValue>
                TimerStart( &Ctx.MulticastSlotTimer );
 800bae0:	0020      	movs	r0, r4
 800bae2:	e7e1      	b.n	800baa8 <LoRaMacClassBProcess+0x498>
            frequency = Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.RxParams.ClassB.Frequency;
 800bae4:	6958      	ldr	r0, [r3, #20]
            if( frequency == 0 )
 800bae6:	2800      	cmp	r0, #0
 800bae8:	d103      	bne.n	800baf2 <LoRaMacClassBProcess+0x4e2>
                frequency = CalcDownlinkChannelAndFrequency( Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.Address, Ctx.BeaconCtx.BeaconTime.Seconds, CLASSB_BEACON_INTERVAL );
 800baea:	6971      	ldr	r1, [r6, #20]
 800baec:	6858      	ldr	r0, [r3, #4]
 800baee:	f7ff f903 	bl	800acf8 <CalcDownlinkChannelAndFrequency.constprop.0>
            Ctx.MulticastSlotState = PINGSLOT_STATE_RX;
 800baf2:	0033      	movs	r3, r6
 800baf4:	2203      	movs	r2, #3
            multicastSlotRxConfig.Datarate = Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.RxParams.ClassB.Datarate;
 800baf6:	0029      	movs	r1, r5
            Ctx.MulticastSlotState = PINGSLOT_STATE_RX;
 800baf8:	3346      	adds	r3, #70	; 0x46
 800bafa:	701a      	strb	r2, [r3, #0]
            multicastSlotRxConfig.Datarate = Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.RxParams.ClassB.Datarate;
 800bafc:	68b3      	ldr	r3, [r6, #8]
 800bafe:	312c      	adds	r1, #44	; 0x2c
 800bb00:	7e1b      	ldrb	r3, [r3, #24]
            if( Ctx.PingSlotState == PINGSLOT_STATE_RX )
 800bb02:	0037      	movs	r7, r6
            multicastSlotRxConfig.Datarate = Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.RxParams.ClassB.Datarate;
 800bb04:	704b      	strb	r3, [r1, #1]
            multicastSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 800bb06:	0033      	movs	r3, r6
 800bb08:	33b0      	adds	r3, #176	; 0xb0
 800bb0a:	681b      	ldr	r3, [r3, #0]
            if( Ctx.PingSlotState == PINGSLOT_STATE_RX )
 800bb0c:	3745      	adds	r7, #69	; 0x45
            multicastSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 800bb0e:	001a      	movs	r2, r3
 800bb10:	3235      	adds	r2, #53	; 0x35
 800bb12:	7812      	ldrb	r2, [r2, #0]
            multicastSlotRxConfig.RepeaterSupport = Ctx.LoRaMacClassBParams.LoRaMacParams->RepeaterSupport;
 800bb14:	3340      	adds	r3, #64	; 0x40
            multicastSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 800bb16:	740a      	strb	r2, [r1, #16]
            multicastSlotRxConfig.RepeaterSupport = Ctx.LoRaMacClassBParams.LoRaMacParams->RepeaterSupport;
 800bb18:	781b      	ldrb	r3, [r3, #0]
            multicastSlotRxConfig.Frequency = frequency;
 800bb1a:	6328      	str	r0, [r5, #48]	; 0x30
            multicastSlotRxConfig.RepeaterSupport = Ctx.LoRaMacClassBParams.LoRaMacParams->RepeaterSupport;
 800bb1c:	744b      	strb	r3, [r1, #17]
            multicastSlotRxConfig.RxContinuous = false;
 800bb1e:	23a0      	movs	r3, #160	; 0xa0
 800bb20:	00db      	lsls	r3, r3, #3
 800bb22:	87eb      	strh	r3, [r5, #62]	; 0x3e
            RegionRxConfig( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &multicastSlotRxConfig, ( int8_t* )&Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 800bb24:	0033      	movs	r3, r6
 800bb26:	339c      	adds	r3, #156	; 0x9c
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	0033      	movs	r3, r6
 800bb2c:	33ac      	adds	r3, #172	; 0xac
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	3204      	adds	r2, #4
 800bb32:	7818      	ldrb	r0, [r3, #0]
 800bb34:	f000 ffb6 	bl	800caa4 <RegionRxConfig>
            if( Ctx.PingSlotState == PINGSLOT_STATE_RX )
 800bb38:	783b      	ldrb	r3, [r7, #0]
 800bb3a:	4c0e      	ldr	r4, [pc, #56]	; (800bb74 <LoRaMacClassBProcess+0x564>)
 800bb3c:	2b03      	cmp	r3, #3
 800bb3e:	d10c      	bne.n	800bb5a <LoRaMacClassBProcess+0x54a>
                Radio.Standby( );
 800bb40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bb42:	9302      	str	r3, [sp, #8]
 800bb44:	4798      	blx	r3
                Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800bb46:	2300      	movs	r3, #0
 800bb48:	703b      	strb	r3, [r7, #0]
                TimerSetValue( &Ctx.PingSlotTimer, CLASSB_PING_SLOT_WINDOW );
 800bb4a:	4f0d      	ldr	r7, [pc, #52]	; (800bb80 <LoRaMacClassBProcess+0x570>)
 800bb4c:	211e      	movs	r1, #30
 800bb4e:	0038      	movs	r0, r7
 800bb50:	f002 fe6c 	bl	800e82c <TimerSetValue>
                TimerStart( &Ctx.PingSlotTimer );
 800bb54:	0038      	movs	r0, r7
 800bb56:	f002 fdc5 	bl	800e6e4 <TimerStart>
            if( multicastSlotRxConfig.RxContinuous == false )
 800bb5a:	352c      	adds	r5, #44	; 0x2c
 800bb5c:	7caa      	ldrb	r2, [r5, #18]
                Radio.Rx( 0 ); // Continuous mode
 800bb5e:	2000      	movs	r0, #0
 800bb60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
            if( multicastSlotRxConfig.RxContinuous == false )
 800bb62:	2a00      	cmp	r2, #0
 800bb64:	d102      	bne.n	800bb6c <LoRaMacClassBProcess+0x55c>
                Radio.Rx( Ctx.LoRaMacClassBParams.LoRaMacParams->MaxRxWindow );
 800bb66:	36b0      	adds	r6, #176	; 0xb0
 800bb68:	6832      	ldr	r2, [r6, #0]
 800bb6a:	68d0      	ldr	r0, [r2, #12]
                Radio.Rx( 0 ); // Continuous mode
 800bb6c:	4798      	blx	r3
 800bb6e:	e79d      	b.n	800baac <LoRaMacClassBProcess+0x49c>
            Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800bb70:	7011      	strb	r1, [r2, #0]
            break;
 800bb72:	e79b      	b.n	800baac <LoRaMacClassBProcess+0x49c>
 800bb74:	0801074c 	.word	0x0801074c
 800bb78:	20001654 	.word	0x20001654
 800bb7c:	200016cc 	.word	0x200016cc
 800bb80:	200016b4 	.word	0x200016b4

0800bb84 <NvmCtxCallback>:
/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
    if( CommandsNvmCtxChanged != NULL )
 800bb84:	4b03      	ldr	r3, [pc, #12]	; (800bb94 <NvmCtxCallback+0x10>)
{
 800bb86:	b510      	push	{r4, lr}
    if( CommandsNvmCtxChanged != NULL )
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d000      	beq.n	800bb90 <NvmCtxCallback+0xc>
    {
        CommandsNvmCtxChanged( );
 800bb8e:	4798      	blx	r3
    }
}
 800bb90:	bd10      	pop	{r4, pc}
 800bb92:	46c0      	nop			; (mov r8, r8)
 800bb94:	20000d84 	.word	0x20000d84

0800bb98 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 800bb98:	b570      	push	{r4, r5, r6, lr}
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 800bb9a:	4d06      	ldr	r5, [pc, #24]	; (800bbb4 <LoRaMacCommandsInit+0x1c>)
{
 800bb9c:	0004      	movs	r4, r0
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 800bb9e:	22fc      	movs	r2, #252	; 0xfc
 800bba0:	0028      	movs	r0, r5
 800bba2:	2100      	movs	r1, #0
 800bba4:	f002 ff22 	bl	800e9ec <memset1>
    list->First = 0;
 800bba8:	2000      	movs	r0, #0

    LinkedListInit( &NvmCtx.MacCommandList );

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 800bbaa:	4b03      	ldr	r3, [pc, #12]	; (800bbb8 <LoRaMacCommandsInit+0x20>)
    list->First = 0;
 800bbac:	6028      	str	r0, [r5, #0]
    list->Last = 0;
 800bbae:	6068      	str	r0, [r5, #4]
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 800bbb0:	601c      	str	r4, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
}
 800bbb2:	bd70      	pop	{r4, r5, r6, pc}
 800bbb4:	20000d88 	.word	0x20000d88
 800bbb8:	20000d84 	.word	0x20000d84

0800bbbc <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 800bbbc:	0001      	movs	r1, r0
 800bbbe:	b510      	push	{r4, lr}
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
        return LORAMAC_COMMANDS_SUCCESS;
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800bbc0:	2001      	movs	r0, #1
    if( commandsNvmCtx != NULL )
 800bbc2:	2900      	cmp	r1, #0
 800bbc4:	d004      	beq.n	800bbd0 <LoRaMacCommandsRestoreNvmCtx+0x14>
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 800bbc6:	4803      	ldr	r0, [pc, #12]	; (800bbd4 <LoRaMacCommandsRestoreNvmCtx+0x18>)
 800bbc8:	22fc      	movs	r2, #252	; 0xfc
 800bbca:	f002 fefa 	bl	800e9c2 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 800bbce:	2000      	movs	r0, #0
    }
}
 800bbd0:	bd10      	pop	{r4, pc}
 800bbd2:	46c0      	nop			; (mov r8, r8)
 800bbd4:	20000d88 	.word	0x20000d88

0800bbd8 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
    *commandsNvmCtxSize = sizeof( NvmCtx );
 800bbd8:	23fc      	movs	r3, #252	; 0xfc
 800bbda:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 800bbdc:	4800      	ldr	r0, [pc, #0]	; (800bbe0 <LoRaMacCommandsGetNvmCtx+0x8>)
 800bbde:	4770      	bx	lr
 800bbe0:	20000d88 	.word	0x20000d88

0800bbe4 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 800bbe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbe6:	0005      	movs	r5, r0
 800bbe8:	0016      	movs	r6, r2
    if( payload == 0 )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800bbea:	2701      	movs	r7, #1
{
 800bbec:	9101      	str	r1, [sp, #4]
    if( payload == 0 )
 800bbee:	2900      	cmp	r1, #0
 800bbf0:	d03c      	beq.n	800bc6c <LoRaMacCommandsAddCmd+0x88>
 800bbf2:	2400      	movs	r4, #0
 800bbf4:	4b21      	ldr	r3, [pc, #132]	; (800bc7c <LoRaMacCommandsAddCmd+0x98>)
    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 800bbf6:	0122      	lsls	r2, r4, #4
 800bbf8:	0018      	movs	r0, r3
 800bbfa:	4694      	mov	ip, r2
 800bbfc:	001a      	movs	r2, r3
 800bbfe:	3010      	adds	r0, #16
        if( mem[size] != 0x00 )
 800bc00:	7817      	ldrb	r7, [r2, #0]
 800bc02:	2f00      	cmp	r7, #0
 800bc04:	d134      	bne.n	800bc70 <LoRaMacCommandsAddCmd+0x8c>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800bc06:	3201      	adds	r2, #1
 800bc08:	4282      	cmp	r2, r0
 800bc0a:	d1f9      	bne.n	800bc00 <LoRaMacCommandsAddCmd+0x1c>
    if( list->First == 0 )
 800bc0c:	481c      	ldr	r0, [pc, #112]	; (800bc80 <LoRaMacCommandsAddCmd+0x9c>)
 800bc0e:	6802      	ldr	r2, [r0, #0]
 800bc10:	2a00      	cmp	r2, #0
 800bc12:	d100      	bne.n	800bc16 <LoRaMacCommandsAddCmd+0x32>
        list->First = element;
 800bc14:	6003      	str	r3, [r0, #0]
    if( list->Last )
 800bc16:	6842      	ldr	r2, [r0, #4]
 800bc18:	2a00      	cmp	r2, #0
 800bc1a:	d000      	beq.n	800bc1e <LoRaMacCommandsAddCmd+0x3a>
        list->Last->Next = element;
 800bc1c:	6013      	str	r3, [r2, #0]
    element->Next = 0;
 800bc1e:	0122      	lsls	r2, r4, #4
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
    newCmd->PayloadSize = payloadSize;
 800bc20:	3401      	adds	r4, #1
    list->Last = element;
 800bc22:	6043      	str	r3, [r0, #4]
    newCmd->PayloadSize = payloadSize;
 800bc24:	0123      	lsls	r3, r4, #4
 800bc26:	50c6      	str	r6, [r0, r3]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800bc28:	4663      	mov	r3, ip
    element->Next = 0;
 800bc2a:	2100      	movs	r1, #0
 800bc2c:	1882      	adds	r2, r0, r2
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800bc2e:	330d      	adds	r3, #13
    element->Next = 0;
 800bc30:	6091      	str	r1, [r2, #8]
    newCmd->CID = cid;
 800bc32:	7315      	strb	r5, [r2, #12]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800bc34:	18c0      	adds	r0, r0, r3
 800bc36:	9901      	ldr	r1, [sp, #4]
 800bc38:	b2b2      	uxth	r2, r6
 800bc3a:	f002 fec2 	bl	800e9c2 <memcpy1>
 800bc3e:	2300      	movs	r3, #0
 800bc40:	2d0a      	cmp	r5, #10
 800bc42:	d807      	bhi.n	800bc54 <LoRaMacCommandsAddCmd+0x70>
 800bc44:	22a4      	movs	r2, #164	; 0xa4
 800bc46:	3301      	adds	r3, #1
 800bc48:	40ab      	lsls	r3, r5
 800bc4a:	00d2      	lsls	r2, r2, #3
 800bc4c:	4013      	ands	r3, r2
 800bc4e:	1e5a      	subs	r2, r3, #1
 800bc50:	4193      	sbcs	r3, r2
 800bc52:	b2db      	uxtb	r3, r3
    newCmd->IsSticky = IsSticky( cid );
 800bc54:	4a0a      	ldr	r2, [pc, #40]	; (800bc80 <LoRaMacCommandsAddCmd+0x9c>)
 800bc56:	0124      	lsls	r4, r4, #4
 800bc58:	1914      	adds	r4, r2, r4
 800bc5a:	7123      	strb	r3, [r4, #4]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800bc5c:	0013      	movs	r3, r2
 800bc5e:	33f8      	adds	r3, #248	; 0xf8
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	3201      	adds	r2, #1
 800bc64:	1996      	adds	r6, r2, r6
 800bc66:	601e      	str	r6, [r3, #0]

    NvmCtxCallback( );
 800bc68:	f7ff ff8c 	bl	800bb84 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800bc6c:	0038      	movs	r0, r7
 800bc6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( itr == NUM_OF_MAC_COMMANDS )
 800bc70:	3401      	adds	r4, #1
 800bc72:	0003      	movs	r3, r0
 800bc74:	2c0f      	cmp	r4, #15
 800bc76:	d1be      	bne.n	800bbf6 <LoRaMacCommandsAddCmd+0x12>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800bc78:	2702      	movs	r7, #2
 800bc7a:	e7f7      	b.n	800bc6c <LoRaMacCommandsAddCmd+0x88>
 800bc7c:	20000d90 	.word	0x20000d90
 800bc80:	20000d88 	.word	0x20000d88

0800bc84 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 800bc84:	b510      	push	{r4, lr}
    if( macCmd == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800bc86:	2401      	movs	r4, #1
    if( macCmd == NULL )
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	d023      	beq.n	800bcd4 <LoRaMacCommandsRemoveCmd+0x50>
    curElement = list->First;
 800bc8c:	4b12      	ldr	r3, [pc, #72]	; (800bcd8 <LoRaMacCommandsRemoveCmd+0x54>)
 800bc8e:	681a      	ldr	r2, [r3, #0]
    if( element != curElement )
 800bc90:	4290      	cmp	r0, r2
 800bc92:	d104      	bne.n	800bc9e <LoRaMacCommandsRemoveCmd+0x1a>
        list->First = element->Next;
 800bc94:	6802      	ldr	r2, [r0, #0]
 800bc96:	601a      	str	r2, [r3, #0]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	e005      	b.n	800bca8 <LoRaMacCommandsRemoveCmd+0x24>
 800bc9c:	000a      	movs	r2, r1
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800bc9e:	2a00      	cmp	r2, #0
 800bca0:	d002      	beq.n	800bca8 <LoRaMacCommandsRemoveCmd+0x24>
 800bca2:	6811      	ldr	r1, [r2, #0]
 800bca4:	4288      	cmp	r0, r1
 800bca6:	d1f9      	bne.n	800bc9c <LoRaMacCommandsRemoveCmd+0x18>
    if( list->Last == element )
 800bca8:	6859      	ldr	r1, [r3, #4]
 800bcaa:	4288      	cmp	r0, r1
 800bcac:	d100      	bne.n	800bcb0 <LoRaMacCommandsRemoveCmd+0x2c>
        list->Last = PrevElement;
 800bcae:	605a      	str	r2, [r3, #4]
    if( PrevElement != NULL )
 800bcb0:	2a00      	cmp	r2, #0
 800bcb2:	d001      	beq.n	800bcb8 <LoRaMacCommandsRemoveCmd+0x34>
        PrevElement->Next = element->Next;
 800bcb4:	6801      	ldr	r1, [r0, #0]
 800bcb6:	6011      	str	r1, [r2, #0]
    element->Next = NULL;
 800bcb8:	2400      	movs	r4, #0
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800bcba:	33f8      	adds	r3, #248	; 0xf8
 800bcbc:	681a      	ldr	r2, [r3, #0]
 800bcbe:	6881      	ldr	r1, [r0, #8]
 800bcc0:	3a01      	subs	r2, #1
 800bcc2:	1a52      	subs	r2, r2, r1
    element->Next = NULL;
 800bcc4:	6004      	str	r4, [r0, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800bcc6:	0021      	movs	r1, r4
    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800bcc8:	601a      	str	r2, [r3, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800bcca:	2210      	movs	r2, #16
 800bccc:	f002 fe8e 	bl	800e9ec <memset1>
    if( FreeMacCommandSlot( macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    NvmCtxCallback( );
 800bcd0:	f7ff ff58 	bl	800bb84 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800bcd4:	0020      	movs	r0, r4
 800bcd6:	bd10      	pop	{r4, pc}
 800bcd8:	20000d88 	.word	0x20000d88

0800bcdc <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 800bcdc:	4b08      	ldr	r3, [pc, #32]	; (800bd00 <LoRaMacCommandsRemoveNoneStickyCmds+0x24>)
{
 800bcde:	b570      	push	{r4, r5, r6, lr}
    curElement = NvmCtx.MacCommandList.First;
 800bce0:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800bce2:	2c00      	cmp	r4, #0
 800bce4:	d103      	bne.n	800bcee <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
        {
            curElement = curElement->Next;
        }
    }

    NvmCtxCallback( );
 800bce6:	f7ff ff4d 	bl	800bb84 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800bcea:	0020      	movs	r0, r4
 800bcec:	bd70      	pop	{r4, r5, r6, pc}
        if( curElement->IsSticky == false )
 800bcee:	7b23      	ldrb	r3, [r4, #12]
 800bcf0:	6825      	ldr	r5, [r4, #0]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d102      	bne.n	800bcfc <LoRaMacCommandsRemoveNoneStickyCmds+0x20>
            LoRaMacCommandsRemoveCmd( curElement );
 800bcf6:	0020      	movs	r0, r4
 800bcf8:	f7ff ffc4 	bl	800bc84 <LoRaMacCommandsRemoveCmd>
{
 800bcfc:	002c      	movs	r4, r5
 800bcfe:	e7f0      	b.n	800bce2 <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
 800bd00:	20000d88 	.word	0x20000d88

0800bd04 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800bd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd06:	26a4      	movs	r6, #164	; 0xa4
 800bd08:	2501      	movs	r5, #1
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 800bd0a:	4b0b      	ldr	r3, [pc, #44]	; (800bd38 <LoRaMacCommandsRemoveStickyAnsCmds+0x34>)
 800bd0c:	00f6      	lsls	r6, r6, #3
 800bd0e:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800bd10:	2c00      	cmp	r4, #0
 800bd12:	d103      	bne.n	800bd1c <LoRaMacCommandsRemoveStickyAnsCmds+0x18>
            LoRaMacCommandsRemoveCmd( curElement );
        }
        curElement = nexElement;
    }

    NvmCtxCallback( );
 800bd14:	f7ff ff36 	bl	800bb84 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800bd18:	0020      	movs	r0, r4
 800bd1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if( IsSticky( curElement->CID ) == true )
 800bd1c:	7923      	ldrb	r3, [r4, #4]
        nexElement = curElement->Next;
 800bd1e:	6827      	ldr	r7, [r4, #0]
    switch( cid )
 800bd20:	2b0a      	cmp	r3, #10
 800bd22:	d806      	bhi.n	800bd32 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
 800bd24:	002a      	movs	r2, r5
 800bd26:	409a      	lsls	r2, r3
 800bd28:	4232      	tst	r2, r6
 800bd2a:	d002      	beq.n	800bd32 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
            LoRaMacCommandsRemoveCmd( curElement );
 800bd2c:	0020      	movs	r0, r4
 800bd2e:	f7ff ffa9 	bl	800bc84 <LoRaMacCommandsRemoveCmd>
{
 800bd32:	003c      	movs	r4, r7
 800bd34:	e7ec      	b.n	800bd10 <LoRaMacCommandsRemoveStickyAnsCmds+0xc>
 800bd36:	46c0      	nop			; (mov r8, r8)
 800bd38:	20000d88 	.word	0x20000d88

0800bd3c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 800bd3c:	0003      	movs	r3, r0
    if( size == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800bd3e:	2001      	movs	r0, #1
    if( size == NULL )
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d004      	beq.n	800bd4e <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    }
    *size = NvmCtx.SerializedCmdsSize;
    return LORAMAC_COMMANDS_SUCCESS;
 800bd44:	2000      	movs	r0, #0
    *size = NvmCtx.SerializedCmdsSize;
 800bd46:	4a02      	ldr	r2, [pc, #8]	; (800bd50 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800bd48:	32f8      	adds	r2, #248	; 0xf8
 800bd4a:	6812      	ldr	r2, [r2, #0]
 800bd4c:	601a      	str	r2, [r3, #0]
}
 800bd4e:	4770      	bx	lr
 800bd50:	20000d88 	.word	0x20000d88

0800bd54 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800bd54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd56:	0006      	movs	r6, r0
 800bd58:	0015      	movs	r5, r2
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800bd5a:	2001      	movs	r0, #1
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800bd5c:	2a00      	cmp	r2, #0
 800bd5e:	d007      	beq.n	800bd70 <LoRaMacCommandsSerializeCmds+0x1c>
 800bd60:	2900      	cmp	r1, #0
 800bd62:	d005      	beq.n	800bd70 <LoRaMacCommandsSerializeCmds+0x1c>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 800bd64:	4b0d      	ldr	r3, [pc, #52]	; (800bd9c <LoRaMacCommandsSerializeCmds+0x48>)
 800bd66:	681c      	ldr	r4, [r3, #0]
    uint8_t itr = 0;
 800bd68:	2300      	movs	r3, #0

    // Loop through all elements
    while( curElement != NULL )
 800bd6a:	2c00      	cmp	r4, #0
 800bd6c:	d101      	bne.n	800bd72 <LoRaMacCommandsSerializeCmds+0x1e>
            break;
        }
        curElement = curElement->Next;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800bd6e:	2000      	movs	r0, #0
}
 800bd70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800bd72:	68a2      	ldr	r2, [r4, #8]
 800bd74:	1af1      	subs	r1, r6, r3
 800bd76:	3201      	adds	r2, #1
 800bd78:	4291      	cmp	r1, r2
 800bd7a:	d3f8      	bcc.n	800bd6e <LoRaMacCommandsSerializeCmds+0x1a>
            buffer[itr++] = curElement->CID;
 800bd7c:	7922      	ldrb	r2, [r4, #4]
 800bd7e:	1c5f      	adds	r7, r3, #1
 800bd80:	54ea      	strb	r2, [r5, r3]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800bd82:	68a3      	ldr	r3, [r4, #8]
            buffer[itr++] = curElement->CID;
 800bd84:	b2ff      	uxtb	r7, r7
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800bd86:	b29a      	uxth	r2, r3
 800bd88:	1d61      	adds	r1, r4, #5
 800bd8a:	19e8      	adds	r0, r5, r7
 800bd8c:	f002 fe19 	bl	800e9c2 <memcpy1>
            itr = itr + curElement->PayloadSize;
 800bd90:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
 800bd92:	6824      	ldr	r4, [r4, #0]
            itr = itr + curElement->PayloadSize;
 800bd94:	18ff      	adds	r7, r7, r3
 800bd96:	b2fb      	uxtb	r3, r7
        curElement = curElement->Next;
 800bd98:	e7e7      	b.n	800bd6a <LoRaMacCommandsSerializeCmds+0x16>
 800bd9a:	46c0      	nop			; (mov r8, r8)
 800bd9c:	20000d88 	.word	0x20000d88

0800bda0 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 800bda0:	0003      	movs	r3, r0
    if( cmdsPending == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800bda2:	2001      	movs	r0, #1
    if( cmdsPending == NULL )
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d00b      	beq.n	800bdc0 <LoRaMacCommandsStickyCmdsPending+0x20>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 800bda8:	4a07      	ldr	r2, [pc, #28]	; (800bdc8 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800bdaa:	6810      	ldr	r0, [r2, #0]

    *cmdsPending = false;
 800bdac:	2200      	movs	r2, #0
 800bdae:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	d005      	beq.n	800bdc0 <LoRaMacCommandsStickyCmdsPending+0x20>
    {
        if( curElement->IsSticky == true )
 800bdb4:	7b02      	ldrb	r2, [r0, #12]
 800bdb6:	2a00      	cmp	r2, #0
 800bdb8:	d003      	beq.n	800bdc2 <LoRaMacCommandsStickyCmdsPending+0x22>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 800bdba:	2201      	movs	r2, #1
            return LORAMAC_COMMANDS_SUCCESS;
 800bdbc:	2000      	movs	r0, #0
            *cmdsPending = true;
 800bdbe:	701a      	strb	r2, [r3, #0]
        }
        curElement = curElement->Next;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800bdc0:	4770      	bx	lr
        curElement = curElement->Next;
 800bdc2:	6800      	ldr	r0, [r0, #0]
 800bdc4:	e7f4      	b.n	800bdb0 <LoRaMacCommandsStickyCmdsPending+0x10>
 800bdc6:	46c0      	nop			; (mov r8, r8)
 800bdc8:	20000d88 	.word	0x20000d88

0800bdcc <LoRaMacConfirmQueueInit>:
    }
    return NULL;
}

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, LoRaMacConfirmQueueNvmEvent confirmQueueNvmCtxChanged )
{
 800bdcc:	b570      	push	{r4, r5, r6, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800bdce:	4c0a      	ldr	r4, [pc, #40]	; (800bdf8 <LoRaMacConfirmQueueInit+0x2c>)

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	0023      	movs	r3, r4
    ConfirmQueueCtx.Primitives = primitives;
 800bdd4:	6020      	str	r0, [r4, #0]
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 800bdd6:	0020      	movs	r0, r4
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 800bdd8:	3328      	adds	r3, #40	; 0x28
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 800bdda:	3014      	adds	r0, #20
{
 800bddc:	000d      	movs	r5, r1
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 800bdde:	701a      	strb	r2, [r3, #0]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 800bde0:	21ff      	movs	r1, #255	; 0xff
 800bde2:	3214      	adds	r2, #20
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 800bde4:	6120      	str	r0, [r4, #16]
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800bde6:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800bde8:	60a0      	str	r0, [r4, #8]
    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 800bdea:	f002 fdff 	bl	800e9ec <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bdee:	2301      	movs	r3, #1
 800bdf0:	6922      	ldr	r2, [r4, #16]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 800bdf2:	60e5      	str	r5, [r4, #12]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bdf4:	7553      	strb	r3, [r2, #21]
}
 800bdf6:	bd70      	pop	{r4, r5, r6, pc}
 800bdf8:	20000e84 	.word	0x20000e84

0800bdfc <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 800bdfc:	0001      	movs	r1, r0
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
        return true;
    }
    else
    {
        return false;
 800bdfe:	2000      	movs	r0, #0
{
 800be00:	b510      	push	{r4, lr}
    if( confirmQueueNvmCtx != NULL )
 800be02:	4281      	cmp	r1, r0
 800be04:	d005      	beq.n	800be12 <LoRaMacConfirmQueueRestoreNvmCtx+0x16>
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 800be06:	4803      	ldr	r0, [pc, #12]	; (800be14 <LoRaMacConfirmQueueRestoreNvmCtx+0x18>)
 800be08:	2216      	movs	r2, #22
 800be0a:	3014      	adds	r0, #20
 800be0c:	f002 fdd9 	bl	800e9c2 <memcpy1>
        return true;
 800be10:	2001      	movs	r0, #1
    }
}
 800be12:	bd10      	pop	{r4, pc}
 800be14:	20000e84 	.word	0x20000e84

0800be18 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 800be18:	2316      	movs	r3, #22
 800be1a:	6003      	str	r3, [r0, #0]
    return &ConfirmQueueNvmCtx;
 800be1c:	4801      	ldr	r0, [pc, #4]	; (800be24 <LoRaMacConfirmQueueGetNvmCtx+0xc>)
}
 800be1e:	3014      	adds	r0, #20
 800be20:	4770      	bx	lr
 800be22:	46c0      	nop			; (mov r8, r8)
 800be24:	20000e84 	.word	0x20000e84

0800be28 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800be28:	b510      	push	{r4, lr}
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800be2a:	4c0e      	ldr	r4, [pc, #56]	; (800be64 <LoRaMacConfirmQueueAdd+0x3c>)
{
 800be2c:	0001      	movs	r1, r0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800be2e:	6922      	ldr	r2, [r4, #16]
    {
        // Protect the buffer against overwrites
        return false;
 800be30:	2000      	movs	r0, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800be32:	7d13      	ldrb	r3, [r2, #20]
 800be34:	2b04      	cmp	r3, #4
 800be36:	d813      	bhi.n	800be60 <LoRaMacConfirmQueueAdd+0x38>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800be38:	7808      	ldrb	r0, [r1, #0]
 800be3a:	68a3      	ldr	r3, [r4, #8]
 800be3c:	7018      	strb	r0, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800be3e:	7848      	ldrb	r0, [r1, #1]
 800be40:	7058      	strb	r0, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800be42:	78c9      	ldrb	r1, [r1, #3]
        bufferPointer++;
 800be44:	1d18      	adds	r0, r3, #4
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800be46:	70d9      	strb	r1, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800be48:	2100      	movs	r1, #0
 800be4a:	7099      	strb	r1, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 800be4c:	7d11      	ldrb	r1, [r2, #20]
 800be4e:	3101      	adds	r1, #1
 800be50:	7511      	strb	r1, [r2, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800be52:	0011      	movs	r1, r2
 800be54:	3110      	adds	r1, #16
 800be56:	428b      	cmp	r3, r1
 800be58:	d100      	bne.n	800be5c <LoRaMacConfirmQueueAdd+0x34>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800be5a:	0010      	movs	r0, r2
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800be5c:	60a0      	str	r0, [r4, #8]

    return true;
 800be5e:	2001      	movs	r0, #1
}
 800be60:	bd10      	pop	{r4, pc}
 800be62:	46c0      	nop			; (mov r8, r8)
 800be64:	20000e84 	.word	0x20000e84

0800be68 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800be68:	b510      	push	{r4, lr}
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
 800be6a:	4908      	ldr	r1, [pc, #32]	; (800be8c <LoRaMacConfirmQueueRemoveFirst+0x24>)
 800be6c:	690a      	ldr	r2, [r1, #16]
 800be6e:	7d13      	ldrb	r3, [r2, #20]
    {
        return false;
 800be70:	1e18      	subs	r0, r3, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
 800be72:	d00a      	beq.n	800be8a <LoRaMacConfirmQueueRemoveFirst+0x22>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 800be74:	3b01      	subs	r3, #1
 800be76:	7513      	strb	r3, [r2, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800be78:	0013      	movs	r3, r2
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800be7a:	684c      	ldr	r4, [r1, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800be7c:	3310      	adds	r3, #16
        bufferPointer++;
 800be7e:	1d20      	adds	r0, r4, #4
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800be80:	429c      	cmp	r4, r3
 800be82:	d100      	bne.n	800be86 <LoRaMacConfirmQueueRemoveFirst+0x1e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800be84:	0010      	movs	r0, r2
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800be86:	6048      	str	r0, [r1, #4]

    return true;
 800be88:	2001      	movs	r0, #1
}
 800be8a:	bd10      	pop	{r4, pc}
 800be8c:	20000e84 	.word	0x20000e84

0800be90 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800be90:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800be92:	4c0c      	ldr	r4, [pc, #48]	; (800bec4 <LoRaMacConfirmQueueSetStatus+0x34>)
 800be94:	6922      	ldr	r2, [r4, #16]
 800be96:	7d13      	ldrb	r3, [r2, #20]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d005      	beq.n	800bea8 <LoRaMacConfirmQueueSetStatus+0x18>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800be9c:	0015      	movs	r5, r2
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800be9e:	6863      	ldr	r3, [r4, #4]
 800bea0:	68a4      	ldr	r4, [r4, #8]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bea2:	3510      	adds	r5, #16
    while( element != bufferEnd )
 800bea4:	429c      	cmp	r4, r3
 800bea6:	d100      	bne.n	800beaa <LoRaMacConfirmQueueSetStatus+0x1a>
        {
            element->Status = status;
            element->ReadyToHandle = true;
        }
    }
}
 800bea8:	bd70      	pop	{r4, r5, r6, pc}
        if( element->Request == request )
 800beaa:	781e      	ldrb	r6, [r3, #0]
 800beac:	428e      	cmp	r6, r1
 800beae:	d005      	beq.n	800bebc <LoRaMacConfirmQueueSetStatus+0x2c>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800beb0:	42ab      	cmp	r3, r5
 800beb2:	d101      	bne.n	800beb8 <LoRaMacConfirmQueueSetStatus+0x28>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800beb4:	0013      	movs	r3, r2
 800beb6:	e7f5      	b.n	800bea4 <LoRaMacConfirmQueueSetStatus+0x14>
        bufferPointer++;
 800beb8:	3304      	adds	r3, #4
 800beba:	e7f3      	b.n	800bea4 <LoRaMacConfirmQueueSetStatus+0x14>
            element->ReadyToHandle = true;
 800bebc:	2201      	movs	r2, #1
            element->Status = status;
 800bebe:	7058      	strb	r0, [r3, #1]
            element->ReadyToHandle = true;
 800bec0:	709a      	strb	r2, [r3, #2]
 800bec2:	e7f1      	b.n	800bea8 <LoRaMacConfirmQueueSetStatus+0x18>
 800bec4:	20000e84 	.word	0x20000e84

0800bec8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800bec8:	b530      	push	{r4, r5, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800beca:	4c0d      	ldr	r4, [pc, #52]	; (800bf00 <LoRaMacConfirmQueueGetStatus+0x38>)
{
 800becc:	0001      	movs	r1, r0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800bece:	6922      	ldr	r2, [r4, #16]
        if( element != NULL )
        {
            return element->Status;
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bed0:	2001      	movs	r0, #1
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800bed2:	7d13      	ldrb	r3, [r2, #20]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d006      	beq.n	800bee6 <LoRaMacConfirmQueueGetStatus+0x1e>
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800bed8:	6863      	ldr	r3, [r4, #4]
 800beda:	68a0      	ldr	r0, [r4, #8]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bedc:	0014      	movs	r4, r2
 800bede:	3410      	adds	r4, #16
    while( element != bufferEnd )
 800bee0:	4298      	cmp	r0, r3
 800bee2:	d101      	bne.n	800bee8 <LoRaMacConfirmQueueGetStatus+0x20>
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bee4:	2001      	movs	r0, #1
}
 800bee6:	bd30      	pop	{r4, r5, pc}
        if( element->Request == request )
 800bee8:	781d      	ldrb	r5, [r3, #0]
 800beea:	428d      	cmp	r5, r1
 800beec:	d005      	beq.n	800befa <LoRaMacConfirmQueueGetStatus+0x32>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800beee:	42a3      	cmp	r3, r4
 800bef0:	d101      	bne.n	800bef6 <LoRaMacConfirmQueueGetStatus+0x2e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800bef2:	0013      	movs	r3, r2
 800bef4:	e7f4      	b.n	800bee0 <LoRaMacConfirmQueueGetStatus+0x18>
        bufferPointer++;
 800bef6:	3304      	adds	r3, #4
 800bef8:	e7f2      	b.n	800bee0 <LoRaMacConfirmQueueGetStatus+0x18>
            return element->Status;
 800befa:	7858      	ldrb	r0, [r3, #1]
 800befc:	e7f3      	b.n	800bee6 <LoRaMacConfirmQueueGetStatus+0x1e>
 800befe:	46c0      	nop			; (mov r8, r8)
 800bf00:	20000e84 	.word	0x20000e84

0800bf04 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800bf04:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800bf06:	490c      	ldr	r1, [pc, #48]	; (800bf38 <LoRaMacConfirmQueueSetStatusCmn+0x34>)

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 800bf08:	690a      	ldr	r2, [r1, #16]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800bf0a:	684b      	ldr	r3, [r1, #4]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800bf0c:	7d14      	ldrb	r4, [r2, #20]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 800bf0e:	7550      	strb	r0, [r2, #21]
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800bf10:	2c00      	cmp	r4, #0
 800bf12:	d00d      	beq.n	800bf30 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bf14:	0014      	movs	r4, r2
            element->Status = status;
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
 800bf16:	2501      	movs	r5, #1
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 800bf18:	6889      	ldr	r1, [r1, #8]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bf1a:	3410      	adds	r4, #16
            if( element->RestrictCommonReadyToHandle == false )
 800bf1c:	78de      	ldrb	r6, [r3, #3]
            element->Status = status;
 800bf1e:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800bf20:	2e00      	cmp	r6, #0
 800bf22:	d100      	bne.n	800bf26 <LoRaMacConfirmQueueSetStatusCmn+0x22>
                element->ReadyToHandle = true;
 800bf24:	709d      	strb	r5, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bf26:	42a3      	cmp	r3, r4
 800bf28:	d103      	bne.n	800bf32 <LoRaMacConfirmQueueSetStatusCmn+0x2e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800bf2a:	0013      	movs	r3, r2
        }while( element != ConfirmQueueCtx.BufferEnd );
 800bf2c:	4299      	cmp	r1, r3
 800bf2e:	d1f5      	bne.n	800bf1c <LoRaMacConfirmQueueSetStatusCmn+0x18>
    }
}
 800bf30:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer++;
 800bf32:	3304      	adds	r3, #4
 800bf34:	e7fa      	b.n	800bf2c <LoRaMacConfirmQueueSetStatusCmn+0x28>
 800bf36:	46c0      	nop			; (mov r8, r8)
 800bf38:	20000e84 	.word	0x20000e84

0800bf3c <LoRaMacConfirmQueueIsCmdActive>:
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800bf3c:	4a0a      	ldr	r2, [pc, #40]	; (800bf68 <LoRaMacConfirmQueueIsCmdActive+0x2c>)
{
 800bf3e:	b530      	push	{r4, r5, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800bf40:	6853      	ldr	r3, [r2, #4]
 800bf42:	6891      	ldr	r1, [r2, #8]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bf44:	6912      	ldr	r2, [r2, #16]
 800bf46:	0014      	movs	r4, r2
 800bf48:	3410      	adds	r4, #16
    while( element != bufferEnd )
 800bf4a:	4299      	cmp	r1, r3
 800bf4c:	d101      	bne.n	800bf52 <LoRaMacConfirmQueueIsCmdActive+0x16>
    {
        return true;
    }
    return false;
 800bf4e:	2000      	movs	r0, #0
}
 800bf50:	bd30      	pop	{r4, r5, pc}
        if( element->Request == request )
 800bf52:	781d      	ldrb	r5, [r3, #0]
 800bf54:	4285      	cmp	r5, r0
 800bf56:	d005      	beq.n	800bf64 <LoRaMacConfirmQueueIsCmdActive+0x28>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bf58:	42a3      	cmp	r3, r4
 800bf5a:	d001      	beq.n	800bf60 <LoRaMacConfirmQueueIsCmdActive+0x24>
        bufferPointer++;
 800bf5c:	3304      	adds	r3, #4
 800bf5e:	e7f4      	b.n	800bf4a <LoRaMacConfirmQueueIsCmdActive+0xe>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800bf60:	0013      	movs	r3, r2
 800bf62:	e7f2      	b.n	800bf4a <LoRaMacConfirmQueueIsCmdActive+0xe>
        return true;
 800bf64:	2001      	movs	r0, #1
 800bf66:	e7f3      	b.n	800bf50 <LoRaMacConfirmQueueIsCmdActive+0x14>
 800bf68:	20000e84 	.word	0x20000e84

0800bf6c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800bf6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf6e:	0005      	movs	r5, r0
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800bf70:	2400      	movs	r4, #0
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800bf72:	4e13      	ldr	r6, [pc, #76]	; (800bfc0 <LoRaMacConfirmQueueHandleCb+0x54>)
{
 800bf74:	b085      	sub	sp, #20
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800bf76:	6933      	ldr	r3, [r6, #16]
 800bf78:	7d1b      	ldrb	r3, [r3, #20]
 800bf7a:	9301      	str	r3, [sp, #4]
    for( uint8_t i = 0; i < nbElements; i++ )
 800bf7c:	9b01      	ldr	r3, [sp, #4]
 800bf7e:	429c      	cmp	r4, r3
 800bf80:	d101      	bne.n	800bf86 <LoRaMacConfirmQueueHandleCb+0x1a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 800bf82:	b005      	add	sp, #20
 800bf84:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800bf86:	6873      	ldr	r3, [r6, #4]
 800bf88:	7818      	ldrb	r0, [r3, #0]
 800bf8a:	7028      	strb	r0, [r5, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800bf8c:	7859      	ldrb	r1, [r3, #1]
 800bf8e:	7069      	strb	r1, [r5, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800bf90:	789f      	ldrb	r7, [r3, #2]
        if( readyToHandle == true )
 800bf92:	2f00      	cmp	r7, #0
 800bf94:	d00d      	beq.n	800bfb2 <LoRaMacConfirmQueueHandleCb+0x46>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800bf96:	6833      	ldr	r3, [r6, #0]
 800bf98:	0028      	movs	r0, r5
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 800bf9e:	f7ff ff63 	bl	800be68 <LoRaMacConfirmQueueRemoveFirst>
        if( readyToHandle == false )
 800bfa2:	2f00      	cmp	r7, #0
 800bfa4:	d102      	bne.n	800bfac <LoRaMacConfirmQueueHandleCb+0x40>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800bfa6:	a803      	add	r0, sp, #12
 800bfa8:	f7ff ff3e 	bl	800be28 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 800bfac:	3401      	adds	r4, #1
 800bfae:	b2e4      	uxtb	r4, r4
 800bfb0:	e7e4      	b.n	800bf7c <LoRaMacConfirmQueueHandleCb+0x10>
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800bfb2:	aa03      	add	r2, sp, #12
 800bfb4:	7010      	strb	r0, [r2, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800bfb6:	7051      	strb	r1, [r2, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800bfb8:	78db      	ldrb	r3, [r3, #3]
 800bfba:	70d3      	strb	r3, [r2, #3]
 800bfbc:	e7ef      	b.n	800bf9e <LoRaMacConfirmQueueHandleCb+0x32>
 800bfbe:	46c0      	nop			; (mov r8, r8)
 800bfc0:	20000e84 	.word	0x20000e84

0800bfc4 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800bfc4:	4b01      	ldr	r3, [pc, #4]	; (800bfcc <LoRaMacConfirmQueueGetCnt+0x8>)
 800bfc6:	691b      	ldr	r3, [r3, #16]
 800bfc8:	7d18      	ldrb	r0, [r3, #20]
}
 800bfca:	4770      	bx	lr
 800bfcc:	20000e84 	.word	0x20000e84

0800bfd0 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800bfd0:	2004      	movs	r0, #4
 800bfd2:	4b03      	ldr	r3, [pc, #12]	; (800bfe0 <LoRaMacConfirmQueueIsFull+0x10>)
 800bfd4:	691b      	ldr	r3, [r3, #16]
 800bfd6:	7d1b      	ldrb	r3, [r3, #20]
 800bfd8:	4298      	cmp	r0, r3
 800bfda:	4180      	sbcs	r0, r0
 800bfdc:	4240      	negs	r0, r0
    }
    else
    {
        return false;
    }
}
 800bfde:	4770      	bx	lr
 800bfe0:	20000e84 	.word	0x20000e84

0800bfe4 <GetLastFcntDown>:
{
    if( lastDown == NULL )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800bfe4:	3801      	subs	r0, #1
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
            break;
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800bfe6:	2305      	movs	r3, #5
{
 800bfe8:	b500      	push	{lr}
 800bfea:	2806      	cmp	r0, #6
 800bfec:	d80d      	bhi.n	800c00a <GetLastFcntDown+0x26>
 800bfee:	4b11      	ldr	r3, [pc, #68]	; (800c034 <GetLastFcntDown+0x50>)
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	f7f4 f889 	bl	8000108 <__gnu_thumb1_case_uqi>
 800bff6:	0c04      	.short	0x0c04
 800bff8:	1b191611 	.word	0x1b191611
 800bffc:	1d          	.byte	0x1d
 800bffd:	00          	.byte	0x00
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 800bffe:	691a      	ldr	r2, [r3, #16]
 800c000:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 800c002:	001a      	movs	r2, r3
 800c004:	3210      	adds	r2, #16
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800c006:	631a      	str	r2, [r3, #48]	; 0x30
    return LORAMAC_CRYPTO_SUCCESS;
 800c008:	2300      	movs	r3, #0
}
 800c00a:	0018      	movs	r0, r3
 800c00c:	bd00      	pop	{pc}
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 800c00e:	695a      	ldr	r2, [r3, #20]
 800c010:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 800c012:	001a      	movs	r2, r3
 800c014:	3214      	adds	r2, #20
 800c016:	e7f6      	b.n	800c006 <GetLastFcntDown+0x22>
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 800c018:	699a      	ldr	r2, [r3, #24]
 800c01a:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800c01c:	001a      	movs	r2, r3
 800c01e:	3218      	adds	r2, #24
 800c020:	e7f1      	b.n	800c006 <GetLastFcntDown+0x22>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 800c022:	69db      	ldr	r3, [r3, #28]
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 800c024:	600b      	str	r3, [r1, #0]
 800c026:	e7ef      	b.n	800c008 <GetLastFcntDown+0x24>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown1;
 800c028:	6a1b      	ldr	r3, [r3, #32]
 800c02a:	e7fb      	b.n	800c024 <GetLastFcntDown+0x40>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 800c02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c02e:	e7f9      	b.n	800c024 <GetLastFcntDown+0x40>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 800c030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c032:	e7f7      	b.n	800c024 <GetLastFcntDown+0x40>
 800c034:	20000eb0 	.word	0x20000eb0

0800c038 <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
    return;
}
 800c038:	4770      	bx	lr

0800c03a <PayloadEncrypt>:
{
 800c03a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c03c:	b08d      	sub	sp, #52	; 0x34
 800c03e:	001d      	movs	r5, r3
 800c040:	ab12      	add	r3, sp, #72	; 0x48
 800c042:	781b      	ldrb	r3, [r3, #0]
 800c044:	9001      	str	r0, [sp, #4]
 800c046:	9302      	str	r3, [sp, #8]
    if( buffer == 0 )
 800c048:	9b01      	ldr	r3, [sp, #4]
{
 800c04a:	000f      	movs	r7, r1
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c04c:	200a      	movs	r0, #10
{
 800c04e:	9203      	str	r2, [sp, #12]
    if( buffer == 0 )
 800c050:	2b00      	cmp	r3, #0
 800c052:	d026      	beq.n	800c0a2 <PayloadEncrypt+0x68>
    uint8_t sBlock[16] = { 0 };
 800c054:	2600      	movs	r6, #0
 800c056:	220c      	movs	r2, #12
 800c058:	0031      	movs	r1, r6
 800c05a:	a805      	add	r0, sp, #20
 800c05c:	9604      	str	r6, [sp, #16]
 800c05e:	f003 fdb6 	bl	800fbce <memset>
    uint8_t aBlock[16] = { 0 };
 800c062:	220c      	movs	r2, #12
 800c064:	0031      	movs	r1, r6
 800c066:	a809      	add	r0, sp, #36	; 0x24
 800c068:	9608      	str	r6, [sp, #32]
 800c06a:	f003 fdb0 	bl	800fbce <memset>
    aBlock[0] = 0x01;
 800c06e:	2201      	movs	r2, #1
    aBlock[5] = dir;
 800c070:	9b02      	ldr	r3, [sp, #8]
    uint8_t aBlock[16] = { 0 };
 800c072:	ac08      	add	r4, sp, #32
    aBlock[5] = dir;
 800c074:	7163      	strb	r3, [r4, #5]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800c076:	0c2b      	lsrs	r3, r5, #16
 800c078:	7223      	strb	r3, [r4, #8]
    aBlock[10] = frameCounter & 0xFF;
 800c07a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[6] = address & 0xFF;
 800c07c:	80e5      	strh	r5, [r4, #6]
    aBlock[10] = frameCounter & 0xFF;
 800c07e:	8163      	strh	r3, [r4, #10]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800c080:	0c1b      	lsrs	r3, r3, #16
 800c082:	7323      	strb	r3, [r4, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800c084:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800c086:	0e2d      	lsrs	r5, r5, #24
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800c088:	0e1b      	lsrs	r3, r3, #24
    aBlock[0] = 0x01;
 800c08a:	7022      	strb	r2, [r4, #0]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800c08c:	7265      	strb	r5, [r4, #9]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800c08e:	7363      	strb	r3, [r4, #13]
    uint16_t ctr = 1;
 800c090:	0014      	movs	r4, r2
 800c092:	b2e2      	uxtb	r2, r4
 800c094:	0113      	lsls	r3, r2, #4
 800c096:	3b10      	subs	r3, #16
 800c098:	b2db      	uxtb	r3, r3
 800c09a:	9302      	str	r3, [sp, #8]
    while( size > 0 )
 800c09c:	2f00      	cmp	r7, #0
 800c09e:	dc02      	bgt.n	800c0a6 <PayloadEncrypt+0x6c>
    return LORAMAC_CRYPTO_SUCCESS;
 800c0a0:	2000      	movs	r0, #0
}
 800c0a2:	b00d      	add	sp, #52	; 0x34
 800c0a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        aBlock[15] = ctr & 0xFF;
 800c0a6:	a808      	add	r0, sp, #32
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800c0a8:	ad04      	add	r5, sp, #16
        aBlock[15] = ctr & 0xFF;
 800c0aa:	73c2      	strb	r2, [r0, #15]
        ctr++;
 800c0ac:	3401      	adds	r4, #1
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800c0ae:	002b      	movs	r3, r5
 800c0b0:	2110      	movs	r1, #16
 800c0b2:	9a03      	ldr	r2, [sp, #12]
        ctr++;
 800c0b4:	b2a4      	uxth	r4, r4
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800c0b6:	f7fb fd27 	bl	8007b08 <SecureElementAesEncrypt>
 800c0ba:	2800      	cmp	r0, #0
 800c0bc:	d115      	bne.n	800c0ea <PayloadEncrypt+0xb0>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800c0be:	1c39      	adds	r1, r7, #0
 800c0c0:	1c0b      	adds	r3, r1, #0
 800c0c2:	2f10      	cmp	r7, #16
 800c0c4:	dd00      	ble.n	800c0c8 <PayloadEncrypt+0x8e>
 800c0c6:	2310      	movs	r3, #16
 800c0c8:	b21b      	sxth	r3, r3
 800c0ca:	4298      	cmp	r0, r3
 800c0cc:	db02      	blt.n	800c0d4 <PayloadEncrypt+0x9a>
        size -= 16;
 800c0ce:	3f10      	subs	r7, #16
 800c0d0:	b23f      	sxth	r7, r7
        bufferIndex += 16;
 800c0d2:	e7de      	b.n	800c092 <PayloadEncrypt+0x58>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800c0d4:	9b02      	ldr	r3, [sp, #8]
 800c0d6:	5c2e      	ldrb	r6, [r5, r0]
 800c0d8:	181a      	adds	r2, r3, r0
 800c0da:	9b01      	ldr	r3, [sp, #4]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800c0dc:	3001      	adds	r0, #1
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800c0de:	5c9b      	ldrb	r3, [r3, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800c0e0:	b2c0      	uxtb	r0, r0
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800c0e2:	4073      	eors	r3, r6
 800c0e4:	9e01      	ldr	r6, [sp, #4]
 800c0e6:	54b3      	strb	r3, [r6, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800c0e8:	e7ea      	b.n	800c0c0 <PayloadEncrypt+0x86>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c0ea:	200f      	movs	r0, #15
 800c0ec:	e7d9      	b.n	800c0a2 <PayloadEncrypt+0x68>
	...

0800c0f0 <DeriveSessionKey10x>:
{
 800c0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0f2:	0004      	movs	r4, r0
 800c0f4:	000f      	movs	r7, r1
    uint8_t compBase[16] = { 0 };
 800c0f6:	2100      	movs	r1, #0
{
 800c0f8:	b085      	sub	sp, #20
 800c0fa:	0016      	movs	r6, r2
    uint8_t compBase[16] = { 0 };
 800c0fc:	a801      	add	r0, sp, #4
 800c0fe:	220c      	movs	r2, #12
{
 800c100:	001d      	movs	r5, r3
    uint8_t compBase[16] = { 0 };
 800c102:	9100      	str	r1, [sp, #0]
 800c104:	f003 fd63 	bl	800fbce <memset>
            compBase[0] = 0x01;
 800c108:	0023      	movs	r3, r4
 800c10a:	3b08      	subs	r3, #8
 800c10c:	425a      	negs	r2, r3
 800c10e:	4153      	adcs	r3, r2
 800c110:	466a      	mov	r2, sp
 800c112:	3301      	adds	r3, #1
 800c114:	7013      	strb	r3, [r2, #0]
    memcpy1( compBase + 1, joinNonce, 3 );
 800c116:	466b      	mov	r3, sp
 800c118:	2203      	movs	r2, #3
 800c11a:	1c58      	adds	r0, r3, #1
 800c11c:	0039      	movs	r1, r7
 800c11e:	f002 fc50 	bl	800e9c2 <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 800c122:	2203      	movs	r2, #3
 800c124:	0031      	movs	r1, r6
 800c126:	a801      	add	r0, sp, #4
 800c128:	f002 fc4b 	bl	800e9c2 <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 800c12c:	466b      	mov	r3, sp
 800c12e:	2202      	movs	r2, #2
 800c130:	1dd8      	adds	r0, r3, #7
 800c132:	0029      	movs	r1, r5
 800c134:	f002 fc45 	bl	800e9c2 <memcpy1>
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800c138:	4b06      	ldr	r3, [pc, #24]	; (800c154 <DeriveSessionKey10x+0x64>)
 800c13a:	2202      	movs	r2, #2
 800c13c:	6858      	ldr	r0, [r3, #4]
 800c13e:	4669      	mov	r1, sp
 800c140:	0023      	movs	r3, r4
 800c142:	6800      	ldr	r0, [r0, #0]
 800c144:	f7fb fd69 	bl	8007c1a <SecureElementDeriveAndStoreKey>
 800c148:	2800      	cmp	r0, #0
 800c14a:	d000      	beq.n	800c14e <DeriveSessionKey10x+0x5e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c14c:	200f      	movs	r0, #15
}
 800c14e:	b005      	add	sp, #20
 800c150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c152:	46c0      	nop			; (mov r8, r8)
 800c154:	20000eb0 	.word	0x20000eb0

0800c158 <LoRaMacCryptoDeriveMcKEKey.part.0>:
    }

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
 800c158:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800c15a:	2100      	movs	r1, #0
 800c15c:	220c      	movs	r2, #12
 800c15e:	a801      	add	r0, sp, #4
 800c160:	9100      	str	r1, [sp, #0]
 800c162:	f003 fd34 	bl	800fbce <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800c166:	4b06      	ldr	r3, [pc, #24]	; (800c180 <LoRaMacCryptoDeriveMcKEKey.part.0+0x28>)
 800c168:	2209      	movs	r2, #9
 800c16a:	6858      	ldr	r0, [r3, #4]
 800c16c:	4669      	mov	r1, sp
 800c16e:	237f      	movs	r3, #127	; 0x7f
 800c170:	6800      	ldr	r0, [r0, #0]
 800c172:	f7fb fd52 	bl	8007c1a <SecureElementDeriveAndStoreKey>
 800c176:	2800      	cmp	r0, #0
 800c178:	d000      	beq.n	800c17c <LoRaMacCryptoDeriveMcKEKey.part.0+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c17a:	200f      	movs	r0, #15
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800c17c:	b005      	add	sp, #20
 800c17e:	bd00      	pop	{pc}
 800c180:	20000eb0 	.word	0x20000eb0

0800c184 <VerifyCmacB0.constprop.0>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800c184:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c186:	b0c7      	sub	sp, #284	; 0x11c
 800c188:	0007      	movs	r7, r0
 800c18a:	000c      	movs	r4, r1
 800c18c:	001d      	movs	r5, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c18e:	200a      	movs	r0, #10
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800c190:	9e4c      	ldr	r6, [sp, #304]	; 0x130
 800c192:	9201      	str	r2, [sp, #4]
    if( msg == 0 )
 800c194:	2f00      	cmp	r7, #0
 800c196:	d03d      	beq.n	800c214 <VerifyCmacB0.constprop.0+0x90>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800c198:	2380      	movs	r3, #128	; 0x80
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800c19a:	3004      	adds	r0, #4
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800c19c:	005b      	lsls	r3, r3, #1
 800c19e:	4299      	cmp	r1, r3
 800c1a0:	d838      	bhi.n	800c214 <VerifyCmacB0.constprop.0+0x90>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800c1a2:	2288      	movs	r2, #136	; 0x88
 800c1a4:	2100      	movs	r1, #0
 800c1a6:	0052      	lsls	r2, r2, #1
 800c1a8:	a802      	add	r0, sp, #8
 800c1aa:	f002 fc1f 	bl	800e9ec <memset1>
    b0[0] = 0x49;
 800c1ae:	2349      	movs	r3, #73	; 0x49
 800c1b0:	aa02      	add	r2, sp, #8
 800c1b2:	7013      	strb	r3, [r2, #0]
    if( ( isAck == true ) && ( dir == DOWNLINK ) )
 800c1b4:	2d00      	cmp	r5, #0
 800c1b6:	d02f      	beq.n	800c218 <VerifyCmacB0.constprop.0+0x94>
        confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntList.FCntUp % 65536 );
 800c1b8:	4b19      	ldr	r3, [pc, #100]	; (800c220 <VerifyCmacB0.constprop.0+0x9c>)
 800c1ba:	685b      	ldr	r3, [r3, #4]
 800c1bc:	68db      	ldr	r3, [r3, #12]
        b0[1] = confFCnt & 0xFF;
 800c1be:	7053      	strb	r3, [r2, #1]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 800c1c0:	b29b      	uxth	r3, r3
 800c1c2:	0a1b      	lsrs	r3, r3, #8
 800c1c4:	7093      	strb	r3, [r2, #2]
    b0[3] = 0x00;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	aa02      	add	r2, sp, #8
 800c1ca:	70d3      	strb	r3, [r2, #3]
    b0[4] = 0x00;
 800c1cc:	2280      	movs	r2, #128	; 0x80
 800c1ce:	a902      	add	r1, sp, #8
 800c1d0:	0052      	lsls	r2, r2, #1
 800c1d2:	808a      	strh	r2, [r1, #4]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800c1d4:	0c32      	lsrs	r2, r6, #16
 800c1d6:	720a      	strb	r2, [r1, #8]
    b0[10] = fCnt & 0xFF;
 800c1d8:	9a4d      	ldr	r2, [sp, #308]	; 0x134
    b0[6] = devAddr & 0xFF;
 800c1da:	80ce      	strh	r6, [r1, #6]
    b0[10] = fCnt & 0xFF;
 800c1dc:	814a      	strh	r2, [r1, #10]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800c1de:	0c12      	lsrs	r2, r2, #16
 800c1e0:	730a      	strb	r2, [r1, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800c1e2:	9a4d      	ldr	r2, [sp, #308]	; 0x134
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800c1e4:	0e36      	lsrs	r6, r6, #24
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800c1e6:	0e15      	lsrs	r5, r2, #24
    b0[14] = 0x00;
 800c1e8:	738b      	strb	r3, [r1, #14]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800c1ea:	0022      	movs	r2, r4
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800c1ec:	724e      	strb	r6, [r1, #9]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800c1ee:	734d      	strb	r5, [r1, #13]
    b0[15] = msgLen & 0xFF;
 800c1f0:	73cc      	strb	r4, [r1, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800c1f2:	a806      	add	r0, sp, #24
 800c1f4:	0039      	movs	r1, r7
 800c1f6:	f002 fbe4 	bl	800e9c2 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800c1fa:	0021      	movs	r1, r4
 800c1fc:	3110      	adds	r1, #16
 800c1fe:	9b01      	ldr	r3, [sp, #4]
 800c200:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 800c202:	b289      	uxth	r1, r1
 800c204:	a802      	add	r0, sp, #8
 800c206:	f7fb fc66 	bl	8007ad6 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800c20a:	2800      	cmp	r0, #0
 800c20c:	d002      	beq.n	800c214 <VerifyCmacB0.constprop.0+0x90>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800c20e:	2801      	cmp	r0, #1
 800c210:	d000      	beq.n	800c214 <VerifyCmacB0.constprop.0+0x90>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c212:	200f      	movs	r0, #15
}
 800c214:	b047      	add	sp, #284	; 0x11c
 800c216:	bdf0      	pop	{r4, r5, r6, r7, pc}
        b0[1] = 0x00;
 800c218:	ab02      	add	r3, sp, #8
 800c21a:	705d      	strb	r5, [r3, #1]
        b0[2] = 0x00;
 800c21c:	709d      	strb	r5, [r3, #2]
 800c21e:	e7d2      	b.n	800c1c6 <VerifyCmacB0.constprop.0+0x42>
 800c220:	20000eb0 	.word	0x20000eb0

0800c224 <LoRaMacCryptoInit>:
{
 800c224:	b570      	push	{r4, r5, r6, lr}
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 800c226:	4c11      	ldr	r4, [pc, #68]	; (800c26c <LoRaMacCryptoInit+0x48>)
 800c228:	0023      	movs	r3, r4
 800c22a:	330c      	adds	r3, #12
 800c22c:	6063      	str	r3, [r4, #4]
    if( cryptoNvmCtxChanged != 0 )
 800c22e:	2800      	cmp	r0, #0
 800c230:	d100      	bne.n	800c234 <LoRaMacCryptoInit+0x10>
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 800c232:	480f      	ldr	r0, [pc, #60]	; (800c270 <LoRaMacCryptoInit+0x4c>)
 800c234:	60a0      	str	r0, [r4, #8]
    memset1( (uint8_t*) CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 800c236:	0020      	movs	r0, r4
 800c238:	2234      	movs	r2, #52	; 0x34
 800c23a:	300c      	adds	r0, #12
 800c23c:	2100      	movs	r1, #0
 800c23e:	f002 fbd5 	bl	800e9ec <memset1>
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 800c242:	6863      	ldr	r3, [r4, #4]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Rfu = 0;
 800c244:	4a0b      	ldr	r2, [pc, #44]	; (800c274 <LoRaMacCryptoInit+0x50>)
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800c246:	0019      	movs	r1, r3
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Rfu = 0;
 800c248:	601a      	str	r2, [r3, #0]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800c24a:	2201      	movs	r2, #1
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 800c24c:	2500      	movs	r5, #0
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800c24e:	4252      	negs	r2, r2
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800c250:	3118      	adds	r1, #24
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 800c252:	60dd      	str	r5, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800c254:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800c256:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800c258:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800c25a:	6319      	str	r1, [r3, #48]	; 0x30
    CryptoCtx.NvmCtx->FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 800c25c:	61da      	str	r2, [r3, #28]
    CryptoCtx.NvmCtx->FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
 800c25e:	621a      	str	r2, [r3, #32]
    CryptoCtx.NvmCtx->FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
 800c260:	625a      	str	r2, [r3, #36]	; 0x24
    CryptoCtx.NvmCtx->FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
 800c262:	629a      	str	r2, [r3, #40]	; 0x28
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800c264:	68a3      	ldr	r3, [r4, #8]
 800c266:	4798      	blx	r3
}
 800c268:	0028      	movs	r0, r5
 800c26a:	bd70      	pop	{r4, r5, r6, pc}
 800c26c:	20000eb0 	.word	0x20000eb0
 800c270:	0800c039 	.word	0x0800c039
 800c274:	01010100 	.word	0x01010100

0800c278 <LoRaMacCryptoSetLrWanVersion>:
    CryptoCtx.NvmCtx->LrWanVersion = version;
 800c278:	4b02      	ldr	r3, [pc, #8]	; (800c284 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	6018      	str	r0, [r3, #0]
}
 800c27e:	2000      	movs	r0, #0
 800c280:	4770      	bx	lr
 800c282:	46c0      	nop			; (mov r8, r8)
 800c284:	20000eb0 	.word	0x20000eb0

0800c288 <LoRaMacCryptoRestoreNvmCtx>:
{
 800c288:	0001      	movs	r1, r0
 800c28a:	b510      	push	{r4, lr}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c28c:	200a      	movs	r0, #10
    if( cryptoNvmCtx != 0 )
 800c28e:	2900      	cmp	r1, #0
 800c290:	d005      	beq.n	800c29e <LoRaMacCryptoRestoreNvmCtx+0x16>
        memcpy1( ( uint8_t* ) &NvmCryptoCtx, ( uint8_t* ) cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 800c292:	4803      	ldr	r0, [pc, #12]	; (800c2a0 <LoRaMacCryptoRestoreNvmCtx+0x18>)
 800c294:	2234      	movs	r2, #52	; 0x34
 800c296:	300c      	adds	r0, #12
 800c298:	f002 fb93 	bl	800e9c2 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 800c29c:	2000      	movs	r0, #0
}
 800c29e:	bd10      	pop	{r4, pc}
 800c2a0:	20000eb0 	.word	0x20000eb0

0800c2a4 <LoRaMacCryptoGetNvmCtx>:
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 800c2a4:	2334      	movs	r3, #52	; 0x34
 800c2a6:	6003      	str	r3, [r0, #0]
    return &NvmCryptoCtx;
 800c2a8:	4801      	ldr	r0, [pc, #4]	; (800c2b0 <LoRaMacCryptoGetNvmCtx+0xc>)
}
 800c2aa:	300c      	adds	r0, #12
 800c2ac:	4770      	bx	lr
 800c2ae:	46c0      	nop			; (mov r8, r8)
 800c2b0:	20000eb0 	.word	0x20000eb0

0800c2b4 <LoRaMacCryptoGetFCntUp>:
{
 800c2b4:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c2b6:	200a      	movs	r0, #10
    if( currentUp == NULL )
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d005      	beq.n	800c2c8 <LoRaMacCryptoGetFCntUp+0x14>
    return LORAMAC_CRYPTO_SUCCESS;
 800c2bc:	2000      	movs	r0, #0
    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 800c2be:	4a03      	ldr	r2, [pc, #12]	; (800c2cc <LoRaMacCryptoGetFCntUp+0x18>)
 800c2c0:	6852      	ldr	r2, [r2, #4]
 800c2c2:	68d2      	ldr	r2, [r2, #12]
 800c2c4:	3201      	adds	r2, #1
 800c2c6:	601a      	str	r2, [r3, #0]
}
 800c2c8:	4770      	bx	lr
 800c2ca:	46c0      	nop			; (mov r8, r8)
 800c2cc:	20000eb0 	.word	0x20000eb0

0800c2d0 <LoRaMacCryptoGetFCntDown>:
{
 800c2d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2d2:	001c      	movs	r4, r3
    uint32_t lastDown = 0;
 800c2d4:	2300      	movs	r3, #0
{
 800c2d6:	0007      	movs	r7, r0
 800c2d8:	000d      	movs	r5, r1
 800c2da:	0016      	movs	r6, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c2dc:	200a      	movs	r0, #10
    uint32_t lastDown = 0;
 800c2de:	9301      	str	r3, [sp, #4]
    if( currentDown == NULL )
 800c2e0:	429c      	cmp	r4, r3
 800c2e2:	d026      	beq.n	800c332 <LoRaMacCryptoGetFCntDown+0x62>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800c2e4:	0038      	movs	r0, r7
 800c2e6:	a901      	add	r1, sp, #4
 800c2e8:	f7ff fe7c 	bl	800bfe4 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800c2ec:	2800      	cmp	r0, #0
 800c2ee:	d120      	bne.n	800c332 <LoRaMacCryptoGetFCntDown+0x62>
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800c2f0:	9f01      	ldr	r7, [sp, #4]
 800c2f2:	1c7b      	adds	r3, r7, #1
 800c2f4:	d101      	bne.n	800c2fa <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800c2f6:	6026      	str	r6, [r4, #0]
 800c2f8:	e005      	b.n	800c306 <LoRaMacCryptoGetFCntDown+0x36>
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800c2fa:	b2bb      	uxth	r3, r7
 800c2fc:	1af3      	subs	r3, r6, r3
        if( fCntDiff > 0 )
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	dd13      	ble.n	800c32a <LoRaMacCryptoGetFCntDown+0x5a>
            *currentDown = lastDown + fCntDiff;
 800c302:	18fb      	adds	r3, r7, r3
 800c304:	6023      	str	r3, [r4, #0]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 800c306:	4b10      	ldr	r3, [pc, #64]	; (800c348 <LoRaMacCryptoGetFCntDown+0x78>)
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	789e      	ldrb	r6, [r3, #2]
 800c30c:	2e00      	cmp	r6, #0
 800c30e:	d110      	bne.n	800c332 <LoRaMacCryptoGetFCntDown+0x62>
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800c310:	0033      	movs	r3, r6
 800c312:	0038      	movs	r0, r7
 800c314:	0031      	movs	r1, r6
 800c316:	6822      	ldr	r2, [r4, #0]
 800c318:	1a12      	subs	r2, r2, r0
 800c31a:	418b      	sbcs	r3, r1
 800c31c:	429e      	cmp	r6, r3
 800c31e:	dc10      	bgt.n	800c342 <LoRaMacCryptoGetFCntDown+0x72>
 800c320:	d101      	bne.n	800c326 <LoRaMacCryptoGetFCntDown+0x56>
 800c322:	4295      	cmp	r5, r2
 800c324:	d80d      	bhi.n	800c342 <LoRaMacCryptoGetFCntDown+0x72>
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 800c326:	2008      	movs	r0, #8
 800c328:	e003      	b.n	800c332 <LoRaMacCryptoGetFCntDown+0x62>
        else if( fCntDiff == 0 )
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d102      	bne.n	800c334 <LoRaMacCryptoGetFCntDown+0x64>
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800c32e:	2007      	movs	r0, #7
            *currentDown = lastDown;
 800c330:	6027      	str	r7, [r4, #0]
}
 800c332:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800c334:	2380      	movs	r3, #128	; 0x80
 800c336:	0c3a      	lsrs	r2, r7, #16
 800c338:	0412      	lsls	r2, r2, #16
 800c33a:	025b      	lsls	r3, r3, #9
 800c33c:	18d2      	adds	r2, r2, r3
 800c33e:	1996      	adds	r6, r2, r6
 800c340:	e7d9      	b.n	800c2f6 <LoRaMacCryptoGetFCntDown+0x26>
    return LORAMAC_CRYPTO_SUCCESS;
 800c342:	2000      	movs	r0, #0
 800c344:	e7f5      	b.n	800c332 <LoRaMacCryptoGetFCntDown+0x62>
 800c346:	46c0      	nop			; (mov r8, r8)
 800c348:	20000eb0 	.word	0x20000eb0

0800c34c <LoRaMacCryptoSetMulticastReference>:
{
 800c34c:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c34e:	200a      	movs	r0, #10
    if( multicastList == NULL )
 800c350:	2b00      	cmp	r3, #0
 800c352:	d00c      	beq.n	800c36e <LoRaMacCryptoSetMulticastReference+0x22>
    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 800c354:	4a06      	ldr	r2, [pc, #24]	; (800c370 <LoRaMacCryptoSetMulticastReference+0x24>)
    return LORAMAC_CRYPTO_SUCCESS;
 800c356:	2000      	movs	r0, #0
    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 800c358:	6852      	ldr	r2, [r2, #4]
 800c35a:	0011      	movs	r1, r2
 800c35c:	311c      	adds	r1, #28
 800c35e:	61d9      	str	r1, [r3, #28]
    multicastList[1].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown1;
 800c360:	3104      	adds	r1, #4
 800c362:	6459      	str	r1, [r3, #68]	; 0x44
    multicastList[2].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 800c364:	3104      	adds	r1, #4
 800c366:	66d9      	str	r1, [r3, #108]	; 0x6c
    multicastList[3].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 800c368:	3228      	adds	r2, #40	; 0x28
 800c36a:	3394      	adds	r3, #148	; 0x94
 800c36c:	601a      	str	r2, [r3, #0]
}
 800c36e:	4770      	bx	lr
 800c370:	20000eb0 	.word	0x20000eb0

0800c374 <LoRaMacCryptoPrepareJoinRequest>:
{
 800c374:	b530      	push	{r4, r5, lr}
 800c376:	0004      	movs	r4, r0
 800c378:	b085      	sub	sp, #20
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c37a:	200a      	movs	r0, #10
    if( macMsg == 0 )
 800c37c:	2c00      	cmp	r4, #0
 800c37e:	d024      	beq.n	800c3ca <LoRaMacCryptoPrepareJoinRequest+0x56>
    uint32_t devNonce = 0;
 800c380:	2300      	movs	r3, #0
    SecureElementRandomNumber( &devNonce );
 800c382:	a803      	add	r0, sp, #12
    uint32_t devNonce = 0;
 800c384:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800c386:	f7fb fc71 	bl	8007c6c <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 800c38a:	4d11      	ldr	r5, [pc, #68]	; (800c3d0 <LoRaMacCryptoPrepareJoinRequest+0x5c>)
 800c38c:	9b03      	ldr	r3, [sp, #12]
 800c38e:	686a      	ldr	r2, [r5, #4]
 800c390:	8093      	strh	r3, [r2, #4]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800c392:	68ab      	ldr	r3, [r5, #8]
 800c394:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 800c396:	686b      	ldr	r3, [r5, #4]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c398:	0020      	movs	r0, r4
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 800c39a:	889b      	ldrh	r3, [r3, #4]
 800c39c:	82e3      	strh	r3, [r4, #22]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c39e:	f000 fa8c 	bl	800c8ba <LoRaMacSerializerJoinRequest>
 800c3a2:	2800      	cmp	r0, #0
 800c3a4:	d110      	bne.n	800c3c8 <LoRaMacCryptoPrepareJoinRequest+0x54>
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800c3a6:	0023      	movs	r3, r4
 800c3a8:	3318      	adds	r3, #24
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	2213      	movs	r2, #19
 800c3ae:	2302      	movs	r3, #2
 800c3b0:	6821      	ldr	r1, [r4, #0]
 800c3b2:	f7fb fb85 	bl	8007ac0 <SecureElementComputeAesCmac>
 800c3b6:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c3b8:	200f      	movs	r0, #15
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d105      	bne.n	800c3ca <LoRaMacCryptoPrepareJoinRequest+0x56>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c3be:	0020      	movs	r0, r4
 800c3c0:	f000 fa7b 	bl	800c8ba <LoRaMacSerializerJoinRequest>
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	d000      	beq.n	800c3ca <LoRaMacCryptoPrepareJoinRequest+0x56>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c3c8:	2011      	movs	r0, #17
}
 800c3ca:	b005      	add	sp, #20
 800c3cc:	bd30      	pop	{r4, r5, pc}
 800c3ce:	46c0      	nop			; (mov r8, r8)
 800c3d0:	20000eb0 	.word	0x20000eb0

0800c3d4 <LoRaMacCryptoSecureMessage>:
{
 800c3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3d6:	0005      	movs	r5, r0
 800c3d8:	001c      	movs	r4, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c3da:	200a      	movs	r0, #10
{
 800c3dc:	b087      	sub	sp, #28
    if( macMsg == NULL )
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d023      	beq.n	800c42a <LoRaMacCryptoSecureMessage+0x56>
    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 800c3e2:	4e2a      	ldr	r6, [pc, #168]	; (800c48c <LoRaMacCryptoSecureMessage+0xb8>)
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800c3e4:	3804      	subs	r0, #4
    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 800c3e6:	6873      	ldr	r3, [r6, #4]
 800c3e8:	68db      	ldr	r3, [r3, #12]
 800c3ea:	42ab      	cmp	r3, r5
 800c3ec:	d81d      	bhi.n	800c42a <LoRaMacCryptoSecureMessage+0x56>
    if( macMsg->FPort == 0 )
 800c3ee:	1c62      	adds	r2, r4, #1
 800c3f0:	7fd2      	ldrb	r2, [r2, #31]
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 800c3f2:	1e51      	subs	r1, r2, #1
 800c3f4:	418a      	sbcs	r2, r1
 800c3f6:	3207      	adds	r2, #7
    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 800c3f8:	42ab      	cmp	r3, r5
 800c3fa:	d30a      	bcc.n	800c412 <LoRaMacCryptoSecureMessage+0x3e>
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 800c3fc:	6873      	ldr	r3, [r6, #4]
 800c3fe:	60dd      	str	r5, [r3, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800c400:	68b3      	ldr	r3, [r6, #8]
 800c402:	4798      	blx	r3
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c404:	0020      	movs	r0, r4
 800c406:	f000 fa8d 	bl	800c924 <LoRaMacSerializerData>
 800c40a:	1e03      	subs	r3, r0, #0
 800c40c:	d00f      	beq.n	800c42e <LoRaMacCryptoSecureMessage+0x5a>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c40e:	2011      	movs	r0, #17
 800c410:	e00b      	b.n	800c42a <LoRaMacCryptoSecureMessage+0x56>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800c412:	0023      	movs	r3, r4
 800c414:	3328      	adds	r3, #40	; 0x28
 800c416:	7819      	ldrb	r1, [r3, #0]
 800c418:	2300      	movs	r3, #0
 800c41a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c41c:	9300      	str	r3, [sp, #0]
 800c41e:	9501      	str	r5, [sp, #4]
 800c420:	68a3      	ldr	r3, [r4, #8]
 800c422:	f7ff fe0a 	bl	800c03a <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c426:	2800      	cmp	r0, #0
 800c428:	d0e8      	beq.n	800c3fc <LoRaMacCryptoSecureMessage+0x28>
}
 800c42a:	b007      	add	sp, #28
 800c42c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800c42e:	7926      	ldrb	r6, [r4, #4]
 800c430:	6821      	ldr	r1, [r4, #0]
 800c432:	3e04      	subs	r6, #4
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c434:	200a      	movs	r0, #10
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800c436:	b2b2      	uxth	r2, r6
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800c438:	2900      	cmp	r1, #0
 800c43a:	d0f6      	beq.n	800c42a <LoRaMacCryptoSecureMessage+0x56>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800c43c:	2780      	movs	r7, #128	; 0x80
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800c43e:	200e      	movs	r0, #14
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800c440:	007f      	lsls	r7, r7, #1
 800c442:	42ba      	cmp	r2, r7
 800c444:	d8f1      	bhi.n	800c42a <LoRaMacCryptoSecureMessage+0x56>
    b0[0] = 0x49;
 800c446:	303b      	adds	r0, #59	; 0x3b
 800c448:	9002      	str	r0, [sp, #8]
    b0[4] = 0x00;
 800c44a:	a802      	add	r0, sp, #8
 800c44c:	8083      	strh	r3, [r0, #4]
    b0[14] = 0x00;
 800c44e:	7383      	strb	r3, [r0, #14]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800c450:	0023      	movs	r3, r4
 800c452:	8927      	ldrh	r7, [r4, #8]
    b0[10] = fCnt & 0xFF;
 800c454:	8145      	strh	r5, [r0, #10]
    b0[6] = devAddr & 0xFF;
 800c456:	80c7      	strh	r7, [r0, #6]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800c458:	68a7      	ldr	r7, [r4, #8]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800c45a:	332c      	adds	r3, #44	; 0x2c
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800c45c:	0c3f      	lsrs	r7, r7, #16
 800c45e:	7207      	strb	r7, [r0, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800c460:	68a7      	ldr	r7, [r4, #8]
    b0[15] = msgLen & 0xFF;
 800c462:	73c6      	strb	r6, [r0, #15]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800c464:	0e3f      	lsrs	r7, r7, #24
 800c466:	7247      	strb	r7, [r0, #9]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800c468:	0c2f      	lsrs	r7, r5, #16
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800c46a:	0e2d      	lsrs	r5, r5, #24
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800c46c:	7307      	strb	r7, [r0, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800c46e:	7345      	strb	r5, [r0, #13]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800c470:	9300      	str	r3, [sp, #0]
 800c472:	2307      	movs	r3, #7
 800c474:	f7fb fb24 	bl	8007ac0 <SecureElementComputeAesCmac>
 800c478:	2800      	cmp	r0, #0
 800c47a:	d001      	beq.n	800c480 <LoRaMacCryptoSecureMessage+0xac>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c47c:	200f      	movs	r0, #15
 800c47e:	e7d4      	b.n	800c42a <LoRaMacCryptoSecureMessage+0x56>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c480:	0020      	movs	r0, r4
 800c482:	f000 fa4f 	bl	800c924 <LoRaMacSerializerData>
 800c486:	2800      	cmp	r0, #0
 800c488:	d0cf      	beq.n	800c42a <LoRaMacCryptoSecureMessage+0x56>
 800c48a:	e7c0      	b.n	800c40e <LoRaMacCryptoSecureMessage+0x3a>
 800c48c:	20000eb0 	.word	0x20000eb0

0800c490 <LoRaMacCryptoUnsecureMessage>:
{
 800c490:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c492:	b089      	sub	sp, #36	; 0x24
 800c494:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c496:	000f      	movs	r7, r1
 800c498:	001d      	movs	r5, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c49a:	240a      	movs	r4, #10
{
 800c49c:	9004      	str	r0, [sp, #16]
 800c49e:	9205      	str	r2, [sp, #20]
    if( macMsg == 0 )
 800c4a0:	2e00      	cmp	r6, #0
 800c4a2:	d008      	beq.n	800c4b6 <LoRaMacCryptoUnsecureMessage+0x26>
    uint32_t lastDown = 0;
 800c4a4:	2300      	movs	r3, #0
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800c4a6:	0010      	movs	r0, r2
 800c4a8:	a907      	add	r1, sp, #28
    uint32_t lastDown = 0;
 800c4aa:	9307      	str	r3, [sp, #28]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800c4ac:	f7ff fd9a 	bl	800bfe4 <GetLastFcntDown>
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	d003      	beq.n	800c4bc <LoRaMacCryptoUnsecureMessage+0x2c>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800c4b4:	2406      	movs	r4, #6
}
 800c4b6:	0020      	movs	r0, r4
 800c4b8:	b009      	add	sp, #36	; 0x24
 800c4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( currentDown > lastDown ) ||
 800c4bc:	9b07      	ldr	r3, [sp, #28]
 800c4be:	429d      	cmp	r5, r3
 800c4c0:	d801      	bhi.n	800c4c6 <LoRaMacCryptoUnsecureMessage+0x36>
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	d1f6      	bne.n	800c4b4 <LoRaMacCryptoUnsecureMessage+0x24>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800c4c6:	0030      	movs	r0, r6
 800c4c8:	f000 f99c 	bl	800c804 <LoRaMacParserData>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800c4cc:	2410      	movs	r4, #16
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800c4ce:	2800      	cmp	r0, #0
 800c4d0:	d1f1      	bne.n	800c4b6 <LoRaMacCryptoUnsecureMessage+0x26>
        if( KeyAddrList[i].AddrID == addrID )
 800c4d2:	4a2c      	ldr	r2, [pc, #176]	; (800c584 <LoRaMacCryptoUnsecureMessage+0xf4>)
 800c4d4:	0083      	lsls	r3, r0, #2
 800c4d6:	469c      	mov	ip, r3
 800c4d8:	9904      	ldr	r1, [sp, #16]
 800c4da:	5c9b      	ldrb	r3, [r3, r2]
 800c4dc:	428b      	cmp	r3, r1
 800c4de:	d13c      	bne.n	800c55a <LoRaMacCryptoUnsecureMessage+0xca>
    if( address != macMsg->FHDR.DevAddr )
 800c4e0:	68b3      	ldr	r3, [r6, #8]
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800c4e2:	2402      	movs	r4, #2
    if( address != macMsg->FHDR.DevAddr )
 800c4e4:	42bb      	cmp	r3, r7
 800c4e6:	d1e6      	bne.n	800c4b6 <LoRaMacCryptoUnsecureMessage+0x26>
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 800c4e8:	4927      	ldr	r1, [pc, #156]	; (800c588 <LoRaMacCryptoUnsecureMessage+0xf8>)
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800c4ea:	7b33      	ldrb	r3, [r6, #12]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 800c4ec:	6849      	ldr	r1, [r1, #4]
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800c4ee:	069b      	lsls	r3, r3, #26
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 800c4f0:	7889      	ldrb	r1, [r1, #2]
    payloadDecryptionKeyID = curItem->AppSkey;
 800c4f2:	4462      	add	r2, ip
        isAck = false;
 800c4f4:	1e48      	subs	r0, r1, #1
 800c4f6:	4181      	sbcs	r1, r0
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800c4f8:	0fdb      	lsrs	r3, r3, #31
        isAck = false;
 800c4fa:	4249      	negs	r1, r1
 800c4fc:	400b      	ands	r3, r1
    payloadDecryptionKeyID = curItem->AppSkey;
 800c4fe:	7851      	ldrb	r1, [r2, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800c500:	6af0      	ldr	r0, [r6, #44]	; 0x2c
    payloadDecryptionKeyID = curItem->AppSkey;
 800c502:	9104      	str	r1, [sp, #16]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800c504:	7931      	ldrb	r1, [r6, #4]
 800c506:	7892      	ldrb	r2, [r2, #2]
 800c508:	3904      	subs	r1, #4
 800c50a:	9002      	str	r0, [sp, #8]
 800c50c:	9501      	str	r5, [sp, #4]
 800c50e:	9700      	str	r7, [sp, #0]
 800c510:	6830      	ldr	r0, [r6, #0]
 800c512:	b289      	uxth	r1, r1
 800c514:	f7ff fe36 	bl	800c184 <VerifyCmacB0.constprop.0>
 800c518:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c51a:	d1cc      	bne.n	800c4b6 <LoRaMacCryptoUnsecureMessage+0x26>
    if( macMsg->FPort == 0 )
 800c51c:	1c73      	adds	r3, r6, #1
 800c51e:	7fdb      	ldrb	r3, [r3, #31]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d101      	bne.n	800c528 <LoRaMacCryptoUnsecureMessage+0x98>
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 800c524:	3307      	adds	r3, #7
 800c526:	9304      	str	r3, [sp, #16]
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800c528:	0033      	movs	r3, r6
 800c52a:	3328      	adds	r3, #40	; 0x28
 800c52c:	7819      	ldrb	r1, [r3, #0]
 800c52e:	2301      	movs	r3, #1
 800c530:	9501      	str	r5, [sp, #4]
 800c532:	9300      	str	r3, [sp, #0]
 800c534:	9a04      	ldr	r2, [sp, #16]
 800c536:	003b      	movs	r3, r7
 800c538:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800c53a:	f7ff fd7e 	bl	800c03a <PayloadEncrypt>
 800c53e:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c540:	d1b9      	bne.n	800c4b6 <LoRaMacCryptoUnsecureMessage+0x26>
    switch( fCntID )
 800c542:	9805      	ldr	r0, [sp, #20]
 800c544:	4b10      	ldr	r3, [pc, #64]	; (800c588 <LoRaMacCryptoUnsecureMessage+0xf8>)
 800c546:	3801      	subs	r0, #1
 800c548:	2806      	cmp	r0, #6
 800c54a:	d80c      	bhi.n	800c566 <LoRaMacCryptoUnsecureMessage+0xd6>
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
 800c54c:	685a      	ldr	r2, [r3, #4]
 800c54e:	f7f3 fddb 	bl	8000108 <__gnu_thumb1_case_uqi>
 800c552:	0d09      	.short	0x0d09
 800c554:	1513110f 	.word	0x1513110f
 800c558:	17          	.byte	0x17
 800c559:	00          	.byte	0x00
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800c55a:	3001      	adds	r0, #1
 800c55c:	2805      	cmp	r0, #5
 800c55e:	d1b9      	bne.n	800c4d4 <LoRaMacCryptoUnsecureMessage+0x44>
 800c560:	240c      	movs	r4, #12
 800c562:	e7a8      	b.n	800c4b6 <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 800c564:	6115      	str	r5, [r2, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800c566:	689b      	ldr	r3, [r3, #8]
 800c568:	4798      	blx	r3
}
 800c56a:	e7a4      	b.n	800c4b6 <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 800c56c:	6155      	str	r5, [r2, #20]
            break;
 800c56e:	e7fa      	b.n	800c566 <LoRaMacCryptoUnsecureMessage+0xd6>
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 800c570:	6195      	str	r5, [r2, #24]
            break;
 800c572:	e7f8      	b.n	800c566 <LoRaMacCryptoUnsecureMessage+0xd6>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 800c574:	61d5      	str	r5, [r2, #28]
            break;
 800c576:	e7f6      	b.n	800c566 <LoRaMacCryptoUnsecureMessage+0xd6>
            CryptoCtx.NvmCtx->FCntList.McFCntDown1 = currentDown;
 800c578:	6215      	str	r5, [r2, #32]
            break;
 800c57a:	e7f4      	b.n	800c566 <LoRaMacCryptoUnsecureMessage+0xd6>
            CryptoCtx.NvmCtx->FCntList.McFCntDown2 = currentDown;
 800c57c:	6255      	str	r5, [r2, #36]	; 0x24
            break;
 800c57e:	e7f2      	b.n	800c566 <LoRaMacCryptoUnsecureMessage+0xd6>
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
 800c580:	6295      	str	r5, [r2, #40]	; 0x28
            break;
 800c582:	e7f0      	b.n	800c566 <LoRaMacCryptoUnsecureMessage+0xd6>
 800c584:	20000048 	.word	0x20000048
 800c588:	20000eb0 	.word	0x20000eb0

0800c58c <LoRaMacCryptoDeriveMcRootKey>:
{
 800c58c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c58e:	4b12      	ldr	r3, [pc, #72]	; (800c5d8 <LoRaMacCryptoDeriveMcRootKey+0x4c>)
 800c590:	0004      	movs	r4, r0
 800c592:	685e      	ldr	r6, [r3, #4]
 800c594:	78b5      	ldrb	r5, [r6, #2]
    if( ( ( keyID == APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 ) ) ||
 800c596:	2800      	cmp	r0, #0
 800c598:	d104      	bne.n	800c5a4 <LoRaMacCryptoDeriveMcRootKey+0x18>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800c59a:	200b      	movs	r0, #11
    if( ( ( keyID == APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 ) ) ||
 800c59c:	2d00      	cmp	r5, #0
 800c59e:	d106      	bne.n	800c5ae <LoRaMacCryptoDeriveMcRootKey+0x22>
}
 800c5a0:	b004      	add	sp, #16
 800c5a2:	bd70      	pop	{r4, r5, r6, pc}
    if( ( ( keyID == APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 ) ) ||
 800c5a4:	2801      	cmp	r0, #1
 800c5a6:	d102      	bne.n	800c5ae <LoRaMacCryptoDeriveMcRootKey+0x22>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800c5a8:	200b      	movs	r0, #11
        ( ( keyID == GEN_APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 ) ) )
 800c5aa:	2d01      	cmp	r5, #1
 800c5ac:	d0f8      	beq.n	800c5a0 <LoRaMacCryptoDeriveMcRootKey+0x14>
    uint8_t compBase[16] = { 0 };
 800c5ae:	2100      	movs	r1, #0
 800c5b0:	220c      	movs	r2, #12
 800c5b2:	a801      	add	r0, sp, #4
 800c5b4:	9100      	str	r1, [sp, #0]
 800c5b6:	f003 fb0a 	bl	800fbce <memset>
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 800c5ba:	2d01      	cmp	r5, #1
 800c5bc:	d102      	bne.n	800c5c4 <LoRaMacCryptoDeriveMcRootKey+0x38>
        compBase[0] = 0x20;
 800c5be:	2320      	movs	r3, #32
 800c5c0:	466a      	mov	r2, sp
 800c5c2:	7013      	strb	r3, [r2, #0]
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800c5c4:	2309      	movs	r3, #9
 800c5c6:	0022      	movs	r2, r4
 800c5c8:	4669      	mov	r1, sp
 800c5ca:	6830      	ldr	r0, [r6, #0]
 800c5cc:	f7fb fb25 	bl	8007c1a <SecureElementDeriveAndStoreKey>
 800c5d0:	2800      	cmp	r0, #0
 800c5d2:	d0e5      	beq.n	800c5a0 <LoRaMacCryptoDeriveMcRootKey+0x14>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c5d4:	200f      	movs	r0, #15
 800c5d6:	e7e3      	b.n	800c5a0 <LoRaMacCryptoDeriveMcRootKey+0x14>
 800c5d8:	20000eb0 	.word	0x20000eb0

0800c5dc <LoRaMacCryptoSetKey>:
{
 800c5dc:	b570      	push	{r4, r5, r6, lr}
 800c5de:	0005      	movs	r5, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800c5e0:	f7fb fb12 	bl	8007c08 <SecureElementSetKey>
 800c5e4:	1e04      	subs	r4, r0, #0
 800c5e6:	d10a      	bne.n	800c5fe <LoRaMacCryptoSetKey+0x22>
    if( ( keyID == GEN_APP_KEY ) || ( keyID == APP_KEY ) )
 800c5e8:	2d01      	cmp	r5, #1
 800c5ea:	d809      	bhi.n	800c600 <LoRaMacCryptoSetKey+0x24>
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800c5ec:	0028      	movs	r0, r5
 800c5ee:	f7ff ffcd 	bl	800c58c <LoRaMacCryptoDeriveMcRootKey>
 800c5f2:	2800      	cmp	r0, #0
 800c5f4:	d103      	bne.n	800c5fe <LoRaMacCryptoSetKey+0x22>
    if( keyID != MC_ROOT_KEY )
 800c5f6:	f7ff fdaf 	bl	800c158 <LoRaMacCryptoDeriveMcKEKey.part.0>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	d000      	beq.n	800c600 <LoRaMacCryptoSetKey+0x24>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c5fe:	240f      	movs	r4, #15
}
 800c600:	0020      	movs	r0, r4
 800c602:	bd70      	pop	{r4, r5, r6, pc}

0800c604 <LoRaMacCryptoHandleJoinAccept>:
{
 800c604:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c606:	b0c9      	sub	sp, #292	; 0x124
 800c608:	0015      	movs	r5, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c60a:	240a      	movs	r4, #10
{
 800c60c:	9001      	str	r0, [sp, #4]
 800c60e:	9102      	str	r1, [sp, #8]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800c610:	2a00      	cmp	r2, #0
 800c612:	d01b      	beq.n	800c64c <LoRaMacCryptoHandleJoinAccept+0x48>
 800c614:	2900      	cmp	r1, #0
 800c616:	d019      	beq.n	800c64c <LoRaMacCryptoHandleJoinAccept+0x48>
    uint8_t micComputationOffset = 0;
 800c618:	2400      	movs	r4, #0
    if( joinReqType == JOIN_REQ )
 800c61a:	28ff      	cmp	r0, #255	; 0xff
 800c61c:	d100      	bne.n	800c620 <LoRaMacCryptoHandleJoinAccept+0x1c>
        micComputationOffset = CRYPTO_MIC_COMPUTATION_OFFSET;
 800c61e:	340c      	adds	r4, #12
    memset1( procBuffer, 0, ( macMsg->BufSize + micComputationOffset ) );
 800c620:	b2a3      	uxth	r3, r4
 800c622:	9303      	str	r3, [sp, #12]
 800c624:	792a      	ldrb	r2, [r5, #4]
 800c626:	ae05      	add	r6, sp, #20
 800c628:	18a2      	adds	r2, r4, r2
 800c62a:	2100      	movs	r1, #0
 800c62c:	0030      	movs	r0, r6
 800c62e:	f002 f9dd 	bl	800e9ec <memset1>
    if( SecureElementAesEncrypt( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ), encryptionKeyID, ( procBuffer + micComputationOffset ) ) != SECURE_ELEMENT_SUCCESS )
 800c632:	7929      	ldrb	r1, [r5, #4]
 800c634:	682b      	ldr	r3, [r5, #0]
 800c636:	1934      	adds	r4, r6, r4
 800c638:	3901      	subs	r1, #1
 800c63a:	1c58      	adds	r0, r3, #1
 800c63c:	2202      	movs	r2, #2
 800c63e:	0023      	movs	r3, r4
 800c640:	b289      	uxth	r1, r1
 800c642:	f7fb fa61 	bl	8007b08 <SecureElementAesEncrypt>
 800c646:	2800      	cmp	r0, #0
 800c648:	d003      	beq.n	800c652 <LoRaMacCryptoHandleJoinAccept+0x4e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c64a:	240f      	movs	r4, #15
}
 800c64c:	0020      	movs	r0, r4
 800c64e:	b049      	add	sp, #292	; 0x124
 800c650:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy1( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( procBuffer + micComputationOffset ), ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ) );
 800c652:	792a      	ldrb	r2, [r5, #4]
 800c654:	682b      	ldr	r3, [r5, #0]
 800c656:	3a01      	subs	r2, #1
 800c658:	0021      	movs	r1, r4
 800c65a:	1c58      	adds	r0, r3, #1
 800c65c:	b292      	uxth	r2, r2
 800c65e:	f002 f9b0 	bl	800e9c2 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800c662:	0028      	movs	r0, r5
 800c664:	f000 f882 	bl	800c76c <LoRaMacParserJoinAccept>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800c668:	2410      	movs	r4, #16
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800c66a:	2800      	cmp	r0, #0
 800c66c:	d1ee      	bne.n	800c64c <LoRaMacCryptoHandleJoinAccept+0x48>
    if( macMsg->DLSettings.Bits.OptNeg == 1 )
 800c66e:	4f3e      	ldr	r7, [pc, #248]	; (800c768 <LoRaMacCryptoHandleJoinAccept+0x164>)
 800c670:	7c2a      	ldrb	r2, [r5, #16]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2a7f      	cmp	r2, #127	; 0x7f
 800c676:	d92d      	bls.n	800c6d4 <LoRaMacCryptoHandleJoinAccept+0xd0>
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 800c678:	2201      	movs	r2, #1
 800c67a:	709a      	strb	r2, [r3, #2]
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
 800c67c:	9b01      	ldr	r3, [sp, #4]
        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800c67e:	9902      	ldr	r1, [sp, #8]
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
 800c680:	7033      	strb	r3, [r6, #0]
        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800c682:	ab04      	add	r3, sp, #16
 800c684:	1d58      	adds	r0, r3, #5
 800c686:	3207      	adds	r2, #7
 800c688:	f002 f9a4 	bl	800e9d4 <memcpyr>
        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 800c68c:	687b      	ldr	r3, [r7, #4]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 800c68e:	0030      	movs	r0, r6
        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 800c690:	889a      	ldrh	r2, [r3, #4]
 800c692:	7272      	strb	r2, [r6, #9]
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 800c694:	889b      	ldrh	r3, [r3, #4]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 800c696:	6a6a      	ldr	r2, [r5, #36]	; 0x24
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 800c698:	0a1b      	lsrs	r3, r3, #8
 800c69a:	72b3      	strb	r3, [r6, #10]
        procBuffer[bufItr++] = macMsg->MHDR.Value;
 800c69c:	796b      	ldrb	r3, [r5, #5]
 800c69e:	72f3      	strb	r3, [r6, #11]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 800c6a0:	7929      	ldrb	r1, [r5, #4]
 800c6a2:	9b03      	ldr	r3, [sp, #12]
 800c6a4:	3905      	subs	r1, #5
 800c6a6:	1859      	adds	r1, r3, r1
 800c6a8:	b289      	uxth	r1, r1
 800c6aa:	2303      	movs	r3, #3
 800c6ac:	f7fb fa13 	bl	8007ad6 <SecureElementVerifyAesCmac>
 800c6b0:	2800      	cmp	r0, #0
 800c6b2:	d1ca      	bne.n	800c64a <LoRaMacCryptoHandleJoinAccept+0x46>
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
 800c6b4:	79eb      	ldrb	r3, [r5, #7]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 800c6b6:	7a2a      	ldrb	r2, [r5, #8]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
 800c6b8:	021b      	lsls	r3, r3, #8
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 800c6ba:	0412      	lsls	r2, r2, #16
        currentJoinNonce = ( uint32_t ) macMsg->JoinNonce[0];
 800c6bc:	79a9      	ldrb	r1, [r5, #6]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 800c6be:	4313      	orrs	r3, r2
        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 800c6c0:	687a      	ldr	r2, [r7, #4]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 800c6c2:	430b      	orrs	r3, r1
        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 800c6c4:	6891      	ldr	r1, [r2, #8]
            return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800c6c6:	2403      	movs	r4, #3
        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 800c6c8:	4299      	cmp	r1, r3
 800c6ca:	d2bf      	bcs.n	800c64c <LoRaMacCryptoHandleJoinAccept+0x48>
            CryptoCtx.NvmCtx->JoinNonce = currentJoinNonce;
 800c6cc:	6093      	str	r3, [r2, #8]
            CryptoCtx.EventCryptoNvmCtxChanged( );
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	4798      	blx	r3
 800c6d2:	e00a      	b.n	800c6ea <LoRaMacCryptoHandleJoinAccept+0xe6>
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 0;
 800c6d4:	7098      	strb	r0, [r3, #2]
        if( SecureElementVerifyAesCmac( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 800c6d6:	7929      	ldrb	r1, [r5, #4]
 800c6d8:	2302      	movs	r3, #2
 800c6da:	3904      	subs	r1, #4
 800c6dc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800c6de:	6828      	ldr	r0, [r5, #0]
 800c6e0:	b289      	uxth	r1, r1
 800c6e2:	f7fb f9f8 	bl	8007ad6 <SecureElementVerifyAesCmac>
 800c6e6:	2800      	cmp	r0, #0
 800c6e8:	d1af      	bne.n	800c64a <LoRaMacCryptoHandleJoinAccept+0x46>
        retval = LoRaMacCryptoDeriveMcRootKey( GEN_APP_KEY );
 800c6ea:	2001      	movs	r0, #1
 800c6ec:	f7ff ff4e 	bl	800c58c <LoRaMacCryptoDeriveMcRootKey>
 800c6f0:	1e04      	subs	r4, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c6f2:	d1ab      	bne.n	800c64c <LoRaMacCryptoHandleJoinAccept+0x48>
    if( keyID != MC_ROOT_KEY )
 800c6f4:	f7ff fd30 	bl	800c158 <LoRaMacCryptoDeriveMcKEKey.part.0>
 800c6f8:	1e04      	subs	r4, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c6fa:	d1a7      	bne.n	800c64c <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 800c6fc:	4e1a      	ldr	r6, [pc, #104]	; (800c768 <LoRaMacCryptoHandleJoinAccept+0x164>)
 800c6fe:	1daf      	adds	r7, r5, #6
 800c700:	6873      	ldr	r3, [r6, #4]
 800c702:	3509      	adds	r5, #9
 800c704:	002a      	movs	r2, r5
 800c706:	0039      	movs	r1, r7
 800c708:	2008      	movs	r0, #8
 800c70a:	3304      	adds	r3, #4
 800c70c:	f7ff fcf0 	bl	800c0f0 <DeriveSessionKey10x>
 800c710:	1e04      	subs	r4, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c712:	d19b      	bne.n	800c64c <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 800c714:	6873      	ldr	r3, [r6, #4]
 800c716:	002a      	movs	r2, r5
 800c718:	0039      	movs	r1, r7
 800c71a:	2007      	movs	r0, #7
 800c71c:	3304      	adds	r3, #4
 800c71e:	f7ff fce7 	bl	800c0f0 <DeriveSessionKey10x>
 800c722:	1e04      	subs	r4, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c724:	d000      	beq.n	800c728 <LoRaMacCryptoHandleJoinAccept+0x124>
 800c726:	e791      	b.n	800c64c <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 800c728:	6873      	ldr	r3, [r6, #4]
 800c72a:	002a      	movs	r2, r5
 800c72c:	0039      	movs	r1, r7
 800c72e:	2005      	movs	r0, #5
 800c730:	3304      	adds	r3, #4
 800c732:	f7ff fcdd 	bl	800c0f0 <DeriveSessionKey10x>
 800c736:	1e04      	subs	r4, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c738:	d000      	beq.n	800c73c <LoRaMacCryptoHandleJoinAccept+0x138>
 800c73a:	e787      	b.n	800c64c <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 800c73c:	6873      	ldr	r3, [r6, #4]
 800c73e:	002a      	movs	r2, r5
 800c740:	0039      	movs	r1, r7
 800c742:	2006      	movs	r0, #6
 800c744:	3304      	adds	r3, #4
 800c746:	f7ff fcd3 	bl	800c0f0 <DeriveSessionKey10x>
 800c74a:	1e04      	subs	r4, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c74c:	d000      	beq.n	800c750 <LoRaMacCryptoHandleJoinAccept+0x14c>
 800c74e:	e77d      	b.n	800c64c <LoRaMacCryptoHandleJoinAccept+0x48>
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800c750:	2201      	movs	r2, #1
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 800c752:	6873      	ldr	r3, [r6, #4]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800c754:	4252      	negs	r2, r2
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 800c756:	60d8      	str	r0, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800c758:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800c75a:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800c75c:	615a      	str	r2, [r3, #20]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800c75e:	68b3      	ldr	r3, [r6, #8]
    CryptoCtx.RJcount0 = 0;
 800c760:	8030      	strh	r0, [r6, #0]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800c762:	4798      	blx	r3
    return LORAMAC_CRYPTO_SUCCESS;
 800c764:	e772      	b.n	800c64c <LoRaMacCryptoHandleJoinAccept+0x48>
 800c766:	46c0      	nop			; (mov r8, r8)
 800c768:	20000eb0 	.word	0x20000eb0

0800c76c <LoRaMacParserJoinAccept>:
*/
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 800c76c:	b510      	push	{r4, lr}
 800c76e:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800c770:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c772:	2c00      	cmp	r4, #0
 800c774:	d040      	beq.n	800c7f8 <LoRaMacParserJoinAccept+0x8c>
 800c776:	6821      	ldr	r1, [r4, #0]
 800c778:	2900      	cmp	r1, #0
 800c77a:	d03d      	beq.n	800c7f8 <LoRaMacParserJoinAccept+0x8c>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c77c:	780b      	ldrb	r3, [r1, #0]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800c77e:	2203      	movs	r2, #3
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c780:	7163      	strb	r3, [r4, #5]
    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800c782:	3101      	adds	r1, #1
 800c784:	1da0      	adds	r0, r4, #6
 800c786:	f002 f91c 	bl	800e9c2 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800c78a:	0020      	movs	r0, r4
 800c78c:	6823      	ldr	r3, [r4, #0]
 800c78e:	2203      	movs	r2, #3
 800c790:	1d19      	adds	r1, r3, #4
 800c792:	3009      	adds	r0, #9
 800c794:	f002 f915 	bl	800e9c2 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800c798:	6821      	ldr	r1, [r4, #0]
 800c79a:	79ca      	ldrb	r2, [r1, #7]
 800c79c:	60e2      	str	r2, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c79e:	7a0b      	ldrb	r3, [r1, #8]
 800c7a0:	021b      	lsls	r3, r3, #8
 800c7a2:	431a      	orrs	r2, r3
 800c7a4:	60e2      	str	r2, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c7a6:	7a4b      	ldrb	r3, [r1, #9]
 800c7a8:	041b      	lsls	r3, r3, #16
 800c7aa:	4313      	orrs	r3, r2
 800c7ac:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c7ae:	7a8a      	ldrb	r2, [r1, #10]
 800c7b0:	0612      	lsls	r2, r2, #24
 800c7b2:	4313      	orrs	r3, r2
 800c7b4:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800c7b6:	7acb      	ldrb	r3, [r1, #11]
 800c7b8:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800c7ba:	7b0b      	ldrb	r3, [r1, #12]
 800c7bc:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_C_FLIST_FIELD_SIZE )
 800c7be:	7923      	ldrb	r3, [r4, #4]
 800c7c0:	2b21      	cmp	r3, #33	; 0x21
 800c7c2:	d11a      	bne.n	800c7fa <LoRaMacParserJoinAccept+0x8e>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_C_FLIST_FIELD_SIZE );
 800c7c4:	0020      	movs	r0, r4
 800c7c6:	2210      	movs	r2, #16
 800c7c8:	310d      	adds	r1, #13
 800c7ca:	3012      	adds	r0, #18
 800c7cc:	f002 f8f9 	bl	800e9c2 <memcpy1>
        bufItr = bufItr + LORAMAC_C_FLIST_FIELD_SIZE;
 800c7d0:	231d      	movs	r3, #29
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800c7d2:	6820      	ldr	r0, [r4, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c7d4:	1c5a      	adds	r2, r3, #1
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800c7d6:	5cc1      	ldrb	r1, [r0, r3]
 800c7d8:	6261      	str	r1, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c7da:	5c82      	ldrb	r2, [r0, r2]
 800c7dc:	0212      	lsls	r2, r2, #8
 800c7de:	4311      	orrs	r1, r2
 800c7e0:	6261      	str	r1, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c7e2:	1c9a      	adds	r2, r3, #2
 800c7e4:	5c82      	ldrb	r2, [r0, r2]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c7e6:	3303      	adds	r3, #3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c7e8:	0412      	lsls	r2, r2, #16
 800c7ea:	430a      	orrs	r2, r1
 800c7ec:	6262      	str	r2, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c7ee:	5cc3      	ldrb	r3, [r0, r3]

    return LORAMAC_PARSER_SUCCESS;
 800c7f0:	2000      	movs	r0, #0
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c7f2:	061b      	lsls	r3, r3, #24
 800c7f4:	431a      	orrs	r2, r3
 800c7f6:	6262      	str	r2, [r4, #36]	; 0x24
}
 800c7f8:	bd10      	pop	{r4, pc}
        return LORAMAC_PARSER_FAIL;
 800c7fa:	2001      	movs	r0, #1
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800c7fc:	2b11      	cmp	r3, #17
 800c7fe:	dcfb      	bgt.n	800c7f8 <LoRaMacParserJoinAccept+0x8c>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800c800:	230d      	movs	r3, #13
 800c802:	e7e6      	b.n	800c7d2 <LoRaMacParserJoinAccept+0x66>

0800c804 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 800c804:	b570      	push	{r4, r5, r6, lr}
 800c806:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800c808:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c80a:	2c00      	cmp	r4, #0
 800c80c:	d054      	beq.n	800c8b8 <LoRaMacParserData+0xb4>
 800c80e:	6821      	ldr	r1, [r4, #0]
 800c810:	2900      	cmp	r1, #0
 800c812:	d051      	beq.n	800c8b8 <LoRaMacParserData+0xb4>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c814:	780b      	ldrb	r3, [r1, #0]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c816:	0020      	movs	r0, r4
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c818:	7163      	strb	r3, [r4, #5]
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800c81a:	784a      	ldrb	r2, [r1, #1]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c81c:	3010      	adds	r0, #16
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800c81e:	60a2      	str	r2, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c820:	788b      	ldrb	r3, [r1, #2]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800c822:	1c65      	adds	r5, r4, #1
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c824:	021b      	lsls	r3, r3, #8
 800c826:	431a      	orrs	r2, r3
 800c828:	60a2      	str	r2, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c82a:	78cb      	ldrb	r3, [r1, #3]
 800c82c:	041b      	lsls	r3, r3, #16
 800c82e:	4313      	orrs	r3, r2
 800c830:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c832:	790a      	ldrb	r2, [r1, #4]
 800c834:	0612      	lsls	r2, r2, #24
 800c836:	4313      	orrs	r3, r2
 800c838:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800c83a:	794b      	ldrb	r3, [r1, #5]
 800c83c:	7323      	strb	r3, [r4, #12]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800c83e:	798b      	ldrb	r3, [r1, #6]
 800c840:	81e3      	strh	r3, [r4, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800c842:	79ca      	ldrb	r2, [r1, #7]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c844:	3108      	adds	r1, #8
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800c846:	0212      	lsls	r2, r2, #8
 800c848:	4313      	orrs	r3, r2
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c84a:	7b22      	ldrb	r2, [r4, #12]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800c84c:	81e3      	strh	r3, [r4, #14]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c84e:	0712      	lsls	r2, r2, #28
 800c850:	0f12      	lsrs	r2, r2, #28
 800c852:	f002 f8b6 	bl	800e9c2 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c856:	7b21      	ldrb	r1, [r4, #12]
    macMsg->FRMPayloadSize = 0;
 800c858:	0020      	movs	r0, r4
    macMsg->FPort = 0;
 800c85a:	2300      	movs	r3, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c85c:	0709      	lsls	r1, r1, #28
 800c85e:	0f09      	lsrs	r1, r1, #28
 800c860:	000e      	movs	r6, r1
    macMsg->FRMPayloadSize = 0;
 800c862:	3028      	adds	r0, #40	; 0x28
    macMsg->FPort = 0;
 800c864:	77eb      	strb	r3, [r5, #31]
    macMsg->FRMPayloadSize = 0;
 800c866:	7003      	strb	r3, [r0, #0]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800c868:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c86a:	3608      	adds	r6, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800c86c:	1b93      	subs	r3, r2, r6
 800c86e:	2b04      	cmp	r3, #4
 800c870:	dd0c      	ble.n	800c88c <LoRaMacParserData+0x88>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800c872:	6823      	ldr	r3, [r4, #0]
 800c874:	3109      	adds	r1, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800c876:	3a04      	subs	r2, #4
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800c878:	5d9e      	ldrb	r6, [r3, r6]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800c87a:	1a52      	subs	r2, r2, r1
 800c87c:	b2d2      	uxtb	r2, r2
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800c87e:	77ee      	strb	r6, [r5, #31]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800c880:	7002      	strb	r2, [r0, #0]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800c882:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c884:	b292      	uxth	r2, r2
 800c886:	1859      	adds	r1, r3, r1
 800c888:	f002 f89b 	bl	800e9c2 <memcpy1>
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );

    return LORAMAC_PARSER_SUCCESS;
 800c88c:	2000      	movs	r0, #0
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800c88e:	6822      	ldr	r2, [r4, #0]
 800c890:	7923      	ldrb	r3, [r4, #4]
 800c892:	18d3      	adds	r3, r2, r3
 800c894:	1f1a      	subs	r2, r3, #4
 800c896:	7811      	ldrb	r1, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800c898:	1eda      	subs	r2, r3, #3
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800c89a:	62e1      	str	r1, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800c89c:	7812      	ldrb	r2, [r2, #0]
 800c89e:	0212      	lsls	r2, r2, #8
 800c8a0:	4311      	orrs	r1, r2
 800c8a2:	62e1      	str	r1, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800c8a4:	1e9a      	subs	r2, r3, #2
 800c8a6:	7812      	ldrb	r2, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800c8a8:	3b01      	subs	r3, #1
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800c8aa:	0412      	lsls	r2, r2, #16
 800c8ac:	430a      	orrs	r2, r1
 800c8ae:	62e2      	str	r2, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	061b      	lsls	r3, r3, #24
 800c8b4:	431a      	orrs	r2, r3
 800c8b6:	62e2      	str	r2, [r4, #44]	; 0x2c
}
 800c8b8:	bd70      	pop	{r4, r5, r6, pc}

0800c8ba <LoRaMacSerializerJoinRequest>:
*/
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800c8ba:	b510      	push	{r4, lr}
 800c8bc:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c8be:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c8c0:	2c00      	cmp	r4, #0
 800c8c2:	d02e      	beq.n	800c922 <LoRaMacSerializerJoinRequest+0x68>
 800c8c4:	6823      	ldr	r3, [r4, #0]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d02b      	beq.n	800c922 <LoRaMacSerializerJoinRequest+0x68>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800c8ca:	7922      	ldrb	r2, [r4, #4]
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800c8cc:	1800      	adds	r0, r0, r0
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800c8ce:	2a16      	cmp	r2, #22
 800c8d0:	d927      	bls.n	800c922 <LoRaMacSerializerJoinRequest+0x68>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c8d2:	7962      	ldrb	r2, [r4, #5]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800c8d4:	1da1      	adds	r1, r4, #6
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c8d6:	701a      	strb	r2, [r3, #0]
    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800c8d8:	6823      	ldr	r3, [r4, #0]
 800c8da:	2208      	movs	r2, #8
 800c8dc:	1c58      	adds	r0, r3, #1
 800c8de:	f002 f879 	bl	800e9d4 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800c8e2:	0021      	movs	r1, r4
 800c8e4:	6820      	ldr	r0, [r4, #0]
 800c8e6:	2208      	movs	r2, #8
 800c8e8:	3009      	adds	r0, #9
 800c8ea:	310e      	adds	r1, #14
 800c8ec:	f002 f872 	bl	800e9d4 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800c8f0:	8ae3      	ldrh	r3, [r4, #22]
 800c8f2:	6822      	ldr	r2, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 800c8f4:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800c8f6:	7453      	strb	r3, [r2, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800c8f8:	8ae3      	ldrh	r3, [r4, #22]
 800c8fa:	6822      	ldr	r2, [r4, #0]
 800c8fc:	0a1b      	lsrs	r3, r3, #8
 800c8fe:	7493      	strb	r3, [r2, #18]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c900:	69a3      	ldr	r3, [r4, #24]
 800c902:	6822      	ldr	r2, [r4, #0]
 800c904:	74d3      	strb	r3, [r2, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c906:	69a3      	ldr	r3, [r4, #24]
 800c908:	6822      	ldr	r2, [r4, #0]
 800c90a:	0a1b      	lsrs	r3, r3, #8
 800c90c:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c90e:	69a3      	ldr	r3, [r4, #24]
 800c910:	6822      	ldr	r2, [r4, #0]
 800c912:	0c1b      	lsrs	r3, r3, #16
 800c914:	7553      	strb	r3, [r2, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c916:	69a3      	ldr	r3, [r4, #24]
 800c918:	6822      	ldr	r2, [r4, #0]
 800c91a:	0e1b      	lsrs	r3, r3, #24
 800c91c:	7593      	strb	r3, [r2, #22]
    macMsg->BufSize = bufItr;
 800c91e:	2317      	movs	r3, #23
 800c920:	7123      	strb	r3, [r4, #4]
}
 800c922:	bd10      	pop	{r4, pc}

0800c924 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 800c924:	b570      	push	{r4, r5, r6, lr}
 800c926:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c928:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c92a:	2c00      	cmp	r4, #0
 800c92c:	d068      	beq.n	800ca00 <LoRaMacSerializerData+0xdc>
 800c92e:	6821      	ldr	r1, [r4, #0]
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c930:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c932:	2900      	cmp	r1, #0
 800c934:	d064      	beq.n	800ca00 <LoRaMacSerializerData+0xdc>
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;

    if( macMsg->FRMPayloadSize > 0 )
 800c936:	0025      	movs	r5, r4
 800c938:	3528      	adds	r5, #40	; 0x28
 800c93a:	7828      	ldrb	r0, [r5, #0]
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c93c:	7b22      	ldrb	r2, [r4, #12]
 800c93e:	0003      	movs	r3, r0
 800c940:	1e5e      	subs	r6, r3, #1
 800c942:	41b3      	sbcs	r3, r6
 800c944:	0712      	lsls	r2, r2, #28
 800c946:	0f12      	lsrs	r2, r2, #28
 800c948:	189b      	adds	r3, r3, r2
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800c94a:	3004      	adds	r0, #4
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c94c:	3308      	adds	r3, #8
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800c94e:	181b      	adds	r3, r3, r0

    if( macMsg->BufSize < computedBufSize )
 800c950:	7922      	ldrb	r2, [r4, #4]
 800c952:	b29b      	uxth	r3, r3
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800c954:	2002      	movs	r0, #2
    if( macMsg->BufSize < computedBufSize )
 800c956:	429a      	cmp	r2, r3
 800c958:	d352      	bcc.n	800ca00 <LoRaMacSerializerData+0xdc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c95a:	7963      	ldrb	r3, [r4, #5]
 800c95c:	700b      	strb	r3, [r1, #0]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c95e:	0021      	movs	r1, r4
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800c960:	68a3      	ldr	r3, [r4, #8]
 800c962:	6822      	ldr	r2, [r4, #0]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c964:	3110      	adds	r1, #16
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800c966:	7053      	strb	r3, [r2, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800c968:	68a3      	ldr	r3, [r4, #8]
 800c96a:	6822      	ldr	r2, [r4, #0]
 800c96c:	0a1b      	lsrs	r3, r3, #8
 800c96e:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800c970:	68a3      	ldr	r3, [r4, #8]
 800c972:	6822      	ldr	r2, [r4, #0]
 800c974:	0c1b      	lsrs	r3, r3, #16
 800c976:	70d3      	strb	r3, [r2, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800c978:	68a3      	ldr	r3, [r4, #8]
 800c97a:	6822      	ldr	r2, [r4, #0]
 800c97c:	0e1b      	lsrs	r3, r3, #24
 800c97e:	7113      	strb	r3, [r2, #4]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800c980:	7b23      	ldrb	r3, [r4, #12]
 800c982:	6822      	ldr	r2, [r4, #0]
 800c984:	7153      	strb	r3, [r2, #5]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800c986:	89e3      	ldrh	r3, [r4, #14]
 800c988:	6822      	ldr	r2, [r4, #0]
 800c98a:	7193      	strb	r3, [r2, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800c98c:	89e3      	ldrh	r3, [r4, #14]
 800c98e:	6822      	ldr	r2, [r4, #0]
 800c990:	0a1b      	lsrs	r3, r3, #8
 800c992:	71d3      	strb	r3, [r2, #7]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c994:	7b22      	ldrb	r2, [r4, #12]
 800c996:	6820      	ldr	r0, [r4, #0]
 800c998:	0712      	lsls	r2, r2, #28
 800c99a:	0f12      	lsrs	r2, r2, #28
 800c99c:	3008      	adds	r0, #8
 800c99e:	f002 f810 	bl	800e9c2 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c9a2:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 800c9a4:	782a      	ldrb	r2, [r5, #0]
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c9a6:	071b      	lsls	r3, r3, #28
 800c9a8:	0f1b      	lsrs	r3, r3, #28
 800c9aa:	001e      	movs	r6, r3
 800c9ac:	3608      	adds	r6, #8
    if( macMsg->FRMPayloadSize > 0 )
 800c9ae:	2a00      	cmp	r2, #0
 800c9b0:	d005      	beq.n	800c9be <LoRaMacSerializerData+0x9a>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800c9b2:	1c62      	adds	r2, r4, #1
 800c9b4:	7fd2      	ldrb	r2, [r2, #31]
 800c9b6:	6821      	ldr	r1, [r4, #0]
 800c9b8:	3309      	adds	r3, #9
 800c9ba:	558a      	strb	r2, [r1, r6]
 800c9bc:	001e      	movs	r6, r3
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800c9be:	6823      	ldr	r3, [r4, #0]
 800c9c0:	782a      	ldrb	r2, [r5, #0]
 800c9c2:	1998      	adds	r0, r3, r6
 800c9c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c9c6:	f001 fffc 	bl	800e9c2 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800c9ca:	782b      	ldrb	r3, [r5, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c9cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c9ce:	6821      	ldr	r1, [r4, #0]
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800c9d0:	18f3      	adds	r3, r6, r3
 800c9d2:	b29b      	uxth	r3, r3
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c9d4:	54ca      	strb	r2, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c9d6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c9d8:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c9da:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c9dc:	b292      	uxth	r2, r2
 800c9de:	0a09      	lsrs	r1, r1, #8
 800c9e0:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c9e2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c9e4:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c9e6:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c9e8:	b292      	uxth	r2, r2
 800c9ea:	0c09      	lsrs	r1, r1, #16
 800c9ec:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c9ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c9f0:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c9f2:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c9f4:	b292      	uxth	r2, r2
 800c9f6:	0e09      	lsrs	r1, r1, #24
 800c9f8:	5481      	strb	r1, [r0, r2]

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 800c9fa:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c9fc:	3304      	adds	r3, #4
    macMsg->BufSize = bufItr;
 800c9fe:	7123      	strb	r3, [r4, #4]
}
 800ca00:	bd70      	pop	{r4, r5, r6, pc}

0800ca02 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800ca02:	3805      	subs	r0, #5
 800ca04:	4243      	negs	r3, r0
 800ca06:	4158      	adcs	r0, r3
        default:
        {
            return false;
        }
    }
}
 800ca08:	b2c0      	uxtb	r0, r0
 800ca0a:	4770      	bx	lr

0800ca0c <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800ca0c:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
    switch( region )
 800ca0e:	2805      	cmp	r0, #5
 800ca10:	d105      	bne.n	800ca1e <RegionGetPhyParam+0x12>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 800ca12:	0008      	movs	r0, r1
 800ca14:	f000 fb54 	bl	800d0c0 <RegionEU868GetPhyParam>
 800ca18:	9001      	str	r0, [sp, #4]
        default:
        {
            return phyParam;
        }
    }
}
 800ca1a:	9801      	ldr	r0, [sp, #4]
 800ca1c:	bd0e      	pop	{r1, r2, r3, pc}
            return phyParam;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	9301      	str	r3, [sp, #4]
 800ca22:	e7fa      	b.n	800ca1a <RegionGetPhyParam+0xe>

0800ca24 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800ca24:	b510      	push	{r4, lr}
    switch( region )
 800ca26:	2805      	cmp	r0, #5
 800ca28:	d102      	bne.n	800ca30 <RegionSetBandTxDone+0xc>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 800ca2a:	0008      	movs	r0, r1
 800ca2c:	f000 fbcc 	bl	800d1c8 <RegionEU868SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800ca30:	bd10      	pop	{r4, pc}

0800ca32 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800ca32:	b510      	push	{r4, lr}
    switch( region )
 800ca34:	2805      	cmp	r0, #5
 800ca36:	d102      	bne.n	800ca3e <RegionInitDefaults+0xc>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 800ca38:	0008      	movs	r0, r1
 800ca3a:	f000 fbd7 	bl	800d1ec <RegionEU868InitDefaults>
        default:
        {
            break;
        }
    }
}
 800ca3e:	bd10      	pop	{r4, pc}

0800ca40 <RegionGetNvmCtx>:
        IN865_GET_NVM_CTX( );
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
 800ca40:	2300      	movs	r3, #0
{
 800ca42:	b510      	push	{r4, lr}
    switch( region )
 800ca44:	2805      	cmp	r0, #5
 800ca46:	d103      	bne.n	800ca50 <RegionGetNvmCtx+0x10>
        EU868_GET_NVM_CTX( );
 800ca48:	0008      	movs	r0, r1
 800ca4a:	f000 fc37 	bl	800d2bc <RegionEU868GetNvmCtx>
 800ca4e:	0003      	movs	r3, r0
        }
    }
}
 800ca50:	0018      	movs	r0, r3
 800ca52:	bd10      	pop	{r4, pc}

0800ca54 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800ca54:	b510      	push	{r4, lr}
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 800ca56:	2300      	movs	r3, #0
{
 800ca58:	0004      	movs	r4, r0
 800ca5a:	0008      	movs	r0, r1
 800ca5c:	0011      	movs	r1, r2
    switch( region )
 800ca5e:	2c05      	cmp	r4, #5
 800ca60:	d102      	bne.n	800ca68 <RegionVerify+0x14>
        EU868_VERIFY( );
 800ca62:	f000 fc33 	bl	800d2cc <RegionEU868Verify>
 800ca66:	0003      	movs	r3, r0
        }
    }
}
 800ca68:	0018      	movs	r0, r3
 800ca6a:	bd10      	pop	{r4, pc}

0800ca6c <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800ca6c:	b510      	push	{r4, lr}
    switch( region )
 800ca6e:	2805      	cmp	r0, #5
 800ca70:	d102      	bne.n	800ca78 <RegionApplyCFList+0xc>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 800ca72:	0008      	movs	r0, r1
 800ca74:	f000 ffaa 	bl	800d9cc <RegionEU868ApplyCFList>
        default:
        {
            break;
        }
    }
}
 800ca78:	bd10      	pop	{r4, pc}

0800ca7a <RegionChanMaskSet>:
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 800ca7a:	2300      	movs	r3, #0
{
 800ca7c:	b510      	push	{r4, lr}
    switch( region )
 800ca7e:	2805      	cmp	r0, #5
 800ca80:	d103      	bne.n	800ca8a <RegionChanMaskSet+0x10>
        EU868_CHAN_MASK_SET( );
 800ca82:	0008      	movs	r0, r1
 800ca84:	f000 fc4c 	bl	800d320 <RegionEU868ChanMaskSet>
 800ca88:	0003      	movs	r3, r0
        }
    }
}
 800ca8a:	0018      	movs	r0, r3
 800ca8c:	bd10      	pop	{r4, pc}

0800ca8e <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800ca8e:	b510      	push	{r4, lr}
 800ca90:	0004      	movs	r4, r0
 800ca92:	0008      	movs	r0, r1
 800ca94:	0011      	movs	r1, r2
 800ca96:	001a      	movs	r2, r3
    switch( region )
 800ca98:	2c05      	cmp	r4, #5
 800ca9a:	d102      	bne.n	800caa2 <RegionComputeRxWindowParameters+0x14>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800ca9c:	9b02      	ldr	r3, [sp, #8]
 800ca9e:	f000 fc59 	bl	800d354 <RegionEU868ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800caa2:	bd10      	pop	{r4, pc}

0800caa4 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800caa4:	b510      	push	{r4, lr}
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 800caa6:	2300      	movs	r3, #0
{
 800caa8:	0004      	movs	r4, r0
 800caaa:	0008      	movs	r0, r1
 800caac:	0011      	movs	r1, r2
    switch( region )
 800caae:	2c05      	cmp	r4, #5
 800cab0:	d102      	bne.n	800cab8 <RegionRxConfig+0x14>
        EU868_RX_CONFIG( );
 800cab2:	f000 fc93 	bl	800d3dc <RegionEU868RxConfig>
 800cab6:	0003      	movs	r3, r0
        }
    }
}
 800cab8:	0018      	movs	r0, r3
 800caba:	bd10      	pop	{r4, pc}

0800cabc <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800cabc:	b570      	push	{r4, r5, r6, lr}
 800cabe:	0005      	movs	r5, r0
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 800cac0:	2400      	movs	r4, #0
{
 800cac2:	0008      	movs	r0, r1
 800cac4:	0011      	movs	r1, r2
 800cac6:	001a      	movs	r2, r3
    switch( region )
 800cac8:	2d05      	cmp	r5, #5
 800caca:	d102      	bne.n	800cad2 <RegionTxConfig+0x16>
        EU868_TX_CONFIG( );
 800cacc:	f000 fcfa 	bl	800d4c4 <RegionEU868TxConfig>
 800cad0:	0004      	movs	r4, r0
        }
    }
}
 800cad2:	0020      	movs	r0, r4
 800cad4:	bd70      	pop	{r4, r5, r6, pc}

0800cad6 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800cad6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cad8:	0005      	movs	r5, r0
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 800cada:	2400      	movs	r4, #0
{
 800cadc:	0008      	movs	r0, r1
 800cade:	0011      	movs	r1, r2
 800cae0:	001a      	movs	r2, r3
    switch( region )
 800cae2:	2d05      	cmp	r5, #5
 800cae4:	d105      	bne.n	800caf2 <RegionLinkAdrReq+0x1c>
        EU868_LINK_ADR_REQ( );
 800cae6:	9b07      	ldr	r3, [sp, #28]
 800cae8:	9300      	str	r3, [sp, #0]
 800caea:	9b06      	ldr	r3, [sp, #24]
 800caec:	f000 fd74 	bl	800d5d8 <RegionEU868LinkAdrReq>
 800caf0:	0004      	movs	r4, r0
        }
    }
}
 800caf2:	0020      	movs	r0, r4
 800caf4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800caf6 <RegionRxParamSetupReq>:
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800caf6:	2300      	movs	r3, #0
{
 800caf8:	b510      	push	{r4, lr}
    switch( region )
 800cafa:	2805      	cmp	r0, #5
 800cafc:	d103      	bne.n	800cb06 <RegionRxParamSetupReq+0x10>
        EU868_RX_PARAM_SETUP_REQ( );
 800cafe:	0008      	movs	r0, r1
 800cb00:	f000 fe06 	bl	800d710 <RegionEU868RxParamSetupReq>
 800cb04:	0003      	movs	r3, r0
        }
    }
}
 800cb06:	0018      	movs	r0, r3
 800cb08:	bd10      	pop	{r4, pc}

0800cb0a <RegionNewChannelReq>:
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 800cb0a:	2300      	movs	r3, #0
{
 800cb0c:	b510      	push	{r4, lr}
    switch( region )
 800cb0e:	2805      	cmp	r0, #5
 800cb10:	d103      	bne.n	800cb1a <RegionNewChannelReq+0x10>
        EU868_NEW_CHANNEL_REQ( );
 800cb12:	0008      	movs	r0, r1
 800cb14:	f000 ff94 	bl	800da40 <RegionEU868NewChannelReq>
 800cb18:	0003      	movs	r3, r0
        }
    }
}
 800cb1a:	0018      	movs	r0, r3
 800cb1c:	bd10      	pop	{r4, pc}

0800cb1e <RegionTxParamSetupReq>:
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800cb1e:	2300      	movs	r3, #0
{
 800cb20:	b510      	push	{r4, lr}
    switch( region )
 800cb22:	2805      	cmp	r0, #5
 800cb24:	d103      	bne.n	800cb2e <RegionTxParamSetupReq+0x10>
        EU868_TX_PARAM_SETUP_REQ( );
 800cb26:	0008      	movs	r0, r1
 800cb28:	f000 fe15 	bl	800d756 <RegionEU868TxParamSetupReq>
 800cb2c:	0003      	movs	r3, r0
        }
    }
}
 800cb2e:	0018      	movs	r0, r3
 800cb30:	bd10      	pop	{r4, pc}

0800cb32 <RegionDlChannelReq>:
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 800cb32:	2300      	movs	r3, #0
{
 800cb34:	b510      	push	{r4, lr}
    switch( region )
 800cb36:	2805      	cmp	r0, #5
 800cb38:	d103      	bne.n	800cb42 <RegionDlChannelReq+0x10>
        EU868_DL_CHANNEL_REQ( );
 800cb3a:	0008      	movs	r0, r1
 800cb3c:	f000 fe0e 	bl	800d75c <RegionEU868DlChannelReq>
 800cb40:	0003      	movs	r3, r0
        }
    }
}
 800cb42:	0018      	movs	r0, r3
 800cb44:	bd10      	pop	{r4, pc}

0800cb46 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800cb46:	b510      	push	{r4, lr}
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 800cb48:	2300      	movs	r3, #0
{
 800cb4a:	0004      	movs	r4, r0
 800cb4c:	0008      	movs	r0, r1
 800cb4e:	0011      	movs	r1, r2
    switch( region )
 800cb50:	2c05      	cmp	r4, #5
 800cb52:	d102      	bne.n	800cb5a <RegionAlternateDr+0x14>
        EU868_ALTERNATE_DR( );
 800cb54:	f000 fe22 	bl	800d79c <RegionEU868AlternateDr>
 800cb58:	0003      	movs	r3, r0
        }
    }
}
 800cb5a:	0018      	movs	r0, r3
 800cb5c:	bd10      	pop	{r4, pc}

0800cb5e <RegionCalcBackOff>:

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
 800cb5e:	b510      	push	{r4, lr}
    switch( region )
 800cb60:	2805      	cmp	r0, #5
 800cb62:	d102      	bne.n	800cb6a <RegionCalcBackOff+0xc>
        AS923_CALC_BACKOFF( );
        AU915_CALC_BACKOFF( );
        CN470_CALC_BACKOFF( );
        CN779_CALC_BACKOFF( );
        EU433_CALC_BACKOFF( );
        EU868_CALC_BACKOFF( );
 800cb64:	0008      	movs	r0, r1
 800cb66:	f000 fe1b 	bl	800d7a0 <RegionEU868CalcBackOff>
        default:
        {
            break;
        }
    }
}
 800cb6a:	bd10      	pop	{r4, pc}

0800cb6c <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800cb6c:	b570      	push	{r4, r5, r6, lr}
 800cb6e:	0005      	movs	r5, r0
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800cb70:	2409      	movs	r4, #9
{
 800cb72:	0008      	movs	r0, r1
 800cb74:	0011      	movs	r1, r2
 800cb76:	001a      	movs	r2, r3
    switch( region )
 800cb78:	2d05      	cmp	r5, #5
 800cb7a:	d103      	bne.n	800cb84 <RegionNextChannel+0x18>
        EU868_NEXT_CHANNEL( );
 800cb7c:	9b04      	ldr	r3, [sp, #16]
 800cb7e:	f000 fe29 	bl	800d7d4 <RegionEU868NextChannel>
 800cb82:	0004      	movs	r4, r0
        }
    }
}
 800cb84:	0020      	movs	r0, r4
 800cb86:	bd70      	pop	{r4, r5, r6, pc}

0800cb88 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800cb88:	b510      	push	{r4, lr}
    switch( region )
 800cb8a:	2805      	cmp	r0, #5
 800cb8c:	d102      	bne.n	800cb94 <RegionSetContinuousWave+0xc>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 800cb8e:	0008      	movs	r0, r1
 800cb90:	f000 ff76 	bl	800da80 <RegionEU868SetContinuousWave>
        default:
        {
            break;
        }
    }
}
 800cb94:	bd10      	pop	{r4, pc}

0800cb96 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800cb96:	b570      	push	{r4, r5, r6, lr}
 800cb98:	0005      	movs	r5, r0
 800cb9a:	0008      	movs	r0, r1
 800cb9c:	0011      	movs	r1, r2
 800cb9e:	001a      	movs	r2, r3
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800cba0:	b2cc      	uxtb	r4, r1
    switch( region )
 800cba2:	2d05      	cmp	r5, #5
 800cba4:	d102      	bne.n	800cbac <RegionApplyDrOffset+0x16>
        EU868_APPLY_DR_OFFSET( );
 800cba6:	f000 ff91 	bl	800dacc <RegionEU868ApplyDrOffset>
 800cbaa:	0004      	movs	r4, r0
        }
    }
}
 800cbac:	0020      	movs	r0, r4
 800cbae:	bd70      	pop	{r4, r5, r6, pc}

0800cbb0 <RegionRxBeaconSetup>:

void RegionRxBeaconSetup( LoRaMacRegion_t region, RxBeaconSetup_t* rxBeaconSetup, uint8_t* outDr )
{
 800cbb0:	0003      	movs	r3, r0
 800cbb2:	b510      	push	{r4, lr}
 800cbb4:	0008      	movs	r0, r1
 800cbb6:	0011      	movs	r1, r2
    switch( region )
 800cbb8:	2b05      	cmp	r3, #5
 800cbba:	d101      	bne.n	800cbc0 <RegionRxBeaconSetup+0x10>
        AS923_RX_BEACON_SETUP( );
        AU915_RX_BEACON_SETUP( );
        CN470_RX_BEACON_SETUP( );
        CN779_RX_BEACON_SETUP( );
        EU433_RX_BEACON_SETUP( );
        EU868_RX_BEACON_SETUP( );
 800cbbc:	f000 ff8e 	bl	800dadc <RegionEU868RxBeaconSetup>
        default:
        {
            break;
        }
    }
}
 800cbc0:	bd10      	pop	{r4, pc}
	...

0800cbc4 <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( TimerTime_t elapsedTime )
{
    uint16_t dutyCycle = 0;

    if( elapsedTime < 3600000 )
 800cbc4:	4b07      	ldr	r3, [pc, #28]	; (800cbe4 <RegionCommonGetJoinDc+0x20>)
{
 800cbc6:	0002      	movs	r2, r0
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 800cbc8:	2064      	movs	r0, #100	; 0x64
    if( elapsedTime < 3600000 )
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d908      	bls.n	800cbe0 <RegionCommonGetJoinDc+0x1c>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	4905      	ldr	r1, [pc, #20]	; (800cbe8 <RegionCommonGetJoinDc+0x24>)
 800cbd2:	4291      	cmp	r1, r2
 800cbd4:	415b      	adcs	r3, r3
 800cbd6:	4258      	negs	r0, r3
 800cbd8:	4b04      	ldr	r3, [pc, #16]	; (800cbec <RegionCommonGetJoinDc+0x28>)
 800cbda:	4018      	ands	r0, r3
 800cbdc:	4b04      	ldr	r3, [pc, #16]	; (800cbf0 <RegionCommonGetJoinDc+0x2c>)
 800cbde:	18c0      	adds	r0, r0, r3
    }
    return dutyCycle;
}
 800cbe0:	4770      	bx	lr
 800cbe2:	46c0      	nop			; (mov r8, r8)
 800cbe4:	0036ee7f 	.word	0x0036ee7f
 800cbe8:	025c3f7f 	.word	0x025c3f7f
 800cbec:	ffffdcd8 	.word	0xffffdcd8
 800cbf0:	00002710 	.word	0x00002710

0800cbf4 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 800cbf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbf6:	b085      	sub	sp, #20
 800cbf8:	9103      	str	r1, [sp, #12]
 800cbfa:	a90a      	add	r1, sp, #40	; 0x28
 800cbfc:	7809      	ldrb	r1, [r1, #0]
 800cbfe:	9002      	str	r0, [sp, #8]
 800cc00:	b249      	sxtb	r1, r1
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
    {
        return false;
 800cc02:	2000      	movs	r0, #0
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800cc04:	429a      	cmp	r2, r3
 800cc06:	db2d      	blt.n	800cc64 <RegionCommonChanVerifyDr+0x70>
 800cc08:	428a      	cmp	r2, r1
 800cc0a:	dc2b      	bgt.n	800cc64 <RegionCommonChanVerifyDr+0x70>
 800cc0c:	260c      	movs	r6, #12
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800cc0e:	270f      	movs	r7, #15
 800cc10:	e022      	b.n	800cc58 <RegionCommonChanVerifyDr+0x64>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800cc12:	9c03      	ldr	r4, [sp, #12]
 800cc14:	0041      	lsls	r1, r0, #1
 800cc16:	5b09      	ldrh	r1, [r1, r4]
 800cc18:	4373      	muls	r3, r6
 800cc1a:	9101      	str	r1, [sp, #4]
 800cc1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc1e:	2400      	movs	r4, #0
 800cc20:	18cb      	adds	r3, r1, r3
 800cc22:	2101      	movs	r1, #1
 800cc24:	468c      	mov	ip, r1
 800cc26:	9901      	ldr	r1, [sp, #4]
 800cc28:	4665      	mov	r5, ip
 800cc2a:	4121      	asrs	r1, r4
 800cc2c:	4229      	tst	r1, r5
 800cc2e:	d00e      	beq.n	800cc4e <RegionCommonChanVerifyDr+0x5a>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800cc30:	0035      	movs	r5, r6
 800cc32:	4365      	muls	r5, r4
 800cc34:	18ed      	adds	r5, r5, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800cc36:	7a29      	ldrb	r1, [r5, #8]
 800cc38:	7a2d      	ldrb	r5, [r5, #8]
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800cc3a:	0709      	lsls	r1, r1, #28
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800cc3c:	b26d      	sxtb	r5, r5
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800cc3e:	1709      	asrs	r1, r1, #28
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800cc40:	112d      	asrs	r5, r5, #4
    if( ( value >= min ) && ( value <= max ) )
 800cc42:	4039      	ands	r1, r7
 800cc44:	428a      	cmp	r2, r1
 800cc46:	db02      	blt.n	800cc4e <RegionCommonChanVerifyDr+0x5a>
 800cc48:	403d      	ands	r5, r7
 800cc4a:	42aa      	cmp	r2, r5
 800cc4c:	dd0c      	ble.n	800cc68 <RegionCommonChanVerifyDr+0x74>
        for( uint8_t j = 0; j < 16; j++ )
 800cc4e:	3401      	adds	r4, #1
 800cc50:	2c10      	cmp	r4, #16
 800cc52:	d1e8      	bne.n	800cc26 <RegionCommonChanVerifyDr+0x32>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800cc54:	3001      	adds	r0, #1
 800cc56:	b2c0      	uxtb	r0, r0
 800cc58:	0103      	lsls	r3, r0, #4
 800cc5a:	9902      	ldr	r1, [sp, #8]
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	4299      	cmp	r1, r3
 800cc60:	d8d7      	bhi.n	800cc12 <RegionCommonChanVerifyDr+0x1e>
        return false;
 800cc62:	2000      	movs	r0, #0
}
 800cc64:	b005      	add	sp, #20
 800cc66:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    return true;
 800cc68:	2001      	movs	r0, #1
 800cc6a:	e7fb      	b.n	800cc64 <RegionCommonChanVerifyDr+0x70>

0800cc6c <RegionCommonValueInRange>:
{
 800cc6c:	0003      	movs	r3, r0
    {
        return 1;
    }
    return 0;
 800cc6e:	2000      	movs	r0, #0
    if( ( value >= min ) && ( value <= max ) )
 800cc70:	428b      	cmp	r3, r1
 800cc72:	db04      	blt.n	800cc7e <RegionCommonValueInRange+0x12>
 800cc74:	0fd8      	lsrs	r0, r3, #31
 800cc76:	17d1      	asrs	r1, r2, #31
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	4148      	adcs	r0, r1
        return 1;
 800cc7c:	b2c0      	uxtb	r0, r0
}
 800cc7e:	4770      	bx	lr

0800cc80 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 800cc80:	b530      	push	{r4, r5, lr}
    uint8_t index = id / 16;
 800cc82:	090b      	lsrs	r3, r1, #4
{
 800cc84:	0004      	movs	r4, r0

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800cc86:	0915      	lsrs	r5, r2, #4
    {
        return false;
 800cc88:	2000      	movs	r0, #0
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800cc8a:	429d      	cmp	r5, r3
 800cc8c:	d30b      	bcc.n	800cca6 <RegionCommonChanDisable+0x26>
 800cc8e:	4291      	cmp	r1, r2
 800cc90:	d209      	bcs.n	800cca6 <RegionCommonChanDisable+0x26>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800cc92:	220f      	movs	r2, #15
 800cc94:	3001      	adds	r0, #1
 800cc96:	4011      	ands	r1, r2
 800cc98:	0002      	movs	r2, r0
 800cc9a:	408a      	lsls	r2, r1
 800cc9c:	0011      	movs	r1, r2
 800cc9e:	005b      	lsls	r3, r3, #1
 800cca0:	5ae2      	ldrh	r2, [r4, r3]
 800cca2:	438a      	bics	r2, r1
 800cca4:	52e2      	strh	r2, [r4, r3]

    return true;
}
 800cca6:	bd30      	pop	{r4, r5, pc}

0800cca8 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800cca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ccaa:	1e03      	subs	r3, r0, #0
 800ccac:	9201      	str	r2, [sp, #4]
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800ccae:	d005      	beq.n	800ccbc <RegionCommonCountChannels+0x14>
 800ccb0:	0048      	lsls	r0, r1, #1
 800ccb2:	181b      	adds	r3, r3, r0
    uint8_t nbChannels = 0;
 800ccb4:	2000      	movs	r0, #0
    {
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800ccb6:	9a01      	ldr	r2, [sp, #4]
 800ccb8:	4291      	cmp	r1, r2
 800ccba:	d300      	bcc.n	800ccbe <RegionCommonCountChannels+0x16>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
    }

    return nbChannels;
}
 800ccbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 800ccbe:	2400      	movs	r4, #0
    uint8_t nbActiveBits = 0;
 800ccc0:	0022      	movs	r2, r4
        nbChannels += CountChannels( channelsMask[i], 16 );
 800ccc2:	881f      	ldrh	r7, [r3, #0]
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800ccc4:	2501      	movs	r5, #1
 800ccc6:	40a5      	lsls	r5, r4
 800ccc8:	002e      	movs	r6, r5
 800ccca:	403e      	ands	r6, r7
 800cccc:	42b5      	cmp	r5, r6
 800ccce:	d101      	bne.n	800ccd4 <RegionCommonCountChannels+0x2c>
            nbActiveBits++;
 800ccd0:	3201      	adds	r2, #1
 800ccd2:	b2d2      	uxtb	r2, r2
    for( uint8_t j = 0; j < nbBits; j++ )
 800ccd4:	3401      	adds	r4, #1
 800ccd6:	2c10      	cmp	r4, #16
 800ccd8:	d1f4      	bne.n	800ccc4 <RegionCommonCountChannels+0x1c>
        nbChannels += CountChannels( channelsMask[i], 16 );
 800ccda:	1880      	adds	r0, r0, r2
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800ccdc:	3101      	adds	r1, #1
        nbChannels += CountChannels( channelsMask[i], 16 );
 800ccde:	b2c0      	uxtb	r0, r0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800cce0:	b2c9      	uxtb	r1, r1
 800cce2:	3302      	adds	r3, #2
 800cce4:	e7e7      	b.n	800ccb6 <RegionCommonCountChannels+0xe>

0800cce6 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 800cce6:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800cce8:	2800      	cmp	r0, #0
 800ccea:	d005      	beq.n	800ccf8 <RegionCommonChanMaskCopy+0x12>
 800ccec:	2900      	cmp	r1, #0
 800ccee:	d003      	beq.n	800ccf8 <RegionCommonChanMaskCopy+0x12>
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	0052      	lsls	r2, r2, #1
    {
        for( uint8_t i = 0; i < len; i++ )
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	d100      	bne.n	800ccfa <RegionCommonChanMaskCopy+0x14>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
        }
    }
}
 800ccf8:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 800ccfa:	5acc      	ldrh	r4, [r1, r3]
 800ccfc:	52c4      	strh	r4, [r0, r3]
        for( uint8_t i = 0; i < len; i++ )
 800ccfe:	3302      	adds	r3, #2
 800cd00:	e7f8      	b.n	800ccf4 <RegionCommonChanMaskCopy+0xe>

0800cd02 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
    if( joined == true )
    {
        band->LastTxDoneTime = lastTxDone;
 800cd02:	608a      	str	r2, [r1, #8]
    if( joined == true )
 800cd04:	2800      	cmp	r0, #0
 800cd06:	d000      	beq.n	800cd0a <RegionCommonSetBandTxDone+0x8>
    else
    {
        band->LastTxDoneTime = lastTxDone;
        band->LastJoinTxDoneTime = lastTxDone;
    }
}
 800cd08:	4770      	bx	lr
        band->LastJoinTxDoneTime = lastTxDone;
 800cd0a:	604a      	str	r2, [r1, #4]
}
 800cd0c:	e7fc      	b.n	800cd08 <RegionCommonSetBandTxDone+0x6>

0800cd0e <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
 800cd0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    TimerTime_t nextTxDelay = TIMERTIME_T_MAX;
 800cd10:	2501      	movs	r5, #1
{
 800cd12:	000e      	movs	r6, r1
 800cd14:	0014      	movs	r4, r2
 800cd16:	011b      	lsls	r3, r3, #4
 800cd18:	18d3      	adds	r3, r2, r3
 800cd1a:	9001      	str	r0, [sp, #4]
 800cd1c:	9300      	str	r3, [sp, #0]
    TimerTime_t nextTxDelay = TIMERTIME_T_MAX;
 800cd1e:	426d      	negs	r5, r5

    // Update bands Time OFF
    for( uint8_t i = 0; i < nbBands; i++ )
 800cd20:	9b00      	ldr	r3, [sp, #0]
 800cd22:	42a3      	cmp	r3, r4
 800cd24:	d104      	bne.n	800cd30 <RegionCommonUpdateBandTimeOff+0x22>
                bands[i].TimeOff = 0;
            }
        }
    }

    return ( nextTxDelay == TIMERTIME_T_MAX ) ? 0 : nextTxDelay;
 800cd26:	1c6b      	adds	r3, r5, #1
 800cd28:	d100      	bne.n	800cd2c <RegionCommonUpdateBandTimeOff+0x1e>
 800cd2a:	2500      	movs	r5, #0
}
 800cd2c:	0028      	movs	r0, r5
 800cd2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( joined == false )
 800cd30:	9b01      	ldr	r3, [sp, #4]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d11c      	bne.n	800cd70 <RegionCommonUpdateBandTimeOff+0x62>
            TimerTime_t elapsedJoin = TimerGetElapsedTime( bands[i].LastJoinTxDoneTime );
 800cd36:	6860      	ldr	r0, [r4, #4]
 800cd38:	f001 fd8f 	bl	800e85a <TimerGetElapsedTime>
 800cd3c:	0007      	movs	r7, r0
            TimerTime_t elapsedTx = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 800cd3e:	68a0      	ldr	r0, [r4, #8]
 800cd40:	f001 fd8b 	bl	800e85a <TimerGetElapsedTime>
            TimerTime_t txDoneTime =  MAX( elapsedJoin,
 800cd44:	0033      	movs	r3, r6
 800cd46:	1e5a      	subs	r2, r3, #1
 800cd48:	4193      	sbcs	r3, r2
 800cd4a:	425b      	negs	r3, r3
 800cd4c:	4018      	ands	r0, r3
 800cd4e:	42b8      	cmp	r0, r7
 800cd50:	d200      	bcs.n	800cd54 <RegionCommonUpdateBandTimeOff+0x46>
 800cd52:	0038      	movs	r0, r7
                if( bands[i].TimeOff <= elapsed )
 800cd54:	68e3      	ldr	r3, [r4, #12]
 800cd56:	4283      	cmp	r3, r0
 800cd58:	d801      	bhi.n	800cd5e <RegionCommonUpdateBandTimeOff+0x50>
                    bands[i].TimeOff = 0;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	60e3      	str	r3, [r4, #12]
                if( bands[i].TimeOff != 0 )
 800cd5e:	68e3      	ldr	r3, [r4, #12]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d003      	beq.n	800cd6c <RegionCommonUpdateBandTimeOff+0x5e>
                    nextTxDelay = MIN( bands[i].TimeOff - elapsed, nextTxDelay );
 800cd64:	1a18      	subs	r0, r3, r0
 800cd66:	4285      	cmp	r5, r0
 800cd68:	d900      	bls.n	800cd6c <RegionCommonUpdateBandTimeOff+0x5e>
 800cd6a:	0005      	movs	r5, r0
    for( uint8_t i = 0; i < nbBands; i++ )
 800cd6c:	3410      	adds	r4, #16
 800cd6e:	e7d7      	b.n	800cd20 <RegionCommonUpdateBandTimeOff+0x12>
            if( dutyCycle == true )
 800cd70:	2e00      	cmp	r6, #0
 800cd72:	d003      	beq.n	800cd7c <RegionCommonUpdateBandTimeOff+0x6e>
                TimerTime_t elapsed = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 800cd74:	68a0      	ldr	r0, [r4, #8]
 800cd76:	f001 fd70 	bl	800e85a <TimerGetElapsedTime>
 800cd7a:	e7eb      	b.n	800cd54 <RegionCommonUpdateBandTimeOff+0x46>
                nextTxDelay = 0;
 800cd7c:	0035      	movs	r5, r6
                bands[i].TimeOff = 0;
 800cd7e:	60e6      	str	r6, [r4, #12]
 800cd80:	e7f4      	b.n	800cd6c <RegionCommonUpdateBandTimeOff+0x5e>

0800cd82 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 800cd82:	b510      	push	{r4, lr}
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800cd84:	7802      	ldrb	r2, [r0, #0]
{
 800cd86:	0003      	movs	r3, r0
    uint8_t retIndex = 0;
 800cd88:	2000      	movs	r0, #0
    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800cd8a:	2a03      	cmp	r2, #3
 800cd8c:	d113      	bne.n	800cdb6 <RegionCommonParseLinkAdrReq+0x34>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 800cd8e:	785a      	ldrb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800cd90:	300f      	adds	r0, #15
 800cd92:	0014      	movs	r4, r2
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800cd94:	0912      	lsrs	r2, r2, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800cd96:	4004      	ands	r4, r0
 800cd98:	708c      	strb	r4, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800cd9a:	704a      	strb	r2, [r1, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800cd9c:	789a      	ldrb	r2, [r3, #2]
 800cd9e:	808a      	strh	r2, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800cda0:	78dc      	ldrb	r4, [r3, #3]
 800cda2:	0224      	lsls	r4, r4, #8
 800cda4:	4322      	orrs	r2, r4
 800cda6:	808a      	strh	r2, [r1, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 800cda8:	791b      	ldrb	r3, [r3, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800cdaa:	065a      	lsls	r2, r3, #25
 800cdac:	0f52      	lsrs	r2, r2, #29
        linkAdrParams->NbRep &= 0x0F;
 800cdae:	4003      	ands	r3, r0
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800cdb0:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800cdb2:	700b      	strb	r3, [r1, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 800cdb4:	380a      	subs	r0, #10
    }
    return retIndex;
}
 800cdb6:	bd10      	pop	{r4, pc}

0800cdb8 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800cdb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdba:	b087      	sub	sp, #28
 800cdbc:	9305      	str	r3, [sp, #20]
    uint8_t status = verifyParams->Status;
    int8_t datarate = verifyParams->Datarate;
 800cdbe:	2306      	movs	r3, #6
    int8_t txPower = verifyParams->TxPower;
 800cdc0:	2707      	movs	r7, #7
{
 800cdc2:	9103      	str	r1, [sp, #12]
 800cdc4:	9204      	str	r2, [sp, #16]
    int8_t datarate = verifyParams->Datarate;
 800cdc6:	56c3      	ldrsb	r3, [r0, r3]
    uint8_t status = verifyParams->Status;
 800cdc8:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800cdca:	9302      	str	r3, [sp, #8]
    int8_t nbRepetitions = verifyParams->NbRep;

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800cdcc:	7943      	ldrb	r3, [r0, #5]
{
 800cdce:	0004      	movs	r4, r0
    int8_t txPower = verifyParams->TxPower;
 800cdd0:	57c7      	ldrsb	r7, [r0, r7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800cdd2:	7a06      	ldrb	r6, [r0, #8]
    if( verifyParams->AdrEnabled == false )
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d026      	beq.n	800ce26 <RegionCommonLinkAdrReqVerifyParams+0x6e>
    int8_t nbRepetitions = verifyParams->NbRep;
 800cdd8:	b276      	sxtb	r6, r6
        nbRepetitions = verifyParams->CurrentNbRep;
        datarate =  verifyParams->CurrentDatarate;
        txPower =  verifyParams->CurrentTxPower;
    }

    if( status != 0 )
 800cdda:	2d00      	cmp	r5, #0
 800cddc:	d019      	beq.n	800ce12 <RegionCommonLinkAdrReqVerifyParams+0x5a>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800cdde:	69a2      	ldr	r2, [r4, #24]
 800cde0:	2314      	movs	r3, #20
 800cde2:	9201      	str	r2, [sp, #4]
 800cde4:	2215      	movs	r2, #21
 800cde6:	56a2      	ldrsb	r2, [r4, r2]
 800cde8:	56e3      	ldrsb	r3, [r4, r3]
 800cdea:	9200      	str	r2, [sp, #0]
 800cdec:	7b20      	ldrb	r0, [r4, #12]
 800cdee:	9a02      	ldr	r2, [sp, #8]
 800cdf0:	6921      	ldr	r1, [r4, #16]
 800cdf2:	f7ff feff 	bl	800cbf4 <RegionCommonChanVerifyDr>
 800cdf6:	2800      	cmp	r0, #0
 800cdf8:	d101      	bne.n	800cdfe <RegionCommonLinkAdrReqVerifyParams+0x46>
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
        {
            status &= 0xFD; // Datarate KO
 800cdfa:	2302      	movs	r3, #2
 800cdfc:	439d      	bics	r5, r3
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800cdfe:	231d      	movs	r3, #29
 800ce00:	221c      	movs	r2, #28
 800ce02:	56e3      	ldrsb	r3, [r4, r3]
 800ce04:	56a2      	ldrsb	r2, [r4, r2]
    if( ( value >= min ) && ( value <= max ) )
 800ce06:	42bb      	cmp	r3, r7
 800ce08:	dc15      	bgt.n	800ce36 <RegionCommonLinkAdrReqVerifyParams+0x7e>
 800ce0a:	42ba      	cmp	r2, r7
 800ce0c:	da14      	bge.n	800ce38 <RegionCommonLinkAdrReqVerifyParams+0x80>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800ce0e:	2304      	movs	r3, #4
 800ce10:	439d      	bics	r5, r3
    *dr = datarate;
    *txPow = txPower;
    *nbRep = nbRepetitions;

    return status;
}
 800ce12:	0028      	movs	r0, r5
    *dr = datarate;
 800ce14:	9b03      	ldr	r3, [sp, #12]
 800ce16:	9a02      	ldr	r2, [sp, #8]
 800ce18:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 800ce1a:	9b04      	ldr	r3, [sp, #16]
 800ce1c:	701f      	strb	r7, [r3, #0]
    *nbRep = nbRepetitions;
 800ce1e:	9b05      	ldr	r3, [sp, #20]
 800ce20:	701e      	strb	r6, [r3, #0]
}
 800ce22:	b007      	add	sp, #28
 800ce24:	bdf0      	pop	{r4, r5, r6, r7, pc}
        datarate =  verifyParams->CurrentDatarate;
 800ce26:	2309      	movs	r3, #9
        nbRepetitions = verifyParams->CurrentNbRep;
 800ce28:	260b      	movs	r6, #11
        txPower =  verifyParams->CurrentTxPower;
 800ce2a:	270a      	movs	r7, #10
        datarate =  verifyParams->CurrentDatarate;
 800ce2c:	56c3      	ldrsb	r3, [r0, r3]
        nbRepetitions = verifyParams->CurrentNbRep;
 800ce2e:	5786      	ldrsb	r6, [r0, r6]
        datarate =  verifyParams->CurrentDatarate;
 800ce30:	9302      	str	r3, [sp, #8]
        txPower =  verifyParams->CurrentTxPower;
 800ce32:	57c7      	ldrsb	r7, [r0, r7]
 800ce34:	e7d1      	b.n	800cdda <RegionCommonLinkAdrReqVerifyParams+0x22>
 800ce36:	001f      	movs	r7, r3
    if( status == 0x07 )
 800ce38:	2d07      	cmp	r5, #7
 800ce3a:	d1ea      	bne.n	800ce12 <RegionCommonLinkAdrReqVerifyParams+0x5a>
        if( nbRepetitions == 0 )
 800ce3c:	2e00      	cmp	r6, #0
 800ce3e:	d1e8      	bne.n	800ce12 <RegionCommonLinkAdrReqVerifyParams+0x5a>
            nbRepetitions = 1;
 800ce40:	3601      	adds	r6, #1
 800ce42:	e7e6      	b.n	800ce12 <RegionCommonLinkAdrReqVerifyParams+0x5a>

0800ce44 <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 800ce44:	2301      	movs	r3, #1
 800ce46:	4083      	lsls	r3, r0
{
 800ce48:	b570      	push	{r4, r5, r6, lr}
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 800ce4a:	0018      	movs	r0, r3
{
 800ce4c:	000e      	movs	r6, r1
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 800ce4e:	f7f6 f8d1 	bl	8002ff4 <__aeabi_i2d>
 800ce52:	0004      	movs	r4, r0
 800ce54:	0030      	movs	r0, r6
 800ce56:	000d      	movs	r5, r1
 800ce58:	f7f6 f8fc 	bl	8003054 <__aeabi_ui2d>
 800ce5c:	0002      	movs	r2, r0
 800ce5e:	000b      	movs	r3, r1
 800ce60:	0020      	movs	r0, r4
 800ce62:	0029      	movs	r1, r5
 800ce64:	f7f4 fe8c 	bl	8001b80 <__aeabi_ddiv>
 800ce68:	2200      	movs	r2, #0
 800ce6a:	4b02      	ldr	r3, [pc, #8]	; (800ce74 <RegionCommonComputeSymbolTimeLoRa+0x30>)
 800ce6c:	f7f5 fa8e 	bl	800238c <__aeabi_dmul>
}
 800ce70:	bd70      	pop	{r4, r5, r6, pc}
 800ce72:	46c0      	nop			; (mov r8, r8)
 800ce74:	408f4000 	.word	0x408f4000

0800ce78 <RegionCommonComputeSymbolTimeFsk>:

double RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 800ce78:	b510      	push	{r4, lr}
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
 800ce7a:	f7f6 f8eb 	bl	8003054 <__aeabi_ui2d>
 800ce7e:	0002      	movs	r2, r0
 800ce80:	000b      	movs	r3, r1
 800ce82:	2000      	movs	r0, #0
 800ce84:	4901      	ldr	r1, [pc, #4]	; (800ce8c <RegionCommonComputeSymbolTimeFsk+0x14>)
 800ce86:	f7f4 fe7b 	bl	8001b80 <__aeabi_ddiv>
}
 800ce8a:	bd10      	pop	{r4, pc}
 800ce8c:	40200000 	.word	0x40200000

0800ce90 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 800ce90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce92:	0004      	movs	r4, r0
 800ce94:	000d      	movs	r5, r1
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 800ce96:	1f10      	subs	r0, r2, #4
{
 800ce98:	b085      	sub	sp, #20
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 800ce9a:	0040      	lsls	r0, r0, #1
{
 800ce9c:	9200      	str	r2, [sp, #0]
 800ce9e:	9303      	str	r3, [sp, #12]
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 800cea0:	f7f6 f8a8 	bl	8002ff4 <__aeabi_i2d>
 800cea4:	0022      	movs	r2, r4
 800cea6:	002b      	movs	r3, r5
 800cea8:	f7f5 fa70 	bl	800238c <__aeabi_dmul>
 800ceac:	9b03      	ldr	r3, [sp, #12]
 800ceae:	0006      	movs	r6, r0
 800ceb0:	0058      	lsls	r0, r3, #1
 800ceb2:	000f      	movs	r7, r1
 800ceb4:	f7f6 f8ce 	bl	8003054 <__aeabi_ui2d>
 800ceb8:	0002      	movs	r2, r0
 800ceba:	000b      	movs	r3, r1
 800cebc:	0030      	movs	r0, r6
 800cebe:	0039      	movs	r1, r7
 800cec0:	f7f4 faf4 	bl	80014ac <__aeabi_dadd>
 800cec4:	002b      	movs	r3, r5
 800cec6:	0022      	movs	r2, r4
 800cec8:	f7f4 fe5a 	bl	8001b80 <__aeabi_ddiv>
 800cecc:	f003 faba 	bl	8010444 <ceil>
 800ced0:	f7f3 fb5e 	bl	8000590 <__aeabi_d2uiz>
 800ced4:	9b00      	ldr	r3, [sp, #0]
 800ced6:	0006      	movs	r6, r0
 800ced8:	4298      	cmp	r0, r3
 800ceda:	d200      	bcs.n	800cede <RegionCommonComputeRxWindowParameters+0x4e>
 800cedc:	001e      	movs	r6, r3
 800cede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 800cee0:	2200      	movs	r2, #0
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 800cee2:	601e      	str	r6, [r3, #0]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 800cee4:	0020      	movs	r0, r4
 800cee6:	4b15      	ldr	r3, [pc, #84]	; (800cf3c <RegionCommonComputeRxWindowParameters+0xac>)
 800cee8:	0029      	movs	r1, r5
 800ceea:	f7f5 fa4f 	bl	800238c <__aeabi_dmul>
 800ceee:	9000      	str	r0, [sp, #0]
 800cef0:	9101      	str	r1, [sp, #4]
 800cef2:	0030      	movs	r0, r6
 800cef4:	f7f6 f8ae 	bl	8003054 <__aeabi_ui2d>
 800cef8:	0022      	movs	r2, r4
 800cefa:	002b      	movs	r3, r5
 800cefc:	f7f5 fa46 	bl	800238c <__aeabi_dmul>
 800cf00:	2200      	movs	r2, #0
 800cf02:	4b0f      	ldr	r3, [pc, #60]	; (800cf40 <RegionCommonComputeRxWindowParameters+0xb0>)
 800cf04:	f7f5 fa42 	bl	800238c <__aeabi_dmul>
 800cf08:	0002      	movs	r2, r0
 800cf0a:	000b      	movs	r3, r1
 800cf0c:	9800      	ldr	r0, [sp, #0]
 800cf0e:	9901      	ldr	r1, [sp, #4]
 800cf10:	f7f5 fca8 	bl	8002864 <__aeabi_dsub>
 800cf14:	0004      	movs	r4, r0
 800cf16:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cf18:	000d      	movs	r5, r1
 800cf1a:	f7f6 f89b 	bl	8003054 <__aeabi_ui2d>
 800cf1e:	0002      	movs	r2, r0
 800cf20:	000b      	movs	r3, r1
 800cf22:	0020      	movs	r0, r4
 800cf24:	0029      	movs	r1, r5
 800cf26:	f7f5 fc9d 	bl	8002864 <__aeabi_dsub>
 800cf2a:	f003 fa8b 	bl	8010444 <ceil>
 800cf2e:	f7f6 f82b 	bl	8002f88 <__aeabi_d2iz>
 800cf32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf34:	6018      	str	r0, [r3, #0]
}
 800cf36:	b005      	add	sp, #20
 800cf38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf3a:	46c0      	nop			; (mov r8, r8)
 800cf3c:	40100000 	.word	0x40100000
 800cf40:	3fe00000 	.word	0x3fe00000

0800cf44 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800cf44:	b570      	push	{r4, r5, r6, lr}
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800cf46:	0040      	lsls	r0, r0, #1
{
 800cf48:	1c14      	adds	r4, r2, #0
 800cf4a:	1c0d      	adds	r5, r1, #0
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800cf4c:	f7f4 fa72 	bl	8001434 <__aeabi_ui2f>
 800cf50:	1c01      	adds	r1, r0, #0
 800cf52:	1c28      	adds	r0, r5, #0
 800cf54:	f7f4 f886 	bl	8001064 <__aeabi_fsub>
 800cf58:	1c21      	adds	r1, r4, #0
 800cf5a:	f7f4 f883 	bl	8001064 <__aeabi_fsub>
 800cf5e:	f7f6 f89f 	bl	80030a0 <__aeabi_f2d>
 800cf62:	f003 faf9 	bl	8010558 <floor>
 800cf66:	f7f6 f80f 	bl	8002f88 <__aeabi_d2iz>

    return phyTxPower;
 800cf6a:	b240      	sxtb	r0, r0
}
 800cf6c:	bd70      	pop	{r4, r5, r6, pc}

0800cf6e <RegionCommonCalcBackOff>:

void RegionCommonCalcBackOff( RegionCommonCalcBackOffParams_t* calcBackOffParams )
{
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 800cf6e:	230c      	movs	r3, #12
{
 800cf70:	b570      	push	{r4, r5, r6, lr}
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 800cf72:	7ac2      	ldrb	r2, [r0, #11]
{
 800cf74:	0004      	movs	r4, r0
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 800cf76:	4353      	muls	r3, r2
 800cf78:	6802      	ldr	r2, [r0, #0]
 800cf7a:	18d3      	adds	r3, r2, r3
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
 800cf7c:	7a5b      	ldrb	r3, [r3, #9]
 800cf7e:	6842      	ldr	r2, [r0, #4]
 800cf80:	011b      	lsls	r3, r3, #4
 800cf82:	5ad6      	ldrh	r6, [r2, r3]
 800cf84:	18d5      	adds	r5, r2, r3
    uint16_t joinDutyCycle = 0;

    // Reset time-off to initial value.
    calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 800cf86:	2300      	movs	r3, #0
 800cf88:	60eb      	str	r3, [r5, #12]

    if( calcBackOffParams->Joined == false )
 800cf8a:	7a42      	ldrb	r2, [r0, #9]
 800cf8c:	7a83      	ldrb	r3, [r0, #10]
 800cf8e:	2a00      	cmp	r2, #0
 800cf90:	d111      	bne.n	800cfb6 <RegionCommonCalcBackOff+0x48>
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOffParams->ElapsedTime );
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
        // Reset the timeoff if the last frame was not a join request and when the duty cycle is not enabled
        if( ( calcBackOffParams->DutyCycleEnabled == false ) && ( calcBackOffParams->LastTxIsJoinRequest == false ) )
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d102      	bne.n	800cf9c <RegionCommonCalcBackOff+0x2e>
 800cf96:	7a03      	ldrb	r3, [r0, #8]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d00b      	beq.n	800cfb4 <RegionCommonCalcBackOff+0x46>
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOffParams->ElapsedTime );
 800cf9c:	68e0      	ldr	r0, [r4, #12]
 800cf9e:	f7ff fe11 	bl	800cbc4 <RegionCommonGetJoinDc>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800cfa2:	1c33      	adds	r3, r6, #0
 800cfa4:	4286      	cmp	r6, r0
 800cfa6:	d200      	bcs.n	800cfaa <RegionCommonCalcBackOff+0x3c>
 800cfa8:	1c03      	adds	r3, r0, #0
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
        else
        {
            // Apply band time-off.
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 800cfaa:	6922      	ldr	r2, [r4, #16]
 800cfac:	b29b      	uxth	r3, r3
 800cfae:	3b01      	subs	r3, #1
 800cfb0:	4353      	muls	r3, r2
 800cfb2:	60eb      	str	r3, [r5, #12]
        else
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
    }
}
 800cfb4:	bd70      	pop	{r4, r5, r6, pc}
        if( calcBackOffParams->DutyCycleEnabled == true )
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d0fc      	beq.n	800cfb4 <RegionCommonCalcBackOff+0x46>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 800cfba:	6903      	ldr	r3, [r0, #16]
 800cfbc:	3e01      	subs	r6, #1
 800cfbe:	435e      	muls	r6, r3
 800cfc0:	60ee      	str	r6, [r5, #12]
}
 800cfc2:	e7f7      	b.n	800cfb4 <RegionCommonCalcBackOff+0x46>

0800cfc4 <RegionCommonRxBeaconSetup>:


void RegionCommonRxBeaconSetup( RegionCommonRxBeaconSetupParams_t* rxBeaconSetupParams )
{
 800cfc4:	b570      	push	{r4, r5, r6, lr}
 800cfc6:	0004      	movs	r4, r0
    bool rxContinuous = true;
    uint8_t datarate;

    // Set the radio into sleep mode
    Radio.Sleep( );
 800cfc8:	4d14      	ldr	r5, [pc, #80]	; (800d01c <RegionCommonRxBeaconSetup+0x58>)
{
 800cfca:	b08a      	sub	sp, #40	; 0x28
    Radio.Sleep( );
 800cfcc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800cfce:	4798      	blx	r3

    // Setup frequency and payload length
    Radio.SetChannel( rxBeaconSetupParams->Frequency );
 800cfd0:	6860      	ldr	r0, [r4, #4]
 800cfd2:	696b      	ldr	r3, [r5, #20]
 800cfd4:	4798      	blx	r3
    Radio.SetMaxPayloadLength( MODEM_LORA, rxBeaconSetupParams->BeaconSize );
 800cfd6:	2001      	movs	r0, #1
 800cfd8:	7a21      	ldrb	r1, [r4, #8]
 800cfda:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800cfdc:	4798      	blx	r3
    {
        rxContinuous = false;
    }

    // Get region specific datarate
    datarate = rxBeaconSetupParams->Datarates[rxBeaconSetupParams->BeaconDatarate];
 800cfde:	7a63      	ldrb	r3, [r4, #9]

    // Setup radio
    Radio.SetRxConfig( MODEM_LORA, rxBeaconSetupParams->BeaconChannelBW, datarate,
 800cfe0:	6822      	ldr	r2, [r4, #0]
 800cfe2:	2600      	movs	r6, #0
 800cfe4:	5cd2      	ldrb	r2, [r2, r3]
    if( rxBeaconSetupParams->RxTime != 0 )
 800cfe6:	68e3      	ldr	r3, [r4, #12]
    Radio.SetRxConfig( MODEM_LORA, rxBeaconSetupParams->BeaconChannelBW, datarate,
 800cfe8:	7aa1      	ldrb	r1, [r4, #10]
    if( rxBeaconSetupParams->RxTime != 0 )
 800cfea:	4258      	negs	r0, r3
 800cfec:	4143      	adcs	r3, r0
    Radio.SetRxConfig( MODEM_LORA, rxBeaconSetupParams->BeaconChannelBW, datarate,
 800cfee:	9309      	str	r3, [sp, #36]	; 0x24
 800cff0:	7a23      	ldrb	r3, [r4, #8]
 800cff2:	2001      	movs	r0, #1
 800cff4:	9304      	str	r3, [sp, #16]
 800cff6:	8a23      	ldrh	r3, [r4, #16]
 800cff8:	9608      	str	r6, [sp, #32]
 800cffa:	9302      	str	r3, [sp, #8]
 800cffc:	230a      	movs	r3, #10
 800cffe:	9607      	str	r6, [sp, #28]
 800d000:	9606      	str	r6, [sp, #24]
 800d002:	9605      	str	r6, [sp, #20]
 800d004:	9003      	str	r0, [sp, #12]
 800d006:	9301      	str	r3, [sp, #4]
 800d008:	9600      	str	r6, [sp, #0]
 800d00a:	0003      	movs	r3, r0
 800d00c:	6a2e      	ldr	r6, [r5, #32]
 800d00e:	47b0      	blx	r6
                       1, 0, 10, rxBeaconSetupParams->SymbolTimeout, true, rxBeaconSetupParams->BeaconSize, false, 0, 0, false, rxContinuous );

    Radio.Rx( rxBeaconSetupParams->RxTime );
 800d010:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800d012:	68e0      	ldr	r0, [r4, #12]
 800d014:	4798      	blx	r3
}
 800d016:	b00a      	add	sp, #40	; 0x28
 800d018:	bd70      	pop	{r4, r5, r6, pc}
 800d01a:	46c0      	nop			; (mov r8, r8)
 800d01c:	0801074c 	.word	0x0801074c

0800d020 <VerifyRfFreq>:

    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800d020:	b537      	push	{r0, r1, r2, r4, r5, lr}
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800d022:	4b1a      	ldr	r3, [pc, #104]	; (800d08c <VerifyRfFreq+0x6c>)
{
 800d024:	0004      	movs	r4, r0
    if( Radio.CheckRfFrequency( freq ) == false )
 800d026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
{
 800d028:	000d      	movs	r5, r1
    if( Radio.CheckRfFrequency( freq ) == false )
 800d02a:	9301      	str	r3, [sp, #4]
 800d02c:	4798      	blx	r3
 800d02e:	2800      	cmp	r0, #0
 800d030:	d006      	beq.n	800d040 <VerifyRfFreq+0x20>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800d032:	4b17      	ldr	r3, [pc, #92]	; (800d090 <VerifyRfFreq+0x70>)
 800d034:	4a17      	ldr	r2, [pc, #92]	; (800d094 <VerifyRfFreq+0x74>)
 800d036:	18e3      	adds	r3, r4, r3
 800d038:	4293      	cmp	r3, r2
 800d03a:	d802      	bhi.n	800d042 <VerifyRfFreq+0x22>
    {
        *band = 2;
 800d03c:	2302      	movs	r3, #2
    {
        *band = 5;
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
    {
        *band = 3;
 800d03e:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 800d040:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800d042:	4b15      	ldr	r3, [pc, #84]	; (800d098 <VerifyRfFreq+0x78>)
 800d044:	4a15      	ldr	r2, [pc, #84]	; (800d09c <VerifyRfFreq+0x7c>)
 800d046:	18e3      	adds	r3, r4, r3
 800d048:	4293      	cmp	r3, r2
 800d04a:	d801      	bhi.n	800d050 <VerifyRfFreq+0x30>
        *band = 0;
 800d04c:	2300      	movs	r3, #0
 800d04e:	e7f6      	b.n	800d03e <VerifyRfFreq+0x1e>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800d050:	4b13      	ldr	r3, [pc, #76]	; (800d0a0 <VerifyRfFreq+0x80>)
 800d052:	4a14      	ldr	r2, [pc, #80]	; (800d0a4 <VerifyRfFreq+0x84>)
 800d054:	18e3      	adds	r3, r4, r3
 800d056:	4293      	cmp	r3, r2
 800d058:	d801      	bhi.n	800d05e <VerifyRfFreq+0x3e>
        *band = 1;
 800d05a:	2301      	movs	r3, #1
 800d05c:	e7ef      	b.n	800d03e <VerifyRfFreq+0x1e>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800d05e:	4b12      	ldr	r3, [pc, #72]	; (800d0a8 <VerifyRfFreq+0x88>)
 800d060:	4a12      	ldr	r2, [pc, #72]	; (800d0ac <VerifyRfFreq+0x8c>)
 800d062:	18e3      	adds	r3, r4, r3
 800d064:	4293      	cmp	r3, r2
 800d066:	d801      	bhi.n	800d06c <VerifyRfFreq+0x4c>
        *band = 5;
 800d068:	2305      	movs	r3, #5
 800d06a:	e7e8      	b.n	800d03e <VerifyRfFreq+0x1e>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800d06c:	4b10      	ldr	r3, [pc, #64]	; (800d0b0 <VerifyRfFreq+0x90>)
 800d06e:	4a11      	ldr	r2, [pc, #68]	; (800d0b4 <VerifyRfFreq+0x94>)
 800d070:	18e3      	adds	r3, r4, r3
 800d072:	4293      	cmp	r3, r2
 800d074:	d801      	bhi.n	800d07a <VerifyRfFreq+0x5a>
        *band = 3;
 800d076:	2303      	movs	r3, #3
 800d078:	e7e1      	b.n	800d03e <VerifyRfFreq+0x1e>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800d07a:	4b0f      	ldr	r3, [pc, #60]	; (800d0b8 <VerifyRfFreq+0x98>)
 800d07c:	18e4      	adds	r4, r4, r3
 800d07e:	4b0f      	ldr	r3, [pc, #60]	; (800d0bc <VerifyRfFreq+0x9c>)
 800d080:	429c      	cmp	r4, r3
 800d082:	d801      	bhi.n	800d088 <VerifyRfFreq+0x68>
        *band = 4;
 800d084:	2304      	movs	r3, #4
 800d086:	e7da      	b.n	800d03e <VerifyRfFreq+0x1e>
        return false;
 800d088:	2000      	movs	r0, #0
 800d08a:	e7d9      	b.n	800d040 <VerifyRfFreq+0x20>
 800d08c:	0801074c 	.word	0x0801074c
 800d090:	cc8faa40 	.word	0xcc8faa40
 800d094:	001e847f 	.word	0x001e847f
 800d098:	cc7125c0 	.word	0xcc7125c0
 800d09c:	002dc6c0 	.word	0x002dc6c0
 800d0a0:	cc435eff 	.word	0xcc435eff
 800d0a4:	000927bf 	.word	0x000927bf
 800d0a8:	cc38b0a0 	.word	0xcc38b0a0
 800d0ac:	0007a120 	.word	0x0007a120
 800d0b0:	cc2e0240 	.word	0xcc2e0240
 800d0b4:	0003d090 	.word	0x0003d090
 800d0b8:	cc296e60 	.word	0xcc296e60
 800d0bc:	000493e0 	.word	0x000493e0

0800d0c0 <RegionEU868GetPhyParam>:
    *delayTx = delayTransmission;
    return nbEnabledChannels;
}

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800d0c0:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
 800d0c2:	2200      	movs	r2, #0
{
 800d0c4:	0003      	movs	r3, r0
 800d0c6:	7800      	ldrb	r0, [r0, #0]
    PhyParam_t phyParam = { 0 };
 800d0c8:	9200      	str	r2, [sp, #0]

    switch( getPhy->Attribute )
 800d0ca:	380b      	subs	r0, #11
 800d0cc:	282a      	cmp	r0, #42	; 0x2a
 800d0ce:	d81f      	bhi.n	800d110 <RegionEU868GetPhyParam+0x50>
 800d0d0:	f7f3 f81a 	bl	8000108 <__gnu_thumb1_case_uqi>
 800d0d4:	2a252320 	.word	0x2a252320
 800d0d8:	37343230 	.word	0x37343230
 800d0dc:	413e3c3a 	.word	0x413e3c3a
 800d0e0:	4d1e4b1e 	.word	0x4d1e4b1e
 800d0e4:	1e53514f 	.word	0x1e53514f
 800d0e8:	1659551e 	.word	0x1659551e
 800d0ec:	1e1e1e1e 	.word	0x1e1e1e1e
 800d0f0:	1e1e1e1e 	.word	0x1e1e1e1e
 800d0f4:	1e1e1e1e 	.word	0x1e1e1e1e
 800d0f8:	615b4b1e 	.word	0x615b4b1e
 800d0fc:	1e1e      	.short	0x1e1e
 800d0fe:	61          	.byte	0x61
 800d0ff:	00          	.byte	0x00
            phyParam.Value = EU868_DEFAULT_DATARATE;
            break;
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 800d100:	785b      	ldrb	r3, [r3, #1]
 800d102:	b25b      	sxtb	r3, r3
        nextLowerDr = minDr;
 800d104:	1e1a      	subs	r2, r3, #0
    if( dr == minDr )
 800d106:	d001      	beq.n	800d10c <RegionEU868GetPhyParam+0x4c>
        nextLowerDr = dr - 1;
 800d108:	3b01      	subs	r3, #1
 800d10a:	b2da      	uxtb	r2, r3
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 800d10c:	b252      	sxtb	r2, r2
 800d10e:	9200      	str	r2, [sp, #0]
            break;
        }
    }

    return phyParam;
}
 800d110:	9800      	ldr	r0, [sp, #0]
 800d112:	bd0e      	pop	{r1, r2, r3, pc}
            phyParam.Value = EU868_ADR_ACK_LIMIT;
 800d114:	2340      	movs	r3, #64	; 0x40
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800d116:	9300      	str	r3, [sp, #0]
            break;
 800d118:	e7fa      	b.n	800d110 <RegionEU868GetPhyParam+0x50>
            phyParam.Value = EU868_ADR_ACK_DELAY;
 800d11a:	2320      	movs	r3, #32
 800d11c:	e7fb      	b.n	800d116 <RegionEU868GetPhyParam+0x56>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800d11e:	785b      	ldrb	r3, [r3, #1]
 800d120:	4a1e      	ldr	r2, [pc, #120]	; (800d19c <RegionEU868GetPhyParam+0xdc>)
 800d122:	b25b      	sxtb	r3, r3
 800d124:	5cd3      	ldrb	r3, [r2, r3]
 800d126:	e7f6      	b.n	800d116 <RegionEU868GetPhyParam+0x56>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800d128:	2201      	movs	r2, #1
 800d12a:	569a      	ldrsb	r2, [r3, r2]
 800d12c:	4b1b      	ldr	r3, [pc, #108]	; (800d19c <RegionEU868GetPhyParam+0xdc>)
 800d12e:	189b      	adds	r3, r3, r2
 800d130:	7a1b      	ldrb	r3, [r3, #8]
 800d132:	e7f0      	b.n	800d116 <RegionEU868GetPhyParam+0x56>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800d134:	2301      	movs	r3, #1
 800d136:	e7ee      	b.n	800d116 <RegionEU868GetPhyParam+0x56>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800d138:	4b19      	ldr	r3, [pc, #100]	; (800d1a0 <RegionEU868GetPhyParam+0xe0>)
 800d13a:	e7ec      	b.n	800d116 <RegionEU868GetPhyParam+0x56>
            phyParam.Value = EU868_RECEIVE_DELAY1;
 800d13c:	23fa      	movs	r3, #250	; 0xfa
 800d13e:	009b      	lsls	r3, r3, #2
 800d140:	e7e9      	b.n	800d116 <RegionEU868GetPhyParam+0x56>
            phyParam.Value = EU868_RECEIVE_DELAY2;
 800d142:	23fa      	movs	r3, #250	; 0xfa
 800d144:	00db      	lsls	r3, r3, #3
 800d146:	e7e6      	b.n	800d116 <RegionEU868GetPhyParam+0x56>
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
 800d148:	4b16      	ldr	r3, [pc, #88]	; (800d1a4 <RegionEU868GetPhyParam+0xe4>)
 800d14a:	e7e4      	b.n	800d116 <RegionEU868GetPhyParam+0x56>
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
 800d14c:	4b16      	ldr	r3, [pc, #88]	; (800d1a8 <RegionEU868GetPhyParam+0xe8>)
 800d14e:	e7e2      	b.n	800d116 <RegionEU868GetPhyParam+0x56>
            phyParam.Value = EU868_MAX_FCNT_GAP;
 800d150:	2380      	movs	r3, #128	; 0x80
 800d152:	01db      	lsls	r3, r3, #7
 800d154:	e7df      	b.n	800d116 <RegionEU868GetPhyParam+0x56>
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
 800d156:	21fa      	movs	r1, #250	; 0xfa
 800d158:	4814      	ldr	r0, [pc, #80]	; (800d1ac <RegionEU868GetPhyParam+0xec>)
 800d15a:	0089      	lsls	r1, r1, #2
 800d15c:	f001 fc26 	bl	800e9ac <randr>
 800d160:	23fa      	movs	r3, #250	; 0xfa
 800d162:	00db      	lsls	r3, r3, #3
 800d164:	18c0      	adds	r0, r0, r3
 800d166:	9000      	str	r0, [sp, #0]
            break;
 800d168:	e7d2      	b.n	800d110 <RegionEU868GetPhyParam+0x50>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800d16a:	4b11      	ldr	r3, [pc, #68]	; (800d1b0 <RegionEU868GetPhyParam+0xf0>)
 800d16c:	e7d3      	b.n	800d116 <RegionEU868GetPhyParam+0x56>
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 800d16e:	4b11      	ldr	r3, [pc, #68]	; (800d1b4 <RegionEU868GetPhyParam+0xf4>)
 800d170:	e7d1      	b.n	800d116 <RegionEU868GetPhyParam+0x56>
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 800d172:	4b11      	ldr	r3, [pc, #68]	; (800d1b8 <RegionEU868GetPhyParam+0xf8>)
 800d174:	e7cf      	b.n	800d116 <RegionEU868GetPhyParam+0x56>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800d176:	2310      	movs	r3, #16
 800d178:	e7cd      	b.n	800d116 <RegionEU868GetPhyParam+0x56>
            phyParam.Channels = NvmCtx.Channels;
 800d17a:	4b10      	ldr	r3, [pc, #64]	; (800d1bc <RegionEU868GetPhyParam+0xfc>)
 800d17c:	e7cb      	b.n	800d116 <RegionEU868GetPhyParam+0x56>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800d17e:	2383      	movs	r3, #131	; 0x83
 800d180:	05db      	lsls	r3, r3, #23
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800d182:	9300      	str	r3, [sp, #0]
            break;
 800d184:	e7c4      	b.n	800d110 <RegionEU868GetPhyParam+0x50>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800d186:	4b0e      	ldr	r3, [pc, #56]	; (800d1c0 <RegionEU868GetPhyParam+0x100>)
 800d188:	e7fb      	b.n	800d182 <RegionEU868GetPhyParam+0xc2>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800d18a:	466a      	mov	r2, sp
 800d18c:	4b0d      	ldr	r3, [pc, #52]	; (800d1c4 <RegionEU868GetPhyParam+0x104>)
 800d18e:	8013      	strh	r3, [r2, #0]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 800d190:	2300      	movs	r3, #0
 800d192:	7093      	strb	r3, [r2, #2]
            break;
 800d194:	e7bc      	b.n	800d110 <RegionEU868GetPhyParam+0x50>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800d196:	2303      	movs	r3, #3
 800d198:	e7bd      	b.n	800d116 <RegionEU868GetPhyParam+0x56>
 800d19a:	46c0      	nop			; (mov r8, r8)
 800d19c:	08010bfc 	.word	0x08010bfc
 800d1a0:	00000bb8 	.word	0x00000bb8
 800d1a4:	00001388 	.word	0x00001388
 800d1a8:	00001770 	.word	0x00001770
 800d1ac:	fffffc18 	.word	0xfffffc18
 800d1b0:	33d3e608 	.word	0x33d3e608
 800d1b4:	20001010 	.word	0x20001010
 800d1b8:	20001012 	.word	0x20001012
 800d1bc:	20000ef0 	.word	0x20000ef0
 800d1c0:	4009999a 	.word	0x4009999a
 800d1c4:	00000211 	.word	0x00000211

0800d1c8 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800d1c8:	0003      	movs	r3, r0
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 800d1ca:	220c      	movs	r2, #12
 800d1cc:	7819      	ldrb	r1, [r3, #0]
 800d1ce:	4806      	ldr	r0, [pc, #24]	; (800d1e8 <RegionEU868SetBandTxDone+0x20>)
 800d1d0:	434a      	muls	r2, r1
 800d1d2:	1882      	adds	r2, r0, r2
 800d1d4:	7a51      	ldrb	r1, [r2, #9]
{
 800d1d6:	b510      	push	{r4, lr}
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 800d1d8:	310c      	adds	r1, #12
 800d1da:	0109      	lsls	r1, r1, #4
 800d1dc:	1809      	adds	r1, r1, r0
 800d1de:	685a      	ldr	r2, [r3, #4]
 800d1e0:	7858      	ldrb	r0, [r3, #1]
 800d1e2:	f7ff fd8e 	bl	800cd02 <RegionCommonSetBandTxDone>
}
 800d1e6:	bd10      	pop	{r4, pc}
 800d1e8:	20000ef0 	.word	0x20000ef0

0800d1ec <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800d1ec:	b570      	push	{r4, r5, r6, lr}
 800d1ee:	b098      	sub	sp, #96	; 0x60
 800d1f0:	0004      	movs	r4, r0
    Band_t bands[EU868_MAX_NB_BANDS] =
 800d1f2:	2260      	movs	r2, #96	; 0x60
 800d1f4:	2100      	movs	r1, #0
 800d1f6:	4668      	mov	r0, sp
 800d1f8:	f002 fce9 	bl	800fbce <memset>
 800d1fc:	2364      	movs	r3, #100	; 0x64
 800d1fe:	466a      	mov	r2, sp
 800d200:	8013      	strh	r3, [r2, #0]
 800d202:	8213      	strh	r3, [r2, #16]
 800d204:	22fa      	movs	r2, #250	; 0xfa
 800d206:	4669      	mov	r1, sp
 800d208:	0092      	lsls	r2, r2, #2
 800d20a:	840a      	strh	r2, [r1, #32]
 800d20c:	4668      	mov	r0, sp
 800d20e:	210a      	movs	r1, #10
 800d210:	8601      	strh	r1, [r0, #48]	; 0x30
 800d212:	4669      	mov	r1, sp
 800d214:	3102      	adds	r1, #2
 800d216:	87cb      	strh	r3, [r1, #62]	; 0x3e
 800d218:	ab14      	add	r3, sp, #80	; 0x50
 800d21a:	801a      	strh	r2, [r3, #0]
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800d21c:	7923      	ldrb	r3, [r4, #4]
 800d21e:	2b01      	cmp	r3, #1
 800d220:	d02b      	beq.n	800d27a <RegionEU868InitDefaults+0x8e>
 800d222:	2b02      	cmp	r3, #2
 800d224:	d020      	beq.n	800d268 <RegionEU868InitDefaults+0x7c>
 800d226:	2b00      	cmp	r3, #0
 800d228:	d11c      	bne.n	800d264 <RegionEU868InitDefaults+0x78>
    {
        case INIT_TYPE_INIT:
        {
            // Initialize bands
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800d22a:	2260      	movs	r2, #96	; 0x60
 800d22c:	4669      	mov	r1, sp
 800d22e:	481e      	ldr	r0, [pc, #120]	; (800d2a8 <RegionEU868InitDefaults+0xbc>)
 800d230:	f001 fbc7 	bl	800e9c2 <memcpy1>

            // Channels
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800d234:	4b1d      	ldr	r3, [pc, #116]	; (800d2ac <RegionEU868InitDefaults+0xc0>)
 800d236:	4a1e      	ldr	r2, [pc, #120]	; (800d2b0 <RegionEU868InitDefaults+0xc4>)
 800d238:	0019      	movs	r1, r3
 800d23a:	0010      	movs	r0, r2
 800d23c:	3110      	adds	r1, #16
 800d23e:	c970      	ldmia	r1!, {r4, r5, r6}
 800d240:	c070      	stmia	r0!, {r4, r5, r6}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800d242:	0019      	movs	r1, r3
 800d244:	311c      	adds	r1, #28
 800d246:	c970      	ldmia	r1!, {r4, r5, r6}
 800d248:	c070      	stmia	r0!, {r4, r5, r6}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800d24a:	0011      	movs	r1, r2
 800d24c:	3328      	adds	r3, #40	; 0x28
 800d24e:	3118      	adds	r1, #24
 800d250:	cb31      	ldmia	r3!, {r0, r4, r5}
 800d252:	c131      	stmia	r1!, {r0, r4, r5}

            // Initialize the channels default mask
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800d254:	2307      	movs	r3, #7
 800d256:	32fe      	adds	r2, #254	; 0xfe
 800d258:	8493      	strh	r3, [r2, #36]	; 0x24
            // Update the channels mask
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 800d25a:	4916      	ldr	r1, [pc, #88]	; (800d2b4 <RegionEU868InitDefaults+0xc8>)
 800d25c:	2201      	movs	r2, #1
 800d25e:	4816      	ldr	r0, [pc, #88]	; (800d2b8 <RegionEU868InitDefaults+0xcc>)
 800d260:	f7ff fd41 	bl	800cce6 <RegionCommonChanMaskCopy>
        default:
        {
            break;
        }
    }
}
 800d264:	b018      	add	sp, #96	; 0x60
 800d266:	bd70      	pop	{r4, r5, r6, pc}
            if( params->NvmCtx != 0 )
 800d268:	6821      	ldr	r1, [r4, #0]
 800d26a:	2900      	cmp	r1, #0
 800d26c:	d0fa      	beq.n	800d264 <RegionEU868InitDefaults+0x78>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 800d26e:	2292      	movs	r2, #146	; 0x92
 800d270:	480f      	ldr	r0, [pc, #60]	; (800d2b0 <RegionEU868InitDefaults+0xc4>)
 800d272:	0052      	lsls	r2, r2, #1
 800d274:	f001 fba5 	bl	800e9c2 <memcpy1>
 800d278:	e7f4      	b.n	800d264 <RegionEU868InitDefaults+0x78>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 800d27a:	4b0d      	ldr	r3, [pc, #52]	; (800d2b0 <RegionEU868InitDefaults+0xc4>)
 800d27c:	001a      	movs	r2, r3
 800d27e:	32fe      	adds	r2, #254	; 0xfe
 800d280:	8c51      	ldrh	r1, [r2, #34]	; 0x22
 800d282:	8c90      	ldrh	r0, [r2, #36]	; 0x24
 800d284:	4301      	orrs	r1, r0
 800d286:	8451      	strh	r1, [r2, #34]	; 0x22
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800d288:	4a08      	ldr	r2, [pc, #32]	; (800d2ac <RegionEU868InitDefaults+0xc0>)
 800d28a:	0018      	movs	r0, r3
 800d28c:	0011      	movs	r1, r2
 800d28e:	3110      	adds	r1, #16
 800d290:	c970      	ldmia	r1!, {r4, r5, r6}
 800d292:	c070      	stmia	r0!, {r4, r5, r6}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800d294:	0011      	movs	r1, r2
 800d296:	311c      	adds	r1, #28
 800d298:	c970      	ldmia	r1!, {r4, r5, r6}
 800d29a:	c070      	stmia	r0!, {r4, r5, r6}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800d29c:	3318      	adds	r3, #24
 800d29e:	3228      	adds	r2, #40	; 0x28
 800d2a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 800d2a2:	c313      	stmia	r3!, {r0, r1, r4}
}
 800d2a4:	e7de      	b.n	800d264 <RegionEU868InitDefaults+0x78>
 800d2a6:	46c0      	nop			; (mov r8, r8)
 800d2a8:	20000fb0 	.word	0x20000fb0
 800d2ac:	08010bfc 	.word	0x08010bfc
 800d2b0:	20000ef0 	.word	0x20000ef0
 800d2b4:	20001012 	.word	0x20001012
 800d2b8:	20001010 	.word	0x20001010

0800d2bc <RegionEU868GetNvmCtx>:

void* RegionEU868GetNvmCtx( GetNvmCtxParams_t* params )
{
    params->nvmCtxSize = sizeof( RegionEU868NvmCtx_t );
 800d2bc:	2392      	movs	r3, #146	; 0x92
 800d2be:	005b      	lsls	r3, r3, #1
 800d2c0:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 800d2c2:	4801      	ldr	r0, [pc, #4]	; (800d2c8 <RegionEU868GetNvmCtx+0xc>)
 800d2c4:	4770      	bx	lr
 800d2c6:	46c0      	nop			; (mov r8, r8)
 800d2c8:	20000ef0 	.word	0x20000ef0

0800d2cc <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800d2cc:	0003      	movs	r3, r0
 800d2ce:	b507      	push	{r0, r1, r2, lr}
 800d2d0:	0008      	movs	r0, r1
 800d2d2:	290f      	cmp	r1, #15
 800d2d4:	d809      	bhi.n	800d2ea <RegionEU868Verify+0x1e>
 800d2d6:	f7f2 ff17 	bl	8000108 <__gnu_thumb1_case_uqi>
 800d2da:	080a      	.short	0x080a
 800d2dc:	1c080808 	.word	0x1c080808
 800d2e0:	1c081c12 	.word	0x1c081c12
 800d2e4:	0808081c 	.word	0x0808081c
 800d2e8:	2008      	.short	0x2008
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 800d2ea:	2000      	movs	r0, #0
        }
        default:
            return false;
    }
}
 800d2ec:	bd0e      	pop	{r1, r2, r3, pc}
            uint8_t band = 0;
 800d2ee:	466a      	mov	r2, sp
 800d2f0:	1dd1      	adds	r1, r2, #7
 800d2f2:	2200      	movs	r2, #0
            return VerifyRfFreq( verify->Frequency, &band );
 800d2f4:	6818      	ldr	r0, [r3, #0]
            uint8_t band = 0;
 800d2f6:	700a      	strb	r2, [r1, #0]
            return VerifyRfFreq( verify->Frequency, &band );
 800d2f8:	f7ff fe92 	bl	800d020 <VerifyRfFreq>
 800d2fc:	e7f6      	b.n	800d2ec <RegionEU868Verify+0x20>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800d2fe:	2000      	movs	r0, #0
 800d300:	2205      	movs	r2, #5
 800d302:	5618      	ldrsb	r0, [r3, r0]
 800d304:	2100      	movs	r1, #0
 800d306:	f7ff fcb1 	bl	800cc6c <RegionCommonValueInRange>
 800d30a:	1e43      	subs	r3, r0, #1
 800d30c:	4198      	sbcs	r0, r3
 800d30e:	b2c0      	uxtb	r0, r0
 800d310:	e7ec      	b.n	800d2ec <RegionEU868Verify+0x20>
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800d312:	2000      	movs	r0, #0
 800d314:	2207      	movs	r2, #7
 800d316:	5618      	ldrsb	r0, [r3, r0]
 800d318:	e7f4      	b.n	800d304 <RegionEU868Verify+0x38>
            return EU868_DUTY_CYCLE_ENABLED;
 800d31a:	2001      	movs	r0, #1
 800d31c:	e7e6      	b.n	800d2ec <RegionEU868Verify+0x20>
	...

0800d320 <RegionEU868ChanMaskSet>:
        }
    }
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800d320:	b510      	push	{r4, lr}
    switch( chanMaskSet->ChannelsMaskType )
 800d322:	7904      	ldrb	r4, [r0, #4]
 800d324:	2c00      	cmp	r4, #0
 800d326:	d003      	beq.n	800d330 <RegionEU868ChanMaskSet+0x10>
 800d328:	2c01      	cmp	r4, #1
 800d32a:	d008      	beq.n	800d33e <RegionEU868ChanMaskSet+0x1e>
 800d32c:	2000      	movs	r0, #0
        }
        default:
            return false;
    }
    return true;
}
 800d32e:	bd10      	pop	{r4, pc}
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 800d330:	6801      	ldr	r1, [r0, #0]
 800d332:	2201      	movs	r2, #1
 800d334:	4805      	ldr	r0, [pc, #20]	; (800d34c <RegionEU868ChanMaskSet+0x2c>)
 800d336:	f7ff fcd6 	bl	800cce6 <RegionCommonChanMaskCopy>
    return true;
 800d33a:	2001      	movs	r0, #1
            break;
 800d33c:	e7f7      	b.n	800d32e <RegionEU868ChanMaskSet+0xe>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 800d33e:	6801      	ldr	r1, [r0, #0]
 800d340:	0022      	movs	r2, r4
 800d342:	4803      	ldr	r0, [pc, #12]	; (800d350 <RegionEU868ChanMaskSet+0x30>)
 800d344:	f7ff fccf 	bl	800cce6 <RegionCommonChanMaskCopy>
    return true;
 800d348:	0020      	movs	r0, r4
            break;
 800d34a:	e7f0      	b.n	800d32e <RegionEU868ChanMaskSet+0xe>
 800d34c:	20001010 	.word	0x20001010
 800d350:	20001012 	.word	0x20001012

0800d354 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800d354:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d356:	b087      	sub	sp, #28
 800d358:	001c      	movs	r4, r3
 800d35a:	0015      	movs	r5, r2
 800d35c:	9104      	str	r1, [sp, #16]
    double tSymbol = 0.0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800d35e:	1c03      	adds	r3, r0, #0
 800d360:	2807      	cmp	r0, #7
 800d362:	dd00      	ble.n	800d366 <RegionEU868ComputeRxWindowParameters+0x12>
 800d364:	2307      	movs	r3, #7
 800d366:	b25a      	sxtb	r2, r3
 800d368:	4694      	mov	ip, r2
 800d36a:	7063      	strb	r3, [r4, #1]
    switch( BandwidthsEU868[drIndex] )
 800d36c:	4663      	mov	r3, ip
 800d36e:	4a17      	ldr	r2, [pc, #92]	; (800d3cc <RegionEU868ComputeRxWindowParameters+0x78>)
 800d370:	0099      	lsls	r1, r3, #2
 800d372:	1853      	adds	r3, r2, r1
 800d374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d376:	4f16      	ldr	r7, [pc, #88]	; (800d3d0 <RegionEU868ComputeRxWindowParameters+0x7c>)
 800d378:	2601      	movs	r6, #1
 800d37a:	42bb      	cmp	r3, r7
 800d37c:	d004      	beq.n	800d388 <RegionEU868ComputeRxWindowParameters+0x34>
            return 2;
 800d37e:	4e15      	ldr	r6, [pc, #84]	; (800d3d4 <RegionEU868ComputeRxWindowParameters+0x80>)
 800d380:	199b      	adds	r3, r3, r6
 800d382:	425e      	negs	r6, r3
 800d384:	415e      	adcs	r6, r3
 800d386:	0076      	lsls	r6, r6, #1
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 800d388:	70a6      	strb	r6, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800d38a:	2806      	cmp	r0, #6
 800d38c:	dd16      	ble.n	800d3bc <RegionEU868ComputeRxWindowParameters+0x68>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800d38e:	2032      	movs	r0, #50	; 0x32
 800d390:	f7ff fd72 	bl	800ce78 <RegionCommonComputeSymbolTimeFsk>
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800d394:	4b10      	ldr	r3, [pc, #64]	; (800d3d8 <RegionEU868ComputeRxWindowParameters+0x84>)
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800d396:	0006      	movs	r6, r0
    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800d398:	6e5b      	ldr	r3, [r3, #100]	; 0x64
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800d39a:	000f      	movs	r7, r1
    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800d39c:	9305      	str	r3, [sp, #20]
 800d39e:	4798      	blx	r3
 800d3a0:	0023      	movs	r3, r4
 800d3a2:	3408      	adds	r4, #8
 800d3a4:	330c      	adds	r3, #12
 800d3a6:	9302      	str	r3, [sp, #8]
 800d3a8:	9000      	str	r0, [sp, #0]
 800d3aa:	002b      	movs	r3, r5
 800d3ac:	0030      	movs	r0, r6
 800d3ae:	0039      	movs	r1, r7
 800d3b0:	9a04      	ldr	r2, [sp, #16]
 800d3b2:	9401      	str	r4, [sp, #4]
 800d3b4:	f7ff fd6c 	bl	800ce90 <RegionCommonComputeRxWindowParameters>
}
 800d3b8:	b007      	add	sp, #28
 800d3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800d3bc:	4663      	mov	r3, ip
 800d3be:	1851      	adds	r1, r2, r1
 800d3c0:	3254      	adds	r2, #84	; 0x54
 800d3c2:	5cd0      	ldrb	r0, [r2, r3]
 800d3c4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d3c6:	f7ff fd3d 	bl	800ce44 <RegionCommonComputeSymbolTimeLoRa>
 800d3ca:	e7e3      	b.n	800d394 <RegionEU868ComputeRxWindowParameters+0x40>
 800d3cc:	08010bfc 	.word	0x08010bfc
 800d3d0:	0003d090 	.word	0x0003d090
 800d3d4:	fff85ee0 	.word	0xfff85ee0
 800d3d8:	0801074c 	.word	0x0801074c

0800d3dc <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800d3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800d3de:	2701      	movs	r7, #1
{
 800d3e0:	b08f      	sub	sp, #60	; 0x3c
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800d3e2:	6843      	ldr	r3, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800d3e4:	4d32      	ldr	r5, [pc, #200]	; (800d4b0 <RegionEU868RxConfig+0xd4>)
{
 800d3e6:	910c      	str	r1, [sp, #48]	; 0x30
    int8_t dr = rxConfig->Datarate;
 800d3e8:	57c7      	ldrsb	r7, [r0, r7]
    uint32_t frequency = rxConfig->Frequency;
 800d3ea:	930a      	str	r3, [sp, #40]	; 0x28
    if( Radio.GetStatus( ) != RF_IDLE )
 800d3ec:	68eb      	ldr	r3, [r5, #12]
{
 800d3ee:	0004      	movs	r4, r0
    if( Radio.GetStatus( ) != RF_IDLE )
 800d3f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3f2:	4798      	blx	r3
 800d3f4:	0006      	movs	r6, r0
    {
        return false;
 800d3f6:	2000      	movs	r0, #0
    if( Radio.GetStatus( ) != RF_IDLE )
 800d3f8:	4286      	cmp	r6, r0
 800d3fa:	d140      	bne.n	800d47e <RegionEU868RxConfig+0xa2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800d3fc:	7ce3      	ldrb	r3, [r4, #19]
 800d3fe:	4283      	cmp	r3, r0
 800d400:	d10a      	bne.n	800d418 <RegionEU868RxConfig+0x3c>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 800d402:	220c      	movs	r2, #12
 800d404:	7821      	ldrb	r1, [r4, #0]
 800d406:	4b2b      	ldr	r3, [pc, #172]	; (800d4b4 <RegionEU868RxConfig+0xd8>)
 800d408:	434a      	muls	r2, r1
 800d40a:	58d1      	ldr	r1, [r2, r3]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800d40c:	189b      	adds	r3, r3, r2
 800d40e:	685b      	ldr	r3, [r3, #4]
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 800d410:	910a      	str	r1, [sp, #40]	; 0x28
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800d412:	4283      	cmp	r3, r0
 800d414:	d000      	beq.n	800d418 <RegionEU868RxConfig+0x3c>
 800d416:	930a      	str	r3, [sp, #40]	; 0x28
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800d418:	4b27      	ldr	r3, [pc, #156]	; (800d4b8 <RegionEU868RxConfig+0xdc>)

    Radio.SetChannel( frequency );
 800d41a:	980a      	ldr	r0, [sp, #40]	; 0x28
    phyDr = DataratesEU868[dr];
 800d41c:	3354      	adds	r3, #84	; 0x54
 800d41e:	57db      	ldrsb	r3, [r3, r7]
 800d420:	930b      	str	r3, [sp, #44]	; 0x2c
    Radio.SetChannel( frequency );
 800d422:	696b      	ldr	r3, [r5, #20]
 800d424:	930d      	str	r3, [sp, #52]	; 0x34
 800d426:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800d428:	6a2d      	ldr	r5, [r5, #32]
 800d42a:	7ca3      	ldrb	r3, [r4, #18]
 800d42c:	2f07      	cmp	r7, #7
 800d42e:	d128      	bne.n	800d482 <RegionEU868RxConfig+0xa6>
    {
        modem = MODEM_FSK;
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800d430:	9309      	str	r3, [sp, #36]	; 0x24
 800d432:	2301      	movs	r3, #1
 800d434:	9305      	str	r3, [sp, #20]
 800d436:	68a3      	ldr	r3, [r4, #8]
 800d438:	2000      	movs	r0, #0
 800d43a:	b29b      	uxth	r3, r3
 800d43c:	9302      	str	r3, [sp, #8]
 800d43e:	2305      	movs	r3, #5
 800d440:	22fa      	movs	r2, #250	; 0xfa
 800d442:	9301      	str	r3, [sp, #4]
 800d444:	4b1d      	ldr	r3, [pc, #116]	; (800d4bc <RegionEU868RxConfig+0xe0>)
 800d446:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d448:	9300      	str	r3, [sp, #0]
 800d44a:	0003      	movs	r3, r0
 800d44c:	0092      	lsls	r2, r2, #2
 800d44e:	434a      	muls	r2, r1
 800d450:	491b      	ldr	r1, [pc, #108]	; (800d4c0 <RegionEU868RxConfig+0xe4>)
 800d452:	9008      	str	r0, [sp, #32]
 800d454:	9007      	str	r0, [sp, #28]
 800d456:	9006      	str	r0, [sp, #24]
 800d458:	9004      	str	r0, [sp, #16]
 800d45a:	9003      	str	r0, [sp, #12]
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800d45c:	47a8      	blx	r5
    }

    if( rxConfig->RepeaterSupport == true )
 800d45e:	7c62      	ldrb	r2, [r4, #17]
 800d460:	4b15      	ldr	r3, [pc, #84]	; (800d4b8 <RegionEU868RxConfig+0xdc>)
 800d462:	2a00      	cmp	r2, #0
 800d464:	d021      	beq.n	800d4aa <RegionEU868RxConfig+0xce>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800d466:	19db      	adds	r3, r3, r7
 800d468:	7a19      	ldrb	r1, [r3, #8]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 800d46a:	4b11      	ldr	r3, [pc, #68]	; (800d4b0 <RegionEU868RxConfig+0xd4>)
 800d46c:	310d      	adds	r1, #13
 800d46e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d470:	0030      	movs	r0, r6
 800d472:	b2c9      	uxtb	r1, r1
 800d474:	930a      	str	r3, [sp, #40]	; 0x28
 800d476:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
    return true;
 800d478:	2001      	movs	r0, #1
    *datarate = (uint8_t) dr;
 800d47a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d47c:	701f      	strb	r7, [r3, #0]
}
 800d47e:	b00f      	add	sp, #60	; 0x3c
 800d480:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800d482:	68a2      	ldr	r2, [r4, #8]
 800d484:	2601      	movs	r6, #1
 800d486:	b292      	uxth	r2, r2
 800d488:	9309      	str	r3, [sp, #36]	; 0x24
 800d48a:	9202      	str	r2, [sp, #8]
 800d48c:	2300      	movs	r3, #0
 800d48e:	2208      	movs	r2, #8
 800d490:	9307      	str	r3, [sp, #28]
 800d492:	9306      	str	r3, [sp, #24]
 800d494:	9305      	str	r3, [sp, #20]
 800d496:	9304      	str	r3, [sp, #16]
 800d498:	9303      	str	r3, [sp, #12]
 800d49a:	9201      	str	r2, [sp, #4]
 800d49c:	9300      	str	r3, [sp, #0]
 800d49e:	0030      	movs	r0, r6
 800d4a0:	0033      	movs	r3, r6
 800d4a2:	78a1      	ldrb	r1, [r4, #2]
 800d4a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d4a6:	9608      	str	r6, [sp, #32]
 800d4a8:	e7d8      	b.n	800d45c <RegionEU868RxConfig+0x80>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800d4aa:	5dd9      	ldrb	r1, [r3, r7]
 800d4ac:	e7dd      	b.n	800d46a <RegionEU868RxConfig+0x8e>
 800d4ae:	46c0      	nop			; (mov r8, r8)
 800d4b0:	0801074c 	.word	0x0801074c
 800d4b4:	20000ef0 	.word	0x20000ef0
 800d4b8:	08010bfc 	.word	0x08010bfc
 800d4bc:	00014585 	.word	0x00014585
 800d4c0:	0000c350 	.word	0x0000c350

0800d4c4 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800d4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800d4c6:	4b3e      	ldr	r3, [pc, #248]	; (800d5c0 <RegionEU868TxConfig+0xfc>)
{
 800d4c8:	b091      	sub	sp, #68	; 0x44
 800d4ca:	920f      	str	r2, [sp, #60]	; 0x3c
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800d4cc:	2201      	movs	r2, #1
{
 800d4ce:	910e      	str	r1, [sp, #56]	; 0x38
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800d4d0:	0019      	movs	r1, r3
 800d4d2:	5682      	ldrsb	r2, [r0, r2]
 800d4d4:	3154      	adds	r1, #84	; 0x54
{
 800d4d6:	0004      	movs	r4, r0
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800d4d8:	5689      	ldrsb	r1, [r1, r2]
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800d4da:	2602      	movs	r6, #2
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800d4dc:	910a      	str	r1, [sp, #40]	; 0x28
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800d4de:	210c      	movs	r1, #12
 800d4e0:	7825      	ldrb	r5, [r4, #0]
 800d4e2:	4838      	ldr	r0, [pc, #224]	; (800d5c4 <RegionEU868TxConfig+0x100>)
 800d4e4:	4369      	muls	r1, r5
 800d4e6:	1841      	adds	r1, r0, r1
 800d4e8:	7a49      	ldrb	r1, [r1, #9]
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800d4ea:	57a6      	ldrsb	r6, [r4, r6]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800d4ec:	310c      	adds	r1, #12
 800d4ee:	0109      	lsls	r1, r1, #4
 800d4f0:	1841      	adds	r1, r0, r1
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800d4f2:	7889      	ldrb	r1, [r1, #2]
 800d4f4:	78a5      	ldrb	r5, [r4, #2]
 800d4f6:	1c08      	adds	r0, r1, #0
 800d4f8:	b249      	sxtb	r1, r1
 800d4fa:	42b1      	cmp	r1, r6
 800d4fc:	da00      	bge.n	800d500 <RegionEU868TxConfig+0x3c>
 800d4fe:	1c28      	adds	r0, r5, #0
    switch( BandwidthsEU868[drIndex] )
 800d500:	0092      	lsls	r2, r2, #2
 800d502:	189b      	adds	r3, r3, r2
 800d504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d506:	4a30      	ldr	r2, [pc, #192]	; (800d5c8 <RegionEU868TxConfig+0x104>)
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800d508:	b241      	sxtb	r1, r0
    switch( BandwidthsEU868[drIndex] )
 800d50a:	2701      	movs	r7, #1
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800d50c:	910b      	str	r1, [sp, #44]	; 0x2c
    switch( BandwidthsEU868[drIndex] )
 800d50e:	4293      	cmp	r3, r2
 800d510:	d004      	beq.n	800d51c <RegionEU868TxConfig+0x58>
            return 2;
 800d512:	4a2e      	ldr	r2, [pc, #184]	; (800d5cc <RegionEU868TxConfig+0x108>)
 800d514:	189b      	adds	r3, r3, r2
 800d516:	425f      	negs	r7, r3
 800d518:	415f      	adcs	r7, r3
 800d51a:	007f      	lsls	r7, r7, #1
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800d51c:	68a2      	ldr	r2, [r4, #8]
 800d51e:	6861      	ldr	r1, [r4, #4]
 800d520:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d522:	f7ff fd0f 	bl	800cf44 <RegionCommonComputeTxPower>

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 800d526:	230c      	movs	r3, #12
 800d528:	4d29      	ldr	r5, [pc, #164]	; (800d5d0 <RegionEU868TxConfig+0x10c>)
 800d52a:	7822      	ldrb	r2, [r4, #0]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800d52c:	900d      	str	r0, [sp, #52]	; 0x34
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 800d52e:	4353      	muls	r3, r2
 800d530:	696a      	ldr	r2, [r5, #20]
 800d532:	920c      	str	r2, [sp, #48]	; 0x30
 800d534:	4a23      	ldr	r2, [pc, #140]	; (800d5c4 <RegionEU868TxConfig+0x100>)
 800d536:	5898      	ldr	r0, [r3, r2]
 800d538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d53a:	4798      	blx	r3

    if( txConfig->Datarate == DR_7 )
 800d53c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d53e:	2201      	movs	r2, #1
 800d540:	930c      	str	r3, [sp, #48]	; 0x30
 800d542:	23fa      	movs	r3, #250	; 0xfa
 800d544:	2500      	movs	r5, #0
 800d546:	56a2      	ldrsb	r2, [r4, r2]
 800d548:	011b      	lsls	r3, r3, #4
    { // High Speed FSK channel
        modem = MODEM_FSK;
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800d54a:	9308      	str	r3, [sp, #32]
 800d54c:	9507      	str	r5, [sp, #28]
 800d54e:	9506      	str	r5, [sp, #24]
 800d550:	9505      	str	r5, [sp, #20]
    if( txConfig->Datarate == DR_7 )
 800d552:	2a07      	cmp	r2, #7
 800d554:	d123      	bne.n	800d59e <RegionEU868TxConfig+0xda>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800d556:	2301      	movs	r3, #1
 800d558:	9304      	str	r3, [sp, #16]
 800d55a:	3304      	adds	r3, #4
 800d55c:	9302      	str	r3, [sp, #8]
 800d55e:	23fa      	movs	r3, #250	; 0xfa
 800d560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	4353      	muls	r3, r2
 800d566:	0028      	movs	r0, r5
 800d568:	9300      	str	r3, [sp, #0]
 800d56a:	4a1a      	ldr	r2, [pc, #104]	; (800d5d4 <RegionEU868TxConfig+0x110>)
 800d56c:	003b      	movs	r3, r7
 800d56e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d570:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d572:	9503      	str	r5, [sp, #12]
 800d574:	9501      	str	r5, [sp, #4]
 800d576:	47b0      	blx	r6
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
    }
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800d578:	4e15      	ldr	r6, [pc, #84]	; (800d5d0 <RegionEU868TxConfig+0x10c>)
 800d57a:	0028      	movs	r0, r5
 800d57c:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 800d57e:	7b21      	ldrb	r1, [r4, #12]
 800d580:	930a      	str	r3, [sp, #40]	; 0x28
 800d582:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 800d584:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800d586:	0028      	movs	r0, r5
 800d588:	7b21      	ldrb	r1, [r4, #12]
 800d58a:	930a      	str	r3, [sp, #40]	; 0x28
 800d58c:	4798      	blx	r3
 800d58e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c

    *txPower = txPowerLimited;
 800d590:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 800d592:	6018      	str	r0, [r3, #0]
    return true;
}
 800d594:	2001      	movs	r0, #1
    *txPower = txPowerLimited;
 800d596:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d598:	701a      	strb	r2, [r3, #0]
}
 800d59a:	b011      	add	sp, #68	; 0x44
 800d59c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800d59e:	2308      	movs	r3, #8
 800d5a0:	2601      	movs	r6, #1
 800d5a2:	9302      	str	r3, [sp, #8]
 800d5a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5a6:	002a      	movs	r2, r5
 800d5a8:	9503      	str	r5, [sp, #12]
 800d5aa:	9300      	str	r3, [sp, #0]
 800d5ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d5ae:	003b      	movs	r3, r7
 800d5b0:	0030      	movs	r0, r6
 800d5b2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d5b4:	9604      	str	r6, [sp, #16]
 800d5b6:	9601      	str	r6, [sp, #4]
 800d5b8:	47a8      	blx	r5
        modem = MODEM_LORA;
 800d5ba:	0035      	movs	r5, r6
 800d5bc:	e7dc      	b.n	800d578 <RegionEU868TxConfig+0xb4>
 800d5be:	46c0      	nop			; (mov r8, r8)
 800d5c0:	08010bfc 	.word	0x08010bfc
 800d5c4:	20000ef0 	.word	0x20000ef0
 800d5c8:	0003d090 	.word	0x0003d090
 800d5cc:	fff85ee0 	.word	0xfff85ee0
 800d5d0:	0801074c 	.word	0x0801074c
 800d5d4:	000061a8 	.word	0x000061a8

0800d5d8 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800d5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t status = 0x07;
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800d5da:	2700      	movs	r7, #0
{
 800d5dc:	0004      	movs	r4, r0
    uint8_t status = 0x07;
 800d5de:	2507      	movs	r5, #7
{
 800d5e0:	b093      	sub	sp, #76	; 0x4c
 800d5e2:	9305      	str	r3, [sp, #20]
    uint16_t chMask = 0;
 800d5e4:	ab06      	add	r3, sp, #24
{
 800d5e6:	9103      	str	r1, [sp, #12]
 800d5e8:	9204      	str	r2, [sp, #16]
    uint16_t chMask = 0;
 800d5ea:	80df      	strh	r7, [r3, #6]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800d5ec:	7a23      	ldrb	r3, [r4, #8]
 800d5ee:	42bb      	cmp	r3, r7
 800d5f0:	d906      	bls.n	800d600 <RegionEU868LinkAdrReq+0x28>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800d5f2:	6863      	ldr	r3, [r4, #4]
 800d5f4:	a908      	add	r1, sp, #32
 800d5f6:	19d8      	adds	r0, r3, r7
 800d5f8:	f7ff fbc3 	bl	800cd82 <RegionCommonParseLinkAdrReq>

        if( nextIndex == 0 )
 800d5fc:	2800      	cmp	r0, #0
 800d5fe:	d141      	bne.n	800d684 <RegionEU868LinkAdrReq+0xac>
    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionEU868GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
 800d600:	a80a      	add	r0, sp, #40	; 0x28
 800d602:	7105      	strb	r5, [r0, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800d604:	7aa3      	ldrb	r3, [r4, #10]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800d606:	ad08      	add	r5, sp, #32
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800d608:	7143      	strb	r3, [r0, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800d60a:	786b      	ldrb	r3, [r5, #1]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800d60c:	220a      	movs	r2, #10
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800d60e:	7183      	strb	r3, [r0, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800d610:	78ab      	ldrb	r3, [r5, #2]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800d612:	a906      	add	r1, sp, #24
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800d614:	71c3      	strb	r3, [r0, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800d616:	782b      	ldrb	r3, [r5, #0]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800d618:	1852      	adds	r2, r2, r1
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800d61a:	7203      	strb	r3, [r0, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800d61c:	7ae3      	ldrb	r3, [r4, #11]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800d61e:	2109      	movs	r1, #9
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800d620:	7243      	strb	r3, [r0, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800d622:	7b23      	ldrb	r3, [r4, #12]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 800d624:	4e38      	ldr	r6, [pc, #224]	; (800d708 <RegionEU868LinkAdrReq+0x130>)
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800d626:	7283      	strb	r3, [r0, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800d628:	7b63      	ldrb	r3, [r4, #13]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 800d62a:	6186      	str	r6, [r0, #24]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800d62c:	72c3      	strb	r3, [r0, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800d62e:	2310      	movs	r3, #16
 800d630:	7303      	strb	r3, [r0, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800d632:	ab06      	add	r3, sp, #24
 800d634:	3306      	adds	r3, #6
 800d636:	6103      	str	r3, [r0, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800d638:	23e0      	movs	r3, #224	; 0xe0
 800d63a:	00db      	lsls	r3, r3, #3
 800d63c:	8283      	strh	r3, [r0, #20]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800d63e:	2307      	movs	r3, #7
 800d640:	8383      	strh	r3, [r0, #28]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800d642:	6823      	ldr	r3, [r4, #0]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800d644:	ac06      	add	r4, sp, #24
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800d646:	930a      	str	r3, [sp, #40]	; 0x28
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800d648:	1909      	adds	r1, r1, r4
 800d64a:	002b      	movs	r3, r5
 800d64c:	f7ff fbb4 	bl	800cdb8 <RegionCommonLinkAdrReqVerifyParams>
 800d650:	0004      	movs	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800d652:	2807      	cmp	r0, #7
 800d654:	d108      	bne.n	800d668 <RegionEU868LinkAdrReq+0x90>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 800d656:	2202      	movs	r2, #2
 800d658:	2100      	movs	r1, #0
 800d65a:	482c      	ldr	r0, [pc, #176]	; (800d70c <RegionEU868LinkAdrReq+0x134>)
 800d65c:	f001 f9c6 	bl	800e9ec <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 800d660:	ab06      	add	r3, sp, #24
 800d662:	88db      	ldrh	r3, [r3, #6]
 800d664:	36fe      	adds	r6, #254	; 0xfe
 800d666:	8473      	strh	r3, [r6, #34]	; 0x22
    *txPowOut = linkAdrParams.TxPower;
    *nbRepOut = linkAdrParams.NbRep;
    *nbBytesParsed = bytesProcessed;

    return status;
}
 800d668:	0020      	movs	r0, r4
    *drOut = linkAdrParams.Datarate;
 800d66a:	786b      	ldrb	r3, [r5, #1]
 800d66c:	9a03      	ldr	r2, [sp, #12]
 800d66e:	7013      	strb	r3, [r2, #0]
    *txPowOut = linkAdrParams.TxPower;
 800d670:	78ab      	ldrb	r3, [r5, #2]
 800d672:	9a04      	ldr	r2, [sp, #16]
 800d674:	7013      	strb	r3, [r2, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800d676:	782b      	ldrb	r3, [r5, #0]
 800d678:	9a05      	ldr	r2, [sp, #20]
 800d67a:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 800d67c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d67e:	701f      	strb	r7, [r3, #0]
}
 800d680:	b013      	add	sp, #76	; 0x4c
 800d682:	bdf0      	pop	{r4, r5, r6, r7, pc}
        chMask = linkAdrParams.ChMask;
 800d684:	ab06      	add	r3, sp, #24
 800d686:	899b      	ldrh	r3, [r3, #12]
 800d688:	aa06      	add	r2, sp, #24
 800d68a:	80d3      	strh	r3, [r2, #6]
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800d68c:	aa06      	add	r2, sp, #24
        bytesProcessed += nextIndex;
 800d68e:	183f      	adds	r7, r7, r0
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800d690:	7ad0      	ldrb	r0, [r2, #11]
        bytesProcessed += nextIndex;
 800d692:	b2ff      	uxtb	r7, r7
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800d694:	2800      	cmp	r0, #0
 800d696:	d122      	bne.n	800d6de <RegionEU868LinkAdrReq+0x106>
            status &= 0xFE; // Channel mask KO
 800d698:	2506      	movs	r5, #6
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d0a6      	beq.n	800d5ec <RegionEU868LinkAdrReq+0x14>
                        status &= 0xFE; // Channel mask KO
 800d69e:	2606      	movs	r6, #6
 800d6a0:	4a19      	ldr	r2, [pc, #100]	; (800d708 <RegionEU868LinkAdrReq+0x130>)
{
 800d6a2:	2507      	movs	r5, #7
 800d6a4:	9201      	str	r2, [sp, #4]
 800d6a6:	2200      	movs	r2, #0
                        status &= 0xFE; // Channel mask KO
 800d6a8:	46b4      	mov	ip, r6
{
 800d6aa:	9202      	str	r2, [sp, #8]
                if( linkAdrParams.ChMaskCtrl == 6 )
 800d6ac:	2806      	cmp	r0, #6
 800d6ae:	d11f      	bne.n	800d6f0 <RegionEU868LinkAdrReq+0x118>
                    if( NvmCtx.Channels[i].Frequency != 0 )
 800d6b0:	9901      	ldr	r1, [sp, #4]
 800d6b2:	680e      	ldr	r6, [r1, #0]
 800d6b4:	2e00      	cmp	r6, #0
 800d6b6:	d005      	beq.n	800d6c4 <RegionEU868LinkAdrReq+0xec>
                        chMask |= 1 << i;
 800d6b8:	2601      	movs	r6, #1
 800d6ba:	4096      	lsls	r6, r2
 800d6bc:	2101      	movs	r1, #1
 800d6be:	4333      	orrs	r3, r6
 800d6c0:	b29b      	uxth	r3, r3
 800d6c2:	9102      	str	r1, [sp, #8]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800d6c4:	9901      	ldr	r1, [sp, #4]
 800d6c6:	3201      	adds	r2, #1
 800d6c8:	310c      	adds	r1, #12
 800d6ca:	9101      	str	r1, [sp, #4]
 800d6cc:	2a10      	cmp	r2, #16
 800d6ce:	d1ed      	bne.n	800d6ac <RegionEU868LinkAdrReq+0xd4>
 800d6d0:	9a02      	ldr	r2, [sp, #8]
 800d6d2:	2a00      	cmp	r2, #0
 800d6d4:	d100      	bne.n	800d6d8 <RegionEU868LinkAdrReq+0x100>
 800d6d6:	e789      	b.n	800d5ec <RegionEU868LinkAdrReq+0x14>
 800d6d8:	aa06      	add	r2, sp, #24
 800d6da:	80d3      	strh	r3, [r2, #6]
 800d6dc:	e786      	b.n	800d5ec <RegionEU868LinkAdrReq+0x14>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800d6de:	1e42      	subs	r2, r0, #1
            status &= 0xFE; // Channel mask KO
 800d6e0:	2506      	movs	r5, #6
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800d6e2:	2a04      	cmp	r2, #4
 800d6e4:	d800      	bhi.n	800d6e8 <RegionEU868LinkAdrReq+0x110>
 800d6e6:	e781      	b.n	800d5ec <RegionEU868LinkAdrReq+0x14>
 800d6e8:	42a8      	cmp	r0, r5
 800d6ea:	d000      	beq.n	800d6ee <RegionEU868LinkAdrReq+0x116>
 800d6ec:	e77e      	b.n	800d5ec <RegionEU868LinkAdrReq+0x14>
 800d6ee:	e7d6      	b.n	800d69e <RegionEU868LinkAdrReq+0xc6>
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800d6f0:	001e      	movs	r6, r3
 800d6f2:	2101      	movs	r1, #1
 800d6f4:	4116      	asrs	r6, r2
 800d6f6:	420e      	tst	r6, r1
 800d6f8:	d0e4      	beq.n	800d6c4 <RegionEU868LinkAdrReq+0xec>
 800d6fa:	9901      	ldr	r1, [sp, #4]
 800d6fc:	6809      	ldr	r1, [r1, #0]
 800d6fe:	2900      	cmp	r1, #0
 800d700:	d1e0      	bne.n	800d6c4 <RegionEU868LinkAdrReq+0xec>
                        status &= 0xFE; // Channel mask KO
 800d702:	4665      	mov	r5, ip
 800d704:	e7de      	b.n	800d6c4 <RegionEU868LinkAdrReq+0xec>
 800d706:	46c0      	nop			; (mov r8, r8)
 800d708:	20000ef0 	.word	0x20000ef0
 800d70c:	20001010 	.word	0x20001010

0800d710 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800d710:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t status = 0x07;
    uint8_t band = 0;
 800d712:	466b      	mov	r3, sp
 800d714:	2600      	movs	r6, #0
 800d716:	1dd9      	adds	r1, r3, #7
{
 800d718:	0005      	movs	r5, r0

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800d71a:	6840      	ldr	r0, [r0, #4]
    uint8_t band = 0;
 800d71c:	700e      	strb	r6, [r1, #0]
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800d71e:	f7ff fc7f 	bl	800d020 <VerifyRfFreq>
    {
        status &= 0xFE; // Channel frequency KO
 800d722:	0004      	movs	r4, r0
 800d724:	1e60      	subs	r0, r4, #1
 800d726:	4184      	sbcs	r4, r0
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800d728:	2000      	movs	r0, #0
 800d72a:	2207      	movs	r2, #7
 800d72c:	0031      	movs	r1, r6
 800d72e:	5628      	ldrsb	r0, [r5, r0]
        status &= 0xFE; // Channel frequency KO
 800d730:	3406      	adds	r4, #6
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800d732:	f7ff fa9b 	bl	800cc6c <RegionCommonValueInRange>
 800d736:	42b0      	cmp	r0, r6
 800d738:	d101      	bne.n	800d73e <RegionEU868RxParamSetupReq+0x2e>
    {
        status &= 0xFD; // Datarate KO
 800d73a:	2302      	movs	r3, #2
 800d73c:	439c      	bics	r4, r3
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800d73e:	2001      	movs	r0, #1
 800d740:	2205      	movs	r2, #5
 800d742:	2100      	movs	r1, #0
 800d744:	5628      	ldrsb	r0, [r5, r0]
 800d746:	f7ff fa91 	bl	800cc6c <RegionCommonValueInRange>
 800d74a:	2800      	cmp	r0, #0
 800d74c:	d101      	bne.n	800d752 <RegionEU868RxParamSetupReq+0x42>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800d74e:	2304      	movs	r3, #4
 800d750:	439c      	bics	r4, r3
    }

    return status;
}
 800d752:	0020      	movs	r0, r4
 800d754:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

0800d756 <RegionEU868TxParamSetupReq>:
    return status;
}

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    return -1;
 800d756:	2001      	movs	r0, #1
}
 800d758:	4240      	negs	r0, r0
 800d75a:	4770      	bx	lr

0800d75c <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800d75c:	b513      	push	{r0, r1, r4, lr}
    uint8_t status = 0x03;
    uint8_t band = 0;
 800d75e:	466b      	mov	r3, sp
 800d760:	1dd9      	adds	r1, r3, #7
 800d762:	2300      	movs	r3, #0
{
 800d764:	0004      	movs	r4, r0

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800d766:	6840      	ldr	r0, [r0, #4]
    uint8_t band = 0;
 800d768:	700b      	strb	r3, [r1, #0]
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800d76a:	f7ff fc59 	bl	800d020 <VerifyRfFreq>
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800d76e:	220c      	movs	r2, #12
        status &= 0xFE;
 800d770:	1e43      	subs	r3, r0, #1
 800d772:	4198      	sbcs	r0, r3
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800d774:	7821      	ldrb	r1, [r4, #0]
 800d776:	4b08      	ldr	r3, [pc, #32]	; (800d798 <RegionEU868DlChannelReq+0x3c>)
 800d778:	434a      	muls	r2, r1
 800d77a:	58d1      	ldr	r1, [r2, r3]
        status &= 0xFE;
 800d77c:	3002      	adds	r0, #2
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800d77e:	2900      	cmp	r1, #0
 800d780:	d102      	bne.n	800d788 <RegionEU868DlChannelReq+0x2c>
    {
        status &= 0xFD;
 800d782:	2302      	movs	r3, #2
 800d784:	4398      	bics	r0, r3
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

    return status;
}
 800d786:	bd16      	pop	{r1, r2, r4, pc}
    if( status == 0x03 )
 800d788:	2803      	cmp	r0, #3
 800d78a:	d103      	bne.n	800d794 <RegionEU868DlChannelReq+0x38>
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800d78c:	189b      	adds	r3, r3, r2
 800d78e:	6862      	ldr	r2, [r4, #4]
 800d790:	605a      	str	r2, [r3, #4]
 800d792:	e7f8      	b.n	800d786 <RegionEU868DlChannelReq+0x2a>
 800d794:	2002      	movs	r0, #2
 800d796:	e7f6      	b.n	800d786 <RegionEU868DlChannelReq+0x2a>
 800d798:	20000ef0 	.word	0x20000ef0

0800d79c <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
    return currentDr;
}
 800d79c:	4770      	bx	lr
	...

0800d7a0 <RegionEU868CalcBackOff>:

void RegionEU868CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 800d7a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d7a2:	0003      	movs	r3, r0
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 800d7a4:	4a09      	ldr	r2, [pc, #36]	; (800d7cc <RegionEU868CalcBackOff+0x2c>)
 800d7a6:	a801      	add	r0, sp, #4
 800d7a8:	9201      	str	r2, [sp, #4]
    calcBackOffParams.Bands = NvmCtx.Bands;
 800d7aa:	4a09      	ldr	r2, [pc, #36]	; (800d7d0 <RegionEU868CalcBackOff+0x30>)
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
    calcBackOffParams.Joined = calcBackOff->Joined;
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
    calcBackOffParams.Channel = calcBackOff->Channel;
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 800d7ac:	6859      	ldr	r1, [r3, #4]
    calcBackOffParams.Bands = NvmCtx.Bands;
 800d7ae:	6042      	str	r2, [r0, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 800d7b0:	785a      	ldrb	r2, [r3, #1]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 800d7b2:	60c1      	str	r1, [r0, #12]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 800d7b4:	7202      	strb	r2, [r0, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 800d7b6:	781a      	ldrb	r2, [r3, #0]
 800d7b8:	7242      	strb	r2, [r0, #9]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 800d7ba:	689a      	ldr	r2, [r3, #8]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 800d7bc:	885b      	ldrh	r3, [r3, #2]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 800d7be:	6102      	str	r2, [r0, #16]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 800d7c0:	8143      	strh	r3, [r0, #10]

    RegionCommonCalcBackOff( &calcBackOffParams );
 800d7c2:	f7ff fbd4 	bl	800cf6e <RegionCommonCalcBackOff>
}
 800d7c6:	b007      	add	sp, #28
 800d7c8:	bd00      	pop	{pc}
 800d7ca:	46c0      	nop			; (mov r8, r8)
 800d7cc:	20000ef0 	.word	0x20000ef0
 800d7d0:	20000fb0 	.word	0x20000fb0

0800d7d4 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800d7d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t nbEnabledChannels = 0;
    uint8_t delayTx = 0;
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800d7d6:	2400      	movs	r4, #0
{
 800d7d8:	b08b      	sub	sp, #44	; 0x2c
 800d7da:	9104      	str	r1, [sp, #16]
 800d7dc:	0005      	movs	r5, r0
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800d7de:	0021      	movs	r1, r4
{
 800d7e0:	0017      	movs	r7, r2
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800d7e2:	a807      	add	r0, sp, #28
 800d7e4:	220c      	movs	r2, #12
{
 800d7e6:	001e      	movs	r6, r3
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800d7e8:	9406      	str	r4, [sp, #24]
 800d7ea:	f002 f9f0 	bl	800fbce <memset>
    TimerTime_t nextTxDelay = 0;

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 800d7ee:	2201      	movs	r2, #1
 800d7f0:	0021      	movs	r1, r4
 800d7f2:	483d      	ldr	r0, [pc, #244]	; (800d8e8 <RegionEU868NextChannel+0x114>)
 800d7f4:	f7ff fa58 	bl	800cca8 <RegionCommonCountChannels>
 800d7f8:	42a0      	cmp	r0, r4
 800d7fa:	d105      	bne.n	800d808 <RegionEU868NextChannel+0x34>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800d7fc:	2207      	movs	r2, #7
 800d7fe:	4b3b      	ldr	r3, [pc, #236]	; (800d8ec <RegionEU868NextChannel+0x118>)
 800d800:	33fe      	adds	r3, #254	; 0xfe
 800d802:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800d804:	430a      	orrs	r2, r1
 800d806:	845a      	strh	r2, [r3, #34]	; 0x22
    }

    TimerTime_t elapsed = TimerGetElapsedTime( nextChanParams->LastAggrTx );
 800d808:	6868      	ldr	r0, [r5, #4]
 800d80a:	f001 f826 	bl	800e85a <TimerGetElapsedTime>
    if( ( nextChanParams->LastAggrTx == 0 ) || ( nextChanParams->AggrTimeOff <= elapsed ) )
 800d80e:	686b      	ldr	r3, [r5, #4]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d002      	beq.n	800d81a <RegionEU868NextChannel+0x46>
 800d814:	682b      	ldr	r3, [r5, #0]
 800d816:	4283      	cmp	r3, r0
 800d818:	d853      	bhi.n	800d8c2 <RegionEU868NextChannel+0xee>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800d81a:	2400      	movs	r4, #0
 800d81c:	6034      	str	r4, [r6, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, EU868_MAX_NB_BANDS );
 800d81e:	2306      	movs	r3, #6
 800d820:	7aa9      	ldrb	r1, [r5, #10]
 800d822:	7a68      	ldrb	r0, [r5, #9]
 800d824:	4a32      	ldr	r2, [pc, #200]	; (800d8f0 <RegionEU868NextChannel+0x11c>)
 800d826:	f7ff fa72 	bl	800cd0e <RegionCommonUpdateBandTimeOff>
 800d82a:	9001      	str	r0, [sp, #4]

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 800d82c:	7a6b      	ldrb	r3, [r5, #9]
 800d82e:	4e2f      	ldr	r6, [pc, #188]	; (800d8ec <RegionEU868NextChannel+0x118>)
 800d830:	9302      	str	r3, [sp, #8]
 800d832:	2308      	movs	r3, #8
 800d834:	56eb      	ldrsb	r3, [r5, r3]
    uint8_t nbEnabledChannels = 0;
 800d836:	0025      	movs	r5, r4
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 800d838:	9303      	str	r3, [sp, #12]
    uint8_t delayTransmission = 0;
 800d83a:	9400      	str	r4, [sp, #0]
 800d83c:	b2e3      	uxtb	r3, r4
 800d83e:	9305      	str	r3, [sp, #20]
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 800d840:	4b2c      	ldr	r3, [pc, #176]	; (800d8f4 <RegionEU868NextChannel+0x120>)
 800d842:	2201      	movs	r2, #1
 800d844:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d846:	4123      	asrs	r3, r4
 800d848:	4213      	tst	r3, r2
 800d84a:	d111      	bne.n	800d870 <RegionEU868NextChannel+0x9c>
        for( uint8_t j = 0; j < 16; j++ )
 800d84c:	3401      	adds	r4, #1
 800d84e:	360c      	adds	r6, #12
 800d850:	2c10      	cmp	r4, #16
 800d852:	d1f3      	bne.n	800d83c <RegionEU868NextChannel+0x68>
    {
        delayTx++;
        nextTxDelay = nextChanParams->AggrTimeOff - elapsed;
    }

    if( nbEnabledChannels > 0 )
 800d854:	2d00      	cmp	r5, #0
 800d856:	d03a      	beq.n	800d8ce <RegionEU868NextChannel+0xfa>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800d858:	2000      	movs	r0, #0
 800d85a:	1e69      	subs	r1, r5, #1
 800d85c:	f001 f8a6 	bl	800e9ac <randr>
 800d860:	ab06      	add	r3, sp, #24
 800d862:	5c1b      	ldrb	r3, [r3, r0]

        *time = 0;
 800d864:	2000      	movs	r0, #0
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800d866:	9a04      	ldr	r2, [sp, #16]
 800d868:	7013      	strb	r3, [r2, #0]
        *time = 0;
 800d86a:	6038      	str	r0, [r7, #0]
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
        *time = 0;
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800d86c:	b00b      	add	sp, #44	; 0x2c
 800d86e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if( channels[i + j].Frequency == 0 )
 800d870:	6833      	ldr	r3, [r6, #0]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d0ea      	beq.n	800d84c <RegionEU868NextChannel+0x78>
                if( joined == false )
 800d876:	9b02      	ldr	r3, [sp, #8]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d01c      	beq.n	800d8b6 <RegionEU868NextChannel+0xe2>
                                              channels[i + j].DrRange.Fields.Max ) == false )
 800d87c:	2208      	movs	r2, #8
 800d87e:	7a31      	ldrb	r1, [r6, #8]
 800d880:	56b2      	ldrsb	r2, [r6, r2]
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 800d882:	0709      	lsls	r1, r1, #28
 800d884:	9803      	ldr	r0, [sp, #12]
 800d886:	1112      	asrs	r2, r2, #4
 800d888:	1709      	asrs	r1, r1, #28
 800d88a:	f7ff f9ef 	bl	800cc6c <RegionCommonValueInRange>
 800d88e:	2800      	cmp	r0, #0
 800d890:	d0dc      	beq.n	800d84c <RegionEU868NextChannel+0x78>
                if( bands[channels[i + j].Band].TimeOff > 0 )
 800d892:	7a73      	ldrb	r3, [r6, #9]
 800d894:	4a16      	ldr	r2, [pc, #88]	; (800d8f0 <RegionEU868NextChannel+0x11c>)
 800d896:	011b      	lsls	r3, r3, #4
 800d898:	189b      	adds	r3, r3, r2
 800d89a:	68db      	ldr	r3, [r3, #12]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d105      	bne.n	800d8ac <RegionEU868NextChannel+0xd8>
                enabledChannels[nbEnabledChannels++] = i + j;
 800d8a0:	1c6b      	adds	r3, r5, #1
 800d8a2:	aa06      	add	r2, sp, #24
 800d8a4:	b2e1      	uxtb	r1, r4
 800d8a6:	5551      	strb	r1, [r2, r5]
 800d8a8:	b2dd      	uxtb	r5, r3
 800d8aa:	e7cf      	b.n	800d84c <RegionEU868NextChannel+0x78>
                    delayTransmission++;
 800d8ac:	9b00      	ldr	r3, [sp, #0]
 800d8ae:	3301      	adds	r3, #1
 800d8b0:	b2db      	uxtb	r3, r3
 800d8b2:	9300      	str	r3, [sp, #0]
                    continue;
 800d8b4:	e7ca      	b.n	800d84c <RegionEU868NextChannel+0x78>
                    if( ( EU868_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 800d8b6:	2307      	movs	r3, #7
 800d8b8:	2201      	movs	r2, #1
 800d8ba:	4123      	asrs	r3, r4
 800d8bc:	4213      	tst	r3, r2
 800d8be:	d1dd      	bne.n	800d87c <RegionEU868NextChannel+0xa8>
 800d8c0:	e7c4      	b.n	800d84c <RegionEU868NextChannel+0x78>
        nextTxDelay = nextChanParams->AggrTimeOff - elapsed;
 800d8c2:	1a1b      	subs	r3, r3, r0
 800d8c4:	9301      	str	r3, [sp, #4]
            *time = nextTxDelay;
 800d8c6:	9b01      	ldr	r3, [sp, #4]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800d8c8:	200b      	movs	r0, #11
            *time = nextTxDelay;
 800d8ca:	603b      	str	r3, [r7, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800d8cc:	e7ce      	b.n	800d86c <RegionEU868NextChannel+0x98>
        if( delayTx > 0 )
 800d8ce:	9b00      	ldr	r3, [sp, #0]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d1f8      	bne.n	800d8c6 <RegionEU868NextChannel+0xf2>
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800d8d4:	2207      	movs	r2, #7
 800d8d6:	4b05      	ldr	r3, [pc, #20]	; (800d8ec <RegionEU868NextChannel+0x118>)
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800d8d8:	200c      	movs	r0, #12
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800d8da:	33fe      	adds	r3, #254	; 0xfe
 800d8dc:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800d8de:	430a      	orrs	r2, r1
 800d8e0:	845a      	strh	r2, [r3, #34]	; 0x22
        *time = 0;
 800d8e2:	9b00      	ldr	r3, [sp, #0]
 800d8e4:	603b      	str	r3, [r7, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800d8e6:	e7c1      	b.n	800d86c <RegionEU868NextChannel+0x98>
 800d8e8:	20001010 	.word	0x20001010
 800d8ec:	20000ef0 	.word	0x20000ef0
 800d8f0:	20000fb0 	.word	0x20000fb0
 800d8f4:	20000fee 	.word	0x20000fee

0800d8f8 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800d8f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t band = 0;
 800d8fa:	2500      	movs	r5, #0
 800d8fc:	466b      	mov	r3, sp
 800d8fe:	71dd      	strb	r5, [r3, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800d900:	7906      	ldrb	r6, [r0, #4]
{
 800d902:	0004      	movs	r4, r0

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800d904:	2e02      	cmp	r6, #2
 800d906:	d801      	bhi.n	800d90c <RegionEU868ChannelAdd+0x14>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800d908:	2006      	movs	r0, #6

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
    NvmCtx.Channels[id].Band = band;
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
    return LORAMAC_STATUS_OK;
}
 800d90a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d90c:	2003      	movs	r0, #3
    if( id >= EU868_MAX_NB_CHANNELS )
 800d90e:	2e0f      	cmp	r6, #15
 800d910:	d8fb      	bhi.n	800d90a <RegionEU868ChannelAdd+0x12>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800d912:	6823      	ldr	r3, [r4, #0]
 800d914:	0029      	movs	r1, r5
 800d916:	7a18      	ldrb	r0, [r3, #8]
 800d918:	2207      	movs	r2, #7
 800d91a:	0700      	lsls	r0, r0, #28
 800d91c:	1700      	asrs	r0, r0, #28
 800d91e:	f7ff f9a5 	bl	800cc6c <RegionCommonValueInRange>
 800d922:	0007      	movs	r7, r0
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800d924:	2008      	movs	r0, #8
 800d926:	6823      	ldr	r3, [r4, #0]
 800d928:	0029      	movs	r1, r5
 800d92a:	5618      	ldrsb	r0, [r3, r0]
 800d92c:	2207      	movs	r2, #7
 800d92e:	1100      	asrs	r0, r0, #4
 800d930:	f7ff f99c 	bl	800cc6c <RegionCommonValueInRange>
        drInvalid = true;
 800d934:	2501      	movs	r5, #1
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800d936:	2800      	cmp	r0, #0
 800d938:	d002      	beq.n	800d940 <RegionEU868ChannelAdd+0x48>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800d93a:	427d      	negs	r5, r7
 800d93c:	417d      	adcs	r5, r7
 800d93e:	b2ed      	uxtb	r5, r5
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800d940:	6820      	ldr	r0, [r4, #0]
 800d942:	7a03      	ldrb	r3, [r0, #8]
 800d944:	071a      	lsls	r2, r3, #28
 800d946:	b25b      	sxtb	r3, r3
 800d948:	1712      	asrs	r2, r2, #28
 800d94a:	111b      	asrs	r3, r3, #4
 800d94c:	429a      	cmp	r2, r3
 800d94e:	dd00      	ble.n	800d952 <RegionEU868ChannelAdd+0x5a>
        drInvalid = true;
 800d950:	2501      	movs	r5, #1
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800d952:	466b      	mov	r3, sp
 800d954:	6800      	ldr	r0, [r0, #0]
 800d956:	1dd9      	adds	r1, r3, #7
 800d958:	f7ff fb62 	bl	800d020 <VerifyRfFreq>
 800d95c:	2800      	cmp	r0, #0
 800d95e:	d103      	bne.n	800d968 <RegionEU868ChannelAdd+0x70>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800d960:	2004      	movs	r0, #4
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800d962:	2d00      	cmp	r5, #0
 800d964:	d0d1      	beq.n	800d90a <RegionEU868ChannelAdd+0x12>
 800d966:	e7cf      	b.n	800d908 <RegionEU868ChannelAdd+0x10>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800d968:	2005      	movs	r0, #5
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800d96a:	2d00      	cmp	r5, #0
 800d96c:	d1cd      	bne.n	800d90a <RegionEU868ChannelAdd+0x12>
    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 800d96e:	220c      	movs	r2, #12
 800d970:	0017      	movs	r7, r2
 800d972:	4377      	muls	r7, r6
 800d974:	4b08      	ldr	r3, [pc, #32]	; (800d998 <RegionEU868ChannelAdd+0xa0>)
 800d976:	6821      	ldr	r1, [r4, #0]
 800d978:	18ff      	adds	r7, r7, r3
 800d97a:	0038      	movs	r0, r7
 800d97c:	f001 f821 	bl	800e9c2 <memcpy1>
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 800d980:	2101      	movs	r1, #1
    NvmCtx.Channels[id].Band = band;
 800d982:	466b      	mov	r3, sp
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 800d984:	40b1      	lsls	r1, r6
    NvmCtx.Channels[id].Band = band;
 800d986:	79db      	ldrb	r3, [r3, #7]
    return LORAMAC_STATUS_OK;
 800d988:	0028      	movs	r0, r5
    NvmCtx.Channels[id].Band = band;
 800d98a:	727b      	strb	r3, [r7, #9]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 800d98c:	4b02      	ldr	r3, [pc, #8]	; (800d998 <RegionEU868ChannelAdd+0xa0>)
 800d98e:	33fe      	adds	r3, #254	; 0xfe
 800d990:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800d992:	430a      	orrs	r2, r1
 800d994:	845a      	strh	r2, [r3, #34]	; 0x22
    return LORAMAC_STATUS_OK;
 800d996:	e7b8      	b.n	800d90a <RegionEU868ChannelAdd+0x12>
 800d998:	20000ef0 	.word	0x20000ef0

0800d99c <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 800d99c:	b510      	push	{r4, lr}
    uint8_t id = channelRemove->ChannelId;
 800d99e:	7804      	ldrb	r4, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
    {
        return false;
 800d9a0:	2100      	movs	r1, #0
    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800d9a2:	2c02      	cmp	r4, #2
 800d9a4:	d90c      	bls.n	800d9c0 <RegionEU868ChannelsRemove+0x24>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800d9a6:	220c      	movs	r2, #12
 800d9a8:	0013      	movs	r3, r2
 800d9aa:	4363      	muls	r3, r4
 800d9ac:	4805      	ldr	r0, [pc, #20]	; (800d9c4 <RegionEU868ChannelsRemove+0x28>)
 800d9ae:	18c0      	adds	r0, r0, r3
 800d9b0:	f002 f90d 	bl	800fbce <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800d9b4:	0021      	movs	r1, r4
 800d9b6:	2210      	movs	r2, #16
 800d9b8:	4803      	ldr	r0, [pc, #12]	; (800d9c8 <RegionEU868ChannelsRemove+0x2c>)
 800d9ba:	f7ff f961 	bl	800cc80 <RegionCommonChanDisable>
 800d9be:	0001      	movs	r1, r0
}
 800d9c0:	0008      	movs	r0, r1
 800d9c2:	bd10      	pop	{r4, pc}
 800d9c4:	20000ef0 	.word	0x20000ef0
 800d9c8:	20001010 	.word	0x20001010

0800d9cc <RegionEU868ApplyCFList>:
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800d9cc:	2350      	movs	r3, #80	; 0x50
{
 800d9ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9d0:	b087      	sub	sp, #28
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800d9d2:	ac03      	add	r4, sp, #12
 800d9d4:	7223      	strb	r3, [r4, #8]
    if( applyCFList->Size != 16 )
 800d9d6:	7903      	ldrb	r3, [r0, #4]
{
 800d9d8:	0006      	movs	r6, r0
    if( applyCFList->Size != 16 )
 800d9da:	2b10      	cmp	r3, #16
 800d9dc:	d12e      	bne.n	800da3c <RegionEU868ApplyCFList+0x70>
    if( applyCFList->Payload[15] != 0 )
 800d9de:	6803      	ldr	r3, [r0, #0]
 800d9e0:	7bdd      	ldrb	r5, [r3, #15]
 800d9e2:	2d00      	cmp	r5, #0
 800d9e4:	d12a      	bne.n	800da3c <RegionEU868ApplyCFList+0x70>
            newChannel.Frequency *= 100;
 800d9e6:	2764      	movs	r7, #100	; 0x64
 800d9e8:	1cea      	adds	r2, r5, #3
 800d9ea:	b2d2      	uxtb	r2, r2
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800d9ec:	2a07      	cmp	r2, #7
 800d9ee:	d818      	bhi.n	800da22 <RegionEU868ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800d9f0:	2003      	movs	r0, #3
 800d9f2:	4368      	muls	r0, r5
 800d9f4:	6833      	ldr	r3, [r6, #0]
 800d9f6:	5c19      	ldrb	r1, [r3, r0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800d9f8:	1818      	adds	r0, r3, r0
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800d9fa:	6021      	str	r1, [r4, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800d9fc:	7843      	ldrb	r3, [r0, #1]
 800d9fe:	021b      	lsls	r3, r3, #8
 800da00:	4319      	orrs	r1, r3
 800da02:	6021      	str	r1, [r4, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800da04:	7883      	ldrb	r3, [r0, #2]
 800da06:	041b      	lsls	r3, r3, #16
 800da08:	430b      	orrs	r3, r1
            newChannel.Rx1Frequency = 0;
 800da0a:	2100      	movs	r1, #0
            newChannel.Frequency *= 100;
 800da0c:	437b      	muls	r3, r7
            newChannel.Rx1Frequency = 0;
 800da0e:	6061      	str	r1, [r4, #4]
            newChannel.Frequency *= 100;
 800da10:	6023      	str	r3, [r4, #0]
        if( newChannel.Frequency != 0 )
 800da12:	428b      	cmp	r3, r1
 800da14:	d10a      	bne.n	800da2c <RegionEU868ApplyCFList+0x60>
            channelRemove.ChannelId = chanIdx;
 800da16:	466b      	mov	r3, sp
            RegionEU868ChannelsRemove( &channelRemove );
 800da18:	4668      	mov	r0, sp
            channelRemove.ChannelId = chanIdx;
 800da1a:	701a      	strb	r2, [r3, #0]
            RegionEU868ChannelsRemove( &channelRemove );
 800da1c:	f7ff ffbe 	bl	800d99c <RegionEU868ChannelsRemove>
 800da20:	e009      	b.n	800da36 <RegionEU868ApplyCFList+0x6a>
            newChannel.Frequency = 0;
 800da22:	2300      	movs	r3, #0
 800da24:	6023      	str	r3, [r4, #0]
            newChannel.DrRange.Value = 0;
 800da26:	7223      	strb	r3, [r4, #8]
            newChannel.Rx1Frequency = 0;
 800da28:	6063      	str	r3, [r4, #4]
        if( newChannel.Frequency != 0 )
 800da2a:	e7f4      	b.n	800da16 <RegionEU868ApplyCFList+0x4a>
            channelAdd.NewChannel = &newChannel;
 800da2c:	a801      	add	r0, sp, #4
 800da2e:	9401      	str	r4, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800da30:	7102      	strb	r2, [r0, #4]
            RegionEU868ChannelAdd( &channelAdd );
 800da32:	f7ff ff61 	bl	800d8f8 <RegionEU868ChannelAdd>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800da36:	3501      	adds	r5, #1
 800da38:	2d0d      	cmp	r5, #13
 800da3a:	d1d5      	bne.n	800d9e8 <RegionEU868ApplyCFList+0x1c>
}
 800da3c:	b007      	add	sp, #28
 800da3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800da40 <RegionEU868NewChannelReq>:
{
 800da40:	b507      	push	{r0, r1, r2, lr}
    if( newChannelReq->NewChannel->Frequency == 0 )
 800da42:	6802      	ldr	r2, [r0, #0]
 800da44:	7903      	ldrb	r3, [r0, #4]
 800da46:	6811      	ldr	r1, [r2, #0]
 800da48:	2900      	cmp	r1, #0
 800da4a:	d10a      	bne.n	800da62 <RegionEU868NewChannelReq+0x22>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800da4c:	466a      	mov	r2, sp
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800da4e:	4668      	mov	r0, sp
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800da50:	7013      	strb	r3, [r2, #0]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800da52:	f7ff ffa3 	bl	800d99c <RegionEU868ChannelsRemove>
    uint8_t status = 0x03;
 800da56:	2303      	movs	r3, #3
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800da58:	2800      	cmp	r0, #0
 800da5a:	d100      	bne.n	800da5e <RegionEU868NewChannelReq+0x1e>
            status &= 0xFC;
 800da5c:	2300      	movs	r3, #0
}
 800da5e:	0018      	movs	r0, r3
 800da60:	bd0e      	pop	{r1, r2, r3, pc}
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800da62:	9200      	str	r2, [sp, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800da64:	466a      	mov	r2, sp
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800da66:	4668      	mov	r0, sp
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800da68:	7113      	strb	r3, [r2, #4]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800da6a:	f7ff ff45 	bl	800d8f8 <RegionEU868ChannelAdd>
 800da6e:	2806      	cmp	r0, #6
 800da70:	d8f4      	bhi.n	800da5c <RegionEU868NewChannelReq+0x1c>
 800da72:	4b02      	ldr	r3, [pc, #8]	; (800da7c <RegionEU868NewChannelReq+0x3c>)
 800da74:	335c      	adds	r3, #92	; 0x5c
 800da76:	5c1b      	ldrb	r3, [r3, r0]
 800da78:	e7f1      	b.n	800da5e <RegionEU868NewChannelReq+0x1e>
 800da7a:	46c0      	nop			; (mov r8, r8)
 800da7c:	08010bfc 	.word	0x08010bfc

0800da80 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
    int8_t phyTxPower = 0;
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 800da80:	230c      	movs	r3, #12
{
 800da82:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800da84:	7801      	ldrb	r1, [r0, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 800da86:	4a0f      	ldr	r2, [pc, #60]	; (800dac4 <RegionEU868SetContinuousWave+0x44>)
 800da88:	434b      	muls	r3, r1
 800da8a:	589d      	ldr	r5, [r3, r2]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800da8c:	18d3      	adds	r3, r2, r3
 800da8e:	7a5b      	ldrb	r3, [r3, #9]
{
 800da90:	0004      	movs	r4, r0
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800da92:	330c      	adds	r3, #12
 800da94:	011b      	lsls	r3, r3, #4
 800da96:	18d2      	adds	r2, r2, r3
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800da98:	7893      	ldrb	r3, [r2, #2]
 800da9a:	2202      	movs	r2, #2
 800da9c:	56a2      	ldrsb	r2, [r4, r2]
 800da9e:	7881      	ldrb	r1, [r0, #2]
 800daa0:	1c18      	adds	r0, r3, #0
 800daa2:	b25b      	sxtb	r3, r3
 800daa4:	4293      	cmp	r3, r2
 800daa6:	da00      	bge.n	800daaa <RegionEU868SetContinuousWave+0x2a>
 800daa8:	1c08      	adds	r0, r1, #0

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800daaa:	68a2      	ldr	r2, [r4, #8]
 800daac:	6861      	ldr	r1, [r4, #4]
 800daae:	b240      	sxtb	r0, r0
 800dab0:	f7ff fa48 	bl	800cf44 <RegionCommonComputeTxPower>

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800dab4:	4b04      	ldr	r3, [pc, #16]	; (800dac8 <RegionEU868SetContinuousWave+0x48>)
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800dab6:	0001      	movs	r1, r0
    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800dab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daba:	0028      	movs	r0, r5
 800dabc:	89a2      	ldrh	r2, [r4, #12]
 800dabe:	9301      	str	r3, [sp, #4]
 800dac0:	4798      	blx	r3
}
 800dac2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800dac4:	20000ef0 	.word	0x20000ef0
 800dac8:	0801074c 	.word	0x0801074c

0800dacc <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    int8_t datarate = dr - drOffset;
 800dacc:	1a8a      	subs	r2, r1, r2
 800dace:	b252      	sxtb	r2, r2

    if( datarate < 0 )
    {
        datarate = DR_0;
    }
    return datarate;
 800dad0:	1c10      	adds	r0, r2, #0
 800dad2:	2a00      	cmp	r2, #0
 800dad4:	da00      	bge.n	800dad8 <RegionEU868ApplyDrOffset+0xc>
 800dad6:	2000      	movs	r0, #0
 800dad8:	b2c0      	uxtb	r0, r0
}
 800dada:	4770      	bx	lr

0800dadc <RegionEU868RxBeaconSetup>:

void RegionEU868RxBeaconSetup( RxBeaconSetup_t* rxBeaconSetup, uint8_t* outDr )
{
 800dadc:	0003      	movs	r3, r0
 800dade:	b510      	push	{r4, lr}
    RegionCommonRxBeaconSetupParams_t regionCommonRxBeaconSetup;

    regionCommonRxBeaconSetup.Datarates = DataratesEU868;
 800dae0:	4a0a      	ldr	r2, [pc, #40]	; (800db0c <RegionEU868RxBeaconSetup+0x30>)
{
 800dae2:	b086      	sub	sp, #24
    regionCommonRxBeaconSetup.Datarates = DataratesEU868;
 800dae4:	3254      	adds	r2, #84	; 0x54
 800dae6:	9201      	str	r2, [sp, #4]
    regionCommonRxBeaconSetup.Frequency = rxBeaconSetup->Frequency;
 800dae8:	689a      	ldr	r2, [r3, #8]
    regionCommonRxBeaconSetup.Datarates = DataratesEU868;
 800daea:	a801      	add	r0, sp, #4
    regionCommonRxBeaconSetup.Frequency = rxBeaconSetup->Frequency;
 800daec:	6042      	str	r2, [r0, #4]
    regionCommonRxBeaconSetup.BeaconSize = EU868_BEACON_SIZE;
 800daee:	4a08      	ldr	r2, [pc, #32]	; (800db10 <RegionEU868RxBeaconSetup+0x34>)
{
 800daf0:	000c      	movs	r4, r1
    regionCommonRxBeaconSetup.BeaconSize = EU868_BEACON_SIZE;
 800daf2:	8102      	strh	r2, [r0, #8]
    regionCommonRxBeaconSetup.BeaconDatarate = EU868_BEACON_CHANNEL_DR;
    regionCommonRxBeaconSetup.BeaconChannelBW = EU868_BEACON_CHANNEL_BW;
 800daf4:	2200      	movs	r2, #0
 800daf6:	7282      	strb	r2, [r0, #10]
    regionCommonRxBeaconSetup.RxTime = rxBeaconSetup->RxTime;
 800daf8:	685a      	ldr	r2, [r3, #4]
    regionCommonRxBeaconSetup.SymbolTimeout = rxBeaconSetup->SymbolTimeout;
 800dafa:	881b      	ldrh	r3, [r3, #0]
    regionCommonRxBeaconSetup.RxTime = rxBeaconSetup->RxTime;
 800dafc:	60c2      	str	r2, [r0, #12]
    regionCommonRxBeaconSetup.SymbolTimeout = rxBeaconSetup->SymbolTimeout;
 800dafe:	8203      	strh	r3, [r0, #16]

    RegionCommonRxBeaconSetup( &regionCommonRxBeaconSetup );
 800db00:	f7ff fa60 	bl	800cfc4 <RegionCommonRxBeaconSetup>

    // Store downlink datarate
    *outDr = EU868_BEACON_CHANNEL_DR;
 800db04:	2303      	movs	r3, #3
 800db06:	7023      	strb	r3, [r4, #0]
}
 800db08:	b006      	add	sp, #24
 800db0a:	bd10      	pop	{r4, pc}
 800db0c:	08010bfc 	.word	0x08010bfc
 800db10:	00000311 	.word	0x00000311

0800db14 <certif_tx>:
  certifParam.DemodMargin = mlmeConfirm->DemodMargin;
  certifParam.NbGateways = mlmeConfirm->NbGateways;
}

static bool certif_tx( void )
{
 800db14:	b530      	push	{r4, r5, lr}
  McpsReq_t mcpsReq;
  LoRaMacTxInfo_t txInfo;
  
  if( certifParam.LinkCheck == true )
 800db16:	4d28      	ldr	r5, [pc, #160]	; (800dbb8 <certif_tx+0xa4>)
{
 800db18:	b087      	sub	sp, #28
  if( certifParam.LinkCheck == true )
 800db1a:	002b      	movs	r3, r5
 800db1c:	33f8      	adds	r3, #248	; 0xf8
 800db1e:	781a      	ldrb	r2, [r3, #0]
 800db20:	2a00      	cmp	r2, #0
 800db22:	d027      	beq.n	800db74 <certif_tx+0x60>
  {
    certifParam.LinkCheck = false;
 800db24:	2200      	movs	r2, #0
 800db26:	701a      	strb	r2, [r3, #0]
    certifParam.DataBufferSize = 3;
 800db28:	2303      	movs	r3, #3
 800db2a:	70eb      	strb	r3, [r5, #3]
    certifParam.DataBuffer[0] = 5;
 800db2c:	3302      	adds	r3, #2
 800db2e:	712b      	strb	r3, [r5, #4]
    certifParam.DataBuffer[1] = certifParam.DemodMargin;
 800db30:	002b      	movs	r3, r5
 800db32:	33f9      	adds	r3, #249	; 0xf9
 800db34:	781b      	ldrb	r3, [r3, #0]
 800db36:	716b      	strb	r3, [r5, #5]
    certifParam.DataBuffer[2] = certifParam.NbGateways;
 800db38:	002b      	movs	r3, r5
 800db3a:	33fa      	adds	r3, #250	; 0xfa
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	71ab      	strb	r3, [r5, #6]
    certifParam.State = 1;
 800db40:	2301      	movs	r3, #1
 800db42:	706b      	strb	r3, [r5, #1]
      certifParam.DataBuffer[1] = certifParam.DownLinkCounter;
      break;
    }
  }
    
  if( LoRaMacQueryTxPossible( certifParam.DataBufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800db44:	78e8      	ldrb	r0, [r5, #3]
 800db46:	a901      	add	r1, sp, #4
 800db48:	f7fc fa78 	bl	800a03c <LoRaMacQueryTxPossible>
 800db4c:	ac02      	add	r4, sp, #8
 800db4e:	4b1b      	ldr	r3, [pc, #108]	; (800dbbc <certif_tx+0xa8>)
 800db50:	2800      	cmp	r0, #0
 800db52:	d01d      	beq.n	800db90 <certif_tx+0x7c>
  {
      // Send empty frame in order to flush MAC commands
      mcpsReq.Type = MCPS_UNCONFIRMED;
 800db54:	2200      	movs	r2, #0
 800db56:	7022      	strb	r2, [r4, #0]
      mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800db58:	60a2      	str	r2, [r4, #8]
      mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800db5a:	81a2      	strh	r2, [r4, #12]
      {
          mcpsReq.Type = MCPS_UNCONFIRMED;
          mcpsReq.Req.Unconfirmed.fPort = CERTIF_PORT;
          mcpsReq.Req.Unconfirmed.fBufferSize = certifParam.DataBufferSize;
          mcpsReq.Req.Unconfirmed.fBuffer = &(certifParam.DataBuffer);
          mcpsReq.Req.Unconfirmed.Datarate = DR_0;
 800db5c:	73a2      	strb	r2, [r4, #14]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
      }
  }

  /*cerification test on-going*/
  TimerStart( &CertifTxNextPacketTimer );
 800db5e:	1d18      	adds	r0, r3, #4
 800db60:	f000 fdc0 	bl	800e6e4 <TimerStart>
	
  if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 800db64:	0020      	movs	r0, r4
 800db66:	f7fc fe9f 	bl	800a8a8 <LoRaMacMcpsRequest>
 800db6a:	1e43      	subs	r3, r0, #1
 800db6c:	4198      	sbcs	r0, r3
 800db6e:	b2c0      	uxtb	r0, r0
  {
      return false;
  }
    return true;
}
 800db70:	b007      	add	sp, #28
 800db72:	bd30      	pop	{r4, r5, pc}
    switch( certifParam.State )
 800db74:	786b      	ldrb	r3, [r5, #1]
 800db76:	2b01      	cmp	r3, #1
 800db78:	d002      	beq.n	800db80 <certif_tx+0x6c>
 800db7a:	2b04      	cmp	r3, #4
 800db7c:	d1e2      	bne.n	800db44 <certif_tx+0x30>
 800db7e:	e7df      	b.n	800db40 <certif_tx+0x2c>
      certifParam.DataBufferSize = 2;
 800db80:	2302      	movs	r3, #2
 800db82:	70eb      	strb	r3, [r5, #3]
      certifParam.DataBuffer[0] = certifParam.DownLinkCounter >> 8;
 800db84:	002b      	movs	r3, r5
 800db86:	33f6      	adds	r3, #246	; 0xf6
 800db88:	881b      	ldrh	r3, [r3, #0]
 800db8a:	ba5b      	rev16	r3, r3
 800db8c:	80ab      	strh	r3, [r5, #4]
      break;
 800db8e:	e7d9      	b.n	800db44 <certif_tx+0x30>
      if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 800db90:	781a      	ldrb	r2, [r3, #0]
 800db92:	78e8      	ldrb	r0, [r5, #3]
 800db94:	490a      	ldr	r1, [pc, #40]	; (800dbc0 <certif_tx+0xac>)
 800db96:	25e0      	movs	r5, #224	; 0xe0
 800db98:	2a00      	cmp	r2, #0
 800db9a:	d104      	bne.n	800dba6 <certif_tx+0x92>
          mcpsReq.Type = MCPS_UNCONFIRMED;
 800db9c:	7022      	strb	r2, [r4, #0]
          mcpsReq.Req.Unconfirmed.fPort = CERTIF_PORT;
 800db9e:	7125      	strb	r5, [r4, #4]
          mcpsReq.Req.Unconfirmed.fBufferSize = certifParam.DataBufferSize;
 800dba0:	81a0      	strh	r0, [r4, #12]
          mcpsReq.Req.Unconfirmed.fBuffer = &(certifParam.DataBuffer);
 800dba2:	60a1      	str	r1, [r4, #8]
 800dba4:	e7da      	b.n	800db5c <certif_tx+0x48>
          mcpsReq.Type = MCPS_CONFIRMED;
 800dba6:	2201      	movs	r2, #1
 800dba8:	7022      	strb	r2, [r4, #0]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
 800dbaa:	2280      	movs	r2, #128	; 0x80
 800dbac:	0112      	lsls	r2, r2, #4
          mcpsReq.Req.Confirmed.fPort = CERTIF_PORT;
 800dbae:	7125      	strb	r5, [r4, #4]
          mcpsReq.Req.Confirmed.fBufferSize = certifParam.DataBufferSize;
 800dbb0:	81a0      	strh	r0, [r4, #12]
          mcpsReq.Req.Confirmed.fBuffer = &(certifParam.DataBuffer);
 800dbb2:	60a1      	str	r1, [r4, #8]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
 800dbb4:	81e2      	strh	r2, [r4, #14]
 800dbb6:	e7d2      	b.n	800db5e <certif_tx+0x4a>
 800dbb8:	20001032 	.word	0x20001032
 800dbbc:	20001014 	.word	0x20001014
 800dbc0:	20001036 	.word	0x20001036

0800dbc4 <OnCertifTxNextPacketTimerEvent>:

/*!
 * \brief Function executed on TxNextPacket Timeout event
 */
static void OnCertifTxNextPacketTimerEvent( void* context )
{
 800dbc4:	b510      	push	{r4, lr}
    certif_tx( );
 800dbc6:	f7ff ffa5 	bl	800db14 <certif_tx>

}
 800dbca:	bd10      	pop	{r4, pc}

0800dbcc <certif_running>:
    return certifParam.Running;
 800dbcc:	4b01      	ldr	r3, [pc, #4]	; (800dbd4 <certif_running+0x8>)
 800dbce:	7818      	ldrb	r0, [r3, #0]
}
 800dbd0:	4770      	bx	lr
 800dbd2:	46c0      	nop			; (mov r8, r8)
 800dbd4:	20001032 	.word	0x20001032

0800dbd8 <certif_DownLinkIncrement>:
    certifParam.DownLinkCounter++;
 800dbd8:	4b02      	ldr	r3, [pc, #8]	; (800dbe4 <certif_DownLinkIncrement+0xc>)
 800dbda:	33f6      	adds	r3, #246	; 0xf6
 800dbdc:	881a      	ldrh	r2, [r3, #0]
 800dbde:	3201      	adds	r2, #1
 800dbe0:	801a      	strh	r2, [r3, #0]
}
 800dbe2:	4770      	bx	lr
 800dbe4:	20001032 	.word	0x20001032

0800dbe8 <certif_linkCheck>:
  certifParam.LinkCheck = true;
 800dbe8:	4b06      	ldr	r3, [pc, #24]	; (800dc04 <certif_linkCheck+0x1c>)
 800dbea:	2101      	movs	r1, #1
 800dbec:	001a      	movs	r2, r3
 800dbee:	32f8      	adds	r2, #248	; 0xf8
 800dbf0:	7011      	strb	r1, [r2, #0]
  certifParam.DemodMargin = mlmeConfirm->DemodMargin;
 800dbf2:	001a      	movs	r2, r3
 800dbf4:	7a01      	ldrb	r1, [r0, #8]
 800dbf6:	32f9      	adds	r2, #249	; 0xf9
 800dbf8:	7011      	strb	r1, [r2, #0]
  certifParam.NbGateways = mlmeConfirm->NbGateways;
 800dbfa:	7a42      	ldrb	r2, [r0, #9]
 800dbfc:	33fa      	adds	r3, #250	; 0xfa
 800dbfe:	701a      	strb	r2, [r3, #0]
}
 800dc00:	4770      	bx	lr
 800dc02:	46c0      	nop			; (mov r8, r8)
 800dc04:	20001032 	.word	0x20001032

0800dc08 <certif_rx>:
{
 800dc08:	b5f0      	push	{r4, r5, r6, r7, lr}
  if( certifParam.Running == false )
 800dc0a:	4c6f      	ldr	r4, [pc, #444]	; (800ddc8 <certif_rx+0x1c0>)
{
 800dc0c:	0002      	movs	r2, r0
  if( certifParam.Running == false )
 800dc0e:	7825      	ldrb	r5, [r4, #0]
{
 800dc10:	000e      	movs	r6, r1
 800dc12:	b08f      	sub	sp, #60	; 0x3c
  if( certifParam.Running == false )
 800dc14:	2d00      	cmp	r5, #0
 800dc16:	d146      	bne.n	800dca6 <certif_rx+0x9e>
      if( ( mcpsIndication->BufferSize == 4 ) &&
 800dc18:	7b07      	ldrb	r7, [r0, #12]
 800dc1a:	2f04      	cmp	r7, #4
 800dc1c:	d13a      	bne.n	800dc94 <certif_rx+0x8c>
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800dc1e:	6883      	ldr	r3, [r0, #8]
      if( ( mcpsIndication->BufferSize == 4 ) &&
 800dc20:	781a      	ldrb	r2, [r3, #0]
 800dc22:	2a01      	cmp	r2, #1
 800dc24:	d136      	bne.n	800dc94 <certif_rx+0x8c>
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800dc26:	785a      	ldrb	r2, [r3, #1]
 800dc28:	2a01      	cmp	r2, #1
 800dc2a:	d133      	bne.n	800dc94 <certif_rx+0x8c>
          ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800dc2c:	789a      	ldrb	r2, [r3, #2]
 800dc2e:	2a01      	cmp	r2, #1
 800dc30:	d130      	bne.n	800dc94 <certif_rx+0x8c>
          ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800dc32:	78db      	ldrb	r3, [r3, #3]
 800dc34:	9301      	str	r3, [sp, #4]
 800dc36:	2b01      	cmp	r3, #1
 800dc38:	d12c      	bne.n	800dc94 <certif_rx+0x8c>
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 800dc3a:	4b64      	ldr	r3, [pc, #400]	; (800ddcc <certif_rx+0x1c4>)
          mibReq.Type = MIB_ADR;
 800dc3c:	ae06      	add	r6, sp, #24
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 800dc3e:	701d      	strb	r5, [r3, #0]
          certifParam.DataBufferSize = 2;
 800dc40:	2302      	movs	r3, #2
 800dc42:	70e3      	strb	r3, [r4, #3]
          certifParam.DownLinkCounter = 0;
 800dc44:	0023      	movs	r3, r4
 800dc46:	33f6      	adds	r3, #246	; 0xf6
 800dc48:	801d      	strh	r5, [r3, #0]
          certifParam.LinkCheck = false;
 800dc4a:	0023      	movs	r3, r4
 800dc4c:	33f8      	adds	r3, #248	; 0xf8
 800dc4e:	801d      	strh	r5, [r3, #0]
          certifParam.NbGateways = 0;
 800dc50:	0023      	movs	r3, r4
 800dc52:	33fa      	adds	r3, #250	; 0xfa
 800dc54:	701d      	strb	r5, [r3, #0]
          certifParam.Running = true;
 800dc56:	2302      	movs	r3, #2
 800dc58:	33ff      	adds	r3, #255	; 0xff
 800dc5a:	8023      	strh	r3, [r4, #0]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800dc5c:	0030      	movs	r0, r6
          mibReq.Type = MIB_ADR;
 800dc5e:	7037      	strb	r7, [r6, #0]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800dc60:	f7fc fa46 	bl	800a0f0 <LoRaMacMibGetRequestConfirm>
          AdrEnableInit=mibReq.Param.AdrEnable;
 800dc64:	4a59      	ldr	r2, [pc, #356]	; (800ddcc <certif_rx+0x1c4>)
 800dc66:	7933      	ldrb	r3, [r6, #4]
          LoRaMacMibSetRequestConfirm( &mibReq );
 800dc68:	0030      	movs	r0, r6
          AdrEnableInit=mibReq.Param.AdrEnable;
 800dc6a:	7713      	strb	r3, [r2, #28]
          mibReq.Param.AdrEnable = true;
 800dc6c:	9b01      	ldr	r3, [sp, #4]
          mibReq.Type = MIB_ADR;
 800dc6e:	7037      	strb	r7, [r6, #0]
          mibReq.Param.AdrEnable = true;
 800dc70:	7133      	strb	r3, [r6, #4]
          LoRaMacMibSetRequestConfirm( &mibReq );
 800dc72:	f7fc fb1b 	bl	800a2ac <LoRaMacMibSetRequestConfirm>
          LoRaMacTestSetDutyCycleOn( false );
 800dc76:	0028      	movs	r0, r5
 800dc78:	f7fc feca 	bl	800aa10 <LoRaMacTestSetDutyCycleOn>
        TimerInit( &CertifTxNextPacketTimer, OnCertifTxNextPacketTimerEvent );
 800dc7c:	4b53      	ldr	r3, [pc, #332]	; (800ddcc <certif_rx+0x1c4>)
 800dc7e:	4954      	ldr	r1, [pc, #336]	; (800ddd0 <certif_rx+0x1c8>)
 800dc80:	1d1d      	adds	r5, r3, #4
 800dc82:	0028      	movs	r0, r5
 800dc84:	f000 fd26 	bl	800e6d4 <TimerInit>
        TimerSetValue( &CertifTxNextPacketTimer,  TEST_TX_DUTYCYCLE); 
 800dc88:	0028      	movs	r0, r5
 800dc8a:	4952      	ldr	r1, [pc, #328]	; (800ddd4 <certif_rx+0x1cc>)
 800dc8c:	f000 fdce 	bl	800e82c <TimerSetValue>
        certif_tx( );
 800dc90:	f7ff ff40 	bl	800db14 <certif_tx>
    if ( certifParam.Running == false )
 800dc94:	7823      	ldrb	r3, [r4, #0]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d103      	bne.n	800dca2 <certif_rx+0x9a>
      TimerStop( &CertifTxNextPacketTimer );
 800dc9a:	484c      	ldr	r0, [pc, #304]	; (800ddcc <certif_rx+0x1c4>)
 800dc9c:	3004      	adds	r0, #4
 800dc9e:	f000 fd99 	bl	800e7d4 <TimerStop>
}
 800dca2:	b00f      	add	sp, #60	; 0x3c
 800dca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      certifParam.State = mcpsIndication->Buffer[0];
 800dca6:	6883      	ldr	r3, [r0, #8]
 800dca8:	7818      	ldrb	r0, [r3, #0]
 800dcaa:	7060      	strb	r0, [r4, #1]
      switch( certifParam.State )
 800dcac:	280b      	cmp	r0, #11
 800dcae:	d8f1      	bhi.n	800dc94 <certif_rx+0x8c>
 800dcb0:	f7f2 fa2a 	bl	8000108 <__gnu_thumb1_case_uqi>
 800dcb4:	201b1806 	.word	0x201b1806
 800dcb8:	4e373325 	.word	0x4e373325
 800dcbc:	87807774 	.word	0x87807774
          certifParam.DownLinkCounter = 0;
 800dcc0:	0022      	movs	r2, r4
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	32f6      	adds	r2, #246	; 0xf6
 800dcc6:	8013      	strh	r3, [r2, #0]
          certifParam.Running = false;
 800dcc8:	7023      	strb	r3, [r4, #0]
          mibReq.Type = MIB_ADR;
 800dcca:	aa02      	add	r2, sp, #8
 800dccc:	3304      	adds	r3, #4
 800dcce:	7413      	strb	r3, [r2, #16]
          mibReq.Param.AdrEnable = AdrEnableInit;
 800dcd0:	4b3e      	ldr	r3, [pc, #248]	; (800ddcc <certif_rx+0x1c4>)
          LoRaMacMibSetRequestConfirm( &mibReq );
 800dcd2:	a806      	add	r0, sp, #24
          mibReq.Param.AdrEnable = AdrEnableInit;
 800dcd4:	7f1b      	ldrb	r3, [r3, #28]
 800dcd6:	7513      	strb	r3, [r2, #20]
          LoRaMacMibSetRequestConfirm( &mibReq );
 800dcd8:	f7fc fae8 	bl	800a2ac <LoRaMacMibSetRequestConfirm>
          LoRaMacTestSetDutyCycleOn( true );
 800dcdc:	2001      	movs	r0, #1
 800dcde:	f7fc fe97 	bl	800aa10 <LoRaMacTestSetDutyCycleOn>
          break;
 800dce2:	e7d7      	b.n	800dc94 <certif_rx+0x8c>
          certifParam.DataBufferSize = 2;
 800dce4:	2302      	movs	r3, #2
 800dce6:	70e3      	strb	r3, [r4, #3]
          break;
 800dce8:	e7d4      	b.n	800dc94 <certif_rx+0x8c>
          IsTxConfirmed = LORAWAN_CONFIRMED_MSG;
 800dcea:	2301      	movs	r3, #1
 800dcec:	4a37      	ldr	r2, [pc, #220]	; (800ddcc <certif_rx+0x1c4>)
 800dcee:	7013      	strb	r3, [r2, #0]
          certifParam.State = 1;
 800dcf0:	7063      	strb	r3, [r4, #1]
          break;
 800dcf2:	e7cf      	b.n	800dc94 <certif_rx+0x8c>
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	4b35      	ldr	r3, [pc, #212]	; (800ddcc <certif_rx+0x1c4>)
 800dcf8:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	e7f8      	b.n	800dcf0 <certif_rx+0xe8>
          certifParam.DataBufferSize = mcpsIndication->BufferSize;
 800dcfe:	7b10      	ldrb	r0, [r2, #12]
          certifParam.DataBuffer[0] = 4;
 800dd00:	2204      	movs	r2, #4
 800dd02:	7122      	strb	r2, [r4, #4]
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 800dd04:	2200      	movs	r2, #0
              certifParam.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800dd06:	4d34      	ldr	r5, [pc, #208]	; (800ddd8 <certif_rx+0x1d0>)
          certifParam.DataBufferSize = mcpsIndication->BufferSize;
 800dd08:	70e0      	strb	r0, [r4, #3]
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 800dd0a:	3201      	adds	r2, #1
 800dd0c:	b2d1      	uxtb	r1, r2
 800dd0e:	4288      	cmp	r0, r1
 800dd10:	d9c0      	bls.n	800dc94 <certif_rx+0x8c>
              certifParam.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800dd12:	5c99      	ldrb	r1, [r3, r2]
 800dd14:	3101      	adds	r1, #1
 800dd16:	54a9      	strb	r1, [r5, r2]
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 800dd18:	e7f7      	b.n	800dd0a <certif_rx+0x102>
          mlmeReq.Type = MLME_LINK_CHECK;
 800dd1a:	2303      	movs	r3, #3
 800dd1c:	a806      	add	r0, sp, #24
          mlmeReq.Type = MLME_BEACON_TIMING;
 800dd1e:	7003      	strb	r3, [r0, #0]
 800dd20:	e013      	b.n	800dd4a <certif_rx+0x142>
            certifParam.DownLinkCounter = 0;
 800dd22:	0023      	movs	r3, r4
 800dd24:	2500      	movs	r5, #0
 800dd26:	33f6      	adds	r3, #246	; 0xf6
 800dd28:	801d      	strh	r5, [r3, #0]
            mibReq.Type = MIB_ADR;
 800dd2a:	2304      	movs	r3, #4
 800dd2c:	aa02      	add	r2, sp, #8
 800dd2e:	7413      	strb	r3, [r2, #16]
            mibReq.Param.AdrEnable = AdrEnableInit;
 800dd30:	4b26      	ldr	r3, [pc, #152]	; (800ddcc <certif_rx+0x1c4>)
            LoRaMacMibSetRequestConfirm( &mibReq );
 800dd32:	a806      	add	r0, sp, #24
            mibReq.Param.AdrEnable = AdrEnableInit;
 800dd34:	7f1b      	ldrb	r3, [r3, #28]
            certifParam.Running = false;
 800dd36:	7025      	strb	r5, [r4, #0]
            mibReq.Param.AdrEnable = AdrEnableInit;
 800dd38:	7513      	strb	r3, [r2, #20]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800dd3a:	f7fc fab7 	bl	800a2ac <LoRaMacMibSetRequestConfirm>
            mlmeReq.Req.Join = *JoinParameters;
 800dd3e:	aa02      	add	r2, sp, #8
            LoRaMacMlmeRequest( &mlmeReq );
 800dd40:	0010      	movs	r0, r2
            mlmeReq.Type = MLME_JOIN;
 800dd42:	ab02      	add	r3, sp, #8
 800dd44:	701d      	strb	r5, [r3, #0]
            mlmeReq.Req.Join = *JoinParameters;
 800dd46:	7833      	ldrb	r3, [r6, #0]
 800dd48:	7113      	strb	r3, [r2, #4]
          LoRaMacMlmeRequest( &mlmeReq );
 800dd4a:	f7fc fcf1 	bl	800a730 <LoRaMacMlmeRequest>
          break;
 800dd4e:	e7a1      	b.n	800dc94 <certif_rx+0x8c>
          if( mcpsIndication->BufferSize == 3 )
 800dd50:	7b12      	ldrb	r2, [r2, #12]
 800dd52:	2a03      	cmp	r2, #3
 800dd54:	d10b      	bne.n	800dd6e <certif_rx+0x166>
              mlmeReq.Type = MLME_TXCW;
 800dd56:	3201      	adds	r2, #1
 800dd58:	a902      	add	r1, sp, #8
 800dd5a:	740a      	strb	r2, [r1, #16]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800dd5c:	785a      	ldrb	r2, [r3, #1]
 800dd5e:	789b      	ldrb	r3, [r3, #2]
 800dd60:	0212      	lsls	r2, r2, #8
 800dd62:	4313      	orrs	r3, r2
 800dd64:	828b      	strh	r3, [r1, #20]
              LoRaMacMlmeRequest( &mlmeReq );
 800dd66:	a806      	add	r0, sp, #24
              LoRaMacMlmeRequest( &mlmeReq );
 800dd68:	f7fc fce2 	bl	800a730 <LoRaMacMlmeRequest>
          certifParam.State = 1;
 800dd6c:	e7c5      	b.n	800dcfa <certif_rx+0xf2>
          else if( mcpsIndication->BufferSize == 7 )
 800dd6e:	2a07      	cmp	r2, #7
 800dd70:	d1c3      	bne.n	800dcfa <certif_rx+0xf2>
              mlmeReq.Type = MLME_TXCW_1;
 800dd72:	a806      	add	r0, sp, #24
 800dd74:	3a02      	subs	r2, #2
 800dd76:	7002      	strb	r2, [r0, #0]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800dd78:	7859      	ldrb	r1, [r3, #1]
 800dd7a:	789a      	ldrb	r2, [r3, #2]
 800dd7c:	0209      	lsls	r1, r1, #8
 800dd7e:	430a      	orrs	r2, r1
 800dd80:	8082      	strh	r2, [r0, #4]
              mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800dd82:	78da      	ldrb	r2, [r3, #3]
 800dd84:	7919      	ldrb	r1, [r3, #4]
 800dd86:	0412      	lsls	r2, r2, #16
 800dd88:	0209      	lsls	r1, r1, #8
 800dd8a:	430a      	orrs	r2, r1
 800dd8c:	7959      	ldrb	r1, [r3, #5]
 800dd8e:	430a      	orrs	r2, r1
 800dd90:	2164      	movs	r1, #100	; 0x64
 800dd92:	434a      	muls	r2, r1
 800dd94:	6082      	str	r2, [r0, #8]
              mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800dd96:	799b      	ldrb	r3, [r3, #6]
 800dd98:	7303      	strb	r3, [r0, #12]
 800dd9a:	e7e5      	b.n	800dd68 <certif_rx+0x160>
          mlmeReq.Type = MLME_DEVICE_TIME;
 800dd9c:	2309      	movs	r3, #9
 800dd9e:	a806      	add	r0, sp, #24
 800dda0:	e7bd      	b.n	800dd1e <certif_rx+0x116>
          mibReq.Type = MIB_DEVICE_CLASS;
 800dda2:	2200      	movs	r2, #0
 800dda4:	a902      	add	r1, sp, #8
 800dda6:	740a      	strb	r2, [r1, #16]
          mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];
 800dda8:	785b      	ldrb	r3, [r3, #1]
          LoRaMacMibSetRequestConfirm( &mibReq );
 800ddaa:	a806      	add	r0, sp, #24
          mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];
 800ddac:	750b      	strb	r3, [r1, #20]
          LoRaMacMibSetRequestConfirm( &mibReq );
 800ddae:	f7fc fa7d 	bl	800a2ac <LoRaMacMibSetRequestConfirm>
          break;
 800ddb2:	e76f      	b.n	800dc94 <certif_rx+0x8c>
          mlmeReq.Type = MLME_PING_SLOT_INFO;
 800ddb4:	220c      	movs	r2, #12
 800ddb6:	a902      	add	r1, sp, #8
 800ddb8:	740a      	strb	r2, [r1, #16]
          mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800ddba:	785b      	ldrb	r3, [r3, #1]
          LoRaMacMlmeRequest( &mlmeReq );
 800ddbc:	a806      	add	r0, sp, #24
          mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800ddbe:	750b      	strb	r3, [r1, #20]
          LoRaMacMlmeRequest( &mlmeReq );
 800ddc0:	e7c3      	b.n	800dd4a <certif_rx+0x142>
          mlmeReq.Type = MLME_BEACON_TIMING;
 800ddc2:	230d      	movs	r3, #13
 800ddc4:	a806      	add	r0, sp, #24
 800ddc6:	e7aa      	b.n	800dd1e <certif_rx+0x116>
 800ddc8:	20001032 	.word	0x20001032
 800ddcc:	20001014 	.word	0x20001014
 800ddd0:	0800dbc5 	.word	0x0800dbc5
 800ddd4:	00001388 	.word	0x00001388
 800ddd8:	20001036 	.word	0x20001036

0800dddc <LORA_BeaconReq>:
  }
}
#endif

static LoraErrorStatus LORA_BeaconReq( void)
{
 800dddc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  MlmeReq_t mlmeReq;

  mlmeReq.Type = MLME_BEACON_ACQUISITION;
 800ddde:	230b      	movs	r3, #11
 800dde0:	466a      	mov	r2, sp

  if( LoRaMacMlmeRequest( &mlmeReq ) == LORAMAC_STATUS_OK )
 800dde2:	4668      	mov	r0, sp
  mlmeReq.Type = MLME_BEACON_ACQUISITION;
 800dde4:	7013      	strb	r3, [r2, #0]
  if( LoRaMacMlmeRequest( &mlmeReq ) == LORAMAC_STATUS_OK )
 800dde6:	f7fc fca3 	bl	800a730 <LoRaMacMlmeRequest>
 800ddea:	1e43      	subs	r3, r0, #1
 800ddec:	4198      	sbcs	r0, r3
 800ddee:	4240      	negs	r0, r0
  }
  else
  {
    return LORA_ERROR;
  }
}
 800ddf0:	b005      	add	sp, #20
 800ddf2:	bd00      	pop	{pc}

0800ddf4 <LORA_PingSlotReq>:

static LoraErrorStatus LORA_PingSlotReq( void)
{
 800ddf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  MlmeReq_t mlmeReq;

  mlmeReq.Type = MLME_LINK_CHECK;
 800ddf6:	2303      	movs	r3, #3
 800ddf8:	466a      	mov	r2, sp
  LoRaMacMlmeRequest( &mlmeReq );
 800ddfa:	4668      	mov	r0, sp
  mlmeReq.Type = MLME_LINK_CHECK;
 800ddfc:	7013      	strb	r3, [r2, #0]
  LoRaMacMlmeRequest( &mlmeReq );
 800ddfe:	f7fc fc97 	bl	800a730 <LoRaMacMlmeRequest>

  mlmeReq.Type = MLME_PING_SLOT_INFO;
 800de02:	466a      	mov	r2, sp
 800de04:	230c      	movs	r3, #12
 800de06:	7013      	strb	r3, [r2, #0]
  mlmeReq.Req.PingSlotInfo.PingSlot.Fields.Periodicity = LORAWAN_DEFAULT_PING_SLOT_PERIODICITY;
 800de08:	2300      	movs	r3, #0
  mlmeReq.Req.PingSlotInfo.PingSlot.Fields.RFU = 0;

  if( LoRaMacMlmeRequest( &mlmeReq ) == LORAMAC_STATUS_OK )
 800de0a:	4668      	mov	r0, sp
  mlmeReq.Req.PingSlotInfo.PingSlot.Fields.Periodicity = LORAWAN_DEFAULT_PING_SLOT_PERIODICITY;
 800de0c:	7113      	strb	r3, [r2, #4]
  if( LoRaMacMlmeRequest( &mlmeReq ) == LORAMAC_STATUS_OK )
 800de0e:	f7fc fc8f 	bl	800a730 <LoRaMacMlmeRequest>
 800de12:	1e43      	subs	r3, r0, #1
 800de14:	4198      	sbcs	r0, r3
 800de16:	4240      	negs	r0, r0
  }
  else
  {
     return LORA_ERROR;
  }
}
 800de18:	b005      	add	sp, #20
 800de1a:	bd00      	pop	{pc}

0800de1c <LORA_DeviceTimeReq>:
{
 800de1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  mlmeReq.Type = MLME_DEVICE_TIME;
 800de1e:	2309      	movs	r3, #9
 800de20:	466a      	mov	r2, sp
  if( LoRaMacMlmeRequest( &mlmeReq ) == LORAMAC_STATUS_OK )
 800de22:	4668      	mov	r0, sp
  mlmeReq.Type = MLME_DEVICE_TIME;
 800de24:	7013      	strb	r3, [r2, #0]
  if( LoRaMacMlmeRequest( &mlmeReq ) == LORAMAC_STATUS_OK )
 800de26:	f7fc fc83 	bl	800a730 <LoRaMacMlmeRequest>
 800de2a:	1e43      	subs	r3, r0, #1
 800de2c:	4198      	sbcs	r0, r3
 800de2e:	4240      	negs	r0, r0
}
 800de30:	b005      	add	sp, #20
 800de32:	bd00      	pop	{pc}

0800de34 <MlmeIndication>:
{
 800de34:	b500      	push	{lr}
    switch( MlmeIndication->MlmeIndication )
 800de36:	7803      	ldrb	r3, [r0, #0]
{
 800de38:	b089      	sub	sp, #36	; 0x24
    switch( MlmeIndication->MlmeIndication )
 800de3a:	2b06      	cmp	r3, #6
 800de3c:	d003      	beq.n	800de46 <MlmeIndication+0x12>
 800de3e:	2b0e      	cmp	r3, #14
 800de40:	d006      	beq.n	800de50 <MlmeIndication+0x1c>
}
 800de42:	b009      	add	sp, #36	; 0x24
 800de44:	bd00      	pop	{pc}
            LoRaMainCallbacks->LORA_TxNeeded( );			
 800de46:	4b07      	ldr	r3, [pc, #28]	; (800de64 <MlmeIndication+0x30>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	69db      	ldr	r3, [r3, #28]
 800de4c:	4798      	blx	r3
}
 800de4e:	e7f8      	b.n	800de42 <MlmeIndication+0xe>
            mibReq.Type = MIB_DEVICE_CLASS;
 800de50:	2300      	movs	r3, #0
 800de52:	466a      	mov	r2, sp
            LoRaMacMibSetRequestConfirm( &mibReq );
 800de54:	4668      	mov	r0, sp
            mibReq.Type = MIB_DEVICE_CLASS;
 800de56:	7013      	strb	r3, [r2, #0]
            mibReq.Param.Class = CLASS_A;
 800de58:	7113      	strb	r3, [r2, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800de5a:	f7fc fa27 	bl	800a2ac <LoRaMacMibSetRequestConfirm>
            LORA_BeaconReq();
 800de5e:	f7ff ffbd 	bl	800dddc <LORA_BeaconReq>
}
 800de62:	e7ee      	b.n	800de42 <MlmeIndication+0xe>
 800de64:	20001130 	.word	0x20001130

0800de68 <McpsIndication>:
{
 800de68:	b513      	push	{r0, r1, r4, lr}
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800de6a:	7843      	ldrb	r3, [r0, #1]
{
 800de6c:	0004      	movs	r4, r0
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d117      	bne.n	800dea2 <McpsIndication+0x3a>
    if( mcpsIndication->FramePending == true )
 800de72:	7943      	ldrb	r3, [r0, #5]
 800de74:	2b01      	cmp	r3, #1
 800de76:	d103      	bne.n	800de80 <McpsIndication+0x18>
        LoRaMainCallbacks->LORA_TxNeeded( );
 800de78:	4b10      	ldr	r3, [pc, #64]	; (800debc <McpsIndication+0x54>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	69db      	ldr	r3, [r3, #28]
 800de7e:	4798      	blx	r3
    if (certif_running() == true )
 800de80:	f7ff fea4 	bl	800dbcc <certif_running>
 800de84:	2800      	cmp	r0, #0
 800de86:	d001      	beq.n	800de8c <McpsIndication+0x24>
      certif_DownLinkIncrement( );
 800de88:	f7ff fea6 	bl	800dbd8 <certif_DownLinkIncrement>
    if( mcpsIndication->RxData == true )
 800de8c:	7b63      	ldrb	r3, [r4, #13]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d007      	beq.n	800dea2 <McpsIndication+0x3a>
      switch( mcpsIndication->Port )
 800de92:	78e3      	ldrb	r3, [r4, #3]
 800de94:	4909      	ldr	r1, [pc, #36]	; (800debc <McpsIndication+0x54>)
 800de96:	2be0      	cmp	r3, #224	; 0xe0
 800de98:	d104      	bne.n	800dea4 <McpsIndication+0x3c>
          certif_rx( mcpsIndication, &JoinParameters );
 800de9a:	0020      	movs	r0, r4
 800de9c:	3104      	adds	r1, #4
 800de9e:	f7ff feb3 	bl	800dc08 <certif_rx>
}
 800dea2:	bd13      	pop	{r0, r1, r4, pc}
          AppData.Port = mcpsIndication->Port;
 800dea4:	466a      	mov	r2, sp
 800dea6:	7153      	strb	r3, [r2, #5]
          AppData.BuffSize = mcpsIndication->BufferSize;
 800dea8:	7b23      	ldrb	r3, [r4, #12]
          LoRaMainCallbacks->LORA_RxData( &AppData );
 800deaa:	4668      	mov	r0, sp
          AppData.BuffSize = mcpsIndication->BufferSize;
 800deac:	7113      	strb	r3, [r2, #4]
          AppData.Buff = mcpsIndication->Buffer;
 800deae:	68a3      	ldr	r3, [r4, #8]
 800deb0:	9300      	str	r3, [sp, #0]
          LoRaMainCallbacks->LORA_RxData( &AppData );
 800deb2:	680b      	ldr	r3, [r1, #0]
 800deb4:	691b      	ldr	r3, [r3, #16]
 800deb6:	4798      	blx	r3
          break;
 800deb8:	e7f3      	b.n	800dea2 <McpsIndication+0x3a>
 800deba:	46c0      	nop			; (mov r8, r8)
 800debc:	20001130 	.word	0x20001130

0800dec0 <McpsConfirm>:
{

    MibRequestConfirm_t mibGet;
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_DEVICE_CLASS;
 800dec0:	2300      	movs	r3, #0
{
 800dec2:	b500      	push	{lr}
 800dec4:	b091      	sub	sp, #68	; 0x44
    mibReq.Type = MIB_DEVICE_CLASS;
 800dec6:	a808      	add	r0, sp, #32
 800dec8:	7003      	strb	r3, [r0, #0]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800deca:	f7fc f911 	bl	800a0f0 <LoRaMacMibGetRequestConfirm>
                             "ABC"[mibReq.Param.Class], \
                             AppData.Port, \
                             AppData.BuffSize, \
                             mcpsConfirm->TxPower );)

    mibGet.Type  = MIB_CHANNELS_MASK;
 800dece:	2324      	movs	r3, #36	; 0x24
 800ded0:	466a      	mov	r2, sp
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
 800ded2:	4668      	mov	r0, sp
    mibGet.Type  = MIB_CHANNELS_MASK;
 800ded4:	7013      	strb	r3, [r2, #0]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
 800ded6:	f7fc f90b 	bl	800a0f0 <LoRaMacMibGetRequestConfirm>
}
 800deda:	b011      	add	sp, #68	; 0x44
 800dedc:	bd00      	pop	{pc}
	...

0800dee0 <LORA_Init>:
{
 800dee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dee2:	0005      	movs	r5, r0
 800dee4:	000f      	movs	r7, r1
  uint8_t devEui[] = LORAWAN_DEVICE_EUI;
 800dee6:	4c67      	ldr	r4, [pc, #412]	; (800e084 <LORA_Init+0x1a4>)
{
 800dee8:	b095      	sub	sp, #84	; 0x54
  uint8_t devEui[] = LORAWAN_DEVICE_EUI;
 800deea:	ae10      	add	r6, sp, #64	; 0x40
 800deec:	0021      	movs	r1, r4
 800deee:	2208      	movs	r2, #8
 800def0:	0030      	movs	r0, r6
 800def2:	f001 fe63 	bl	800fbbc <memcpy>
  uint8_t joinEui[] = LORAWAN_JOIN_EUI;
 800def6:	0021      	movs	r1, r4
 800def8:	2208      	movs	r2, #8
 800defa:	a812      	add	r0, sp, #72	; 0x48
 800defc:	f001 fe5e 	bl	800fbbc <memcpy>
  LoRaParamInit = LoRaParam;
 800df00:	4c61      	ldr	r4, [pc, #388]	; (800e088 <LORA_Init+0x1a8>)
  LoRaMainCallbacks->BoardGetUniqueId( devEui );  
 800df02:	0030      	movs	r0, r6
 800df04:	68ab      	ldr	r3, [r5, #8]
  LoRaParamInit = LoRaParam;
 800df06:	60a7      	str	r7, [r4, #8]
  LoRaMainCallbacks = callbacks;
 800df08:	6025      	str	r5, [r4, #0]
  LoRaMainCallbacks->BoardGetUniqueId( devEui );  
 800df0a:	4798      	blx	r3
  PPRINTF( "OTAA\n\r"); 
 800df0c:	485f      	ldr	r0, [pc, #380]	; (800e08c <LORA_Init+0x1ac>)
 800df0e:	f000 fcf3 	bl	800e8f8 <TraceSend>
 800df12:	2800      	cmp	r0, #0
 800df14:	d1fa      	bne.n	800df0c <LORA_Init+0x2c>
  PPRINTF( "DevEui= %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\n\r", HEX8(devEui));
 800df16:	79f0      	ldrb	r0, [r6, #7]
 800df18:	78b3      	ldrb	r3, [r6, #2]
 800df1a:	7872      	ldrb	r2, [r6, #1]
 800df1c:	7831      	ldrb	r1, [r6, #0]
 800df1e:	9004      	str	r0, [sp, #16]
 800df20:	79b0      	ldrb	r0, [r6, #6]
 800df22:	9003      	str	r0, [sp, #12]
 800df24:	7970      	ldrb	r0, [r6, #5]
 800df26:	9002      	str	r0, [sp, #8]
 800df28:	7930      	ldrb	r0, [r6, #4]
 800df2a:	9001      	str	r0, [sp, #4]
 800df2c:	78f0      	ldrb	r0, [r6, #3]
 800df2e:	9000      	str	r0, [sp, #0]
 800df30:	4857      	ldr	r0, [pc, #348]	; (800e090 <LORA_Init+0x1b0>)
 800df32:	f000 fce1 	bl	800e8f8 <TraceSend>
 800df36:	2800      	cmp	r0, #0
 800df38:	d1ed      	bne.n	800df16 <LORA_Init+0x36>
  PPRINTF( "AppEui= %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\n\r", HEX8(joinEui));
 800df3a:	2242      	movs	r2, #66	; 0x42
 800df3c:	2141      	movs	r1, #65	; 0x41
 800df3e:	2040      	movs	r0, #64	; 0x40
 800df40:	2547      	movs	r5, #71	; 0x47
 800df42:	ab02      	add	r3, sp, #8
 800df44:	189b      	adds	r3, r3, r2
 800df46:	aa02      	add	r2, sp, #8
 800df48:	1852      	adds	r2, r2, r1
 800df4a:	a902      	add	r1, sp, #8
 800df4c:	1809      	adds	r1, r1, r0
 800df4e:	a802      	add	r0, sp, #8
 800df50:	1940      	adds	r0, r0, r5
 800df52:	7800      	ldrb	r0, [r0, #0]
 800df54:	781b      	ldrb	r3, [r3, #0]
 800df56:	7812      	ldrb	r2, [r2, #0]
 800df58:	7809      	ldrb	r1, [r1, #0]
 800df5a:	3d01      	subs	r5, #1
 800df5c:	9004      	str	r0, [sp, #16]
 800df5e:	a802      	add	r0, sp, #8
 800df60:	1940      	adds	r0, r0, r5
 800df62:	7800      	ldrb	r0, [r0, #0]
 800df64:	3d01      	subs	r5, #1
 800df66:	9003      	str	r0, [sp, #12]
 800df68:	a802      	add	r0, sp, #8
 800df6a:	1940      	adds	r0, r0, r5
 800df6c:	7800      	ldrb	r0, [r0, #0]
 800df6e:	3d01      	subs	r5, #1
 800df70:	9002      	str	r0, [sp, #8]
 800df72:	a802      	add	r0, sp, #8
 800df74:	1940      	adds	r0, r0, r5
 800df76:	7800      	ldrb	r0, [r0, #0]
 800df78:	3d01      	subs	r5, #1
 800df7a:	9001      	str	r0, [sp, #4]
 800df7c:	a802      	add	r0, sp, #8
 800df7e:	1940      	adds	r0, r0, r5
 800df80:	7800      	ldrb	r0, [r0, #0]
 800df82:	9000      	str	r0, [sp, #0]
 800df84:	4843      	ldr	r0, [pc, #268]	; (800e094 <LORA_Init+0x1b4>)
 800df86:	f000 fcb7 	bl	800e8f8 <TraceSend>
 800df8a:	2800      	cmp	r0, #0
 800df8c:	d1d5      	bne.n	800df3a <LORA_Init+0x5a>
  PPRINTF( "AppKey= %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r", HEX16(AppKey));
 800df8e:	4f42      	ldr	r7, [pc, #264]	; (800e098 <LORA_Init+0x1b8>)
 800df90:	7bf8      	ldrb	r0, [r7, #15]
 800df92:	78bb      	ldrb	r3, [r7, #2]
 800df94:	787a      	ldrb	r2, [r7, #1]
 800df96:	7839      	ldrb	r1, [r7, #0]
 800df98:	900c      	str	r0, [sp, #48]	; 0x30
 800df9a:	7bb8      	ldrb	r0, [r7, #14]
 800df9c:	900b      	str	r0, [sp, #44]	; 0x2c
 800df9e:	7b78      	ldrb	r0, [r7, #13]
 800dfa0:	900a      	str	r0, [sp, #40]	; 0x28
 800dfa2:	7b38      	ldrb	r0, [r7, #12]
 800dfa4:	9009      	str	r0, [sp, #36]	; 0x24
 800dfa6:	7af8      	ldrb	r0, [r7, #11]
 800dfa8:	9008      	str	r0, [sp, #32]
 800dfaa:	7ab8      	ldrb	r0, [r7, #10]
 800dfac:	9007      	str	r0, [sp, #28]
 800dfae:	7a78      	ldrb	r0, [r7, #9]
 800dfb0:	9006      	str	r0, [sp, #24]
 800dfb2:	7a38      	ldrb	r0, [r7, #8]
 800dfb4:	9005      	str	r0, [sp, #20]
 800dfb6:	79f8      	ldrb	r0, [r7, #7]
 800dfb8:	9004      	str	r0, [sp, #16]
 800dfba:	79b8      	ldrb	r0, [r7, #6]
 800dfbc:	9003      	str	r0, [sp, #12]
 800dfbe:	7978      	ldrb	r0, [r7, #5]
 800dfc0:	9002      	str	r0, [sp, #8]
 800dfc2:	7938      	ldrb	r0, [r7, #4]
 800dfc4:	9001      	str	r0, [sp, #4]
 800dfc6:	78f8      	ldrb	r0, [r7, #3]
 800dfc8:	9000      	str	r0, [sp, #0]
 800dfca:	4834      	ldr	r0, [pc, #208]	; (800e09c <LORA_Init+0x1bc>)
 800dfcc:	f000 fc94 	bl	800e8f8 <TraceSend>
 800dfd0:	900f      	str	r0, [sp, #60]	; 0x3c
 800dfd2:	2800      	cmp	r0, #0
 800dfd4:	d1db      	bne.n	800df8e <LORA_Init+0xae>
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_EU868 );
 800dfd6:	0021      	movs	r1, r4
 800dfd8:	0020      	movs	r0, r4
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800dfda:	4b31      	ldr	r3, [pc, #196]	; (800e0a0 <LORA_Init+0x1c0>)
  mibReq.Type = MIB_DEV_EUI;
 800dfdc:	0025      	movs	r5, r4
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800dfde:	60e3      	str	r3, [r4, #12]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800dfe0:	4b30      	ldr	r3, [pc, #192]	; (800e0a4 <LORA_Init+0x1c4>)
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_EU868 );
 800dfe2:	311c      	adds	r1, #28
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800dfe4:	6123      	str	r3, [r4, #16]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800dfe6:	4b30      	ldr	r3, [pc, #192]	; (800e0a8 <LORA_Init+0x1c8>)
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_EU868 );
 800dfe8:	300c      	adds	r0, #12
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800dfea:	6163      	str	r3, [r4, #20]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800dfec:	4b2f      	ldr	r3, [pc, #188]	; (800e0ac <LORA_Init+0x1cc>)
  mibReq.Type = MIB_DEV_EUI;
 800dfee:	352c      	adds	r5, #44	; 0x2c
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800dff0:	61a3      	str	r3, [r4, #24]
  LoRaMacCallbacks.GetBatteryLevel = LoRaMainCallbacks->BoardGetBatteryLevel;
 800dff2:	6823      	ldr	r3, [r4, #0]
 800dff4:	681a      	ldr	r2, [r3, #0]
 800dff6:	61e2      	str	r2, [r4, #28]
  LoRaMacCallbacks.GetTemperatureLevel = LoRaMainCallbacks->BoardGetTemperatureLevel;
 800dff8:	685a      	ldr	r2, [r3, #4]
  LoRaMacCallbacks.MacProcessNotify = LoRaMainCallbacks->MacProcessNotify;
 800dffa:	6a1b      	ldr	r3, [r3, #32]
  LoRaMacCallbacks.GetTemperatureLevel = LoRaMainCallbacks->BoardGetTemperatureLevel;
 800dffc:	6222      	str	r2, [r4, #32]
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_EU868 );
 800dffe:	2205      	movs	r2, #5
  LoRaMacCallbacks.MacProcessNotify = LoRaMainCallbacks->MacProcessNotify;
 800e000:	62a3      	str	r3, [r4, #40]	; 0x28
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_EU868 );
 800e002:	f7fb fe25 	bl	8009c50 <LoRaMacInitialization>
  mibReq.Type = MIB_DEV_EUI;
 800e006:	2302      	movs	r3, #2
  LoRaMacMibSetRequestConfirm( &mibReq );
 800e008:	0028      	movs	r0, r5
  mibReq.Type = MIB_DEV_EUI;
 800e00a:	702b      	strb	r3, [r5, #0]
  mibReq.Param.DevEui = devEui;
 800e00c:	6326      	str	r6, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 800e00e:	f7fc f94d 	bl	800a2ac <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_JOIN_EUI;
 800e012:	2303      	movs	r3, #3
  LoRaMacMibSetRequestConfirm( &mibReq );
 800e014:	0028      	movs	r0, r5
  mibReq.Type = MIB_JOIN_EUI;
 800e016:	702b      	strb	r3, [r5, #0]
  mibReq.Param.JoinEui = joinEui;
 800e018:	ab12      	add	r3, sp, #72	; 0x48
 800e01a:	6323      	str	r3, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 800e01c:	f7fc f946 	bl	800a2ac <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_ADR;
 800e020:	2304      	movs	r3, #4
 800e022:	702b      	strb	r3, [r5, #0]
  mibReq.Param.AdrEnable = LoRaParamInit->AdrEnable;
 800e024:	68a3      	ldr	r3, [r4, #8]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800e026:	0028      	movs	r0, r5
  mibReq.Param.AdrEnable = LoRaParamInit->AdrEnable;
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	712b      	strb	r3, [r5, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800e02c:	f7fc f93e 	bl	800a2ac <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_PUBLIC_NETWORK;
 800e030:	231d      	movs	r3, #29
 800e032:	702b      	strb	r3, [r5, #0]
  mibReq.Param.EnablePublicNetwork = LoRaParamInit->EnablePublicNetwork;
 800e034:	68a3      	ldr	r3, [r4, #8]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800e036:	0028      	movs	r0, r5
  mibReq.Param.EnablePublicNetwork = LoRaParamInit->EnablePublicNetwork;
 800e038:	789b      	ldrb	r3, [r3, #2]
 800e03a:	712b      	strb	r3, [r5, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800e03c:	f7fc f936 	bl	800a2ac <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_APP_KEY;
 800e040:	2308      	movs	r3, #8
  LoRaMacMibSetRequestConfirm( &mibReq );
 800e042:	0028      	movs	r0, r5
  mibReq.Type = MIB_APP_KEY;
 800e044:	702b      	strb	r3, [r5, #0]
  mibReq.Param.AppKey = AppKey;
 800e046:	6327      	str	r7, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 800e048:	f7fc f930 	bl	800a2ac <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_NWK_KEY;
 800e04c:	2309      	movs	r3, #9
 800e04e:	702b      	strb	r3, [r5, #0]
  mibReq.Param.NwkKey = NwkKey;
 800e050:	003b      	movs	r3, r7
  LoRaMacMibSetRequestConfirm( &mibReq );
 800e052:	0028      	movs	r0, r5
  mibReq.Param.NwkKey = NwkKey;
 800e054:	3310      	adds	r3, #16
 800e056:	6323      	str	r3, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 800e058:	f7fc f928 	bl	800a2ac <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_DEVICE_CLASS;
 800e05c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  LoRaMacMibSetRequestConfirm( &mibReq );
 800e05e:	0028      	movs	r0, r5
  mibReq.Type = MIB_DEVICE_CLASS;
 800e060:	702b      	strb	r3, [r5, #0]
  mibReq.Param.Class= CLASS_A;
 800e062:	712b      	strb	r3, [r5, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800e064:	f7fc f922 	bl	800a2ac <LoRaMacMibSetRequestConfirm>
  LoRaMacTestSetDutyCycleOn( LORAWAN_DUTYCYCLE_ON );
 800e068:	2001      	movs	r0, #1
 800e06a:	f7fc fcd1 	bl	800aa10 <LoRaMacTestSetDutyCycleOn>
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800e06e:	2330      	movs	r3, #48	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 800e070:	0028      	movs	r0, r5
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800e072:	702b      	strb	r3, [r5, #0]
  mibReq.Param.SystemMaxRxError = 20;
 800e074:	3b1c      	subs	r3, #28
 800e076:	6323      	str	r3, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 800e078:	f7fc f918 	bl	800a2ac <LoRaMacMibSetRequestConfirm>
  LoRaMacStart( );
 800e07c:	f7fb ffd6 	bl	800a02c <LoRaMacStart>
}
 800e080:	b015      	add	sp, #84	; 0x54
 800e082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e084:	08010ed9 	.word	0x08010ed9
 800e088:	20001130 	.word	0x20001130
 800e08c:	08010e14 	.word	0x08010e14
 800e090:	08010e1b 	.word	0x08010e1b
 800e094:	08010e4d 	.word	0x08010e4d
 800e098:	2000005c 	.word	0x2000005c
 800e09c:	08010e7f 	.word	0x08010e7f
 800e0a0:	0800dec1 	.word	0x0800dec1
 800e0a4:	0800de69 	.word	0x0800de69
 800e0a8:	0800e0d5 	.word	0x0800e0d5
 800e0ac:	0800de35 	.word	0x0800de35

0800e0b0 <LORA_Join>:
{
 800e0b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mlmeReq.Type = MLME_JOIN;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	466a      	mov	r2, sp
    mlmeReq.Req.Join.Datarate = LoRaParamInit->TxDatarate;
 800e0b6:	4669      	mov	r1, sp
    mlmeReq.Type = MLME_JOIN;
 800e0b8:	7013      	strb	r3, [r2, #0]
    mlmeReq.Req.Join.Datarate = LoRaParamInit->TxDatarate;
 800e0ba:	4b05      	ldr	r3, [pc, #20]	; (800e0d0 <LORA_Join+0x20>)
    LoRaMacMlmeRequest( &mlmeReq );
 800e0bc:	4668      	mov	r0, sp
    mlmeReq.Req.Join.Datarate = LoRaParamInit->TxDatarate;
 800e0be:	689a      	ldr	r2, [r3, #8]
 800e0c0:	7852      	ldrb	r2, [r2, #1]
 800e0c2:	710a      	strb	r2, [r1, #4]
    JoinParameters = mlmeReq.Req.Join;
 800e0c4:	711a      	strb	r2, [r3, #4]
    LoRaMacMlmeRequest( &mlmeReq );
 800e0c6:	f7fc fb33 	bl	800a730 <LoRaMacMlmeRequest>
}
 800e0ca:	b005      	add	sp, #20
 800e0cc:	bd00      	pop	{pc}
 800e0ce:	46c0      	nop			; (mov r8, r8)
 800e0d0:	20001130 	.word	0x20001130

0800e0d4 <MlmeConfirm>:
{
 800e0d4:	b510      	push	{r4, lr}
 800e0d6:	0004      	movs	r4, r0
 800e0d8:	7800      	ldrb	r0, [r0, #0]
 800e0da:	b088      	sub	sp, #32
 800e0dc:	280c      	cmp	r0, #12
 800e0de:	d814      	bhi.n	800e10a <MlmeConfirm+0x36>
 800e0e0:	f7f2 f812 	bl	8000108 <__gnu_thumb1_case_uqi>
 800e0e4:	15131307 	.word	0x15131307
 800e0e8:	13131313 	.word	0x13131313
 800e0ec:	20133913 	.word	0x20133913
 800e0f0:	29          	.byte	0x29
 800e0f1:	00          	.byte	0x00
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e0f2:	7863      	ldrb	r3, [r4, #1]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d106      	bne.n	800e106 <MlmeConfirm+0x32>
              LoRaMainCallbacks->LORA_HasJoined();
 800e0f8:	4b19      	ldr	r3, [pc, #100]	; (800e160 <MlmeConfirm+0x8c>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	695b      	ldr	r3, [r3, #20]
 800e0fe:	4798      	blx	r3
              LORA_DeviceTimeReq();
 800e100:	f7ff fe8c 	bl	800de1c <LORA_DeviceTimeReq>
}
 800e104:	e001      	b.n	800e10a <MlmeConfirm+0x36>
                LORA_Join();
 800e106:	f7ff ffd3 	bl	800e0b0 <LORA_Join>
}
 800e10a:	b008      	add	sp, #32
 800e10c:	bd10      	pop	{r4, pc}
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e10e:	7863      	ldrb	r3, [r4, #1]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d1fa      	bne.n	800e10a <MlmeConfirm+0x36>
                if (certif_running() == true )
 800e114:	f7ff fd5a 	bl	800dbcc <certif_running>
 800e118:	2800      	cmp	r0, #0
 800e11a:	d0f6      	beq.n	800e10a <MlmeConfirm+0x36>
                     certif_linkCheck( mlmeConfirm);
 800e11c:	0020      	movs	r0, r4
 800e11e:	f7ff fd63 	bl	800dbe8 <certif_linkCheck>
 800e122:	e7f2      	b.n	800e10a <MlmeConfirm+0x36>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e124:	7863      	ldrb	r3, [r4, #1]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d102      	bne.n	800e130 <MlmeConfirm+0x5c>
                LORA_PingSlotReq( );
 800e12a:	f7ff fe63 	bl	800ddf4 <LORA_PingSlotReq>
 800e12e:	e7ec      	b.n	800e10a <MlmeConfirm+0x36>
                LORA_BeaconReq( );
 800e130:	f7ff fe54 	bl	800dddc <LORA_BeaconReq>
 800e134:	e7e9      	b.n	800e10a <MlmeConfirm+0x36>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e136:	7863      	ldrb	r3, [r4, #1]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d1f6      	bne.n	800e12a <MlmeConfirm+0x56>
                mibReq.Type = MIB_DEVICE_CLASS;
 800e13c:	466a      	mov	r2, sp
                mibReq.Param.Class = CLASS_B;
 800e13e:	2401      	movs	r4, #1
                LoRaMacMibSetRequestConfirm( &mibReq );
 800e140:	4668      	mov	r0, sp
                mibReq.Type = MIB_DEVICE_CLASS;
 800e142:	7013      	strb	r3, [r2, #0]
                mibReq.Param.Class = CLASS_B;
 800e144:	7114      	strb	r4, [r2, #4]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800e146:	f7fc f8b1 	bl	800a2ac <LoRaMacMibSetRequestConfirm>
                LoRaMainCallbacks->LORA_ConfirmClass(CLASS_B);
 800e14a:	4b05      	ldr	r3, [pc, #20]	; (800e160 <MlmeConfirm+0x8c>)
 800e14c:	0020      	movs	r0, r4
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	699b      	ldr	r3, [r3, #24]
 800e152:	4798      	blx	r3
 800e154:	e7d9      	b.n	800e10a <MlmeConfirm+0x36>
            if( mlmeConfirm->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800e156:	7863      	ldrb	r3, [r4, #1]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d0d6      	beq.n	800e10a <MlmeConfirm+0x36>
 800e15c:	e7d0      	b.n	800e100 <MlmeConfirm+0x2c>
 800e15e:	46c0      	nop			; (mov r8, r8)
 800e160:	20001130 	.word	0x20001130

0800e164 <LORA_JoinStatus>:
{
 800e164:	b500      	push	{lr}
 800e166:	b089      	sub	sp, #36	; 0x24
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e168:	2301      	movs	r3, #1
 800e16a:	466a      	mov	r2, sp
  LoRaMacMibGetRequestConfirm( &mibReq );
 800e16c:	4668      	mov	r0, sp
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e16e:	7013      	strb	r3, [r2, #0]
  LoRaMacMibGetRequestConfirm( &mibReq );
 800e170:	f7fb ffbe 	bl	800a0f0 <LoRaMacMibGetRequestConfirm>
  if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e174:	466b      	mov	r3, sp
 800e176:	7918      	ldrb	r0, [r3, #4]
 800e178:	1e43      	subs	r3, r0, #1
 800e17a:	4198      	sbcs	r0, r3
    return LORA_RESET;
 800e17c:	b2c0      	uxtb	r0, r0
}
 800e17e:	b009      	add	sp, #36	; 0x24
 800e180:	bd00      	pop	{pc}
	...

0800e184 <LORA_send>:
{
 800e184:	b570      	push	{r4, r5, r6, lr}
 800e186:	b086      	sub	sp, #24
 800e188:	0004      	movs	r4, r0
 800e18a:	000e      	movs	r6, r1
    if (certif_running() == true)
 800e18c:	f7ff fd1e 	bl	800dbcc <certif_running>
 800e190:	0005      	movs	r5, r0
      return false;
 800e192:	2000      	movs	r0, #0
    if (certif_running() == true)
 800e194:	4285      	cmp	r5, r0
 800e196:	d113      	bne.n	800e1c0 <LORA_send+0x3c>
    if( LoRaMacQueryTxPossible( AppData->BuffSize, &txInfo ) != LORAMAC_STATUS_OK )
 800e198:	7920      	ldrb	r0, [r4, #4]
 800e19a:	a901      	add	r1, sp, #4
 800e19c:	f7fb ff4e 	bl	800a03c <LoRaMacQueryTxPossible>
 800e1a0:	4a13      	ldr	r2, [pc, #76]	; (800e1f0 <LORA_send+0x6c>)
 800e1a2:	ab02      	add	r3, sp, #8
 800e1a4:	2800      	cmp	r0, #0
 800e1a6:	d00d      	beq.n	800e1c4 <LORA_send+0x40>
        mcpsReq.Req.Unconfirmed.Datarate = LoRaParamInit->TxDatarate;
 800e1a8:	6892      	ldr	r2, [r2, #8]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800e1aa:	701d      	strb	r5, [r3, #0]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800e1ac:	609d      	str	r5, [r3, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800e1ae:	819d      	strh	r5, [r3, #12]
        mcpsReq.Req.Unconfirmed.Datarate = LoRaParamInit->TxDatarate;
 800e1b0:	7852      	ldrb	r2, [r2, #1]
    if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 800e1b2:	0018      	movs	r0, r3
            mcpsReq.Req.Confirmed.Datarate = LoRaParamInit->TxDatarate;
 800e1b4:	739a      	strb	r2, [r3, #14]
    if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 800e1b6:	f7fc fb77 	bl	800a8a8 <LoRaMacMcpsRequest>
 800e1ba:	1e43      	subs	r3, r0, #1
 800e1bc:	4198      	sbcs	r0, r3
 800e1be:	b2c0      	uxtb	r0, r0
}  
 800e1c0:	b006      	add	sp, #24
 800e1c2:	bd70      	pop	{r4, r5, r6, pc}
        if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 800e1c4:	6892      	ldr	r2, [r2, #8]
 800e1c6:	7965      	ldrb	r5, [r4, #5]
 800e1c8:	7852      	ldrb	r2, [r2, #1]
 800e1ca:	7920      	ldrb	r0, [r4, #4]
 800e1cc:	6821      	ldr	r1, [r4, #0]
 800e1ce:	b252      	sxtb	r2, r2
 800e1d0:	2e00      	cmp	r6, #0
 800e1d2:	d104      	bne.n	800e1de <LORA_send+0x5a>
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800e1d4:	701e      	strb	r6, [r3, #0]
            mcpsReq.Req.Unconfirmed.fPort = AppData->Port;
 800e1d6:	711d      	strb	r5, [r3, #4]
            mcpsReq.Req.Unconfirmed.fBufferSize = AppData->BuffSize;
 800e1d8:	8198      	strh	r0, [r3, #12]
            mcpsReq.Req.Unconfirmed.fBuffer = AppData->Buff;
 800e1da:	6099      	str	r1, [r3, #8]
            mcpsReq.Req.Unconfirmed.Datarate = LoRaParamInit->TxDatarate;
 800e1dc:	e7e9      	b.n	800e1b2 <LORA_send+0x2e>
            mcpsReq.Type = MCPS_CONFIRMED;
 800e1de:	2401      	movs	r4, #1
            mcpsReq.Req.Confirmed.fBuffer = AppData->Buff;
 800e1e0:	6099      	str	r1, [r3, #8]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800e1e2:	2108      	movs	r1, #8
            mcpsReq.Type = MCPS_CONFIRMED;
 800e1e4:	701c      	strb	r4, [r3, #0]
            mcpsReq.Req.Confirmed.fPort = AppData->Port;
 800e1e6:	711d      	strb	r5, [r3, #4]
            mcpsReq.Req.Confirmed.fBufferSize = AppData->BuffSize;
 800e1e8:	8198      	strh	r0, [r3, #12]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800e1ea:	73d9      	strb	r1, [r3, #15]
 800e1ec:	e7e1      	b.n	800e1b2 <LORA_send+0x2e>
 800e1ee:	46c0      	nop			; (mov r8, r8)
 800e1f0:	20001130 	.word	0x20001130

0800e1f4 <LORA_RequestClass>:
{
 800e1f4:	b570      	push	{r4, r5, r6, lr}
 800e1f6:	b088      	sub	sp, #32
  mibReq.Type = MIB_DEVICE_CLASS;
 800e1f8:	466b      	mov	r3, sp
 800e1fa:	2600      	movs	r6, #0
{
 800e1fc:	0005      	movs	r5, r0
  LoRaMacMibGetRequestConfirm( &mibReq );
 800e1fe:	4668      	mov	r0, sp
  mibReq.Type = MIB_DEVICE_CLASS;
 800e200:	701e      	strb	r6, [r3, #0]
  LoRaMacMibGetRequestConfirm( &mibReq );
 800e202:	f7fb ff75 	bl	800a0f0 <LoRaMacMibGetRequestConfirm>
  currentClass = mibReq.Param.Class;
 800e206:	466b      	mov	r3, sp
 800e208:	7918      	ldrb	r0, [r3, #4]
  LoraErrorStatus Errorstatus = LORA_SUCCESS;
 800e20a:	0034      	movs	r4, r6
  if (currentClass != newClass)
 800e20c:	42a8      	cmp	r0, r5
 800e20e:	d00d      	beq.n	800e22c <LORA_RequestClass+0x38>
    switch (newClass)
 800e210:	2d01      	cmp	r5, #1
 800e212:	d014      	beq.n	800e23e <LORA_RequestClass+0x4a>
 800e214:	2d02      	cmp	r5, #2
 800e216:	d016      	beq.n	800e246 <LORA_RequestClass+0x52>
 800e218:	42b5      	cmp	r5, r6
 800e21a:	d107      	bne.n	800e22c <LORA_RequestClass+0x38>
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e21c:	4668      	mov	r0, sp
        mibReq.Param.Class = CLASS_A;
 800e21e:	711e      	strb	r6, [r3, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e220:	f7fc f844 	bl	800a2ac <LoRaMacMibSetRequestConfirm>
 800e224:	42b0      	cmp	r0, r6
 800e226:	d004      	beq.n	800e232 <LORA_RequestClass+0x3e>
          Errorstatus = LORA_ERROR;
 800e228:	2401      	movs	r4, #1
 800e22a:	4264      	negs	r4, r4
}
 800e22c:	0020      	movs	r0, r4
 800e22e:	b008      	add	sp, #32
 800e230:	bd70      	pop	{r4, r5, r6, pc}
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_A);
 800e232:	0030      	movs	r0, r6
 800e234:	4b0b      	ldr	r3, [pc, #44]	; (800e264 <LORA_RequestClass+0x70>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	699b      	ldr	r3, [r3, #24]
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_C);
 800e23a:	4798      	blx	r3
 800e23c:	e7f6      	b.n	800e22c <LORA_RequestClass+0x38>
        Errorstatus = LORA_BeaconReq( );
 800e23e:	f7ff fdcd 	bl	800dddc <LORA_BeaconReq>
 800e242:	0004      	movs	r4, r0
        break;
 800e244:	e7f2      	b.n	800e22c <LORA_RequestClass+0x38>
        if (currentClass != CLASS_A)
 800e246:	1e44      	subs	r4, r0, #1
 800e248:	41a0      	sbcs	r0, r4
        mibReq.Param.Class = CLASS_C;
 800e24a:	466b      	mov	r3, sp
        if (currentClass != CLASS_A)
 800e24c:	4244      	negs	r4, r0
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e24e:	4668      	mov	r0, sp
        mibReq.Param.Class = CLASS_C;
 800e250:	711d      	strb	r5, [r3, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e252:	f7fc f82b 	bl	800a2ac <LoRaMacMibSetRequestConfirm>
 800e256:	2800      	cmp	r0, #0
 800e258:	d1e6      	bne.n	800e228 <LORA_RequestClass+0x34>
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_C);
 800e25a:	4b02      	ldr	r3, [pc, #8]	; (800e264 <LORA_RequestClass+0x70>)
 800e25c:	0028      	movs	r0, r5
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	699b      	ldr	r3, [r3, #24]
 800e262:	e7ea      	b.n	800e23a <LORA_RequestClass+0x46>
 800e264:	20001130 	.word	0x20001130

0800e268 <LPM_SetOffMode>:

/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/
void LPM_SetOffMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 800e268:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e26a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e26e:	b672      	cpsid	i
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 800e270:	2900      	cmp	r1, #0
 800e272:	d008      	beq.n	800e286 <LPM_SetOffMode+0x1e>
 800e274:	2901      	cmp	r1, #1
 800e276:	d103      	bne.n	800e280 <LPM_SetOffMode+0x18>
  {
    case LPM_Disable:
    {
      OffModeDisable |= (uint32_t)id;
 800e278:	4b05      	ldr	r3, [pc, #20]	; (800e290 <LPM_SetOffMode+0x28>)
 800e27a:	681a      	ldr	r2, [r3, #0]
 800e27c:	4310      	orrs	r0, r2
 800e27e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e280:	f384 8810 	msr	PRIMASK, r4
  }
  
  RESTORE_PRIMASK( );

  return;
}
 800e284:	bd10      	pop	{r4, pc}
      OffModeDisable &= ~(uint32_t)id;
 800e286:	4a02      	ldr	r2, [pc, #8]	; (800e290 <LPM_SetOffMode+0x28>)
 800e288:	6813      	ldr	r3, [r2, #0]
 800e28a:	4383      	bics	r3, r0
 800e28c:	6013      	str	r3, [r2, #0]
      break;
 800e28e:	e7f7      	b.n	800e280 <LPM_SetOffMode+0x18>
 800e290:	2000117c 	.word	0x2000117c

0800e294 <LPM_SetStopMode>:

void LPM_SetStopMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 800e294:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e296:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e29a:	b672      	cpsid	i
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 800e29c:	2900      	cmp	r1, #0
 800e29e:	d008      	beq.n	800e2b2 <LPM_SetStopMode+0x1e>
 800e2a0:	2901      	cmp	r1, #1
 800e2a2:	d103      	bne.n	800e2ac <LPM_SetStopMode+0x18>
  {
    case LPM_Disable:
    {
      StopModeDisable |= (uint32_t)id;
 800e2a4:	4b05      	ldr	r3, [pc, #20]	; (800e2bc <LPM_SetStopMode+0x28>)
 800e2a6:	685a      	ldr	r2, [r3, #4]
 800e2a8:	4310      	orrs	r0, r2
 800e2aa:	6058      	str	r0, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2ac:	f384 8810 	msr	PRIMASK, r4
      break;
  }
  RESTORE_PRIMASK( );

  return;
}
 800e2b0:	bd10      	pop	{r4, pc}
      StopModeDisable &= ~(uint32_t)id;
 800e2b2:	4a02      	ldr	r2, [pc, #8]	; (800e2bc <LPM_SetStopMode+0x28>)
 800e2b4:	6853      	ldr	r3, [r2, #4]
 800e2b6:	4383      	bics	r3, r0
 800e2b8:	6053      	str	r3, [r2, #4]
      break;
 800e2ba:	e7f7      	b.n	800e2ac <LPM_SetStopMode+0x18>
 800e2bc:	2000117c 	.word	0x2000117c

0800e2c0 <LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2c0:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e2c4:	b672      	cpsid	i
  
  DISABLE_IRQ( );

  if(StopModeDisable )
  {
    mode_selected = LPM_SleepMode;
 800e2c6:	2000      	movs	r0, #0
  if(StopModeDisable )
 800e2c8:	4b05      	ldr	r3, [pc, #20]	; (800e2e0 <LPM_GetMode+0x20>)
 800e2ca:	6859      	ldr	r1, [r3, #4]
 800e2cc:	4281      	cmp	r1, r0
 800e2ce:	d103      	bne.n	800e2d8 <LPM_GetMode+0x18>
  }
  else
  {
    if(OffModeDisable)
 800e2d0:	6818      	ldr	r0, [r3, #0]
    {
      mode_selected = LPM_StopMode;
    }
    else
    {
      mode_selected = LPM_OffMode;
 800e2d2:	4243      	negs	r3, r0
 800e2d4:	4158      	adcs	r0, r3
 800e2d6:	3001      	adds	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2d8:	f382 8810 	msr	PRIMASK, r2
  }

  RESTORE_PRIMASK( );

  return mode_selected;
}
 800e2dc:	4770      	bx	lr
 800e2de:	46c0      	nop			; (mov r8, r8)
 800e2e0:	2000117c 	.word	0x2000117c

0800e2e4 <LPM_ExitSleepMode>:
 800e2e4:	4770      	bx	lr

0800e2e6 <LPM_EnterOffMode>:
 800e2e6:	4770      	bx	lr

0800e2e8 <LPM_ExitOffMode>:
 800e2e8:	4770      	bx	lr
	...

0800e2ec <LPM_EnterLowPower>:
  if( StopModeDisable )
 800e2ec:	4b0b      	ldr	r3, [pc, #44]	; (800e31c <LPM_EnterLowPower+0x30>)
{
 800e2ee:	b510      	push	{r4, lr}
  if( StopModeDisable )
 800e2f0:	685a      	ldr	r2, [r3, #4]
 800e2f2:	2a00      	cmp	r2, #0
 800e2f4:	d004      	beq.n	800e300 <LPM_EnterLowPower+0x14>
    LPM_EnterSleepMode();
 800e2f6:	f001 fafb 	bl	800f8f0 <LPM_EnterSleepMode>
    LPM_ExitSleepMode();
 800e2fa:	f7ff fff3 	bl	800e2e4 <LPM_ExitSleepMode>
}
 800e2fe:	bd10      	pop	{r4, pc}
    if( OffModeDisable )
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d004      	beq.n	800e310 <LPM_EnterLowPower+0x24>
      LPM_EnterStopMode();
 800e306:	f001 fa85 	bl	800f814 <LPM_EnterStopMode>
      LPM_ExitStopMode();
 800e30a:	f001 fac1 	bl	800f890 <LPM_ExitStopMode>
 800e30e:	e7f6      	b.n	800e2fe <LPM_EnterLowPower+0x12>
      LPM_EnterOffMode();
 800e310:	f7ff ffe9 	bl	800e2e6 <LPM_EnterOffMode>
      LPM_ExitOffMode();
 800e314:	f7ff ffe8 	bl	800e2e8 <LPM_ExitOffMode>
  return;
 800e318:	e7f1      	b.n	800e2fe <LPM_EnterLowPower+0x12>
 800e31a:	46c0      	nop			; (mov r8, r8)
 800e31c:	2000117c 	.word	0x2000117c

0800e320 <add_elementSize_and_inc_writeIdx>:
  }
}

static void add_elementSize_and_inc_writeIdx(queue_param_t* queue,uint16_t element_size)
{
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size>>8);
 800e320:	8843      	ldrh	r3, [r0, #2]
{
 800e322:	b510      	push	{r4, lr}
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size>>8);
 800e324:	1c5a      	adds	r2, r3, #1
 800e326:	6884      	ldr	r4, [r0, #8]
 800e328:	8042      	strh	r2, [r0, #2]
 800e32a:	0a0a      	lsrs	r2, r1, #8
 800e32c:	54e2      	strb	r2, [r4, r3]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 800e32e:	8842      	ldrh	r2, [r0, #2]
 800e330:	88c3      	ldrh	r3, [r0, #6]
 800e332:	429a      	cmp	r2, r3
 800e334:	d101      	bne.n	800e33a <add_elementSize_and_inc_writeIdx+0x1a>
  {
    queue->queue_write_idx=0;
 800e336:	2300      	movs	r3, #0
 800e338:	8043      	strh	r3, [r0, #2]
  }
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size);
 800e33a:	8843      	ldrh	r3, [r0, #2]
 800e33c:	1c5a      	adds	r2, r3, #1
 800e33e:	8042      	strh	r2, [r0, #2]
 800e340:	6882      	ldr	r2, [r0, #8]
 800e342:	54d1      	strb	r1, [r2, r3]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 800e344:	8842      	ldrh	r2, [r0, #2]
 800e346:	88c3      	ldrh	r3, [r0, #6]
 800e348:	429a      	cmp	r2, r3
 800e34a:	d101      	bne.n	800e350 <add_elementSize_and_inc_writeIdx+0x30>
  {
    queue->queue_write_idx=0;
 800e34c:	2300      	movs	r3, #0
 800e34e:	8043      	strh	r3, [r0, #2]
  }
}
 800e350:	bd10      	pop	{r4, pc}

0800e352 <circular_queue_init>:
  queue->queue_read_idx=0;
 800e352:	2300      	movs	r3, #0
 800e354:	6003      	str	r3, [r0, #0]
  queue->queue_nb_element=0;
 800e356:	8083      	strh	r3, [r0, #4]
  queue->queue_buff=queue_buff;
 800e358:	6081      	str	r1, [r0, #8]
  queue->queue_size=queue_size;
 800e35a:	80c2      	strh	r2, [r0, #6]
  queue->queue_full=0;
 800e35c:	7303      	strb	r3, [r0, #12]
}
 800e35e:	4770      	bx	lr

0800e360 <circular_queue_add>:
{
 800e360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e362:	9100      	str	r1, [sp, #0]
  if (queue->queue_write_idx>=queue->queue_read_idx)
 800e364:	8846      	ldrh	r6, [r0, #2]
 800e366:	8803      	ldrh	r3, [r0, #0]
{
 800e368:	0004      	movs	r4, r0
 800e36a:	0015      	movs	r5, r2
  if (queue->queue_write_idx>=queue->queue_read_idx)
 800e36c:	429e      	cmp	r6, r3
 800e36e:	d301      	bcc.n	800e374 <circular_queue_add+0x14>
    free_size=queue->queue_size-(queue->queue_write_idx-queue->queue_read_idx); 
 800e370:	88c2      	ldrh	r2, [r0, #6]
 800e372:	189b      	adds	r3, r3, r2
  if ( queue->queue_full==1)
 800e374:	7b22      	ldrb	r2, [r4, #12]
    free_size=(queue->queue_read_idx-queue->queue_write_idx); 
 800e376:	1b9b      	subs	r3, r3, r6
 800e378:	b21b      	sxth	r3, r3
  if ( queue->queue_full==1)
 800e37a:	2a01      	cmp	r2, #1
 800e37c:	d100      	bne.n	800e380 <circular_queue_add+0x20>
    free_size=0;
 800e37e:	2300      	movs	r3, #0
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 800e380:	1c6a      	adds	r2, r5, #1
 800e382:	429a      	cmp	r2, r3
 800e384:	da28      	bge.n	800e3d8 <circular_queue_add+0x78>
      ((queue->queue_write_idx+buff_size+ELEMENT_SIZE_LEN<=queue->queue_size) 
 800e386:	19a9      	adds	r1, r5, r6
 800e388:	88e2      	ldrh	r2, [r4, #6]
 800e38a:	3101      	adds	r1, #1
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 800e38c:	4291      	cmp	r1, r2
 800e38e:	db02      	blt.n	800e396 <circular_queue_add+0x36>
        || (queue->queue_write_idx>=queue->queue_size-ELEMENT_SIZE_LEN))) /*elementSize cut in 2 or elementSize at Top*/
 800e390:	3a02      	subs	r2, #2
 800e392:	4296      	cmp	r6, r2
 800e394:	db20      	blt.n	800e3d8 <circular_queue_add+0x78>
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 800e396:	0029      	movs	r1, r5
 800e398:	0020      	movs	r0, r4
 800e39a:	f7ff ffc1 	bl	800e320 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,buff_size);
 800e39e:	68a3      	ldr	r3, [r4, #8]
 800e3a0:	8862      	ldrh	r2, [r4, #2]
 800e3a2:	189a      	adds	r2, r3, r2
  while(size--)
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	429d      	cmp	r5, r3
 800e3a8:	d111      	bne.n	800e3ce <circular_queue_add+0x6e>
    queue->queue_write_idx+=buff_size;
 800e3aa:	8862      	ldrh	r2, [r4, #2]
    if (queue->queue_write_idx==queue->queue_size)
 800e3ac:	88e3      	ldrh	r3, [r4, #6]
    queue->queue_write_idx+=buff_size;
 800e3ae:	18ad      	adds	r5, r5, r2
 800e3b0:	b2ad      	uxth	r5, r5
 800e3b2:	8065      	strh	r5, [r4, #2]
    if (queue->queue_write_idx==queue->queue_size)
 800e3b4:	42ab      	cmp	r3, r5
 800e3b6:	d101      	bne.n	800e3bc <circular_queue_add+0x5c>
        queue->queue_write_idx=0;
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	8063      	strh	r3, [r4, #2]
    queue->queue_nb_element++; 
 800e3bc:	88a3      	ldrh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 800e3be:	8862      	ldrh	r2, [r4, #2]
    queue->queue_nb_element++; 
 800e3c0:	3301      	adds	r3, #1
 800e3c2:	80a3      	strh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 800e3c4:	8823      	ldrh	r3, [r4, #0]
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d035      	beq.n	800e436 <circular_queue_add+0xd6>
    status=0;
 800e3ca:	2000      	movs	r0, #0
}
 800e3cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    *out++= *in++;
 800e3ce:	9900      	ldr	r1, [sp, #0]
 800e3d0:	5cc9      	ldrb	r1, [r1, r3]
 800e3d2:	54d1      	strb	r1, [r2, r3]
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	e7e6      	b.n	800e3a6 <circular_queue_add+0x46>
  else if (buff_size+2*ELEMENT_SIZE_LEN<=free_buff_len)
 800e3d8:	1cea      	adds	r2, r5, #3
 800e3da:	4293      	cmp	r3, r2
 800e3dc:	dd37      	ble.n	800e44e <circular_queue_add+0xee>
    uint16_t top_size = queue->queue_size-(queue->queue_write_idx+ELEMENT_SIZE_LEN);
 800e3de:	88e2      	ldrh	r2, [r4, #6]
    add_elementSize_and_inc_writeIdx(queue,top_size);
 800e3e0:	0020      	movs	r0, r4
 800e3e2:	3a02      	subs	r2, #2
 800e3e4:	b293      	uxth	r3, r2
    uint16_t top_size = queue->queue_size-(queue->queue_write_idx+ELEMENT_SIZE_LEN);
 800e3e6:	1b9f      	subs	r7, r3, r6
 800e3e8:	b2bf      	uxth	r7, r7
    add_elementSize_and_inc_writeIdx(queue,top_size);
 800e3ea:	0039      	movs	r1, r7
 800e3ec:	9301      	str	r3, [sp, #4]
 800e3ee:	f7ff ff97 	bl	800e320 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,top_size);
 800e3f2:	68a3      	ldr	r3, [r4, #8]
 800e3f4:	8862      	ldrh	r2, [r4, #2]
 800e3f6:	189a      	adds	r2, r3, r2
  while(size--)
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	429f      	cmp	r7, r3
 800e3fc:	d11e      	bne.n	800e43c <circular_queue_add+0xdc>
    queue->queue_write_idx=0;
 800e3fe:	2300      	movs	r3, #0
 800e400:	8063      	strh	r3, [r4, #2]
    buff_size-=top_size;
 800e402:	9b01      	ldr	r3, [sp, #4]
 800e404:	19ad      	adds	r5, r5, r6
 800e406:	1aed      	subs	r5, r5, r3
 800e408:	b2ad      	uxth	r5, r5
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 800e40a:	0029      	movs	r1, r5
 800e40c:	0020      	movs	r0, r4
 800e40e:	f7ff ff87 	bl	800e320 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff+top_size,buff_size);
 800e412:	68a3      	ldr	r3, [r4, #8]
 800e414:	8862      	ldrh	r2, [r4, #2]
 800e416:	189a      	adds	r2, r3, r2
 800e418:	9b00      	ldr	r3, [sp, #0]
 800e41a:	19df      	adds	r7, r3, r7
 800e41c:	2300      	movs	r3, #0
  while(size--)
 800e41e:	429d      	cmp	r5, r3
 800e420:	d111      	bne.n	800e446 <circular_queue_add+0xe6>
    queue->queue_nb_element+=2;
 800e422:	88a3      	ldrh	r3, [r4, #4]
    queue->queue_write_idx+=buff_size;
 800e424:	8866      	ldrh	r6, [r4, #2]
    queue->queue_nb_element+=2;
 800e426:	3302      	adds	r3, #2
    queue->queue_write_idx+=buff_size;
 800e428:	19ad      	adds	r5, r5, r6
    queue->queue_nb_element+=2;
 800e42a:	80a3      	strh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 800e42c:	8823      	ldrh	r3, [r4, #0]
    queue->queue_write_idx+=buff_size;
 800e42e:	b2ad      	uxth	r5, r5
 800e430:	8065      	strh	r5, [r4, #2]
    if (queue->queue_write_idx== queue->queue_read_idx)
 800e432:	42ab      	cmp	r3, r5
 800e434:	d1c9      	bne.n	800e3ca <circular_queue_add+0x6a>
      queue->queue_full=1;
 800e436:	2301      	movs	r3, #1
 800e438:	7323      	strb	r3, [r4, #12]
 800e43a:	e7c6      	b.n	800e3ca <circular_queue_add+0x6a>
    *out++= *in++;
 800e43c:	9900      	ldr	r1, [sp, #0]
 800e43e:	5cc9      	ldrb	r1, [r1, r3]
 800e440:	54d1      	strb	r1, [r2, r3]
 800e442:	3301      	adds	r3, #1
 800e444:	e7d9      	b.n	800e3fa <circular_queue_add+0x9a>
 800e446:	5cf9      	ldrb	r1, [r7, r3]
 800e448:	54d1      	strb	r1, [r2, r3]
 800e44a:	3301      	adds	r3, #1
 800e44c:	e7e7      	b.n	800e41e <circular_queue_add+0xbe>
    status=-1;
 800e44e:	2001      	movs	r0, #1
 800e450:	4240      	negs	r0, r0
  return status;
 800e452:	e7bb      	b.n	800e3cc <circular_queue_add+0x6c>

0800e454 <circular_queue_get>:
{
 800e454:	b570      	push	{r4, r5, r6, lr}
  if (queue->queue_nb_element==0)
 800e456:	8883      	ldrh	r3, [r0, #4]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d015      	beq.n	800e488 <circular_queue_get+0x34>
    uint16_t read_idx=queue->queue_read_idx;
 800e45c:	8804      	ldrh	r4, [r0, #0]
    size=(uint16_t) queue->queue_buff[read_idx++]<<8;
 800e45e:	6885      	ldr	r5, [r0, #8]
 800e460:	1c63      	adds	r3, r4, #1
    if (read_idx==queue->queue_size)
 800e462:	88c6      	ldrh	r6, [r0, #6]
    size=(uint16_t) queue->queue_buff[read_idx++]<<8;
 800e464:	5d2c      	ldrb	r4, [r5, r4]
 800e466:	b29b      	uxth	r3, r3
 800e468:	0224      	lsls	r4, r4, #8
    if (read_idx==queue->queue_size)
 800e46a:	429e      	cmp	r6, r3
 800e46c:	d100      	bne.n	800e470 <circular_queue_get+0x1c>
      read_idx=0;
 800e46e:	2300      	movs	r3, #0
    size|=(uint16_t) queue->queue_buff[read_idx++];
 800e470:	1c58      	adds	r0, r3, #1
 800e472:	5ceb      	ldrb	r3, [r5, r3]
 800e474:	b280      	uxth	r0, r0
 800e476:	431c      	orrs	r4, r3
    if (read_idx==queue->queue_size)
 800e478:	4286      	cmp	r6, r0
 800e47a:	d100      	bne.n	800e47e <circular_queue_get+0x2a>
      read_idx=0;
 800e47c:	2000      	movs	r0, #0
    *buff= queue->queue_buff+read_idx;
 800e47e:	1828      	adds	r0, r5, r0
 800e480:	6008      	str	r0, [r1, #0]
    status=0;
 800e482:	2000      	movs	r0, #0
    * buff_size=size;
 800e484:	8014      	strh	r4, [r2, #0]
}
 800e486:	bd70      	pop	{r4, r5, r6, pc}
    status=-1;
 800e488:	2001      	movs	r0, #1
 800e48a:	4240      	negs	r0, r0
  return status;
 800e48c:	e7fb      	b.n	800e486 <circular_queue_get+0x32>

0800e48e <circular_queue_remove>:
{
 800e48e:	b570      	push	{r4, r5, r6, lr}
  if (queue->queue_nb_element==0)
 800e490:	8882      	ldrh	r2, [r0, #4]
 800e492:	2a00      	cmp	r2, #0
 800e494:	d023      	beq.n	800e4de <circular_queue_remove+0x50>
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 800e496:	8803      	ldrh	r3, [r0, #0]
 800e498:	6885      	ldr	r5, [r0, #8]
 800e49a:	1c59      	adds	r1, r3, #1
 800e49c:	b289      	uxth	r1, r1
 800e49e:	8001      	strh	r1, [r0, #0]
 800e4a0:	5ceb      	ldrb	r3, [r5, r3]
    if (queue->queue_read_idx==queue->queue_size)
 800e4a2:	88c4      	ldrh	r4, [r0, #6]
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 800e4a4:	021b      	lsls	r3, r3, #8
    if (queue->queue_read_idx==queue->queue_size)
 800e4a6:	42a1      	cmp	r1, r4
 800e4a8:	d101      	bne.n	800e4ae <circular_queue_remove+0x20>
      queue->queue_read_idx=0;
 800e4aa:	2100      	movs	r1, #0
 800e4ac:	8001      	strh	r1, [r0, #0]
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 800e4ae:	8806      	ldrh	r6, [r0, #0]
 800e4b0:	1c71      	adds	r1, r6, #1
 800e4b2:	b289      	uxth	r1, r1
 800e4b4:	8001      	strh	r1, [r0, #0]
 800e4b6:	5dad      	ldrb	r5, [r5, r6]
 800e4b8:	432b      	orrs	r3, r5
    if (queue->queue_read_idx==queue->queue_size)
 800e4ba:	428c      	cmp	r4, r1
 800e4bc:	d101      	bne.n	800e4c2 <circular_queue_remove+0x34>
      queue->queue_read_idx=0;
 800e4be:	2100      	movs	r1, #0
 800e4c0:	8001      	strh	r1, [r0, #0]
    queue->queue_read_idx+=size;
 800e4c2:	8801      	ldrh	r1, [r0, #0]
 800e4c4:	185b      	adds	r3, r3, r1
 800e4c6:	b29b      	uxth	r3, r3
    if (queue->queue_read_idx==queue->queue_size)
 800e4c8:	429c      	cmp	r4, r3
 800e4ca:	d006      	beq.n	800e4da <circular_queue_remove+0x4c>
        queue->queue_read_idx=0;
 800e4cc:	8003      	strh	r3, [r0, #0]
    queue->queue_full=0;
 800e4ce:	2300      	movs	r3, #0
    queue->queue_nb_element--;
 800e4d0:	3a01      	subs	r2, #1
 800e4d2:	8082      	strh	r2, [r0, #4]
    queue->queue_full=0;
 800e4d4:	7303      	strb	r3, [r0, #12]
    status=0;
 800e4d6:	0018      	movs	r0, r3
}
 800e4d8:	bd70      	pop	{r4, r5, r6, pc}
        queue->queue_read_idx=0;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	e7f6      	b.n	800e4cc <circular_queue_remove+0x3e>
      status=-1;
 800e4de:	2001      	movs	r0, #1
 800e4e0:	4240      	negs	r0, r0
  return status;
 800e4e2:	e7f9      	b.n	800e4d8 <circular_queue_remove+0x4a>

0800e4e4 <circular_queue_sense>:
  if (queue->queue_nb_element==0)
 800e4e4:	8880      	ldrh	r0, [r0, #4]
 800e4e6:	4243      	negs	r3, r0
 800e4e8:	4158      	adcs	r0, r3
 800e4ea:	4240      	negs	r0, r0
}
 800e4ec:	4770      	bx	lr
	...

0800e4f0 <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800e4f0:	b082      	sub	sp, #8
 800e4f2:	b513      	push	{r0, r1, r4, lr}
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds + b.Seconds;
 800e4f4:	18c9      	adds	r1, r1, r3
{
 800e4f6:	9305      	str	r3, [sp, #20]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800e4f8:	ab05      	add	r3, sp, #20
 800e4fa:	889c      	ldrh	r4, [r3, #4]
 800e4fc:	18a2      	adds	r2, r4, r2
    if( c.SubSeconds >= 1000 )
 800e4fe:	24fa      	movs	r4, #250	; 0xfa
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800e500:	b293      	uxth	r3, r2
 800e502:	b212      	sxth	r2, r2
    if( c.SubSeconds >= 1000 )
 800e504:	00a4      	lsls	r4, r4, #2
 800e506:	42a2      	cmp	r2, r4
 800e508:	db03      	blt.n	800e512 <SysTimeAdd+0x22>
    {
        c.Seconds++;
        c.SubSeconds -= 1000;
 800e50a:	4a05      	ldr	r2, [pc, #20]	; (800e520 <SysTimeAdd+0x30>)
        c.Seconds++;
 800e50c:	3101      	adds	r1, #1
        c.SubSeconds -= 1000;
 800e50e:	189b      	adds	r3, r3, r2
 800e510:	b21a      	sxth	r2, r3
    }
    return c;
 800e512:	6001      	str	r1, [r0, #0]
 800e514:	8082      	strh	r2, [r0, #4]
}
 800e516:	bc16      	pop	{r1, r2, r4}
 800e518:	bc08      	pop	{r3}
 800e51a:	b002      	add	sp, #8
 800e51c:	4718      	bx	r3
 800e51e:	46c0      	nop			; (mov r8, r8)
 800e520:	fffffc18 	.word	0xfffffc18

0800e524 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 800e524:	b082      	sub	sp, #8
 800e526:	b513      	push	{r0, r1, r4, lr}
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds - b.Seconds;
 800e528:	1ac9      	subs	r1, r1, r3
{
 800e52a:	9305      	str	r3, [sp, #20]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800e52c:	ab05      	add	r3, sp, #20
 800e52e:	889b      	ldrh	r3, [r3, #4]
 800e530:	1ad2      	subs	r2, r2, r3
 800e532:	b293      	uxth	r3, r2
 800e534:	b214      	sxth	r4, r2
    if( c.SubSeconds < 0 )
 800e536:	0412      	lsls	r2, r2, #16
 800e538:	d504      	bpl.n	800e544 <SysTimeSub+0x20>
    {
        c.Seconds--;
        c.SubSeconds += 1000;
 800e53a:	22fa      	movs	r2, #250	; 0xfa
 800e53c:	0092      	lsls	r2, r2, #2
 800e53e:	189b      	adds	r3, r3, r2
        c.Seconds--;
 800e540:	3901      	subs	r1, #1
        c.SubSeconds += 1000;
 800e542:	b21c      	sxth	r4, r3
    }
    return c;
 800e544:	6001      	str	r1, [r0, #0]
 800e546:	8084      	strh	r4, [r0, #4]
}
 800e548:	bc16      	pop	{r1, r2, r4}
 800e54a:	bc08      	pop	{r3}
 800e54c:	b002      	add	sp, #8
 800e54e:	4718      	bx	r3

0800e550 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 800e550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    SysTime_t DeltaTime;
  
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e552:	2300      	movs	r3, #0
{
 800e554:	9000      	str	r0, [sp, #0]
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e556:	ac02      	add	r4, sp, #8

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e558:	a803      	add	r0, sp, #12
{
 800e55a:	9101      	str	r1, [sp, #4]
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e55c:	9302      	str	r3, [sp, #8]
 800e55e:	80a3      	strh	r3, [r4, #4]
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e560:	f000 fcec 	bl	800ef3c <HW_RTC_GetCalendarTime>
    c.Seconds = a.Seconds - b.Seconds;
 800e564:	9b00      	ldr	r3, [sp, #0]
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e566:	9002      	str	r0, [sp, #8]
    c.Seconds = a.Seconds - b.Seconds;
 800e568:	1a18      	subs	r0, r3, r0
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800e56a:	466b      	mov	r3, sp
 800e56c:	88a2      	ldrh	r2, [r4, #4]
 800e56e:	889b      	ldrh	r3, [r3, #4]
 800e570:	1a9b      	subs	r3, r3, r2
 800e572:	b29a      	uxth	r2, r3
 800e574:	b219      	sxth	r1, r3
    if( c.SubSeconds < 0 )
 800e576:	041b      	lsls	r3, r3, #16
 800e578:	d504      	bpl.n	800e584 <SysTimeSet+0x34>
        c.SubSeconds += 1000;
 800e57a:	23fa      	movs	r3, #250	; 0xfa
 800e57c:	009b      	lsls	r3, r3, #2
 800e57e:	18d2      	adds	r2, r2, r3
        c.Seconds--;
 800e580:	3801      	subs	r0, #1
        c.SubSeconds += 1000;
 800e582:	b211      	sxth	r1, r2

    // sysTime is epoch
    DeltaTime = SysTimeSub( sysTime, calendarTime );

    HW_RTC_BKUPWrite( DeltaTime.Seconds, ( uint32_t )DeltaTime.SubSeconds );
 800e584:	f000 fcee 	bl	800ef64 <HW_RTC_BKUPWrite>
}
 800e588:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
	...

0800e58c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 800e58c:	b530      	push	{r4, r5, lr}
 800e58e:	b085      	sub	sp, #20
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e590:	2300      	movs	r3, #0
 800e592:	466a      	mov	r2, sp
{
 800e594:	0004      	movs	r4, r0
    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
    SysTime_t DeltaTime;

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e596:	a801      	add	r0, sp, #4
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e598:	8093      	strh	r3, [r2, #4]
 800e59a:	9300      	str	r3, [sp, #0]
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e59c:	f000 fcce 	bl	800ef3c <HW_RTC_GetCalendarTime>

    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );
 800e5a0:	ad02      	add	r5, sp, #8
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e5a2:	9000      	str	r0, [sp, #0]
    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );
 800e5a4:	a903      	add	r1, sp, #12
 800e5a6:	0028      	movs	r0, r5
 800e5a8:	f000 fcec 	bl	800ef84 <HW_RTC_BKUPRead>
    c.Seconds = a.Seconds + b.Seconds;
 800e5ac:	9b02      	ldr	r3, [sp, #8]
 800e5ae:	9a00      	ldr	r2, [sp, #0]
 800e5b0:	1899      	adds	r1, r3, r2
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800e5b2:	466a      	mov	r2, sp
 800e5b4:	88ab      	ldrh	r3, [r5, #4]
 800e5b6:	8892      	ldrh	r2, [r2, #4]
 800e5b8:	189b      	adds	r3, r3, r2
    if( c.SubSeconds >= 1000 )
 800e5ba:	22fa      	movs	r2, #250	; 0xfa
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800e5bc:	b298      	uxth	r0, r3
 800e5be:	b21b      	sxth	r3, r3
    if( c.SubSeconds >= 1000 )
 800e5c0:	0092      	lsls	r2, r2, #2
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	db03      	blt.n	800e5ce <SysTimeGet+0x42>
        c.SubSeconds -= 1000;
 800e5c6:	4b04      	ldr	r3, [pc, #16]	; (800e5d8 <SysTimeGet+0x4c>)
        c.Seconds++;
 800e5c8:	3101      	adds	r1, #1
        c.SubSeconds -= 1000;
 800e5ca:	18c0      	adds	r0, r0, r3
 800e5cc:	b203      	sxth	r3, r0

    sysTime = SysTimeAdd( DeltaTime, calendarTime );

    return sysTime;
}
 800e5ce:	0020      	movs	r0, r4
    return sysTime;
 800e5d0:	6021      	str	r1, [r4, #0]
 800e5d2:	80a3      	strh	r3, [r4, #4]
}
 800e5d4:	b005      	add	sp, #20
 800e5d6:	bd30      	pop	{r4, r5, pc}
 800e5d8:	fffffc18 	.word	0xfffffc18

0800e5dc <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 800e5dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e5de:	2300      	movs	r3, #0
 800e5e0:	466d      	mov	r5, sp
{
 800e5e2:	0004      	movs	r4, r0

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e5e4:	a801      	add	r0, sp, #4
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e5e6:	9300      	str	r3, [sp, #0]
 800e5e8:	80ab      	strh	r3, [r5, #4]
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e5ea:	f000 fca7 	bl	800ef3c <HW_RTC_GetCalendarTime>
    
    return calendarTime;
 800e5ee:	0023      	movs	r3, r4
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e5f0:	9000      	str	r0, [sp, #0]
    return calendarTime;
 800e5f2:	cd06      	ldmia	r5!, {r1, r2}
 800e5f4:	c306      	stmia	r3!, {r1, r2}
}
 800e5f6:	0020      	movs	r0, r4
 800e5f8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800e5fa <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 800e5fa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    SysTime_t DeltaTime;
    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );
 800e5fc:	ac02      	add	r4, sp, #8
{
 800e5fe:	9000      	str	r0, [sp, #0]
 800e600:	9101      	str	r1, [sp, #4]
    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );
 800e602:	0020      	movs	r0, r4
 800e604:	a903      	add	r1, sp, #12
 800e606:	f000 fcbd 	bl	800ef84 <HW_RTC_BKUPRead>
    c.Seconds = a.Seconds - b.Seconds;
 800e60a:	9a02      	ldr	r2, [sp, #8]
 800e60c:	9b00      	ldr	r3, [sp, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800e60e:	88a1      	ldrh	r1, [r4, #4]
    c.Seconds = a.Seconds - b.Seconds;
 800e610:	1a9b      	subs	r3, r3, r2
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800e612:	466a      	mov	r2, sp
 800e614:	8892      	ldrh	r2, [r2, #4]
 800e616:	1a52      	subs	r2, r2, r1
 800e618:	b291      	uxth	r1, r2
 800e61a:	b214      	sxth	r4, r2
    if( c.SubSeconds < 0 )
 800e61c:	0412      	lsls	r2, r2, #16
 800e61e:	d504      	bpl.n	800e62a <SysTimeToMs+0x30>
        c.SubSeconds += 1000;
 800e620:	22fa      	movs	r2, #250	; 0xfa
 800e622:	0092      	lsls	r2, r2, #2
 800e624:	1889      	adds	r1, r1, r2
        c.Seconds--;
 800e626:	3b01      	subs	r3, #1
        c.SubSeconds += 1000;
 800e628:	b20c      	sxth	r4, r1
    SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
    return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 800e62a:	20fa      	movs	r0, #250	; 0xfa
 800e62c:	0080      	lsls	r0, r0, #2
 800e62e:	4358      	muls	r0, r3
 800e630:	1900      	adds	r0, r0, r4
}
 800e632:	b004      	add	sp, #16
 800e634:	bd10      	pop	{r4, pc}
	...

0800e638 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 800e638:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e63a:	000e      	movs	r6, r1
    uint32_t seconds = timeMs / 1000;
 800e63c:	21fa      	movs	r1, #250	; 0xfa
{
 800e63e:	0004      	movs	r4, r0
    uint32_t seconds = timeMs / 1000;
 800e640:	0089      	lsls	r1, r1, #2
 800e642:	0030      	movs	r0, r6
 800e644:	f7f1 fd7e 	bl	8000144 <__udivsi3>
 800e648:	0005      	movs	r5, r0
    SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
    SysTime_t DeltaTime = { 0 };
 800e64a:	2208      	movs	r2, #8
 800e64c:	2100      	movs	r1, #0
 800e64e:	4668      	mov	r0, sp
 800e650:	f001 fabd 	bl	800fbce <memset>
    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );
 800e654:	4668      	mov	r0, sp
 800e656:	a901      	add	r1, sp, #4
 800e658:	f000 fc94 	bl	800ef84 <HW_RTC_BKUPRead>
    c.Seconds = a.Seconds + b.Seconds;
 800e65c:	9b00      	ldr	r3, [sp, #0]
 800e65e:	18ea      	adds	r2, r5, r3
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800e660:	466b      	mov	r3, sp
 800e662:	8899      	ldrh	r1, [r3, #4]
 800e664:	1989      	adds	r1, r1, r6
    SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 800e666:	26fa      	movs	r6, #250	; 0xfa
 800e668:	00b6      	lsls	r6, r6, #2
 800e66a:	4375      	muls	r5, r6
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800e66c:	1b49      	subs	r1, r1, r5
 800e66e:	b288      	uxth	r0, r1
 800e670:	b209      	sxth	r1, r1
    if( c.SubSeconds >= 1000 )
 800e672:	42b1      	cmp	r1, r6
 800e674:	db03      	blt.n	800e67e <SysTimeFromMs+0x46>
        c.SubSeconds -= 1000;
 800e676:	4b04      	ldr	r3, [pc, #16]	; (800e688 <SysTimeFromMs+0x50>)
        c.Seconds++;
 800e678:	3201      	adds	r2, #1
        c.SubSeconds -= 1000;
 800e67a:	18c0      	adds	r0, r0, r3
 800e67c:	b201      	sxth	r1, r0

    return SysTimeAdd( sysTime, DeltaTime );
}
 800e67e:	0020      	movs	r0, r4
    return c;
 800e680:	6022      	str	r2, [r4, #0]
 800e682:	80a1      	strh	r1, [r4, #4]
}
 800e684:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800e686:	46c0      	nop			; (mov r8, r8)
 800e688:	fffffc18 	.word	0xfffffc18

0800e68c <TimerSetTimeout>:
    cur = cur->Next;
  }
  return false;
}
static void TimerSetTimeout( TimerEvent_t *obj )
{
 800e68c:	b570      	push	{r4, r5, r6, lr}
 800e68e:	0004      	movs	r4, r0
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 800e690:	f000 faea 	bl	800ec68 <HW_RTC_GetMinimumTimeout>
  obj->IsNext2Expire = true; 
 800e694:	2301      	movs	r3, #1
 800e696:	7263      	strb	r3, [r4, #9]
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 800e698:	0005      	movs	r5, r0

  // In case deadline too soon
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 800e69a:	6826      	ldr	r6, [r4, #0]
 800e69c:	f000 fafa 	bl	800ec94 <HW_RTC_GetTimerElapsedTime>
 800e6a0:	1828      	adds	r0, r5, r0
 800e6a2:	4286      	cmp	r6, r0
 800e6a4:	d203      	bcs.n	800e6ae <TimerSetTimeout+0x22>
  {
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 800e6a6:	f000 faf5 	bl	800ec94 <HW_RTC_GetTimerElapsedTime>
 800e6aa:	182d      	adds	r5, r5, r0
 800e6ac:	6025      	str	r5, [r4, #0]
  }
  HW_RTC_SetAlarm( obj->Timestamp );
 800e6ae:	6820      	ldr	r0, [r4, #0]
 800e6b0:	f000 fb1c 	bl	800ecec <HW_RTC_SetAlarm>
}
 800e6b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e6b8 <TimerInsertNewHeadTimer>:
  obj->Next = NULL;
}

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
  TimerEvent_t* cur = TimerListHead;
 800e6b8:	4a05      	ldr	r2, [pc, #20]	; (800e6d0 <TimerInsertNewHeadTimer+0x18>)
{
 800e6ba:	b510      	push	{r4, lr}
  TimerEvent_t* cur = TimerListHead;
 800e6bc:	6813      	ldr	r3, [r2, #0]

  if( cur != NULL )
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d001      	beq.n	800e6c6 <TimerInsertNewHeadTimer+0xe>
  {
    cur->IsNext2Expire = false;
 800e6c2:	2100      	movs	r1, #0
 800e6c4:	7259      	strb	r1, [r3, #9]
  }

  obj->Next = cur;
 800e6c6:	6143      	str	r3, [r0, #20]
  TimerListHead = obj;
 800e6c8:	6010      	str	r0, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800e6ca:	f7ff ffdf 	bl	800e68c <TimerSetTimeout>
}
 800e6ce:	bd10      	pop	{r4, pc}
 800e6d0:	20001184 	.word	0x20001184

0800e6d4 <TimerInit>:
  obj->Timestamp = 0;
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	6003      	str	r3, [r0, #0]
  obj->ReloadValue = 0;
 800e6d8:	6043      	str	r3, [r0, #4]
  obj->IsStarted = false;
 800e6da:	8103      	strh	r3, [r0, #8]
  obj->Callback = callback;
 800e6dc:	60c1      	str	r1, [r0, #12]
  obj->Context = NULL;
 800e6de:	6103      	str	r3, [r0, #16]
  obj->Next = NULL;
 800e6e0:	6143      	str	r3, [r0, #20]
}
 800e6e2:	4770      	bx	lr

0800e6e4 <TimerStart>:
{
 800e6e4:	b570      	push	{r4, r5, r6, lr}
 800e6e6:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6e8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e6ec:	b672      	cpsid	i
  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 800e6ee:	2800      	cmp	r0, #0
 800e6f0:	d00f      	beq.n	800e712 <TimerStart+0x2e>
  TimerEvent_t* cur = TimerListHead;
 800e6f2:	4e18      	ldr	r6, [pc, #96]	; (800e754 <TimerStart+0x70>)
 800e6f4:	6832      	ldr	r2, [r6, #0]
 800e6f6:	0013      	movs	r3, r2
  while( cur != NULL )
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d10d      	bne.n	800e718 <TimerStart+0x34>
  obj->Timestamp = obj->ReloadValue;
 800e6fc:	6863      	ldr	r3, [r4, #4]
 800e6fe:	6023      	str	r3, [r4, #0]
  obj->IsStarted = true;
 800e700:	2301      	movs	r3, #1
 800e702:	8123      	strh	r3, [r4, #8]
  if( TimerListHead == NULL )
 800e704:	2a00      	cmp	r2, #0
 800e706:	d10b      	bne.n	800e720 <TimerStart+0x3c>
    HW_RTC_SetTimerContext( );
 800e708:	f000 fbca 	bl	800eea0 <HW_RTC_SetTimerContext>
      TimerInsertNewHeadTimer( obj);
 800e70c:	0020      	movs	r0, r4
 800e70e:	f7ff ffd3 	bl	800e6b8 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e712:	f385 8810 	msr	PRIMASK, r5
}
 800e716:	bd70      	pop	{r4, r5, r6, pc}
    if( cur == obj )
 800e718:	429c      	cmp	r4, r3
 800e71a:	d0fa      	beq.n	800e712 <TimerStart+0x2e>
    cur = cur->Next;
 800e71c:	695b      	ldr	r3, [r3, #20]
 800e71e:	e7eb      	b.n	800e6f8 <TimerStart+0x14>
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 800e720:	f000 fab8 	bl	800ec94 <HW_RTC_GetTimerElapsedTime>
    obj->Timestamp += elapsedTime;
 800e724:	6823      	ldr	r3, [r4, #0]
 800e726:	18c0      	adds	r0, r0, r3
    if( obj->Timestamp < TimerListHead->Timestamp )
 800e728:	6833      	ldr	r3, [r6, #0]
    obj->Timestamp += elapsedTime;
 800e72a:	6020      	str	r0, [r4, #0]
    if( obj->Timestamp < TimerListHead->Timestamp )
 800e72c:	681a      	ldr	r2, [r3, #0]
 800e72e:	4290      	cmp	r0, r2
 800e730:	d3ec      	bcc.n	800e70c <TimerStart+0x28>
  TimerEvent_t* next = TimerListHead->Next;
 800e732:	695a      	ldr	r2, [r3, #20]
  while (cur->Next != NULL )
 800e734:	6959      	ldr	r1, [r3, #20]
 800e736:	2900      	cmp	r1, #0
 800e738:	d102      	bne.n	800e740 <TimerStart+0x5c>
  cur->Next = obj;
 800e73a:	615c      	str	r4, [r3, #20]
  obj->Next = NULL;
 800e73c:	6161      	str	r1, [r4, #20]
 800e73e:	e7e8      	b.n	800e712 <TimerStart+0x2e>
    if( obj->Timestamp  > next->Timestamp )
 800e740:	6811      	ldr	r1, [r2, #0]
 800e742:	4288      	cmp	r0, r1
 800e744:	d902      	bls.n	800e74c <TimerStart+0x68>
        next = next->Next;
 800e746:	0013      	movs	r3, r2
 800e748:	6952      	ldr	r2, [r2, #20]
 800e74a:	e7f3      	b.n	800e734 <TimerStart+0x50>
        cur->Next = obj;
 800e74c:	615c      	str	r4, [r3, #20]
        obj->Next = next;
 800e74e:	6162      	str	r2, [r4, #20]
        return;
 800e750:	e7df      	b.n	800e712 <TimerStart+0x2e>
 800e752:	46c0      	nop			; (mov r8, r8)
 800e754:	20001184 	.word	0x20001184

0800e758 <TimerIrqHandler>:
{
 800e758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t old =  HW_RTC_GetTimerContext( );
 800e75a:	f000 fbe9 	bl	800ef30 <HW_RTC_GetTimerContext>
 800e75e:	0005      	movs	r5, r0
  uint32_t now =  HW_RTC_SetTimerContext( );
 800e760:	f000 fb9e 	bl	800eea0 <HW_RTC_SetTimerContext>
  if ( TimerListHead != NULL )
 800e764:	4c1a      	ldr	r4, [pc, #104]	; (800e7d0 <TimerIrqHandler+0x78>)
 800e766:	6823      	ldr	r3, [r4, #0]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d015      	beq.n	800e798 <TimerIrqHandler+0x40>
  uint32_t DeltaContext = now - old; //intentionnal wrap around
 800e76c:	001a      	movs	r2, r3
 800e76e:	1b47      	subs	r7, r0, r5
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 800e770:	6952      	ldr	r2, [r2, #20]
 800e772:	2a00      	cmp	r2, #0
 800e774:	d106      	bne.n	800e784 <TimerIrqHandler+0x2c>
    TimerListHead = TimerListHead->Next;
 800e776:	6959      	ldr	r1, [r3, #20]
    cur->IsStarted = false;
 800e778:	721a      	strb	r2, [r3, #8]
    exec_cb( cur->Callback, cur->Context );
 800e77a:	68da      	ldr	r2, [r3, #12]
    TimerListHead = TimerListHead->Next;
 800e77c:	6021      	str	r1, [r4, #0]
    exec_cb( cur->Callback, cur->Context );
 800e77e:	2a00      	cmp	r2, #0
 800e780:	d108      	bne.n	800e794 <TimerIrqHandler+0x3c>
 800e782:	e7fe      	b.n	800e782 <TimerIrqHandler+0x2a>
      if (next->Timestamp > DeltaContext)
 800e784:	6811      	ldr	r1, [r2, #0]
        next->Timestamp = 0 ;
 800e786:	2600      	movs	r6, #0
      if (next->Timestamp > DeltaContext)
 800e788:	42b9      	cmp	r1, r7
 800e78a:	d901      	bls.n	800e790 <TimerIrqHandler+0x38>
        next->Timestamp -= DeltaContext;
 800e78c:	1949      	adds	r1, r1, r5
 800e78e:	1a0e      	subs	r6, r1, r0
 800e790:	6016      	str	r6, [r2, #0]
 800e792:	e7ed      	b.n	800e770 <TimerIrqHandler+0x18>
   exec_cb( cur->Callback, cur->Context );
 800e794:	6918      	ldr	r0, [r3, #16]
 800e796:	4790      	blx	r2
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 800e798:	6823      	ldr	r3, [r4, #0]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d103      	bne.n	800e7a6 <TimerIrqHandler+0x4e>
  if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 800e79e:	6820      	ldr	r0, [r4, #0]
 800e7a0:	2800      	cmp	r0, #0
 800e7a2:	d10e      	bne.n	800e7c2 <TimerIrqHandler+0x6a>
}
 800e7a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 800e7a6:	681d      	ldr	r5, [r3, #0]
 800e7a8:	f000 fa74 	bl	800ec94 <HW_RTC_GetTimerElapsedTime>
 800e7ac:	4285      	cmp	r5, r0
 800e7ae:	d2f6      	bcs.n	800e79e <TimerIrqHandler+0x46>
   cur = TimerListHead;
 800e7b0:	6823      	ldr	r3, [r4, #0]
   TimerListHead = TimerListHead->Next;
 800e7b2:	695a      	ldr	r2, [r3, #20]
 800e7b4:	6022      	str	r2, [r4, #0]
   cur->IsStarted = false;
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	721a      	strb	r2, [r3, #8]
   exec_cb( cur->Callback, cur->Context );
 800e7ba:	68da      	ldr	r2, [r3, #12]
 800e7bc:	2a00      	cmp	r2, #0
 800e7be:	d1e9      	bne.n	800e794 <TimerIrqHandler+0x3c>
 800e7c0:	e7fe      	b.n	800e7c0 <TimerIrqHandler+0x68>
  if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 800e7c2:	7a43      	ldrb	r3, [r0, #9]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d1ed      	bne.n	800e7a4 <TimerIrqHandler+0x4c>
    TimerSetTimeout( TimerListHead );
 800e7c8:	f7ff ff60 	bl	800e68c <TimerSetTimeout>
}
 800e7cc:	e7ea      	b.n	800e7a4 <TimerIrqHandler+0x4c>
 800e7ce:	46c0      	nop			; (mov r8, r8)
 800e7d0:	20001184 	.word	0x20001184

0800e7d4 <TimerStop>:
{
 800e7d4:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e7d6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e7da:	b672      	cpsid	i
  TimerEvent_t* prev = TimerListHead;
 800e7dc:	4c12      	ldr	r4, [pc, #72]	; (800e828 <TimerStop+0x54>)
 800e7de:	6823      	ldr	r3, [r4, #0]
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d001      	beq.n	800e7e8 <TimerStop+0x14>
 800e7e4:	2800      	cmp	r0, #0
 800e7e6:	d102      	bne.n	800e7ee <TimerStop+0x1a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e7e8:	f385 8810 	msr	PRIMASK, r5
}  
 800e7ec:	bd70      	pop	{r4, r5, r6, pc}
  obj->IsStarted = false;
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	7202      	strb	r2, [r0, #8]
  if( TimerListHead == obj ) // Stop the Head                  
 800e7f2:	4283      	cmp	r3, r0
 800e7f4:	d10f      	bne.n	800e816 <TimerStop+0x42>
    if( TimerListHead->IsNext2Expire == true ) // The head is already running 
 800e7f6:	7a59      	ldrb	r1, [r3, #9]
 800e7f8:	695e      	ldr	r6, [r3, #20]
 800e7fa:	4291      	cmp	r1, r2
 800e7fc:	d009      	beq.n	800e812 <TimerStop+0x3e>
      TimerListHead->IsNext2Expire = false;
 800e7fe:	725a      	strb	r2, [r3, #9]
      if( TimerListHead->Next != NULL )
 800e800:	4296      	cmp	r6, r2
 800e802:	d004      	beq.n	800e80e <TimerStop+0x3a>
        TimerSetTimeout( TimerListHead );
 800e804:	0030      	movs	r0, r6
        TimerListHead = TimerListHead->Next;
 800e806:	6026      	str	r6, [r4, #0]
        TimerSetTimeout( TimerListHead );
 800e808:	f7ff ff40 	bl	800e68c <TimerSetTimeout>
 800e80c:	e7ec      	b.n	800e7e8 <TimerStop+0x14>
        HW_RTC_StopAlarm( );
 800e80e:	f000 fa55 	bl	800ecbc <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 800e812:	6026      	str	r6, [r4, #0]
 800e814:	e7e8      	b.n	800e7e8 <TimerStop+0x14>
        cur = cur->Next;
 800e816:	001a      	movs	r2, r3
 800e818:	695b      	ldr	r3, [r3, #20]
    while( cur != NULL )
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d0e4      	beq.n	800e7e8 <TimerStop+0x14>
      if( cur == obj )
 800e81e:	4298      	cmp	r0, r3
 800e820:	d1f9      	bne.n	800e816 <TimerStop+0x42>
        if( cur->Next != NULL )
 800e822:	6943      	ldr	r3, [r0, #20]
 800e824:	6153      	str	r3, [r2, #20]
 800e826:	e7df      	b.n	800e7e8 <TimerStop+0x14>
 800e828:	20001184 	.word	0x20001184

0800e82c <TimerSetValue>:
{
 800e82c:	b570      	push	{r4, r5, r6, lr}
 800e82e:	0005      	movs	r5, r0
 800e830:	0008      	movs	r0, r1
  uint32_t ticks = HW_RTC_ms2Tick( value );
 800e832:	f000 fa1b 	bl	800ec6c <HW_RTC_ms2Tick>
 800e836:	0004      	movs	r4, r0
  TimerStop( obj );
 800e838:	0028      	movs	r0, r5
 800e83a:	f7ff ffcb 	bl	800e7d4 <TimerStop>
  minValue = HW_RTC_GetMinimumTimeout( );
 800e83e:	f000 fa13 	bl	800ec68 <HW_RTC_GetMinimumTimeout>
  if( ticks < minValue )
 800e842:	4284      	cmp	r4, r0
 800e844:	d200      	bcs.n	800e848 <TimerSetValue+0x1c>
 800e846:	0004      	movs	r4, r0
  obj->Timestamp = ticks;
 800e848:	602c      	str	r4, [r5, #0]
  obj->ReloadValue = ticks;
 800e84a:	606c      	str	r4, [r5, #4]
}
 800e84c:	bd70      	pop	{r4, r5, r6, pc}

0800e84e <TimerGetCurrentTime>:
{
 800e84e:	b510      	push	{r4, lr}
  uint32_t now = HW_RTC_GetTimerValue( );
 800e850:	f000 fa2c 	bl	800ecac <HW_RTC_GetTimerValue>
  return  HW_RTC_Tick2ms(now);
 800e854:	f000 fa12 	bl	800ec7c <HW_RTC_Tick2ms>
}
 800e858:	bd10      	pop	{r4, pc}

0800e85a <TimerGetElapsedTime>:
{
 800e85a:	b570      	push	{r4, r5, r6, lr}
 800e85c:	1e04      	subs	r4, r0, #0
  if ( past == 0 )
 800e85e:	d009      	beq.n	800e874 <TimerGetElapsedTime+0x1a>
  uint32_t nowInTicks = HW_RTC_GetTimerValue( );
 800e860:	f000 fa24 	bl	800ecac <HW_RTC_GetTimerValue>
 800e864:	0005      	movs	r5, r0
  uint32_t pastInTicks = HW_RTC_ms2Tick( past );
 800e866:	0020      	movs	r0, r4
 800e868:	f000 fa00 	bl	800ec6c <HW_RTC_ms2Tick>
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 800e86c:	1a28      	subs	r0, r5, r0
 800e86e:	f000 fa05 	bl	800ec7c <HW_RTC_Tick2ms>
 800e872:	0004      	movs	r4, r0
}
 800e874:	0020      	movs	r0, r4
 800e876:	bd70      	pop	{r4, r5, r6, pc}

0800e878 <TimerTempCompensation>:
{
 800e878:	b510      	push	{r4, lr}
    return RtcTempCompensation( period, temperature );
 800e87a:	f000 fb95 	bl	800efa8 <RtcTempCompensation>
}
 800e87e:	bd10      	pop	{r4, pc}

0800e880 <Trace_TxCpltCallback>:
}

/* Private Functions Definition ------------------------------------------------------*/

static void Trace_TxCpltCallback(void)
{
 800e880:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e882:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e886:	b672      	cpsid	i

  BACKUP_PRIMASK();

  DISABLE_IRQ(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  circular_queue_remove(&MsgTraceQueue);
 800e888:	4c10      	ldr	r4, [pc, #64]	; (800e8cc <Trace_TxCpltCallback+0x4c>)
 800e88a:	0020      	movs	r0, r4
 800e88c:	f7ff fdff 	bl	800e48e <circular_queue_remove>
  //DBG_GPIO_SET(GPIOB, GPIO_PIN_13);
  //DBG_GPIO_RST(GPIOB, GPIO_PIN_13);
  /* Sense if new data to be sent */
  status=circular_queue_sense(&MsgTraceQueue);
 800e890:	0020      	movs	r0, r4
 800e892:	f7ff fe27 	bl	800e4e4 <circular_queue_sense>

  if ( status == 0) 
 800e896:	2800      	cmp	r0, #0
 800e898:	d10d      	bne.n	800e8b6 <Trace_TxCpltCallback+0x36>
  {
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 800e89a:	466b      	mov	r3, sp
 800e89c:	1c9e      	adds	r6, r3, #2
 800e89e:	0032      	movs	r2, r6
 800e8a0:	0020      	movs	r0, r4
 800e8a2:	a901      	add	r1, sp, #4
 800e8a4:	f7ff fdd6 	bl	800e454 <circular_queue_get>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e8a8:	f385 8810 	msr	PRIMASK, r5
    RESTORE_PRIMASK();
    //DBG_GPIO_SET(GPIOB, GPIO_PIN_14);
    //DBG_GPIO_RST(GPIOB, GPIO_PIN_14);
    OutputTrace(buffer, bufSize);
 800e8ac:	8831      	ldrh	r1, [r6, #0]
 800e8ae:	9801      	ldr	r0, [sp, #4]
 800e8b0:	f001 f896 	bl	800f9e0 <vcom_Trace>

    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
    TracePeripheralReady = SET;
    RESTORE_PRIMASK();
  }
}
 800e8b4:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
 800e8b6:	2100      	movs	r1, #0
 800e8b8:	2020      	movs	r0, #32
 800e8ba:	f7ff fceb 	bl	800e294 <LPM_SetStopMode>
    TracePeripheralReady = SET;
 800e8be:	2201      	movs	r2, #1
 800e8c0:	4b03      	ldr	r3, [pc, #12]	; (800e8d0 <Trace_TxCpltCallback+0x50>)
 800e8c2:	701a      	strb	r2, [r3, #0]
 800e8c4:	f385 8810 	msr	PRIMASK, r5
}
 800e8c8:	e7f4      	b.n	800e8b4 <Trace_TxCpltCallback+0x34>
 800e8ca:	46c0      	nop			; (mov r8, r8)
 800e8cc:	20001188 	.word	0x20001188
 800e8d0:	20000154 	.word	0x20000154

0800e8d4 <TraceInit>:
{
 800e8d4:	b510      	push	{r4, lr}
  OutputInit(Trace_TxCpltCallback);
 800e8d6:	4805      	ldr	r0, [pc, #20]	; (800e8ec <TraceInit+0x18>)
 800e8d8:	f001 f864 	bl	800f9a4 <vcom_Init>
  circular_queue_init(&MsgTraceQueue, MsgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE);
 800e8dc:	2280      	movs	r2, #128	; 0x80
 800e8de:	4904      	ldr	r1, [pc, #16]	; (800e8f0 <TraceInit+0x1c>)
 800e8e0:	4804      	ldr	r0, [pc, #16]	; (800e8f4 <TraceInit+0x20>)
 800e8e2:	0052      	lsls	r2, r2, #1
 800e8e4:	f7ff fd35 	bl	800e352 <circular_queue_init>
}
 800e8e8:	bd10      	pop	{r4, pc}
 800e8ea:	46c0      	nop			; (mov r8, r8)
 800e8ec:	0800e881 	.word	0x0800e881
 800e8f0:	20001198 	.word	0x20001198
 800e8f4:	20001188 	.word	0x20001188

0800e8f8 <TraceSend>:
{
 800e8f8:	b40f      	push	{r0, r1, r2, r3}
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 800e8fa:	2180      	movs	r1, #128	; 0x80
{
 800e8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8fe:	b0c7      	sub	sp, #284	; 0x11c
 800e900:	ab4c      	add	r3, sp, #304	; 0x130
 800e902:	cb04      	ldmia	r3!, {r2}
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 800e904:	0049      	lsls	r1, r1, #1
 800e906:	a806      	add	r0, sp, #24
  va_start( vaArgs, strFormat);
 800e908:	9304      	str	r3, [sp, #16]
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 800e90a:	f001 f993 	bl	800fc34 <vsniprintf>
 800e90e:	ab02      	add	r3, sp, #8
 800e910:	1d9c      	adds	r4, r3, #6
 800e912:	8020      	strh	r0, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e914:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e918:	b672      	cpsid	i
  status =circular_queue_add(&MsgTraceQueue,(uint8_t*)buf, bufSize);
 800e91a:	4e14      	ldr	r6, [pc, #80]	; (800e96c <TraceSend+0x74>)
 800e91c:	8822      	ldrh	r2, [r4, #0]
 800e91e:	0030      	movs	r0, r6
 800e920:	a906      	add	r1, sp, #24
 800e922:	f7ff fd1d 	bl	800e360 <circular_queue_add>
 800e926:	1e07      	subs	r7, r0, #0
  if ((status==0 ) && (TracePeripheralReady==SET))
 800e928:	d11c      	bne.n	800e964 <TraceSend+0x6c>
 800e92a:	4b11      	ldr	r3, [pc, #68]	; (800e970 <TraceSend+0x78>)
 800e92c:	781b      	ldrb	r3, [r3, #0]
 800e92e:	b2da      	uxtb	r2, r3
 800e930:	9201      	str	r2, [sp, #4]
 800e932:	2b01      	cmp	r3, #1
 800e934:	d116      	bne.n	800e964 <TraceSend+0x6c>
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 800e936:	0022      	movs	r2, r4
 800e938:	a905      	add	r1, sp, #20
 800e93a:	0030      	movs	r0, r6
 800e93c:	f7ff fd8a 	bl	800e454 <circular_queue_get>
    TracePeripheralReady = RESET;
 800e940:	4b0b      	ldr	r3, [pc, #44]	; (800e970 <TraceSend+0x78>)
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 800e942:	2020      	movs	r0, #32
 800e944:	9901      	ldr	r1, [sp, #4]
    TracePeripheralReady = RESET;
 800e946:	701f      	strb	r7, [r3, #0]
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 800e948:	f7ff fca4 	bl	800e294 <LPM_SetStopMode>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e94c:	f385 8810 	msr	PRIMASK, r5
    OutputTrace(buffer, bufSize);
 800e950:	8821      	ldrh	r1, [r4, #0]
 800e952:	9805      	ldr	r0, [sp, #20]
 800e954:	f001 f844 	bl	800f9e0 <vcom_Trace>
}
 800e958:	0038      	movs	r0, r7
 800e95a:	b047      	add	sp, #284	; 0x11c
 800e95c:	bcf0      	pop	{r4, r5, r6, r7}
 800e95e:	bc08      	pop	{r3}
 800e960:	b004      	add	sp, #16
 800e962:	4718      	bx	r3
 800e964:	f385 8810 	msr	PRIMASK, r5
  return status;
 800e968:	e7f6      	b.n	800e958 <TraceSend+0x60>
 800e96a:	46c0      	nop			; (mov r8, r8)
 800e96c:	20001188 	.word	0x20001188
 800e970:	20000154 	.word	0x20000154

0800e974 <rand1>:

static uint32_t next = 1;

int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800e974:	4b06      	ldr	r3, [pc, #24]	; (800e990 <rand1+0x1c>)
 800e976:	4807      	ldr	r0, [pc, #28]	; (800e994 <rand1+0x20>)
 800e978:	681a      	ldr	r2, [r3, #0]
{
 800e97a:	b510      	push	{r4, lr}
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800e97c:	4350      	muls	r0, r2
 800e97e:	4a06      	ldr	r2, [pc, #24]	; (800e998 <rand1+0x24>)
 800e980:	4906      	ldr	r1, [pc, #24]	; (800e99c <rand1+0x28>)
 800e982:	1880      	adds	r0, r0, r2
 800e984:	6018      	str	r0, [r3, #0]
 800e986:	f7f1 fc63 	bl	8000250 <__aeabi_uidivmod>
 800e98a:	0008      	movs	r0, r1
}
 800e98c:	bd10      	pop	{r4, pc}
 800e98e:	46c0      	nop			; (mov r8, r8)
 800e990:	20000158 	.word	0x20000158
 800e994:	41c64e6d 	.word	0x41c64e6d
 800e998:	00003039 	.word	0x00003039
 800e99c:	7fffffff 	.word	0x7fffffff

0800e9a0 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 800e9a0:	4b01      	ldr	r3, [pc, #4]	; (800e9a8 <srand1+0x8>)
 800e9a2:	6018      	str	r0, [r3, #0]
}
 800e9a4:	4770      	bx	lr
 800e9a6:	46c0      	nop			; (mov r8, r8)
 800e9a8:	20000158 	.word	0x20000158

0800e9ac <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800e9ac:	b570      	push	{r4, r5, r6, lr}
 800e9ae:	0005      	movs	r5, r0
 800e9b0:	000c      	movs	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800e9b2:	f7ff ffdf 	bl	800e974 <rand1>
 800e9b6:	1b61      	subs	r1, r4, r5
 800e9b8:	3101      	adds	r1, #1
 800e9ba:	f7f1 fd33 	bl	8000424 <__aeabi_idivmod>
 800e9be:	1948      	adds	r0, r1, r5
}
 800e9c0:	bd70      	pop	{r4, r5, r6, pc}

0800e9c2 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800e9c2:	2300      	movs	r3, #0
{
 800e9c4:	b510      	push	{r4, lr}
    while( size-- )
 800e9c6:	4293      	cmp	r3, r2
 800e9c8:	d100      	bne.n	800e9cc <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 800e9ca:	bd10      	pop	{r4, pc}
        *dst++ = *src++;
 800e9cc:	5ccc      	ldrb	r4, [r1, r3]
 800e9ce:	54c4      	strb	r4, [r0, r3]
 800e9d0:	3301      	adds	r3, #1
 800e9d2:	e7f8      	b.n	800e9c6 <memcpy1+0x4>

0800e9d4 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800e9d4:	1e53      	subs	r3, r2, #1
 800e9d6:	18c0      	adds	r0, r0, r3
    while( size-- )
 800e9d8:	2300      	movs	r3, #0
{
 800e9da:	b530      	push	{r4, r5, lr}
    while( size-- )
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	d100      	bne.n	800e9e2 <memcpyr+0xe>
    {
        *dst-- = *src++;
    }
}
 800e9e0:	bd30      	pop	{r4, r5, pc}
        *dst-- = *src++;
 800e9e2:	5ccd      	ldrb	r5, [r1, r3]
 800e9e4:	425c      	negs	r4, r3
 800e9e6:	5505      	strb	r5, [r0, r4]
 800e9e8:	3301      	adds	r3, #1
 800e9ea:	e7f7      	b.n	800e9dc <memcpyr+0x8>

0800e9ec <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 800e9ec:	4b04      	ldr	r3, [pc, #16]	; (800ea00 <memset1+0x14>)
 800e9ee:	3a01      	subs	r2, #1
 800e9f0:	b292      	uxth	r2, r2
 800e9f2:	429a      	cmp	r2, r3
 800e9f4:	d100      	bne.n	800e9f8 <memset1+0xc>
    {
        *dst++ = value;
    }
}
 800e9f6:	4770      	bx	lr
        *dst++ = value;
 800e9f8:	7001      	strb	r1, [r0, #0]
 800e9fa:	3001      	adds	r0, #1
 800e9fc:	e7f7      	b.n	800e9ee <memset1+0x2>
 800e9fe:	46c0      	nop			; (mov r8, r8)
 800ea00:	0000ffff 	.word	0x0000ffff

0800ea04 <BSP_sensor_Init>:
  BSP_HUMIDITY_Sensor_Enable(HUMIDITY_handle);
  BSP_TEMPERATURE_Sensor_Enable(TEMPERATURE_handle);
  BSP_PRESSURE_Sensor_Enable(PRESSURE_handle);
#endif
  /* USER CODE END 6 */
}
 800ea04:	4770      	bx	lr
	...

0800ea08 <DBG_Init>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions ------------------------------------------------------- */

void DBG_Init(void)
{
 800ea08:	b530      	push	{r4, r5, lr}
 800ea0a:	b087      	sub	sp, #28
  HAL_DBGMCU_EnableDBGStopMode();
  HAL_DBGMCU_EnableDBGStandbyMode();

#else /* DEBUG */
  /* sw interface off*/
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 800ea0c:	2208      	movs	r2, #8
 800ea0e:	2100      	movs	r1, #0
 800ea10:	a804      	add	r0, sp, #16
 800ea12:	f001 f8dc 	bl	800fbce <memset>

  GPIO_InitStructure.Mode   = GPIO_MODE_ANALOG;
 800ea16:	2303      	movs	r3, #3
 800ea18:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pull   = GPIO_NOPULL;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 800ea1e:	23c0      	movs	r3, #192	; 0xc0
  __GPIOA_CLK_ENABLE() ;
 800ea20:	2501      	movs	r5, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800ea22:	20a0      	movs	r0, #160	; 0xa0
  __GPIOA_CLK_ENABLE() ;
 800ea24:	4c10      	ldr	r4, [pc, #64]	; (800ea68 <DBG_Init+0x60>)
  GPIO_InitStructure.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 800ea26:	01db      	lsls	r3, r3, #7
 800ea28:	9301      	str	r3, [sp, #4]
  __GPIOA_CLK_ENABLE() ;
 800ea2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800ea2c:	a901      	add	r1, sp, #4
  __GPIOA_CLK_ENABLE() ;
 800ea2e:	432b      	orrs	r3, r5
 800ea30:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ea32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800ea34:	05c0      	lsls	r0, r0, #23
  __GPIOA_CLK_ENABLE() ;
 800ea36:	402b      	ands	r3, r5
 800ea38:	9300      	str	r3, [sp, #0]
 800ea3a:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800ea3c:	f7f6 fdcc 	bl	80055d8 <HAL_GPIO_Init>
  __GPIOA_CLK_DISABLE() ;
 800ea40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ea42:	43ab      	bics	r3, r5
 800ea44:	62e3      	str	r3, [r4, #44]	; 0x2c

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 800ea46:	2380      	movs	r3, #128	; 0x80
 800ea48:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ea4a:	03db      	lsls	r3, r3, #15
 800ea4c:	4313      	orrs	r3, r2
 800ea4e:	6363      	str	r3, [r4, #52]	; 0x34
  HAL_DBGMCU_DisableDBGSleepMode();
 800ea50:	f7f6 f972 	bl	8004d38 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 800ea54:	f7f6 f978 	bl	8004d48 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 800ea58:	f7f6 f97e 	bl	8004d58 <HAL_DBGMCU_DisableDBGStandbyMode>
  __HAL_RCC_DBGMCU_CLK_DISABLE();
 800ea5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ea5e:	4a03      	ldr	r2, [pc, #12]	; (800ea6c <DBG_Init+0x64>)
 800ea60:	4013      	ands	r3, r2
 800ea62:	6363      	str	r3, [r4, #52]	; 0x34
#endif
}
 800ea64:	b007      	add	sp, #28
 800ea66:	bd30      	pop	{r4, r5, pc}
 800ea68:	40021000 	.word	0x40021000
 800ea6c:	ffbfffff 	.word	0xffbfffff

0800ea70 <Error_Handler>:

void Error_Handler(void)
{
 800ea70:	b510      	push	{r4, lr}
  PRINTF("Error_Handler\n\r");
 800ea72:	4802      	ldr	r0, [pc, #8]	; (800ea7c <Error_Handler+0xc>)
 800ea74:	f7ff ff40 	bl	800e8f8 <TraceSend>
  while (1)
 800ea78:	e7fe      	b.n	800ea78 <Error_Handler+0x8>
 800ea7a:	46c0      	nop			; (mov r8, r8)
 800ea7c:	0801124e 	.word	0x0801124e

0800ea80 <HW_GPIO_GetBitPos>:
 */
static uint8_t HW_GPIO_GetBitPos(uint16_t GPIO_Pin)
{
  uint8_t PinPos = 0;

  if ((GPIO_Pin & 0xFF00) != 0)
 800ea80:	22ff      	movs	r2, #255	; 0xff
{
 800ea82:	0003      	movs	r3, r0
  if ((GPIO_Pin & 0xFF00) != 0)
 800ea84:	4390      	bics	r0, r2
  {
    PinPos |= 0x8;
 800ea86:	1e42      	subs	r2, r0, #1
 800ea88:	4190      	sbcs	r0, r2
  }
  if ((GPIO_Pin & 0xF0F0) != 0)
 800ea8a:	4a08      	ldr	r2, [pc, #32]	; (800eaac <HW_GPIO_GetBitPos+0x2c>)
    PinPos |= 0x8;
 800ea8c:	00c0      	lsls	r0, r0, #3
  if ((GPIO_Pin & 0xF0F0) != 0)
 800ea8e:	4213      	tst	r3, r2
 800ea90:	d001      	beq.n	800ea96 <HW_GPIO_GetBitPos+0x16>
  {
    PinPos |= 0x4;
 800ea92:	2204      	movs	r2, #4
 800ea94:	4310      	orrs	r0, r2
  }
  if ((GPIO_Pin & 0xCCCC) != 0)
 800ea96:	4a06      	ldr	r2, [pc, #24]	; (800eab0 <HW_GPIO_GetBitPos+0x30>)
 800ea98:	4213      	tst	r3, r2
 800ea9a:	d001      	beq.n	800eaa0 <HW_GPIO_GetBitPos+0x20>
  {
    PinPos |= 0x2;
 800ea9c:	2202      	movs	r2, #2
 800ea9e:	4310      	orrs	r0, r2
  }
  if ((GPIO_Pin & 0xAAAA) != 0)
 800eaa0:	4a04      	ldr	r2, [pc, #16]	; (800eab4 <HW_GPIO_GetBitPos+0x34>)
 800eaa2:	4213      	tst	r3, r2
 800eaa4:	d001      	beq.n	800eaaa <HW_GPIO_GetBitPos+0x2a>
  {
    PinPos |= 0x1;
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	4318      	orrs	r0, r3
  }

  return PinPos;
}
 800eaaa:	4770      	bx	lr
 800eaac:	fffff0f0 	.word	0xfffff0f0
 800eab0:	ffffcccc 	.word	0xffffcccc
 800eab4:	ffffaaaa 	.word	0xffffaaaa

0800eab8 <HW_GPIO_Init>:
{
 800eab8:	b530      	push	{r4, r5, lr}
 800eaba:	000c      	movs	r4, r1
 800eabc:	0011      	movs	r1, r2
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 800eabe:	4a20      	ldr	r2, [pc, #128]	; (800eb40 <HW_GPIO_Init+0x88>)
 800eac0:	4b20      	ldr	r3, [pc, #128]	; (800eb44 <HW_GPIO_Init+0x8c>)
{
 800eac2:	b087      	sub	sp, #28
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 800eac4:	4290      	cmp	r0, r2
 800eac6:	d032      	beq.n	800eb2e <HW_GPIO_Init+0x76>
 800eac8:	d80f      	bhi.n	800eaea <HW_GPIO_Init+0x32>
 800eaca:	22a0      	movs	r2, #160	; 0xa0
 800eacc:	05d2      	lsls	r2, r2, #23
 800eace:	4290      	cmp	r0, r2
 800ead0:	d017      	beq.n	800eb02 <HW_GPIO_Init+0x4a>
 800ead2:	4a1d      	ldr	r2, [pc, #116]	; (800eb48 <HW_GPIO_Init+0x90>)
 800ead4:	4290      	cmp	r0, r2
 800ead6:	d021      	beq.n	800eb1c <HW_GPIO_Init+0x64>
 800ead8:	2580      	movs	r5, #128	; 0x80
 800eada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eadc:	432a      	orrs	r2, r5
 800eade:	62da      	str	r2, [r3, #44]	; 0x2c
 800eae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eae2:	402b      	ands	r3, r5
 800eae4:	9305      	str	r3, [sp, #20]
 800eae6:	9b05      	ldr	r3, [sp, #20]
 800eae8:	e013      	b.n	800eb12 <HW_GPIO_Init+0x5a>
 800eaea:	4a18      	ldr	r2, [pc, #96]	; (800eb4c <HW_GPIO_Init+0x94>)
 800eaec:	4290      	cmp	r0, r2
 800eaee:	d1f3      	bne.n	800ead8 <HW_GPIO_Init+0x20>
 800eaf0:	2508      	movs	r5, #8
 800eaf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaf4:	432a      	orrs	r2, r5
 800eaf6:	62da      	str	r2, [r3, #44]	; 0x2c
 800eaf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eafa:	402b      	ands	r3, r5
 800eafc:	9304      	str	r3, [sp, #16]
 800eafe:	9b04      	ldr	r3, [sp, #16]
 800eb00:	e007      	b.n	800eb12 <HW_GPIO_Init+0x5a>
 800eb02:	2501      	movs	r5, #1
 800eb04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb06:	432a      	orrs	r2, r5
 800eb08:	62da      	str	r2, [r3, #44]	; 0x2c
 800eb0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb0c:	402b      	ands	r3, r5
 800eb0e:	9301      	str	r3, [sp, #4]
 800eb10:	9b01      	ldr	r3, [sp, #4]
  initStruct->Pin = GPIO_Pin ;
 800eb12:	600c      	str	r4, [r1, #0]
  HAL_GPIO_Init(port, initStruct);
 800eb14:	f7f6 fd60 	bl	80055d8 <HAL_GPIO_Init>
}
 800eb18:	b007      	add	sp, #28
 800eb1a:	bd30      	pop	{r4, r5, pc}
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 800eb1c:	2502      	movs	r5, #2
 800eb1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb20:	432a      	orrs	r2, r5
 800eb22:	62da      	str	r2, [r3, #44]	; 0x2c
 800eb24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb26:	402b      	ands	r3, r5
 800eb28:	9302      	str	r3, [sp, #8]
 800eb2a:	9b02      	ldr	r3, [sp, #8]
 800eb2c:	e7f1      	b.n	800eb12 <HW_GPIO_Init+0x5a>
 800eb2e:	2504      	movs	r5, #4
 800eb30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb32:	432a      	orrs	r2, r5
 800eb34:	62da      	str	r2, [r3, #44]	; 0x2c
 800eb36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb38:	402b      	ands	r3, r5
 800eb3a:	9303      	str	r3, [sp, #12]
 800eb3c:	9b03      	ldr	r3, [sp, #12]
 800eb3e:	e7e8      	b.n	800eb12 <HW_GPIO_Init+0x5a>
 800eb40:	50000800 	.word	0x50000800
 800eb44:	40021000 	.word	0x40021000
 800eb48:	50000400 	.word	0x50000400
 800eb4c:	50000c00 	.word	0x50000c00

0800eb50 <HW_GPIO_SetIrq>:
{
 800eb50:	b570      	push	{r4, r5, r6, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin) ;
 800eb52:	0008      	movs	r0, r1
{
 800eb54:	001c      	movs	r4, r3
 800eb56:	000d      	movs	r5, r1
 800eb58:	0016      	movs	r6, r2
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin) ;
 800eb5a:	f7ff ff91 	bl	800ea80 <HW_GPIO_GetBitPos>
  if (irqHandler != NULL)
 800eb5e:	4b08      	ldr	r3, [pc, #32]	; (800eb80 <HW_GPIO_SetIrq+0x30>)
 800eb60:	0080      	lsls	r0, r0, #2
    GpioIrq[ BitPos ] = irqHandler;
 800eb62:	501c      	str	r4, [r3, r0]
  if (irqHandler != NULL)
 800eb64:	2c00      	cmp	r4, #0
 800eb66:	d00a      	beq.n	800eb7e <HW_GPIO_SetIrq+0x2e>
    IRQnb = MSP_GetIRQn(GPIO_Pin);
 800eb68:	0028      	movs	r0, r5
 800eb6a:	f000 fc67 	bl	800f43c <MSP_GetIRQn>
 800eb6e:	0004      	movs	r4, r0
    HAL_NVIC_SetPriority(IRQnb, prio, 0);
 800eb70:	2200      	movs	r2, #0
 800eb72:	0031      	movs	r1, r6
 800eb74:	f7f6 fc06 	bl	8005384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IRQnb);
 800eb78:	0020      	movs	r0, r4
 800eb7a:	f7f6 fc2d 	bl	80053d8 <HAL_NVIC_EnableIRQ>
}
 800eb7e:	bd70      	pop	{r4, r5, r6, pc}
 800eb80:	20001298 	.word	0x20001298

0800eb84 <HW_GPIO_IrqHandler>:
{
 800eb84:	b510      	push	{r4, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin);
 800eb86:	f7ff ff7b 	bl	800ea80 <HW_GPIO_GetBitPos>
  if (GpioIrq[ BitPos ]  != NULL)
 800eb8a:	4b04      	ldr	r3, [pc, #16]	; (800eb9c <HW_GPIO_IrqHandler+0x18>)
 800eb8c:	0080      	lsls	r0, r0, #2
 800eb8e:	58c3      	ldr	r3, [r0, r3]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d001      	beq.n	800eb98 <HW_GPIO_IrqHandler+0x14>
    GpioIrq[ BitPos ](NULL);
 800eb94:	2000      	movs	r0, #0
 800eb96:	4798      	blx	r3
}
 800eb98:	bd10      	pop	{r4, pc}
 800eb9a:	46c0      	nop			; (mov r8, r8)
 800eb9c:	20001298 	.word	0x20001298

0800eba0 <HW_GPIO_Write>:
{
 800eba0:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, (GPIO_PinState) value);
 800eba2:	b2d2      	uxtb	r2, r2
 800eba4:	f7f6 fdd6 	bl	8005754 <HAL_GPIO_WritePin>
}
 800eba8:	bd10      	pop	{r4, pc}
	...

0800ebac <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static uint64_t HW_RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 800ebac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t first_read;
  uint32_t correction;
  uint32_t seconds;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 800ebae:	4e27      	ldr	r6, [pc, #156]	; (800ec4c <HW_RTC_GetCalendarValue+0xa0>)
{
 800ebb0:	0005      	movs	r5, r0
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	0030      	movs	r0, r6
{
 800ebb6:	000c      	movs	r4, r1
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 800ebb8:	f7f7 fd80 	bl	80066bc <HAL_RTC_GetTime>
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 800ebbc:	4f24      	ldr	r7, [pc, #144]	; (800ec50 <HW_RTC_GetCalendarValue+0xa4>)

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN);
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc2:	0029      	movs	r1, r5
 800ebc4:	0030      	movs	r0, r6
 800ebc6:	9301      	str	r3, [sp, #4]
 800ebc8:	f7f7 fda2 	bl	8006710 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 800ebcc:	2200      	movs	r2, #0
 800ebce:	0021      	movs	r1, r4
 800ebd0:	0030      	movs	r0, r6
 800ebd2:	f7f7 fd73 	bl	80066bc <HAL_RTC_GetTime>
 800ebd6:	466b      	mov	r3, sp
 800ebd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebda:	889b      	ldrh	r3, [r3, #4]
 800ebdc:	b292      	uxth	r2, r2

  }
  while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 800ebde:	429a      	cmp	r2, r3
 800ebe0:	d1ec      	bne.n	800ebbc <HW_RTC_GetCalendarValue+0x10>

  /* calculte amount of elapsed days since 01/01/2000 */
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800ebe2:	2103      	movs	r1, #3
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800ebe4:	78ea      	ldrb	r2, [r5, #3]
 800ebe6:	481b      	ldr	r0, [pc, #108]	; (800ec54 <HW_RTC_GetCalendarValue+0xa8>)

  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 800ebe8:	786e      	ldrb	r6, [r5, #1]
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800ebea:	4350      	muls	r0, r2
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800ebec:	400a      	ands	r2, r1
 800ebee:	4253      	negs	r3, r2
 800ebf0:	4153      	adcs	r3, r2
 800ebf2:	4a19      	ldr	r2, [pc, #100]	; (800ec58 <HW_RTC_GetCalendarValue+0xac>)
 800ebf4:	425b      	negs	r3, r3
 800ebf6:	4013      	ands	r3, r2
 800ebf8:	4a18      	ldr	r2, [pc, #96]	; (800ec5c <HW_RTC_GetCalendarValue+0xb0>)
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 800ebfa:	3e01      	subs	r6, #1
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800ebfc:	189b      	adds	r3, r3, r2
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 800ebfe:	223d      	movs	r2, #61	; 0x3d
 800ec00:	4372      	muls	r2, r6
 800ec02:	0076      	lsls	r6, r6, #1
 800ec04:	40f3      	lsrs	r3, r6

  seconds += (RTC_DateStruct->Date - 1);
 800ec06:	78ad      	ldrb	r5, [r5, #2]
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 800ec08:	3201      	adds	r2, #1
 800ec0a:	0fd7      	lsrs	r7, r2, #31
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800ec0c:	3003      	adds	r0, #3
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 800ec0e:	18ba      	adds	r2, r7, r2
 800ec10:	3d01      	subs	r5, #1
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800ec12:	0880      	lsrs	r0, r0, #2
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 800ec14:	1052      	asrs	r2, r2, #1
 800ec16:	1828      	adds	r0, r5, r0
 800ec18:	1810      	adds	r0, r2, r0
 800ec1a:	400b      	ands	r3, r1
  seconds += (RTC_DateStruct->Date - 1);
 800ec1c:	1ac3      	subs	r3, r0, r3

  /* convert from days to seconds */
  seconds *= SECONDS_IN_1DAY;
 800ec1e:	4810      	ldr	r0, [pc, #64]	; (800ec60 <HW_RTC_GetCalendarValue+0xb4>)

  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
              ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 800ec20:	7822      	ldrb	r2, [r4, #0]
  seconds *= SECONDS_IN_1DAY;
 800ec22:	4358      	muls	r0, r3
              ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 800ec24:	23e1      	movs	r3, #225	; 0xe1
 800ec26:	011b      	lsls	r3, r3, #4
 800ec28:	4353      	muls	r3, r2
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 800ec2a:	223c      	movs	r2, #60	; 0x3c
 800ec2c:	7861      	ldrb	r1, [r4, #1]



  calendarValue = (((uint64_t) seconds) << N_PREDIV_S) + (PREDIV_S - RTC_TimeStruct->SubSeconds);
 800ec2e:	4d0d      	ldr	r5, [pc, #52]	; (800ec64 <HW_RTC_GetCalendarValue+0xb8>)
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 800ec30:	434a      	muls	r2, r1
 800ec32:	189b      	adds	r3, r3, r2
  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 800ec34:	78a2      	ldrb	r2, [r4, #2]
  calendarValue = (((uint64_t) seconds) << N_PREDIV_S) + (PREDIV_S - RTC_TimeStruct->SubSeconds);
 800ec36:	6864      	ldr	r4, [r4, #4]
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 800ec38:	189b      	adds	r3, r3, r2
  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 800ec3a:	181b      	adds	r3, r3, r0
  calendarValue = (((uint64_t) seconds) << N_PREDIV_S) + (PREDIV_S - RTC_TimeStruct->SubSeconds);
 800ec3c:	0d99      	lsrs	r1, r3, #22
 800ec3e:	0298      	lsls	r0, r3, #10
 800ec40:	2300      	movs	r3, #0
 800ec42:	1b2a      	subs	r2, r5, r4
 800ec44:	1880      	adds	r0, r0, r2
 800ec46:	4159      	adcs	r1, r3

  return (calendarValue);
}
 800ec48:	b003      	add	sp, #12
 800ec4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec4c:	200012d8 	.word	0x200012d8
 800ec50:	40002800 	.word	0x40002800
 800ec54:	000005b5 	.word	0x000005b5
 800ec58:	ffaaaab0 	.word	0xffaaaab0
 800ec5c:	0099aaa0 	.word	0x0099aaa0
 800ec60:	00015180 	.word	0x00015180
 800ec64:	000003ff 	.word	0x000003ff

0800ec68 <HW_RTC_GetMinimumTimeout>:
}
 800ec68:	2003      	movs	r0, #3
 800ec6a:	4770      	bx	lr

0800ec6c <HW_RTC_ms2Tick>:
{
 800ec6c:	b510      	push	{r4, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 800ec6e:	0e41      	lsrs	r1, r0, #25
 800ec70:	227d      	movs	r2, #125	; 0x7d
 800ec72:	2300      	movs	r3, #0
 800ec74:	01c0      	lsls	r0, r0, #7
 800ec76:	f7f1 fc53 	bl	8000520 <__aeabi_uldivmod>
}
 800ec7a:	bd10      	pop	{r4, pc}

0800ec7c <HW_RTC_Tick2ms>:
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 800ec7c:	22fa      	movs	r2, #250	; 0xfa
{
 800ec7e:	0003      	movs	r3, r0
  tick = tick & PREDIV_S;
 800ec80:	0580      	lsls	r0, r0, #22
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 800ec82:	0092      	lsls	r2, r2, #2
  tick = tick & PREDIV_S;
 800ec84:	0d80      	lsrs	r0, r0, #22
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 800ec86:	4350      	muls	r0, r2
  uint32_t seconds = tick >> N_PREDIV_S;
 800ec88:	0a9b      	lsrs	r3, r3, #10
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 800ec8a:	4353      	muls	r3, r2
 800ec8c:	0a80      	lsrs	r0, r0, #10
 800ec8e:	18c0      	adds	r0, r0, r3
}
 800ec90:	4770      	bx	lr
	...

0800ec94 <HW_RTC_GetTimerElapsedTime>:
{
 800ec94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800ec96:	4668      	mov	r0, sp
 800ec98:	a901      	add	r1, sp, #4
 800ec9a:	f7ff ff87 	bl	800ebac <HW_RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 800ec9e:	4b02      	ldr	r3, [pc, #8]	; (800eca8 <HW_RTC_GetTimerElapsedTime+0x14>)
 800eca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eca2:	1ac0      	subs	r0, r0, r3
}
 800eca4:	b007      	add	sp, #28
 800eca6:	bd00      	pop	{pc}
 800eca8:	200012d8 	.word	0x200012d8

0800ecac <HW_RTC_GetTimerValue>:
{
 800ecac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800ecae:	4668      	mov	r0, sp
 800ecb0:	a901      	add	r1, sp, #4
 800ecb2:	f7ff ff7b 	bl	800ebac <HW_RTC_GetCalendarValue>
}
 800ecb6:	b007      	add	sp, #28
 800ecb8:	bd00      	pop	{pc}
	...

0800ecbc <HW_RTC_StopAlarm>:
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 800ecbc:	2180      	movs	r1, #128	; 0x80
{
 800ecbe:	b510      	push	{r4, lr}
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 800ecc0:	4c07      	ldr	r4, [pc, #28]	; (800ece0 <HW_RTC_StopAlarm+0x24>)
 800ecc2:	0049      	lsls	r1, r1, #1
 800ecc4:	0020      	movs	r0, r4
 800ecc6:	f7f7 fa27 	bl	8006118 <HAL_RTC_DeactivateAlarm>
  __HAL_RTC_ALARM_CLEAR_FLAG(&RtcHandle, RTC_FLAG_ALRAF);
 800ecca:	6821      	ldr	r1, [r4, #0]
 800eccc:	4b05      	ldr	r3, [pc, #20]	; (800ece4 <HW_RTC_StopAlarm+0x28>)
 800ecce:	68ca      	ldr	r2, [r1, #12]
 800ecd0:	b2d2      	uxtb	r2, r2
 800ecd2:	4313      	orrs	r3, r2
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800ecd4:	2280      	movs	r2, #128	; 0x80
  __HAL_RTC_ALARM_CLEAR_FLAG(&RtcHandle, RTC_FLAG_ALRAF);
 800ecd6:	60cb      	str	r3, [r1, #12]
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800ecd8:	4b03      	ldr	r3, [pc, #12]	; (800ece8 <HW_RTC_StopAlarm+0x2c>)
 800ecda:	0292      	lsls	r2, r2, #10
 800ecdc:	615a      	str	r2, [r3, #20]
}
 800ecde:	bd10      	pop	{r4, pc}
 800ece0:	200012d8 	.word	0x200012d8
 800ece4:	fffffe7f 	.word	0xfffffe7f
 800ece8:	40010400 	.word	0x40010400

0800ecec <HW_RTC_SetAlarm>:
{
 800ecec:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 800ecee:	4c4c      	ldr	r4, [pc, #304]	; (800ee20 <HW_RTC_SetAlarm+0x134>)
{
 800ecf0:	b087      	sub	sp, #28
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 800ecf2:	0023      	movs	r3, r4
 800ecf4:	3350      	adds	r3, #80	; 0x50
{
 800ecf6:	0005      	movs	r5, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 800ecf8:	2600      	movs	r6, #0
 800ecfa:	5f9e      	ldrsh	r6, [r3, r6]
 800ecfc:	f7ff ffca 	bl	800ec94 <HW_RTC_GetTimerElapsedTime>
 800ed00:	3603      	adds	r6, #3
    LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 800ed02:	2100      	movs	r1, #0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 800ed04:	1a28      	subs	r0, r5, r0
 800ed06:	4286      	cmp	r6, r0
 800ed08:	d300      	bcc.n	800ed0c <HW_RTC_SetAlarm+0x20>
    LPM_SetStopMode(LPM_RTC_Id, LPM_Disable);
 800ed0a:	2101      	movs	r1, #1
 800ed0c:	2004      	movs	r0, #4
 800ed0e:	f7ff fac1 	bl	800e294 <LPM_SetStopMode>
  if (LPM_GetMode() == LPM_StopMode)
 800ed12:	f7ff fad5 	bl	800e2c0 <LPM_GetMode>
 800ed16:	2801      	cmp	r0, #1
 800ed18:	d104      	bne.n	800ed24 <HW_RTC_SetAlarm+0x38>
    timeout = timeout -  McuWakeUpTimeCal;
 800ed1a:	0023      	movs	r3, r4
 800ed1c:	3350      	adds	r3, #80	; 0x50
 800ed1e:	2200      	movs	r2, #0
 800ed20:	5e9b      	ldrsh	r3, [r3, r2]
 800ed22:	1aed      	subs	r5, r5, r3
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 800ed24:	0023      	movs	r3, r4
 800ed26:	3354      	adds	r3, #84	; 0x54
 800ed28:	795a      	ldrb	r2, [r3, #5]
 800ed2a:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 800ed2c:	9200      	str	r2, [sp, #0]
 800ed2e:	799a      	ldrb	r2, [r3, #6]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 800ed30:	7e9c      	ldrb	r4, [r3, #26]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 800ed32:	9201      	str	r2, [sp, #4]
 800ed34:	79da      	ldrb	r2, [r3, #7]
 800ed36:	791e      	ldrb	r6, [r3, #4]
 800ed38:	9202      	str	r2, [sp, #8]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 800ed3a:	7e5a      	ldrb	r2, [r3, #25]
 800ed3c:	7edb      	ldrb	r3, [r3, #27]
 800ed3e:	9203      	str	r2, [sp, #12]
 800ed40:	9304      	str	r3, [sp, #16]
  HW_RTC_StopAlarm();
 800ed42:	f7ff ffbb 	bl	800ecbc <HW_RTC_StopAlarm>
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 800ed46:	4a37      	ldr	r2, [pc, #220]	; (800ee24 <HW_RTC_SetAlarm+0x138>)
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 800ed48:	05ab      	lsls	r3, r5, #22
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 800ed4a:	1bd7      	subs	r7, r2, r7
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 800ed4c:	0d9b      	lsrs	r3, r3, #22
 800ed4e:	18fb      	adds	r3, r7, r3
 800ed50:	9205      	str	r2, [sp, #20]
  while (timeoutValue >= SECONDS_IN_1DAY)
 800ed52:	4a35      	ldr	r2, [pc, #212]	; (800ee28 <HW_RTC_SetAlarm+0x13c>)
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 800ed54:	b29b      	uxth	r3, r3
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 800ed56:	0aad      	lsrs	r5, r5, #10
  rtcAlarmDays =  RTC_DateStruct.Date;
 800ed58:	b2a0      	uxth	r0, r4
  while (timeoutValue >= SECONDS_IN_1DAY)
 800ed5a:	4295      	cmp	r5, r2
 800ed5c:	d840      	bhi.n	800ede0 <HW_RTC_SetAlarm+0xf4>
  while (timeoutValue >= SECONDS_IN_1HOUR)
 800ed5e:	22e1      	movs	r2, #225	; 0xe1
  rtcAlarmHours = RTC_TimeStruct.Hours;
 800ed60:	b2b6      	uxth	r6, r6
  while (timeoutValue >= SECONDS_IN_1HOUR)
 800ed62:	0112      	lsls	r2, r2, #4
 800ed64:	4295      	cmp	r5, r2
 800ed66:	d240      	bcs.n	800edea <HW_RTC_SetAlarm+0xfe>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 800ed68:	466a      	mov	r2, sp
 800ed6a:	8817      	ldrh	r7, [r2, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 800ed6c:	2d3b      	cmp	r5, #59	; 0x3b
 800ed6e:	d841      	bhi.n	800edf4 <HW_RTC_SetAlarm+0x108>
  while (rtcAlarmSubSeconds >= (PREDIV_S + 1))
 800ed70:	0a9a      	lsrs	r2, r3, #10
 800ed72:	0294      	lsls	r4, r2, #10
 800ed74:	1b1c      	subs	r4, r3, r4
 800ed76:	9b01      	ldr	r3, [sp, #4]
 800ed78:	b2a4      	uxth	r4, r4
 800ed7a:	18d2      	adds	r2, r2, r3
 800ed7c:	1955      	adds	r5, r2, r5
 800ed7e:	b2ad      	uxth	r5, r5
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 800ed80:	2d3b      	cmp	r5, #59	; 0x3b
 800ed82:	d83b      	bhi.n	800edfc <HW_RTC_SetAlarm+0x110>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 800ed84:	2f3b      	cmp	r7, #59	; 0x3b
 800ed86:	d83e      	bhi.n	800ee06 <HW_RTC_SetAlarm+0x11a>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 800ed88:	2e17      	cmp	r6, #23
 800ed8a:	d841      	bhi.n	800ee10 <HW_RTC_SetAlarm+0x124>
  if (RTC_DateStruct.Year % 4 == 0)
 800ed8c:	9a03      	ldr	r2, [sp, #12]
 800ed8e:	9904      	ldr	r1, [sp, #16]
 800ed90:	4b26      	ldr	r3, [pc, #152]	; (800ee2c <HW_RTC_SetAlarm+0x140>)
 800ed92:	3a01      	subs	r2, #1
 800ed94:	0789      	lsls	r1, r1, #30
 800ed96:	d140      	bne.n	800ee1a <HW_RTC_SetAlarm+0x12e>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 800ed98:	5c99      	ldrb	r1, [r3, r2]
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 800ed9a:	4288      	cmp	r0, r1
 800ed9c:	d902      	bls.n	800eda4 <HW_RTC_SetAlarm+0xb8>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 800ed9e:	f7f1 fb41 	bl	8000424 <__aeabi_idivmod>
 800eda2:	b288      	uxth	r0, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S - rtcAlarmSubSeconds;
 800eda4:	9a05      	ldr	r2, [sp, #20]
 800eda6:	4b1e      	ldr	r3, [pc, #120]	; (800ee20 <HW_RTC_SetAlarm+0x134>)
 800eda8:	1b14      	subs	r4, r2, r4
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK;
 800edaa:	22a0      	movs	r2, #160	; 0xa0
 800edac:	0512      	lsls	r2, r2, #20
 800edae:	641a      	str	r2, [r3, #64]	; 0x40
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 800edb0:	001a      	movs	r2, r3
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 800edb2:	0019      	movs	r1, r3
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 800edb4:	3229      	adds	r2, #41	; 0x29
 800edb6:	77d0      	strb	r0, [r2, #31]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 800edb8:	9a02      	ldr	r2, [sp, #8]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 800edba:	2080      	movs	r0, #128	; 0x80
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 800edbc:	3128      	adds	r1, #40	; 0x28
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 800edbe:	70ca      	strb	r2, [r1, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800edc0:	2200      	movs	r2, #0
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 800edc2:	0040      	lsls	r0, r0, #1
 800edc4:	64d8      	str	r0, [r3, #76]	; 0x4c
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 800edc6:	0018      	movs	r0, r3
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S - rtcAlarmSubSeconds;
 800edc8:	62dc      	str	r4, [r3, #44]	; 0x2c
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 800edca:	708d      	strb	r5, [r1, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 800edcc:	704f      	strb	r7, [r1, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 800edce:	700e      	strb	r6, [r1, #0]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800edd0:	645a      	str	r2, [r3, #68]	; 0x44
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 800edd2:	63da      	str	r2, [r3, #60]	; 0x3c
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800edd4:	635a      	str	r2, [r3, #52]	; 0x34
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800edd6:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 800edd8:	f7f7 fb90 	bl	80064fc <HAL_RTC_SetAlarm_IT>
}
 800eddc:	b007      	add	sp, #28
 800edde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    timeoutValue -= SECONDS_IN_1DAY;
 800ede0:	4913      	ldr	r1, [pc, #76]	; (800ee30 <HW_RTC_SetAlarm+0x144>)
    rtcAlarmDays++;
 800ede2:	3001      	adds	r0, #1
    timeoutValue -= SECONDS_IN_1DAY;
 800ede4:	186d      	adds	r5, r5, r1
    rtcAlarmDays++;
 800ede6:	b280      	uxth	r0, r0
 800ede8:	e7b7      	b.n	800ed5a <HW_RTC_SetAlarm+0x6e>
    timeoutValue -= SECONDS_IN_1HOUR;
 800edea:	4912      	ldr	r1, [pc, #72]	; (800ee34 <HW_RTC_SetAlarm+0x148>)
    rtcAlarmHours++;
 800edec:	3601      	adds	r6, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 800edee:	186d      	adds	r5, r5, r1
    rtcAlarmHours++;
 800edf0:	b2b6      	uxth	r6, r6
 800edf2:	e7b7      	b.n	800ed64 <HW_RTC_SetAlarm+0x78>
    rtcAlarmMinutes++;
 800edf4:	3701      	adds	r7, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 800edf6:	3d3c      	subs	r5, #60	; 0x3c
    rtcAlarmMinutes++;
 800edf8:	b2bf      	uxth	r7, r7
 800edfa:	e7b7      	b.n	800ed6c <HW_RTC_SetAlarm+0x80>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 800edfc:	3d3c      	subs	r5, #60	; 0x3c
    rtcAlarmMinutes++;
 800edfe:	3701      	adds	r7, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 800ee00:	b2ad      	uxth	r5, r5
    rtcAlarmMinutes++;
 800ee02:	b2bf      	uxth	r7, r7
 800ee04:	e7bc      	b.n	800ed80 <HW_RTC_SetAlarm+0x94>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 800ee06:	3f3c      	subs	r7, #60	; 0x3c
    rtcAlarmHours++;
 800ee08:	3601      	adds	r6, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 800ee0a:	b2bf      	uxth	r7, r7
    rtcAlarmHours++;
 800ee0c:	b2b6      	uxth	r6, r6
 800ee0e:	e7b9      	b.n	800ed84 <HW_RTC_SetAlarm+0x98>
    rtcAlarmHours -= HOURS_IN_1DAY;
 800ee10:	3e18      	subs	r6, #24
    rtcAlarmDays++;
 800ee12:	3001      	adds	r0, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 800ee14:	b2b6      	uxth	r6, r6
    rtcAlarmDays++;
 800ee16:	b280      	uxth	r0, r0
 800ee18:	e7b6      	b.n	800ed88 <HW_RTC_SetAlarm+0x9c>
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 800ee1a:	189b      	adds	r3, r3, r2
 800ee1c:	7b19      	ldrb	r1, [r3, #12]
 800ee1e:	e7bc      	b.n	800ed9a <HW_RTC_SetAlarm+0xae>
 800ee20:	200012d8 	.word	0x200012d8
 800ee24:	000003ff 	.word	0x000003ff
 800ee28:	0001517f 	.word	0x0001517f
 800ee2c:	08010c5f 	.word	0x08010c5f
 800ee30:	fffeae80 	.word	0xfffeae80
 800ee34:	fffff1f0 	.word	0xfffff1f0

0800ee38 <HW_RTC_IrqHandler>:
  LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 800ee38:	2004      	movs	r0, #4
 800ee3a:	2100      	movs	r1, #0
{
 800ee3c:	b510      	push	{r4, lr}
  LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 800ee3e:	f7ff fa29 	bl	800e294 <LPM_SetStopMode>
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800ee42:	2280      	movs	r2, #128	; 0x80
 800ee44:	4b09      	ldr	r3, [pc, #36]	; (800ee6c <HW_RTC_IrqHandler+0x34>)
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 800ee46:	480a      	ldr	r0, [pc, #40]	; (800ee70 <HW_RTC_IrqHandler+0x38>)
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800ee48:	0292      	lsls	r2, r2, #10
 800ee4a:	615a      	str	r2, [r3, #20]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 800ee4c:	6803      	ldr	r3, [r0, #0]
 800ee4e:	689a      	ldr	r2, [r3, #8]
 800ee50:	04d2      	lsls	r2, r2, #19
 800ee52:	d509      	bpl.n	800ee68 <HW_RTC_IrqHandler+0x30>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 800ee54:	68da      	ldr	r2, [r3, #12]
 800ee56:	05d2      	lsls	r2, r2, #23
 800ee58:	d506      	bpl.n	800ee68 <HW_RTC_IrqHandler+0x30>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800ee5a:	68d9      	ldr	r1, [r3, #12]
 800ee5c:	4a05      	ldr	r2, [pc, #20]	; (800ee74 <HW_RTC_IrqHandler+0x3c>)
 800ee5e:	b2c9      	uxtb	r1, r1
 800ee60:	430a      	orrs	r2, r1
 800ee62:	60da      	str	r2, [r3, #12]
      HAL_RTC_AlarmAEventCallback(hrtc);
 800ee64:	f000 fae2 	bl	800f42c <HAL_RTC_AlarmAEventCallback>
}
 800ee68:	bd10      	pop	{r4, pc}
 800ee6a:	46c0      	nop			; (mov r8, r8)
 800ee6c:	40010400 	.word	0x40010400
 800ee70:	200012d8 	.word	0x200012d8
 800ee74:	fffffe7f 	.word	0xfffffe7f

0800ee78 <HW_RTC_DelayMs>:
{
 800ee78:	b570      	push	{r4, r5, r6, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 800ee7a:	227d      	movs	r2, #125	; 0x7d
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	0e41      	lsrs	r1, r0, #25
 800ee80:	01c0      	lsls	r0, r0, #7
 800ee82:	f7f1 fb4d 	bl	8000520 <__aeabi_uldivmod>
 800ee86:	0004      	movs	r4, r0
  timeout = HW_RTC_GetTimerValue();
 800ee88:	f7ff ff10 	bl	800ecac <HW_RTC_GetTimerValue>
 800ee8c:	0005      	movs	r5, r0
  while (((HW_RTC_GetTimerValue() - timeout)) < delayValue)
 800ee8e:	f7ff ff0d 	bl	800ecac <HW_RTC_GetTimerValue>
 800ee92:	1b40      	subs	r0, r0, r5
 800ee94:	42a0      	cmp	r0, r4
 800ee96:	d300      	bcc.n	800ee9a <HW_RTC_DelayMs+0x22>
}
 800ee98:	bd70      	pop	{r4, r5, r6, pc}
    __NOP();
 800ee9a:	46c0      	nop			; (mov r8, r8)
 800ee9c:	e7f7      	b.n	800ee8e <HW_RTC_DelayMs+0x16>
	...

0800eea0 <HW_RTC_SetTimerContext>:
{
 800eea0:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = (uint32_t) HW_RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 800eea2:	4c04      	ldr	r4, [pc, #16]	; (800eeb4 <HW_RTC_SetTimerContext+0x14>)
 800eea4:	0021      	movs	r1, r4
 800eea6:	0020      	movs	r0, r4
 800eea8:	3158      	adds	r1, #88	; 0x58
 800eeaa:	306c      	adds	r0, #108	; 0x6c
 800eeac:	f7ff fe7e 	bl	800ebac <HW_RTC_GetCalendarValue>
 800eeb0:	6560      	str	r0, [r4, #84]	; 0x54
}
 800eeb2:	bd10      	pop	{r4, pc}
 800eeb4:	200012d8 	.word	0x200012d8

0800eeb8 <HW_RTC_Init>:
{
 800eeb8:	b570      	push	{r4, r5, r6, lr}
  if (HW_RTC_Initalized == false)
 800eeba:	4c19      	ldr	r4, [pc, #100]	; (800ef20 <HW_RTC_Init+0x68>)
{
 800eebc:	b086      	sub	sp, #24
  if (HW_RTC_Initalized == false)
 800eebe:	0026      	movs	r6, r4
 800eec0:	3670      	adds	r6, #112	; 0x70
 800eec2:	7835      	ldrb	r5, [r6, #0]
 800eec4:	2d00      	cmp	r5, #0
 800eec6:	d128      	bne.n	800ef1a <HW_RTC_Init+0x62>
  RtcHandle.Instance = RTC;
 800eec8:	4b16      	ldr	r3, [pc, #88]	; (800ef24 <HW_RTC_Init+0x6c>)
  HAL_RTC_Init(&RtcHandle);
 800eeca:	0020      	movs	r0, r4
  RtcHandle.Instance = RTC;
 800eecc:	6023      	str	r3, [r4, #0]
  RtcHandle.Init.AsynchPrediv = PREDIV_A; /* RTC_ASYNCH_PREDIV; */
 800eece:	231f      	movs	r3, #31
 800eed0:	60a3      	str	r3, [r4, #8]
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 800eed2:	4b15      	ldr	r3, [pc, #84]	; (800ef28 <HW_RTC_Init+0x70>)
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800eed4:	6065      	str	r5, [r4, #4]
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 800eed6:	60e3      	str	r3, [r4, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT;
 800eed8:	6125      	str	r5, [r4, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800eeda:	61a5      	str	r5, [r4, #24]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800eedc:	61e5      	str	r5, [r4, #28]
  HAL_RTC_Init(&RtcHandle);
 800eede:	f7f7 f9b3 	bl	8006248 <HAL_RTC_Init>
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 800eee2:	4b12      	ldr	r3, [pc, #72]	; (800ef2c <HW_RTC_Init+0x74>)
  HAL_RTC_SetDate(&RtcHandle, &RTC_DateStruct, RTC_FORMAT_BIN);
 800eee4:	002a      	movs	r2, r5
 800eee6:	4669      	mov	r1, sp
 800eee8:	0020      	movs	r0, r4
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 800eeea:	9300      	str	r3, [sp, #0]
  HAL_RTC_SetDate(&RtcHandle, &RTC_DateStruct, RTC_FORMAT_BIN);
 800eeec:	f7f7 fa9a 	bl	8006424 <HAL_RTC_SetDate>
  HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct, RTC_FORMAT_BIN);
 800eef0:	002a      	movs	r2, r5
 800eef2:	a901      	add	r1, sp, #4
 800eef4:	0020      	movs	r0, r4
  RTC_TimeStruct.Hours = 0;
 800eef6:	9501      	str	r5, [sp, #4]
  RTC_TimeStruct.SubSeconds = 0;
 800eef8:	9502      	str	r5, [sp, #8]
  RTC_TimeStruct.StoreOperation = RTC_DAYLIGHTSAVING_NONE;
 800eefa:	9505      	str	r5, [sp, #20]
  RTC_TimeStruct.DayLightSaving = RTC_STOREOPERATION_RESET;
 800eefc:	9504      	str	r5, [sp, #16]
  HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct, RTC_FORMAT_BIN);
 800eefe:	f7f7 fa0b 	bl	8006318 <HAL_RTC_SetTime>
  HAL_RTCEx_EnableBypassShadow(&RtcHandle);
 800ef02:	0020      	movs	r0, r4
 800ef04:	f7f7 fc32 	bl	800676c <HAL_RTCEx_EnableBypassShadow>
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 800ef08:	2180      	movs	r1, #128	; 0x80
 800ef0a:	0020      	movs	r0, r4
 800ef0c:	0049      	lsls	r1, r1, #1
 800ef0e:	f7f7 f903 	bl	8006118 <HAL_RTC_DeactivateAlarm>
    HW_RTC_SetTimerContext();
 800ef12:	f7ff ffc5 	bl	800eea0 <HW_RTC_SetTimerContext>
    HW_RTC_Initalized = true;
 800ef16:	2301      	movs	r3, #1
 800ef18:	7033      	strb	r3, [r6, #0]
}
 800ef1a:	b006      	add	sp, #24
 800ef1c:	bd70      	pop	{r4, r5, r6, pc}
 800ef1e:	46c0      	nop			; (mov r8, r8)
 800ef20:	200012d8 	.word	0x200012d8
 800ef24:	40002800 	.word	0x40002800
 800ef28:	000003ff 	.word	0x000003ff
 800ef2c:	00010101 	.word	0x00010101

0800ef30 <HW_RTC_GetTimerContext>:
  return RtcTimerContext.Rtc_Time;
 800ef30:	4b01      	ldr	r3, [pc, #4]	; (800ef38 <HW_RTC_GetTimerContext+0x8>)
 800ef32:	6d58      	ldr	r0, [r3, #84]	; 0x54
}
 800ef34:	4770      	bx	lr
 800ef36:	46c0      	nop			; (mov r8, r8)
 800ef38:	200012d8 	.word	0x200012d8

0800ef3c <HW_RTC_GetCalendarTime>:
 * \param [IN]   pointer to ms
 *
 * \return uint32_t seconds
 */
uint32_t HW_RTC_GetCalendarTime(uint16_t *mSeconds)
{
 800ef3c:	b570      	push	{r4, r5, r6, lr}
 800ef3e:	b086      	sub	sp, #24
 800ef40:	0006      	movs	r6, r0
  RTC_TimeTypeDef RTC_TimeStruct ;
  RTC_DateTypeDef RTC_DateStruct;
  uint32_t ticks;

  uint64_t calendarValue = HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800ef42:	a901      	add	r1, sp, #4
 800ef44:	4668      	mov	r0, sp
 800ef46:	f7ff fe31 	bl	800ebac <HW_RTC_GetCalendarValue>
 800ef4a:	0004      	movs	r4, r0

  uint32_t seconds = (uint32_t)(calendarValue >> N_PREDIV_S);

  ticks = (uint32_t) calendarValue & PREDIV_S;
 800ef4c:	0580      	lsls	r0, r0, #22
 800ef4e:	0d80      	lsrs	r0, r0, #22
  uint64_t calendarValue = HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800ef50:	000d      	movs	r5, r1

  *mSeconds = HW_RTC_Tick2ms(ticks);
 800ef52:	f7ff fe93 	bl	800ec7c <HW_RTC_Tick2ms>
  uint32_t seconds = (uint32_t)(calendarValue >> N_PREDIV_S);
 800ef56:	05ad      	lsls	r5, r5, #22
  *mSeconds = HW_RTC_Tick2ms(ticks);
 800ef58:	8030      	strh	r0, [r6, #0]
  uint32_t seconds = (uint32_t)(calendarValue >> N_PREDIV_S);
 800ef5a:	0aa0      	lsrs	r0, r4, #10
 800ef5c:	4328      	orrs	r0, r5

  return seconds;
}
 800ef5e:	b006      	add	sp, #24
 800ef60:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ef64 <HW_RTC_BKUPWrite>:

void HW_RTC_BKUPWrite(uint32_t Data0, uint32_t Data1)
{
 800ef64:	b570      	push	{r4, r5, r6, lr}
 800ef66:	000c      	movs	r4, r1
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR0, Data0);
 800ef68:	4d05      	ldr	r5, [pc, #20]	; (800ef80 <HW_RTC_BKUPWrite+0x1c>)
{
 800ef6a:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR0, Data0);
 800ef6c:	2100      	movs	r1, #0
 800ef6e:	0028      	movs	r0, r5
 800ef70:	f7f7 fbf0 	bl	8006754 <HAL_RTCEx_BKUPWrite>
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, Data1);
 800ef74:	0028      	movs	r0, r5
 800ef76:	0022      	movs	r2, r4
 800ef78:	2101      	movs	r1, #1
 800ef7a:	f7f7 fbeb 	bl	8006754 <HAL_RTCEx_BKUPWrite>
}
 800ef7e:	bd70      	pop	{r4, r5, r6, pc}
 800ef80:	200012d8 	.word	0x200012d8

0800ef84 <HW_RTC_BKUPRead>:

void HW_RTC_BKUPRead(uint32_t *Data0, uint32_t *Data1)
{
 800ef84:	b570      	push	{r4, r5, r6, lr}
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 800ef86:	4e07      	ldr	r6, [pc, #28]	; (800efa4 <HW_RTC_BKUPRead+0x20>)
{
 800ef88:	0005      	movs	r5, r0
 800ef8a:	000c      	movs	r4, r1
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 800ef8c:	0030      	movs	r0, r6
 800ef8e:	2100      	movs	r1, #0
 800ef90:	f7f7 fbe6 	bl	8006760 <HAL_RTCEx_BKUPRead>
  *Data1 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1);
 800ef94:	2101      	movs	r1, #1
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 800ef96:	6028      	str	r0, [r5, #0]
  *Data1 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1);
 800ef98:	0030      	movs	r0, r6
 800ef9a:	f7f7 fbe1 	bl	8006760 <HAL_RTCEx_BKUPRead>
 800ef9e:	6020      	str	r0, [r4, #0]
}
 800efa0:	bd70      	pop	{r4, r5, r6, pc}
 800efa2:	46c0      	nop			; (mov r8, r8)
 800efa4:	200012d8 	.word	0x200012d8

0800efa8 <RtcTempCompensation>:

TimerTime_t RtcTempCompensation(TimerTime_t period, float temperature)
{
 800efa8:	b570      	push	{r4, r5, r6, lr}
 800efaa:	0005      	movs	r5, r0
 800efac:	1c08      	adds	r0, r1, #0
  }
  else
  {
    ppm = (k + kDev);
  }
  interim = (temperature - (t - tDev));
 800efae:	4915      	ldr	r1, [pc, #84]	; (800f004 <RtcTempCompensation+0x5c>)
 800efb0:	f7f2 f858 	bl	8001064 <__aeabi_fsub>
 800efb4:	1c04      	adds	r4, r0, #0
  ppm *=  interim * interim;

  // Calculate the drift in time
  interim = ((float) period * ppm) / 1000000;
 800efb6:	0028      	movs	r0, r5
 800efb8:	f7f2 fa3c 	bl	8001434 <__aeabi_ui2f>
  ppm *=  interim * interim;
 800efbc:	1c21      	adds	r1, r4, #0
  interim = ((float) period * ppm) / 1000000;
 800efbe:	1c05      	adds	r5, r0, #0
  ppm *=  interim * interim;
 800efc0:	1c20      	adds	r0, r4, #0
 800efc2:	f7f1 ff35 	bl	8000e30 <__aeabi_fmul>
 800efc6:	4910      	ldr	r1, [pc, #64]	; (800f008 <RtcTempCompensation+0x60>)
 800efc8:	f7f1 ff32 	bl	8000e30 <__aeabi_fmul>
  interim = ((float) period * ppm) / 1000000;
 800efcc:	1c29      	adds	r1, r5, #0
 800efce:	f7f1 ff2f 	bl	8000e30 <__aeabi_fmul>
 800efd2:	490e      	ldr	r1, [pc, #56]	; (800f00c <RtcTempCompensation+0x64>)
 800efd4:	f7f1 fd62 	bl	8000a9c <__aeabi_fdiv>
 800efd8:	1c01      	adds	r1, r0, #0
  // Calculate the resulting time period
  interim += period;
 800efda:	1c28      	adds	r0, r5, #0
 800efdc:	f7f1 fbc2 	bl	8000764 <__aeabi_fadd>
  interim = floor(interim);
 800efe0:	f7f4 f85e 	bl	80030a0 <__aeabi_f2d>
 800efe4:	f001 fab8 	bl	8010558 <floor>
 800efe8:	f7f4 f8a2 	bl	8003130 <__aeabi_d2f>

  if (interim < 0.0f)
 800efec:	2100      	movs	r1, #0
  interim = floor(interim);
 800efee:	1c04      	adds	r4, r0, #0
  if (interim < 0.0f)
 800eff0:	f7f1 fa6e 	bl	80004d0 <__aeabi_fcmplt>
 800eff4:	2800      	cmp	r0, #0
 800eff6:	d000      	beq.n	800effa <RtcTempCompensation+0x52>
  {
    interim = (float)period;
 800eff8:	1c2c      	adds	r4, r5, #0
  }

  // Calculate the resulting period
  return (TimerTime_t) interim;
 800effa:	1c20      	adds	r0, r4, #0
 800effc:	f7f1 fab0 	bl	8000560 <__aeabi_f2uiz>
}
 800f000:	bd70      	pop	{r4, r5, r6, pc}
 800f002:	46c0      	nop			; (mov r8, r8)
 800f004:	41a00000 	.word	0x41a00000
 800f008:	bd1db22d 	.word	0xbd1db22d
 800f00c:	49742400 	.word	0x49742400

0800f010 <HW_SPI_IoInit>:
  /*##-2- Configure the SPI GPIOs */
  HW_SPI_IoDeInit();
}

void HW_SPI_IoInit(void)
{
 800f010:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef initStruct = {0};


  initStruct.Mode = GPIO_MODE_AF_PP;
 800f012:	2302      	movs	r3, #2
  initStruct.Pull = GPIO_NOPULL  ;
  initStruct.Speed = GPIO_SPEED_HIGH;
  initStruct.Alternate = SPI1_AF ;

  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
  HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 800f014:	24a0      	movs	r4, #160	; 0xa0
  GPIO_InitTypeDef initStruct = {0};
 800f016:	2500      	movs	r5, #0
{
 800f018:	b086      	sub	sp, #24
  HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 800f01a:	05e4      	lsls	r4, r4, #23
  initStruct.Mode = GPIO_MODE_AF_PP;
 800f01c:	9302      	str	r3, [sp, #8]
  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 800f01e:	aa01      	add	r2, sp, #4
  initStruct.Speed = GPIO_SPEED_HIGH;
 800f020:	3301      	adds	r3, #1
  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 800f022:	2108      	movs	r1, #8
 800f024:	4810      	ldr	r0, [pc, #64]	; (800f068 <HW_SPI_IoInit+0x58>)
  initStruct.Speed = GPIO_SPEED_HIGH;
 800f026:	9304      	str	r3, [sp, #16]
  GPIO_InitTypeDef initStruct = {0};
 800f028:	9501      	str	r5, [sp, #4]
  initStruct.Pull = GPIO_NOPULL  ;
 800f02a:	9503      	str	r5, [sp, #12]
  initStruct.Alternate = SPI1_AF ;
 800f02c:	9505      	str	r5, [sp, #20]
  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 800f02e:	f7ff fd43 	bl	800eab8 <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 800f032:	0020      	movs	r0, r4
 800f034:	aa01      	add	r2, sp, #4
 800f036:	2140      	movs	r1, #64	; 0x40
 800f038:	f7ff fd3e 	bl	800eab8 <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 800f03c:	0020      	movs	r0, r4
 800f03e:	aa01      	add	r2, sp, #4
 800f040:	2180      	movs	r1, #128	; 0x80
 800f042:	f7ff fd39 	bl	800eab8 <HW_GPIO_Init>

  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
  initStruct.Pull = GPIO_NOPULL;
 800f046:	9503      	str	r5, [sp, #12]

  HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 800f048:	2580      	movs	r5, #128	; 0x80
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f04a:	2601      	movs	r6, #1
  HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 800f04c:	022d      	lsls	r5, r5, #8
 800f04e:	0029      	movs	r1, r5
 800f050:	0020      	movs	r0, r4
 800f052:	aa01      	add	r2, sp, #4
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f054:	9602      	str	r6, [sp, #8]
  HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 800f056:	f7ff fd2f 	bl	800eab8 <HW_GPIO_Init>

  HW_GPIO_Write(RADIO_NSS_PORT, RADIO_NSS_PIN, 1);
 800f05a:	0032      	movs	r2, r6
 800f05c:	0029      	movs	r1, r5
 800f05e:	0020      	movs	r0, r4
 800f060:	f7ff fd9e 	bl	800eba0 <HW_GPIO_Write>
}
 800f064:	b006      	add	sp, #24
 800f066:	bd70      	pop	{r4, r5, r6, pc}
 800f068:	50000400 	.word	0x50000400

0800f06c <HW_SPI_Init>:
  hspi.Instance = SPI1;
 800f06c:	4b1f      	ldr	r3, [pc, #124]	; (800f0ec <HW_SPI_Init+0x80>)
 800f06e:	4820      	ldr	r0, [pc, #128]	; (800f0f0 <HW_SPI_Init+0x84>)
{
 800f070:	b510      	push	{r4, lr}
  hspi.Instance = SPI1;
 800f072:	6003      	str	r3, [r0, #0]
/* Private functions ---------------------------------------------------------*/

static uint32_t SpiFrequency(uint32_t hz)
{
  uint32_t divisor = 0;
  uint32_t SysClkTmp = SystemCoreClock;
 800f074:	4b1f      	ldr	r3, [pc, #124]	; (800f0f4 <HW_SPI_Init+0x88>)
  uint32_t baudRate;

  while (SysClkTmp > hz)
 800f076:	4920      	ldr	r1, [pc, #128]	; (800f0f8 <HW_SPI_Init+0x8c>)
  uint32_t SysClkTmp = SystemCoreClock;
 800f078:	681a      	ldr	r2, [r3, #0]
  uint32_t divisor = 0;
 800f07a:	2300      	movs	r3, #0
  while (SysClkTmp > hz)
 800f07c:	428a      	cmp	r2, r1
 800f07e:	d82f      	bhi.n	800f0e0 <HW_SPI_Init+0x74>
    {
      break;
    }
  }

  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 800f080:	2104      	movs	r1, #4
 800f082:	001a      	movs	r2, r3
 800f084:	400a      	ands	r2, r1
 800f086:	420b      	tst	r3, r1
 800f088:	d12e      	bne.n	800f0e8 <HW_SPI_Init+0x7c>
             (((divisor & 0x2) == 0) ? 0x0 : SPI_CR1_BR_1) |
 800f08a:	2402      	movs	r4, #2
 800f08c:	0019      	movs	r1, r3
 800f08e:	4021      	ands	r1, r4
 800f090:	4223      	tst	r3, r4
 800f092:	d000      	beq.n	800f096 <HW_SPI_Init+0x2a>
 800f094:	2110      	movs	r1, #16
             (((divisor & 0x1) == 0) ? 0x0 : SPI_CR1_BR_0);
 800f096:	2401      	movs	r4, #1
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 800f098:	430a      	orrs	r2, r1
             (((divisor & 0x1) == 0) ? 0x0 : SPI_CR1_BR_0);
 800f09a:	0019      	movs	r1, r3
 800f09c:	4021      	ands	r1, r4
 800f09e:	4223      	tst	r3, r4
 800f0a0:	d000      	beq.n	800f0a4 <HW_SPI_Init+0x38>
 800f0a2:	2108      	movs	r1, #8
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 800f0a4:	2300      	movs	r3, #0
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 800f0a6:	430a      	orrs	r2, r1
  hspi.Init.BaudRatePrescaler = SpiFrequency(10000000);
 800f0a8:	61c2      	str	r2, [r0, #28]
  hspi.Init.Mode           = SPI_MODE_MASTER;
 800f0aa:	2282      	movs	r2, #130	; 0x82
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 800f0ac:	6083      	str	r3, [r0, #8]
  hspi.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800f0ae:	6103      	str	r3, [r0, #16]
  hspi.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800f0b0:	6143      	str	r3, [r0, #20]
  hspi.Init.DataSize       = SPI_DATASIZE_8BIT;
 800f0b2:	60c3      	str	r3, [r0, #12]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f0b4:	6283      	str	r3, [r0, #40]	; 0x28
  hspi.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800f0b6:	6203      	str	r3, [r0, #32]
  hspi.Init.TIMode         = SPI_TIMODE_DISABLE;
 800f0b8:	6243      	str	r3, [r0, #36]	; 0x24
  SPI_CLK_ENABLE();
 800f0ba:	2380      	movs	r3, #128	; 0x80
  hspi.Init.Mode           = SPI_MODE_MASTER;
 800f0bc:	0052      	lsls	r2, r2, #1
 800f0be:	6042      	str	r2, [r0, #4]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 800f0c0:	32fc      	adds	r2, #252	; 0xfc
 800f0c2:	6182      	str	r2, [r0, #24]
  SPI_CLK_ENABLE();
 800f0c4:	4a0d      	ldr	r2, [pc, #52]	; (800f0fc <HW_SPI_Init+0x90>)
 800f0c6:	015b      	lsls	r3, r3, #5
 800f0c8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800f0ca:	430b      	orrs	r3, r1
 800f0cc:	6353      	str	r3, [r2, #52]	; 0x34
  if (HAL_SPI_Init(&hspi) != HAL_OK)
 800f0ce:	f7f7 fbc9 	bl	8006864 <HAL_SPI_Init>
 800f0d2:	2800      	cmp	r0, #0
 800f0d4:	d001      	beq.n	800f0da <HW_SPI_Init+0x6e>
    Error_Handler();
 800f0d6:	f7ff fccb 	bl	800ea70 <Error_Handler>
  HW_SPI_IoInit();
 800f0da:	f7ff ff99 	bl	800f010 <HW_SPI_IoInit>
}
 800f0de:	bd10      	pop	{r4, pc}
    divisor++;
 800f0e0:	3301      	adds	r3, #1
    SysClkTmp = (SysClkTmp >> 1);
 800f0e2:	0852      	lsrs	r2, r2, #1
    if (divisor >= 7)
 800f0e4:	2b07      	cmp	r3, #7
 800f0e6:	d1c9      	bne.n	800f07c <HW_SPI_Init+0x10>
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 800f0e8:	2220      	movs	r2, #32
 800f0ea:	e7ce      	b.n	800f08a <HW_SPI_Init+0x1e>
 800f0ec:	40013000 	.word	0x40013000
 800f0f0:	2000134c 	.word	0x2000134c
 800f0f4:	20000044 	.word	0x20000044
 800f0f8:	00989680 	.word	0x00989680
 800f0fc:	40021000 	.word	0x40021000

0800f100 <HW_SPI_InOut>:
{
 800f100:	b510      	push	{r4, lr}
 800f102:	210e      	movs	r1, #14
  HAL_SPI_TransmitReceive(&hspi, (uint8_t *) &txData, (uint8_t *) &rxData, 1, HAL_MAX_DELAY);
 800f104:	2416      	movs	r4, #22
 800f106:	2301      	movs	r3, #1
{
 800f108:	b086      	sub	sp, #24
 800f10a:	4469      	add	r1, sp
  HAL_SPI_TransmitReceive(&hspi, (uint8_t *) &txData, (uint8_t *) &rxData, 1, HAL_MAX_DELAY);
 800f10c:	446c      	add	r4, sp
 800f10e:	425b      	negs	r3, r3
{
 800f110:	8008      	strh	r0, [r1, #0]
  HAL_SPI_TransmitReceive(&hspi, (uint8_t *) &txData, (uint8_t *) &rxData, 1, HAL_MAX_DELAY);
 800f112:	0022      	movs	r2, r4
 800f114:	9300      	str	r3, [sp, #0]
 800f116:	4803      	ldr	r0, [pc, #12]	; (800f124 <HW_SPI_InOut+0x24>)
 800f118:	3302      	adds	r3, #2
 800f11a:	f7f7 fbe3 	bl	80068e4 <HAL_SPI_TransmitReceive>
  return rxData;
 800f11e:	8820      	ldrh	r0, [r4, #0]
}
 800f120:	b006      	add	sp, #24
 800f122:	bd10      	pop	{r4, pc}
 800f124:	2000134c 	.word	0x2000134c

0800f128 <LoraMacProcessNotify>:



void LoraMacProcessNotify(void)
{
  LoraMacProcessRequest = LORA_SET;
 800f128:	2201      	movs	r2, #1
 800f12a:	4b01      	ldr	r3, [pc, #4]	; (800f130 <LoraMacProcessNotify+0x8>)
 800f12c:	701a      	strb	r2, [r3, #0]
}
 800f12e:	4770      	bx	lr
 800f130:	200013a4 	.word	0x200013a4

0800f134 <LORA_TxNeeded>:
  LORA_send(&AppData, LORAWAN_UNCONFIRMED_MSG);
}

static void LORA_TxNeeded(void)
{
  AppData.BuffSize = 0;
 800f134:	2380      	movs	r3, #128	; 0x80
{
 800f136:	b510      	push	{r4, lr}
  AppData.BuffSize = 0;
 800f138:	4803      	ldr	r0, [pc, #12]	; (800f148 <LORA_TxNeeded+0x14>)
 800f13a:	009b      	lsls	r3, r3, #2
  AppData.Port = LORAWAN_APP_PORT;

  LORA_send(&AppData, LORAWAN_UNCONFIRMED_MSG);
 800f13c:	2100      	movs	r1, #0
  AppData.BuffSize = 0;
 800f13e:	8083      	strh	r3, [r0, #4]
  LORA_send(&AppData, LORAWAN_UNCONFIRMED_MSG);
 800f140:	f7ff f820 	bl	800e184 <LORA_send>
}
 800f144:	bd10      	pop	{r4, pc}
 800f146:	46c0      	nop			; (mov r8, r8)
 800f148:	2000015c 	.word	0x2000015c

0800f14c <LORA_ConfirmClass>:
  PRINTF("switch to class %c done\n\r", "ABC"[Class]);
 800f14c:	4b06      	ldr	r3, [pc, #24]	; (800f168 <LORA_ConfirmClass+0x1c>)
{
 800f14e:	b510      	push	{r4, lr}
  PRINTF("switch to class %c done\n\r", "ABC"[Class]);
 800f150:	5c19      	ldrb	r1, [r3, r0]
 800f152:	4806      	ldr	r0, [pc, #24]	; (800f16c <LORA_ConfirmClass+0x20>)
 800f154:	f7ff fbd0 	bl	800e8f8 <TraceSend>
  AppData.BuffSize = 0;
 800f158:	2380      	movs	r3, #128	; 0x80
 800f15a:	4805      	ldr	r0, [pc, #20]	; (800f170 <LORA_ConfirmClass+0x24>)
 800f15c:	009b      	lsls	r3, r3, #2
  LORA_send(&AppData, LORAWAN_UNCONFIRMED_MSG);
 800f15e:	2100      	movs	r1, #0
  AppData.BuffSize = 0;
 800f160:	8083      	strh	r3, [r0, #4]
  LORA_send(&AppData, LORAWAN_UNCONFIRMED_MSG);
 800f162:	f7ff f80f 	bl	800e184 <LORA_send>
}
 800f166:	bd10      	pop	{r4, pc}
 800f168:	08011278 	.word	0x08011278
 800f16c:	0801125e 	.word	0x0801125e
 800f170:	2000015c 	.word	0x2000015c

0800f174 <LORA_HasJoined>:
{
 800f174:	b510      	push	{r4, lr}
  PRINTF("JOINED\n\r");
 800f176:	4803      	ldr	r0, [pc, #12]	; (800f184 <LORA_HasJoined+0x10>)
 800f178:	f7ff fbbe 	bl	800e8f8 <TraceSend>
  LORA_RequestClass(LORAWAN_DEFAULT_CLASS);
 800f17c:	2000      	movs	r0, #0
 800f17e:	f7ff f839 	bl	800e1f4 <LORA_RequestClass>
}
 800f182:	bd10      	pop	{r4, pc}
 800f184:	0801127c 	.word	0x0801127c

0800f188 <OnTimerLedEvent>:
  return batteryLevel;
}

#ifdef USE_B_L072Z_LRWAN1
static void OnTimerLedEvent(void *context)
{
 800f188:	b510      	push	{r4, lr}
  LED_Off(LED_RED1) ;
 800f18a:	2001      	movs	r0, #1
 800f18c:	f7f4 f8fe 	bl	800338c <BSP_LED_Off>
}
 800f190:	bd10      	pop	{r4, pc}
	...

0800f194 <LORA_RxData>:
{
 800f194:	b510      	push	{r4, lr}
 800f196:	0004      	movs	r4, r0
  PRINTF("PACKET RECEIVED ON PORT %d\n\r", AppData->Port);
 800f198:	7941      	ldrb	r1, [r0, #5]
 800f19a:	481f      	ldr	r0, [pc, #124]	; (800f218 <LORA_RxData+0x84>)
 800f19c:	f7ff fbac 	bl	800e8f8 <TraceSend>
  switch (AppData->Port)
 800f1a0:	7963      	ldrb	r3, [r4, #5]
 800f1a2:	2b03      	cmp	r3, #3
 800f1a4:	d011      	beq.n	800f1ca <LORA_RxData+0x36>
 800f1a6:	2b63      	cmp	r3, #99	; 0x63
 800f1a8:	d01d      	beq.n	800f1e6 <LORA_RxData+0x52>
 800f1aa:	7921      	ldrb	r1, [r4, #4]
 800f1ac:	2b02      	cmp	r3, #2
 800f1ae:	d125      	bne.n	800f1fc <LORA_RxData+0x68>
      if (AppData->BuffSize == 1)
 800f1b0:	2901      	cmp	r1, #1
 800f1b2:	d117      	bne.n	800f1e4 <LORA_RxData+0x50>
        AppLedStateOn = AppData->Buff[0] & 0x01;
 800f1b4:	6823      	ldr	r3, [r4, #0]
 800f1b6:	781b      	ldrb	r3, [r3, #0]
        if (AppLedStateOn == RESET)
 800f1b8:	420b      	tst	r3, r1
 800f1ba:	d118      	bne.n	800f1ee <LORA_RxData+0x5a>
          PRINTF("LED OFF\n\r");
 800f1bc:	4817      	ldr	r0, [pc, #92]	; (800f21c <LORA_RxData+0x88>)
 800f1be:	f7ff fb9b 	bl	800e8f8 <TraceSend>
          LED_Off(LED_BLUE) ;
 800f1c2:	2002      	movs	r0, #2
 800f1c4:	f7f4 f8e2 	bl	800338c <BSP_LED_Off>
 800f1c8:	e00c      	b.n	800f1e4 <LORA_RxData+0x50>
      if (AppData->BuffSize == 1)
 800f1ca:	7923      	ldrb	r3, [r4, #4]
 800f1cc:	2b01      	cmp	r3, #1
 800f1ce:	d109      	bne.n	800f1e4 <LORA_RxData+0x50>
        switch (AppData->Buff[0])
 800f1d0:	6823      	ldr	r3, [r4, #0]
 800f1d2:	7818      	ldrb	r0, [r3, #0]
 800f1d4:	2801      	cmp	r0, #1
 800f1d6:	d003      	beq.n	800f1e0 <LORA_RxData+0x4c>
 800f1d8:	2802      	cmp	r0, #2
 800f1da:	d001      	beq.n	800f1e0 <LORA_RxData+0x4c>
 800f1dc:	2800      	cmp	r0, #0
 800f1de:	d101      	bne.n	800f1e4 <LORA_RxData+0x50>
            LORA_RequestClass(CLASS_C);
 800f1e0:	f7ff f808 	bl	800e1f4 <LORA_RequestClass>
}
 800f1e4:	bd10      	pop	{r4, pc}
      AppLedStateOn = (AppData->Buff[2] == 100) ?  0x01 : 0x00;
 800f1e6:	6823      	ldr	r3, [r4, #0]
      if (AppLedStateOn == RESET)
 800f1e8:	789b      	ldrb	r3, [r3, #2]
 800f1ea:	2b64      	cmp	r3, #100	; 0x64
 800f1ec:	d1e6      	bne.n	800f1bc <LORA_RxData+0x28>
          PRINTF("LED ON\n\r");
 800f1ee:	480c      	ldr	r0, [pc, #48]	; (800f220 <LORA_RxData+0x8c>)
 800f1f0:	f7ff fb82 	bl	800e8f8 <TraceSend>
          LED_On(LED_BLUE) ;
 800f1f4:	2002      	movs	r0, #2
 800f1f6:	f7f4 f8b9 	bl	800336c <BSP_LED_On>
 800f1fa:	e7f3      	b.n	800f1e4 <LORA_RxData+0x50>
      uint16_t payload = ((uint16_t) AppData->Buff[1] << 8) | AppData->Buff[0];
 800f1fc:	6822      	ldr	r2, [r4, #0]
      PRINTF("Buffer size: %d\r\n", AppData->BuffSize);
 800f1fe:	4809      	ldr	r0, [pc, #36]	; (800f224 <LORA_RxData+0x90>)
      uint16_t payload = ((uint16_t) AppData->Buff[1] << 8) | AppData->Buff[0];
 800f200:	7853      	ldrb	r3, [r2, #1]
 800f202:	7814      	ldrb	r4, [r2, #0]
 800f204:	021b      	lsls	r3, r3, #8
 800f206:	431c      	orrs	r4, r3
      PRINTF("Buffer size: %d\r\n", AppData->BuffSize);
 800f208:	f7ff fb76 	bl	800e8f8 <TraceSend>
      PRINTF("Test value: %d\r\n", payload);
 800f20c:	0021      	movs	r1, r4
 800f20e:	4806      	ldr	r0, [pc, #24]	; (800f228 <LORA_RxData+0x94>)
 800f210:	f7ff fb72 	bl	800e8f8 <TraceSend>
}
 800f214:	e7e6      	b.n	800f1e4 <LORA_RxData+0x50>
 800f216:	46c0      	nop			; (mov r8, r8)
 800f218:	08011285 	.word	0x08011285
 800f21c:	080112a2 	.word	0x080112a2
 800f220:	080112ac 	.word	0x080112ac
 800f224:	080112b5 	.word	0x080112b5
 800f228:	080112c7 	.word	0x080112c7

0800f22c <LORA_GetBatteryLevel>:
{
 800f22c:	b510      	push	{r4, lr}
  batteryLevelmV = HW_GetBatteryLevel();
 800f22e:	f000 fadb 	bl	800f7e8 <HW_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 800f232:	4a0a      	ldr	r2, [pc, #40]	; (800f25c <LORA_GetBatteryLevel+0x30>)
  batteryLevelmV = HW_GetBatteryLevel();
 800f234:	0003      	movs	r3, r0
    batteryLevel = LORAWAN_MAX_BAT;
 800f236:	20fe      	movs	r0, #254	; 0xfe
  if (batteryLevelmV > VDD_BAT)
 800f238:	4293      	cmp	r3, r2
 800f23a:	d80d      	bhi.n	800f258 <LORA_GetBatteryLevel+0x2c>
  else if (batteryLevelmV < VDD_MIN)
 800f23c:	22e1      	movs	r2, #225	; 0xe1
    batteryLevel = 0;
 800f23e:	2000      	movs	r0, #0
  else if (batteryLevelmV < VDD_MIN)
 800f240:	00d2      	lsls	r2, r2, #3
 800f242:	4293      	cmp	r3, r2
 800f244:	d308      	bcc.n	800f258 <LORA_GetBatteryLevel+0x2c>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 800f246:	2196      	movs	r1, #150	; 0x96
 800f248:	4a05      	ldr	r2, [pc, #20]	; (800f260 <LORA_GetBatteryLevel+0x34>)
 800f24a:	30fe      	adds	r0, #254	; 0xfe
 800f24c:	189b      	adds	r3, r3, r2
 800f24e:	4358      	muls	r0, r3
 800f250:	00c9      	lsls	r1, r1, #3
 800f252:	f7f0 ff77 	bl	8000144 <__udivsi3>
 800f256:	b2c0      	uxtb	r0, r0
}
 800f258:	bd10      	pop	{r4, pc}
 800f25a:	46c0      	nop			; (mov r8, r8)
 800f25c:	00000bb8 	.word	0x00000bb8
 800f260:	fffff8f8 	.word	0xfffff8f8

0800f264 <OnTxTimerEvent>:
{
 800f264:	b510      	push	{r4, lr}
  TimerStart(&TxTimer);
 800f266:	4c03      	ldr	r4, [pc, #12]	; (800f274 <OnTxTimerEvent+0x10>)
 800f268:	1d20      	adds	r0, r4, #4
 800f26a:	f7ff fa3b 	bl	800e6e4 <TimerStart>
  AppProcessRequest = LORA_SET;
 800f26e:	2301      	movs	r3, #1
 800f270:	7723      	strb	r3, [r4, #28]
}
 800f272:	bd10      	pop	{r4, pc}
 800f274:	200013a4 	.word	0x200013a4

0800f278 <Send>:
{
 800f278:	b570      	push	{r4, r5, r6, lr}
  if (LORA_JoinStatus() != LORA_SET)
 800f27a:	f7fe ff73 	bl	800e164 <LORA_JoinStatus>
 800f27e:	0004      	movs	r4, r0
 800f280:	2801      	cmp	r0, #1
 800f282:	d002      	beq.n	800f28a <Send+0x12>
    LORA_Join();
 800f284:	f7fe ff14 	bl	800e0b0 <LORA_Join>
}
 800f288:	bd70      	pop	{r4, r5, r6, pc}
  TimerInit(&TxLedTimer, OnTimerLedEvent);
 800f28a:	4d0e      	ldr	r5, [pc, #56]	; (800f2c4 <Send+0x4c>)
 800f28c:	490e      	ldr	r1, [pc, #56]	; (800f2c8 <Send+0x50>)
 800f28e:	3520      	adds	r5, #32
 800f290:	0028      	movs	r0, r5
 800f292:	f7ff fa1f 	bl	800e6d4 <TimerInit>
  TimerSetValue(&TxLedTimer, 200);
 800f296:	21c8      	movs	r1, #200	; 0xc8
 800f298:	0028      	movs	r0, r5
 800f29a:	f7ff fac7 	bl	800e82c <TimerSetValue>
  LED_On(LED_RED1);
 800f29e:	0020      	movs	r0, r4
 800f2a0:	f7f4 f864 	bl	800336c <BSP_LED_On>
  TimerStart(&TxLedTimer);
 800f2a4:	0028      	movs	r0, r5
 800f2a6:	f7ff fa1d 	bl	800e6e4 <TimerStart>
  batteryLevel = LORA_GetBatteryLevel();                      	/* 1 (very low) to 254 (fully charged) */
 800f2aa:	f7ff ffbf 	bl	800f22c <LORA_GetBatteryLevel>
  AppData.Port = LORAWAN_APP_PORT;
 800f2ae:	2202      	movs	r2, #2
 800f2b0:	4b06      	ldr	r3, [pc, #24]	; (800f2cc <Send+0x54>)
  LORA_send(&AppData, LORAWAN_DEFAULT_CONFIRM_MSG_STATE);
 800f2b2:	2100      	movs	r1, #0
  AppData.Port = LORAWAN_APP_PORT;
 800f2b4:	715a      	strb	r2, [r3, #5]
  AppData.Buff[frameIterator++]     = batteryLevel;
 800f2b6:	681a      	ldr	r2, [r3, #0]
 800f2b8:	7010      	strb	r0, [r2, #0]
  LORA_send(&AppData, LORAWAN_DEFAULT_CONFIRM_MSG_STATE);
 800f2ba:	0018      	movs	r0, r3
  AppData.BuffSize = frameIterator;
 800f2bc:	711c      	strb	r4, [r3, #4]
  LORA_send(&AppData, LORAWAN_DEFAULT_CONFIRM_MSG_STATE);
 800f2be:	f7fe ff61 	bl	800e184 <LORA_send>
 800f2c2:	e7e1      	b.n	800f288 <Send+0x10>
 800f2c4:	200013a4 	.word	0x200013a4
 800f2c8:	0800f189 	.word	0x0800f189
 800f2cc:	2000015c 	.word	0x2000015c

0800f2d0 <main>:
{
 800f2d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  HAL_Init();
 800f2d2:	f7f5 fd0f 	bl	8004cf4 <HAL_Init>
  SystemClock_Config();
 800f2d6:	f000 f91f 	bl	800f518 <SystemClock_Config>
  DBG_Init();
 800f2da:	f7ff fb95 	bl	800ea08 <DBG_Init>
  HW_Init();
 800f2de:	f000 f9cf 	bl	800f680 <HW_Init>
  LPM_SetOffMode(LPM_APPLI_Id, LPM_Disable);
 800f2e2:	2101      	movs	r1, #1
  PRINTF("APP_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__APP_VERSION >> 24), (uint8_t)(__APP_VERSION >> 16), (uint8_t)(__APP_VERSION >> 8), (uint8_t)__APP_VERSION);
 800f2e4:	2500      	movs	r5, #0
  LPM_SetOffMode(LPM_APPLI_Id, LPM_Disable);
 800f2e6:	0008      	movs	r0, r1
 800f2e8:	f7fe ffbe 	bl	800e268 <LPM_SetOffMode>
  PRINTF("APP_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__APP_VERSION >> 24), (uint8_t)(__APP_VERSION >> 16), (uint8_t)(__APP_VERSION >> 8), (uint8_t)__APP_VERSION);
 800f2ec:	002b      	movs	r3, r5
 800f2ee:	2203      	movs	r2, #3
 800f2f0:	2101      	movs	r1, #1
 800f2f2:	481c      	ldr	r0, [pc, #112]	; (800f364 <main+0x94>)
 800f2f4:	9500      	str	r5, [sp, #0]
 800f2f6:	f7ff faff 	bl	800e8f8 <TraceSend>
  PRINTF("MAC_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__LORA_MAC_VERSION >> 24), (uint8_t)(__LORA_MAC_VERSION >> 16), (uint8_t)(__LORA_MAC_VERSION >> 8), (uint8_t)__LORA_MAC_VERSION);
 800f2fa:	2204      	movs	r2, #4
 800f2fc:	2302      	movs	r3, #2
 800f2fe:	0011      	movs	r1, r2
 800f300:	4819      	ldr	r0, [pc, #100]	; (800f368 <main+0x98>)
 800f302:	9500      	str	r5, [sp, #0]
 800f304:	f7ff faf8 	bl	800e8f8 <TraceSend>
  LORA_Init(&LoRaMainCallbacks, &LoRaParamInit);
 800f308:	4818      	ldr	r0, [pc, #96]	; (800f36c <main+0x9c>)
 800f30a:	0001      	movs	r1, r0
 800f30c:	300c      	adds	r0, #12
 800f30e:	3108      	adds	r1, #8
 800f310:	f7fe fde6 	bl	800dee0 <LORA_Init>
  LORA_Join();
 800f314:	f7fe fecc 	bl	800e0b0 <LORA_Join>
    TimerInit(&TxTimer, OnTxTimerEvent);
 800f318:	4c15      	ldr	r4, [pc, #84]	; (800f370 <main+0xa0>)
 800f31a:	4916      	ldr	r1, [pc, #88]	; (800f374 <main+0xa4>)
 800f31c:	1d26      	adds	r6, r4, #4
 800f31e:	0030      	movs	r0, r6
 800f320:	f7ff f9d8 	bl	800e6d4 <TimerInit>
    TimerSetValue(&TxTimer,  APP_TX_DUTYCYCLE);
 800f324:	0030      	movs	r0, r6
 800f326:	4914      	ldr	r1, [pc, #80]	; (800f378 <main+0xa8>)
 800f328:	f7ff fa80 	bl	800e82c <TimerSetValue>
    OnTxTimerEvent(NULL);
 800f32c:	0028      	movs	r0, r5
 800f32e:	f7ff ff99 	bl	800f264 <OnTxTimerEvent>
    if (AppProcessRequest == LORA_SET)
 800f332:	7f23      	ldrb	r3, [r4, #28]
 800f334:	2b01      	cmp	r3, #1
 800f336:	d103      	bne.n	800f340 <main+0x70>
      AppProcessRequest = LORA_RESET;
 800f338:	2000      	movs	r0, #0
 800f33a:	7720      	strb	r0, [r4, #28]
      Send(NULL);
 800f33c:	f7ff ff9c 	bl	800f278 <Send>
    if (LoraMacProcessRequest == LORA_SET)
 800f340:	7823      	ldrb	r3, [r4, #0]
 800f342:	2b01      	cmp	r3, #1
 800f344:	d103      	bne.n	800f34e <main+0x7e>
      LoraMacProcessRequest = LORA_RESET;
 800f346:	2300      	movs	r3, #0
 800f348:	7023      	strb	r3, [r4, #0]
      LoRaMacProcess();
 800f34a:	f7f9 ff97 	bl	800927c <LoRaMacProcess>
  __ASM volatile ("cpsid i" : : : "memory");
 800f34e:	b672      	cpsid	i
    if ((LoraMacProcessRequest != LORA_SET) && (AppProcessRequest != LORA_SET))
 800f350:	7823      	ldrb	r3, [r4, #0]
 800f352:	2b01      	cmp	r3, #1
 800f354:	d004      	beq.n	800f360 <main+0x90>
 800f356:	7f23      	ldrb	r3, [r4, #28]
 800f358:	2b01      	cmp	r3, #1
 800f35a:	d001      	beq.n	800f360 <main+0x90>
      LPM_EnterLowPower();
 800f35c:	f7fe ffc6 	bl	800e2ec <LPM_EnterLowPower>
  __ASM volatile ("cpsie i" : : : "memory");
 800f360:	b662      	cpsie	i
}
 800f362:	e7e6      	b.n	800f332 <main+0x62>
 800f364:	080112d8 	.word	0x080112d8
 800f368:	080112fb 	.word	0x080112fb
 800f36c:	2000015c 	.word	0x2000015c
 800f370:	200013a4 	.word	0x200013a4
 800f374:	0800f265 	.word	0x0800f265
 800f378:	00002710 	.word	0x00002710

0800f37c <HAL_InitTick>:
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Return function status */
  return HAL_OK;
}
 800f37c:	2000      	movs	r0, #0
 800f37e:	4770      	bx	lr

0800f380 <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800f380:	b507      	push	{r0, r1, r2, lr}
 800f382:	9001      	str	r0, [sp, #4]
  HW_RTC_DelayMs(Delay);   /* based on RTC */
 800f384:	9801      	ldr	r0, [sp, #4]
 800f386:	f7ff fd77 	bl	800ee78 <HW_RTC_DelayMs>
}
 800f38a:	bd07      	pop	{r0, r1, r2, pc}

0800f38c <HAL_MspInit>:
  * @brief  Initializes the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
  __HAL_RCC_PWR_CLK_ENABLE();
 800f38c:	2380      	movs	r3, #128	; 0x80
 800f38e:	4a0a      	ldr	r2, [pc, #40]	; (800f3b8 <HAL_MspInit+0x2c>)
 800f390:	055b      	lsls	r3, r3, #21
 800f392:	6b91      	ldr	r1, [r2, #56]	; 0x38
{
 800f394:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800f396:	430b      	orrs	r3, r1
 800f398:	6393      	str	r3, [r2, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 800f39a:	f7f6 f9ed 	bl	8005778 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 800f39e:	f7f6 fa33 	bl	8005808 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 800f3a2:	2308      	movs	r3, #8
 800f3a4:	4a05      	ldr	r2, [pc, #20]	; (800f3bc <HAL_MspInit+0x30>)
 800f3a6:	6811      	ldr	r1, [r2, #0]
 800f3a8:	430b      	orrs	r3, r1
 800f3aa:	6013      	str	r3, [r2, #0]
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 800f3ac:	f7f6 fa22 	bl	80057f4 <HAL_PWREx_EnableFastWakeUp>
#else
  HAL_PWREx_DisableFastWakeUp();
#endif

  HW_GpioInit();
 800f3b0:	f000 f856 	bl	800f460 <HW_GpioInit>
}
 800f3b4:	bd10      	pop	{r4, pc}
 800f3b6:	46c0      	nop			; (mov r8, r8)
 800f3b8:	40021000 	.word	0x40021000
 800f3bc:	40022000 	.word	0x40022000

0800f3c0 <HAL_RTC_MspInit>:
  *        order to modify the RTC Clock source, as consequence RTC registers (including
  *        the backup registers) and RCC_CSR register are set to their reset values.
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 800f3c0:	b500      	push	{lr}
 800f3c2:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800f3c4:	2234      	movs	r2, #52	; 0x34
 800f3c6:	2100      	movs	r1, #0
 800f3c8:	a80b      	add	r0, sp, #44	; 0x2c
 800f3ca:	f000 fc00 	bl	800fbce <memset>
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct = {0};
 800f3ce:	2224      	movs	r2, #36	; 0x24
 800f3d0:	2100      	movs	r1, #0
 800f3d2:	a801      	add	r0, sp, #4
 800f3d4:	f000 fbfb 	bl	800fbce <memset>

  /*##-1- Configue the RTC clock soucre ######################################*/
  /* -a- Enable LSE Oscillator */
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSE;
 800f3d8:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800f3da:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSE;
 800f3dc:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800f3de:	33fc      	adds	r3, #252	; 0xfc
 800f3e0:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800f3e2:	f7f6 fa5b 	bl	800589c <HAL_RCC_OscConfig>
 800f3e6:	2800      	cmp	r0, #0
 800f3e8:	d001      	beq.n	800f3ee <HAL_RTC_MspInit+0x2e>
  {
    Error_Handler();
 800f3ea:	f7ff fb41 	bl	800ea70 <Error_Handler>
  }

  /* -b- Select LSI as RTC clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800f3ee:	2320      	movs	r3, #32
 800f3f0:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800f3f2:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f3f4:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800f3f6:	025b      	lsls	r3, r3, #9
 800f3f8:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f3fa:	f7f6 fdaf 	bl	8005f5c <HAL_RCCEx_PeriphCLKConfig>
 800f3fe:	2800      	cmp	r0, #0
 800f400:	d001      	beq.n	800f406 <HAL_RTC_MspInit+0x46>
  {
    Error_Handler();
 800f402:	f7ff fb35 	bl	800ea70 <Error_Handler>
  }

  /*##-2- Enable the RTC peripheral Clock ####################################*/
  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
 800f406:	2380      	movs	r3, #128	; 0x80
 800f408:	4a07      	ldr	r2, [pc, #28]	; (800f428 <HAL_RTC_MspInit+0x68>)
 800f40a:	02db      	lsls	r3, r3, #11
 800f40c:	6d11      	ldr	r1, [r2, #80]	; 0x50

  /*##-3- Configure the NVIC for RTC Alarm ###################################*/
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 800f40e:	2002      	movs	r0, #2
  __HAL_RCC_RTC_ENABLE();
 800f410:	430b      	orrs	r3, r1
 800f412:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 800f414:	2200      	movs	r2, #0
 800f416:	0011      	movs	r1, r2
 800f418:	f7f5 ffb4 	bl	8005384 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800f41c:	2002      	movs	r0, #2
 800f41e:	f7f5 ffdb 	bl	80053d8 <HAL_NVIC_EnableIRQ>
}
 800f422:	b019      	add	sp, #100	; 0x64
 800f424:	bd00      	pop	{pc}
 800f426:	46c0      	nop			; (mov r8, r8)
 800f428:	40021000 	.word	0x40021000

0800f42c <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800f42c:	b510      	push	{r4, lr}
  TimerIrqHandler();
 800f42e:	f7ff f993 	bl	800e758 <TimerIrqHandler>
}
 800f432:	bd10      	pop	{r4, pc}

0800f434 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800f434:	b510      	push	{r4, lr}
  HW_GPIO_IrqHandler(GPIO_Pin);
 800f436:	f7ff fba5 	bl	800eb84 <HW_GPIO_IrqHandler>
}
 800f43a:	bd10      	pop	{r4, pc}

0800f43c <MSP_GetIRQn>:
  * @brief  Gets IRQ number as a function of the GPIO_Pin.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval IRQ number
  */
IRQn_Type MSP_GetIRQn(uint16_t GPIO_Pin)
{
 800f43c:	0003      	movs	r3, r0
  switch (GPIO_Pin)
 800f43e:	2006      	movs	r0, #6
 800f440:	2b04      	cmp	r3, #4
 800f442:	d005      	beq.n	800f450 <MSP_GetIRQn+0x14>
 800f444:	d805      	bhi.n	800f452 <MSP_GetIRQn+0x16>
 800f446:	3b01      	subs	r3, #1
  {
    case GPIO_PIN_0:
    case GPIO_PIN_1:
      return EXTI0_1_IRQn;
 800f448:	3801      	subs	r0, #1
  switch (GPIO_Pin)
 800f44a:	2b01      	cmp	r3, #1
 800f44c:	d900      	bls.n	800f450 <MSP_GetIRQn+0x14>
    case GPIO_PIN_12:
    case GPIO_PIN_13:
    case GPIO_PIN_14:
    case GPIO_PIN_15:
    default:
      return EXTI4_15_IRQn;
 800f44e:	3002      	adds	r0, #2
  }
}
 800f450:	4770      	bx	lr
  switch (GPIO_Pin)
 800f452:	3b08      	subs	r3, #8
 800f454:	0018      	movs	r0, r3
 800f456:	1e43      	subs	r3, r0, #1
 800f458:	4198      	sbcs	r0, r3
 800f45a:	3006      	adds	r0, #6
 800f45c:	e7f8      	b.n	800f450 <MSP_GetIRQn+0x14>
	...

0800f460 <HW_GpioInit>:
  vcom_IoDeInit();
}


void HW_GpioInit(void)
{
 800f460:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* Configure all GPIO as analog to reduce current consumption on non used IOs */
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f462:	2701      	movs	r7, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800f464:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800f466:	2504      	movs	r5, #4
{
 800f468:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f46a:	2208      	movs	r2, #8
 800f46c:	2100      	movs	r1, #0
 800f46e:	a808      	add	r0, sp, #32
 800f470:	f000 fbad 	bl	800fbce <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800f474:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f476:	4c22      	ldr	r4, [pc, #136]	; (800f500 <HW_GpioInit+0xa0>)

  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  /* All GPIOs except debug pins (SWCLK and SWD) */
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f478:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f47a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f47c:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f47e:	433b      	orrs	r3, r7
 800f480:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f482:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f484:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f486:	403b      	ands	r3, r7
 800f488:	9301      	str	r3, [sp, #4]
 800f48a:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800f48c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f48e:	4333      	orrs	r3, r6
 800f490:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f492:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f494:	4033      	ands	r3, r6
 800f496:	9302      	str	r3, [sp, #8]
 800f498:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800f49a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f49c:	432b      	orrs	r3, r5
 800f49e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f4a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f4a2:	402b      	ands	r3, r5
 800f4a4:	9303      	str	r3, [sp, #12]
 800f4a6:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800f4a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f4aa:	4313      	orrs	r3, r2
 800f4ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f4ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f4b0:	4013      	ands	r3, r2
 800f4b2:	9304      	str	r3, [sp, #16]
 800f4b4:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f4b6:	2303      	movs	r3, #3
 800f4b8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 800f4be:	4b11      	ldr	r3, [pc, #68]	; (800f504 <HW_GpioInit+0xa4>)
 800f4c0:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f4c2:	f7f6 f889 	bl	80055d8 <HAL_GPIO_Init>

  /* All GPIOs */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 800f4c6:	4b10      	ldr	r3, [pc, #64]	; (800f508 <HW_GpioInit+0xa8>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f4c8:	a905      	add	r1, sp, #20
 800f4ca:	4810      	ldr	r0, [pc, #64]	; (800f50c <HW_GpioInit+0xac>)
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 800f4cc:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f4ce:	f7f6 f883 	bl	80055d8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f4d2:	a905      	add	r1, sp, #20
 800f4d4:	480e      	ldr	r0, [pc, #56]	; (800f510 <HW_GpioInit+0xb0>)
 800f4d6:	f7f6 f87f 	bl	80055d8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f4da:	480e      	ldr	r0, [pc, #56]	; (800f514 <HW_GpioInit+0xb4>)
 800f4dc:	a905      	add	r1, sp, #20
 800f4de:	f7f6 f87b 	bl	80055d8 <HAL_GPIO_Init>

  /* Disable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_DISABLE();
  __HAL_RCC_GPIOB_CLK_DISABLE();
  __HAL_RCC_GPIOC_CLK_DISABLE();
  __HAL_RCC_GPIOH_CLK_DISABLE();
 800f4e2:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_DISABLE();
 800f4e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f4e6:	43bb      	bics	r3, r7
 800f4e8:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 800f4ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f4ec:	43b3      	bics	r3, r6
 800f4ee:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 800f4f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f4f2:	43ab      	bics	r3, r5
 800f4f4:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 800f4f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f4f8:	4393      	bics	r3, r2
 800f4fa:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800f4fc:	b00b      	add	sp, #44	; 0x2c
 800f4fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f500:	40021000 	.word	0x40021000
 800f504:	00009fff 	.word	0x00009fff
 800f508:	0000ffff 	.word	0x0000ffff
 800f50c:	50000400 	.word	0x50000400
 800f510:	50000800 	.word	0x50000800
 800f514:	50001c00 	.word	0x50001c00

0800f518 <SystemClock_Config>:
  *            Flash Latency(WS)              = 1
  * @retval None
  */

void SystemClock_Config(void)
{
 800f518:	b500      	push	{lr}
 800f51a:	b095      	sub	sp, #84	; 0x54
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800f51c:	2214      	movs	r2, #20
 800f51e:	2100      	movs	r1, #0
 800f520:	a801      	add	r0, sp, #4
 800f522:	f000 fb54 	bl	800fbce <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800f526:	2220      	movs	r2, #32
 800f528:	2100      	movs	r1, #0
 800f52a:	a808      	add	r0, sp, #32
 800f52c:	f000 fb4f 	bl	800fbce <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
 800f530:	2300      	movs	r3, #0
 800f532:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 800f534:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 800f536:	2380      	movs	r3, #128	; 0x80
 800f538:	031b      	lsls	r3, r3, #12
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800f53a:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 800f53c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 800f53e:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 800f540:	2202      	movs	r2, #2
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800f542:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 800f544:	041b      	lsls	r3, r3, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800f546:	310f      	adds	r1, #15

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800f548:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 800f54a:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800f54c:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 800f54e:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 800f550:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800f552:	f7f6 f9a3 	bl	800589c <HAL_RCC_OscConfig>
 800f556:	2800      	cmp	r0, #0
 800f558:	d001      	beq.n	800f55e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800f55a:	f7ff fa89 	bl	800ea70 <Error_Handler>
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
  __HAL_RCC_PWR_CLK_ENABLE();
 800f55e:	2380      	movs	r3, #128	; 0x80
 800f560:	4a11      	ldr	r2, [pc, #68]	; (800f5a8 <SystemClock_Config+0x90>)
 800f562:	055b      	lsls	r3, r3, #21
 800f564:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800f566:	430b      	orrs	r3, r1
 800f568:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800f56a:	4b10      	ldr	r3, [pc, #64]	; (800f5ac <SystemClock_Config+0x94>)
 800f56c:	4910      	ldr	r1, [pc, #64]	; (800f5b0 <SystemClock_Config+0x98>)
 800f56e:	681a      	ldr	r2, [r3, #0]
 800f570:	4011      	ands	r1, r2
 800f572:	2280      	movs	r2, #128	; 0x80
 800f574:	0112      	lsls	r2, r2, #4
 800f576:	430a      	orrs	r2, r1

  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 800f578:	2110      	movs	r1, #16
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800f57a:	601a      	str	r2, [r3, #0]
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 800f57c:	6858      	ldr	r0, [r3, #4]
 800f57e:	0002      	movs	r2, r0
 800f580:	400a      	ands	r2, r1
 800f582:	4208      	tst	r0, r1
 800f584:	d1fa      	bne.n	800f57c <SystemClock_Config+0x64>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800f586:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800f588:	2101      	movs	r1, #1
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800f58a:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800f58c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f58e:	3b0c      	subs	r3, #12
 800f590:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800f592:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800f594:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800f596:	9205      	str	r2, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800f598:	f7f6 fc08 	bl	8005dac <HAL_RCC_ClockConfig>
 800f59c:	2800      	cmp	r0, #0
 800f59e:	d001      	beq.n	800f5a4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800f5a0:	f7ff fa66 	bl	800ea70 <Error_Handler>
  }
}
 800f5a4:	b015      	add	sp, #84	; 0x54
 800f5a6:	bd00      	pop	{pc}
 800f5a8:	40021000 	.word	0x40021000
 800f5ac:	40007000 	.word	0x40007000
 800f5b0:	ffffe7ff 	.word	0xffffe7ff

0800f5b4 <HW_GetRandomSeed>:
  * @param None
  * @retval see
  */
uint32_t HW_GetRandomSeed(void)
{
  return ((*(uint32_t *)ID1) ^ (*(uint32_t *)ID2) ^ (*(uint32_t *)ID3));
 800f5b4:	4b04      	ldr	r3, [pc, #16]	; (800f5c8 <HW_GetRandomSeed+0x14>)
 800f5b6:	6818      	ldr	r0, [r3, #0]
 800f5b8:	4b04      	ldr	r3, [pc, #16]	; (800f5cc <HW_GetRandomSeed+0x18>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	4058      	eors	r0, r3
 800f5be:	4b04      	ldr	r3, [pc, #16]	; (800f5d0 <HW_GetRandomSeed+0x1c>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	4058      	eors	r0, r3
}
 800f5c4:	4770      	bx	lr
 800f5c6:	46c0      	nop			; (mov r8, r8)
 800f5c8:	1ff80050 	.word	0x1ff80050
 800f5cc:	1ff80054 	.word	0x1ff80054
 800f5d0:	1ff80064 	.word	0x1ff80064

0800f5d4 <HW_GetUniqueId>:
  * @param unique ID
  * @retval none
  */
void HW_GetUniqueId(uint8_t *id)
{
  id[7] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 24;
 800f5d4:	4911      	ldr	r1, [pc, #68]	; (800f61c <HW_GetUniqueId+0x48>)
 800f5d6:	4a12      	ldr	r2, [pc, #72]	; (800f620 <HW_GetUniqueId+0x4c>)
 800f5d8:	680b      	ldr	r3, [r1, #0]
{
 800f5da:	b510      	push	{r4, lr}
  id[7] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 24;
 800f5dc:	6814      	ldr	r4, [r2, #0]
 800f5de:	191b      	adds	r3, r3, r4
 800f5e0:	0e1b      	lsrs	r3, r3, #24
 800f5e2:	71c3      	strb	r3, [r0, #7]
  id[6] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 16;
 800f5e4:	6814      	ldr	r4, [r2, #0]
 800f5e6:	680b      	ldr	r3, [r1, #0]
 800f5e8:	191b      	adds	r3, r3, r4
 800f5ea:	0c1b      	lsrs	r3, r3, #16
 800f5ec:	7183      	strb	r3, [r0, #6]
  id[5] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 8;
 800f5ee:	6814      	ldr	r4, [r2, #0]
 800f5f0:	680b      	ldr	r3, [r1, #0]
 800f5f2:	191b      	adds	r3, r3, r4
 800f5f4:	0a1b      	lsrs	r3, r3, #8
 800f5f6:	7143      	strb	r3, [r0, #5]
  id[4] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3));
 800f5f8:	6812      	ldr	r2, [r2, #0]
 800f5fa:	680b      	ldr	r3, [r1, #0]
 800f5fc:	189b      	adds	r3, r3, r2
 800f5fe:	7103      	strb	r3, [r0, #4]
  id[3] = ((*(uint32_t *)ID2)) >> 24;
 800f600:	4b08      	ldr	r3, [pc, #32]	; (800f624 <HW_GetUniqueId+0x50>)
 800f602:	681a      	ldr	r2, [r3, #0]
 800f604:	0e12      	lsrs	r2, r2, #24
 800f606:	70c2      	strb	r2, [r0, #3]
  id[2] = ((*(uint32_t *)ID2)) >> 16;
 800f608:	681a      	ldr	r2, [r3, #0]
 800f60a:	0c12      	lsrs	r2, r2, #16
 800f60c:	7082      	strb	r2, [r0, #2]
  id[1] = ((*(uint32_t *)ID2)) >> 8;
 800f60e:	681a      	ldr	r2, [r3, #0]
 800f610:	0a12      	lsrs	r2, r2, #8
 800f612:	7042      	strb	r2, [r0, #1]
  id[0] = ((*(uint32_t *)ID2));
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	7003      	strb	r3, [r0, #0]
}
 800f618:	bd10      	pop	{r4, pc}
 800f61a:	46c0      	nop			; (mov r8, r8)
 800f61c:	1ff80050 	.word	0x1ff80050
 800f620:	1ff80064 	.word	0x1ff80064
 800f624:	1ff80054 	.word	0x1ff80054

0800f628 <HW_AdcInit>:
  * @param none
  * @retval none
  */
void HW_AdcInit(void)
{
  if (AdcInitialized == false)
 800f628:	4812      	ldr	r0, [pc, #72]	; (800f674 <HW_AdcInit+0x4c>)
{
 800f62a:	b510      	push	{r4, lr}
  if (AdcInitialized == false)
 800f62c:	7843      	ldrb	r3, [r0, #1]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d11f      	bne.n	800f672 <HW_AdcInit+0x4a>
  {
    AdcInitialized = true;
 800f632:	2201      	movs	r2, #1
    hadc.Init.LowPowerAutoPowerOff  = DISABLE;
    hadc.Init.LowPowerFrequencyMode = ENABLE;
    hadc.Init.LowPowerAutoWait      = DISABLE;

    hadc.Init.Resolution            = ADC_RESOLUTION_12B;
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 800f634:	2107      	movs	r1, #7
    hadc.Init.LowPowerFrequencyMode = ENABLE;
 800f636:	6382      	str	r2, [r0, #56]	; 0x38
    hadc.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 800f638:	6142      	str	r2, [r0, #20]
    AdcInitialized = true;
 800f63a:	7042      	strb	r2, [r0, #1]
    hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
    hadc.Init.ContinuousConvMode    = DISABLE;
    hadc.Init.DiscontinuousConvMode = DISABLE;
    hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
    hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 800f63c:	3203      	adds	r2, #3
 800f63e:	6182      	str	r2, [r0, #24]
    hadc.Init.DMAContinuousRequests = DISABLE;
 800f640:	0002      	movs	r2, r0
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 800f642:	63c1      	str	r1, [r0, #60]	; 0x3c
    hadc.Instance  = ADC1;
 800f644:	490c      	ldr	r1, [pc, #48]	; (800f678 <HW_AdcInit+0x50>)
    hadc.Init.DMAContinuousRequests = DISABLE;
 800f646:	3230      	adds	r2, #48	; 0x30
    hadc.Instance  = ADC1;
 800f648:	6041      	str	r1, [r0, #4]
    hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 800f64a:	2180      	movs	r1, #128	; 0x80
    hadc.Init.OversamplingMode      = DISABLE;
 800f64c:	6403      	str	r3, [r0, #64]	; 0x40
    hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800f64e:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc.Init.Resolution            = ADC_RESOLUTION_12B;
 800f650:	60c3      	str	r3, [r0, #12]
    hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 800f652:	6103      	str	r3, [r0, #16]
    hadc.Init.LowPowerAutoWait      = DISABLE;
 800f654:	61c3      	str	r3, [r0, #28]
    hadc.Init.LowPowerAutoPowerOff  = DISABLE;
 800f656:	6203      	str	r3, [r0, #32]
    hadc.Init.ContinuousConvMode    = DISABLE;
 800f658:	8483      	strh	r3, [r0, #36]	; 0x24
    hadc.Init.DMAContinuousRequests = DISABLE;
 800f65a:	7013      	strb	r3, [r2, #0]

    ADCCLK_ENABLE();
 800f65c:	2380      	movs	r3, #128	; 0x80
 800f65e:	4a07      	ldr	r2, [pc, #28]	; (800f67c <HW_AdcInit+0x54>)
    hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 800f660:	0609      	lsls	r1, r1, #24
 800f662:	6081      	str	r1, [r0, #8]
    ADCCLK_ENABLE();
 800f664:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800f666:	009b      	lsls	r3, r3, #2
 800f668:	430b      	orrs	r3, r1
 800f66a:	6353      	str	r3, [r2, #52]	; 0x34


    HAL_ADC_Init(&hadc);
 800f66c:	3004      	adds	r0, #4
 800f66e:	f7f5 fc27 	bl	8004ec0 <HAL_ADC_Init>

  }
}
 800f672:	bd10      	pop	{r4, pc}
 800f674:	2000141c 	.word	0x2000141c
 800f678:	40012400 	.word	0x40012400
 800f67c:	40021000 	.word	0x40021000

0800f680 <HW_Init>:
{
 800f680:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (McuInitialized == false)
 800f682:	4c10      	ldr	r4, [pc, #64]	; (800f6c4 <HW_Init+0x44>)
 800f684:	7825      	ldrb	r5, [r4, #0]
 800f686:	2d00      	cmp	r5, #0
 800f688:	d11b      	bne.n	800f6c2 <HW_Init+0x42>
    HW_AdcInit();
 800f68a:	f7ff ffcd 	bl	800f628 <HW_AdcInit>
    Radio.IoInit();
 800f68e:	4b0e      	ldr	r3, [pc, #56]	; (800f6c8 <HW_Init+0x48>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	9301      	str	r3, [sp, #4]
 800f694:	4798      	blx	r3
    HW_SPI_Init();
 800f696:	f7ff fce9 	bl	800f06c <HW_SPI_Init>
    HW_RTC_Init();
 800f69a:	f7ff fc0d 	bl	800eeb8 <HW_RTC_Init>
    TraceInit();
 800f69e:	f7ff f919 	bl	800e8d4 <TraceInit>
    BSP_sensor_Init();
 800f6a2:	f7ff f9af 	bl	800ea04 <BSP_sensor_Init>
    BSP_LED_Init(LED1);
 800f6a6:	0028      	movs	r0, r5
 800f6a8:	f7f3 fe1e 	bl	80032e8 <BSP_LED_Init>
    BSP_LED_Init(LED2);
 800f6ac:	2001      	movs	r0, #1
 800f6ae:	f7f3 fe1b 	bl	80032e8 <BSP_LED_Init>
    BSP_LED_Init(LED3);
 800f6b2:	2002      	movs	r0, #2
 800f6b4:	f7f3 fe18 	bl	80032e8 <BSP_LED_Init>
    BSP_LED_Init(LED4);
 800f6b8:	2003      	movs	r0, #3
 800f6ba:	f7f3 fe15 	bl	80032e8 <BSP_LED_Init>
    McuInitialized = true;
 800f6be:	2301      	movs	r3, #1
 800f6c0:	7023      	strb	r3, [r4, #0]
}
 800f6c2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800f6c4:	2000141c 	.word	0x2000141c
 800f6c8:	0801074c 	.word	0x0801074c

0800f6cc <HW_AdcDeInit>:
  * @param none
  * @retval none
  */
void HW_AdcDeInit(void)
{
  AdcInitialized = false;
 800f6cc:	2300      	movs	r3, #0
{
 800f6ce:	b510      	push	{r4, lr}
  AdcInitialized = false;
 800f6d0:	4802      	ldr	r0, [pc, #8]	; (800f6dc <HW_AdcDeInit+0x10>)
 800f6d2:	7043      	strb	r3, [r0, #1]
  HAL_ADC_DeInit(&hadc);
 800f6d4:	3004      	adds	r0, #4
 800f6d6:	f7f5 fccf 	bl	8005078 <HAL_ADC_DeInit>
}
 800f6da:	bd10      	pop	{r4, pc}
 800f6dc:	2000141c 	.word	0x2000141c

0800f6e0 <HW_AdcReadChannel>:
  * @brief This function De-initializes the ADC
  * @param Channel
  * @retval Value
  */
uint16_t HW_AdcReadChannel(uint32_t Channel)
{
 800f6e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  ADC_ChannelConfTypeDef adcConf = {0};
 800f6e2:	2208      	movs	r2, #8
 800f6e4:	2100      	movs	r1, #0
{
 800f6e6:	0007      	movs	r7, r0
  ADC_ChannelConfTypeDef adcConf = {0};
 800f6e8:	4668      	mov	r0, sp
 800f6ea:	f000 fa70 	bl	800fbce <memset>

  uint16_t adcData = 0;

  HW_AdcInit();
 800f6ee:	f7ff ff9b 	bl	800f628 <HW_AdcInit>
  uint16_t adcData = 0;
 800f6f2:	2000      	movs	r0, #0

  if (AdcInitialized == true)
 800f6f4:	4e1d      	ldr	r6, [pc, #116]	; (800f76c <HW_AdcReadChannel+0x8c>)
 800f6f6:	7873      	ldrb	r3, [r6, #1]
 800f6f8:	4283      	cmp	r3, r0
 800f6fa:	d036      	beq.n	800f76a <HW_AdcReadChannel+0x8a>
  {
    /* wait the the Vrefint used by adc is set */
    while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 800f6fc:	2308      	movs	r3, #8
 800f6fe:	491c      	ldr	r1, [pc, #112]	; (800f770 <HW_AdcReadChannel+0x90>)
 800f700:	684a      	ldr	r2, [r1, #4]
 800f702:	421a      	tst	r2, r3
 800f704:	d0fc      	beq.n	800f700 <HW_AdcReadChannel+0x20>

    ADCCLK_ENABLE();
 800f706:	2380      	movs	r3, #128	; 0x80
 800f708:	4d1a      	ldr	r5, [pc, #104]	; (800f774 <HW_AdcReadChannel+0x94>)
 800f70a:	009b      	lsls	r3, r3, #2
 800f70c:	6b6a      	ldr	r2, [r5, #52]	; 0x34

    /*calibrate ADC if any calibraiton hardware*/
    HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 800f70e:	1d34      	adds	r4, r6, #4
    ADCCLK_ENABLE();
 800f710:	4313      	orrs	r3, r2
    HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 800f712:	2100      	movs	r1, #0
    ADCCLK_ENABLE();
 800f714:	636b      	str	r3, [r5, #52]	; 0x34
    HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 800f716:	0020      	movs	r0, r4
 800f718:	f7f5 fde4 	bl	80052e4 <HAL_ADCEx_Calibration_Start>

    /* Deselects all channels*/
    adcConf.Channel = ADC_CHANNEL_MASK;
 800f71c:	4b16      	ldr	r3, [pc, #88]	; (800f778 <HW_AdcReadChannel+0x98>)
    adcConf.Rank = ADC_RANK_NONE;
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 800f71e:	4669      	mov	r1, sp
    adcConf.Channel = ADC_CHANNEL_MASK;
 800f720:	9300      	str	r3, [sp, #0]
    adcConf.Rank = ADC_RANK_NONE;
 800f722:	4b16      	ldr	r3, [pc, #88]	; (800f77c <HW_AdcReadChannel+0x9c>)
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 800f724:	0020      	movs	r0, r4
    adcConf.Rank = ADC_RANK_NONE;
 800f726:	9301      	str	r3, [sp, #4]
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 800f728:	f7f5 fd88 	bl	800523c <HAL_ADC_ConfigChannel>

    /* configure adc channel */
    adcConf.Channel = Channel;
    adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 800f72c:	2380      	movs	r3, #128	; 0x80
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 800f72e:	4669      	mov	r1, sp
    adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 800f730:	015b      	lsls	r3, r3, #5
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 800f732:	0020      	movs	r0, r4
    adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 800f734:	9301      	str	r3, [sp, #4]
    adcConf.Channel = Channel;
 800f736:	9700      	str	r7, [sp, #0]
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 800f738:	f7f5 fd80 	bl	800523c <HAL_ADC_ConfigChannel>

    /* Start the conversion process */
    HAL_ADC_Start(&hadc);
 800f73c:	0020      	movs	r0, r4
 800f73e:	f7f5 fcef 	bl	8005120 <HAL_ADC_Start>

    /* Wait for the end of conversion */
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800f742:	2101      	movs	r1, #1
 800f744:	0020      	movs	r0, r4
 800f746:	4249      	negs	r1, r1
 800f748:	f7f5 fd16 	bl	8005178 <HAL_ADC_PollForConversion>

    /* Get the converted value of regular channel */
    adcData = HAL_ADC_GetValue(&hadc);
 800f74c:	0020      	movs	r0, r4
 800f74e:	f7f5 fd71 	bl	8005234 <HAL_ADC_GetValue>

    __HAL_ADC_DISABLE(&hadc) ;
 800f752:	2202      	movs	r2, #2
 800f754:	6873      	ldr	r3, [r6, #4]
    adcData = HAL_ADC_GetValue(&hadc);
 800f756:	b280      	uxth	r0, r0
    __HAL_ADC_DISABLE(&hadc) ;
 800f758:	6899      	ldr	r1, [r3, #8]
 800f75a:	430a      	orrs	r2, r1
 800f75c:	609a      	str	r2, [r3, #8]
 800f75e:	2203      	movs	r2, #3
 800f760:	601a      	str	r2, [r3, #0]

    ADCCLK_DISABLE();
 800f762:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800f764:	4a06      	ldr	r2, [pc, #24]	; (800f780 <HW_AdcReadChannel+0xa0>)
 800f766:	4013      	ands	r3, r2
 800f768:	636b      	str	r3, [r5, #52]	; 0x34
  }
  return adcData;
}
 800f76a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f76c:	2000141c 	.word	0x2000141c
 800f770:	40007000 	.word	0x40007000
 800f774:	40021000 	.word	0x40021000
 800f778:	0007ffff 	.word	0x0007ffff
 800f77c:	00001001 	.word	0x00001001
 800f780:	fffffdff 	.word	0xfffffdff

0800f784 <HW_GetTemperatureLevel>:
{
 800f784:	b570      	push	{r4, r5, r6, lr}
  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_VREFINT);
 800f786:	4812      	ldr	r0, [pc, #72]	; (800f7d0 <HW_GetTemperatureLevel+0x4c>)
 800f788:	f7ff ffaa 	bl	800f6e0 <HW_AdcReadChannel>
    batteryLevelmV = 0;
 800f78c:	2400      	movs	r4, #0
  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_VREFINT);
 800f78e:	0001      	movs	r1, r0
  if (measuredLevel == 0)
 800f790:	42a0      	cmp	r0, r4
 800f792:	d006      	beq.n	800f7a2 <HW_GetTemperatureLevel+0x1e>
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 800f794:	4b0f      	ldr	r3, [pc, #60]	; (800f7d4 <HW_GetTemperatureLevel+0x50>)
 800f796:	4810      	ldr	r0, [pc, #64]	; (800f7d8 <HW_GetTemperatureLevel+0x54>)
 800f798:	881b      	ldrh	r3, [r3, #0]
 800f79a:	4358      	muls	r0, r3
 800f79c:	f7f0 fcd2 	bl	8000144 <__udivsi3>
 800f7a0:	0004      	movs	r4, r0
  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_TEMPSENSOR);
 800f7a2:	480e      	ldr	r0, [pc, #56]	; (800f7dc <HW_GetTemperatureLevel+0x58>)
 800f7a4:	f7ff ff9c 	bl	800f6e0 <HW_AdcReadChannel>
  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 800f7a8:	4b0d      	ldr	r3, [pc, #52]	; (800f7e0 <HW_GetTemperatureLevel+0x5c>)
 800f7aa:	4360      	muls	r0, r4
 800f7ac:	490a      	ldr	r1, [pc, #40]	; (800f7d8 <HW_GetTemperatureLevel+0x54>)
 800f7ae:	881d      	ldrh	r5, [r3, #0]
 800f7b0:	f7f0 fcc8 	bl	8000144 <__udivsi3>
 800f7b4:	1b43      	subs	r3, r0, r5
 800f7b6:	2050      	movs	r0, #80	; 0x50
 800f7b8:	4358      	muls	r0, r3
 800f7ba:	4b0a      	ldr	r3, [pc, #40]	; (800f7e4 <HW_GetTemperatureLevel+0x60>)
 800f7bc:	0200      	lsls	r0, r0, #8
 800f7be:	8819      	ldrh	r1, [r3, #0]
 800f7c0:	1b49      	subs	r1, r1, r5
 800f7c2:	f7f0 fd49 	bl	8000258 <__divsi3>
 800f7c6:	23f0      	movs	r3, #240	; 0xf0
 800f7c8:	015b      	lsls	r3, r3, #5
 800f7ca:	18c0      	adds	r0, r0, r3
  return (uint16_t) temperatureDegreeC;
 800f7cc:	b280      	uxth	r0, r0
}
 800f7ce:	bd70      	pop	{r4, r5, r6, pc}
 800f7d0:	44020000 	.word	0x44020000
 800f7d4:	1ff80078 	.word	0x1ff80078
 800f7d8:	00000bb8 	.word	0x00000bb8
 800f7dc:	48040000 	.word	0x48040000
 800f7e0:	1ff8007a 	.word	0x1ff8007a
 800f7e4:	1ff8007e 	.word	0x1ff8007e

0800f7e8 <HW_GetBatteryLevel>:
{
 800f7e8:	b510      	push	{r4, lr}
  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_VREFINT);
 800f7ea:	4807      	ldr	r0, [pc, #28]	; (800f808 <HW_GetBatteryLevel+0x20>)
 800f7ec:	f7ff ff78 	bl	800f6e0 <HW_AdcReadChannel>
 800f7f0:	0001      	movs	r1, r0
    batteryLevelmV = 0;
 800f7f2:	2000      	movs	r0, #0
  if (measuredLevel == 0)
 800f7f4:	4281      	cmp	r1, r0
 800f7f6:	d005      	beq.n	800f804 <HW_GetBatteryLevel+0x1c>
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 800f7f8:	4b04      	ldr	r3, [pc, #16]	; (800f80c <HW_GetBatteryLevel+0x24>)
 800f7fa:	4805      	ldr	r0, [pc, #20]	; (800f810 <HW_GetBatteryLevel+0x28>)
 800f7fc:	881b      	ldrh	r3, [r3, #0]
 800f7fe:	4358      	muls	r0, r3
 800f800:	f7f0 fca0 	bl	8000144 <__udivsi3>
  return batteryLevelmV;
 800f804:	b280      	uxth	r0, r0
}
 800f806:	bd10      	pop	{r4, pc}
 800f808:	44020000 	.word	0x44020000
 800f80c:	1ff80078 	.word	0x1ff80078
 800f810:	00000bb8 	.word	0x00000bb8

0800f814 <LPM_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void LPM_EnterStopMode(void)
{
 800f814:	b530      	push	{r4, r5, lr}
 800f816:	b087      	sub	sp, #28
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f818:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f81c:	b672      	cpsid	i
  HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 800f81e:	24a0      	movs	r4, #160	; 0xa0
  GPIO_InitTypeDef initStruct = {0};
 800f820:	2214      	movs	r2, #20
 800f822:	2100      	movs	r1, #0
 800f824:	a801      	add	r0, sp, #4
 800f826:	f000 f9d2 	bl	800fbce <memset>
  initStruct.Mode = GPIO_MODE_ANALOG;
 800f82a:	2303      	movs	r3, #3
  HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 800f82c:	05e4      	lsls	r4, r4, #23
 800f82e:	0020      	movs	r0, r4
 800f830:	aa01      	add	r2, sp, #4
 800f832:	2180      	movs	r1, #128	; 0x80
  initStruct.Mode = GPIO_MODE_ANALOG;
 800f834:	9302      	str	r3, [sp, #8]
  HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 800f836:	f7ff f93f 	bl	800eab8 <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 800f83a:	0020      	movs	r0, r4
 800f83c:	aa01      	add	r2, sp, #4
 800f83e:	2140      	movs	r1, #64	; 0x40
 800f840:	f7ff f93a 	bl	800eab8 <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 800f844:	aa01      	add	r2, sp, #4
 800f846:	2108      	movs	r1, #8
 800f848:	480e      	ldr	r0, [pc, #56]	; (800f884 <LPM_EnterStopMode+0x70>)
 800f84a:	f7ff f935 	bl	800eab8 <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 800f84e:	2180      	movs	r1, #128	; 0x80
 800f850:	aa01      	add	r2, sp, #4
 800f852:	0020      	movs	r0, r4
 800f854:	0209      	lsls	r1, r1, #8
 800f856:	f7ff f92f 	bl	800eab8 <HW_GPIO_Init>
  Radio.IoDeInit();
 800f85a:	4b0b      	ldr	r3, [pc, #44]	; (800f888 <LPM_EnterStopMode+0x74>)
 800f85c:	685b      	ldr	r3, [r3, #4]
 800f85e:	4798      	blx	r3
  vcom_IoDeInit();
 800f860:	f000 f962 	bl	800fb28 <vcom_IoDeInit>

  DISABLE_IRQ();

  HW_IoDeInit();

  HW_AdcDeInit();
 800f864:	f7ff ff32 	bl	800f6cc <HW_AdcDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 800f868:	2304      	movs	r3, #4
 800f86a:	4a08      	ldr	r2, [pc, #32]	; (800f88c <LPM_EnterStopMode+0x78>)
 800f86c:	6811      	ldr	r1, [r2, #0]
 800f86e:	430b      	orrs	r3, r1
 800f870:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f872:	f385 8810 	msr	PRIMASK, r5

  RESTORE_PRIMASK();

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800f876:	2101      	movs	r1, #1
 800f878:	0008      	movs	r0, r1
 800f87a:	f7f5 ff9f 	bl	80057bc <HAL_PWR_EnterSTOPMode>
}
 800f87e:	b007      	add	sp, #28
 800f880:	bd30      	pop	{r4, r5, pc}
 800f882:	46c0      	nop			; (mov r8, r8)
 800f884:	50000400 	.word	0x50000400
 800f888:	0801074c 	.word	0x0801074c
 800f88c:	40007000 	.word	0x40007000

0800f890 <LPM_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void LPM_ExitStopMode(void)
{
 800f890:	b513      	push	{r0, r1, r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f892:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f896:	b672      	cpsid	i

  DISABLE_IRQ();

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 800f898:	2201      	movs	r2, #1
 800f89a:	4b13      	ldr	r3, [pc, #76]	; (800f8e8 <LPM_ExitStopMode+0x58>)
 800f89c:	6819      	ldr	r1, [r3, #0]
 800f89e:	430a      	orrs	r2, r1
 800f8a0:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 800f8a2:	2204      	movs	r2, #4
 800f8a4:	6819      	ldr	r1, [r3, #0]
 800f8a6:	4211      	tst	r1, r2
 800f8a8:	d0fc      	beq.n	800f8a4 <LPM_ExitStopMode+0x14>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 800f8aa:	2280      	movs	r2, #128	; 0x80
 800f8ac:	6819      	ldr	r1, [r3, #0]
 800f8ae:	0452      	lsls	r2, r2, #17
 800f8b0:	430a      	orrs	r2, r1
 800f8b2:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 800f8b4:	2280      	movs	r2, #128	; 0x80
 800f8b6:	0492      	lsls	r2, r2, #18
 800f8b8:	6819      	ldr	r1, [r3, #0]
 800f8ba:	4211      	tst	r1, r2
 800f8bc:	d0fc      	beq.n	800f8b8 <LPM_ExitStopMode+0x28>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 800f8be:	2203      	movs	r2, #3
 800f8c0:	68d9      	ldr	r1, [r3, #12]
 800f8c2:	430a      	orrs	r2, r1

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 800f8c4:	210c      	movs	r1, #12
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 800f8c6:	60da      	str	r2, [r3, #12]
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 800f8c8:	68da      	ldr	r2, [r3, #12]
 800f8ca:	400a      	ands	r2, r1
 800f8cc:	2a0c      	cmp	r2, #12
 800f8ce:	d1fb      	bne.n	800f8c8 <LPM_ExitStopMode+0x38>
  HW_SPI_IoInit();
 800f8d0:	f7ff fb9e 	bl	800f010 <HW_SPI_IoInit>
  Radio.IoInit();
 800f8d4:	4b05      	ldr	r3, [pc, #20]	; (800f8ec <LPM_ExitStopMode+0x5c>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	9301      	str	r3, [sp, #4]
 800f8da:	4798      	blx	r3
  vcom_IoInit();
 800f8dc:	f000 f8a2 	bl	800fa24 <vcom_IoInit>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f8e0:	f384 8810 	msr	PRIMASK, r4

  /*initilizes the peripherals*/
  HW_IoInit();

  RESTORE_PRIMASK();
}
 800f8e4:	bd13      	pop	{r0, r1, r4, pc}
 800f8e6:	46c0      	nop			; (mov r8, r8)
 800f8e8:	40021000 	.word	0x40021000
 800f8ec:	0801074c 	.word	0x0801074c

0800f8f0 <LPM_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void LPM_EnterSleepMode(void)
{
 800f8f0:	b510      	push	{r4, lr}
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800f8f2:	2101      	movs	r1, #1
 800f8f4:	2000      	movs	r0, #0
 800f8f6:	f7f5 ff47 	bl	8005788 <HAL_PWR_EnterSLEEPMode>
}
 800f8fa:	bd10      	pop	{r4, pc}

0800f8fc <NMI_Handler>:
  * @retval None
  */

void NMI_Handler(void)
{
}
 800f8fc:	4770      	bx	lr

0800f8fe <HardFault_Handler>:

void HardFault_Handler(void)
{
  while (1)
  {
    __NOP();
 800f8fe:	46c0      	nop			; (mov r8, r8)
  while (1)
 800f900:	e7fd      	b.n	800f8fe <HardFault_Handler>

0800f902 <SVC_Handler>:
 800f902:	4770      	bx	lr

0800f904 <PendSV_Handler>:
 800f904:	4770      	bx	lr

0800f906 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800f906:	b510      	push	{r4, lr}
  HAL_IncTick();
 800f908:	f7f5 fa08 	bl	8004d1c <HAL_IncTick>
}
 800f90c:	bd10      	pop	{r4, pc}

0800f90e <USART2_IRQHandler>:
  */
/*void PPP_IRQHandler(void)
{
}*/
void USARTx_IRQHandler(void)
{
 800f90e:	b510      	push	{r4, lr}
  vcom_IRQHandler();
 800f910:	f000 f880 	bl	800fa14 <vcom_IRQHandler>
}
 800f914:	bd10      	pop	{r4, pc}

0800f916 <DMA1_Channel4_5_6_7_IRQHandler>:

void USARTx_DMA_TX_IRQHandler(void)
{
 800f916:	b510      	push	{r4, lr}
  vcom_DMA_TX_IRQHandler();
 800f918:	f000 f874 	bl	800fa04 <vcom_DMA_TX_IRQHandler>
}
 800f91c:	bd10      	pop	{r4, pc}

0800f91e <RTC_IRQHandler>:

void RTC_IRQHandler(void)
{
 800f91e:	b510      	push	{r4, lr}
  HW_RTC_IrqHandler();
 800f920:	f7ff fa8a 	bl	800ee38 <HW_RTC_IrqHandler>
}
 800f924:	bd10      	pop	{r4, pc}

0800f926 <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler(void)
{
 800f926:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800f928:	2001      	movs	r0, #1
 800f92a:	f7f5 ff19 	bl	8005760 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800f92e:	2002      	movs	r0, #2
 800f930:	f7f5 ff16 	bl	8005760 <HAL_GPIO_EXTI_IRQHandler>
}
 800f934:	bd10      	pop	{r4, pc}

0800f936 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 800f936:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800f938:	2004      	movs	r0, #4
 800f93a:	f7f5 ff11 	bl	8005760 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800f93e:	2008      	movs	r0, #8
 800f940:	f7f5 ff0e 	bl	8005760 <HAL_GPIO_EXTI_IRQHandler>
}
 800f944:	bd10      	pop	{r4, pc}

0800f946 <EXTI4_15_IRQHandler>:


void EXTI4_15_IRQHandler(void)
{
 800f946:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800f948:	2010      	movs	r0, #16
 800f94a:	f7f5 ff09 	bl	8005760 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800f94e:	2020      	movs	r0, #32
 800f950:	f7f5 ff06 	bl	8005760 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800f954:	2040      	movs	r0, #64	; 0x40
 800f956:	f7f5 ff03 	bl	8005760 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800f95a:	2080      	movs	r0, #128	; 0x80
 800f95c:	f7f5 ff00 	bl	8005760 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800f960:	2080      	movs	r0, #128	; 0x80
 800f962:	0040      	lsls	r0, r0, #1
 800f964:	f7f5 fefc 	bl	8005760 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800f968:	2080      	movs	r0, #128	; 0x80
 800f96a:	0080      	lsls	r0, r0, #2
 800f96c:	f7f5 fef8 	bl	8005760 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800f970:	2080      	movs	r0, #128	; 0x80
 800f972:	00c0      	lsls	r0, r0, #3
 800f974:	f7f5 fef4 	bl	8005760 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800f978:	2080      	movs	r0, #128	; 0x80
 800f97a:	0100      	lsls	r0, r0, #4
 800f97c:	f7f5 fef0 	bl	8005760 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800f980:	2080      	movs	r0, #128	; 0x80
 800f982:	0140      	lsls	r0, r0, #5
 800f984:	f7f5 feec 	bl	8005760 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800f988:	2080      	movs	r0, #128	; 0x80
 800f98a:	0180      	lsls	r0, r0, #6
 800f98c:	f7f5 fee8 	bl	8005760 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800f990:	2080      	movs	r0, #128	; 0x80
 800f992:	01c0      	lsls	r0, r0, #7
 800f994:	f7f5 fee4 	bl	8005760 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800f998:	2080      	movs	r0, #128	; 0x80
 800f99a:	0200      	lsls	r0, r0, #8
 800f99c:	f7f5 fee0 	bl	8005760 <HAL_GPIO_EXTI_IRQHandler>
}
 800f9a0:	bd10      	pop	{r4, pc}
	...

0800f9a4 <vcom_Init>:
/* Functions Definition ------------------------------------------------------*/
void vcom_Init(void (*TxCb)(void))
{

  /*Record Tx complete for DMA*/
  TxCpltCallback = TxCb;
 800f9a4:	4b0b      	ldr	r3, [pc, #44]	; (800f9d4 <vcom_Init+0x30>)
{
 800f9a6:	b510      	push	{r4, lr}
  TxCpltCallback = TxCb;
 800f9a8:	6018      	str	r0, [r3, #0]
      - Word Length = 8 Bits
      - Stop Bit = One Stop bit
      - Parity = ODD parity
      - BaudRate = 921600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTx;
 800f9aa:	480b      	ldr	r0, [pc, #44]	; (800f9d8 <vcom_Init+0x34>)
 800f9ac:	4b0b      	ldr	r3, [pc, #44]	; (800f9dc <vcom_Init+0x38>)
 800f9ae:	6003      	str	r3, [r0, #0]

  UartHandle.Init.BaudRate   = 115200;
 800f9b0:	23e1      	movs	r3, #225	; 0xe1
 800f9b2:	025b      	lsls	r3, r3, #9
 800f9b4:	6043      	str	r3, [r0, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	6083      	str	r3, [r0, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 800f9ba:	60c3      	str	r3, [r0, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 800f9bc:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800f9be:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX;
 800f9c0:	3308      	adds	r3, #8
 800f9c2:	6143      	str	r3, [r0, #20]

  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 800f9c4:	f7f7 fbd6 	bl	8007174 <HAL_UART_Init>
 800f9c8:	2800      	cmp	r0, #0
 800f9ca:	d001      	beq.n	800f9d0 <vcom_Init+0x2c>
  {
    /* Initialization Error */
    Error_Handler();
 800f9cc:	f7ff f850 	bl	800ea70 <Error_Handler>
  }
}
 800f9d0:	bd10      	pop	{r4, pc}
 800f9d2:	46c0      	nop			; (mov r8, r8)
 800f9d4:	2000147c 	.word	0x2000147c
 800f9d8:	200014c8 	.word	0x200014c8
 800f9dc:	40004400 	.word	0x40004400

0800f9e0 <vcom_Trace>:

void vcom_Trace(uint8_t *p_data, uint16_t size)
{
 800f9e0:	b510      	push	{r4, lr}
 800f9e2:	000a      	movs	r2, r1
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 800f9e4:	0001      	movs	r1, r0
 800f9e6:	4802      	ldr	r0, [pc, #8]	; (800f9f0 <vcom_Trace+0x10>)
 800f9e8:	f7f7 f884 	bl	8006af4 <HAL_UART_Transmit_DMA>
}
 800f9ec:	bd10      	pop	{r4, pc}
 800f9ee:	46c0      	nop			; (mov r8, r8)
 800f9f0:	200014c8 	.word	0x200014c8

0800f9f4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800f9f4:	b510      	push	{r4, lr}
  /* buffer transmission complete*/
  TxCpltCallback();
 800f9f6:	4b02      	ldr	r3, [pc, #8]	; (800fa00 <HAL_UART_TxCpltCallback+0xc>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	4798      	blx	r3
}
 800f9fc:	bd10      	pop	{r4, pc}
 800f9fe:	46c0      	nop			; (mov r8, r8)
 800fa00:	2000147c 	.word	0x2000147c

0800fa04 <vcom_DMA_TX_IRQHandler>:

void vcom_DMA_TX_IRQHandler(void)
{
 800fa04:	b510      	push	{r4, lr}
  HAL_DMA_IRQHandler(UartHandle.hdmatx);
 800fa06:	4b02      	ldr	r3, [pc, #8]	; (800fa10 <vcom_DMA_TX_IRQHandler+0xc>)
 800fa08:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800fa0a:	f7f5 fd9a 	bl	8005542 <HAL_DMA_IRQHandler>
}
 800fa0e:	bd10      	pop	{r4, pc}
 800fa10:	200014c8 	.word	0x200014c8

0800fa14 <vcom_IRQHandler>:

void vcom_IRQHandler(void)
{
 800fa14:	b510      	push	{r4, lr}
  HAL_UART_IRQHandler(&UartHandle);
 800fa16:	4802      	ldr	r0, [pc, #8]	; (800fa20 <vcom_IRQHandler+0xc>)
 800fa18:	f7f7 f908 	bl	8006c2c <HAL_UART_IRQHandler>
}
 800fa1c:	bd10      	pop	{r4, pc}
 800fa1e:	46c0      	nop			; (mov r8, r8)
 800fa20:	200014c8 	.word	0x200014c8

0800fa24 <vcom_IoInit>:

void vcom_IoInit(void)
{
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 800fa24:	2201      	movs	r2, #1
 800fa26:	4b14      	ldr	r3, [pc, #80]	; (800fa78 <vcom_IoInit+0x54>)
{
 800fa28:	b530      	push	{r4, r5, lr}
  USARTx_TX_GPIO_CLK_ENABLE();
 800fa2a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
{
 800fa2c:	b089      	sub	sp, #36	; 0x24
  USARTx_TX_GPIO_CLK_ENABLE();
 800fa2e:	4311      	orrs	r1, r2
 800fa30:	62d9      	str	r1, [r3, #44]	; 0x2c
 800fa32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800fa34:	25a0      	movs	r5, #160	; 0xa0
  USARTx_TX_GPIO_CLK_ENABLE();
 800fa36:	4011      	ands	r1, r2
 800fa38:	9101      	str	r1, [sp, #4]
 800fa3a:	9901      	ldr	r1, [sp, #4]
  USARTx_RX_GPIO_CLK_ENABLE();
 800fa3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 800fa3e:	2404      	movs	r4, #4
  USARTx_RX_GPIO_CLK_ENABLE();
 800fa40:	4311      	orrs	r1, r2
 800fa42:	62d9      	str	r1, [r3, #44]	; 0x2c
 800fa44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800fa46:	05ed      	lsls	r5, r5, #23
  USARTx_RX_GPIO_CLK_ENABLE();
 800fa48:	401a      	ands	r2, r3
 800fa4a:	9202      	str	r2, [sp, #8]
 800fa4c:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800fa4e:	2302      	movs	r3, #2
 800fa50:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800fa52:	2300      	movs	r3, #0
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800fa54:	0028      	movs	r0, r5
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800fa56:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800fa58:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 800fa5a:	3303      	adds	r3, #3
 800fa5c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 800fa5e:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800fa60:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800fa62:	f7f5 fdb9 	bl	80055d8 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800fa66:	2308      	movs	r3, #8
  GPIO_InitStruct.Alternate = USARTx_RX_AF;

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800fa68:	0028      	movs	r0, r5
 800fa6a:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800fa6c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 800fa6e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800fa70:	f7f5 fdb2 	bl	80055d8 <HAL_GPIO_Init>
}
 800fa74:	b009      	add	sp, #36	; 0x24
 800fa76:	bd30      	pop	{r4, r5, pc}
 800fa78:	40021000 	.word	0x40021000

0800fa7c <HAL_UART_MspInit>:
{
 800fa7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (huart->Instance == USARTx)
 800fa7e:	4b25      	ldr	r3, [pc, #148]	; (800fb14 <HAL_UART_MspInit+0x98>)
 800fa80:	6802      	ldr	r2, [r0, #0]
{
 800fa82:	0007      	movs	r7, r0
 800fa84:	b085      	sub	sp, #20
  if (huart->Instance == USARTx)
 800fa86:	429a      	cmp	r2, r3
 800fa88:	d142      	bne.n	800fb10 <HAL_UART_MspInit+0x94>
    USARTx_TX_GPIO_CLK_ENABLE();
 800fa8a:	2501      	movs	r5, #1
 800fa8c:	4b22      	ldr	r3, [pc, #136]	; (800fb18 <HAL_UART_MspInit+0x9c>)
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800fa8e:	2600      	movs	r6, #0
    USARTx_TX_GPIO_CLK_ENABLE();
 800fa90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa92:	432a      	orrs	r2, r5
 800fa94:	62da      	str	r2, [r3, #44]	; 0x2c
 800fa96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa98:	402a      	ands	r2, r5
 800fa9a:	9201      	str	r2, [sp, #4]
 800fa9c:	9a01      	ldr	r2, [sp, #4]
    USARTx_RX_GPIO_CLK_ENABLE();
 800fa9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faa0:	432a      	orrs	r2, r5
 800faa2:	62da      	str	r2, [r3, #44]	; 0x2c
 800faa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faa6:	402a      	ands	r2, r5
 800faa8:	9202      	str	r2, [sp, #8]
 800faaa:	9a02      	ldr	r2, [sp, #8]
    USARTx_CLK_ENABLE();
 800faac:	2280      	movs	r2, #128	; 0x80
 800faae:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800fab0:	0292      	lsls	r2, r2, #10
 800fab2:	430a      	orrs	r2, r1
 800fab4:	639a      	str	r2, [r3, #56]	; 0x38
    DMAx_CLK_ENABLE();
 800fab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fab8:	432a      	orrs	r2, r5
 800faba:	631a      	str	r2, [r3, #48]	; 0x30
 800fabc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fabe:	402b      	ands	r3, r5
 800fac0:	9303      	str	r3, [sp, #12]
 800fac2:	9b03      	ldr	r3, [sp, #12]
    vcom_IoInit();
 800fac4:	f7ff ffae 	bl	800fa24 <vcom_IoInit>
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 800fac8:	4c14      	ldr	r4, [pc, #80]	; (800fb1c <HAL_UART_MspInit+0xa0>)
 800faca:	4b15      	ldr	r3, [pc, #84]	; (800fb20 <HAL_UART_MspInit+0xa4>)
    HAL_DMA_Init(&hdma_tx);
 800facc:	4815      	ldr	r0, [pc, #84]	; (800fb24 <HAL_UART_MspInit+0xa8>)
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 800face:	6063      	str	r3, [r4, #4]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800fad0:	2310      	movs	r3, #16
 800fad2:	60e3      	str	r3, [r4, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800fad4:	3370      	adds	r3, #112	; 0x70
 800fad6:	6163      	str	r3, [r4, #20]
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 800fad8:	3b7c      	subs	r3, #124	; 0x7c
 800fada:	60a3      	str	r3, [r4, #8]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800fadc:	6126      	str	r6, [r4, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800fade:	61a6      	str	r6, [r4, #24]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 800fae0:	61e6      	str	r6, [r4, #28]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 800fae2:	6226      	str	r6, [r4, #32]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 800fae4:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_DMA_Init(&hdma_tx);
 800fae6:	f7f5 fc83 	bl	80053f0 <HAL_DMA_Init>
    __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 800faea:	4b0e      	ldr	r3, [pc, #56]	; (800fb24 <HAL_UART_MspInit+0xa8>)
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 800faec:	002a      	movs	r2, r5
 800faee:	0031      	movs	r1, r6
    __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 800faf0:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 800faf2:	200b      	movs	r0, #11
    __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 800faf4:	62e7      	str	r7, [r4, #44]	; 0x2c
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 800faf6:	f7f5 fc45 	bl	8005384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 800fafa:	200b      	movs	r0, #11
 800fafc:	f7f5 fc6c 	bl	80053d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 800fb00:	201c      	movs	r0, #28
 800fb02:	002a      	movs	r2, r5
 800fb04:	0031      	movs	r1, r6
 800fb06:	f7f5 fc3d 	bl	8005384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 800fb0a:	201c      	movs	r0, #28
 800fb0c:	f7f5 fc64 	bl	80053d8 <HAL_NVIC_EnableIRQ>
}
 800fb10:	b005      	add	sp, #20
 800fb12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb14:	40004400 	.word	0x40004400
 800fb18:	40021000 	.word	0x40021000
 800fb1c:	2000147c 	.word	0x2000147c
 800fb20:	40020080 	.word	0x40020080
 800fb24:	20001480 	.word	0x20001480

0800fb28 <vcom_IoDeInit>:

void vcom_IoDeInit(void)
{
 800fb28:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 800fb2a:	2408      	movs	r4, #8
{
 800fb2c:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 800fb2e:	0022      	movs	r2, r4
 800fb30:	2100      	movs	r1, #0
 800fb32:	a804      	add	r0, sp, #16
 800fb34:	f000 f84b 	bl	800fbce <memset>

  USARTx_TX_GPIO_CLK_ENABLE();
 800fb38:	2001      	movs	r0, #1
 800fb3a:	4a0d      	ldr	r2, [pc, #52]	; (800fb70 <vcom_IoDeInit+0x48>)

  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStructure.Pull = GPIO_NOPULL;

  GPIO_InitStructure.Pin =  USARTx_TX_PIN ;
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStructure);
 800fb3c:	25a0      	movs	r5, #160	; 0xa0
  USARTx_TX_GPIO_CLK_ENABLE();
 800fb3e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStructure);
 800fb40:	05ed      	lsls	r5, r5, #23
  USARTx_TX_GPIO_CLK_ENABLE();
 800fb42:	4301      	orrs	r1, r0
 800fb44:	62d1      	str	r1, [r2, #44]	; 0x2c
 800fb46:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStructure);
 800fb48:	a901      	add	r1, sp, #4
  USARTx_TX_GPIO_CLK_ENABLE();
 800fb4a:	4003      	ands	r3, r0
 800fb4c:	9300      	str	r3, [sp, #0]
 800fb4e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 800fb50:	2303      	movs	r3, #3
 800fb52:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800fb54:	2300      	movs	r3, #0
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStructure);
 800fb56:	0028      	movs	r0, r5
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800fb58:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Pin =  USARTx_TX_PIN ;
 800fb5a:	3304      	adds	r3, #4
 800fb5c:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStructure);
 800fb5e:	f7f5 fd3b 	bl	80055d8 <HAL_GPIO_Init>

  GPIO_InitStructure.Pin =  USARTx_RX_PIN ;
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStructure);
 800fb62:	0028      	movs	r0, r5
 800fb64:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Pin =  USARTx_RX_PIN ;
 800fb66:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStructure);
 800fb68:	f7f5 fd36 	bl	80055d8 <HAL_GPIO_Init>
}
 800fb6c:	b007      	add	sp, #28
 800fb6e:	bd30      	pop	{r4, r5, pc}
 800fb70:	40021000 	.word	0x40021000

0800fb74 <__libc_init_array>:
 800fb74:	b570      	push	{r4, r5, r6, lr}
 800fb76:	2600      	movs	r6, #0
 800fb78:	4d0c      	ldr	r5, [pc, #48]	; (800fbac <__libc_init_array+0x38>)
 800fb7a:	4c0d      	ldr	r4, [pc, #52]	; (800fbb0 <__libc_init_array+0x3c>)
 800fb7c:	1b64      	subs	r4, r4, r5
 800fb7e:	10a4      	asrs	r4, r4, #2
 800fb80:	42a6      	cmp	r6, r4
 800fb82:	d109      	bne.n	800fb98 <__libc_init_array+0x24>
 800fb84:	2600      	movs	r6, #0
 800fb86:	f000 fdcf 	bl	8010728 <_init>
 800fb8a:	4d0a      	ldr	r5, [pc, #40]	; (800fbb4 <__libc_init_array+0x40>)
 800fb8c:	4c0a      	ldr	r4, [pc, #40]	; (800fbb8 <__libc_init_array+0x44>)
 800fb8e:	1b64      	subs	r4, r4, r5
 800fb90:	10a4      	asrs	r4, r4, #2
 800fb92:	42a6      	cmp	r6, r4
 800fb94:	d105      	bne.n	800fba2 <__libc_init_array+0x2e>
 800fb96:	bd70      	pop	{r4, r5, r6, pc}
 800fb98:	00b3      	lsls	r3, r6, #2
 800fb9a:	58eb      	ldr	r3, [r5, r3]
 800fb9c:	4798      	blx	r3
 800fb9e:	3601      	adds	r6, #1
 800fba0:	e7ee      	b.n	800fb80 <__libc_init_array+0xc>
 800fba2:	00b3      	lsls	r3, r6, #2
 800fba4:	58eb      	ldr	r3, [r5, r3]
 800fba6:	4798      	blx	r3
 800fba8:	3601      	adds	r6, #1
 800fbaa:	e7f2      	b.n	800fb92 <__libc_init_array+0x1e>
 800fbac:	080113bc 	.word	0x080113bc
 800fbb0:	080113bc 	.word	0x080113bc
 800fbb4:	080113bc 	.word	0x080113bc
 800fbb8:	080113c0 	.word	0x080113c0

0800fbbc <memcpy>:
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	b510      	push	{r4, lr}
 800fbc0:	429a      	cmp	r2, r3
 800fbc2:	d100      	bne.n	800fbc6 <memcpy+0xa>
 800fbc4:	bd10      	pop	{r4, pc}
 800fbc6:	5ccc      	ldrb	r4, [r1, r3]
 800fbc8:	54c4      	strb	r4, [r0, r3]
 800fbca:	3301      	adds	r3, #1
 800fbcc:	e7f8      	b.n	800fbc0 <memcpy+0x4>

0800fbce <memset>:
 800fbce:	0003      	movs	r3, r0
 800fbd0:	1882      	adds	r2, r0, r2
 800fbd2:	4293      	cmp	r3, r2
 800fbd4:	d100      	bne.n	800fbd8 <memset+0xa>
 800fbd6:	4770      	bx	lr
 800fbd8:	7019      	strb	r1, [r3, #0]
 800fbda:	3301      	adds	r3, #1
 800fbdc:	e7f9      	b.n	800fbd2 <memset+0x4>

0800fbde <_vsniprintf_r>:
 800fbde:	b530      	push	{r4, r5, lr}
 800fbe0:	0014      	movs	r4, r2
 800fbe2:	0005      	movs	r5, r0
 800fbe4:	001a      	movs	r2, r3
 800fbe6:	b09b      	sub	sp, #108	; 0x6c
 800fbe8:	2c00      	cmp	r4, #0
 800fbea:	da05      	bge.n	800fbf8 <_vsniprintf_r+0x1a>
 800fbec:	238b      	movs	r3, #139	; 0x8b
 800fbee:	6003      	str	r3, [r0, #0]
 800fbf0:	2001      	movs	r0, #1
 800fbf2:	4240      	negs	r0, r0
 800fbf4:	b01b      	add	sp, #108	; 0x6c
 800fbf6:	bd30      	pop	{r4, r5, pc}
 800fbf8:	2382      	movs	r3, #130	; 0x82
 800fbfa:	4668      	mov	r0, sp
 800fbfc:	009b      	lsls	r3, r3, #2
 800fbfe:	8183      	strh	r3, [r0, #12]
 800fc00:	2300      	movs	r3, #0
 800fc02:	9100      	str	r1, [sp, #0]
 800fc04:	9104      	str	r1, [sp, #16]
 800fc06:	429c      	cmp	r4, r3
 800fc08:	d000      	beq.n	800fc0c <_vsniprintf_r+0x2e>
 800fc0a:	1e63      	subs	r3, r4, #1
 800fc0c:	9302      	str	r3, [sp, #8]
 800fc0e:	9305      	str	r3, [sp, #20]
 800fc10:	2301      	movs	r3, #1
 800fc12:	4669      	mov	r1, sp
 800fc14:	425b      	negs	r3, r3
 800fc16:	81cb      	strh	r3, [r1, #14]
 800fc18:	0028      	movs	r0, r5
 800fc1a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800fc1c:	f000 f8d8 	bl	800fdd0 <_svfiprintf_r>
 800fc20:	1c43      	adds	r3, r0, #1
 800fc22:	da01      	bge.n	800fc28 <_vsniprintf_r+0x4a>
 800fc24:	238b      	movs	r3, #139	; 0x8b
 800fc26:	602b      	str	r3, [r5, #0]
 800fc28:	2c00      	cmp	r4, #0
 800fc2a:	d0e3      	beq.n	800fbf4 <_vsniprintf_r+0x16>
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	9a00      	ldr	r2, [sp, #0]
 800fc30:	7013      	strb	r3, [r2, #0]
 800fc32:	e7df      	b.n	800fbf4 <_vsniprintf_r+0x16>

0800fc34 <vsniprintf>:
 800fc34:	b507      	push	{r0, r1, r2, lr}
 800fc36:	9300      	str	r3, [sp, #0]
 800fc38:	0013      	movs	r3, r2
 800fc3a:	000a      	movs	r2, r1
 800fc3c:	0001      	movs	r1, r0
 800fc3e:	4802      	ldr	r0, [pc, #8]	; (800fc48 <vsniprintf+0x14>)
 800fc40:	6800      	ldr	r0, [r0, #0]
 800fc42:	f7ff ffcc 	bl	800fbde <_vsniprintf_r>
 800fc46:	bd0e      	pop	{r1, r2, r3, pc}
 800fc48:	2000018c 	.word	0x2000018c

0800fc4c <__retarget_lock_acquire_recursive>:
 800fc4c:	4770      	bx	lr

0800fc4e <__retarget_lock_release_recursive>:
 800fc4e:	4770      	bx	lr

0800fc50 <_malloc_r>:
 800fc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc52:	2303      	movs	r3, #3
 800fc54:	1ccd      	adds	r5, r1, #3
 800fc56:	439d      	bics	r5, r3
 800fc58:	3508      	adds	r5, #8
 800fc5a:	0006      	movs	r6, r0
 800fc5c:	2d0c      	cmp	r5, #12
 800fc5e:	d21f      	bcs.n	800fca0 <_malloc_r+0x50>
 800fc60:	250c      	movs	r5, #12
 800fc62:	42a9      	cmp	r1, r5
 800fc64:	d81e      	bhi.n	800fca4 <_malloc_r+0x54>
 800fc66:	0030      	movs	r0, r6
 800fc68:	f000 fb64 	bl	8010334 <__malloc_lock>
 800fc6c:	4925      	ldr	r1, [pc, #148]	; (800fd04 <_malloc_r+0xb4>)
 800fc6e:	680a      	ldr	r2, [r1, #0]
 800fc70:	0014      	movs	r4, r2
 800fc72:	2c00      	cmp	r4, #0
 800fc74:	d11a      	bne.n	800fcac <_malloc_r+0x5c>
 800fc76:	4f24      	ldr	r7, [pc, #144]	; (800fd08 <_malloc_r+0xb8>)
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d104      	bne.n	800fc88 <_malloc_r+0x38>
 800fc7e:	0021      	movs	r1, r4
 800fc80:	0030      	movs	r0, r6
 800fc82:	f000 fb27 	bl	80102d4 <_sbrk_r>
 800fc86:	6038      	str	r0, [r7, #0]
 800fc88:	0029      	movs	r1, r5
 800fc8a:	0030      	movs	r0, r6
 800fc8c:	f000 fb22 	bl	80102d4 <_sbrk_r>
 800fc90:	1c43      	adds	r3, r0, #1
 800fc92:	d12b      	bne.n	800fcec <_malloc_r+0x9c>
 800fc94:	230c      	movs	r3, #12
 800fc96:	0030      	movs	r0, r6
 800fc98:	6033      	str	r3, [r6, #0]
 800fc9a:	f000 fb53 	bl	8010344 <__malloc_unlock>
 800fc9e:	e003      	b.n	800fca8 <_malloc_r+0x58>
 800fca0:	2d00      	cmp	r5, #0
 800fca2:	dade      	bge.n	800fc62 <_malloc_r+0x12>
 800fca4:	230c      	movs	r3, #12
 800fca6:	6033      	str	r3, [r6, #0]
 800fca8:	2000      	movs	r0, #0
 800fcaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcac:	6823      	ldr	r3, [r4, #0]
 800fcae:	1b5b      	subs	r3, r3, r5
 800fcb0:	d419      	bmi.n	800fce6 <_malloc_r+0x96>
 800fcb2:	2b0b      	cmp	r3, #11
 800fcb4:	d903      	bls.n	800fcbe <_malloc_r+0x6e>
 800fcb6:	6023      	str	r3, [r4, #0]
 800fcb8:	18e4      	adds	r4, r4, r3
 800fcba:	6025      	str	r5, [r4, #0]
 800fcbc:	e003      	b.n	800fcc6 <_malloc_r+0x76>
 800fcbe:	6863      	ldr	r3, [r4, #4]
 800fcc0:	42a2      	cmp	r2, r4
 800fcc2:	d10e      	bne.n	800fce2 <_malloc_r+0x92>
 800fcc4:	600b      	str	r3, [r1, #0]
 800fcc6:	0030      	movs	r0, r6
 800fcc8:	f000 fb3c 	bl	8010344 <__malloc_unlock>
 800fccc:	0020      	movs	r0, r4
 800fcce:	2207      	movs	r2, #7
 800fcd0:	300b      	adds	r0, #11
 800fcd2:	1d23      	adds	r3, r4, #4
 800fcd4:	4390      	bics	r0, r2
 800fcd6:	1ac2      	subs	r2, r0, r3
 800fcd8:	4298      	cmp	r0, r3
 800fcda:	d0e6      	beq.n	800fcaa <_malloc_r+0x5a>
 800fcdc:	1a1b      	subs	r3, r3, r0
 800fcde:	50a3      	str	r3, [r4, r2]
 800fce0:	e7e3      	b.n	800fcaa <_malloc_r+0x5a>
 800fce2:	6053      	str	r3, [r2, #4]
 800fce4:	e7ef      	b.n	800fcc6 <_malloc_r+0x76>
 800fce6:	0022      	movs	r2, r4
 800fce8:	6864      	ldr	r4, [r4, #4]
 800fcea:	e7c2      	b.n	800fc72 <_malloc_r+0x22>
 800fcec:	2303      	movs	r3, #3
 800fcee:	1cc4      	adds	r4, r0, #3
 800fcf0:	439c      	bics	r4, r3
 800fcf2:	42a0      	cmp	r0, r4
 800fcf4:	d0e1      	beq.n	800fcba <_malloc_r+0x6a>
 800fcf6:	1a21      	subs	r1, r4, r0
 800fcf8:	0030      	movs	r0, r6
 800fcfa:	f000 faeb 	bl	80102d4 <_sbrk_r>
 800fcfe:	1c43      	adds	r3, r0, #1
 800fd00:	d1db      	bne.n	800fcba <_malloc_r+0x6a>
 800fd02:	e7c7      	b.n	800fc94 <_malloc_r+0x44>
 800fd04:	20001548 	.word	0x20001548
 800fd08:	2000154c 	.word	0x2000154c

0800fd0c <__ssputs_r>:
 800fd0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd0e:	688e      	ldr	r6, [r1, #8]
 800fd10:	b085      	sub	sp, #20
 800fd12:	0007      	movs	r7, r0
 800fd14:	000c      	movs	r4, r1
 800fd16:	9203      	str	r2, [sp, #12]
 800fd18:	9301      	str	r3, [sp, #4]
 800fd1a:	429e      	cmp	r6, r3
 800fd1c:	d83c      	bhi.n	800fd98 <__ssputs_r+0x8c>
 800fd1e:	2390      	movs	r3, #144	; 0x90
 800fd20:	898a      	ldrh	r2, [r1, #12]
 800fd22:	00db      	lsls	r3, r3, #3
 800fd24:	421a      	tst	r2, r3
 800fd26:	d034      	beq.n	800fd92 <__ssputs_r+0x86>
 800fd28:	2503      	movs	r5, #3
 800fd2a:	6909      	ldr	r1, [r1, #16]
 800fd2c:	6823      	ldr	r3, [r4, #0]
 800fd2e:	1a5b      	subs	r3, r3, r1
 800fd30:	9302      	str	r3, [sp, #8]
 800fd32:	6963      	ldr	r3, [r4, #20]
 800fd34:	9802      	ldr	r0, [sp, #8]
 800fd36:	435d      	muls	r5, r3
 800fd38:	0feb      	lsrs	r3, r5, #31
 800fd3a:	195d      	adds	r5, r3, r5
 800fd3c:	9b01      	ldr	r3, [sp, #4]
 800fd3e:	106d      	asrs	r5, r5, #1
 800fd40:	3301      	adds	r3, #1
 800fd42:	181b      	adds	r3, r3, r0
 800fd44:	42ab      	cmp	r3, r5
 800fd46:	d900      	bls.n	800fd4a <__ssputs_r+0x3e>
 800fd48:	001d      	movs	r5, r3
 800fd4a:	0553      	lsls	r3, r2, #21
 800fd4c:	d532      	bpl.n	800fdb4 <__ssputs_r+0xa8>
 800fd4e:	0029      	movs	r1, r5
 800fd50:	0038      	movs	r0, r7
 800fd52:	f7ff ff7d 	bl	800fc50 <_malloc_r>
 800fd56:	1e06      	subs	r6, r0, #0
 800fd58:	d109      	bne.n	800fd6e <__ssputs_r+0x62>
 800fd5a:	230c      	movs	r3, #12
 800fd5c:	603b      	str	r3, [r7, #0]
 800fd5e:	2340      	movs	r3, #64	; 0x40
 800fd60:	2001      	movs	r0, #1
 800fd62:	89a2      	ldrh	r2, [r4, #12]
 800fd64:	4240      	negs	r0, r0
 800fd66:	4313      	orrs	r3, r2
 800fd68:	81a3      	strh	r3, [r4, #12]
 800fd6a:	b005      	add	sp, #20
 800fd6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd6e:	9a02      	ldr	r2, [sp, #8]
 800fd70:	6921      	ldr	r1, [r4, #16]
 800fd72:	f7ff ff23 	bl	800fbbc <memcpy>
 800fd76:	89a3      	ldrh	r3, [r4, #12]
 800fd78:	4a14      	ldr	r2, [pc, #80]	; (800fdcc <__ssputs_r+0xc0>)
 800fd7a:	401a      	ands	r2, r3
 800fd7c:	2380      	movs	r3, #128	; 0x80
 800fd7e:	4313      	orrs	r3, r2
 800fd80:	81a3      	strh	r3, [r4, #12]
 800fd82:	9b02      	ldr	r3, [sp, #8]
 800fd84:	6126      	str	r6, [r4, #16]
 800fd86:	18f6      	adds	r6, r6, r3
 800fd88:	6026      	str	r6, [r4, #0]
 800fd8a:	6165      	str	r5, [r4, #20]
 800fd8c:	9e01      	ldr	r6, [sp, #4]
 800fd8e:	1aed      	subs	r5, r5, r3
 800fd90:	60a5      	str	r5, [r4, #8]
 800fd92:	9b01      	ldr	r3, [sp, #4]
 800fd94:	429e      	cmp	r6, r3
 800fd96:	d900      	bls.n	800fd9a <__ssputs_r+0x8e>
 800fd98:	9e01      	ldr	r6, [sp, #4]
 800fd9a:	0032      	movs	r2, r6
 800fd9c:	9903      	ldr	r1, [sp, #12]
 800fd9e:	6820      	ldr	r0, [r4, #0]
 800fda0:	f000 fab5 	bl	801030e <memmove>
 800fda4:	68a3      	ldr	r3, [r4, #8]
 800fda6:	2000      	movs	r0, #0
 800fda8:	1b9b      	subs	r3, r3, r6
 800fdaa:	60a3      	str	r3, [r4, #8]
 800fdac:	6823      	ldr	r3, [r4, #0]
 800fdae:	199e      	adds	r6, r3, r6
 800fdb0:	6026      	str	r6, [r4, #0]
 800fdb2:	e7da      	b.n	800fd6a <__ssputs_r+0x5e>
 800fdb4:	002a      	movs	r2, r5
 800fdb6:	0038      	movs	r0, r7
 800fdb8:	f000 fb16 	bl	80103e8 <_realloc_r>
 800fdbc:	1e06      	subs	r6, r0, #0
 800fdbe:	d1e0      	bne.n	800fd82 <__ssputs_r+0x76>
 800fdc0:	0038      	movs	r0, r7
 800fdc2:	6921      	ldr	r1, [r4, #16]
 800fdc4:	f000 fac6 	bl	8010354 <_free_r>
 800fdc8:	e7c7      	b.n	800fd5a <__ssputs_r+0x4e>
 800fdca:	46c0      	nop			; (mov r8, r8)
 800fdcc:	fffffb7f 	.word	0xfffffb7f

0800fdd0 <_svfiprintf_r>:
 800fdd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdd2:	b0a1      	sub	sp, #132	; 0x84
 800fdd4:	9003      	str	r0, [sp, #12]
 800fdd6:	001d      	movs	r5, r3
 800fdd8:	898b      	ldrh	r3, [r1, #12]
 800fdda:	000f      	movs	r7, r1
 800fddc:	0016      	movs	r6, r2
 800fdde:	061b      	lsls	r3, r3, #24
 800fde0:	d511      	bpl.n	800fe06 <_svfiprintf_r+0x36>
 800fde2:	690b      	ldr	r3, [r1, #16]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d10e      	bne.n	800fe06 <_svfiprintf_r+0x36>
 800fde8:	2140      	movs	r1, #64	; 0x40
 800fdea:	f7ff ff31 	bl	800fc50 <_malloc_r>
 800fdee:	6038      	str	r0, [r7, #0]
 800fdf0:	6138      	str	r0, [r7, #16]
 800fdf2:	2800      	cmp	r0, #0
 800fdf4:	d105      	bne.n	800fe02 <_svfiprintf_r+0x32>
 800fdf6:	230c      	movs	r3, #12
 800fdf8:	9a03      	ldr	r2, [sp, #12]
 800fdfa:	3801      	subs	r0, #1
 800fdfc:	6013      	str	r3, [r2, #0]
 800fdfe:	b021      	add	sp, #132	; 0x84
 800fe00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe02:	2340      	movs	r3, #64	; 0x40
 800fe04:	617b      	str	r3, [r7, #20]
 800fe06:	2300      	movs	r3, #0
 800fe08:	ac08      	add	r4, sp, #32
 800fe0a:	6163      	str	r3, [r4, #20]
 800fe0c:	3320      	adds	r3, #32
 800fe0e:	7663      	strb	r3, [r4, #25]
 800fe10:	3310      	adds	r3, #16
 800fe12:	76a3      	strb	r3, [r4, #26]
 800fe14:	9507      	str	r5, [sp, #28]
 800fe16:	0035      	movs	r5, r6
 800fe18:	782b      	ldrb	r3, [r5, #0]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d001      	beq.n	800fe22 <_svfiprintf_r+0x52>
 800fe1e:	2b25      	cmp	r3, #37	; 0x25
 800fe20:	d147      	bne.n	800feb2 <_svfiprintf_r+0xe2>
 800fe22:	1bab      	subs	r3, r5, r6
 800fe24:	9305      	str	r3, [sp, #20]
 800fe26:	42b5      	cmp	r5, r6
 800fe28:	d00c      	beq.n	800fe44 <_svfiprintf_r+0x74>
 800fe2a:	0032      	movs	r2, r6
 800fe2c:	0039      	movs	r1, r7
 800fe2e:	9803      	ldr	r0, [sp, #12]
 800fe30:	f7ff ff6c 	bl	800fd0c <__ssputs_r>
 800fe34:	1c43      	adds	r3, r0, #1
 800fe36:	d100      	bne.n	800fe3a <_svfiprintf_r+0x6a>
 800fe38:	e0ae      	b.n	800ff98 <_svfiprintf_r+0x1c8>
 800fe3a:	6962      	ldr	r2, [r4, #20]
 800fe3c:	9b05      	ldr	r3, [sp, #20]
 800fe3e:	4694      	mov	ip, r2
 800fe40:	4463      	add	r3, ip
 800fe42:	6163      	str	r3, [r4, #20]
 800fe44:	782b      	ldrb	r3, [r5, #0]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d100      	bne.n	800fe4c <_svfiprintf_r+0x7c>
 800fe4a:	e0a5      	b.n	800ff98 <_svfiprintf_r+0x1c8>
 800fe4c:	2201      	movs	r2, #1
 800fe4e:	2300      	movs	r3, #0
 800fe50:	4252      	negs	r2, r2
 800fe52:	6062      	str	r2, [r4, #4]
 800fe54:	a904      	add	r1, sp, #16
 800fe56:	3254      	adds	r2, #84	; 0x54
 800fe58:	1852      	adds	r2, r2, r1
 800fe5a:	1c6e      	adds	r6, r5, #1
 800fe5c:	6023      	str	r3, [r4, #0]
 800fe5e:	60e3      	str	r3, [r4, #12]
 800fe60:	60a3      	str	r3, [r4, #8]
 800fe62:	7013      	strb	r3, [r2, #0]
 800fe64:	65a3      	str	r3, [r4, #88]	; 0x58
 800fe66:	2205      	movs	r2, #5
 800fe68:	7831      	ldrb	r1, [r6, #0]
 800fe6a:	4854      	ldr	r0, [pc, #336]	; (800ffbc <_svfiprintf_r+0x1ec>)
 800fe6c:	f000 fa44 	bl	80102f8 <memchr>
 800fe70:	1c75      	adds	r5, r6, #1
 800fe72:	2800      	cmp	r0, #0
 800fe74:	d11f      	bne.n	800feb6 <_svfiprintf_r+0xe6>
 800fe76:	6822      	ldr	r2, [r4, #0]
 800fe78:	06d3      	lsls	r3, r2, #27
 800fe7a:	d504      	bpl.n	800fe86 <_svfiprintf_r+0xb6>
 800fe7c:	2353      	movs	r3, #83	; 0x53
 800fe7e:	a904      	add	r1, sp, #16
 800fe80:	185b      	adds	r3, r3, r1
 800fe82:	2120      	movs	r1, #32
 800fe84:	7019      	strb	r1, [r3, #0]
 800fe86:	0713      	lsls	r3, r2, #28
 800fe88:	d504      	bpl.n	800fe94 <_svfiprintf_r+0xc4>
 800fe8a:	2353      	movs	r3, #83	; 0x53
 800fe8c:	a904      	add	r1, sp, #16
 800fe8e:	185b      	adds	r3, r3, r1
 800fe90:	212b      	movs	r1, #43	; 0x2b
 800fe92:	7019      	strb	r1, [r3, #0]
 800fe94:	7833      	ldrb	r3, [r6, #0]
 800fe96:	2b2a      	cmp	r3, #42	; 0x2a
 800fe98:	d016      	beq.n	800fec8 <_svfiprintf_r+0xf8>
 800fe9a:	0035      	movs	r5, r6
 800fe9c:	2100      	movs	r1, #0
 800fe9e:	200a      	movs	r0, #10
 800fea0:	68e3      	ldr	r3, [r4, #12]
 800fea2:	782a      	ldrb	r2, [r5, #0]
 800fea4:	1c6e      	adds	r6, r5, #1
 800fea6:	3a30      	subs	r2, #48	; 0x30
 800fea8:	2a09      	cmp	r2, #9
 800feaa:	d94e      	bls.n	800ff4a <_svfiprintf_r+0x17a>
 800feac:	2900      	cmp	r1, #0
 800feae:	d111      	bne.n	800fed4 <_svfiprintf_r+0x104>
 800feb0:	e017      	b.n	800fee2 <_svfiprintf_r+0x112>
 800feb2:	3501      	adds	r5, #1
 800feb4:	e7b0      	b.n	800fe18 <_svfiprintf_r+0x48>
 800feb6:	4b41      	ldr	r3, [pc, #260]	; (800ffbc <_svfiprintf_r+0x1ec>)
 800feb8:	6822      	ldr	r2, [r4, #0]
 800feba:	1ac0      	subs	r0, r0, r3
 800febc:	2301      	movs	r3, #1
 800febe:	4083      	lsls	r3, r0
 800fec0:	4313      	orrs	r3, r2
 800fec2:	002e      	movs	r6, r5
 800fec4:	6023      	str	r3, [r4, #0]
 800fec6:	e7ce      	b.n	800fe66 <_svfiprintf_r+0x96>
 800fec8:	9b07      	ldr	r3, [sp, #28]
 800feca:	1d19      	adds	r1, r3, #4
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	9107      	str	r1, [sp, #28]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	db01      	blt.n	800fed8 <_svfiprintf_r+0x108>
 800fed4:	930b      	str	r3, [sp, #44]	; 0x2c
 800fed6:	e004      	b.n	800fee2 <_svfiprintf_r+0x112>
 800fed8:	425b      	negs	r3, r3
 800feda:	60e3      	str	r3, [r4, #12]
 800fedc:	2302      	movs	r3, #2
 800fede:	4313      	orrs	r3, r2
 800fee0:	6023      	str	r3, [r4, #0]
 800fee2:	782b      	ldrb	r3, [r5, #0]
 800fee4:	2b2e      	cmp	r3, #46	; 0x2e
 800fee6:	d10a      	bne.n	800fefe <_svfiprintf_r+0x12e>
 800fee8:	786b      	ldrb	r3, [r5, #1]
 800feea:	2b2a      	cmp	r3, #42	; 0x2a
 800feec:	d135      	bne.n	800ff5a <_svfiprintf_r+0x18a>
 800feee:	9b07      	ldr	r3, [sp, #28]
 800fef0:	3502      	adds	r5, #2
 800fef2:	1d1a      	adds	r2, r3, #4
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	9207      	str	r2, [sp, #28]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	db2b      	blt.n	800ff54 <_svfiprintf_r+0x184>
 800fefc:	9309      	str	r3, [sp, #36]	; 0x24
 800fefe:	4e30      	ldr	r6, [pc, #192]	; (800ffc0 <_svfiprintf_r+0x1f0>)
 800ff00:	2203      	movs	r2, #3
 800ff02:	0030      	movs	r0, r6
 800ff04:	7829      	ldrb	r1, [r5, #0]
 800ff06:	f000 f9f7 	bl	80102f8 <memchr>
 800ff0a:	2800      	cmp	r0, #0
 800ff0c:	d006      	beq.n	800ff1c <_svfiprintf_r+0x14c>
 800ff0e:	2340      	movs	r3, #64	; 0x40
 800ff10:	1b80      	subs	r0, r0, r6
 800ff12:	4083      	lsls	r3, r0
 800ff14:	6822      	ldr	r2, [r4, #0]
 800ff16:	3501      	adds	r5, #1
 800ff18:	4313      	orrs	r3, r2
 800ff1a:	6023      	str	r3, [r4, #0]
 800ff1c:	7829      	ldrb	r1, [r5, #0]
 800ff1e:	2206      	movs	r2, #6
 800ff20:	4828      	ldr	r0, [pc, #160]	; (800ffc4 <_svfiprintf_r+0x1f4>)
 800ff22:	1c6e      	adds	r6, r5, #1
 800ff24:	7621      	strb	r1, [r4, #24]
 800ff26:	f000 f9e7 	bl	80102f8 <memchr>
 800ff2a:	2800      	cmp	r0, #0
 800ff2c:	d03c      	beq.n	800ffa8 <_svfiprintf_r+0x1d8>
 800ff2e:	4b26      	ldr	r3, [pc, #152]	; (800ffc8 <_svfiprintf_r+0x1f8>)
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d125      	bne.n	800ff80 <_svfiprintf_r+0x1b0>
 800ff34:	2207      	movs	r2, #7
 800ff36:	9b07      	ldr	r3, [sp, #28]
 800ff38:	3307      	adds	r3, #7
 800ff3a:	4393      	bics	r3, r2
 800ff3c:	3308      	adds	r3, #8
 800ff3e:	9307      	str	r3, [sp, #28]
 800ff40:	6963      	ldr	r3, [r4, #20]
 800ff42:	9a04      	ldr	r2, [sp, #16]
 800ff44:	189b      	adds	r3, r3, r2
 800ff46:	6163      	str	r3, [r4, #20]
 800ff48:	e765      	b.n	800fe16 <_svfiprintf_r+0x46>
 800ff4a:	4343      	muls	r3, r0
 800ff4c:	0035      	movs	r5, r6
 800ff4e:	2101      	movs	r1, #1
 800ff50:	189b      	adds	r3, r3, r2
 800ff52:	e7a6      	b.n	800fea2 <_svfiprintf_r+0xd2>
 800ff54:	2301      	movs	r3, #1
 800ff56:	425b      	negs	r3, r3
 800ff58:	e7d0      	b.n	800fefc <_svfiprintf_r+0x12c>
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	200a      	movs	r0, #10
 800ff5e:	001a      	movs	r2, r3
 800ff60:	3501      	adds	r5, #1
 800ff62:	6063      	str	r3, [r4, #4]
 800ff64:	7829      	ldrb	r1, [r5, #0]
 800ff66:	1c6e      	adds	r6, r5, #1
 800ff68:	3930      	subs	r1, #48	; 0x30
 800ff6a:	2909      	cmp	r1, #9
 800ff6c:	d903      	bls.n	800ff76 <_svfiprintf_r+0x1a6>
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d0c5      	beq.n	800fefe <_svfiprintf_r+0x12e>
 800ff72:	9209      	str	r2, [sp, #36]	; 0x24
 800ff74:	e7c3      	b.n	800fefe <_svfiprintf_r+0x12e>
 800ff76:	4342      	muls	r2, r0
 800ff78:	0035      	movs	r5, r6
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	1852      	adds	r2, r2, r1
 800ff7e:	e7f1      	b.n	800ff64 <_svfiprintf_r+0x194>
 800ff80:	ab07      	add	r3, sp, #28
 800ff82:	9300      	str	r3, [sp, #0]
 800ff84:	003a      	movs	r2, r7
 800ff86:	0021      	movs	r1, r4
 800ff88:	4b10      	ldr	r3, [pc, #64]	; (800ffcc <_svfiprintf_r+0x1fc>)
 800ff8a:	9803      	ldr	r0, [sp, #12]
 800ff8c:	e000      	b.n	800ff90 <_svfiprintf_r+0x1c0>
 800ff8e:	bf00      	nop
 800ff90:	9004      	str	r0, [sp, #16]
 800ff92:	9b04      	ldr	r3, [sp, #16]
 800ff94:	3301      	adds	r3, #1
 800ff96:	d1d3      	bne.n	800ff40 <_svfiprintf_r+0x170>
 800ff98:	89bb      	ldrh	r3, [r7, #12]
 800ff9a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ff9c:	065b      	lsls	r3, r3, #25
 800ff9e:	d400      	bmi.n	800ffa2 <_svfiprintf_r+0x1d2>
 800ffa0:	e72d      	b.n	800fdfe <_svfiprintf_r+0x2e>
 800ffa2:	2001      	movs	r0, #1
 800ffa4:	4240      	negs	r0, r0
 800ffa6:	e72a      	b.n	800fdfe <_svfiprintf_r+0x2e>
 800ffa8:	ab07      	add	r3, sp, #28
 800ffaa:	9300      	str	r3, [sp, #0]
 800ffac:	003a      	movs	r2, r7
 800ffae:	0021      	movs	r1, r4
 800ffb0:	4b06      	ldr	r3, [pc, #24]	; (800ffcc <_svfiprintf_r+0x1fc>)
 800ffb2:	9803      	ldr	r0, [sp, #12]
 800ffb4:	f000 f87c 	bl	80100b0 <_printf_i>
 800ffb8:	e7ea      	b.n	800ff90 <_svfiprintf_r+0x1c0>
 800ffba:	46c0      	nop			; (mov r8, r8)
 800ffbc:	08011380 	.word	0x08011380
 800ffc0:	08011386 	.word	0x08011386
 800ffc4:	0801138a 	.word	0x0801138a
 800ffc8:	00000000 	.word	0x00000000
 800ffcc:	0800fd0d 	.word	0x0800fd0d

0800ffd0 <_printf_common>:
 800ffd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ffd2:	0015      	movs	r5, r2
 800ffd4:	9301      	str	r3, [sp, #4]
 800ffd6:	688a      	ldr	r2, [r1, #8]
 800ffd8:	690b      	ldr	r3, [r1, #16]
 800ffda:	000c      	movs	r4, r1
 800ffdc:	9000      	str	r0, [sp, #0]
 800ffde:	4293      	cmp	r3, r2
 800ffe0:	da00      	bge.n	800ffe4 <_printf_common+0x14>
 800ffe2:	0013      	movs	r3, r2
 800ffe4:	0022      	movs	r2, r4
 800ffe6:	602b      	str	r3, [r5, #0]
 800ffe8:	3243      	adds	r2, #67	; 0x43
 800ffea:	7812      	ldrb	r2, [r2, #0]
 800ffec:	2a00      	cmp	r2, #0
 800ffee:	d001      	beq.n	800fff4 <_printf_common+0x24>
 800fff0:	3301      	adds	r3, #1
 800fff2:	602b      	str	r3, [r5, #0]
 800fff4:	6823      	ldr	r3, [r4, #0]
 800fff6:	069b      	lsls	r3, r3, #26
 800fff8:	d502      	bpl.n	8010000 <_printf_common+0x30>
 800fffa:	682b      	ldr	r3, [r5, #0]
 800fffc:	3302      	adds	r3, #2
 800fffe:	602b      	str	r3, [r5, #0]
 8010000:	6822      	ldr	r2, [r4, #0]
 8010002:	2306      	movs	r3, #6
 8010004:	0017      	movs	r7, r2
 8010006:	401f      	ands	r7, r3
 8010008:	421a      	tst	r2, r3
 801000a:	d027      	beq.n	801005c <_printf_common+0x8c>
 801000c:	0023      	movs	r3, r4
 801000e:	3343      	adds	r3, #67	; 0x43
 8010010:	781b      	ldrb	r3, [r3, #0]
 8010012:	1e5a      	subs	r2, r3, #1
 8010014:	4193      	sbcs	r3, r2
 8010016:	6822      	ldr	r2, [r4, #0]
 8010018:	0692      	lsls	r2, r2, #26
 801001a:	d430      	bmi.n	801007e <_printf_common+0xae>
 801001c:	0022      	movs	r2, r4
 801001e:	9901      	ldr	r1, [sp, #4]
 8010020:	9800      	ldr	r0, [sp, #0]
 8010022:	9e08      	ldr	r6, [sp, #32]
 8010024:	3243      	adds	r2, #67	; 0x43
 8010026:	47b0      	blx	r6
 8010028:	1c43      	adds	r3, r0, #1
 801002a:	d025      	beq.n	8010078 <_printf_common+0xa8>
 801002c:	2306      	movs	r3, #6
 801002e:	6820      	ldr	r0, [r4, #0]
 8010030:	682a      	ldr	r2, [r5, #0]
 8010032:	68e1      	ldr	r1, [r4, #12]
 8010034:	2500      	movs	r5, #0
 8010036:	4003      	ands	r3, r0
 8010038:	2b04      	cmp	r3, #4
 801003a:	d103      	bne.n	8010044 <_printf_common+0x74>
 801003c:	1a8d      	subs	r5, r1, r2
 801003e:	43eb      	mvns	r3, r5
 8010040:	17db      	asrs	r3, r3, #31
 8010042:	401d      	ands	r5, r3
 8010044:	68a3      	ldr	r3, [r4, #8]
 8010046:	6922      	ldr	r2, [r4, #16]
 8010048:	4293      	cmp	r3, r2
 801004a:	dd01      	ble.n	8010050 <_printf_common+0x80>
 801004c:	1a9b      	subs	r3, r3, r2
 801004e:	18ed      	adds	r5, r5, r3
 8010050:	2700      	movs	r7, #0
 8010052:	42bd      	cmp	r5, r7
 8010054:	d120      	bne.n	8010098 <_printf_common+0xc8>
 8010056:	2000      	movs	r0, #0
 8010058:	e010      	b.n	801007c <_printf_common+0xac>
 801005a:	3701      	adds	r7, #1
 801005c:	68e3      	ldr	r3, [r4, #12]
 801005e:	682a      	ldr	r2, [r5, #0]
 8010060:	1a9b      	subs	r3, r3, r2
 8010062:	42bb      	cmp	r3, r7
 8010064:	ddd2      	ble.n	801000c <_printf_common+0x3c>
 8010066:	0022      	movs	r2, r4
 8010068:	2301      	movs	r3, #1
 801006a:	9901      	ldr	r1, [sp, #4]
 801006c:	9800      	ldr	r0, [sp, #0]
 801006e:	9e08      	ldr	r6, [sp, #32]
 8010070:	3219      	adds	r2, #25
 8010072:	47b0      	blx	r6
 8010074:	1c43      	adds	r3, r0, #1
 8010076:	d1f0      	bne.n	801005a <_printf_common+0x8a>
 8010078:	2001      	movs	r0, #1
 801007a:	4240      	negs	r0, r0
 801007c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801007e:	2030      	movs	r0, #48	; 0x30
 8010080:	18e1      	adds	r1, r4, r3
 8010082:	3143      	adds	r1, #67	; 0x43
 8010084:	7008      	strb	r0, [r1, #0]
 8010086:	0021      	movs	r1, r4
 8010088:	1c5a      	adds	r2, r3, #1
 801008a:	3145      	adds	r1, #69	; 0x45
 801008c:	7809      	ldrb	r1, [r1, #0]
 801008e:	18a2      	adds	r2, r4, r2
 8010090:	3243      	adds	r2, #67	; 0x43
 8010092:	3302      	adds	r3, #2
 8010094:	7011      	strb	r1, [r2, #0]
 8010096:	e7c1      	b.n	801001c <_printf_common+0x4c>
 8010098:	0022      	movs	r2, r4
 801009a:	2301      	movs	r3, #1
 801009c:	9901      	ldr	r1, [sp, #4]
 801009e:	9800      	ldr	r0, [sp, #0]
 80100a0:	9e08      	ldr	r6, [sp, #32]
 80100a2:	321a      	adds	r2, #26
 80100a4:	47b0      	blx	r6
 80100a6:	1c43      	adds	r3, r0, #1
 80100a8:	d0e6      	beq.n	8010078 <_printf_common+0xa8>
 80100aa:	3701      	adds	r7, #1
 80100ac:	e7d1      	b.n	8010052 <_printf_common+0x82>
	...

080100b0 <_printf_i>:
 80100b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100b2:	b08b      	sub	sp, #44	; 0x2c
 80100b4:	9206      	str	r2, [sp, #24]
 80100b6:	000a      	movs	r2, r1
 80100b8:	3243      	adds	r2, #67	; 0x43
 80100ba:	9307      	str	r3, [sp, #28]
 80100bc:	9005      	str	r0, [sp, #20]
 80100be:	9204      	str	r2, [sp, #16]
 80100c0:	7e0a      	ldrb	r2, [r1, #24]
 80100c2:	000c      	movs	r4, r1
 80100c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80100c6:	2a78      	cmp	r2, #120	; 0x78
 80100c8:	d806      	bhi.n	80100d8 <_printf_i+0x28>
 80100ca:	2a62      	cmp	r2, #98	; 0x62
 80100cc:	d808      	bhi.n	80100e0 <_printf_i+0x30>
 80100ce:	2a00      	cmp	r2, #0
 80100d0:	d100      	bne.n	80100d4 <_printf_i+0x24>
 80100d2:	e0c0      	b.n	8010256 <_printf_i+0x1a6>
 80100d4:	2a58      	cmp	r2, #88	; 0x58
 80100d6:	d052      	beq.n	801017e <_printf_i+0xce>
 80100d8:	0026      	movs	r6, r4
 80100da:	3642      	adds	r6, #66	; 0x42
 80100dc:	7032      	strb	r2, [r6, #0]
 80100de:	e022      	b.n	8010126 <_printf_i+0x76>
 80100e0:	0010      	movs	r0, r2
 80100e2:	3863      	subs	r0, #99	; 0x63
 80100e4:	2815      	cmp	r0, #21
 80100e6:	d8f7      	bhi.n	80100d8 <_printf_i+0x28>
 80100e8:	f7f0 f818 	bl	800011c <__gnu_thumb1_case_shi>
 80100ec:	001f0016 	.word	0x001f0016
 80100f0:	fff6fff6 	.word	0xfff6fff6
 80100f4:	fff6fff6 	.word	0xfff6fff6
 80100f8:	fff6001f 	.word	0xfff6001f
 80100fc:	fff6fff6 	.word	0xfff6fff6
 8010100:	00a8fff6 	.word	0x00a8fff6
 8010104:	009a0036 	.word	0x009a0036
 8010108:	fff6fff6 	.word	0xfff6fff6
 801010c:	fff600b9 	.word	0xfff600b9
 8010110:	fff60036 	.word	0xfff60036
 8010114:	009efff6 	.word	0x009efff6
 8010118:	0026      	movs	r6, r4
 801011a:	681a      	ldr	r2, [r3, #0]
 801011c:	3642      	adds	r6, #66	; 0x42
 801011e:	1d11      	adds	r1, r2, #4
 8010120:	6019      	str	r1, [r3, #0]
 8010122:	6813      	ldr	r3, [r2, #0]
 8010124:	7033      	strb	r3, [r6, #0]
 8010126:	2301      	movs	r3, #1
 8010128:	e0a7      	b.n	801027a <_printf_i+0x1ca>
 801012a:	6808      	ldr	r0, [r1, #0]
 801012c:	6819      	ldr	r1, [r3, #0]
 801012e:	1d0a      	adds	r2, r1, #4
 8010130:	0605      	lsls	r5, r0, #24
 8010132:	d50b      	bpl.n	801014c <_printf_i+0x9c>
 8010134:	680d      	ldr	r5, [r1, #0]
 8010136:	601a      	str	r2, [r3, #0]
 8010138:	2d00      	cmp	r5, #0
 801013a:	da03      	bge.n	8010144 <_printf_i+0x94>
 801013c:	232d      	movs	r3, #45	; 0x2d
 801013e:	9a04      	ldr	r2, [sp, #16]
 8010140:	426d      	negs	r5, r5
 8010142:	7013      	strb	r3, [r2, #0]
 8010144:	4b61      	ldr	r3, [pc, #388]	; (80102cc <_printf_i+0x21c>)
 8010146:	270a      	movs	r7, #10
 8010148:	9303      	str	r3, [sp, #12]
 801014a:	e032      	b.n	80101b2 <_printf_i+0x102>
 801014c:	680d      	ldr	r5, [r1, #0]
 801014e:	601a      	str	r2, [r3, #0]
 8010150:	0641      	lsls	r1, r0, #25
 8010152:	d5f1      	bpl.n	8010138 <_printf_i+0x88>
 8010154:	b22d      	sxth	r5, r5
 8010156:	e7ef      	b.n	8010138 <_printf_i+0x88>
 8010158:	680d      	ldr	r5, [r1, #0]
 801015a:	6819      	ldr	r1, [r3, #0]
 801015c:	1d08      	adds	r0, r1, #4
 801015e:	6018      	str	r0, [r3, #0]
 8010160:	062e      	lsls	r6, r5, #24
 8010162:	d501      	bpl.n	8010168 <_printf_i+0xb8>
 8010164:	680d      	ldr	r5, [r1, #0]
 8010166:	e003      	b.n	8010170 <_printf_i+0xc0>
 8010168:	066d      	lsls	r5, r5, #25
 801016a:	d5fb      	bpl.n	8010164 <_printf_i+0xb4>
 801016c:	680d      	ldr	r5, [r1, #0]
 801016e:	b2ad      	uxth	r5, r5
 8010170:	4b56      	ldr	r3, [pc, #344]	; (80102cc <_printf_i+0x21c>)
 8010172:	270a      	movs	r7, #10
 8010174:	9303      	str	r3, [sp, #12]
 8010176:	2a6f      	cmp	r2, #111	; 0x6f
 8010178:	d117      	bne.n	80101aa <_printf_i+0xfa>
 801017a:	2708      	movs	r7, #8
 801017c:	e015      	b.n	80101aa <_printf_i+0xfa>
 801017e:	3145      	adds	r1, #69	; 0x45
 8010180:	700a      	strb	r2, [r1, #0]
 8010182:	4a52      	ldr	r2, [pc, #328]	; (80102cc <_printf_i+0x21c>)
 8010184:	9203      	str	r2, [sp, #12]
 8010186:	681a      	ldr	r2, [r3, #0]
 8010188:	6821      	ldr	r1, [r4, #0]
 801018a:	ca20      	ldmia	r2!, {r5}
 801018c:	601a      	str	r2, [r3, #0]
 801018e:	0608      	lsls	r0, r1, #24
 8010190:	d550      	bpl.n	8010234 <_printf_i+0x184>
 8010192:	07cb      	lsls	r3, r1, #31
 8010194:	d502      	bpl.n	801019c <_printf_i+0xec>
 8010196:	2320      	movs	r3, #32
 8010198:	4319      	orrs	r1, r3
 801019a:	6021      	str	r1, [r4, #0]
 801019c:	2710      	movs	r7, #16
 801019e:	2d00      	cmp	r5, #0
 80101a0:	d103      	bne.n	80101aa <_printf_i+0xfa>
 80101a2:	2320      	movs	r3, #32
 80101a4:	6822      	ldr	r2, [r4, #0]
 80101a6:	439a      	bics	r2, r3
 80101a8:	6022      	str	r2, [r4, #0]
 80101aa:	0023      	movs	r3, r4
 80101ac:	2200      	movs	r2, #0
 80101ae:	3343      	adds	r3, #67	; 0x43
 80101b0:	701a      	strb	r2, [r3, #0]
 80101b2:	6863      	ldr	r3, [r4, #4]
 80101b4:	60a3      	str	r3, [r4, #8]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	db03      	blt.n	80101c2 <_printf_i+0x112>
 80101ba:	2204      	movs	r2, #4
 80101bc:	6821      	ldr	r1, [r4, #0]
 80101be:	4391      	bics	r1, r2
 80101c0:	6021      	str	r1, [r4, #0]
 80101c2:	2d00      	cmp	r5, #0
 80101c4:	d102      	bne.n	80101cc <_printf_i+0x11c>
 80101c6:	9e04      	ldr	r6, [sp, #16]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d00c      	beq.n	80101e6 <_printf_i+0x136>
 80101cc:	9e04      	ldr	r6, [sp, #16]
 80101ce:	0028      	movs	r0, r5
 80101d0:	0039      	movs	r1, r7
 80101d2:	f7f0 f83d 	bl	8000250 <__aeabi_uidivmod>
 80101d6:	9b03      	ldr	r3, [sp, #12]
 80101d8:	3e01      	subs	r6, #1
 80101da:	5c5b      	ldrb	r3, [r3, r1]
 80101dc:	7033      	strb	r3, [r6, #0]
 80101de:	002b      	movs	r3, r5
 80101e0:	0005      	movs	r5, r0
 80101e2:	429f      	cmp	r7, r3
 80101e4:	d9f3      	bls.n	80101ce <_printf_i+0x11e>
 80101e6:	2f08      	cmp	r7, #8
 80101e8:	d109      	bne.n	80101fe <_printf_i+0x14e>
 80101ea:	6823      	ldr	r3, [r4, #0]
 80101ec:	07db      	lsls	r3, r3, #31
 80101ee:	d506      	bpl.n	80101fe <_printf_i+0x14e>
 80101f0:	6863      	ldr	r3, [r4, #4]
 80101f2:	6922      	ldr	r2, [r4, #16]
 80101f4:	4293      	cmp	r3, r2
 80101f6:	dc02      	bgt.n	80101fe <_printf_i+0x14e>
 80101f8:	2330      	movs	r3, #48	; 0x30
 80101fa:	3e01      	subs	r6, #1
 80101fc:	7033      	strb	r3, [r6, #0]
 80101fe:	9b04      	ldr	r3, [sp, #16]
 8010200:	1b9b      	subs	r3, r3, r6
 8010202:	6123      	str	r3, [r4, #16]
 8010204:	9b07      	ldr	r3, [sp, #28]
 8010206:	0021      	movs	r1, r4
 8010208:	9300      	str	r3, [sp, #0]
 801020a:	9805      	ldr	r0, [sp, #20]
 801020c:	9b06      	ldr	r3, [sp, #24]
 801020e:	aa09      	add	r2, sp, #36	; 0x24
 8010210:	f7ff fede 	bl	800ffd0 <_printf_common>
 8010214:	1c43      	adds	r3, r0, #1
 8010216:	d135      	bne.n	8010284 <_printf_i+0x1d4>
 8010218:	2001      	movs	r0, #1
 801021a:	4240      	negs	r0, r0
 801021c:	b00b      	add	sp, #44	; 0x2c
 801021e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010220:	2220      	movs	r2, #32
 8010222:	6809      	ldr	r1, [r1, #0]
 8010224:	430a      	orrs	r2, r1
 8010226:	6022      	str	r2, [r4, #0]
 8010228:	0022      	movs	r2, r4
 801022a:	2178      	movs	r1, #120	; 0x78
 801022c:	3245      	adds	r2, #69	; 0x45
 801022e:	7011      	strb	r1, [r2, #0]
 8010230:	4a27      	ldr	r2, [pc, #156]	; (80102d0 <_printf_i+0x220>)
 8010232:	e7a7      	b.n	8010184 <_printf_i+0xd4>
 8010234:	0648      	lsls	r0, r1, #25
 8010236:	d5ac      	bpl.n	8010192 <_printf_i+0xe2>
 8010238:	b2ad      	uxth	r5, r5
 801023a:	e7aa      	b.n	8010192 <_printf_i+0xe2>
 801023c:	681a      	ldr	r2, [r3, #0]
 801023e:	680d      	ldr	r5, [r1, #0]
 8010240:	1d10      	adds	r0, r2, #4
 8010242:	6949      	ldr	r1, [r1, #20]
 8010244:	6018      	str	r0, [r3, #0]
 8010246:	6813      	ldr	r3, [r2, #0]
 8010248:	062e      	lsls	r6, r5, #24
 801024a:	d501      	bpl.n	8010250 <_printf_i+0x1a0>
 801024c:	6019      	str	r1, [r3, #0]
 801024e:	e002      	b.n	8010256 <_printf_i+0x1a6>
 8010250:	066d      	lsls	r5, r5, #25
 8010252:	d5fb      	bpl.n	801024c <_printf_i+0x19c>
 8010254:	8019      	strh	r1, [r3, #0]
 8010256:	2300      	movs	r3, #0
 8010258:	9e04      	ldr	r6, [sp, #16]
 801025a:	6123      	str	r3, [r4, #16]
 801025c:	e7d2      	b.n	8010204 <_printf_i+0x154>
 801025e:	681a      	ldr	r2, [r3, #0]
 8010260:	1d11      	adds	r1, r2, #4
 8010262:	6019      	str	r1, [r3, #0]
 8010264:	6816      	ldr	r6, [r2, #0]
 8010266:	2100      	movs	r1, #0
 8010268:	0030      	movs	r0, r6
 801026a:	6862      	ldr	r2, [r4, #4]
 801026c:	f000 f844 	bl	80102f8 <memchr>
 8010270:	2800      	cmp	r0, #0
 8010272:	d001      	beq.n	8010278 <_printf_i+0x1c8>
 8010274:	1b80      	subs	r0, r0, r6
 8010276:	6060      	str	r0, [r4, #4]
 8010278:	6863      	ldr	r3, [r4, #4]
 801027a:	6123      	str	r3, [r4, #16]
 801027c:	2300      	movs	r3, #0
 801027e:	9a04      	ldr	r2, [sp, #16]
 8010280:	7013      	strb	r3, [r2, #0]
 8010282:	e7bf      	b.n	8010204 <_printf_i+0x154>
 8010284:	6923      	ldr	r3, [r4, #16]
 8010286:	0032      	movs	r2, r6
 8010288:	9906      	ldr	r1, [sp, #24]
 801028a:	9805      	ldr	r0, [sp, #20]
 801028c:	9d07      	ldr	r5, [sp, #28]
 801028e:	47a8      	blx	r5
 8010290:	1c43      	adds	r3, r0, #1
 8010292:	d0c1      	beq.n	8010218 <_printf_i+0x168>
 8010294:	6823      	ldr	r3, [r4, #0]
 8010296:	079b      	lsls	r3, r3, #30
 8010298:	d415      	bmi.n	80102c6 <_printf_i+0x216>
 801029a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801029c:	68e0      	ldr	r0, [r4, #12]
 801029e:	4298      	cmp	r0, r3
 80102a0:	dabc      	bge.n	801021c <_printf_i+0x16c>
 80102a2:	0018      	movs	r0, r3
 80102a4:	e7ba      	b.n	801021c <_printf_i+0x16c>
 80102a6:	0022      	movs	r2, r4
 80102a8:	2301      	movs	r3, #1
 80102aa:	9906      	ldr	r1, [sp, #24]
 80102ac:	9805      	ldr	r0, [sp, #20]
 80102ae:	9e07      	ldr	r6, [sp, #28]
 80102b0:	3219      	adds	r2, #25
 80102b2:	47b0      	blx	r6
 80102b4:	1c43      	adds	r3, r0, #1
 80102b6:	d0af      	beq.n	8010218 <_printf_i+0x168>
 80102b8:	3501      	adds	r5, #1
 80102ba:	68e3      	ldr	r3, [r4, #12]
 80102bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80102be:	1a9b      	subs	r3, r3, r2
 80102c0:	42ab      	cmp	r3, r5
 80102c2:	dcf0      	bgt.n	80102a6 <_printf_i+0x1f6>
 80102c4:	e7e9      	b.n	801029a <_printf_i+0x1ea>
 80102c6:	2500      	movs	r5, #0
 80102c8:	e7f7      	b.n	80102ba <_printf_i+0x20a>
 80102ca:	46c0      	nop			; (mov r8, r8)
 80102cc:	08011391 	.word	0x08011391
 80102d0:	080113a2 	.word	0x080113a2

080102d4 <_sbrk_r>:
 80102d4:	2300      	movs	r3, #0
 80102d6:	b570      	push	{r4, r5, r6, lr}
 80102d8:	4d06      	ldr	r5, [pc, #24]	; (80102f4 <_sbrk_r+0x20>)
 80102da:	0004      	movs	r4, r0
 80102dc:	0008      	movs	r0, r1
 80102de:	602b      	str	r3, [r5, #0]
 80102e0:	f000 fa12 	bl	8010708 <_sbrk>
 80102e4:	1c43      	adds	r3, r0, #1
 80102e6:	d103      	bne.n	80102f0 <_sbrk_r+0x1c>
 80102e8:	682b      	ldr	r3, [r5, #0]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d000      	beq.n	80102f0 <_sbrk_r+0x1c>
 80102ee:	6023      	str	r3, [r4, #0]
 80102f0:	bd70      	pop	{r4, r5, r6, pc}
 80102f2:	46c0      	nop			; (mov r8, r8)
 80102f4:	20001720 	.word	0x20001720

080102f8 <memchr>:
 80102f8:	b2c9      	uxtb	r1, r1
 80102fa:	1882      	adds	r2, r0, r2
 80102fc:	4290      	cmp	r0, r2
 80102fe:	d101      	bne.n	8010304 <memchr+0xc>
 8010300:	2000      	movs	r0, #0
 8010302:	4770      	bx	lr
 8010304:	7803      	ldrb	r3, [r0, #0]
 8010306:	428b      	cmp	r3, r1
 8010308:	d0fb      	beq.n	8010302 <memchr+0xa>
 801030a:	3001      	adds	r0, #1
 801030c:	e7f6      	b.n	80102fc <memchr+0x4>

0801030e <memmove>:
 801030e:	b510      	push	{r4, lr}
 8010310:	4288      	cmp	r0, r1
 8010312:	d902      	bls.n	801031a <memmove+0xc>
 8010314:	188b      	adds	r3, r1, r2
 8010316:	4298      	cmp	r0, r3
 8010318:	d303      	bcc.n	8010322 <memmove+0x14>
 801031a:	2300      	movs	r3, #0
 801031c:	e007      	b.n	801032e <memmove+0x20>
 801031e:	5c8b      	ldrb	r3, [r1, r2]
 8010320:	5483      	strb	r3, [r0, r2]
 8010322:	3a01      	subs	r2, #1
 8010324:	d2fb      	bcs.n	801031e <memmove+0x10>
 8010326:	bd10      	pop	{r4, pc}
 8010328:	5ccc      	ldrb	r4, [r1, r3]
 801032a:	54c4      	strb	r4, [r0, r3]
 801032c:	3301      	adds	r3, #1
 801032e:	429a      	cmp	r2, r3
 8010330:	d1fa      	bne.n	8010328 <memmove+0x1a>
 8010332:	e7f8      	b.n	8010326 <memmove+0x18>

08010334 <__malloc_lock>:
 8010334:	b510      	push	{r4, lr}
 8010336:	4802      	ldr	r0, [pc, #8]	; (8010340 <__malloc_lock+0xc>)
 8010338:	f7ff fc88 	bl	800fc4c <__retarget_lock_acquire_recursive>
 801033c:	bd10      	pop	{r4, pc}
 801033e:	46c0      	nop			; (mov r8, r8)
 8010340:	20001718 	.word	0x20001718

08010344 <__malloc_unlock>:
 8010344:	b510      	push	{r4, lr}
 8010346:	4802      	ldr	r0, [pc, #8]	; (8010350 <__malloc_unlock+0xc>)
 8010348:	f7ff fc81 	bl	800fc4e <__retarget_lock_release_recursive>
 801034c:	bd10      	pop	{r4, pc}
 801034e:	46c0      	nop			; (mov r8, r8)
 8010350:	20001718 	.word	0x20001718

08010354 <_free_r>:
 8010354:	b570      	push	{r4, r5, r6, lr}
 8010356:	0005      	movs	r5, r0
 8010358:	2900      	cmp	r1, #0
 801035a:	d010      	beq.n	801037e <_free_r+0x2a>
 801035c:	1f0c      	subs	r4, r1, #4
 801035e:	6823      	ldr	r3, [r4, #0]
 8010360:	2b00      	cmp	r3, #0
 8010362:	da00      	bge.n	8010366 <_free_r+0x12>
 8010364:	18e4      	adds	r4, r4, r3
 8010366:	0028      	movs	r0, r5
 8010368:	f7ff ffe4 	bl	8010334 <__malloc_lock>
 801036c:	4a1d      	ldr	r2, [pc, #116]	; (80103e4 <_free_r+0x90>)
 801036e:	6813      	ldr	r3, [r2, #0]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d105      	bne.n	8010380 <_free_r+0x2c>
 8010374:	6063      	str	r3, [r4, #4]
 8010376:	6014      	str	r4, [r2, #0]
 8010378:	0028      	movs	r0, r5
 801037a:	f7ff ffe3 	bl	8010344 <__malloc_unlock>
 801037e:	bd70      	pop	{r4, r5, r6, pc}
 8010380:	42a3      	cmp	r3, r4
 8010382:	d908      	bls.n	8010396 <_free_r+0x42>
 8010384:	6821      	ldr	r1, [r4, #0]
 8010386:	1860      	adds	r0, r4, r1
 8010388:	4283      	cmp	r3, r0
 801038a:	d1f3      	bne.n	8010374 <_free_r+0x20>
 801038c:	6818      	ldr	r0, [r3, #0]
 801038e:	685b      	ldr	r3, [r3, #4]
 8010390:	1841      	adds	r1, r0, r1
 8010392:	6021      	str	r1, [r4, #0]
 8010394:	e7ee      	b.n	8010374 <_free_r+0x20>
 8010396:	001a      	movs	r2, r3
 8010398:	685b      	ldr	r3, [r3, #4]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d001      	beq.n	80103a2 <_free_r+0x4e>
 801039e:	42a3      	cmp	r3, r4
 80103a0:	d9f9      	bls.n	8010396 <_free_r+0x42>
 80103a2:	6811      	ldr	r1, [r2, #0]
 80103a4:	1850      	adds	r0, r2, r1
 80103a6:	42a0      	cmp	r0, r4
 80103a8:	d10b      	bne.n	80103c2 <_free_r+0x6e>
 80103aa:	6820      	ldr	r0, [r4, #0]
 80103ac:	1809      	adds	r1, r1, r0
 80103ae:	1850      	adds	r0, r2, r1
 80103b0:	6011      	str	r1, [r2, #0]
 80103b2:	4283      	cmp	r3, r0
 80103b4:	d1e0      	bne.n	8010378 <_free_r+0x24>
 80103b6:	6818      	ldr	r0, [r3, #0]
 80103b8:	685b      	ldr	r3, [r3, #4]
 80103ba:	1841      	adds	r1, r0, r1
 80103bc:	6011      	str	r1, [r2, #0]
 80103be:	6053      	str	r3, [r2, #4]
 80103c0:	e7da      	b.n	8010378 <_free_r+0x24>
 80103c2:	42a0      	cmp	r0, r4
 80103c4:	d902      	bls.n	80103cc <_free_r+0x78>
 80103c6:	230c      	movs	r3, #12
 80103c8:	602b      	str	r3, [r5, #0]
 80103ca:	e7d5      	b.n	8010378 <_free_r+0x24>
 80103cc:	6821      	ldr	r1, [r4, #0]
 80103ce:	1860      	adds	r0, r4, r1
 80103d0:	4283      	cmp	r3, r0
 80103d2:	d103      	bne.n	80103dc <_free_r+0x88>
 80103d4:	6818      	ldr	r0, [r3, #0]
 80103d6:	685b      	ldr	r3, [r3, #4]
 80103d8:	1841      	adds	r1, r0, r1
 80103da:	6021      	str	r1, [r4, #0]
 80103dc:	6063      	str	r3, [r4, #4]
 80103de:	6054      	str	r4, [r2, #4]
 80103e0:	e7ca      	b.n	8010378 <_free_r+0x24>
 80103e2:	46c0      	nop			; (mov r8, r8)
 80103e4:	20001548 	.word	0x20001548

080103e8 <_realloc_r>:
 80103e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103ea:	0007      	movs	r7, r0
 80103ec:	000d      	movs	r5, r1
 80103ee:	0016      	movs	r6, r2
 80103f0:	2900      	cmp	r1, #0
 80103f2:	d105      	bne.n	8010400 <_realloc_r+0x18>
 80103f4:	0011      	movs	r1, r2
 80103f6:	f7ff fc2b 	bl	800fc50 <_malloc_r>
 80103fa:	0004      	movs	r4, r0
 80103fc:	0020      	movs	r0, r4
 80103fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010400:	2a00      	cmp	r2, #0
 8010402:	d103      	bne.n	801040c <_realloc_r+0x24>
 8010404:	f7ff ffa6 	bl	8010354 <_free_r>
 8010408:	0034      	movs	r4, r6
 801040a:	e7f7      	b.n	80103fc <_realloc_r+0x14>
 801040c:	f000 f812 	bl	8010434 <_malloc_usable_size_r>
 8010410:	002c      	movs	r4, r5
 8010412:	42b0      	cmp	r0, r6
 8010414:	d2f2      	bcs.n	80103fc <_realloc_r+0x14>
 8010416:	0031      	movs	r1, r6
 8010418:	0038      	movs	r0, r7
 801041a:	f7ff fc19 	bl	800fc50 <_malloc_r>
 801041e:	1e04      	subs	r4, r0, #0
 8010420:	d0ec      	beq.n	80103fc <_realloc_r+0x14>
 8010422:	0029      	movs	r1, r5
 8010424:	0032      	movs	r2, r6
 8010426:	f7ff fbc9 	bl	800fbbc <memcpy>
 801042a:	0029      	movs	r1, r5
 801042c:	0038      	movs	r0, r7
 801042e:	f7ff ff91 	bl	8010354 <_free_r>
 8010432:	e7e3      	b.n	80103fc <_realloc_r+0x14>

08010434 <_malloc_usable_size_r>:
 8010434:	1f0b      	subs	r3, r1, #4
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	1f18      	subs	r0, r3, #4
 801043a:	2b00      	cmp	r3, #0
 801043c:	da01      	bge.n	8010442 <_malloc_usable_size_r+0xe>
 801043e:	580b      	ldr	r3, [r1, r0]
 8010440:	18c0      	adds	r0, r0, r3
 8010442:	4770      	bx	lr

08010444 <ceil>:
 8010444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010446:	004b      	lsls	r3, r1, #1
 8010448:	4a3d      	ldr	r2, [pc, #244]	; (8010540 <ceil+0xfc>)
 801044a:	0d5b      	lsrs	r3, r3, #21
 801044c:	189f      	adds	r7, r3, r2
 801044e:	4684      	mov	ip, r0
 8010450:	000e      	movs	r6, r1
 8010452:	000c      	movs	r4, r1
 8010454:	0005      	movs	r5, r0
 8010456:	9001      	str	r0, [sp, #4]
 8010458:	2f13      	cmp	r7, #19
 801045a:	dc33      	bgt.n	80104c4 <ceil+0x80>
 801045c:	2f00      	cmp	r7, #0
 801045e:	da15      	bge.n	801048c <ceil+0x48>
 8010460:	4a38      	ldr	r2, [pc, #224]	; (8010544 <ceil+0x100>)
 8010462:	4b39      	ldr	r3, [pc, #228]	; (8010548 <ceil+0x104>)
 8010464:	4660      	mov	r0, ip
 8010466:	0031      	movs	r1, r6
 8010468:	f7f1 f820 	bl	80014ac <__aeabi_dadd>
 801046c:	2200      	movs	r2, #0
 801046e:	2300      	movs	r3, #0
 8010470:	f7f0 f808 	bl	8000484 <__aeabi_dcmpgt>
 8010474:	2800      	cmp	r0, #0
 8010476:	d006      	beq.n	8010486 <ceil+0x42>
 8010478:	2e00      	cmp	r6, #0
 801047a:	db5c      	blt.n	8010536 <ceil+0xf2>
 801047c:	432c      	orrs	r4, r5
 801047e:	2500      	movs	r5, #0
 8010480:	42ac      	cmp	r4, r5
 8010482:	d000      	beq.n	8010486 <ceil+0x42>
 8010484:	4c31      	ldr	r4, [pc, #196]	; (801054c <ceil+0x108>)
 8010486:	46ac      	mov	ip, r5
 8010488:	0026      	movs	r6, r4
 801048a:	e029      	b.n	80104e0 <ceil+0x9c>
 801048c:	4b30      	ldr	r3, [pc, #192]	; (8010550 <ceil+0x10c>)
 801048e:	413b      	asrs	r3, r7
 8010490:	9300      	str	r3, [sp, #0]
 8010492:	400b      	ands	r3, r1
 8010494:	4303      	orrs	r3, r0
 8010496:	d023      	beq.n	80104e0 <ceil+0x9c>
 8010498:	4a2a      	ldr	r2, [pc, #168]	; (8010544 <ceil+0x100>)
 801049a:	4b2b      	ldr	r3, [pc, #172]	; (8010548 <ceil+0x104>)
 801049c:	4660      	mov	r0, ip
 801049e:	0031      	movs	r1, r6
 80104a0:	f7f1 f804 	bl	80014ac <__aeabi_dadd>
 80104a4:	2200      	movs	r2, #0
 80104a6:	2300      	movs	r3, #0
 80104a8:	f7ef ffec 	bl	8000484 <__aeabi_dcmpgt>
 80104ac:	2800      	cmp	r0, #0
 80104ae:	d0ea      	beq.n	8010486 <ceil+0x42>
 80104b0:	2e00      	cmp	r6, #0
 80104b2:	dd03      	ble.n	80104bc <ceil+0x78>
 80104b4:	2380      	movs	r3, #128	; 0x80
 80104b6:	035b      	lsls	r3, r3, #13
 80104b8:	413b      	asrs	r3, r7
 80104ba:	18f4      	adds	r4, r6, r3
 80104bc:	9b00      	ldr	r3, [sp, #0]
 80104be:	2500      	movs	r5, #0
 80104c0:	439c      	bics	r4, r3
 80104c2:	e7e0      	b.n	8010486 <ceil+0x42>
 80104c4:	2f33      	cmp	r7, #51	; 0x33
 80104c6:	dd0f      	ble.n	80104e8 <ceil+0xa4>
 80104c8:	2380      	movs	r3, #128	; 0x80
 80104ca:	00db      	lsls	r3, r3, #3
 80104cc:	429f      	cmp	r7, r3
 80104ce:	d107      	bne.n	80104e0 <ceil+0x9c>
 80104d0:	0002      	movs	r2, r0
 80104d2:	000b      	movs	r3, r1
 80104d4:	4660      	mov	r0, ip
 80104d6:	0031      	movs	r1, r6
 80104d8:	f7f0 ffe8 	bl	80014ac <__aeabi_dadd>
 80104dc:	4684      	mov	ip, r0
 80104de:	000e      	movs	r6, r1
 80104e0:	4660      	mov	r0, ip
 80104e2:	0031      	movs	r1, r6
 80104e4:	b003      	add	sp, #12
 80104e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104e8:	4a1a      	ldr	r2, [pc, #104]	; (8010554 <ceil+0x110>)
 80104ea:	189b      	adds	r3, r3, r2
 80104ec:	2201      	movs	r2, #1
 80104ee:	4252      	negs	r2, r2
 80104f0:	40da      	lsrs	r2, r3
 80104f2:	9200      	str	r2, [sp, #0]
 80104f4:	4210      	tst	r0, r2
 80104f6:	d0f3      	beq.n	80104e0 <ceil+0x9c>
 80104f8:	4a12      	ldr	r2, [pc, #72]	; (8010544 <ceil+0x100>)
 80104fa:	4b13      	ldr	r3, [pc, #76]	; (8010548 <ceil+0x104>)
 80104fc:	4660      	mov	r0, ip
 80104fe:	0031      	movs	r1, r6
 8010500:	f7f0 ffd4 	bl	80014ac <__aeabi_dadd>
 8010504:	2200      	movs	r2, #0
 8010506:	2300      	movs	r3, #0
 8010508:	f7ef ffbc 	bl	8000484 <__aeabi_dcmpgt>
 801050c:	2800      	cmp	r0, #0
 801050e:	d0ba      	beq.n	8010486 <ceil+0x42>
 8010510:	2e00      	cmp	r6, #0
 8010512:	dd02      	ble.n	801051a <ceil+0xd6>
 8010514:	2f14      	cmp	r7, #20
 8010516:	d103      	bne.n	8010520 <ceil+0xdc>
 8010518:	3401      	adds	r4, #1
 801051a:	9b00      	ldr	r3, [sp, #0]
 801051c:	439d      	bics	r5, r3
 801051e:	e7b2      	b.n	8010486 <ceil+0x42>
 8010520:	2334      	movs	r3, #52	; 0x34
 8010522:	1bdf      	subs	r7, r3, r7
 8010524:	3b33      	subs	r3, #51	; 0x33
 8010526:	40bb      	lsls	r3, r7
 8010528:	18ed      	adds	r5, r5, r3
 801052a:	9b01      	ldr	r3, [sp, #4]
 801052c:	429d      	cmp	r5, r3
 801052e:	419b      	sbcs	r3, r3
 8010530:	425b      	negs	r3, r3
 8010532:	18f4      	adds	r4, r6, r3
 8010534:	e7f1      	b.n	801051a <ceil+0xd6>
 8010536:	2480      	movs	r4, #128	; 0x80
 8010538:	2500      	movs	r5, #0
 801053a:	0624      	lsls	r4, r4, #24
 801053c:	e7a3      	b.n	8010486 <ceil+0x42>
 801053e:	46c0      	nop			; (mov r8, r8)
 8010540:	fffffc01 	.word	0xfffffc01
 8010544:	8800759c 	.word	0x8800759c
 8010548:	7e37e43c 	.word	0x7e37e43c
 801054c:	3ff00000 	.word	0x3ff00000
 8010550:	000fffff 	.word	0x000fffff
 8010554:	fffffbed 	.word	0xfffffbed

08010558 <floor>:
 8010558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801055a:	004b      	lsls	r3, r1, #1
 801055c:	4a3d      	ldr	r2, [pc, #244]	; (8010654 <floor+0xfc>)
 801055e:	0d5b      	lsrs	r3, r3, #21
 8010560:	189f      	adds	r7, r3, r2
 8010562:	4684      	mov	ip, r0
 8010564:	000e      	movs	r6, r1
 8010566:	000d      	movs	r5, r1
 8010568:	0004      	movs	r4, r0
 801056a:	9001      	str	r0, [sp, #4]
 801056c:	2f13      	cmp	r7, #19
 801056e:	dc34      	bgt.n	80105da <floor+0x82>
 8010570:	2f00      	cmp	r7, #0
 8010572:	da16      	bge.n	80105a2 <floor+0x4a>
 8010574:	4a38      	ldr	r2, [pc, #224]	; (8010658 <floor+0x100>)
 8010576:	4b39      	ldr	r3, [pc, #228]	; (801065c <floor+0x104>)
 8010578:	4660      	mov	r0, ip
 801057a:	0031      	movs	r1, r6
 801057c:	f7f0 ff96 	bl	80014ac <__aeabi_dadd>
 8010580:	2200      	movs	r2, #0
 8010582:	2300      	movs	r3, #0
 8010584:	f7ef ff7e 	bl	8000484 <__aeabi_dcmpgt>
 8010588:	2800      	cmp	r0, #0
 801058a:	d007      	beq.n	801059c <floor+0x44>
 801058c:	2e00      	cmp	r6, #0
 801058e:	da5d      	bge.n	801064c <floor+0xf4>
 8010590:	0073      	lsls	r3, r6, #1
 8010592:	085b      	lsrs	r3, r3, #1
 8010594:	431c      	orrs	r4, r3
 8010596:	d001      	beq.n	801059c <floor+0x44>
 8010598:	2400      	movs	r4, #0
 801059a:	4d31      	ldr	r5, [pc, #196]	; (8010660 <floor+0x108>)
 801059c:	46a4      	mov	ip, r4
 801059e:	002e      	movs	r6, r5
 80105a0:	e029      	b.n	80105f6 <floor+0x9e>
 80105a2:	4b30      	ldr	r3, [pc, #192]	; (8010664 <floor+0x10c>)
 80105a4:	413b      	asrs	r3, r7
 80105a6:	9300      	str	r3, [sp, #0]
 80105a8:	400b      	ands	r3, r1
 80105aa:	4303      	orrs	r3, r0
 80105ac:	d023      	beq.n	80105f6 <floor+0x9e>
 80105ae:	4a2a      	ldr	r2, [pc, #168]	; (8010658 <floor+0x100>)
 80105b0:	4b2a      	ldr	r3, [pc, #168]	; (801065c <floor+0x104>)
 80105b2:	4660      	mov	r0, ip
 80105b4:	0031      	movs	r1, r6
 80105b6:	f7f0 ff79 	bl	80014ac <__aeabi_dadd>
 80105ba:	2200      	movs	r2, #0
 80105bc:	2300      	movs	r3, #0
 80105be:	f7ef ff61 	bl	8000484 <__aeabi_dcmpgt>
 80105c2:	2800      	cmp	r0, #0
 80105c4:	d0ea      	beq.n	801059c <floor+0x44>
 80105c6:	2e00      	cmp	r6, #0
 80105c8:	da03      	bge.n	80105d2 <floor+0x7a>
 80105ca:	2380      	movs	r3, #128	; 0x80
 80105cc:	035b      	lsls	r3, r3, #13
 80105ce:	413b      	asrs	r3, r7
 80105d0:	18f5      	adds	r5, r6, r3
 80105d2:	9b00      	ldr	r3, [sp, #0]
 80105d4:	2400      	movs	r4, #0
 80105d6:	439d      	bics	r5, r3
 80105d8:	e7e0      	b.n	801059c <floor+0x44>
 80105da:	2f33      	cmp	r7, #51	; 0x33
 80105dc:	dd0f      	ble.n	80105fe <floor+0xa6>
 80105de:	2380      	movs	r3, #128	; 0x80
 80105e0:	00db      	lsls	r3, r3, #3
 80105e2:	429f      	cmp	r7, r3
 80105e4:	d107      	bne.n	80105f6 <floor+0x9e>
 80105e6:	0002      	movs	r2, r0
 80105e8:	000b      	movs	r3, r1
 80105ea:	4660      	mov	r0, ip
 80105ec:	0031      	movs	r1, r6
 80105ee:	f7f0 ff5d 	bl	80014ac <__aeabi_dadd>
 80105f2:	4684      	mov	ip, r0
 80105f4:	000e      	movs	r6, r1
 80105f6:	4660      	mov	r0, ip
 80105f8:	0031      	movs	r1, r6
 80105fa:	b003      	add	sp, #12
 80105fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105fe:	4a1a      	ldr	r2, [pc, #104]	; (8010668 <floor+0x110>)
 8010600:	189b      	adds	r3, r3, r2
 8010602:	2201      	movs	r2, #1
 8010604:	4252      	negs	r2, r2
 8010606:	40da      	lsrs	r2, r3
 8010608:	9200      	str	r2, [sp, #0]
 801060a:	4210      	tst	r0, r2
 801060c:	d0f3      	beq.n	80105f6 <floor+0x9e>
 801060e:	4a12      	ldr	r2, [pc, #72]	; (8010658 <floor+0x100>)
 8010610:	4b12      	ldr	r3, [pc, #72]	; (801065c <floor+0x104>)
 8010612:	4660      	mov	r0, ip
 8010614:	0031      	movs	r1, r6
 8010616:	f7f0 ff49 	bl	80014ac <__aeabi_dadd>
 801061a:	2200      	movs	r2, #0
 801061c:	2300      	movs	r3, #0
 801061e:	f7ef ff31 	bl	8000484 <__aeabi_dcmpgt>
 8010622:	2800      	cmp	r0, #0
 8010624:	d0ba      	beq.n	801059c <floor+0x44>
 8010626:	2e00      	cmp	r6, #0
 8010628:	da02      	bge.n	8010630 <floor+0xd8>
 801062a:	2f14      	cmp	r7, #20
 801062c:	d103      	bne.n	8010636 <floor+0xde>
 801062e:	3501      	adds	r5, #1
 8010630:	9b00      	ldr	r3, [sp, #0]
 8010632:	439c      	bics	r4, r3
 8010634:	e7b2      	b.n	801059c <floor+0x44>
 8010636:	2334      	movs	r3, #52	; 0x34
 8010638:	1bdf      	subs	r7, r3, r7
 801063a:	3b33      	subs	r3, #51	; 0x33
 801063c:	40bb      	lsls	r3, r7
 801063e:	18e4      	adds	r4, r4, r3
 8010640:	9b01      	ldr	r3, [sp, #4]
 8010642:	429c      	cmp	r4, r3
 8010644:	419b      	sbcs	r3, r3
 8010646:	425b      	negs	r3, r3
 8010648:	18f5      	adds	r5, r6, r3
 801064a:	e7f1      	b.n	8010630 <floor+0xd8>
 801064c:	2400      	movs	r4, #0
 801064e:	0025      	movs	r5, r4
 8010650:	e7a4      	b.n	801059c <floor+0x44>
 8010652:	46c0      	nop			; (mov r8, r8)
 8010654:	fffffc01 	.word	0xfffffc01
 8010658:	8800759c 	.word	0x8800759c
 801065c:	7e37e43c 	.word	0x7e37e43c
 8010660:	bff00000 	.word	0xbff00000
 8010664:	000fffff 	.word	0x000fffff
 8010668:	fffffbed 	.word	0xfffffbed

0801066c <round>:
 801066c:	b570      	push	{r4, r5, r6, lr}
 801066e:	000d      	movs	r5, r1
 8010670:	0006      	movs	r6, r0
 8010672:	0001      	movs	r1, r0
 8010674:	006a      	lsls	r2, r5, #1
 8010676:	4820      	ldr	r0, [pc, #128]	; (80106f8 <round+0x8c>)
 8010678:	0d52      	lsrs	r2, r2, #21
 801067a:	1810      	adds	r0, r2, r0
 801067c:	2813      	cmp	r0, #19
 801067e:	dc18      	bgt.n	80106b2 <round+0x46>
 8010680:	2800      	cmp	r0, #0
 8010682:	da09      	bge.n	8010698 <round+0x2c>
 8010684:	0feb      	lsrs	r3, r5, #31
 8010686:	2200      	movs	r2, #0
 8010688:	07db      	lsls	r3, r3, #31
 801068a:	1c41      	adds	r1, r0, #1
 801068c:	d101      	bne.n	8010692 <round+0x26>
 801068e:	491b      	ldr	r1, [pc, #108]	; (80106fc <round+0x90>)
 8010690:	430b      	orrs	r3, r1
 8010692:	0019      	movs	r1, r3
 8010694:	0010      	movs	r0, r2
 8010696:	e018      	b.n	80106ca <round+0x5e>
 8010698:	4c19      	ldr	r4, [pc, #100]	; (8010700 <round+0x94>)
 801069a:	4104      	asrs	r4, r0
 801069c:	0022      	movs	r2, r4
 801069e:	402a      	ands	r2, r5
 80106a0:	4311      	orrs	r1, r2
 80106a2:	d014      	beq.n	80106ce <round+0x62>
 80106a4:	2280      	movs	r2, #128	; 0x80
 80106a6:	0312      	lsls	r2, r2, #12
 80106a8:	4102      	asrs	r2, r0
 80106aa:	1953      	adds	r3, r2, r5
 80106ac:	43a3      	bics	r3, r4
 80106ae:	2200      	movs	r2, #0
 80106b0:	e7ef      	b.n	8010692 <round+0x26>
 80106b2:	2833      	cmp	r0, #51	; 0x33
 80106b4:	dd0e      	ble.n	80106d4 <round+0x68>
 80106b6:	2380      	movs	r3, #128	; 0x80
 80106b8:	00db      	lsls	r3, r3, #3
 80106ba:	4298      	cmp	r0, r3
 80106bc:	d107      	bne.n	80106ce <round+0x62>
 80106be:	0032      	movs	r2, r6
 80106c0:	002b      	movs	r3, r5
 80106c2:	0030      	movs	r0, r6
 80106c4:	0029      	movs	r1, r5
 80106c6:	f7f0 fef1 	bl	80014ac <__aeabi_dadd>
 80106ca:	0006      	movs	r6, r0
 80106cc:	000d      	movs	r5, r1
 80106ce:	0030      	movs	r0, r6
 80106d0:	0029      	movs	r1, r5
 80106d2:	bd70      	pop	{r4, r5, r6, pc}
 80106d4:	4c0b      	ldr	r4, [pc, #44]	; (8010704 <round+0x98>)
 80106d6:	1912      	adds	r2, r2, r4
 80106d8:	2401      	movs	r4, #1
 80106da:	4264      	negs	r4, r4
 80106dc:	40d4      	lsrs	r4, r2
 80106de:	4234      	tst	r4, r6
 80106e0:	d0f5      	beq.n	80106ce <round+0x62>
 80106e2:	2233      	movs	r2, #51	; 0x33
 80106e4:	1a10      	subs	r0, r2, r0
 80106e6:	3a32      	subs	r2, #50	; 0x32
 80106e8:	4082      	lsls	r2, r0
 80106ea:	1992      	adds	r2, r2, r6
 80106ec:	42b2      	cmp	r2, r6
 80106ee:	4189      	sbcs	r1, r1
 80106f0:	4249      	negs	r1, r1
 80106f2:	186b      	adds	r3, r5, r1
 80106f4:	43a2      	bics	r2, r4
 80106f6:	e7cc      	b.n	8010692 <round+0x26>
 80106f8:	fffffc01 	.word	0xfffffc01
 80106fc:	3ff00000 	.word	0x3ff00000
 8010700:	000fffff 	.word	0x000fffff
 8010704:	fffffbed 	.word	0xfffffbed

08010708 <_sbrk>:
 8010708:	4a05      	ldr	r2, [pc, #20]	; (8010720 <_sbrk+0x18>)
 801070a:	0003      	movs	r3, r0
 801070c:	6811      	ldr	r1, [r2, #0]
 801070e:	2900      	cmp	r1, #0
 8010710:	d101      	bne.n	8010716 <_sbrk+0xe>
 8010712:	4904      	ldr	r1, [pc, #16]	; (8010724 <_sbrk+0x1c>)
 8010714:	6011      	str	r1, [r2, #0]
 8010716:	6810      	ldr	r0, [r2, #0]
 8010718:	18c3      	adds	r3, r0, r3
 801071a:	6013      	str	r3, [r2, #0]
 801071c:	4770      	bx	lr
 801071e:	46c0      	nop			; (mov r8, r8)
 8010720:	20001550 	.word	0x20001550
 8010724:	20001728 	.word	0x20001728

08010728 <_init>:
 8010728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801072a:	46c0      	nop			; (mov r8, r8)
 801072c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801072e:	bc08      	pop	{r3}
 8010730:	469e      	mov	lr, r3
 8010732:	4770      	bx	lr

08010734 <_fini>:
 8010734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010736:	46c0      	nop			; (mov r8, r8)
 8010738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801073a:	bc08      	pop	{r3}
 801073c:	469e      	mov	lr, r3
 801073e:	4770      	bx	lr
